
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

int __weak z_clock_device_ctrl(struct device *device,
				 u32_t ctrl_command, void *context)
{
	return 0;
}
       0:	2000c9b0 	.word	0x2000c9b0
       4:	0000687d 	.word	0x0000687d
       8:	000068e1 	.word	0x000068e1
       c:	00006709 	.word	0x00006709
      10:	00006709 	.word	0x00006709
      14:	00006709 	.word	0x00006709
      18:	00006709 	.word	0x00006709
      1c:	00006709 	.word	0x00006709
      20:	00006709 	.word	0x00006709
      24:	00006709 	.word	0x00006709
      28:	00006709 	.word	0x00006709
      2c:	00006339 	.word	0x00006339
      30:	00006709 	.word	0x00006709
      34:	00006709 	.word	0x00006709
      38:	000062f5 	.word	0x000062f5
      3c:	00006709 	.word	0x00006709

00000040 <_irq_vector_table>:
      40:	00006841 0001ae93 00006841 00006841     Ah......Ah..Ah..
      50:	00006841 00006841 00006841 00006841     Ah..Ah..Ah..Ah..
      60:	00006841 00006841 00006841 00006841     Ah..Ah..Ah..Ah..
      70:	00006841 00006841 00006841 00006841     Ah..Ah..Ah..Ah..
      80:	00006841 00006841 00006841 00006841     Ah..Ah..Ah..Ah..
      90:	00006841 00006841 00006841 00006841     Ah..Ah..Ah..Ah..
      a0:	00006841 00006841 00006841 00006841     Ah..Ah..Ah..Ah..
      b0:	00006841 00006841 00006841 00006841     Ah..Ah..Ah..Ah..
      c0:	00006841 00006841 00006841 00006841     Ah..Ah..Ah..Ah..
      d0:	00006841 00006841 00006841              Ah..Ah..Ah..

000000dc <_sw_isr_table>:
      dc:	00000000 00006071 00000000 00006675     ....q`......uf..
      ec:	00000000 00006675 00000000 00006675     ....uf......uf..
      fc:	00000000 00006675 00000000 00006675     ....uf......uf..
     10c:	00000000 0002ccb1 2000e1d8 0002cacd     ........... ....
     11c:	00000000 00006675 00000000 00006675     ....uf......uf..
     12c:	00000000 00006675 00000000 0001ae59     ....uf......Y...
     13c:	00000000 00006675 20002f4c 0002d34d     ....uf..L/. M...
     14c:	00000000 00006675 00000000 00006675     ....uf......uf..
     15c:	00000000 00006675 00000000 000061ad     ....uf.......a..
     16c:	00000000 00006675 00000000 00006675     ....uf......uf..
     17c:	00000000 00006675 00000000 00006675     ....uf......uf..
     18c:	00000000 00006675 00000000 00006675     ....uf......uf..
     19c:	00000000 0001ae8d 00000000 00006675     ............uf..
     1ac:	00000000 00006675 00000000 00006675     ....uf......uf..
     1bc:	00000000 00006675 00000000 00006675     ....uf......uf..
     1cc:	00000000 00006675 00000000 00006675     ....uf......uf..
     1dc:	00000000 00006675 00000000 00006675     ....uf......uf..
     1ec:	00000000 00006675 00000000 00006675     ....uf......uf..
     1fc:	00000000 00006675 00000000 00006675     ....uf......uf..
     20c:	00000000 00006675                       ....uf..

00000214 <__aeabi_ldivmod>:
     214:	b97b      	cbnz	r3, 236 <__aeabi_ldivmod+0x22>
     216:	b972      	cbnz	r2, 236 <__aeabi_ldivmod+0x22>
     218:	2900      	cmp	r1, #0
     21a:	bfbe      	ittt	lt
     21c:	2000      	movlt	r0, #0
     21e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     222:	e006      	blt.n	232 <__aeabi_ldivmod+0x1e>
     224:	bf08      	it	eq
     226:	2800      	cmpeq	r0, #0
     228:	bf1c      	itt	ne
     22a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     22e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     232:	f000 b9bd 	b.w	5b0 <__aeabi_idiv0>
     236:	f1ad 0c08 	sub.w	ip, sp, #8
     23a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     23e:	2900      	cmp	r1, #0
     240:	db09      	blt.n	256 <__aeabi_ldivmod+0x42>
     242:	2b00      	cmp	r3, #0
     244:	db1a      	blt.n	27c <__aeabi_ldivmod+0x68>
     246:	f000 f84d 	bl	2e4 <__udivmoddi4>
     24a:	f8dd e004 	ldr.w	lr, [sp, #4]
     24e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     252:	b004      	add	sp, #16
     254:	4770      	bx	lr
     256:	4240      	negs	r0, r0
     258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     25c:	2b00      	cmp	r3, #0
     25e:	db1b      	blt.n	298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     260:	f000 f840 	bl	2e4 <__udivmoddi4>
     264:	f8dd e004 	ldr.w	lr, [sp, #4]
     268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     26c:	b004      	add	sp, #16
     26e:	4240      	negs	r0, r0
     270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     274:	4252      	negs	r2, r2
     276:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     27a:	4770      	bx	lr
     27c:	4252      	negs	r2, r2
     27e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     282:	f000 f82f 	bl	2e4 <__udivmoddi4>
     286:	f8dd e004 	ldr.w	lr, [sp, #4]
     28a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     28e:	b004      	add	sp, #16
     290:	4240      	negs	r0, r0
     292:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     296:	4770      	bx	lr
     298:	4252      	negs	r2, r2
     29a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     29e:	f000 f821 	bl	2e4 <__udivmoddi4>
     2a2:	f8dd e004 	ldr.w	lr, [sp, #4]
     2a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2aa:	b004      	add	sp, #16
     2ac:	4252      	negs	r2, r2
     2ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2b2:	4770      	bx	lr

000002b4 <__aeabi_uldivmod>:
     2b4:	b953      	cbnz	r3, 2cc <__aeabi_uldivmod+0x18>
     2b6:	b94a      	cbnz	r2, 2cc <__aeabi_uldivmod+0x18>
     2b8:	2900      	cmp	r1, #0
     2ba:	bf08      	it	eq
     2bc:	2800      	cmpeq	r0, #0
     2be:	bf1c      	itt	ne
     2c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     2c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     2c8:	f000 b972 	b.w	5b0 <__aeabi_idiv0>
     2cc:	f1ad 0c08 	sub.w	ip, sp, #8
     2d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     2d4:	f000 f806 	bl	2e4 <__udivmoddi4>
     2d8:	f8dd e004 	ldr.w	lr, [sp, #4]
     2dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2e0:	b004      	add	sp, #16
     2e2:	4770      	bx	lr

000002e4 <__udivmoddi4>:
     2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2e8:	9e08      	ldr	r6, [sp, #32]
     2ea:	4604      	mov	r4, r0
     2ec:	4688      	mov	r8, r1
     2ee:	2b00      	cmp	r3, #0
     2f0:	d14b      	bne.n	38a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8a>
     2f2:	428a      	cmp	r2, r1
     2f4:	4615      	mov	r5, r2
     2f6:	d967      	bls.n	3c8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc8>
     2f8:	fab2 f282 	clz	r2, r2
     2fc:	b14a      	cbz	r2, 312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     2fe:	f1c2 0720 	rsb	r7, r2, #32
     302:	fa01 f302 	lsl.w	r3, r1, r2
     306:	fa20 f707 	lsr.w	r7, r0, r7
     30a:	4095      	lsls	r5, r2
     30c:	ea47 0803 	orr.w	r8, r7, r3
     310:	4094      	lsls	r4, r2
     312:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     316:	0c23      	lsrs	r3, r4, #16
     318:	fbb8 f7fe 	udiv	r7, r8, lr
     31c:	fa1f fc85 	uxth.w	ip, r5
     320:	fb0e 8817 	mls	r8, lr, r7, r8
     324:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     328:	fb07 f10c 	mul.w	r1, r7, ip
     32c:	4299      	cmp	r1, r3
     32e:	d909      	bls.n	344 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x44>
     330:	18eb      	adds	r3, r5, r3
     332:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
     336:	f080 811b 	bcs.w	570 <CONFIG_NET_TX_STACK_SIZE+0xc0>
     33a:	4299      	cmp	r1, r3
     33c:	f240 8118 	bls.w	570 <CONFIG_NET_TX_STACK_SIZE+0xc0>
     340:	3f02      	subs	r7, #2
     342:	442b      	add	r3, r5
     344:	1a5b      	subs	r3, r3, r1
     346:	b2a4      	uxth	r4, r4
     348:	fbb3 f0fe 	udiv	r0, r3, lr
     34c:	fb0e 3310 	mls	r3, lr, r0, r3
     350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     354:	fb00 fc0c 	mul.w	ip, r0, ip
     358:	45a4      	cmp	ip, r4
     35a:	d909      	bls.n	370 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x70>
     35c:	192c      	adds	r4, r5, r4
     35e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     362:	f080 8107 	bcs.w	574 <CONFIG_NET_TX_STACK_SIZE+0xc4>
     366:	45a4      	cmp	ip, r4
     368:	f240 8104 	bls.w	574 <CONFIG_NET_TX_STACK_SIZE+0xc4>
     36c:	3802      	subs	r0, #2
     36e:	442c      	add	r4, r5
     370:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     374:	eba4 040c 	sub.w	r4, r4, ip
     378:	2700      	movs	r7, #0
     37a:	b11e      	cbz	r6, 384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     37c:	40d4      	lsrs	r4, r2
     37e:	2300      	movs	r3, #0
     380:	e9c6 4300 	strd	r4, r3, [r6]
     384:	4639      	mov	r1, r7
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	428b      	cmp	r3, r1
     38c:	d909      	bls.n	3a2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa2>
     38e:	2e00      	cmp	r6, #0
     390:	f000 80eb 	beq.w	56a <CONFIG_NET_TX_STACK_SIZE+0xba>
     394:	2700      	movs	r7, #0
     396:	e9c6 0100 	strd	r0, r1, [r6]
     39a:	4638      	mov	r0, r7
     39c:	4639      	mov	r1, r7
     39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3a2:	fab3 f783 	clz	r7, r3
     3a6:	2f00      	cmp	r7, #0
     3a8:	d147      	bne.n	43a <CONFIG_BT_RX_STACK_SIZE+0x3a>
     3aa:	428b      	cmp	r3, r1
     3ac:	d302      	bcc.n	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     3ae:	4282      	cmp	r2, r0
     3b0:	f200 80fa 	bhi.w	5a8 <CONFIG_NET_TX_STACK_SIZE+0xf8>
     3b4:	1a84      	subs	r4, r0, r2
     3b6:	eb61 0303 	sbc.w	r3, r1, r3
     3ba:	2001      	movs	r0, #1
     3bc:	4698      	mov	r8, r3
     3be:	2e00      	cmp	r6, #0
     3c0:	d0e0      	beq.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     3c2:	e9c6 4800 	strd	r4, r8, [r6]
     3c6:	e7dd      	b.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     3c8:	b902      	cbnz	r2, 3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     3ca:	deff      	udf	#255	; 0xff
     3cc:	fab2 f282 	clz	r2, r2
     3d0:	2a00      	cmp	r2, #0
     3d2:	f040 808f 	bne.w	4f4 <CONFIG_NET_TX_STACK_SIZE+0x44>
     3d6:	1b49      	subs	r1, r1, r5
     3d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     3dc:	fa1f f885 	uxth.w	r8, r5
     3e0:	2701      	movs	r7, #1
     3e2:	fbb1 fcfe 	udiv	ip, r1, lr
     3e6:	0c23      	lsrs	r3, r4, #16
     3e8:	fb0e 111c 	mls	r1, lr, ip, r1
     3ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     3f0:	fb08 f10c 	mul.w	r1, r8, ip
     3f4:	4299      	cmp	r1, r3
     3f6:	d907      	bls.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     3f8:	18eb      	adds	r3, r5, r3
     3fa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     3fe:	d202      	bcs.n	406 <CONFIG_BT_RX_STACK_SIZE+0x6>
     400:	4299      	cmp	r1, r3
     402:	f200 80cd 	bhi.w	5a0 <CONFIG_NET_TX_STACK_SIZE+0xf0>
     406:	4684      	mov	ip, r0
     408:	1a59      	subs	r1, r3, r1
     40a:	b2a3      	uxth	r3, r4
     40c:	fbb1 f0fe 	udiv	r0, r1, lr
     410:	fb0e 1410 	mls	r4, lr, r0, r1
     414:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     418:	fb08 f800 	mul.w	r8, r8, r0
     41c:	45a0      	cmp	r8, r4
     41e:	d907      	bls.n	430 <CONFIG_BT_RX_STACK_SIZE+0x30>
     420:	192c      	adds	r4, r5, r4
     422:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     426:	d202      	bcs.n	42e <CONFIG_BT_RX_STACK_SIZE+0x2e>
     428:	45a0      	cmp	r8, r4
     42a:	f200 80b6 	bhi.w	59a <CONFIG_NET_TX_STACK_SIZE+0xea>
     42e:	4618      	mov	r0, r3
     430:	eba4 0408 	sub.w	r4, r4, r8
     434:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     438:	e79f      	b.n	37a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7a>
     43a:	f1c7 0c20 	rsb	ip, r7, #32
     43e:	40bb      	lsls	r3, r7
     440:	fa22 fe0c 	lsr.w	lr, r2, ip
     444:	ea4e 0e03 	orr.w	lr, lr, r3
     448:	fa01 f407 	lsl.w	r4, r1, r7
     44c:	fa20 f50c 	lsr.w	r5, r0, ip
     450:	fa21 f30c 	lsr.w	r3, r1, ip
     454:	ea4f 481e 	mov.w	r8, lr, lsr #16
     458:	4325      	orrs	r5, r4
     45a:	fbb3 f9f8 	udiv	r9, r3, r8
     45e:	0c2c      	lsrs	r4, r5, #16
     460:	fb08 3319 	mls	r3, r8, r9, r3
     464:	fa1f fa8e 	uxth.w	sl, lr
     468:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
     46c:	fb09 f40a 	mul.w	r4, r9, sl
     470:	429c      	cmp	r4, r3
     472:	fa02 f207 	lsl.w	r2, r2, r7
     476:	fa00 f107 	lsl.w	r1, r0, r7
     47a:	d90b      	bls.n	494 <CONFIG_BT_RX_STACK_SIZE+0x94>
     47c:	eb1e 0303 	adds.w	r3, lr, r3
     480:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     484:	f080 8087 	bcs.w	596 <CONFIG_NET_TX_STACK_SIZE+0xe6>
     488:	429c      	cmp	r4, r3
     48a:	f240 8084 	bls.w	596 <CONFIG_NET_TX_STACK_SIZE+0xe6>
     48e:	f1a9 0902 	sub.w	r9, r9, #2
     492:	4473      	add	r3, lr
     494:	1b1b      	subs	r3, r3, r4
     496:	b2ad      	uxth	r5, r5
     498:	fbb3 f0f8 	udiv	r0, r3, r8
     49c:	fb08 3310 	mls	r3, r8, r0, r3
     4a0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
     4a4:	fb00 fa0a 	mul.w	sl, r0, sl
     4a8:	45a2      	cmp	sl, r4
     4aa:	d908      	bls.n	4be <CONFIG_NET_TX_STACK_SIZE+0xe>
     4ac:	eb1e 0404 	adds.w	r4, lr, r4
     4b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     4b4:	d26b      	bcs.n	58e <CONFIG_NET_TX_STACK_SIZE+0xde>
     4b6:	45a2      	cmp	sl, r4
     4b8:	d969      	bls.n	58e <CONFIG_NET_TX_STACK_SIZE+0xde>
     4ba:	3802      	subs	r0, #2
     4bc:	4474      	add	r4, lr
     4be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4c2:	fba0 8902 	umull	r8, r9, r0, r2
     4c6:	eba4 040a 	sub.w	r4, r4, sl
     4ca:	454c      	cmp	r4, r9
     4cc:	46c2      	mov	sl, r8
     4ce:	464b      	mov	r3, r9
     4d0:	d354      	bcc.n	57c <CONFIG_NET_TX_STACK_SIZE+0xcc>
     4d2:	d051      	beq.n	578 <CONFIG_NET_TX_STACK_SIZE+0xc8>
     4d4:	2e00      	cmp	r6, #0
     4d6:	d069      	beq.n	5ac <CONFIG_NET_TX_STACK_SIZE+0xfc>
     4d8:	ebb1 050a 	subs.w	r5, r1, sl
     4dc:	eb64 0403 	sbc.w	r4, r4, r3
     4e0:	fa04 fc0c 	lsl.w	ip, r4, ip
     4e4:	40fd      	lsrs	r5, r7
     4e6:	40fc      	lsrs	r4, r7
     4e8:	ea4c 0505 	orr.w	r5, ip, r5
     4ec:	e9c6 5400 	strd	r5, r4, [r6]
     4f0:	2700      	movs	r7, #0
     4f2:	e747      	b.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     4f4:	f1c2 0320 	rsb	r3, r2, #32
     4f8:	fa20 f703 	lsr.w	r7, r0, r3
     4fc:	4095      	lsls	r5, r2
     4fe:	fa01 f002 	lsl.w	r0, r1, r2
     502:	fa21 f303 	lsr.w	r3, r1, r3
     506:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     50a:	4338      	orrs	r0, r7
     50c:	0c01      	lsrs	r1, r0, #16
     50e:	fbb3 f7fe 	udiv	r7, r3, lr
     512:	fa1f f885 	uxth.w	r8, r5
     516:	fb0e 3317 	mls	r3, lr, r7, r3
     51a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     51e:	fb07 f308 	mul.w	r3, r7, r8
     522:	428b      	cmp	r3, r1
     524:	fa04 f402 	lsl.w	r4, r4, r2
     528:	d907      	bls.n	53a <CONFIG_NET_TX_STACK_SIZE+0x8a>
     52a:	1869      	adds	r1, r5, r1
     52c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
     530:	d22f      	bcs.n	592 <CONFIG_NET_TX_STACK_SIZE+0xe2>
     532:	428b      	cmp	r3, r1
     534:	d92d      	bls.n	592 <CONFIG_NET_TX_STACK_SIZE+0xe2>
     536:	3f02      	subs	r7, #2
     538:	4429      	add	r1, r5
     53a:	1acb      	subs	r3, r1, r3
     53c:	b281      	uxth	r1, r0
     53e:	fbb3 f0fe 	udiv	r0, r3, lr
     542:	fb0e 3310 	mls	r3, lr, r0, r3
     546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     54a:	fb00 f308 	mul.w	r3, r0, r8
     54e:	428b      	cmp	r3, r1
     550:	d907      	bls.n	562 <CONFIG_NET_TX_STACK_SIZE+0xb2>
     552:	1869      	adds	r1, r5, r1
     554:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     558:	d217      	bcs.n	58a <CONFIG_NET_TX_STACK_SIZE+0xda>
     55a:	428b      	cmp	r3, r1
     55c:	d915      	bls.n	58a <CONFIG_NET_TX_STACK_SIZE+0xda>
     55e:	3802      	subs	r0, #2
     560:	4429      	add	r1, r5
     562:	1ac9      	subs	r1, r1, r3
     564:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     568:	e73b      	b.n	3e2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe2>
     56a:	4637      	mov	r7, r6
     56c:	4630      	mov	r0, r6
     56e:	e709      	b.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     570:	4607      	mov	r7, r0
     572:	e6e7      	b.n	344 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x44>
     574:	4618      	mov	r0, r3
     576:	e6fb      	b.n	370 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x70>
     578:	4541      	cmp	r1, r8
     57a:	d2ab      	bcs.n	4d4 <CONFIG_NET_TX_STACK_SIZE+0x24>
     57c:	ebb8 0a02 	subs.w	sl, r8, r2
     580:	eb69 020e 	sbc.w	r2, r9, lr
     584:	3801      	subs	r0, #1
     586:	4613      	mov	r3, r2
     588:	e7a4      	b.n	4d4 <CONFIG_NET_TX_STACK_SIZE+0x24>
     58a:	4660      	mov	r0, ip
     58c:	e7e9      	b.n	562 <CONFIG_NET_TX_STACK_SIZE+0xb2>
     58e:	4618      	mov	r0, r3
     590:	e795      	b.n	4be <CONFIG_NET_TX_STACK_SIZE+0xe>
     592:	4667      	mov	r7, ip
     594:	e7d1      	b.n	53a <CONFIG_NET_TX_STACK_SIZE+0x8a>
     596:	4681      	mov	r9, r0
     598:	e77c      	b.n	494 <CONFIG_BT_RX_STACK_SIZE+0x94>
     59a:	3802      	subs	r0, #2
     59c:	442c      	add	r4, r5
     59e:	e747      	b.n	430 <CONFIG_BT_RX_STACK_SIZE+0x30>
     5a0:	f1ac 0c02 	sub.w	ip, ip, #2
     5a4:	442b      	add	r3, r5
     5a6:	e72f      	b.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     5a8:	4638      	mov	r0, r7
     5aa:	e708      	b.n	3be <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbe>
     5ac:	4637      	mov	r7, r6
     5ae:	e6e9      	b.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>

000005b0 <__aeabi_idiv0>:
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop

000005b4 <bt_connect_cb>:
static bool bt_connected;

static
void bt_connect_cb(struct bt_conn *conn, u8_t err)
{
	bt_connected = true;
     5b4:	4b01      	ldr	r3, [pc, #4]	; (5bc <bt_connect_cb+0x8>)
     5b6:	2201      	movs	r2, #1
     5b8:	701a      	strb	r2, [r3, #0]
}
     5ba:	4770      	bx	lr
     5bc:	20000000 	.word	0x20000000

000005c0 <bt_disconnect_cb>:

static
void bt_disconnect_cb(struct bt_conn *conn, u8_t reason)
{
	bt_connected = false;
     5c0:	4b02      	ldr	r3, [pc, #8]	; (5cc <bt_disconnect_cb+0xc>)
	printk("bt disconnected (reason %u)\n", reason);
     5c2:	4803      	ldr	r0, [pc, #12]	; (5d0 <bt_disconnect_cb+0x10>)
	bt_connected = false;
     5c4:	2200      	movs	r2, #0
     5c6:	701a      	strb	r2, [r3, #0]
	printk("bt disconnected (reason %u)\n", reason);
     5c8:	f000 bf5c 	b.w	1484 <printk>
     5cc:	20000000 	.word	0x20000000
     5d0:	0002f1b3 	.word	0x0002f1b3

000005d4 <main>:

	return 0;
}

void main(void)
{
     5d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int rc;
  printk("Test\n");
     5d6:	482d      	ldr	r0, [pc, #180]	; (68c <CONFIG_BT_CTLR_COMPANY_ID+0x9b>)
     5d8:	f000 ff54 	bl	1484 <printk>
	rc = bt_enable(NULL);
     5dc:	2000      	movs	r0, #0
     5de:	f009 fe71 	bl	a2c4 <bt_enable>
	if (rc && rc != -EALREADY) {
     5e2:	4604      	mov	r4, r0
     5e4:	b378      	cbz	r0, 646 <CONFIG_BT_CTLR_COMPANY_ID+0x55>
     5e6:	f110 0f45 	cmn.w	r0, #69	; 0x45
     5ea:	d02c      	beq.n	646 <CONFIG_BT_CTLR_COMPANY_ID+0x55>
		printk("bluetooth init failed\n");
     5ec:	4828      	ldr	r0, [pc, #160]	; (690 <CONFIG_BT_CTLR_COMPANY_ID+0x9f>)
     5ee:	f000 ff49 	bl	1484 <printk>
	rc = network_setup();
	PRINT_RESULT("network_setup", rc);
     5f2:	4b28      	ldr	r3, [pc, #160]	; (694 <CONFIG_BT_CTLR_COMPANY_ID+0xa3>)
     5f4:	4928      	ldr	r1, [pc, #160]	; (698 <CONFIG_BT_CTLR_COMPANY_ID+0xa7>)
     5f6:	4829      	ldr	r0, [pc, #164]	; (69c <CONFIG_BT_CTLR_COMPANY_ID+0xab>)
     5f8:	e9cd 4300 	strd	r4, r3, [sp]
     5fc:	2268      	movs	r2, #104	; 0x68
     5fe:	4b28      	ldr	r3, [pc, #160]	; (6a0 <CONFIG_BT_CTLR_COMPANY_ID+0xaf>)
     600:	f000 ff40 	bl	1484 <printk>
	if (rc < 0) {
     604:	2c00      	cmp	r4, #0
     606:	db3f      	blt.n	688 <CONFIG_BT_CTLR_COMPANY_ID+0x97>
		return;
	}

	tb_pubsub_start();
     608:	f000 fb64 	bl	cd4 <tb_pubsub_start>
	sensors_start();
     60c:	f000 f904 	bl	818 <sensors_start>

  while (true) {
    k_sleep(ATTR_UPDATE_INTERVAL);
    printk("Updating attributes\n");
     610:	4e24      	ldr	r6, [pc, #144]	; (6a4 <CONFIG_BT_CTLR_COMPANY_ID+0xb3>)
	snprintk(payload, sizeof(payload), "{\"firmware_version\":\"%s\", \"serial_number\":\"%s\", \"uptime\":\"%d\"}",
     612:	4d25      	ldr	r5, [pc, #148]	; (6a8 <CONFIG_BT_CTLR_COMPANY_ID+0xb7>)
     614:	4c25      	ldr	r4, [pc, #148]	; (6ac <CONFIG_BT_CTLR_COMPANY_ID+0xbb>)

K_SYSCALL_DECLARE1(K_SYSCALL_K_OBJECT_ALLOC, k_object_alloc, void *, enum k_objects, otype)

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)

K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
     616:	201e      	movs	r0, #30
     618:	f02d fdba 	bl	2e190 <_impl_k_sleep>
    printk("Updating attributes\n");
     61c:	4630      	mov	r0, r6
     61e:	f000 ff31 	bl	1484 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_USER_DATA_GET, k_timer_user_data_get, void *, struct k_timer *, timer)

K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)

K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
     622:	f02e f9d3 	bl	2e9cc <_impl_k_uptime_get_32>
	snprintk(payload, sizeof(payload), "{\"firmware_version\":\"%s\", \"serial_number\":\"%s\", \"uptime\":\"%d\"}",
     626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     62a:	4a21      	ldr	r2, [pc, #132]	; (6b0 <CONFIG_BT_CTLR_COMPANY_ID+0xbf>)
     62c:	fbb0 f0f3 	udiv	r0, r0, r3
     630:	2180      	movs	r1, #128	; 0x80
     632:	e9cd 5000 	strd	r5, r0, [sp]
     636:	4b1f      	ldr	r3, [pc, #124]	; (6b4 <CONFIG_BT_CTLR_COMPANY_ID+0xc3>)
     638:	4620      	mov	r0, r4
     63a:	f000 ff31 	bl	14a0 <snprintk>
	tb_publish_attributes(payload);
     63e:	4620      	mov	r0, r4
     640:	f000 fb0c 	bl	c5c <tb_publish_attributes>
     644:	e7e7      	b.n	616 <CONFIG_BT_CTLR_COMPANY_ID+0x25>
	bt_conn_cb_register(&bt_conn_cb);
     646:	481c      	ldr	r0, [pc, #112]	; (6b8 <CONFIG_BT_CTLR_COMPANY_ID+0xc7>)
	while (bt_connected == false) {
     648:	4f1c      	ldr	r7, [pc, #112]	; (6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>)
		printk("%c\b", progress_mark[i]);
     64a:	4d1d      	ldr	r5, [pc, #116]	; (6c0 <CONFIG_BT_CTLR_COMPANY_ID+0xcf>)
     64c:	4e1d      	ldr	r6, [pc, #116]	; (6c4 <CONFIG_BT_CTLR_COMPANY_ID+0xd3>)
	bt_conn_cb_register(&bt_conn_cb);
     64e:	f00a fa0f 	bl	aa70 <bt_conn_cb_register>
	printk("\nwaiting for bt connection: ");
     652:	481d      	ldr	r0, [pc, #116]	; (6c8 <CONFIG_BT_CTLR_COMPANY_ID+0xd7>)
     654:	f000 ff16 	bl	1484 <printk>
	int i = 0;
     658:	2400      	movs	r4, #0
	while (bt_connected == false) {
     65a:	783b      	ldrb	r3, [r7, #0]
     65c:	b12b      	cbz	r3, 66a <CONFIG_BT_CTLR_COMPANY_ID+0x79>
	printk("\n");
     65e:	481b      	ldr	r0, [pc, #108]	; (6cc <CONFIG_BT_CTLR_COMPANY_ID+0xdb>)
     660:	f000 ff10 	bl	1484 <printk>
	return 0;
     664:	2400      	movs	r4, #0
	PRINT_RESULT("network_setup", rc);
     666:	4b1a      	ldr	r3, [pc, #104]	; (6d0 <CONFIG_BT_CTLR_COMPANY_ID+0xdf>)
     668:	e7c4      	b.n	5f4 <CONFIG_BT_CTLR_COMPANY_ID+0x3>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
     66a:	20fa      	movs	r0, #250	; 0xfa
     66c:	f02d fd90 	bl	2e190 <_impl_k_sleep>
		printk("%c\b", progress_mark[i]);
     670:	5d29      	ldrb	r1, [r5, r4]
     672:	4630      	mov	r0, r6
     674:	f000 ff06 	bl	1484 <printk>
		i = (i + 1) % (sizeof(progress_mark) - 1);
     678:	3401      	adds	r4, #1
     67a:	2303      	movs	r3, #3
     67c:	fbb4 f3f3 	udiv	r3, r4, r3
     680:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     684:	1ae4      	subs	r4, r4, r3
     686:	e7e8      	b.n	65a <CONFIG_BT_CTLR_COMPANY_ID+0x69>
    update_attributes();
  }
}
     688:	b003      	add	sp, #12
     68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     68c:	0002f1d9 	.word	0x0002f1d9
     690:	0002f1df 	.word	0x0002f1df
     694:	0002f1d3 	.word	0x0002f1d3
     698:	0002f1ae 	.word	0x0002f1ae
     69c:	0002f22a 	.word	0x0002f22a
     6a0:	0002f21c 	.word	0x0002f21c
     6a4:	0002f23f 	.word	0x0002f23f
     6a8:	0002f299 	.word	0x0002f299
     6ac:	20000001 	.word	0x20000001
     6b0:	0002f25a 	.word	0x0002f25a
     6b4:	0002f254 	.word	0x0002f254
     6b8:	2000d6f0 	.word	0x2000d6f0
     6bc:	20000000 	.word	0x20000000
     6c0:	0002f213 	.word	0x0002f213
     6c4:	0002f218 	.word	0x0002f218
     6c8:	0002f1f6 	.word	0x0002f1f6
     6cc:	0002fe01 	.word	0x0002fe01
     6d0:	0002f1d0 	.word	0x0002f1d0

000006d4 <sensor_timer_handler>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     6d4:	4909      	ldr	r1, [pc, #36]	; (6fc <sensor_timer_handler+0x28>)
     6d6:	f3bf 8f5b 	dmb	ish
     6da:	e851 3f00 	ldrex	r3, [r1]
     6de:	f043 0201 	orr.w	r2, r3, #1
     6e2:	e841 2000 	strex	r0, r2, [r1]
     6e6:	2800      	cmp	r0, #0
     6e8:	d1f7      	bne.n	6da <sensor_timer_handler+0x6>
     6ea:	f3bf 8f5b 	dmb	ish
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
     6ee:	07db      	lsls	r3, r3, #31
     6f0:	d403      	bmi.n	6fa <sensor_timer_handler+0x26>
		k_queue_append(&work_q->queue, work);
     6f2:	3908      	subs	r1, #8
     6f4:	4802      	ldr	r0, [pc, #8]	; (700 <sensor_timer_handler+0x2c>)
     6f6:	f02d baa1 	b.w	2dc3c <k_queue_append>
K_WORK_DEFINE(sensor_work, sensor_work_handler);

void sensor_timer_handler(struct k_timer *sensor_timer)
{
	k_work_submit(&sensor_work);
}
     6fa:	4770      	bx	lr
     6fc:	2000e470 	.word	0x2000e470
     700:	200037b0 	.word	0x200037b0

00000704 <sample_sensor>:
{
     704:	b530      	push	{r4, r5, lr}
     706:	b087      	sub	sp, #28
     708:	4604      	mov	r4, r0
	const struct adc_sequence sequence = {
     70a:	2214      	movs	r2, #20
     70c:	2100      	movs	r1, #0
     70e:	a801      	add	r0, sp, #4
     710:	f006 fae7 	bl	6ce2 <memset>
		.channels    = BIT(channel_id),
     714:	2001      	movs	r0, #1
     716:	40a0      	lsls	r0, r4
	const struct adc_sequence sequence = {
     718:	230c      	movs	r3, #12
     71a:	9002      	str	r0, [sp, #8]
     71c:	9304      	str	r3, [sp, #16]
     71e:	4d1a      	ldr	r5, [pc, #104]	; (788 <sample_sensor+0x84>)
	struct device *adc_dev = device_get_binding(ADC_DEVICE_NAME);
     720:	481a      	ldr	r0, [pc, #104]	; (78c <sample_sensor+0x88>)
	const struct adc_sequence sequence = {
     722:	9503      	str	r5, [sp, #12]
     724:	230a      	movs	r3, #10
     726:	f88d 3014 	strb.w	r3, [sp, #20]
	struct device *adc_dev = device_get_binding(ADC_DEVICE_NAME);
     72a:	f02c fead 	bl	2d488 <device_get_binding>
	if (!adc_dev) {
     72e:	4604      	mov	r4, r0
     730:	b980      	cbnz	r0, 754 <sample_sensor+0x50>
		printk("Cannot get ADC device");
     732:	4817      	ldr	r0, [pc, #92]	; (790 <sample_sensor+0x8c>)
     734:	f000 fea6 	bl	1484 <printk>
static inline int adc_read(struct device *dev,
			   const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api = dev->driver_api;

	return api->read(dev, sequence);
     738:	6863      	ldr	r3, [r4, #4]
     73a:	a901      	add	r1, sp, #4
     73c:	685b      	ldr	r3, [r3, #4]
     73e:	4620      	mov	r0, r4
     740:	4798      	blx	r3
	if (ret) {
     742:	4601      	mov	r1, r0
     744:	b110      	cbz	r0, 74c <sample_sensor+0x48>
		printk("Failed to read ADC with code %d", ret);
     746:	4813      	ldr	r0, [pc, #76]	; (794 <sample_sensor+0x90>)
     748:	f000 fe9c 	bl	1484 <printk>
	return m_sample_buffer[0];
     74c:	f9b5 0000 	ldrsh.w	r0, [r5]
}
     750:	b007      	add	sp, #28
     752:	bd30      	pop	{r4, r5, pc}
	return api->channel_setup(dev, channel_cfg);
     754:	6843      	ldr	r3, [r0, #4]
     756:	4910      	ldr	r1, [pc, #64]	; (798 <sample_sensor+0x94>)
     758:	681b      	ldr	r3, [r3, #0]
     75a:	4798      	blx	r3
	if (ret) {
     75c:	4601      	mov	r1, r0
     75e:	b110      	cbz	r0, 766 <sample_sensor+0x62>
		printk("Setting up of the first channel failed with code %d", ret);
     760:	480e      	ldr	r0, [pc, #56]	; (79c <sample_sensor+0x98>)
     762:	f000 fe8f 	bl	1484 <printk>
     766:	6863      	ldr	r3, [r4, #4]
     768:	490d      	ldr	r1, [pc, #52]	; (7a0 <sample_sensor+0x9c>)
     76a:	681b      	ldr	r3, [r3, #0]
     76c:	4620      	mov	r0, r4
     76e:	4798      	blx	r3
	if (ret) {
     770:	4601      	mov	r1, r0
     772:	b110      	cbz	r0, 77a <sample_sensor+0x76>
		printk("Setting up of the second channel failed with code %d", ret);
     774:	480b      	ldr	r0, [pc, #44]	; (7a4 <sample_sensor+0xa0>)
     776:	f000 fe85 	bl	1484 <printk>
	(void)memset(m_sample_buffer, 0, sizeof(m_sample_buffer));
     77a:	220c      	movs	r2, #12
     77c:	2100      	movs	r1, #0
     77e:	4802      	ldr	r0, [pc, #8]	; (788 <sample_sensor+0x84>)
     780:	f006 faaf 	bl	6ce2 <memset>
     784:	e7d8      	b.n	738 <sample_sensor+0x34>
     786:	bf00      	nop
     788:	20000082 	.word	0x20000082
     78c:	0002f2c2 	.word	0x0002f2c2
     790:	0002f2c8 	.word	0x0002f2c8
     794:	0002f347 	.word	0x0002f347
     798:	0002f2b2 	.word	0x0002f2b2
     79c:	0002f2de 	.word	0x0002f2de
     7a0:	0002f2ba 	.word	0x0002f2ba
     7a4:	0002f312 	.word	0x0002f312

000007a8 <sensor_work_handler>:
{
     7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int temp = k_cycle_get_32() % 3 + 20;
     7aa:	f005 fd61 	bl	6270 <_timer_cycle_get_32>
     7ae:	4607      	mov	r7, r0
	int humidity = (k_cycle_get_32() >> 2) % 5 + 60;
     7b0:	f005 fd5e 	bl	6270 <_timer_cycle_get_32>
     7b4:	4605      	mov	r5, r0
	uint16_t force_sample = sample_sensor(ADC_1ST_CHANNEL_ID);
     7b6:	2000      	movs	r0, #0
     7b8:	f7ff ffa4 	bl	704 <sample_sensor>
     7bc:	4606      	mov	r6, r0
	uint16_t soil_sample = sample_sensor(ADC_2ND_CHANNEL_ID);
     7be:	2002      	movs	r0, #2
     7c0:	f7ff ffa0 	bl	704 <sample_sensor>
	int humidity = (k_cycle_get_32() >> 2) % 5 + 60;
     7c4:	2205      	movs	r2, #5
	uint16_t soil_sample = sample_sensor(ADC_2ND_CHANNEL_ID);
     7c6:	4604      	mov	r4, r0
	int temp = k_cycle_get_32() % 3 + 20;
     7c8:	2103      	movs	r1, #3
	int humidity = (k_cycle_get_32() >> 2) % 5 + 60;
     7ca:	08a8      	lsrs	r0, r5, #2
	int temp = k_cycle_get_32() % 3 + 20;
     7cc:	fbb7 f1f1 	udiv	r1, r7, r1
	int humidity = (k_cycle_get_32() >> 2) % 5 + 60;
     7d0:	fbb0 f2f2 	udiv	r2, r0, r2
	int temp = k_cycle_get_32() % 3 + 20;
     7d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	int humidity = (k_cycle_get_32() >> 2) % 5 + 60;
     7d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     7dc:	1a82      	subs	r2, r0, r2
	int temp = k_cycle_get_32() % 3 + 20;
     7de:	1a79      	subs	r1, r7, r1
	printk("\nTemperature: %d\nHumidity: %d\n", temp, humidity);
     7e0:	323c      	adds	r2, #60	; 0x3c
     7e2:	3114      	adds	r1, #20
     7e4:	4809      	ldr	r0, [pc, #36]	; (80c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc>)
     7e6:	f000 fe4d 	bl	1484 <printk>
	printk("Force Sample: %d\n", force_sample);
     7ea:	b2b1      	uxth	r1, r6
     7ec:	4808      	ldr	r0, [pc, #32]	; (810 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10>)
     7ee:	f000 fe49 	bl	1484 <printk>
	int8_t soil_moisture = (soil_sample/1024) * 100;
     7f2:	f3c4 2185 	ubfx	r1, r4, #10, #6
     7f6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
     7fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
     7fe:	0089      	lsls	r1, r1, #2
	printk("Soil Moisture: %d\%\n", soil_moisture);
     800:	b249      	sxtb	r1, r1
     802:	4804      	ldr	r0, [pc, #16]	; (814 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14>)
}
     804:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("Soil Moisture: %d\%\n", soil_moisture);
     808:	f000 be3c 	b.w	1484 <printk>
     80c:	0002f367 	.word	0x0002f367
     810:	0002f386 	.word	0x0002f386
     814:	0002f398 	.word	0x0002f398

00000818 <sensors_start>:

void sensors_start(void)
{
     818:	b500      	push	{lr}
	struct device *dev = device_get_binding("DHT");
     81a:	480d      	ldr	r0, [pc, #52]	; (850 <sensors_start+0x38>)
{
     81c:	b08d      	sub	sp, #52	; 0x34
	struct device *dev = device_get_binding("DHT");
     81e:	f02c fe33 	bl	2d488 <device_get_binding>
	struct k_timer sensor_timer;

	if(!dev){
     822:	b910      	cbnz	r0, 82a <sensors_start+0x12>
		printk("CAN'T ACCESS DHT11\n");
     824:	480b      	ldr	r0, [pc, #44]	; (854 <sensors_start+0x3c>)
     826:	f000 fe2d 	bl	1484 <printk>
	}

	k_timer_init(&sensor_timer, sensor_timer_handler, NULL);
     82a:	a801      	add	r0, sp, #4
     82c:	2200      	movs	r2, #0
     82e:	490a      	ldr	r1, [pc, #40]	; (858 <sensors_start+0x40>)
     830:	f02e f92c 	bl	2ea8c <k_timer_init>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period)
     834:	f64e 2260 	movw	r2, #60000	; 0xea60
     838:	4611      	mov	r1, r2
     83a:	a801      	add	r0, sp, #4
     83c:	f02e f934 	bl	2eaa8 <_impl_k_timer_start>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     840:	f02d fd0c 	bl	2e25c <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_SUSPEND, k_thread_suspend, k_tid_t, thread)
     844:	f02d fe1a 	bl	2e47c <_impl_k_thread_suspend>
	k_timer_start(&sensor_timer, K_SECONDS(SAMPLE_TIME), K_SECONDS(SAMPLE_TIME));

	k_thread_suspend(k_current_get());
}
     848:	b00d      	add	sp, #52	; 0x34
     84a:	f85d fb04 	ldr.w	pc, [sp], #4
     84e:	bf00      	nop
     850:	0002f3ac 	.word	0x0002f3ac
     854:	0002f3b0 	.word	0x0002f3b0
     858:	000006d5 	.word	0x000006d5

0000085c <subscribe_cb>:
	return rc;
}

static int subscribe_cb(struct mqtt_ctx *ctx, u16_t pkt_id,
		 u8_t items, enum mqtt_qos qos[])
{
     85c:	b507      	push	{r0, r1, r2, lr}
	/* Successful subscription to MQTT topic */

	printk("[%s:%d] <%s> packet id: %u\n", __func__, __LINE__, "MQTT_SUBACK", pkt_id);
     85e:	4b05      	ldr	r3, [pc, #20]	; (874 <subscribe_cb+0x18>)
     860:	9100      	str	r1, [sp, #0]
     862:	22e5      	movs	r2, #229	; 0xe5
     864:	4904      	ldr	r1, [pc, #16]	; (878 <subscribe_cb+0x1c>)
     866:	4805      	ldr	r0, [pc, #20]	; (87c <subscribe_cb+0x20>)
     868:	f000 fe0c 	bl	1484 <printk>
	return 0;
}
     86c:	2000      	movs	r0, #0
     86e:	b003      	add	sp, #12
     870:	f85d fb04 	ldr.w	pc, [sp], #4
     874:	0002f629 	.word	0x0002f629
     878:	0002f40e 	.word	0x0002f40e
     87c:	0002f635 	.word	0x0002f635

00000880 <publish_tx_cb>:
{
     880:	b513      	push	{r0, r1, r4, lr}
     882:	3a04      	subs	r2, #4
     884:	b2d2      	uxtb	r2, r2
     886:	2a03      	cmp	r2, #3
     888:	bf9f      	itttt	ls
     88a:	480a      	ldrls	r0, [pc, #40]	; (8b4 <publish_tx_cb+0x34>)
     88c:	4b0a      	ldrls	r3, [pc, #40]	; (8b8 <publish_tx_cb+0x38>)
     88e:	5684      	ldrsbls	r4, [r0, r2]
     890:	f853 3022 	ldrls.w	r3, [r3, r2, lsl #2]
	printk("[%s:%d] <%s> packet id: %u\n", __func__, __LINE__, str, pkt_id);
     894:	9100      	str	r1, [sp, #0]
{
     896:	bf88      	it	hi
     898:	4b08      	ldrhi	r3, [pc, #32]	; (8bc <publish_tx_cb+0x3c>)
	printk("[%s:%d] <%s> packet id: %u\n", __func__, __LINE__, str, pkt_id);
     89a:	4909      	ldr	r1, [pc, #36]	; (8c0 <publish_tx_cb+0x40>)
     89c:	4809      	ldr	r0, [pc, #36]	; (8c4 <publish_tx_cb+0x44>)
     89e:	f04f 02b8 	mov.w	r2, #184	; 0xb8
{
     8a2:	bf88      	it	hi
     8a4:	f06f 0415 	mvnhi.w	r4, #21
	printk("[%s:%d] <%s> packet id: %u\n", __func__, __LINE__, str, pkt_id);
     8a8:	f000 fdec 	bl	1484 <printk>
}
     8ac:	4620      	mov	r0, r4
     8ae:	b002      	add	sp, #8
     8b0:	bd10      	pop	{r4, pc}
     8b2:	bf00      	nop
     8b4:	0002f3d4 	.word	0x0002f3d4
     8b8:	0002f3c4 	.word	0x0002f3c4
     8bc:	0002f4d5 	.word	0x0002f4d5
     8c0:	0002f3f2 	.word	0x0002f3f2
     8c4:	0002f635 	.word	0x0002f635

000008c8 <malformed_cb>:
 * The signature of this routine must match the malformed callback declared at
 * the mqtt.h header.
 */
static void malformed_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_type)
{
	printk("[%s:%d] pkt_type: %u\n", __func__, __LINE__, pkt_type);
     8c8:	460b      	mov	r3, r1
     8ca:	22f6      	movs	r2, #246	; 0xf6
     8cc:	4901      	ldr	r1, [pc, #4]	; (8d4 <malformed_cb+0xc>)
     8ce:	4802      	ldr	r0, [pc, #8]	; (8d8 <malformed_cb+0x10>)
     8d0:	f000 bdd8 	b.w	1484 <printk>
     8d4:	0002f41b 	.word	0x0002f41b
     8d8:	0002f455 	.word	0x0002f455

000008dc <disconnect_cb>:
	printk("[%s:%d]\n", __func__, __LINE__);
     8dc:	2296      	movs	r2, #150	; 0x96
     8de:	4902      	ldr	r1, [pc, #8]	; (8e8 <disconnect_cb+0xc>)
     8e0:	4802      	ldr	r0, [pc, #8]	; (8ec <disconnect_cb+0x10>)
     8e2:	f000 bdcf 	b.w	1484 <printk>
     8e6:	bf00      	nop
     8e8:	0002f3e4 	.word	0x0002f3e4
     8ec:	0002f44c 	.word	0x0002f44c

000008f0 <publish_rx_cb>:
{
     8f0:	b530      	push	{r4, r5, lr}
	switch (type) {
     8f2:	2b03      	cmp	r3, #3
	msg->msg[msg->msg_len] = 0;
     8f4:	6908      	ldr	r0, [r1, #16]
     8f6:	8a8b      	ldrh	r3, [r1, #20]
     8f8:	f04f 0500 	mov.w	r5, #0
     8fc:	54c5      	strb	r5, [r0, r3]
{
     8fe:	b085      	sub	sp, #20
	printk("[%s:%d] <%s> packet id: %u\n    topic: %s\n    payload: %s\n",
     900:	690b      	ldr	r3, [r1, #16]
     902:	9302      	str	r3, [sp, #8]
     904:	688b      	ldr	r3, [r1, #8]
     906:	4809      	ldr	r0, [pc, #36]	; (92c <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x3>)
     908:	4909      	ldr	r1, [pc, #36]	; (930 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0x7>)
     90a:	e9cd 2300 	strd	r2, r3, [sp]
     90e:	4a09      	ldr	r2, [pc, #36]	; (934 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0xb>)
     910:	4b09      	ldr	r3, [pc, #36]	; (938 <CONFIG_COAP_INIT_ACK_TIMEOUT_MS+0xf>)
     912:	bf08      	it	eq
     914:	4613      	moveq	r3, r2
     916:	f04f 02d8 	mov.w	r2, #216	; 0xd8
		rc = -EINVAL;
     91a:	bf0c      	ite	eq
     91c:	2400      	moveq	r4, #0
     91e:	f06f 0415 	mvnne.w	r4, #21
	printk("[%s:%d] <%s> packet id: %u\n    topic: %s\n    payload: %s\n",
     922:	f000 fdaf 	bl	1484 <printk>
}
     926:	4620      	mov	r0, r4
     928:	b005      	add	sp, #20
     92a:	bd30      	pop	{r4, r5, pc}
     92c:	0002f49b 	.word	0x0002f49b
     930:	0002f400 	.word	0x0002f400
     934:	0002f46b 	.word	0x0002f46b
     938:	0002f478 	.word	0x0002f478

0000093c <connect_cb>:
{
     93c:	b508      	push	{r3, lr}
	printk("[%s:%d]\n", __func__, __LINE__);
     93e:	4805      	ldr	r0, [pc, #20]	; (954 <connect_cb+0x18>)
     940:	4905      	ldr	r1, [pc, #20]	; (958 <connect_cb+0x1c>)
     942:	228c      	movs	r2, #140	; 0x8c
     944:	f000 fd9e 	bl	1484 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_SEM_COUNT_GET, k_sem_count_get, unsigned int, struct k_sem *, sem)

K_SYSCALL_DECLARE2(K_SYSCALL_K_ALERT_RECV, k_alert_recv, int, struct k_alert *, alert, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_ALERT_SEND, k_alert_send, struct k_alert *, alert)
     948:	4804      	ldr	r0, [pc, #16]	; (95c <connect_cb+0x20>)
}
     94a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     94e:	f02c bd55 	b.w	2d3fc <_impl_k_alert_send>
     952:	bf00      	nop
     954:	0002f44c 	.word	0x0002f44c
     958:	0002f3d9 	.word	0x0002f3d9
     95c:	2000e3f4 	.word	0x2000e3f4

00000960 <pubsub_thread>:

/**
 * Thread to manage thingsboard.io communication
 */
void pubsub_thread(void * unused1, void * unused2, void * unused3)
{
     960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	char token[BT_ADDR_STR_LEN];
	struct bt_le_oob oob;
	struct pub_msg pub_msg;

	/* Set everything to 0 and later just assign the required fields. */
	memset(&pubsub_ctx, 0x00, sizeof(pubsub_ctx));
     964:	4c8d      	ldr	r4, [pc, #564]	; (b9c <pubsub_thread+0x23c>)
	/* Must be 1 - 0 not yet supported by Zephyr */
	pubsub_ctx.connect_msg.clean_session = 1;

	/* We are both a MQTT APP PUBLISHER and a MQTT APP SUBSCRIBER!! */
	rc = mqtt_init(&pubsub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER_SUBSCRIBER);
	PRINT_RESULT("mqtt_init", rc);
     966:	4e8e      	ldr	r6, [pc, #568]	; (ba0 <pubsub_thread+0x240>)
{
     968:	b097      	sub	sp, #92	; 0x5c
	memset(&pubsub_ctx, 0x00, sizeof(pubsub_ctx));
     96a:	22dc      	movs	r2, #220	; 0xdc
     96c:	2100      	movs	r1, #0
     96e:	4620      	mov	r0, r4
     970:	f006 f9b7 	bl	6ce2 <memset>
	pubsub_ctx.mqtt_ctx.connect = connect_cb;
     974:	4b8b      	ldr	r3, [pc, #556]	; (ba4 <pubsub_thread+0x244>)
     976:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	pubsub_ctx.mqtt_ctx.disconnect = disconnect_cb;
     97a:	4b8b      	ldr	r3, [pc, #556]	; (ba8 <pubsub_thread+0x248>)
     97c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	pubsub_ctx.mqtt_ctx.malformed = malformed_cb;
     980:	4b8a      	ldr	r3, [pc, #552]	; (bac <pubsub_thread+0x24c>)
     982:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	pubsub_ctx.mqtt_ctx.publish_tx = publish_tx_cb;
     986:	4b8a      	ldr	r3, [pc, #552]	; (bb0 <pubsub_thread+0x250>)
     988:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	pubsub_ctx.mqtt_ctx.publish_rx = publish_rx_cb;
     98c:	4b89      	ldr	r3, [pc, #548]	; (bb4 <pubsub_thread+0x254>)
     98e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	pubsub_ctx.mqtt_ctx.subscribe = subscribe_cb;
     992:	4b89      	ldr	r3, [pc, #548]	; (bb8 <pubsub_thread+0x258>)
     994:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	pubsub_ctx.mqtt_ctx.net_timeout = APP_TX_RX_TIMEOUT;
     998:	f643 2298 	movw	r2, #15000	; 0x3a98
     99c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     9a0:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
	pubsub_ctx.mqtt_ctx.peer_addr_str = SERVER_ADDR;
     9a4:	4b85      	ldr	r3, [pc, #532]	; (bbc <pubsub_thread+0x25c>)
     9a6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	bt_le_oob_get_local(BT_ID_DEFAULT, &oob);
     9aa:	a907      	add	r1, sp, #28
	pubsub_ctx.mqtt_ctx.peer_port = SERVER_PORT;
     9ac:	f240 735b 	movw	r3, #1883	; 0x75b
	bt_le_oob_get_local(BT_ID_DEFAULT, &oob);
     9b0:	2000      	movs	r0, #0
	pubsub_ctx.mqtt_ctx.peer_port = SERVER_PORT;
     9b2:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	bt_le_oob_get_local(BT_ID_DEFAULT, &oob);
     9b6:	f009 ff21 	bl	a7fc <bt_le_oob_get_local>
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_to_str(const bt_addr_t *addr, char *str, size_t len)
{
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
     9ba:	f89d 201d 	ldrb.w	r2, [sp, #29]
     9be:	9204      	str	r2, [sp, #16]
     9c0:	f89d 201e 	ldrb.w	r2, [sp, #30]
     9c4:	9203      	str	r2, [sp, #12]
     9c6:	f89d 201f 	ldrb.w	r2, [sp, #31]
     9ca:	9202      	str	r2, [sp, #8]
     9cc:	f89d 2020 	ldrb.w	r2, [sp, #32]
     9d0:	9201      	str	r2, [sp, #4]
     9d2:	ad09      	add	r5, sp, #36	; 0x24
     9d4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     9d8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     9dc:	9200      	str	r2, [sp, #0]
     9de:	2112      	movs	r1, #18
     9e0:	4a77      	ldr	r2, [pc, #476]	; (bc0 <pubsub_thread+0x260>)
     9e2:	4628      	mov	r0, r5
     9e4:	f000 fd5c 	bl	14a0 <snprintk>
	printk("Connecting with thingsboard.io token: %s\n", token);
     9e8:	4629      	mov	r1, r5
     9ea:	4876      	ldr	r0, [pc, #472]	; (bc4 <pubsub_thread+0x264>)
	pubsub_ctx.connect_msg.user_name = token;
     9ec:	6225      	str	r5, [r4, #32]
	printk("Connecting with thingsboard.io token: %s\n", token);
     9ee:	f000 fd49 	bl	1484 <printk>
	pubsub_ctx.connect_msg.user_name_len = strlen(pubsub_ctx.connect_msg.user_name);
     9f2:	6a20      	ldr	r0, [r4, #32]
	PRINT_RESULT("mqtt_init", rc);
     9f4:	4d74      	ldr	r5, [pc, #464]	; (bc8 <pubsub_thread+0x268>)
	pubsub_ctx.connect_msg.user_name_len = strlen(pubsub_ctx.connect_msg.user_name);
     9f6:	f006 f8f1 	bl	6bdc <strlen>
     9fa:	84a0      	strh	r0, [r4, #36]	; 0x24
	pubsub_ctx.connect_msg.client_id = MQTT_CLIENTID;
     9fc:	4873      	ldr	r0, [pc, #460]	; (bcc <pubsub_thread+0x26c>)
     9fe:	6060      	str	r0, [r4, #4]
	pubsub_ctx.connect_msg.client_id_len = strlen(MQTT_CLIENTID);
     a00:	f006 f8ec 	bl	6bdc <strlen>
	pubsub_ctx.connect_msg.clean_session = 1;
     a04:	7823      	ldrb	r3, [r4, #0]
	pubsub_ctx.connect_msg.client_id_len = strlen(MQTT_CLIENTID);
     a06:	8120      	strh	r0, [r4, #8]
	pubsub_ctx.connect_msg.clean_session = 1;
     a08:	4620      	mov	r0, r4
     a0a:	f043 0301 	orr.w	r3, r3, #1
     a0e:	f800 3b30 	strb.w	r3, [r0], #48
	rc = mqtt_init(&pubsub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER_SUBSCRIBER);
     a12:	2100      	movs	r1, #0
     a14:	f02b fcce 	bl	2c3b4 <mqtt_init>
	PRINT_RESULT("mqtt_init", rc);
     a18:	2800      	cmp	r0, #0
     a1a:	bf14      	ite	ne
     a1c:	462b      	movne	r3, r5
     a1e:	4633      	moveq	r3, r6
     a20:	4607      	mov	r7, r0
     a22:	e9cd 0300 	strd	r0, r3, [sp]
     a26:	f240 122f 	movw	r2, #303	; 0x12f
     a2a:	4b69      	ldr	r3, [pc, #420]	; (bd0 <pubsub_thread+0x270>)
     a2c:	4969      	ldr	r1, [pc, #420]	; (bd4 <pubsub_thread+0x274>)
     a2e:	486a      	ldr	r0, [pc, #424]	; (bd8 <pubsub_thread+0x278>)
     a30:	f000 fd28 	bl	1484 <printk>

	if (rc != 0) {
     a34:	bb07      	cbnz	r7, a78 <pubsub_thread+0x118>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
     a36:	f242 7010 	movw	r0, #10000	; 0x2710
     a3a:	f02d fba9 	bl	2e190 <_impl_k_sleep>
     a3e:	270b      	movs	r7, #11

	/* Open a TCP connection to the thingsboard.io instance */
	i = 0;
	do {
		k_sleep(APP_TX_RX_TIMEOUT);
		rc = mqtt_connect(&pubsub_ctx.mqtt_ctx);
     a40:	f104 0930 	add.w	r9, r4, #48	; 0x30
     a44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     a48:	f02d fba2 	bl	2e190 <_impl_k_sleep>
     a4c:	4648      	mov	r0, r9
     a4e:	f02b fc7b 	bl	2c348 <mqtt_connect>
		PRINT_RESULT("mqtt_connect", rc);
     a52:	2800      	cmp	r0, #0
     a54:	bf14      	ite	ne
     a56:	462b      	movne	r3, r5
     a58:	4633      	moveq	r3, r6
     a5a:	4680      	mov	r8, r0
     a5c:	e9cd 0300 	strd	r0, r3, [sp]
     a60:	f240 123d 	movw	r2, #317	; 0x13d
     a64:	4b5d      	ldr	r3, [pc, #372]	; (bdc <pubsub_thread+0x27c>)
     a66:	495b      	ldr	r1, [pc, #364]	; (bd4 <pubsub_thread+0x274>)
     a68:	485b      	ldr	r0, [pc, #364]	; (bd8 <pubsub_thread+0x278>)
     a6a:	f000 fd0b 	bl	1484 <printk>
	} while (rc != 0 && i++ < APP_CONN_TRIES);
     a6e:	f1b8 0f00 	cmp.w	r8, #0
     a72:	d007      	beq.n	a84 <pubsub_thread+0x124>
     a74:	3f01      	subs	r7, #1
     a76:	d1e5      	bne.n	a44 <pubsub_thread+0xe4>
	/* Close TCP connection */
	rc = mqtt_close(&pubsub_ctx.mqtt_ctx);
	PRINT_RESULT("mqtt_close", rc);

exit_pub:
	printk("\nPublisher terminated!!\n");
     a78:	4859      	ldr	r0, [pc, #356]	; (be0 <pubsub_thread+0x280>)
     a7a:	f000 fd03 	bl	1484 <printk>
}
     a7e:	b017      	add	sp, #92	; 0x5c
     a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		rc = mqtt_tx_connect(&pubsub_ctx.mqtt_ctx, &pubsub_ctx.connect_msg);
     a84:	f8df 9114 	ldr.w	r9, [pc, #276]	; b9c <pubsub_thread+0x23c>
		PRINT_RESULT("mqtt_tx_connect", rc);
     a88:	4f4f      	ldr	r7, [pc, #316]	; (bc8 <pubsub_thread+0x268>)
     a8a:	f8df 8114 	ldr.w	r8, [pc, #276]	; ba0 <pubsub_thread+0x240>
     a8e:	250b      	movs	r5, #11
		rc = mqtt_tx_connect(&pubsub_ctx.mqtt_ctx, &pubsub_ctx.connect_msg);
     a90:	4649      	mov	r1, r9
     a92:	4854      	ldr	r0, [pc, #336]	; (be4 <pubsub_thread+0x284>)
     a94:	f02b fa38 	bl	2bf08 <mqtt_tx_connect>
		PRINT_RESULT("mqtt_tx_connect", rc);
     a98:	2800      	cmp	r0, #0
     a9a:	bf14      	ite	ne
     a9c:	463b      	movne	r3, r7
     a9e:	4643      	moveq	r3, r8
     aa0:	e9cd 0300 	strd	r0, r3, [sp]
     aa4:	4606      	mov	r6, r0
     aa6:	494b      	ldr	r1, [pc, #300]	; (bd4 <pubsub_thread+0x274>)
     aa8:	484b      	ldr	r0, [pc, #300]	; (bd8 <pubsub_thread+0x278>)
     aaa:	4b4f      	ldr	r3, [pc, #316]	; (be8 <pubsub_thread+0x288>)
     aac:	f44f 72a4 	mov.w	r2, #328	; 0x148
     ab0:	f000 fce8 	bl	1484 <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_ALERT_RECV, k_alert_recv, int, struct k_alert *, alert, s32_t, timeout)
     ab4:	f644 6120 	movw	r1, #20000	; 0x4e20
     ab8:	484c      	ldr	r0, [pc, #304]	; (bec <pubsub_thread+0x28c>)
     aba:	f02c fccd 	bl	2d458 <_impl_k_alert_recv>
	} while (rc == 0 && i++ < APP_TX_CONN_TRIES && !pubsub_ctx.mqtt_ctx.connected);
     abe:	b93e      	cbnz	r6, ad0 <pubsub_thread+0x170>
     ac0:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
     ac4:	3d01      	subs	r5, #1
     ac6:	f003 0302 	and.w	r3, r3, #2
     aca:	d001      	beq.n	ad0 <pubsub_thread+0x170>
     acc:	2b00      	cmp	r3, #0
     ace:	d0df      	beq.n	a90 <pubsub_thread+0x130>
	if (!pubsub_ctx.mqtt_ctx.connected) {
     ad0:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
     ad4:	079b      	lsls	r3, r3, #30
     ad6:	d403      	bmi.n	ae0 <pubsub_thread+0x180>
		mqtt_close(&pubsub_ctx.mqtt_ctx);
     ad8:	4842      	ldr	r0, [pc, #264]	; (be4 <pubsub_thread+0x284>)
     ada:	f02b fc7d 	bl	2c3d8 <mqtt_close>
		goto exit_pub;
     ade:	e7cb      	b.n	a78 <pubsub_thread+0x118>
	rc = mqtt_tx_subscribe(&pubsub_ctx.mqtt_ctx, sys_rand32_get(), 1,
     ae0:	f005 f958 	bl	5d94 <sys_rand32_get>
     ae4:	4b42      	ldr	r3, [pc, #264]	; (bf0 <pubsub_thread+0x290>)
     ae6:	9300      	str	r3, [sp, #0]
     ae8:	b281      	uxth	r1, r0
     aea:	4b42      	ldr	r3, [pc, #264]	; (bf4 <pubsub_thread+0x294>)
     aec:	483d      	ldr	r0, [pc, #244]	; (be4 <pubsub_thread+0x284>)
	PRINT_RESULT("mqtt_tx_subscribe", rc);
     aee:	4c36      	ldr	r4, [pc, #216]	; (bc8 <pubsub_thread+0x268>)

K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_ALLOC_INIT, k_msgq_alloc_init, int, struct k_msgq *, q, size_t, msg_size, u32_t, max_msgs)

K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_PUT, k_msgq_put, int, struct k_msgq *, q, void *, data, s32_t, timeout)

K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_GET, k_msgq_get, int, struct k_msgq *, q, void *, data, s32_t, timeout)
     af0:	4e41      	ldr	r6, [pc, #260]	; (bf8 <pubsub_thread+0x298>)
		rc = mqtt_tx_publish(&pubsub_ctx.mqtt_ctx, &pub_msg.mqtt_publish_msg);
     af2:	4f3c      	ldr	r7, [pc, #240]	; (be4 <pubsub_thread+0x284>)
	rc = mqtt_tx_subscribe(&pubsub_ctx.mqtt_ctx, sys_rand32_get(), 1,
     af4:	2201      	movs	r2, #1
     af6:	f02b facb 	bl	2c090 <mqtt_tx_subscribe>
	PRINT_RESULT("mqtt_tx_subscribe", rc);
     afa:	4b29      	ldr	r3, [pc, #164]	; (ba0 <pubsub_thread+0x240>)
     afc:	4935      	ldr	r1, [pc, #212]	; (bd4 <pubsub_thread+0x274>)
     afe:	2800      	cmp	r0, #0
     b00:	bf18      	it	ne
     b02:	4623      	movne	r3, r4
     b04:	e9cd 0300 	strd	r0, r3, [sp]
     b08:	f44f 72ac 	mov.w	r2, #344	; 0x158
     b0c:	4b3b      	ldr	r3, [pc, #236]	; (bfc <pubsub_thread+0x29c>)
     b0e:	4832      	ldr	r0, [pc, #200]	; (bd8 <pubsub_thread+0x278>)
     b10:	f000 fcb8 	bl	1484 <printk>
     b14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     b18:	a90e      	add	r1, sp, #56	; 0x38
     b1a:	4630      	mov	r0, r6
     b1c:	f02c ff4a 	bl	2d9b4 <_impl_k_msgq_get>
	while ((rc = k_msgq_get(&msgq, &pub_msg, K_FOREVER)) == 0) {
     b20:	b328      	cbz	r0, b6e <pubsub_thread+0x20e>
	rc = mqtt_tx_disconnect(&pubsub_ctx.mqtt_ctx);
     b22:	4830      	ldr	r0, [pc, #192]	; (be4 <pubsub_thread+0x284>)
	PRINT_RESULT("mqtt_tx_disconnect", rc);
     b24:	4d1e      	ldr	r5, [pc, #120]	; (ba0 <pubsub_thread+0x240>)
     b26:	4c28      	ldr	r4, [pc, #160]	; (bc8 <pubsub_thread+0x268>)
	rc = mqtt_tx_disconnect(&pubsub_ctx.mqtt_ctx);
     b28:	f02b fa30 	bl	2bf8c <mqtt_tx_disconnect>
	PRINT_RESULT("mqtt_tx_disconnect", rc);
     b2c:	2800      	cmp	r0, #0
     b2e:	bf14      	ite	ne
     b30:	4623      	movne	r3, r4
     b32:	462b      	moveq	r3, r5
     b34:	e9cd 0300 	strd	r0, r3, [sp]
     b38:	f240 1269 	movw	r2, #361	; 0x169
     b3c:	4b30      	ldr	r3, [pc, #192]	; (c00 <pubsub_thread+0x2a0>)
     b3e:	4925      	ldr	r1, [pc, #148]	; (bd4 <pubsub_thread+0x274>)
     b40:	4825      	ldr	r0, [pc, #148]	; (bd8 <pubsub_thread+0x278>)
     b42:	f000 fc9f 	bl	1484 <printk>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
     b46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     b4a:	f02d fb21 	bl	2e190 <_impl_k_sleep>
	rc = mqtt_close(&pubsub_ctx.mqtt_ctx);
     b4e:	4825      	ldr	r0, [pc, #148]	; (be4 <pubsub_thread+0x284>)
     b50:	f02b fc42 	bl	2c3d8 <mqtt_close>
	PRINT_RESULT("mqtt_close", rc);
     b54:	2800      	cmp	r0, #0
     b56:	bf08      	it	eq
     b58:	462c      	moveq	r4, r5
     b5a:	e9cd 0400 	strd	r0, r4, [sp]
     b5e:	4b29      	ldr	r3, [pc, #164]	; (c04 <pubsub_thread+0x2a4>)
     b60:	491c      	ldr	r1, [pc, #112]	; (bd4 <pubsub_thread+0x274>)
     b62:	481d      	ldr	r0, [pc, #116]	; (bd8 <pubsub_thread+0x278>)
     b64:	f240 126f 	movw	r2, #367	; 0x16f
     b68:	f000 fc8c 	bl	1484 <printk>
     b6c:	e784      	b.n	a78 <pubsub_thread+0x118>
		rc = mqtt_tx_publish(&pubsub_ctx.mqtt_ctx, &pub_msg.mqtt_publish_msg);
     b6e:	a910      	add	r1, sp, #64	; 0x40
     b70:	4638      	mov	r0, r7
     b72:	f02b fa51 	bl	2c018 <mqtt_tx_publish>
     b76:	4605      	mov	r5, r0
		k_mem_pool_free(&pub_msg.mem_block);
     b78:	a80e      	add	r0, sp, #56	; 0x38
     b7a:	f02c fea9 	bl	2d8d0 <k_mem_pool_free>
		PRINT_RESULT("mqtt_tx_publish", rc);
     b7e:	4b08      	ldr	r3, [pc, #32]	; (ba0 <pubsub_thread+0x240>)
     b80:	4914      	ldr	r1, [pc, #80]	; (bd4 <pubsub_thread+0x274>)
     b82:	4815      	ldr	r0, [pc, #84]	; (bd8 <pubsub_thread+0x278>)
     b84:	2d00      	cmp	r5, #0
     b86:	bf18      	it	ne
     b88:	4623      	movne	r3, r4
     b8a:	e9cd 5300 	strd	r5, r3, [sp]
     b8e:	f44f 72b1 	mov.w	r2, #354	; 0x162
     b92:	4b1d      	ldr	r3, [pc, #116]	; (c08 <pubsub_thread+0x2a8>)
     b94:	f000 fc76 	bl	1484 <printk>
     b98:	e7bc      	b.n	b14 <pubsub_thread+0x1b4>
     b9a:	bf00      	nop
     b9c:	20000090 	.word	0x20000090
     ba0:	0002f1d0 	.word	0x0002f1d0
     ba4:	0000093d 	.word	0x0000093d
     ba8:	000008dd 	.word	0x000008dd
     bac:	000008c9 	.word	0x000008c9
     bb0:	00000881 	.word	0x00000881
     bb4:	000008f1 	.word	0x000008f1
     bb8:	0000085d 	.word	0x0000085d
     bbc:	0002f4e9 	.word	0x0002f4e9
     bc0:	0002f501 	.word	0x0002f501
     bc4:	0002f51f 	.word	0x0002f51f
     bc8:	0002f1d3 	.word	0x0002f1d3
     bcc:	0002f549 	.word	0x0002f549
     bd0:	0002f55a 	.word	0x0002f55a
     bd4:	0002f428 	.word	0x0002f428
     bd8:	0002f22a 	.word	0x0002f22a
     bdc:	0002f564 	.word	0x0002f564
     be0:	0002f5c1 	.word	0x0002f5c1
     be4:	200000c0 	.word	0x200000c0
     be8:	0002f571 	.word	0x0002f571
     bec:	2000e3f4 	.word	0x2000e3f4
     bf0:	0002f3d8 	.word	0x0002f3d8
     bf4:	2000d70c 	.word	0x2000d70c
     bf8:	2000e440 	.word	0x2000e440
     bfc:	0002f581 	.word	0x0002f581
     c00:	0002f5a3 	.word	0x0002f5a3
     c04:	0002f5b6 	.word	0x0002f5b6
     c08:	0002f593 	.word	0x0002f593

00000c0c <prepare_msg>:

int prepare_msg(struct pub_msg *pub_msg, const char *topic, const char *payload)
{
     c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c0e:	4604      	mov	r4, r0
	/* allocate a buffer (block) for the message */
	if (k_mem_pool_alloc(&pub_pool, &pub_msg->mem_block, strlen(payload), K_NO_WAIT) == 0)
     c10:	4610      	mov	r0, r2
{
     c12:	460e      	mov	r6, r1
     c14:	4617      	mov	r7, r2
	if (k_mem_pool_alloc(&pub_pool, &pub_msg->mem_block, strlen(payload), K_NO_WAIT) == 0)
     c16:	f005 ffe1 	bl	6bdc <strlen>
     c1a:	2300      	movs	r3, #0
     c1c:	4602      	mov	r2, r0
     c1e:	4621      	mov	r1, r4
     c20:	480d      	ldr	r0, [pc, #52]	; (c58 <prepare_msg+0x4c>)
     c22:	f02c fdbd 	bl	2d7a0 <k_mem_pool_alloc>
     c26:	4605      	mov	r5, r0
     c28:	b998      	cbnz	r0, c52 <prepare_msg+0x46>
	{
		/* copy the payload to the allocated buffer */
		strcpy(pub_msg->mem_block.data, payload);
     c2a:	4639      	mov	r1, r7
     c2c:	6820      	ldr	r0, [r4, #0]
     c2e:	f005 ff9d 	bl	6b6c <strcpy>

		/* prepare the remainder of the message descriptor */
		pub_msg->mqtt_publish_msg.msg = pub_msg->mem_block.data;
     c32:	6820      	ldr	r0, [r4, #0]
     c34:	61a0      	str	r0, [r4, #24]
		pub_msg->mqtt_publish_msg.msg_len = strlen(pub_msg->mqtt_publish_msg.msg);
     c36:	f005 ffd1 	bl	6bdc <strlen>
		pub_msg->mqtt_publish_msg.qos = MQTT_QoS0;
     c3a:	7265      	strb	r5, [r4, #9]
		pub_msg->mqtt_publish_msg.msg_len = strlen(pub_msg->mqtt_publish_msg.msg);
     c3c:	83a0      	strh	r0, [r4, #28]
		pub_msg->mqtt_publish_msg.topic = topic;
     c3e:	6126      	str	r6, [r4, #16]
		pub_msg->mqtt_publish_msg.topic_len = strlen(pub_msg->mqtt_publish_msg.topic);
     c40:	4630      	mov	r0, r6
     c42:	f005 ffcb 	bl	6bdc <strlen>
     c46:	82a0      	strh	r0, [r4, #20]
		pub_msg->mqtt_publish_msg.pkt_id = sys_rand32_get();
     c48:	f005 f8a4 	bl	5d94 <sys_rand32_get>
     c4c:	81a0      	strh	r0, [r4, #12]

		return 0;
	} else {
		return -ENOMEM;
	}
}
     c4e:	4628      	mov	r0, r5
     c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
     c52:	f06f 050b 	mvn.w	r5, #11
     c56:	e7fa      	b.n	c4e <prepare_msg+0x42>
     c58:	2000e34c 	.word	0x2000e34c

00000c5c <tb_publish_attributes>:

void tb_publish_attributes(const char * attr_payload)
{
     c5c:	b530      	push	{r4, r5, lr}
     c5e:	b08b      	sub	sp, #44	; 0x2c
	struct pub_msg pub_msg;
	int rc;

	/* Prepare the pub_msg descriptor for telemetry */
	rc = prepare_msg(&pub_msg, TB_ATTRIBUTES_TOPIC, attr_payload);
     c60:	4602      	mov	r2, r0
{
     c62:	4605      	mov	r5, r0
	rc = prepare_msg(&pub_msg, TB_ATTRIBUTES_TOPIC, attr_payload);
     c64:	4913      	ldr	r1, [pc, #76]	; (cb4 <tb_publish_attributes+0x58>)
     c66:	a802      	add	r0, sp, #8
     c68:	f7ff ffd0 	bl	c0c <prepare_msg>

	if (rc != 0) {
     c6c:	4604      	mov	r4, r0
     c6e:	b158      	cbz	r0, c88 <tb_publish_attributes+0x2c>
		PRINT_RESULT("prepare_msg", rc);
     c70:	4b11      	ldr	r3, [pc, #68]	; (cb8 <tb_publish_attributes+0x5c>)
     c72:	e9cd 0300 	strd	r0, r3, [sp]
     c76:	4b11      	ldr	r3, [pc, #68]	; (cbc <tb_publish_attributes+0x60>)
     c78:	f44f 72ca 	mov.w	r2, #404	; 0x194
	/* If we couldn't send it to the message queue, we need to free memory
	 * that was allocated for the JSON payload */

	if (rc != 0) {
		k_mem_pool_free(&pub_msg.mem_block);
		PRINT_RESULT("k_msgq_put", rc);
     c7c:	4910      	ldr	r1, [pc, #64]	; (cc0 <tb_publish_attributes+0x64>)
     c7e:	4811      	ldr	r0, [pc, #68]	; (cc4 <tb_publish_attributes+0x68>)
     c80:	f000 fc00 	bl	1484 <printk>
	}
}
     c84:	b00b      	add	sp, #44	; 0x2c
     c86:	bd30      	pop	{r4, r5, pc}
	printk("tb_publish_attributes: %s\n", attr_payload);
     c88:	4629      	mov	r1, r5
     c8a:	480f      	ldr	r0, [pc, #60]	; (cc8 <tb_publish_attributes+0x6c>)
     c8c:	f000 fbfa 	bl	1484 <printk>
K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_PUT, k_msgq_put, int, struct k_msgq *, q, void *, data, s32_t, timeout)
     c90:	4622      	mov	r2, r4
     c92:	a902      	add	r1, sp, #8
     c94:	480d      	ldr	r0, [pc, #52]	; (ccc <tb_publish_attributes+0x70>)
     c96:	f02c fe4b 	bl	2d930 <_impl_k_msgq_put>
	if (rc != 0) {
     c9a:	4604      	mov	r4, r0
     c9c:	2800      	cmp	r0, #0
     c9e:	d0f1      	beq.n	c84 <tb_publish_attributes+0x28>
		k_mem_pool_free(&pub_msg.mem_block);
     ca0:	a802      	add	r0, sp, #8
     ca2:	f02c fe15 	bl	2d8d0 <k_mem_pool_free>
		PRINT_RESULT("k_msgq_put", rc);
     ca6:	4b04      	ldr	r3, [pc, #16]	; (cb8 <tb_publish_attributes+0x5c>)
     ca8:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
     cac:	e9cd 4300 	strd	r4, r3, [sp]
     cb0:	4b07      	ldr	r3, [pc, #28]	; (cd0 <tb_publish_attributes+0x74>)
     cb2:	e7e3      	b.n	c7c <tb_publish_attributes+0x20>
     cb4:	0002f651 	.word	0x0002f651
     cb8:	0002f1d3 	.word	0x0002f1d3
     cbc:	0002f66a 	.word	0x0002f66a
     cc0:	0002f436 	.word	0x0002f436
     cc4:	0002f22a 	.word	0x0002f22a
     cc8:	0002f676 	.word	0x0002f676
     ccc:	2000e440 	.word	0x2000e440
     cd0:	0002f691 	.word	0x0002f691

00000cd4 <tb_pubsub_start>:
		PRINT_RESULT("k_msgq_put", rc);
	}
}

void tb_pubsub_start()
{
     cd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
     cd6:	2300      	movs	r3, #0
     cd8:	2205      	movs	r2, #5
     cda:	e9cd 3202 	strd	r3, r2, [sp, #8]
     cde:	e9cd 3304 	strd	r3, r3, [sp, #16]
     ce2:	e9cd 3300 	strd	r3, r3, [sp]
     ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
     cea:	4b04      	ldr	r3, [pc, #16]	; (cfc <tb_pubsub_start+0x28>)
     cec:	4904      	ldr	r1, [pc, #16]	; (d00 <tb_pubsub_start+0x2c>)
     cee:	4805      	ldr	r0, [pc, #20]	; (d04 <tb_pubsub_start+0x30>)
     cf0:	f02d fb94 	bl	2e41c <_impl_k_thread_create>
	k_tid_t tt_tid = k_thread_create(&pubsub_thread_desc, pubsub_stack_area,
                                 K_THREAD_STACK_SIZEOF(pubsub_stack_area),
                                 pubsub_thread,
                                 NULL, NULL, NULL,
                                 PUBSUB_PRIORITY, 0, K_NO_WAIT);
}
     cf4:	b007      	add	sp, #28
     cf6:	f85d fb04 	ldr.w	pc, [sp], #4
     cfa:	bf00      	nop
     cfc:	00000961 	.word	0x00000961
     d00:	20003930 	.word	0x20003930
     d04:	200034a0 	.word	0x200034a0

00000d08 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     d08:	b508      	push	{r3, lr}
     d0a:	4604      	mov	r4, r0
     d0c:	4608      	mov	r0, r1
     d0e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     d10:	461a      	mov	r2, r3
     d12:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     d14:	f02d faa2 	bl	2e25c <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
     d18:	f005 fd6e 	bl	67f8 <_impl_k_thread_abort>

00000d1c <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     d1c:	b570      	push	{r4, r5, r6, lr}
     d1e:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
     d20:	f990 000b 	ldrsb.w	r0, [r0, #11]
     d24:	250c      	movs	r5, #12
     d26:	434d      	muls	r5, r1
		&p->levels[level].bits : p->levels[level].bits_p;
     d28:	4288      	cmp	r0, r1
     d2a:	eb06 0405 	add.w	r4, r6, r5
     d2e:	bfb4      	ite	lt
     d30:	5971      	ldrlt	r1, [r6, r5]
     d32:	4621      	movge	r1, r4

	*word = &bitarray[bn / 32];
     d34:	2420      	movs	r4, #32
     d36:	fb92 f4f4 	sdiv	r4, r2, r4
     d3a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     d3e:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     d40:	f002 001f 	and.w	r0, r2, #31
     d44:	bd70      	pop	{r4, r5, r6, pc}

00000d46 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     d46:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     d48:	ab01      	add	r3, sp, #4
     d4a:	f7ff ffe7 	bl	d1c <get_bit_ptr>

	*word |= (1<<bit);
     d4e:	9a01      	ldr	r2, [sp, #4]
     d50:	2301      	movs	r3, #1
     d52:	fa03 f000 	lsl.w	r0, r3, r0
     d56:	6813      	ldr	r3, [r2, #0]
     d58:	4303      	orrs	r3, r0
     d5a:	6013      	str	r3, [r2, #0]
}
     d5c:	b003      	add	sp, #12
     d5e:	f85d fb04 	ldr.w	pc, [sp], #4

00000d62 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     d62:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     d64:	ab01      	add	r3, sp, #4
     d66:	f7ff ffd9 	bl	d1c <get_bit_ptr>

	*word &= ~(1<<bit);
     d6a:	9a01      	ldr	r2, [sp, #4]
     d6c:	2301      	movs	r3, #1
     d6e:	fa03 f000 	lsl.w	r0, r3, r0
     d72:	6813      	ldr	r3, [r2, #0]
     d74:	ea23 0300 	bic.w	r3, r3, r0
     d78:	6013      	str	r3, [r2, #0]
}
     d7a:	b003      	add	sp, #12
     d7c:	f85d fb04 	ldr.w	pc, [sp], #4

00000d80 <_sys_mem_pool_base_init>:
{
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     d84:	4604      	mov	r4, r0
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     d86:	6843      	ldr	r3, [r0, #4]
     d88:	8905      	ldrh	r5, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
     d8a:	6800      	ldr	r0, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
     d8c:	f894 c00a 	ldrb.w	ip, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     d90:	435d      	muls	r5, r3
	p->max_inline_level = -1;
     d92:	22ff      	movs	r2, #255	; 0xff
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
     d94:	4428      	add	r0, r5
	p->max_inline_level = -1;
     d96:	72e2      	strb	r2, [r4, #11]
	for (i = 0; i < p->n_levels; i++) {
     d98:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     d9a:	f04f 0e0c 	mov.w	lr, #12
	for (i = 0; i < p->n_levels; i++) {
     d9e:	458c      	cmp	ip, r1
     da0:	dc05      	bgt.n	dae <_sys_mem_pool_base_init+0x2e>
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     da2:	2500      	movs	r5, #0
     da4:	8923      	ldrh	r3, [r4, #8]
     da6:	42ab      	cmp	r3, r5
     da8:	dc22      	bgt.n	df0 <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sys_dlist_init(&p->levels[i].free_list);
     dae:	f8d4 800c 	ldr.w	r8, [r4, #12]
		int nblocks = buflen / sz;
     db2:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     db6:	fb0e f701 	mul.w	r7, lr, r1
		if (nblocks < 32) {
     dba:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     dbc:	eb08 0607 	add.w	r6, r8, r7
			bits += (nblocks + 31)/32;
     dc0:	bfc8      	it	gt
     dc2:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     dc4:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     dc8:	f106 0904 	add.w	r9, r6, #4
			bits += (nblocks + 31)/32;
     dcc:	bfc8      	it	gt
     dce:	0952      	lsrgt	r2, r2, #5
		sz = _ALIGN4(sz / 4);
     dd0:	f103 0303 	add.w	r3, r3, #3
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
     dd4:	e9c6 9901 	strd	r9, r9, [r6, #4]
     dd8:	f023 0303 	bic.w	r3, r3, #3
			p->max_inline_level = i;
     ddc:	bfd4      	ite	le
     dde:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     de0:	f848 0007 	strgt.w	r0, [r8, r7]
	for (i = 0; i < p->n_levels; i++) {
     de4:	f101 0101 	add.w	r1, r1, #1
			bits += (nblocks + 31)/32;
     de8:	bfc8      	it	gt
     dea:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
     dee:	e7d6      	b.n	d9e <_sys_mem_pool_base_init+0x1e>
	return (u8_t *)p->buf + lsz * block;
     df0:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     df2:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
     df4:	6820      	ldr	r0, [r4, #0]
     df6:	436a      	muls	r2, r5
     df8:	1881      	adds	r1, r0, r2
		sys_dlist_append(&p->levels[0].free_list, block);
     dfa:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     dfc:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
     dfe:	689a      	ldr	r2, [r3, #8]
     e00:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     e02:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     e04:	4620      	mov	r0, r4
     e06:	6011      	str	r1, [r2, #0]
	list->tail = node;
     e08:	6099      	str	r1, [r3, #8]
     e0a:	462a      	mov	r2, r5
     e0c:	2100      	movs	r1, #0
     e0e:	f7ff ff9a 	bl	d46 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     e12:	3501      	adds	r5, #1
     e14:	e7c6      	b.n	da4 <_sys_mem_pool_base_init+0x24>

00000e16 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     e16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e1a:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     e1c:	7a86      	ldrb	r6, [r0, #10]
{
     e1e:	af00      	add	r7, sp, #0
     e20:	e9c7 3202 	strd	r3, r2, [r7, #8]
	size_t lsizes[p->n_levels];
     e24:	00b3      	lsls	r3, r6, #2
     e26:	330a      	adds	r3, #10
     e28:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
     e2c:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     e30:	6843      	ldr	r3, [r0, #4]
	size_t lsizes[p->n_levels];
     e32:	46e9      	mov	r9, sp
{
     e34:	4604      	mov	r4, r0
	lsizes[0] = _ALIGN4(p->max_sz);
     e36:	3303      	adds	r3, #3
     e38:	4648      	mov	r0, r9
     e3a:	f023 0303 	bic.w	r3, r3, #3
     e3e:	f840 3904 	str.w	r3, [r0], #-4
	int alloc_l = -1, free_l = -1;
     e42:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     e46:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     e48:	f04f 0c0c 	mov.w	ip, #12
     e4c:	1e5a      	subs	r2, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     e4e:	429e      	cmp	r6, r3
     e50:	627a      	str	r2, [r7, #36]	; 0x24
     e52:	dd0a      	ble.n	e6a <_sys_mem_pool_block_alloc+0x54>
		if (i > 0) {
     e54:	b12b      	cbz	r3, e62 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     e56:	6802      	ldr	r2, [r0, #0]
     e58:	0892      	lsrs	r2, r2, #2
     e5a:	3203      	adds	r2, #3
     e5c:	f022 0203 	bic.w	r2, r2, #3
     e60:	6042      	str	r2, [r0, #4]
		}

		if (lsizes[i] < size) {
     e62:	f850 2f04 	ldr.w	r2, [r0, #4]!
     e66:	428a      	cmp	r2, r1
     e68:	d20b      	bcs.n	e82 <_sys_mem_pool_block_alloc+0x6c>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e6c:	3301      	adds	r3, #1
     e6e:	d113      	bne.n	e98 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     e70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     e72:	2300      	movs	r3, #0
     e74:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     e76:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     e7a:	372c      	adds	r7, #44	; 0x2c
     e7c:	46bd      	mov	sp, r7
     e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     e82:	68e2      	ldr	r2, [r4, #12]
     e84:	fb0c 2203 	mla	r2, ip, r3, r2
     e88:	f102 0e04 	add.w	lr, r2, #4
		if (!level_empty(p, i)) {
     e8c:	6852      	ldr	r2, [r2, #4]
     e8e:	4572      	cmp	r2, lr
     e90:	bf18      	it	ne
     e92:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     e94:	3301      	adds	r3, #1
     e96:	e7d9      	b.n	e4c <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     e98:	1c69      	adds	r1, r5, #1
     e9a:	d0e9      	beq.n	e70 <_sys_mem_pool_block_alloc+0x5a>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     e9c:	f894 8010 	ldrb.w	r8, [r4, #16]
	data = block_alloc(p, free_l, lsizes[free_l]);
     ea0:	f859 1025 	ldr.w	r1, [r9, r5, lsl #2]
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     ea4:	f018 0801 	ands.w	r8, r8, #1
     ea8:	d005      	beq.n	eb6 <_sys_mem_pool_block_alloc+0xa0>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     eaa:	f04f 0320 	mov.w	r3, #32
     eae:	f3ef 8811 	mrs	r8, BASEPRI
     eb2:	f383 8811 	msr	BASEPRI, r3
	block = sys_dlist_get(&p->levels[l].free_list);
     eb6:	68e2      	ldr	r2, [r4, #12]
	return list->head == list;
     eb8:	230c      	movs	r3, #12
     eba:	fb03 2305 	mla	r3, r3, r5, r2
     ebe:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
     ec2:	429e      	cmp	r6, r3
     ec4:	d030      	beq.n	f28 <_sys_mem_pool_block_alloc+0x112>
	node->prev->next = node->next;
     ec6:	e9d6 2300 	ldrd	r2, r3, [r6]
     eca:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
     ecc:	6832      	ldr	r2, [r6, #0]
     ece:	6053      	str	r3, [r2, #4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     ed0:	6822      	ldr	r2, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     ed2:	4620      	mov	r0, r4
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     ed4:	1ab2      	subs	r2, r6, r2
		clear_free_bit(p, l, block_num(p, block, lsz));
     ed6:	fb92 f2f1 	sdiv	r2, r2, r1
     eda:	4629      	mov	r1, r5
     edc:	f7ff ff41 	bl	d62 <clear_free_bit>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     ee0:	7c23      	ldrb	r3, [r4, #16]
     ee2:	07da      	lsls	r2, r3, #31
     ee4:	d501      	bpl.n	eea <_sys_mem_pool_block_alloc+0xd4>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     ee6:	f388 8811 	msr	BASEPRI, r8
	if (data == NULL) {
     eea:	2e00      	cmp	r6, #0
     eec:	d06b      	beq.n	fc6 <_sys_mem_pool_block_alloc+0x1b0>
     eee:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     ef2:	f105 0b01 	add.w	fp, r5, #1
     ef6:	613b      	str	r3, [r7, #16]
     ef8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     efe:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
     f02:	429a      	cmp	r2, r3
     f04:	dc12      	bgt.n	f2c <_sys_mem_pool_block_alloc+0x116>
	*level_p = alloc_l;
     f06:	68fb      	ldr	r3, [r7, #12]
     f08:	461a      	mov	r2, r3
     f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f0c:	6013      	str	r3, [r2, #0]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     f0e:	6823      	ldr	r3, [r4, #0]
     f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f12:	1af3      	subs	r3, r6, r3
     f14:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     f18:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     f1c:	68ba      	ldr	r2, [r7, #8]
     f1e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     f22:	2000      	movs	r0, #0
	*data_p = data;
     f24:	601e      	str	r6, [r3, #0]
	return 0;
     f26:	e7a8      	b.n	e7a <_sys_mem_pool_block_alloc+0x64>
	sys_dnode_t *node = NULL;
     f28:	2600      	movs	r6, #0
     f2a:	e7d9      	b.n	ee0 <_sys_mem_pool_block_alloc+0xca>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     f2c:	7c23      	ldrb	r3, [r4, #16]
     f2e:	f013 0301 	ands.w	r3, r3, #1
     f32:	d005      	beq.n	f40 <_sys_mem_pool_block_alloc+0x12a>
	__asm__ volatile(
     f34:	f04f 0220 	mov.w	r2, #32
     f38:	f3ef 8311 	mrs	r3, BASEPRI
     f3c:	f382 8811 	msr	BASEPRI, r2
		return 0;
     f40:	623b      	str	r3, [r7, #32]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     f42:	6823      	ldr	r3, [r4, #0]
	bn = block_num(p, block, lsizes[l]);
     f44:	f855 2b04 	ldr.w	r2, [r5], #4
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     f48:	1af3      	subs	r3, r6, r3
     f4a:	fb93 f3f2 	sdiv	r3, r3, r2
     f4e:	693a      	ldr	r2, [r7, #16]
		int lbn = 4*bn + i;
     f50:	009b      	lsls	r3, r3, #2
     f52:	61bb      	str	r3, [r7, #24]
     f54:	eb05 0345 	add.w	r3, r5, r5, lsl #1
     f58:	4413      	add	r3, r2
     f5a:	617b      	str	r3, [r7, #20]
	for (i = 1; i < 4; i++) {
     f5c:	f04f 0a01 	mov.w	sl, #1
		int lsz = lsizes[l + 1];
     f60:	f8d5 8000 	ldr.w	r8, [r5]
		void *block2 = (lsz * i) + (char *)block;
     f64:	fb0a f308 	mul.w	r3, sl, r8
     f68:	61fb      	str	r3, [r7, #28]
     f6a:	18f3      	adds	r3, r6, r3
     f6c:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     f6e:	69bb      	ldr	r3, [r7, #24]
     f70:	4659      	mov	r1, fp
     f72:	eb03 020a 	add.w	r2, r3, sl
     f76:	4620      	mov	r0, r4
     f78:	f7ff fee5 	bl	d46 <set_free_bit>
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     f7c:	687b      	ldr	r3, [r7, #4]
     f7e:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     f80:	8921      	ldrh	r1, [r4, #8]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     f82:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     f86:	4498      	add	r8, r3
     f88:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     f8c:	6862      	ldr	r2, [r4, #4]
     f8e:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     f90:	4590      	cmp	r8, r2
     f92:	d20a      	bcs.n	faa <_sys_mem_pool_block_alloc+0x194>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     f94:	68e2      	ldr	r2, [r4, #12]
     f96:	6979      	ldr	r1, [r7, #20]
	node->next = list;
     f98:	69f8      	ldr	r0, [r7, #28]
     f9a:	440a      	add	r2, r1
     f9c:	1d11      	adds	r1, r2, #4
     f9e:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     fa0:	6891      	ldr	r1, [r2, #8]
     fa2:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     fa4:	6891      	ldr	r1, [r2, #8]
     fa6:	600b      	str	r3, [r1, #0]
	list->tail = node;
     fa8:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     faa:	f10a 0a01 	add.w	sl, sl, #1
     fae:	f1ba 0f04 	cmp.w	sl, #4
     fb2:	d1d5      	bne.n	f60 <_sys_mem_pool_block_alloc+0x14a>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     fb4:	7c23      	ldrb	r3, [r4, #16]
     fb6:	07db      	lsls	r3, r3, #31
     fb8:	d502      	bpl.n	fc0 <_sys_mem_pool_block_alloc+0x1aa>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     fba:	6a3b      	ldr	r3, [r7, #32]
     fbc:	f383 8811 	msr	BASEPRI, r3
     fc0:	f10b 0b01 	add.w	fp, fp, #1
     fc4:	e79a      	b.n	efc <_sys_mem_pool_block_alloc+0xe6>
		return -EAGAIN;
     fc6:	f06f 000a 	mvn.w	r0, #10
     fca:	e756      	b.n	e7a <_sys_mem_pool_block_alloc+0x64>

00000fcc <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fd0:	b087      	sub	sp, #28
	size_t lsizes[p->n_levels];
     fd2:	7a83      	ldrb	r3, [r0, #10]
     fd4:	009b      	lsls	r3, r3, #2
     fd6:	330a      	adds	r3, #10
     fd8:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
{
     fdc:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     fde:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     fe2:	6843      	ldr	r3, [r0, #4]
	size_t lsizes[p->n_levels];
     fe4:	46eb      	mov	fp, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     fe6:	3303      	adds	r3, #3
     fe8:	f023 0303 	bic.w	r3, r3, #3
{
     fec:	4604      	mov	r4, r0
	lsizes[0] = _ALIGN4(p->max_sz);
     fee:	f8cb 3000 	str.w	r3, [fp]
     ff2:	465d      	mov	r5, fp
	for (i = 1; i <= level; i++) {
     ff4:	2001      	movs	r0, #1
     ff6:	4281      	cmp	r1, r0
     ff8:	d260      	bcs.n	10bc <_sys_mem_pool_block_free+0xf0>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     ffa:	460d      	mov	r5, r1
     ffc:	4616      	mov	r6, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     ffe:	f894 8010 	ldrb.w	r8, [r4, #16]
	int i, key, lsz = lsizes[level];
    1002:	f85b 9025 	ldr.w	r9, [fp, r5, lsl #2]
	void *block = block_ptr(p, lsz, bn);
    1006:	f8d4 a000 	ldr.w	sl, [r4]
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    100a:	f018 0801 	ands.w	r8, r8, #1
    100e:	d005      	beq.n	101c <_sys_mem_pool_block_free+0x50>
	__asm__ volatile(
    1010:	f04f 0320 	mov.w	r3, #32
    1014:	f3ef 8811 	mrs	r8, BASEPRI
    1018:	f383 8811 	msr	BASEPRI, r3
	set_free_bit(p, level, bn);
    101c:	4632      	mov	r2, r6
    101e:	4629      	mov	r1, r5
    1020:	4620      	mov	r0, r4
    1022:	f7ff fe90 	bl	d46 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
    1026:	2d00      	cmp	r5, #0
    1028:	d051      	beq.n	10ce <_sys_mem_pool_block_free+0x102>
	int bit = get_bit_ptr(p, level, bn, &word);
    102a:	f107 0314 	add.w	r3, r7, #20
    102e:	4632      	mov	r2, r6
    1030:	4629      	mov	r1, r5
    1032:	4620      	mov	r0, r4
    1034:	f7ff fe72 	bl	d1c <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
    1038:	697a      	ldr	r2, [r7, #20]
    103a:	2304      	movs	r3, #4
    103c:	fb90 f0f3 	sdiv	r0, r0, r3
    1040:	0083      	lsls	r3, r0, #2
    1042:	6810      	ldr	r0, [r2, #0]
    1044:	40d8      	lsrs	r0, r3
    1046:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
    104a:	280f      	cmp	r0, #15
    104c:	d13f      	bne.n	10ce <_sys_mem_pool_block_free+0x102>
			int b = (bn & ~3) + i;
    104e:	f026 0203 	bic.w	r2, r6, #3
    1052:	60fa      	str	r2, [r7, #12]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
    1054:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
		for (i = 0; i < 4; i++) {
    1058:	2300      	movs	r3, #0
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
    105a:	60ba      	str	r2, [r7, #8]
			int b = (bn & ~3) + i;
    105c:	68fa      	ldr	r2, [r7, #12]
    105e:	607b      	str	r3, [r7, #4]
    1060:	eb02 0a03 	add.w	sl, r2, r3
			clear_free_bit(p, level, b);
    1064:	4652      	mov	r2, sl
    1066:	4629      	mov	r1, r5
    1068:	4620      	mov	r0, r4
    106a:	f7ff fe7a 	bl	d62 <clear_free_bit>
			if (b != bn &&
    106e:	4556      	cmp	r6, sl
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	d016      	beq.n	10a2 <_sys_mem_pool_block_free+0xd6>
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
    1074:	68b9      	ldr	r1, [r7, #8]
	return p->n_max * p->max_sz;
    1076:	f8b4 c008 	ldrh.w	ip, [r4, #8]
			    block_fits(p, block_ptr(p, lsz, b), lsz)) {
    107a:	6822      	ldr	r2, [r4, #0]
	return (u8_t *)p->buf + lsz * block;
    107c:	fb09 fa0a 	mul.w	sl, r9, sl
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
    1080:	eb0a 0001 	add.w	r0, sl, r1
	return p->n_max * p->max_sz;
    1084:	6861      	ldr	r1, [r4, #4]
    1086:	fb01 f10c 	mul.w	r1, r1, ip
			if (b != bn &&
    108a:	4288      	cmp	r0, r1
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
    108c:	eb02 0e0a 	add.w	lr, r2, sl
			if (b != bn &&
    1090:	d207      	bcs.n	10a2 <_sys_mem_pool_block_free+0xd6>
	node->prev->next = node->next;
    1092:	f8de 0004 	ldr.w	r0, [lr, #4]
    1096:	f852 100a 	ldr.w	r1, [r2, sl]
    109a:	6001      	str	r1, [r0, #0]
	node->next->prev = node->prev;
    109c:	f852 200a 	ldr.w	r2, [r2, sl]
    10a0:	6050      	str	r0, [r2, #4]
		for (i = 0; i < 4; i++) {
    10a2:	3301      	adds	r3, #1
    10a4:	2b04      	cmp	r3, #4
    10a6:	d1d9      	bne.n	105c <_sys_mem_pool_block_free+0x90>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    10a8:	7c23      	ldrb	r3, [r4, #16]
    10aa:	07da      	lsls	r2, r3, #31
    10ac:	d501      	bpl.n	10b2 <_sys_mem_pool_block_free+0xe6>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    10ae:	f388 8811 	msr	BASEPRI, r8
		block_free(p, level-1, lsizes, bn / 4);
    10b2:	2304      	movs	r3, #4
    10b4:	3d01      	subs	r5, #1
    10b6:	fb96 f6f3 	sdiv	r6, r6, r3
    10ba:	e7a0      	b.n	ffe <_sys_mem_pool_block_free+0x32>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
    10bc:	682b      	ldr	r3, [r5, #0]
    10be:	089b      	lsrs	r3, r3, #2
    10c0:	3303      	adds	r3, #3
    10c2:	f023 0303 	bic.w	r3, r3, #3
    10c6:	f845 3f04 	str.w	r3, [r5, #4]!
	for (i = 1; i <= level; i++) {
    10ca:	3001      	adds	r0, #1
    10cc:	e793      	b.n	ff6 <_sys_mem_pool_block_free+0x2a>
	return (u8_t *)p->buf + lsz * block;
    10ce:	fb09 f606 	mul.w	r6, r9, r6
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
    10d2:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
    10d4:	6861      	ldr	r1, [r4, #4]
	return (u8_t *)p->buf + lsz * block;
    10d6:	eb0a 0306 	add.w	r3, sl, r6
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
    10da:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    10de:	4499      	add	r9, r3
    10e0:	eba9 0902 	sub.w	r9, r9, r2
	return p->n_max * p->max_sz;
    10e4:	8922      	ldrh	r2, [r4, #8]
    10e6:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
    10e8:	4589      	cmp	r9, r1
    10ea:	d20b      	bcs.n	1104 <_sys_mem_pool_block_free+0x138>
		sys_dlist_append(&p->levels[level].free_list, block);
    10ec:	68e1      	ldr	r1, [r4, #12]
    10ee:	220c      	movs	r2, #12
    10f0:	fb02 1505 	mla	r5, r2, r5, r1
    10f4:	1d2a      	adds	r2, r5, #4
	node->next = list;
    10f6:	f84a 2006 	str.w	r2, [sl, r6]
	node->prev = list->tail;
    10fa:	68aa      	ldr	r2, [r5, #8]
    10fc:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    10fe:	68aa      	ldr	r2, [r5, #8]
    1100:	6013      	str	r3, [r2, #0]
	list->tail = node;
    1102:	60ab      	str	r3, [r5, #8]
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    1104:	7c23      	ldrb	r3, [r4, #16]
    1106:	07db      	lsls	r3, r3, #31
    1108:	d501      	bpl.n	110e <_sys_mem_pool_block_free+0x142>
    110a:	f388 8811 	msr	BASEPRI, r8
}
    110e:	371c      	adds	r7, #28
    1110:	46bd      	mov	sp, r7
    1112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001116 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    1116:	2000      	movs	r0, #0
    1118:	4770      	bx	lr
	...

0000111c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    111c:	680b      	ldr	r3, [r1, #0]
    111e:	3301      	adds	r3, #1
    1120:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1122:	4b01      	ldr	r3, [pc, #4]	; (1128 <char_out+0xc>)
    1124:	681b      	ldr	r3, [r3, #0]
    1126:	4718      	bx	r3
    1128:	2000d710 	.word	0x2000d710

0000112c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    112c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1130:	b085      	sub	sp, #20
    1132:	469b      	mov	fp, r3
    1134:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    1136:	f8df a090 	ldr.w	sl, [pc, #144]	; 11c8 <_printk_dec_ulong+0x9c>
    113a:	2c01      	cmp	r4, #1
    113c:	bfb8      	it	lt
    113e:	2401      	movlt	r4, #1
    1140:	2b01      	cmp	r3, #1
    1142:	bf0c      	ite	eq
    1144:	2330      	moveq	r3, #48	; 0x30
    1146:	2320      	movne	r3, #32
    1148:	4615      	mov	r5, r2
    114a:	4680      	mov	r8, r0
    114c:	4689      	mov	r9, r1
    114e:	9401      	str	r4, [sp, #4]
    1150:	9302      	str	r3, [sp, #8]
    1152:	2601      	movs	r6, #1
    1154:	270a      	movs	r7, #10
    1156:	2200      	movs	r2, #0
    1158:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    115c:	b90a      	cbnz	r2, 1162 <_printk_dec_ulong+0x36>
    115e:	45aa      	cmp	sl, r5
    1160:	d21f      	bcs.n	11a2 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    1162:	fbb5 f0f4 	udiv	r0, r5, r4
    1166:	4649      	mov	r1, r9
    1168:	3030      	adds	r0, #48	; 0x30
    116a:	47c0      	blx	r8
			digits++;
    116c:	3601      	adds	r6, #1
			found_largest_digit = 1;
    116e:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    1170:	3f01      	subs	r7, #1
	while (pos >= 9) {
    1172:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    1174:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    1178:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    117c:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    1180:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    1184:	d1e8      	bne.n	1158 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    1186:	4649      	mov	r1, r9
    1188:	f105 0030 	add.w	r0, r5, #48	; 0x30
    118c:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    118e:	f1bb 0f03 	cmp.w	fp, #3
    1192:	d103      	bne.n	119c <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    1194:	9b01      	ldr	r3, [sp, #4]
    1196:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    1198:	2c00      	cmp	r4, #0
    119a:	dc0f      	bgt.n	11bc <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    119c:	b005      	add	sp, #20
    119e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    11a2:	9b01      	ldr	r3, [sp, #4]
    11a4:	42bb      	cmp	r3, r7
    11a6:	dbe3      	blt.n	1170 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    11a8:	f1bb 0f02 	cmp.w	fp, #2
    11ac:	d8e0      	bhi.n	1170 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    11ae:	4649      	mov	r1, r9
    11b0:	9802      	ldr	r0, [sp, #8]
    11b2:	9203      	str	r2, [sp, #12]
			digits++;
    11b4:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    11b6:	47c0      	blx	r8
			digits++;
    11b8:	9a03      	ldr	r2, [sp, #12]
    11ba:	e7d9      	b.n	1170 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    11bc:	4649      	mov	r1, r9
    11be:	2020      	movs	r0, #32
    11c0:	47c0      	blx	r8
    11c2:	3c01      	subs	r4, #1
    11c4:	e7e8      	b.n	1198 <_printk_dec_ulong+0x6c>
    11c6:	bf00      	nop
    11c8:	3b9ac9ff 	.word	0x3b9ac9ff

000011cc <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    11cc:	b530      	push	{r4, r5, lr}
    11ce:	688a      	ldr	r2, [r1, #8]
	if (!ctx->str || ctx->count >= ctx->max) {
    11d0:	680c      	ldr	r4, [r1, #0]
    11d2:	1c55      	adds	r5, r2, #1
    11d4:	b114      	cbz	r4, 11dc <str_out+0x10>
    11d6:	684b      	ldr	r3, [r1, #4]
    11d8:	4293      	cmp	r3, r2
    11da:	dc01      	bgt.n	11e0 <str_out+0x14>
		ctx->count++;
    11dc:	608d      	str	r5, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
	}

	return c;
}
    11de:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    11e0:	3b01      	subs	r3, #1
    11e2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    11e4:	bf08      	it	eq
    11e6:	2200      	moveq	r2, #0
    11e8:	608d      	str	r5, [r1, #8]
    11ea:	bf0c      	ite	eq
    11ec:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    11ee:	54a0      	strbne	r0, [r4, r2]
    11f0:	e7f5      	b.n	11de <str_out+0x12>
	...

000011f4 <__printk_hook_install>:
	_char_out = fn;
    11f4:	4b01      	ldr	r3, [pc, #4]	; (11fc <__printk_hook_install+0x8>)
    11f6:	6018      	str	r0, [r3, #0]
}
    11f8:	4770      	bx	lr
    11fa:	bf00      	nop
    11fc:	2000d710 	.word	0x2000d710

00001200 <_vprintk>:
{
    1200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1204:	b089      	sub	sp, #36	; 0x24
    1206:	461c      	mov	r4, r3
	int long_ctr = 0;
    1208:	f04f 0a00 	mov.w	sl, #0
    120c:	1e53      	subs	r3, r2, #1
{
    120e:	4606      	mov	r6, r0
    1210:	460f      	mov	r7, r1
    1212:	9304      	str	r3, [sp, #16]
	int min_width = -1;
    1214:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    1218:	46d0      	mov	r8, sl
			might_format = 0;
    121a:	2500      	movs	r5, #0
				break;
    121c:	e005      	b.n	122a <_vprintk+0x2a>
		if (!might_format) {
    121e:	b96d      	cbnz	r5, 123c <_vprintk+0x3c>
			if (*fmt != '%') {
    1220:	2825      	cmp	r0, #37	; 0x25
    1222:	f000 8112 	beq.w	144a <_vprintk+0x24a>
				out((int)*fmt, ctx);
    1226:	4639      	mov	r1, r7
    1228:	47b0      	blx	r6
	while (*fmt) {
    122a:	9b04      	ldr	r3, [sp, #16]
    122c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    1230:	9304      	str	r3, [sp, #16]
    1232:	2800      	cmp	r0, #0
    1234:	d1f3      	bne.n	121e <_vprintk+0x1e>
}
    1236:	b009      	add	sp, #36	; 0x24
    1238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    123c:	2864      	cmp	r0, #100	; 0x64
    123e:	d061      	beq.n	1304 <_vprintk+0x104>
    1240:	d819      	bhi.n	1276 <_vprintk+0x76>
    1242:	2839      	cmp	r0, #57	; 0x39
    1244:	d80a      	bhi.n	125c <_vprintk+0x5c>
    1246:	2831      	cmp	r0, #49	; 0x31
    1248:	d250      	bcs.n	12ec <_vprintk+0xec>
    124a:	282d      	cmp	r0, #45	; 0x2d
    124c:	d03c      	beq.n	12c8 <_vprintk+0xc8>
    124e:	2830      	cmp	r0, #48	; 0x30
    1250:	d03d      	beq.n	12ce <_vprintk+0xce>
    1252:	2825      	cmp	r0, #37	; 0x25
    1254:	d108      	bne.n	1268 <_vprintk+0x68>
				out((int)'%', ctx);
    1256:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    1258:	47b0      	blx	r6
    125a:	e7de      	b.n	121a <_vprintk+0x1a>
			switch (*fmt) {
    125c:	2858      	cmp	r0, #88	; 0x58
    125e:	f000 8088 	beq.w	1372 <_vprintk+0x172>
    1262:	2863      	cmp	r0, #99	; 0x63
    1264:	f000 80eb 	beq.w	143e <_vprintk+0x23e>
				out((int)'%', ctx);
    1268:	4639      	mov	r1, r7
    126a:	2025      	movs	r0, #37	; 0x25
    126c:	47b0      	blx	r6
				out((int)*fmt, ctx);
    126e:	9b04      	ldr	r3, [sp, #16]
    1270:	4639      	mov	r1, r7
    1272:	7818      	ldrb	r0, [r3, #0]
    1274:	e7f0      	b.n	1258 <_vprintk+0x58>
			switch (*fmt) {
    1276:	2870      	cmp	r0, #112	; 0x70
    1278:	d071      	beq.n	135e <_vprintk+0x15e>
    127a:	d806      	bhi.n	128a <_vprintk+0x8a>
    127c:	2869      	cmp	r0, #105	; 0x69
    127e:	d041      	beq.n	1304 <_vprintk+0x104>
    1280:	286c      	cmp	r0, #108	; 0x6c
    1282:	d03c      	beq.n	12fe <_vprintk+0xfe>
    1284:	2868      	cmp	r0, #104	; 0x68
    1286:	d0d0      	beq.n	122a <_vprintk+0x2a>
    1288:	e7ee      	b.n	1268 <_vprintk+0x68>
    128a:	2875      	cmp	r0, #117	; 0x75
    128c:	d057      	beq.n	133e <_vprintk+0x13e>
    128e:	d817      	bhi.n	12c0 <_vprintk+0xc0>
    1290:	2873      	cmp	r0, #115	; 0x73
    1292:	d1e9      	bne.n	1268 <_vprintk+0x68>
				char *s = va_arg(ap, char *);
    1294:	6823      	ldr	r3, [r4, #0]
    1296:	f104 0b04 	add.w	fp, r4, #4
    129a:	461c      	mov	r4, r3
				while (*s)
    129c:	4625      	mov	r5, r4
    129e:	f815 0b01 	ldrb.w	r0, [r5], #1
    12a2:	2800      	cmp	r0, #0
    12a4:	f040 80c0 	bne.w	1428 <_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
    12a8:	f1b8 0f03 	cmp.w	r8, #3
    12ac:	f040 80d6 	bne.w	145c <_vprintk+0x25c>
					int remaining = min_width - (s - start);
    12b0:	1ae4      	subs	r4, r4, r3
    12b2:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    12b6:	2c00      	cmp	r4, #0
    12b8:	f300 80bc 	bgt.w	1434 <_vprintk+0x234>
				char *s = va_arg(ap, char *);
    12bc:	465c      	mov	r4, fp
    12be:	e7ac      	b.n	121a <_vprintk+0x1a>
			switch (*fmt) {
    12c0:	2878      	cmp	r0, #120	; 0x78
    12c2:	d056      	beq.n	1372 <_vprintk+0x172>
    12c4:	287a      	cmp	r0, #122	; 0x7a
    12c6:	e7de      	b.n	1286 <_vprintk+0x86>
				padding = PAD_SPACE_AFTER;
    12c8:	f04f 0803 	mov.w	r8, #3
    12cc:	e7ad      	b.n	122a <_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    12ce:	f1b9 0f00 	cmp.w	r9, #0
    12d2:	da0e      	bge.n	12f2 <_vprintk+0xf2>
    12d4:	f1b8 0f00 	cmp.w	r8, #0
    12d8:	f000 80bd 	beq.w	1456 <_vprintk+0x256>
					min_width = *fmt - '0';
    12dc:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    12e0:	f1b8 0f00 	cmp.w	r8, #0
    12e4:	bf08      	it	eq
    12e6:	f04f 0802 	moveq.w	r8, #2
    12ea:	e79e      	b.n	122a <_vprintk+0x2a>
				if (min_width < 0) {
    12ec:	f1b9 0f00 	cmp.w	r9, #0
    12f0:	dbf4      	blt.n	12dc <_vprintk+0xdc>
					min_width = 10 * min_width + *fmt - '0';
    12f2:	230a      	movs	r3, #10
    12f4:	fb03 0909 	mla	r9, r3, r9, r0
    12f8:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    12fc:	e7f0      	b.n	12e0 <_vprintk+0xe0>
				long_ctr++;
    12fe:	f10a 0a01 	add.w	sl, sl, #1
    1302:	e792      	b.n	122a <_vprintk+0x2a>
				if (long_ctr < 2) {
    1304:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
    1308:	bfc5      	ittet	gt
    130a:	3407      	addgt	r4, #7
    130c:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
    1310:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
    1312:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
    1314:	bfd4      	ite	le
    1316:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
    1318:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
    131c:	2d00      	cmp	r5, #0
    131e:	da05      	bge.n	132c <_vprintk+0x12c>
					out((int)'-', ctx);
    1320:	4639      	mov	r1, r7
    1322:	202d      	movs	r0, #45	; 0x2d
    1324:	47b0      	blx	r6
					d = -d;
    1326:	426d      	negs	r5, r5
					min_width--;
    1328:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    132c:	f8cd 9000 	str.w	r9, [sp]
    1330:	4643      	mov	r3, r8
    1332:	462a      	mov	r2, r5
    1334:	4639      	mov	r1, r7
    1336:	4630      	mov	r0, r6
    1338:	f7ff fef8 	bl	112c <_printk_dec_ulong>
    133c:	e76d      	b.n	121a <_vprintk+0x1a>
				if (long_ctr < 2) {
    133e:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
    1342:	bfc5      	ittet	gt
    1344:	3407      	addgt	r4, #7
    1346:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
    134a:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
    134c:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    134e:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
    1352:	bfcc      	ite	gt
    1354:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
    1358:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    135a:	4643      	mov	r3, r8
    135c:	e7ea      	b.n	1334 <_vprintk+0x134>
				  out('0', ctx);
    135e:	4639      	mov	r1, r7
    1360:	2030      	movs	r0, #48	; 0x30
    1362:	47b0      	blx	r6
				  out('x', ctx);
    1364:	4639      	mov	r1, r7
    1366:	2078      	movs	r0, #120	; 0x78
    1368:	47b0      	blx	r6
				  min_width = 8;
    136a:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    136e:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    1372:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
    1376:	bfc7      	ittee	gt
    1378:	3407      	addgt	r4, #7
    137a:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
    137e:	6823      	ldrle	r3, [r4, #0]
    1380:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
    1382:	bfc2      	ittt	gt
    1384:	f103 0408 	addgt.w	r4, r3, #8
    1388:	681b      	ldrgt	r3, [r3, #0]
    138a:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
    138c:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
    1390:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    1394:	bfd8      	it	le
    1396:	3404      	addle	r4, #4
	int digits = 0;
    1398:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    139a:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    139c:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    139e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    13a2:	9b05      	ldr	r3, [sp, #20]
    13a4:	ea4f 008b 	mov.w	r0, fp, lsl #2
    13a8:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    13ac:	f010 000f 	ands.w	r0, r0, #15
    13b0:	d109      	bne.n	13c6 <_vprintk+0x1c6>
    13b2:	9b07      	ldr	r3, [sp, #28]
    13b4:	b913      	cbnz	r3, 13bc <_vprintk+0x1bc>
    13b6:	f1bb 0f00 	cmp.w	fp, #0
    13ba:	d124      	bne.n	1406 <_vprintk+0x206>
			nibble += nibble > 9 ? 87 : 48;
    13bc:	f04f 0c30 	mov.w	ip, #48	; 0x30
    13c0:	e007      	b.n	13d2 <_vprintk+0x1d2>
	for (; size; size--) {
    13c2:	9a06      	ldr	r2, [sp, #24]
    13c4:	e7eb      	b.n	139e <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    13c6:	2809      	cmp	r0, #9
    13c8:	bf8c      	ite	hi
    13ca:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    13ce:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
    13d2:	4639      	mov	r1, r7
    13d4:	4460      	add	r0, ip
    13d6:	9206      	str	r2, [sp, #24]
    13d8:	47b0      	blx	r6
			digits++;
    13da:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    13dc:	9507      	str	r5, [sp, #28]
			digits++;
    13de:	3301      	adds	r3, #1
    13e0:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    13e2:	f1bb 0f00 	cmp.w	fp, #0
    13e6:	d1ec      	bne.n	13c2 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    13e8:	f1b8 0f03 	cmp.w	r8, #3
    13ec:	f47f af15 	bne.w	121a <_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    13f0:	9b03      	ldr	r3, [sp, #12]
    13f2:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    13f6:	2d00      	cmp	r5, #0
    13f8:	f77f af0f 	ble.w	121a <_vprintk+0x1a>
			out(' ', ctx);
    13fc:	4639      	mov	r1, r7
    13fe:	2020      	movs	r0, #32
    1400:	47b0      	blx	r6
    1402:	3d01      	subs	r5, #1
    1404:	e7f7      	b.n	13f6 <_vprintk+0x1f6>
		if (remaining-- <= min_width) {
    1406:	1e53      	subs	r3, r2, #1
    1408:	4591      	cmp	r9, r2
    140a:	9306      	str	r3, [sp, #24]
    140c:	dbe9      	blt.n	13e2 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    140e:	f1b8 0f01 	cmp.w	r8, #1
    1412:	d103      	bne.n	141c <_vprintk+0x21c>
				out('0', ctx);
    1414:	4639      	mov	r1, r7
    1416:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    1418:	47b0      	blx	r6
    141a:	e7e2      	b.n	13e2 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    141c:	f1b8 0f02 	cmp.w	r8, #2
    1420:	d1df      	bne.n	13e2 <_vprintk+0x1e2>
				out(' ', ctx);
    1422:	4639      	mov	r1, r7
    1424:	2020      	movs	r0, #32
    1426:	e7f7      	b.n	1418 <_vprintk+0x218>
					out((int)(*s++), ctx);
    1428:	4639      	mov	r1, r7
    142a:	9303      	str	r3, [sp, #12]
    142c:	462c      	mov	r4, r5
    142e:	47b0      	blx	r6
    1430:	9b03      	ldr	r3, [sp, #12]
    1432:	e733      	b.n	129c <_vprintk+0x9c>
						out(' ', ctx);
    1434:	4639      	mov	r1, r7
    1436:	2020      	movs	r0, #32
    1438:	47b0      	blx	r6
    143a:	3c01      	subs	r4, #1
    143c:	e73b      	b.n	12b6 <_vprintk+0xb6>
				out(c, ctx);
    143e:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    1440:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    1442:	4639      	mov	r1, r7
    1444:	47b0      	blx	r6
				int c = va_arg(ap, int);
    1446:	462c      	mov	r4, r5
    1448:	e6e7      	b.n	121a <_vprintk+0x1a>
				long_ctr = 0;
    144a:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    144c:	46a8      	mov	r8, r5
				min_width = -1;
    144e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    1452:	2501      	movs	r5, #1
    1454:	e6e9      	b.n	122a <_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    1456:	f04f 0801 	mov.w	r8, #1
    145a:	e6e6      	b.n	122a <_vprintk+0x2a>
				char *s = va_arg(ap, char *);
    145c:	465c      	mov	r4, fp
			might_format = 0;
    145e:	4605      	mov	r5, r0
    1460:	e6e3      	b.n	122a <_vprintk+0x2a>
	...

00001464 <vprintk>:
{
    1464:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    1466:	ac02      	add	r4, sp, #8
    1468:	2300      	movs	r3, #0
    146a:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    146e:	4602      	mov	r2, r0
    1470:	460b      	mov	r3, r1
    1472:	4803      	ldr	r0, [pc, #12]	; (1480 <vprintk+0x1c>)
    1474:	4621      	mov	r1, r4
    1476:	f7ff fec3 	bl	1200 <_vprintk>
}
    147a:	b002      	add	sp, #8
    147c:	bd10      	pop	{r4, pc}
    147e:	bf00      	nop
    1480:	0000111d 	.word	0x0000111d

00001484 <printk>:
{
    1484:	b40f      	push	{r0, r1, r2, r3}
    1486:	b507      	push	{r0, r1, r2, lr}
    1488:	a904      	add	r1, sp, #16
    148a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    148e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    1490:	f7ff ffe8 	bl	1464 <vprintk>
}
    1494:	b003      	add	sp, #12
    1496:	f85d eb04 	ldr.w	lr, [sp], #4
    149a:	b004      	add	sp, #16
    149c:	4770      	bx	lr
	...

000014a0 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    14a0:	b40c      	push	{r2, r3}
    14a2:	b530      	push	{r4, r5, lr}
    14a4:	b085      	sub	sp, #20
    14a6:	ab08      	add	r3, sp, #32
	struct str_context ctx = { str, size, 0 };
    14a8:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    14ac:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;

	va_start(ap, fmt);
    14b0:	9300      	str	r3, [sp, #0]
{
    14b2:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    14b4:	2500      	movs	r5, #0
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    14b6:	a901      	add	r1, sp, #4
    14b8:	4806      	ldr	r0, [pc, #24]	; (14d4 <snprintk+0x34>)
	struct str_context ctx = { str, size, 0 };
    14ba:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    14bc:	f7ff fea0 	bl	1200 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    14c0:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    14c4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    14c6:	bfb8      	it	lt
    14c8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    14ca:	b005      	add	sp, #20
    14cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    14d0:	b002      	add	sp, #8
    14d2:	4770      	bx	lr
    14d4:	000011cd 	.word	0x000011cd

000014d8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SEGGER_RTT_MODE_NO_BLOCK_SKIP, 1);
GEN_ABSOLUTE_SYM(CONFIG_SEGGER_RTT_MODE, 0);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_LINKER_ORPHAN_SECTION_WARN, 1);

GEN_ABS_SYM_END
    14d8:	4770      	bx	lr
	...

000014dc <nordicsemi_nrf52_init>:
#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
#include <logging/log.h>
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf52_init(struct device *arg)
{
    14dc:	b510      	push	{r4, lr}
	__asm__ volatile(
    14de:	f04f 0320 	mov.w	r3, #32
    14e2:	f3ef 8411 	mrs	r4, BASEPRI
    14e6:	f383 8811 	msr	BASEPRI, r3

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
    14ea:	f000 fadd 	bl	1aa8 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    14ee:	4a08      	ldr	r2, [pc, #32]	; (1510 <nordicsemi_nrf52_init+0x34>)
    14f0:	2301      	movs	r3, #1
    14f2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
}
#endif

__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
    14f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    14fa:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    14fe:	4b05      	ldr	r3, [pc, #20]	; (1514 <nordicsemi_nrf52_init+0x38>)
    1500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1504:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    1506:	62da      	str	r2, [r3, #44]	; 0x2c
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1508:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    150c:	2000      	movs	r0, #0
    150e:	bd10      	pop	{r4, pc}
    1510:	4001e000 	.word	0x4001e000
    1514:	e000ed00 	.word	0xe000ed00

00001518 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    1518:	428b      	cmp	r3, r1
{
    151a:	b538      	push	{r3, r4, r5, lr}
    151c:	4615      	mov	r5, r2
    151e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
    1520:	d805      	bhi.n	152e <_copy+0x16>
		(void)memcpy(to, from, from_len);
    1522:	461a      	mov	r2, r3
    1524:	4629      	mov	r1, r5
    1526:	f005 fbaf 	bl	6c88 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
    152a:	4620      	mov	r0, r4
    152c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
    152e:	2400      	movs	r4, #0
    1530:	e7fb      	b.n	152a <_copy+0x12>

00001532 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
    1532:	f005 bbd6 	b.w	6ce2 <memset>

00001536 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    1536:	09c3      	lsrs	r3, r0, #7
    1538:	005a      	lsls	r2, r3, #1
    153a:	4413      	add	r3, r2
    153c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    1540:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    1544:	b2c0      	uxtb	r0, r0
    1546:	4770      	bx	lr

00001548 <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    1548:	78cb      	ldrb	r3, [r1, #3]
    154a:	7802      	ldrb	r2, [r0, #0]
    154c:	4053      	eors	r3, r2
    154e:	7003      	strb	r3, [r0, #0]
    1550:	884b      	ldrh	r3, [r1, #2]
    1552:	7842      	ldrb	r2, [r0, #1]
    1554:	4053      	eors	r3, r2
    1556:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    1558:	680a      	ldr	r2, [r1, #0]
    155a:	7883      	ldrb	r3, [r0, #2]
    155c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    1560:	7083      	strb	r3, [r0, #2]
    1562:	680a      	ldr	r2, [r1, #0]
    1564:	78c3      	ldrb	r3, [r0, #3]
    1566:	4053      	eors	r3, r2
    1568:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    156a:	79cb      	ldrb	r3, [r1, #7]
    156c:	7902      	ldrb	r2, [r0, #4]
    156e:	4053      	eors	r3, r2
    1570:	7103      	strb	r3, [r0, #4]
    1572:	88cb      	ldrh	r3, [r1, #6]
    1574:	7942      	ldrb	r2, [r0, #5]
    1576:	4053      	eors	r3, r2
    1578:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    157a:	684a      	ldr	r2, [r1, #4]
    157c:	7983      	ldrb	r3, [r0, #6]
    157e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    1582:	7183      	strb	r3, [r0, #6]
    1584:	684a      	ldr	r2, [r1, #4]
    1586:	79c3      	ldrb	r3, [r0, #7]
    1588:	4053      	eors	r3, r2
    158a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    158c:	7acb      	ldrb	r3, [r1, #11]
    158e:	7a02      	ldrb	r2, [r0, #8]
    1590:	4053      	eors	r3, r2
    1592:	7203      	strb	r3, [r0, #8]
    1594:	7a42      	ldrb	r2, [r0, #9]
    1596:	894b      	ldrh	r3, [r1, #10]
    1598:	4053      	eors	r3, r2
    159a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    159c:	688a      	ldr	r2, [r1, #8]
    159e:	7a83      	ldrb	r3, [r0, #10]
    15a0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    15a4:	7283      	strb	r3, [r0, #10]
    15a6:	688a      	ldr	r2, [r1, #8]
    15a8:	7ac3      	ldrb	r3, [r0, #11]
    15aa:	4053      	eors	r3, r2
    15ac:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    15ae:	7bcb      	ldrb	r3, [r1, #15]
    15b0:	7b02      	ldrb	r2, [r0, #12]
    15b2:	4053      	eors	r3, r2
    15b4:	7303      	strb	r3, [r0, #12]
    15b6:	89cb      	ldrh	r3, [r1, #14]
    15b8:	7b42      	ldrb	r2, [r0, #13]
    15ba:	4053      	eors	r3, r2
    15bc:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    15be:	68ca      	ldr	r2, [r1, #12]
    15c0:	7b83      	ldrb	r3, [r0, #14]
    15c2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    15c6:	7383      	strb	r3, [r0, #14]
    15c8:	68ca      	ldr	r2, [r1, #12]
    15ca:	7bc3      	ldrb	r3, [r0, #15]
    15cc:	4053      	eors	r3, r2
    15ce:	73c3      	strb	r3, [r0, #15]
}
    15d0:	4770      	bx	lr

000015d2 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
    15d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    15d4:	7802      	ldrb	r2, [r0, #0]
    15d6:	f88d 2000 	strb.w	r2, [sp]
    15da:	7942      	ldrb	r2, [r0, #5]
    15dc:	f88d 2001 	strb.w	r2, [sp, #1]
    15e0:	7a82      	ldrb	r2, [r0, #10]
    15e2:	f88d 2002 	strb.w	r2, [sp, #2]
    15e6:	7bc2      	ldrb	r2, [r0, #15]
    15e8:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    15ec:	7902      	ldrb	r2, [r0, #4]
    15ee:	f88d 2004 	strb.w	r2, [sp, #4]
    15f2:	7a42      	ldrb	r2, [r0, #9]
    15f4:	f88d 2005 	strb.w	r2, [sp, #5]
    15f8:	7b82      	ldrb	r2, [r0, #14]
    15fa:	f88d 2006 	strb.w	r2, [sp, #6]
    15fe:	78c2      	ldrb	r2, [r0, #3]
    1600:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    1604:	7a02      	ldrb	r2, [r0, #8]
    1606:	f88d 2008 	strb.w	r2, [sp, #8]
    160a:	7b42      	ldrb	r2, [r0, #13]
    160c:	f88d 2009 	strb.w	r2, [sp, #9]
    1610:	7882      	ldrb	r2, [r0, #2]
    1612:	f88d 200a 	strb.w	r2, [sp, #10]
    1616:	79c2      	ldrb	r2, [r0, #7]
    1618:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    161c:	7b02      	ldrb	r2, [r0, #12]
    161e:	f88d 200c 	strb.w	r2, [sp, #12]
    1622:	7842      	ldrb	r2, [r0, #1]
    1624:	f88d 200d 	strb.w	r2, [sp, #13]
    1628:	7ac3      	ldrb	r3, [r0, #11]
    162a:	7982      	ldrb	r2, [r0, #6]
    162c:	f88d 200e 	strb.w	r2, [sp, #14]
    1630:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    1634:	2310      	movs	r3, #16
    1636:	466a      	mov	r2, sp
    1638:	4619      	mov	r1, r3
    163a:	f7ff ff6d 	bl	1518 <_copy>
}
    163e:	b005      	add	sp, #20
    1640:	f85d fb04 	ldr.w	pc, [sp], #4

00001644 <mult_row_column>:
{
    1644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1646:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    1648:	7808      	ldrb	r0, [r1, #0]
{
    164a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    164c:	f7ff ff73 	bl	1536 <_double_byte>
    1650:	4605      	mov	r5, r0
    1652:	7860      	ldrb	r0, [r4, #1]
    1654:	f7ff ff6f 	bl	1536 <_double_byte>
    1658:	78a2      	ldrb	r2, [r4, #2]
    165a:	7863      	ldrb	r3, [r4, #1]
    165c:	4053      	eors	r3, r2
    165e:	78e2      	ldrb	r2, [r4, #3]
    1660:	4053      	eors	r3, r2
    1662:	405d      	eors	r5, r3
    1664:	4045      	eors	r5, r0
    1666:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    1668:	7860      	ldrb	r0, [r4, #1]
    166a:	7827      	ldrb	r7, [r4, #0]
    166c:	f7ff ff63 	bl	1536 <_double_byte>
    1670:	4605      	mov	r5, r0
    1672:	78a0      	ldrb	r0, [r4, #2]
    1674:	f7ff ff5f 	bl	1536 <_double_byte>
    1678:	78a3      	ldrb	r3, [r4, #2]
    167a:	405f      	eors	r7, r3
    167c:	78e3      	ldrb	r3, [r4, #3]
    167e:	405f      	eors	r7, r3
    1680:	407d      	eors	r5, r7
    1682:	4045      	eors	r5, r0
    1684:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    1686:	78a0      	ldrb	r0, [r4, #2]
    1688:	7865      	ldrb	r5, [r4, #1]
    168a:	7827      	ldrb	r7, [r4, #0]
    168c:	f7ff ff53 	bl	1536 <_double_byte>
    1690:	406f      	eors	r7, r5
    1692:	4605      	mov	r5, r0
    1694:	78e0      	ldrb	r0, [r4, #3]
    1696:	f7ff ff4e 	bl	1536 <_double_byte>
    169a:	78e3      	ldrb	r3, [r4, #3]
    169c:	405f      	eors	r7, r3
    169e:	407d      	eors	r5, r7
    16a0:	4045      	eors	r5, r0
    16a2:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    16a4:	7820      	ldrb	r0, [r4, #0]
    16a6:	f7ff ff46 	bl	1536 <_double_byte>
    16aa:	7863      	ldrb	r3, [r4, #1]
    16ac:	7825      	ldrb	r5, [r4, #0]
    16ae:	405d      	eors	r5, r3
    16b0:	78a3      	ldrb	r3, [r4, #2]
    16b2:	405d      	eors	r5, r3
    16b4:	4045      	eors	r5, r0
    16b6:	78e0      	ldrb	r0, [r4, #3]
    16b8:	f7ff ff3d 	bl	1536 <_double_byte>
    16bc:	b2ed      	uxtb	r5, r5
    16be:	4068      	eors	r0, r5
    16c0:	70f0      	strb	r0, [r6, #3]
}
    16c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000016c4 <tc_aes128_set_encrypt_key>:
{
    16c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    16c6:	4e28      	ldr	r6, [pc, #160]	; (1768 <tc_aes128_set_encrypt_key+0xa4>)
{
    16c8:	4607      	mov	r7, r0
    16ca:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    16cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    16ce:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    16d0:	ad01      	add	r5, sp, #4
    16d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    16d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    16d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    16d8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    16dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    16e0:	2f00      	cmp	r7, #0
    16e2:	d03c      	beq.n	175e <tc_aes128_set_encrypt_key+0x9a>
	} else if (k == (const uint8_t *) 0) {
    16e4:	2c00      	cmp	r4, #0
    16e6:	d03c      	beq.n	1762 <tc_aes128_set_encrypt_key+0x9e>
    16e8:	1f38      	subs	r0, r7, #4
    16ea:	4621      	mov	r1, r4
    16ec:	4602      	mov	r2, r0
    16ee:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    16f0:	784b      	ldrb	r3, [r1, #1]
    16f2:	780d      	ldrb	r5, [r1, #0]
    16f4:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    16f6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    16fa:	78cd      	ldrb	r5, [r1, #3]
    16fc:	432b      	orrs	r3, r5
    16fe:	788d      	ldrb	r5, [r1, #2]
    1700:	3104      	adds	r1, #4
    1702:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    1706:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    1708:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    170c:	d1f0      	bne.n	16f0 <tc_aes128_set_encrypt_key+0x2c>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    170e:	4c17      	ldr	r4, [pc, #92]	; (176c <tc_aes128_set_encrypt_key+0xa8>)
    1710:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    1712:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    1714:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    1716:	d118      	bne.n	174a <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    1718:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    171c:	0e1a      	lsrs	r2, r3, #24
    171e:	5ca5      	ldrb	r5, [r4, r2]
    1720:	b2da      	uxtb	r2, r3
    1722:	5ca2      	ldrb	r2, [r4, r2]
    1724:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    1728:	f3c3 4507 	ubfx	r5, r3, #16, #8
    172c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1730:	5d65      	ldrb	r5, [r4, r5]
    1732:	5ce3      	ldrb	r3, [r4, r3]
    1734:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    1738:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    173c:	ad0c      	add	r5, sp, #48	; 0x30
    173e:	f021 0303 	bic.w	r3, r1, #3
    1742:	442b      	add	r3, r5
    1744:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    1748:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    174a:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    174e:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    1750:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    1752:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    1754:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    1756:	d1dc      	bne.n	1712 <tc_aes128_set_encrypt_key+0x4e>
	return TC_CRYPTO_SUCCESS;
    1758:	2001      	movs	r0, #1
}
    175a:	b00d      	add	sp, #52	; 0x34
    175c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    175e:	4638      	mov	r0, r7
    1760:	e7fb      	b.n	175a <tc_aes128_set_encrypt_key+0x96>
    1762:	4620      	mov	r0, r4
    1764:	e7f9      	b.n	175a <tc_aes128_set_encrypt_key+0x96>
    1766:	bf00      	nop
    1768:	0002f138 	.word	0x0002f138
    176c:	0002f6af 	.word	0x0002f6af

00001770 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    1770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1774:	4615      	mov	r5, r2
    1776:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    1778:	4680      	mov	r8, r0
    177a:	2800      	cmp	r0, #0
    177c:	d05b      	beq.n	1836 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    177e:	2900      	cmp	r1, #0
    1780:	d05a      	beq.n	1838 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    1782:	2a00      	cmp	r2, #0
    1784:	d05a      	beq.n	183c <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    1786:	2310      	movs	r3, #16
    1788:	460a      	mov	r2, r1
    178a:	4668      	mov	r0, sp
    178c:	4619      	mov	r1, r3
    178e:	f7ff fec3 	bl	1518 <_copy>
	add_round_key(state, s->words);
    1792:	4629      	mov	r1, r5
    1794:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    1796:	4c2a      	ldr	r4, [pc, #168]	; (1840 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    1798:	f7ff fed6 	bl	1548 <add_round_key>
    179c:	f105 0710 	add.w	r7, r5, #16
    17a0:	46a1      	mov	r9, r4
    17a2:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    17a4:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    17a6:	f81d 3006 	ldrb.w	r3, [sp, r6]
    17aa:	5ce3      	ldrb	r3, [r4, r3]
    17ac:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    17b0:	3601      	adds	r6, #1
    17b2:	2e10      	cmp	r6, #16
    17b4:	d1f7      	bne.n	17a6 <tc_aes_encrypt+0x36>

	for (i = 0; i < (Nr - 1); ++i) {
		sub_bytes(state);
		shift_rows(state);
    17b6:	4668      	mov	r0, sp
    17b8:	f7ff ff0b 	bl	15d2 <shift_rows>
	mult_row_column(t, s);
    17bc:	4669      	mov	r1, sp
    17be:	a804      	add	r0, sp, #16
    17c0:	f7ff ff40 	bl	1644 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    17c4:	a901      	add	r1, sp, #4
    17c6:	a805      	add	r0, sp, #20
    17c8:	f7ff ff3c 	bl	1644 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    17cc:	a902      	add	r1, sp, #8
    17ce:	a806      	add	r0, sp, #24
    17d0:	f7ff ff38 	bl	1644 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    17d4:	a903      	add	r1, sp, #12
    17d6:	a807      	add	r0, sp, #28
    17d8:	f7ff ff34 	bl	1644 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    17dc:	4633      	mov	r3, r6
    17de:	aa04      	add	r2, sp, #16
    17e0:	4631      	mov	r1, r6
    17e2:	4668      	mov	r0, sp
    17e4:	f7ff fe98 	bl	1518 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    17e8:	4639      	mov	r1, r7
    17ea:	4668      	mov	r0, sp
    17ec:	3710      	adds	r7, #16
    17ee:	f7ff feab 	bl	1548 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    17f2:	42bd      	cmp	r5, r7
    17f4:	d1d6      	bne.n	17a4 <tc_aes_encrypt+0x34>
	for (i = 0; i < (Nb * Nk); ++i) {
    17f6:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    17f8:	f81d 3006 	ldrb.w	r3, [sp, r6]
    17fc:	f819 3003 	ldrb.w	r3, [r9, r3]
    1800:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    1804:	3601      	adds	r6, #1
    1806:	2e10      	cmp	r6, #16
    1808:	d1f6      	bne.n	17f8 <tc_aes_encrypt+0x88>
	}

	sub_bytes(state);
	shift_rows(state);
    180a:	4668      	mov	r0, sp
    180c:	f7ff fee1 	bl	15d2 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    1810:	4629      	mov	r1, r5
    1812:	4668      	mov	r0, sp
    1814:	f7ff fe98 	bl	1548 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    1818:	4633      	mov	r3, r6
    181a:	466a      	mov	r2, sp
    181c:	4631      	mov	r1, r6
    181e:	4640      	mov	r0, r8
    1820:	f7ff fe7a 	bl	1518 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    1824:	4668      	mov	r0, sp
    1826:	4632      	mov	r2, r6
    1828:	2100      	movs	r1, #0
    182a:	f7ff fe82 	bl	1532 <_set>

	return TC_CRYPTO_SUCCESS;
    182e:	2001      	movs	r0, #1
}
    1830:	b009      	add	sp, #36	; 0x24
    1832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1836:	e7fb      	b.n	1830 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
    1838:	4608      	mov	r0, r1
    183a:	e7f9      	b.n	1830 <tc_aes_encrypt+0xc0>
    183c:	4610      	mov	r0, r2
    183e:	e7f7      	b.n	1830 <tc_aes_encrypt+0xc0>
    1840:	0002f6af 	.word	0x0002f6af

00001844 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    1844:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    1846:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
    1848:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    184a:	f912 3b10 	ldrsb.w	r3, [r2], #16
    184e:	2b00      	cmp	r3, #0
    1850:	bfb4      	ite	lt
    1852:	2387      	movlt	r3, #135	; 0x87
    1854:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    1856:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    185a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
    185e:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
    1860:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
    1864:	d002      	beq.n	186c <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
    1866:	7813      	ldrb	r3, [r2, #0]
    1868:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    186a:	e7f4      	b.n	1856 <gf_double+0x12>
	}
}
    186c:	bd10      	pop	{r4, pc}

0000186e <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
    186e:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
    1870:	b120      	cbz	r0, 187c <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    1872:	2258      	movs	r2, #88	; 0x58
    1874:	2100      	movs	r1, #0
    1876:	f7ff fe5c 	bl	1532 <_set>
    187a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
    187c:	bd08      	pop	{r3, pc}

0000187e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
    187e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    1880:	4604      	mov	r4, r0
    1882:	b188      	cbz	r0, 18a8 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    1884:	2210      	movs	r2, #16
    1886:	2100      	movs	r1, #0
    1888:	f7ff fe53 	bl	1532 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    188c:	2210      	movs	r2, #16
    188e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    1892:	2100      	movs	r1, #0
    1894:	f7ff fe4d 	bl	1532 <_set>
	s->leftover_offset = 0;
    1898:	2300      	movs	r3, #0
    189a:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    189c:	2200      	movs	r2, #0
    189e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    18a2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
    18a6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
    18a8:	bd10      	pop	{r4, pc}

000018aa <tc_cmac_setup>:
{
    18aa:	b570      	push	{r4, r5, r6, lr}
    18ac:	460d      	mov	r5, r1
    18ae:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
    18b0:	4604      	mov	r4, r0
    18b2:	b310      	cbz	r0, 18fa <tc_cmac_setup+0x50>
    18b4:	b311      	cbz	r1, 18fc <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
    18b6:	2258      	movs	r2, #88	; 0x58
    18b8:	2100      	movs	r1, #0
    18ba:	f7ff fe3a 	bl	1532 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
    18be:	4629      	mov	r1, r5
	s->sched = sched;
    18c0:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    18c2:	4630      	mov	r0, r6
    18c4:	f7ff fefe 	bl	16c4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    18c8:	2210      	movs	r2, #16
    18ca:	2100      	movs	r1, #0
    18cc:	4620      	mov	r0, r4
    18ce:	f7ff fe30 	bl	1532 <_set>
	gf_double (s->K1, s->iv);
    18d2:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    18d6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    18d8:	4621      	mov	r1, r4
    18da:	4620      	mov	r0, r4
    18dc:	f7ff ff48 	bl	1770 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    18e0:	4621      	mov	r1, r4
    18e2:	4628      	mov	r0, r5
    18e4:	f7ff ffae 	bl	1844 <gf_double>
	gf_double (s->K2, s->K1);
    18e8:	4629      	mov	r1, r5
    18ea:	f104 0020 	add.w	r0, r4, #32
    18ee:	f7ff ffa9 	bl	1844 <gf_double>
	tc_cmac_init(s);
    18f2:	4620      	mov	r0, r4
    18f4:	f7ff ffc3 	bl	187e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    18f8:	2001      	movs	r0, #1
}
    18fa:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    18fc:	4608      	mov	r0, r1
    18fe:	e7fc      	b.n	18fa <tc_cmac_setup+0x50>

00001900 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
    1900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1902:	460d      	mov	r5, r1
    1904:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    1906:	4604      	mov	r4, r0
    1908:	2800      	cmp	r0, #0
    190a:	d05c      	beq.n	19c6 <tc_cmac_update+0xc6>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    190c:	b90a      	cbnz	r2, 1912 <tc_cmac_update+0x12>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    190e:	2001      	movs	r0, #1
}
    1910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (data == (const uint8_t *) 0) {
    1912:	2900      	cmp	r1, #0
    1914:	d057      	beq.n	19c6 <tc_cmac_update+0xc6>
	if (s->countdown == 0) {
    1916:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
    191a:	ea50 0301 	orrs.w	r3, r0, r1
    191e:	d052      	beq.n	19c6 <tc_cmac_update+0xc6>
	s->countdown--;
    1920:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
    1924:	6c60      	ldr	r0, [r4, #68]	; 0x44
	s->countdown--;
    1926:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
    192a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
    192e:	b348      	cbz	r0, 1984 <tc_cmac_update+0x84>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    1930:	f1c0 0710 	rsb	r7, r0, #16
		if (data_length < remaining_space) {
    1934:	42be      	cmp	r6, r7
    1936:	f100 0030 	add.w	r0, r0, #48	; 0x30
    193a:	4420      	add	r0, r4
    193c:	d208      	bcs.n	1950 <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    193e:	4633      	mov	r3, r6
    1940:	4631      	mov	r1, r6
    1942:	462a      	mov	r2, r5
    1944:	f7ff fde8 	bl	1518 <_copy>
			s->leftover_offset += data_length;
    1948:	6c63      	ldr	r3, [r4, #68]	; 0x44
    194a:	441e      	add	r6, r3
		s->leftover_offset = data_length;
    194c:	6466      	str	r6, [r4, #68]	; 0x44
    194e:	e7de      	b.n	190e <tc_cmac_update+0xe>
		_copy(&s->leftover[s->leftover_offset],
    1950:	463b      	mov	r3, r7
    1952:	462a      	mov	r2, r5
    1954:	4639      	mov	r1, r7
    1956:	f7ff fddf 	bl	1518 <_copy>
		s->leftover_offset = 0;
    195a:	2300      	movs	r3, #0
    195c:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
    195e:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    1960:	443d      	add	r5, r7
    1962:	1e63      	subs	r3, r4, #1
    1964:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
    1968:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    196c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1970:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
    1972:	ea82 0200 	eor.w	r2, r2, r0
    1976:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1978:	d1f6      	bne.n	1968 <tc_cmac_update+0x68>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    197a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    197c:	4621      	mov	r1, r4
    197e:	4620      	mov	r0, r4
    1980:	f7ff fef6 	bl	1770 <tc_aes_encrypt>
    1984:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
    1988:	2e10      	cmp	r6, #16
    198a:	d809      	bhi.n	19a0 <tc_cmac_update+0xa0>
	if (data_length > 0) {
    198c:	2e00      	cmp	r6, #0
    198e:	d0be      	beq.n	190e <tc_cmac_update+0xe>
		_copy(s->leftover, data_length, data, data_length);
    1990:	4633      	mov	r3, r6
    1992:	462a      	mov	r2, r5
    1994:	4631      	mov	r1, r6
    1996:	f104 0030 	add.w	r0, r4, #48	; 0x30
    199a:	f7ff fdbd 	bl	1518 <_copy>
    199e:	e7d5      	b.n	194c <tc_cmac_update+0x4c>
    19a0:	1e63      	subs	r3, r4, #1
    19a2:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
    19a4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    19a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    19ac:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
    19ae:	ea82 0200 	eor.w	r2, r2, r0
    19b2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    19b4:	d1f6      	bne.n	19a4 <tc_cmac_update+0xa4>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    19b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    19b8:	4621      	mov	r1, r4
    19ba:	4620      	mov	r0, r4
    19bc:	f7ff fed8 	bl	1770 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    19c0:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    19c2:	3e10      	subs	r6, #16
    19c4:	e7e0      	b.n	1988 <tc_cmac_update+0x88>
		return TC_CRYPTO_FAIL;
    19c6:	2000      	movs	r0, #0
    19c8:	e7a2      	b.n	1910 <tc_cmac_update+0x10>

000019ca <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
    19ca:	b570      	push	{r4, r5, r6, lr}
    19cc:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    19ce:	4605      	mov	r5, r0
    19d0:	b1e8      	cbz	r0, 1a0e <tc_cmac_final+0x44>
    19d2:	b369      	cbz	r1, 1a30 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    19d4:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    19d6:	2a10      	cmp	r2, #16
    19d8:	d11a      	bne.n	1a10 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
    19da:	3110      	adds	r1, #16
    19dc:	1e63      	subs	r3, r4, #1
    19de:	3901      	subs	r1, #1
    19e0:	f104 000f 	add.w	r0, r4, #15
		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
		s->iv[i] ^= s->leftover[i] ^ k[i];
    19e4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    19e8:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
    19ec:	4072      	eors	r2, r6
    19ee:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    19f2:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
    19f4:	ea82 0206 	eor.w	r2, r2, r6
    19f8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    19fa:	d1f3      	bne.n	19e4 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    19fc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    19fe:	4621      	mov	r1, r4
    1a00:	4628      	mov	r0, r5
    1a02:	f7ff feb5 	bl	1770 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    1a06:	4620      	mov	r0, r4
    1a08:	f7ff ff31 	bl	186e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    1a0c:	2001      	movs	r0, #1
}
    1a0e:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
    1a10:	f102 0030 	add.w	r0, r2, #48	; 0x30
    1a14:	2100      	movs	r1, #0
    1a16:	f1c2 0210 	rsb	r2, r2, #16
    1a1a:	4420      	add	r0, r4
    1a1c:	f7ff fd89 	bl	1532 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    1a20:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1a22:	4423      	add	r3, r4
    1a24:	2280      	movs	r2, #128	; 0x80
    1a26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    1a2a:	f104 0120 	add.w	r1, r4, #32
    1a2e:	e7d5      	b.n	19dc <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
    1a30:	4608      	mov	r0, r1
    1a32:	e7ec      	b.n	1a0e <tc_cmac_final+0x44>

00001a34 <errata_108>:
}


static bool errata_12(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    1a34:	4b0c      	ldr	r3, [pc, #48]	; (1a68 <errata_108+0x34>)
    1a36:	781b      	ldrb	r3, [r3, #0]
    1a38:	2b06      	cmp	r3, #6
    1a3a:	d110      	bne.n	1a5e <errata_108+0x2a>
    1a3c:	4b0b      	ldr	r3, [pc, #44]	; (1a6c <errata_108+0x38>)
    1a3e:	681b      	ldr	r3, [r3, #0]
    1a40:	071a      	lsls	r2, r3, #28
    1a42:	d10c      	bne.n	1a5e <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    1a44:	4b0a      	ldr	r3, [pc, #40]	; (1a70 <errata_108+0x3c>)
    1a46:	6818      	ldr	r0, [r3, #0]
    1a48:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    1a4c:	2b30      	cmp	r3, #48	; 0x30
    1a4e:	d008      	beq.n	1a62 <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    1a50:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    1a54:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
    1a58:	4258      	negs	r0, r3
    1a5a:	4158      	adcs	r0, r3
    1a5c:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    1a5e:	2000      	movs	r0, #0
    1a60:	4770      	bx	lr
            return true;
    1a62:	2001      	movs	r0, #1
}
    1a64:	4770      	bx	lr
    1a66:	bf00      	nop
    1a68:	f0000fe0 	.word	0xf0000fe0
    1a6c:	f0000fe4 	.word	0xf0000fe4
    1a70:	f0000fe8 	.word	0xf0000fe8

00001a74 <errata_16>:

static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    1a74:	4b09      	ldr	r3, [pc, #36]	; (1a9c <errata_16+0x28>)
    1a76:	781b      	ldrb	r3, [r3, #0]
    1a78:	2b06      	cmp	r3, #6
    1a7a:	d10c      	bne.n	1a96 <errata_16+0x22>
    1a7c:	4b08      	ldr	r3, [pc, #32]	; (1aa0 <errata_16+0x2c>)
    1a7e:	681b      	ldr	r3, [r3, #0]
    1a80:	071a      	lsls	r2, r3, #28
    1a82:	d108      	bne.n	1a96 <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    1a84:	4b07      	ldr	r3, [pc, #28]	; (1aa4 <errata_16+0x30>)
    1a86:	6818      	ldr	r0, [r3, #0]
    1a88:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    1a8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1a90:	4258      	negs	r0, r3
    1a92:	4158      	adcs	r0, r3
    1a94:	4770      	bx	lr
            return true;
        }
    }

    return false;
    1a96:	2000      	movs	r0, #0
}
    1a98:	4770      	bx	lr
    1a9a:	bf00      	nop
    1a9c:	f0000fe0 	.word	0xf0000fe0
    1aa0:	f0000fe4 	.word	0xf0000fe4
    1aa4:	f0000fe8 	.word	0xf0000fe8

00001aa8 <SystemInit>:
{
    1aa8:	b508      	push	{r3, lr}
    if (errata_12()){
    1aaa:	f7ff ffc3 	bl	1a34 <errata_108>
    1aae:	b128      	cbz	r0, 1abc <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    1ab0:	4b78      	ldr	r3, [pc, #480]	; (1c94 <SystemInit+0x1ec>)
    1ab2:	4a79      	ldr	r2, [pc, #484]	; (1c98 <SystemInit+0x1f0>)
    1ab4:	681b      	ldr	r3, [r3, #0]
    1ab6:	f3c3 2304 	ubfx	r3, r3, #8, #5
    1aba:	6013      	str	r3, [r2, #0]
    if (errata_16()){
    1abc:	f7ff ffda 	bl	1a74 <errata_16>
    1ac0:	b110      	cbz	r0, 1ac8 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    1ac2:	4b76      	ldr	r3, [pc, #472]	; (1c9c <SystemInit+0x1f4>)
    1ac4:	4a76      	ldr	r2, [pc, #472]	; (1ca0 <SystemInit+0x1f8>)
    1ac6:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    1ac8:	f7ff ffb4 	bl	1a34 <errata_108>
    1acc:	b128      	cbz	r0, 1ada <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    1ace:	4b75      	ldr	r3, [pc, #468]	; (1ca4 <SystemInit+0x1fc>)
    1ad0:	4a75      	ldr	r2, [pc, #468]	; (1ca8 <SystemInit+0x200>)
    1ad2:	681b      	ldr	r3, [r3, #0]
    1ad4:	f3c3 3342 	ubfx	r3, r3, #13, #3
    1ad8:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    1ada:	f7ff ffcb 	bl	1a74 <errata_16>
    1ade:	b120      	cbz	r0, 1aea <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    1ae0:	4a72      	ldr	r2, [pc, #456]	; (1cac <SystemInit+0x204>)
    1ae2:	68d3      	ldr	r3, [r2, #12]
    1ae4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    1ae8:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    1aea:	f7ff ffa3 	bl	1a34 <errata_108>
    1aee:	b140      	cbz	r0, 1b02 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    1af0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1af4:	2200      	movs	r2, #0
    1af6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    1afa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    1afe:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    1b02:	f7ff ffb7 	bl	1a74 <errata_16>
    1b06:	b110      	cbz	r0, 1b0e <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    1b08:	4b69      	ldr	r3, [pc, #420]	; (1cb0 <SystemInit+0x208>)
    1b0a:	2203      	movs	r2, #3
    1b0c:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    1b0e:	f7ff ffb1 	bl	1a74 <errata_16>
    1b12:	b140      	cbz	r0, 1b26 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    1b14:	4b67      	ldr	r3, [pc, #412]	; (1cb4 <SystemInit+0x20c>)
    1b16:	2205      	movs	r2, #5
    1b18:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    1b1a:	2201      	movs	r2, #1
    1b1c:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    1b1e:	2200      	movs	r2, #0
    1b20:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    1b22:	223f      	movs	r2, #63	; 0x3f
    1b24:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    1b26:	4b64      	ldr	r3, [pc, #400]	; (1cb8 <SystemInit+0x210>)
    1b28:	781b      	ldrb	r3, [r3, #0]
    1b2a:	2b06      	cmp	r3, #6
    1b2c:	d150      	bne.n	1bd0 <SystemInit+0x128>
    1b2e:	4b63      	ldr	r3, [pc, #396]	; (1cbc <SystemInit+0x214>)
    1b30:	681b      	ldr	r3, [r3, #0]
    1b32:	0719      	lsls	r1, r3, #28
    1b34:	d14c      	bne.n	1bd0 <SystemInit+0x128>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    1b36:	4b62      	ldr	r3, [pc, #392]	; (1cc0 <SystemInit+0x218>)
    1b38:	681b      	ldr	r3, [r3, #0]
    1b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    1b3e:	2b50      	cmp	r3, #80	; 0x50
    1b40:	d146      	bne.n	1bd0 <SystemInit+0x128>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    1b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1b46:	4b5f      	ldr	r3, [pc, #380]	; (1cc4 <SystemInit+0x21c>)
    1b48:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    1b4c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    1b50:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    1b54:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    1b58:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    1b5c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    1b60:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    1b64:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    1b68:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    1b6c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    1b70:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    1b74:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    1b78:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    1b7c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    1b80:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    1b84:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    1b88:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    1b8c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    1b90:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    1b94:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    1b98:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    1b9c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    1ba0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    1ba4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    1ba8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    1bac:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    1bb0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    1bb4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    1bb8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    1bbc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    1bc0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    1bc4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    1bc8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    1bcc:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    1bd0:	f7ff ff30 	bl	1a34 <errata_108>
    1bd4:	b128      	cbz	r0, 1be2 <SystemInit+0x13a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    1bd6:	4b3c      	ldr	r3, [pc, #240]	; (1cc8 <SystemInit+0x220>)
    1bd8:	4a3c      	ldr	r2, [pc, #240]	; (1ccc <SystemInit+0x224>)
    1bda:	681b      	ldr	r3, [r3, #0]
    1bdc:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    1be0:	6013      	str	r3, [r2, #0]
    if (errata_136()){
    1be2:	f7ff ff27 	bl	1a34 <errata_108>
    1be6:	b148      	cbz	r0, 1bfc <SystemInit+0x154>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    1be8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1bec:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1bf0:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    1bf2:	bf44      	itt	mi
    1bf4:	f06f 0201 	mvnmi.w	r2, #1
    1bf8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
}


static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
    1bfc:	4b34      	ldr	r3, [pc, #208]	; (1cd0 <SystemInit+0x228>)
    1bfe:	681b      	ldr	r3, [r3, #0]
    1c00:	2b06      	cmp	r3, #6
    1c02:	d108      	bne.n	1c16 <SystemInit+0x16e>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
    1c04:	4b33      	ldr	r3, [pc, #204]	; (1cd4 <SystemInit+0x22c>)
    1c06:	681b      	ldr	r3, [r3, #0]
    1c08:	2b06      	cmp	r3, #6
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    1c0a:	bf01      	itttt	eq
    1c0c:	4a32      	ldreq	r2, [pc, #200]	; (1cd8 <SystemInit+0x230>)
    1c0e:	6813      	ldreq	r3, [r2, #0]
    1c10:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
    1c14:	6013      	streq	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    1c16:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1c1a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    1c1e:	2a00      	cmp	r2, #0
    1c20:	db03      	blt.n	1c2a <SystemInit+0x182>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    1c22:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    1c26:	2b00      	cmp	r3, #0
    1c28:	da2f      	bge.n	1c8a <SystemInit+0x1e2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    1c2a:	4b2c      	ldr	r3, [pc, #176]	; (1cdc <SystemInit+0x234>)
    1c2c:	2201      	movs	r2, #1
    1c2e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1c32:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1c36:	2a00      	cmp	r2, #0
    1c38:	d0fb      	beq.n	1c32 <SystemInit+0x18a>
            NRF_UICR->PSELRESET[0] = 21;
    1c3a:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    1c3e:	2115      	movs	r1, #21
    1c40:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1c44:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1c48:	2a00      	cmp	r2, #0
    1c4a:	d0fb      	beq.n	1c44 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[1] = 21;
    1c4c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1c50:	2215      	movs	r2, #21
    1c52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1c56:	4b21      	ldr	r3, [pc, #132]	; (1cdc <SystemInit+0x234>)
    1c58:	461a      	mov	r2, r3
    1c5a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    1c5e:	2900      	cmp	r1, #0
    1c60:	d0fb      	beq.n	1c5a <SystemInit+0x1b2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    1c62:	2100      	movs	r1, #0
    1c64:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1c68:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d0fb      	beq.n	1c68 <SystemInit+0x1c0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1c70:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1c74:	491a      	ldr	r1, [pc, #104]	; (1ce0 <SystemInit+0x238>)
    1c76:	4b1b      	ldr	r3, [pc, #108]	; (1ce4 <SystemInit+0x23c>)
    1c78:	68ca      	ldr	r2, [r1, #12]
    1c7a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1c7e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1c80:	60cb      	str	r3, [r1, #12]
    1c82:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1c86:	bf00      	nop
    1c88:	e7fd      	b.n	1c86 <SystemInit+0x1de>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    1c8a:	4b17      	ldr	r3, [pc, #92]	; (1ce8 <SystemInit+0x240>)
    1c8c:	4a17      	ldr	r2, [pc, #92]	; (1cec <SystemInit+0x244>)
    1c8e:	601a      	str	r2, [r3, #0]
}
    1c90:	bd08      	pop	{r3, pc}
    1c92:	bf00      	nop
    1c94:	10000324 	.word	0x10000324
    1c98:	40013540 	.word	0x40013540
    1c9c:	4007c074 	.word	0x4007c074
    1ca0:	baadf00d 	.word	0xbaadf00d
    1ca4:	10000244 	.word	0x10000244
    1ca8:	4000053c 	.word	0x4000053c
    1cac:	e000edf0 	.word	0xe000edf0
    1cb0:	400005a0 	.word	0x400005a0
    1cb4:	40005610 	.word	0x40005610
    1cb8:	f0000fe0 	.word	0xf0000fe0
    1cbc:	f0000fe4 	.word	0xf0000fe4
    1cc0:	f0000fe8 	.word	0xf0000fe8
    1cc4:	4000c000 	.word	0x4000c000
    1cc8:	10000258 	.word	0x10000258
    1ccc:	40000ee4 	.word	0x40000ee4
    1cd0:	10000130 	.word	0x10000130
    1cd4:	10000134 	.word	0x10000134
    1cd8:	4000173c 	.word	0x4000173c
    1cdc:	4001e000 	.word	0x4001e000
    1ce0:	e000ed00 	.word	0xe000ed00
    1ce4:	05fa0004 	.word	0x05fa0004
    1ce8:	2000d734 	.word	0x2000d734
    1cec:	03d09000 	.word	0x03d09000

00001cf0 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1cf0:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    1cf2:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
    1cf4:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1cf6:	bf9d      	ittte	ls
    1cf8:	6882      	ldrls	r2, [r0, #8]
    1cfa:	18d2      	addls	r2, r2, r3
    1cfc:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
  } else {
    r = RdOff - WrOff - 1u;
    1d00:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1d04:	bf94      	ite	ls
    1d06:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
    1d08:	1a58      	subhi	r0, r3, r1
  }
  return r;
}
    1d0a:	4770      	bx	lr

00001d0c <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    1d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    1d10:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    1d14:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    1d16:	1bf6      	subs	r6, r6, r7
    1d18:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    1d1a:	4296      	cmp	r6, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    1d1c:	4688      	mov	r8, r1
    1d1e:	4615      	mov	r5, r2
    1d20:	4438      	add	r0, r7
  if (Rem > NumBytes) {
    1d22:	d905      	bls.n	1d30 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    1d24:	f004 ffb0 	bl	6c88 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    1d28:	443d      	add	r5, r7
    pRing->WrOff = NumBytesAtOnce;
    1d2a:	60e5      	str	r5, [r4, #12]
}
    1d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    1d30:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    1d32:	1bad      	subs	r5, r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    1d34:	f004 ffa8 	bl	6c88 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    1d38:	462a      	mov	r2, r5
    1d3a:	eb08 0106 	add.w	r1, r8, r6
    1d3e:	6860      	ldr	r0, [r4, #4]
    1d40:	f004 ffa2 	bl	6c88 <memcpy>
    1d44:	e7f1      	b.n	1d2a <_WriteNoCheck+0x1e>

00001d46 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    1d46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    1d4a:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    1d4c:	4606      	mov	r6, r0
    1d4e:	4689      	mov	r9, r1
    1d50:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    1d52:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    1d56:	6934      	ldr	r4, [r6, #16]
    1d58:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    1d5a:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    1d5c:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    1d5e:	bf28      	it	cs
    1d60:	18e4      	addcs	r4, r4, r3
    1d62:	3c01      	subs	r4, #1
    1d64:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    1d66:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    1d68:	42bc      	cmp	r4, r7
    1d6a:	bf28      	it	cs
    1d6c:	463c      	movcs	r4, r7
    1d6e:	4294      	cmp	r4, r2
    1d70:	bf28      	it	cs
    1d72:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    1d74:	4649      	mov	r1, r9
    1d76:	4428      	add	r0, r5
    1d78:	4622      	mov	r2, r4
    1d7a:	f004 ff85 	bl	6c88 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    1d7e:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    1d80:	4425      	add	r5, r4
      WrOff = 0u;
    1d82:	42ab      	cmp	r3, r5
    1d84:	bf08      	it	eq
    1d86:	2500      	moveq	r5, #0
  } while (NumBytes);
    1d88:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    1d8a:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    1d8c:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    1d8e:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    1d90:	d1e1      	bne.n	1d56 <_WriteBlocking+0x10>
}
    1d92:	4640      	mov	r0, r8
    1d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00001d98 <_DoInit>:
static void _DoInit(void) {
    1d98:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1d9a:	4c11      	ldr	r4, [pc, #68]	; (1de0 <_DoInit+0x48>)
  p->aUp[0].sName         = "Terminal";
    1d9c:	4a11      	ldr	r2, [pc, #68]	; (1de4 <_DoInit+0x4c>)
    1d9e:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1da0:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1da2:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    1da6:	4b10      	ldr	r3, [pc, #64]	; (1de8 <_DoInit+0x50>)
    1da8:	61e3      	str	r3, [r4, #28]
  p->aDown[0].sName         = "Terminal";
    1daa:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    1db0:	4a0e      	ldr	r2, [pc, #56]	; (1dec <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1db2:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    1db4:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    1db6:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    1db8:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    1dba:	490d      	ldr	r1, [pc, #52]	; (1df0 <_DoInit+0x58>)
  p->aUp[0].RdOff         = 0u;
    1dbc:	62a3      	str	r3, [r4, #40]	; 0x28
  strcpy(&p->acID[7], "RTT");
    1dbe:	1de0      	adds	r0, r4, #7
  p->aUp[0].WrOff         = 0u;
    1dc0:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1dc2:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    1dc4:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1dc6:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1dc8:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    1dca:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    1dcc:	f004 fece 	bl	6b6c <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    1dd0:	4908      	ldr	r1, [pc, #32]	; (1df4 <_DoInit+0x5c>)
    1dd2:	4620      	mov	r0, r4
    1dd4:	f004 feca 	bl	6b6c <strcpy>
  p->acID[6] = ' ';
    1dd8:	2320      	movs	r3, #32
    1dda:	71a3      	strb	r3, [r4, #6]
}
    1ddc:	bd10      	pop	{r4, pc}
    1dde:	bf00      	nop
    1de0:	20003524 	.word	0x20003524
    1de4:	0002f7af 	.word	0x0002f7af
    1de8:	2000017c 	.word	0x2000017c
    1dec:	2000016c 	.word	0x2000016c
    1df0:	0002f7b8 	.word	0x0002f7b8
    1df4:	0002f7bc 	.word	0x0002f7bc

00001df8 <SEGGER_RTT_WriteSkipNoLock>:
  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    1df8:	f8df c088 	ldr.w	ip, [pc, #136]	; 1e84 <SEGGER_RTT_WriteSkipNoLock+0x8c>
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  RdOff = pRing->RdOff;
    1e00:	f04f 0a18 	mov.w	sl, #24
    1e04:	fb0a c700 	mla	r7, sl, r0, ip
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1e08:	4689      	mov	r9, r1
  RdOff = pRing->RdOff;
    1e0a:	6abe      	ldr	r6, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
    1e0c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
    1e0e:	42ae      	cmp	r6, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1e10:	4614      	mov	r4, r2
  if (RdOff <= WrOff) {
    1e12:	d82b      	bhi.n	1e6c <SEGGER_RTT_WriteSkipNoLock+0x74>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
    1e14:	6a3b      	ldr	r3, [r7, #32]
    1e16:	eba3 0805 	sub.w	r8, r3, r5
    1e1a:	f108 3eff 	add.w	lr, r8, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {
    1e1e:	4572      	cmp	r2, lr
    1e20:	d806      	bhi.n	1e30 <SEGGER_RTT_WriteSkipNoLock+0x38>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    1e22:	fb00 a30a 	mla	r3, r0, sl, sl
    1e26:	449c      	add	ip, r3
    1e28:	f8dc 0004 	ldr.w	r0, [ip, #4]
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    1e2c:	4428      	add	r0, r5
    1e2e:	e00a      	b.n	1e46 <SEGGER_RTT_WriteSkipNoLock+0x4e>
    Avail += RdOff;
    1e30:	4476      	add	r6, lr
    if (Avail >= NumBytes) {
    1e32:	42b2      	cmp	r2, r6
    1e34:	d823      	bhi.n	1e7e <SEGGER_RTT_WriteSkipNoLock+0x86>
    1e36:	fb00 a30a 	mla	r3, r0, sl, sl
    1e3a:	eb0c 0603 	add.w	r6, ip, r3
      if (Rem > NumBytes) {
    1e3e:	4590      	cmp	r8, r2
    1e40:	6870      	ldr	r0, [r6, #4]
    1e42:	4428      	add	r0, r5
    1e44:	d903      	bls.n	1e4e <SEGGER_RTT_WriteSkipNoLock+0x56>
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    1e46:	f004 ff1f 	bl	6c88 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    1e4a:	442c      	add	r4, r5
    1e4c:	e00a      	b.n	1e64 <SEGGER_RTT_WriteSkipNoLock+0x6c>
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
    1e4e:	4642      	mov	r2, r8
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
    1e50:	eba4 0408 	sub.w	r4, r4, r8
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
    1e54:	f004 ff18 	bl	6c88 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
    1e58:	4622      	mov	r2, r4
    1e5a:	eb09 0108 	add.w	r1, r9, r8
    1e5e:	6870      	ldr	r0, [r6, #4]
    1e60:	f004 ff12 	bl	6c88 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    1e64:	627c      	str	r4, [r7, #36]	; 0x24
#endif
      return 1;
    1e66:	2001      	movs	r0, #1
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
}
    1e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    Avail = RdOff - WrOff - 1u;
    1e6c:	3e01      	subs	r6, #1
    1e6e:	1b76      	subs	r6, r6, r5
    if (Avail >= NumBytes) {
    1e70:	4296      	cmp	r6, r2
    1e72:	d304      	bcc.n	1e7e <SEGGER_RTT_WriteSkipNoLock+0x86>
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    1e74:	fb00 a30a 	mla	r3, r0, sl, sl
    1e78:	4463      	add	r3, ip
    1e7a:	6858      	ldr	r0, [r3, #4]
    1e7c:	e7d6      	b.n	1e2c <SEGGER_RTT_WriteSkipNoLock+0x34>
  return 0;
    1e7e:	2000      	movs	r0, #0
    1e80:	e7f2      	b.n	1e68 <SEGGER_RTT_WriteSkipNoLock+0x70>
    1e82:	bf00      	nop
    1e84:	20003524 	.word	0x20003524

00001e88 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    1e8a:	4c18      	ldr	r4, [pc, #96]	; (1eec <SEGGER_RTT_WriteNoLock+0x64>)
    1e8c:	2318      	movs	r3, #24
    1e8e:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1e92:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    1e96:	4425      	add	r5, r4
  switch (pRing->Flags) {
    1e98:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    1e9a:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1e9c:	460f      	mov	r7, r1
    1e9e:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    1ea0:	d011      	beq.n	1ec6 <SEGGER_RTT_WriteNoLock+0x3e>
    1ea2:	d303      	bcc.n	1eac <SEGGER_RTT_WriteNoLock+0x24>
    1ea4:	2c02      	cmp	r4, #2
    1ea6:	d01b      	beq.n	1ee0 <SEGGER_RTT_WriteNoLock+0x58>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    1ea8:	2400      	movs	r4, #0
    break;
  }
  //
  // Finish up.
  //
  return Status;
    1eaa:	e00a      	b.n	1ec2 <SEGGER_RTT_WriteNoLock+0x3a>
    Avail = _GetAvailWriteSpace(pRing);
    1eac:	4628      	mov	r0, r5
    1eae:	f7ff ff1f 	bl	1cf0 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    1eb2:	4286      	cmp	r6, r0
    1eb4:	d805      	bhi.n	1ec2 <SEGGER_RTT_WriteNoLock+0x3a>
      _WriteNoCheck(pRing, pData, NumBytes);
    1eb6:	4632      	mov	r2, r6
    1eb8:	4639      	mov	r1, r7
    1eba:	4628      	mov	r0, r5
    1ebc:	f7ff ff26 	bl	1d0c <_WriteNoCheck>
    1ec0:	4634      	mov	r4, r6
}
    1ec2:	4620      	mov	r0, r4
    1ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    1ec6:	4628      	mov	r0, r5
    1ec8:	f7ff ff12 	bl	1cf0 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    1ecc:	4286      	cmp	r6, r0
    1ece:	4634      	mov	r4, r6
    1ed0:	bf28      	it	cs
    1ed2:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    1ed4:	4622      	mov	r2, r4
    1ed6:	4639      	mov	r1, r7
    1ed8:	4628      	mov	r0, r5
    1eda:	f7ff ff17 	bl	1d0c <_WriteNoCheck>
    break;
    1ede:	e7f0      	b.n	1ec2 <SEGGER_RTT_WriteNoLock+0x3a>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1ee0:	4628      	mov	r0, r5
}
    1ee2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1ee6:	f7ff bf2e 	b.w	1d46 <_WriteBlocking>
    1eea:	bf00      	nop
    1eec:	20003524 	.word	0x20003524

00001ef0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    1ef0:	4a03      	ldr	r2, [pc, #12]	; (1f00 <SEGGER_RTT_HasDataUp+0x10>)
    1ef2:	2318      	movs	r3, #24
    1ef4:	fb03 2300 	mla	r3, r3, r0, r2
    1ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    1efa:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1efc:	1a80      	subs	r0, r0, r2
    1efe:	4770      	bx	lr
    1f00:	20003524 	.word	0x20003524

00001f04 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    1f04:	f7ff bf48 	b.w	1d98 <_DoInit>

00001f08 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
    1f08:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    1f0a:	f7ff fffb 	bl	1f04 <SEGGER_RTT_Init>
}
    1f0e:	bd08      	pop	{r3, pc}

00001f10 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    1f10:	2300      	movs	r3, #0
	list->head = NULL;
    1f12:	e9c0 3300 	strd	r3, r3, [r0]
}
    1f16:	4770      	bx	lr

00001f18 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    1f18:	6803      	ldr	r3, [r0, #0]
    1f1a:	b923      	cbnz	r3, 1f26 <log_list_add_tail+0xe>
		list->head = msg;
    1f1c:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    1f1e:	2300      	movs	r3, #0
	list->tail = msg;
    1f20:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    1f22:	600b      	str	r3, [r1, #0]
}
    1f24:	4770      	bx	lr
		list->tail->next = msg;
    1f26:	6843      	ldr	r3, [r0, #4]
    1f28:	6019      	str	r1, [r3, #0]
    1f2a:	e7f8      	b.n	1f1e <log_list_add_tail+0x6>

00001f2c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    1f2c:	6800      	ldr	r0, [r0, #0]
    1f2e:	4770      	bx	lr

00001f30 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
    1f30:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
    1f32:	b10b      	cbz	r3, 1f38 <log_list_head_get+0x8>
		list->head = list->head->next;
    1f34:	681a      	ldr	r2, [r3, #0]
    1f36:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
    1f38:	4618      	mov	r0, r3
    1f3a:	4770      	bx	lr

00001f3c <dummy_timestamp>:
static timestamp_get_t timestamp_func = dummy_timestamp;

static u32_t dummy_timestamp(void)
{
	return 0;
}
    1f3c:	2000      	movs	r0, #0
    1f3e:	4770      	bx	lr

00001f40 <_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *_log_msg_std_alloc(void)
{
    1f40:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    1f42:	a902      	add	r1, sp, #8
    1f44:	2200      	movs	r2, #0
    1f46:	f841 2d04 	str.w	r2, [r1, #-4]!
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    1f4a:	4808      	ldr	r0, [pc, #32]	; (1f6c <_log_msg_std_alloc+0x2c>)
    1f4c:	f02b fbc4 	bl	2d6d8 <k_mem_slab_alloc>
	if (err != 0) {
    1f50:	b110      	cbz	r0, 1f58 <_log_msg_std_alloc+0x18>
		msg = log_msg_no_space_handle();
    1f52:	f000 fb19 	bl	2588 <log_msg_no_space_handle>
    1f56:	9001      	str	r0, [sp, #4]
	return msg;
    1f58:	9801      	ldr	r0, [sp, #4]
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();

	if (msg != NULL) {
    1f5a:	b118      	cbz	r0, 1f64 <_log_msg_std_alloc+0x24>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    1f5c:	2301      	movs	r3, #1
    1f5e:	6043      	str	r3, [r0, #4]
    1f60:	2300      	movs	r3, #0
    1f62:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.raw = 0;
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
    1f64:	b003      	add	sp, #12
    1f66:	f85d fb04 	ldr.w	pc, [sp], #4
    1f6a:	bf00      	nop
    1f6c:	20003654 	.word	0x20003654

00001f70 <timestamp_get>:
	log_n(fmt, args, nargs, src_level);
}

static u32_t timestamp_get(void)
{
	return k_cycle_get_32();
    1f70:	f004 b97e 	b.w	6270 <_timer_cycle_get_32>

00001f74 <log_core_init>:
}

void log_core_init(void)
{
    1f74:	b538      	push	{r3, r4, r5, lr}
	log_msg_pool_init();
    1f76:	f000 faef 	bl	2558 <log_msg_pool_init>
	log_list_init(&list);
    1f7a:	480d      	ldr	r0, [pc, #52]	; (1fb0 <log_core_init+0x3c>)
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING)) {
		for (int i = 0; i < log_sources_count(); i++) {
			u32_t *filters = log_dynamic_filters_get(i);
			u8_t level = log_compiled_level_get(i);

			LOG_FILTER_SLOT_SET(filters,
    1f7c:	4d0d      	ldr	r5, [pc, #52]	; (1fb4 <log_core_init+0x40>)
	log_list_init(&list);
    1f7e:	f7ff ffc7 	bl	1f10 <log_list_init>
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    1f82:	480d      	ldr	r0, [pc, #52]	; (1fb8 <log_core_init+0x44>)
    1f84:	4a0d      	ldr	r2, [pc, #52]	; (1fbc <log_core_init+0x48>)
    1f86:	1a12      	subs	r2, r2, r0
    1f88:	08d2      	lsrs	r2, r2, #3
		for (int i = 0; i < log_sources_count(); i++) {
    1f8a:	2300      	movs	r3, #0
    1f8c:	4293      	cmp	r3, r2
    1f8e:	d100      	bne.n	1f92 <log_core_init+0x1e>
					    LOG_FILTER_AGGR_SLOT_IDX,
					    level);
		}
	}
}
    1f90:	bd38      	pop	{r3, r4, r5, pc}
	return __log_const_start[source_id].level;
    1f92:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
			LOG_FILTER_SLOT_SET(filters,
    1f96:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    1f9a:	7909      	ldrb	r1, [r1, #4]
    1f9c:	f024 0407 	bic.w	r4, r4, #7
    1fa0:	f001 0107 	and.w	r1, r1, #7
    1fa4:	4321      	orrs	r1, r4
    1fa6:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
		for (int i = 0; i < log_sources_count(); i++) {
    1faa:	3301      	adds	r3, #1
    1fac:	e7ee      	b.n	1f8c <log_core_init+0x18>
    1fae:	bf00      	nop
    1fb0:	20000588 	.word	0x20000588
    1fb4:	2000e1fc 	.word	0x2000e1fc
    1fb8:	0002ef38 	.word	0x0002ef38
    1fbc:	0002f0d0 	.word	0x0002f0d0

00001fc0 <log_process>:

bool log_process(bool bypass)
{
	struct log_msg *msg;

	if (!backend_attached) {
    1fc0:	4b26      	ldr	r3, [pc, #152]	; (205c <log_process+0x9c>)
{
    1fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fc6:	4605      	mov	r5, r0
	if (!backend_attached) {
    1fc8:	7818      	ldrb	r0, [r3, #0]
    1fca:	b310      	cbz	r0, 2012 <log_process+0x52>
	__asm__ volatile(
    1fcc:	f04f 0320 	mov.w	r3, #32
    1fd0:	f3ef 8411 	mrs	r4, BASEPRI
    1fd4:	f383 8811 	msr	BASEPRI, r3
		return false;
	}
	unsigned int key = irq_lock();

	msg = log_list_head_get(&list);
    1fd8:	4821      	ldr	r0, [pc, #132]	; (2060 <log_process+0xa0>)
    1fda:	f7ff ffa9 	bl	1f30 <log_list_head_get>
    1fde:	4606      	mov	r6, r0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1fe0:	f384 8811 	msr	BASEPRI, r4
	irq_unlock(key);

	if (msg != NULL) {
    1fe4:	b178      	cbz	r0, 2006 <log_process+0x46>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1fe6:	f3bf 8f5b 	dmb	ish
    1fea:	4b1e      	ldr	r3, [pc, #120]	; (2064 <log_process+0xa4>)
    1fec:	e853 2f00 	ldrex	r2, [r3]
    1ff0:	3a01      	subs	r2, #1
    1ff2:	e843 2100 	strex	r1, r2, [r3]
    1ff6:	2900      	cmp	r1, #0
    1ff8:	d1f8      	bne.n	1fec <log_process+0x2c>
    1ffa:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    1ffe:	b155      	cbz	r5, 2016 <log_process+0x56>
	log_msg_put(msg);
    2000:	4630      	mov	r0, r6
    2002:	f000 fb3f 	bl	2684 <log_msg_put>
		atomic_dec(&buffered_cnt);
		msg_process(msg, bypass);
	}

	return (log_list_head_peek(&list) != NULL);
    2006:	4816      	ldr	r0, [pc, #88]	; (2060 <log_process+0xa0>)
    2008:	f7ff ff90 	bl	1f2c <log_list_head_peek>
    200c:	3000      	adds	r0, #0
    200e:	bf18      	it	ne
    2010:	2001      	movne	r0, #1
}
    2012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    2016:	4c14      	ldr	r4, [pc, #80]	; (2068 <log_process+0xa8>)
    2018:	4f14      	ldr	r7, [pc, #80]	; (206c <log_process+0xac>)
	assert(src_id < log_sources_count());

	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
		u32_t *filters = log_dynamic_filters_get(src_id);

		return LOG_FILTER_SLOT_GET(filters,
    201a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 2070 <log_process+0xb0>
    201e:	1b3f      	subs	r7, r7, r4
    2020:	093f      	lsrs	r7, r7, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
    2022:	42bd      	cmp	r5, r7
    2024:	daec      	bge.n	2000 <log_process+0x40>
			if (log_backend_is_active(backend) &&
    2026:	6863      	ldr	r3, [r4, #4]
    2028:	795a      	ldrb	r2, [r3, #5]
    202a:	b19a      	cbz	r2, 2054 <log_process+0x94>
	return msg->hdr.ids.source_id;
    202c:	8970      	ldrh	r0, [r6, #10]
		return LOG_FILTER_SLOT_GET(filters,
    202e:	791b      	ldrb	r3, [r3, #4]
	return msg->hdr.ids.level;
    2030:	7ab1      	ldrb	r1, [r6, #10]
	return msg->hdr.ids.source_id;
    2032:	0980      	lsrs	r0, r0, #6
    2034:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    2038:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
    203c:	40d3      	lsrs	r3, r2
	return msg->hdr.ids.level;
    203e:	f001 0107 	and.w	r1, r1, #7
    2042:	f003 0307 	and.w	r3, r3, #7
			if (log_backend_is_active(backend) &&
    2046:	4299      	cmp	r1, r3
    2048:	d804      	bhi.n	2054 <log_process+0x94>
	backend->api->put(backend, msg);
    204a:	6823      	ldr	r3, [r4, #0]
    204c:	4631      	mov	r1, r6
    204e:	681b      	ldr	r3, [r3, #0]
    2050:	4620      	mov	r0, r4
    2052:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    2054:	3501      	adds	r5, #1
    2056:	3410      	adds	r4, #16
    2058:	e7e3      	b.n	2022 <log_process+0x62>
    205a:	bf00      	nop
    205c:	2000057c 	.word	0x2000057c
    2060:	20000588 	.word	0x20000588
    2064:	20000580 	.word	0x20000580
    2068:	0002f0d0 	.word	0x0002f0d0
    206c:	0002f100 	.word	0x0002f100
    2070:	2000e1fc 	.word	0x2000e1fc

00002074 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    2074:	4b18      	ldr	r3, [pc, #96]	; (20d8 <msg_finalize+0x64>)
{
    2076:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    2078:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    207a:	8141      	strh	r1, [r0, #10]
{
    207c:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    207e:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2080:	4c16      	ldr	r4, [pc, #88]	; (20dc <msg_finalize+0x68>)
    2082:	60e8      	str	r0, [r5, #12]
    2084:	f3bf 8f5b 	dmb	ish
    2088:	e854 3f00 	ldrex	r3, [r4]
    208c:	3301      	adds	r3, #1
    208e:	e844 3200 	strex	r2, r3, [r4]
    2092:	2a00      	cmp	r2, #0
    2094:	d1f8      	bne.n	2088 <msg_finalize+0x14>
    2096:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    209a:	f04f 0320 	mov.w	r3, #32
    209e:	f3ef 8611 	mrs	r6, BASEPRI
    20a2:	f383 8811 	msr	BASEPRI, r3
	log_list_add_tail(&list, msg);
    20a6:	480e      	ldr	r0, [pc, #56]	; (20e0 <msg_finalize+0x6c>)
    20a8:	4629      	mov	r1, r5
    20aa:	f7ff ff35 	bl	1f18 <log_list_add_tail>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    20ae:	f386 8811 	msr	BASEPRI, r6
	if (IS_ENABLED(CONFIG_LOG_INPLACE_PROCESS) || panic_mode) {
    20b2:	4b0c      	ldr	r3, [pc, #48]	; (20e4 <msg_finalize+0x70>)
    20b4:	781b      	ldrb	r3, [r3, #0]
    20b6:	b123      	cbz	r3, 20c2 <msg_finalize+0x4e>
		(void)log_process(false);
    20b8:	2000      	movs	r0, #0
}
    20ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)log_process(false);
    20be:	f7ff bf7f 	b.w	1fc0 <log_process>
		if (buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    20c2:	6823      	ldr	r3, [r4, #0]
    20c4:	2b0a      	cmp	r3, #10
    20c6:	d106      	bne.n	20d6 <msg_finalize+0x62>
    20c8:	4b07      	ldr	r3, [pc, #28]	; (20e8 <msg_finalize+0x74>)
    20ca:	6818      	ldr	r0, [r3, #0]
    20cc:	b118      	cbz	r0, 20d6 <msg_finalize+0x62>
}
    20ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    20d2:	f02c b89d 	b.w	2e210 <_impl_k_wakeup>
    20d6:	bd70      	pop	{r4, r5, r6, pc}
    20d8:	2000d738 	.word	0x2000d738
    20dc:	20000580 	.word	0x20000580
    20e0:	20000588 	.word	0x20000588
    20e4:	20000590 	.word	0x20000590
    20e8:	20000594 	.word	0x20000594

000020ec <log_1>:
{
    20ec:	b570      	push	{r4, r5, r6, lr}
    20ee:	4604      	mov	r4, r0
    20f0:	460e      	mov	r6, r1
    20f2:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       u32_t arg1)
{
	struct  log_msg *msg = _log_msg_std_alloc();
    20f4:	f7ff ff24 	bl	1f40 <_log_msg_std_alloc>

	if (msg != NULL) {
    20f8:	b158      	cbz	r0, 2112 <log_1+0x26>
		msg->str = str;
    20fa:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1;
    20fc:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
    20fe:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1;
    2100:	2201      	movs	r2, #1
    2102:	f362 1407 	bfi	r4, r2, #4, #4
    2106:	7244      	strb	r4, [r0, #9]
	msg_finalize(msg, src_level);
    2108:	4629      	mov	r1, r5
}
    210a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	msg_finalize(msg, src_level);
    210e:	f7ff bfb1 	b.w	2074 <msg_finalize>
}
    2112:	bd70      	pop	{r4, r5, r6, pc}

00002114 <log_2>:
{
    2114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2118:	4605      	mov	r5, r0
    211a:	4688      	mov	r8, r1
    211c:	4617      	mov	r7, r2
    211e:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       u32_t arg1,
					       u32_t arg2)
{
	struct  log_msg *msg = _log_msg_std_alloc();
    2120:	f7ff ff0e 	bl	1f40 <_log_msg_std_alloc>

	if (msg != NULL) {
    2124:	b160      	cbz	r0, 2140 <log_2+0x2c>
		msg->str = str;
    2126:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2;
    2128:	7a45      	ldrb	r5, [r0, #9]
    212a:	2302      	movs	r3, #2
    212c:	f363 1507 	bfi	r5, r3, #4, #4
    2130:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    2132:	e9c0 8705 	strd	r8, r7, [r0, #20]
	msg_finalize(msg, src_level);
    2136:	4631      	mov	r1, r6
}
    2138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	msg_finalize(msg, src_level);
    213c:	f7ff bf9a 	b.w	2074 <msg_finalize>
}
    2140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002144 <log_3>:
{
    2144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2148:	4605      	mov	r5, r0
    214a:	4689      	mov	r9, r1
    214c:	4690      	mov	r8, r2
    214e:	461f      	mov	r7, r3
    2150:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       u32_t arg1,
					       u32_t arg2,
					       u32_t arg3)
{
	struct  log_msg *msg = _log_msg_std_alloc();
    2154:	f7ff fef4 	bl	1f40 <_log_msg_std_alloc>

	if (msg != NULL) {
    2158:	b168      	cbz	r0, 2176 <log_3+0x32>
		msg->str = str;
    215a:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3;
    215c:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
    215e:	61c7      	str	r7, [r0, #28]
		msg->hdr.params.std.nargs = 3;
    2160:	2303      	movs	r3, #3
    2162:	f363 1507 	bfi	r5, r3, #4, #4
    2166:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[1] = arg2;
    2168:	e9c0 9805 	strd	r9, r8, [r0, #20]
	msg_finalize(msg, src_level);
    216c:	4631      	mov	r1, r6
}
    216e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	msg_finalize(msg, src_level);
    2172:	f7ff bf7f 	b.w	2074 <msg_finalize>
}
    2176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000217a <log_n>:
{
    217a:	b510      	push	{r4, lr}
    217c:	461c      	mov	r4, r3
	struct log_msg *msg = log_msg_create_n(str, args, narg);
    217e:	f000 fa96 	bl	26ae <log_msg_create_n>
	if (msg == NULL) {
    2182:	b120      	cbz	r0, 218e <log_n+0x14>
	msg_finalize(msg, src_level);
    2184:	4621      	mov	r1, r4
}
    2186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	msg_finalize(msg, src_level);
    218a:	f7ff bf73 	b.w	2074 <msg_finalize>
}
    218e:	bd10      	pop	{r4, pc}

00002190 <log_panic>:
{
    2190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    2192:	4f0d      	ldr	r7, [pc, #52]	; (21c8 <log_panic+0x38>)
    2194:	783d      	ldrb	r5, [r7, #0]
    2196:	b965      	cbnz	r5, 21b2 <log_panic+0x22>
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    2198:	4c0c      	ldr	r4, [pc, #48]	; (21cc <log_panic+0x3c>)
    219a:	4e0d      	ldr	r6, [pc, #52]	; (21d0 <log_panic+0x40>)
    219c:	1b36      	subs	r6, r6, r4
    219e:	0936      	lsrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    21a0:	42b5      	cmp	r5, r6
    21a2:	db07      	blt.n	21b4 <log_panic+0x24>
	panic_mode = true;
    21a4:	2301      	movs	r3, #1
    21a6:	703b      	strb	r3, [r7, #0]
	while (log_process(false) == true) {
    21a8:	2000      	movs	r0, #0
    21aa:	f7ff ff09 	bl	1fc0 <log_process>
    21ae:	2800      	cmp	r0, #0
    21b0:	d1fa      	bne.n	21a8 <log_panic+0x18>
}
    21b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	assert(backend);
	return backend->cb->active;
    21b4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    21b6:	795b      	ldrb	r3, [r3, #5]
    21b8:	b11b      	cbz	r3, 21c2 <log_panic+0x32>
	backend->api->panic(backend);
    21ba:	6823      	ldr	r3, [r4, #0]
    21bc:	4620      	mov	r0, r4
    21be:	685b      	ldr	r3, [r3, #4]
    21c0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    21c2:	3501      	adds	r5, #1
    21c4:	3410      	adds	r4, #16
    21c6:	e7eb      	b.n	21a0 <log_panic+0x10>
    21c8:	20000590 	.word	0x20000590
    21cc:	0002f0d0 	.word	0x0002f0d0
    21d0:	0002f100 	.word	0x0002f100

000021d4 <log_source_name_get>:
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    21d4:	4a04      	ldr	r2, [pc, #16]	; (21e8 <log_source_name_get+0x14>)
    21d6:	4b05      	ldr	r3, [pc, #20]	; (21ec <log_source_name_get+0x18>)
    21d8:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    21da:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    21de:	bf34      	ite	cc
    21e0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    21e4:	2000      	movcs	r0, #0
}
    21e6:	4770      	bx	lr
    21e8:	0002ef38 	.word	0x0002ef38
    21ec:	0002f0d0 	.word	0x0002f0d0

000021f0 <log_filter_set>:
{
    21f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    21f4:	4688      	mov	r8, r1
    21f6:	4615      	mov	r5, r2
    21f8:	461e      	mov	r6, r3
		if (backend == NULL) {
    21fa:	b990      	cbnz	r0, 2222 <log_filter_set+0x32>
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    21fc:	4b1a      	ldr	r3, [pc, #104]	; (2268 <log_filter_set+0x78>)
    21fe:	4f1b      	ldr	r7, [pc, #108]	; (226c <log_filter_set+0x7c>)
    2200:	1aff      	subs	r7, r7, r3
    2202:	093f      	lsrs	r7, r7, #4
			for (int i = 0; i < log_backend_count_get(); i++) {
    2204:	4604      	mov	r4, r0
    2206:	4699      	mov	r9, r3
    2208:	42bc      	cmp	r4, r7
    220a:	db01      	blt.n	2210 <log_filter_set+0x20>
}
    220c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				log_filter_set(backend, domain_id,
    2210:	eb09 1004 	add.w	r0, r9, r4, lsl #4
    2214:	4633      	mov	r3, r6
    2216:	462a      	mov	r2, r5
    2218:	4641      	mov	r1, r8
    221a:	f7ff ffe9 	bl	21f0 <log_filter_set>
			for (int i = 0; i < log_backend_count_get(); i++) {
    221e:	3401      	adds	r4, #1
    2220:	e7f2      	b.n	2208 <log_filter_set+0x18>
	return backend->cb->id;
    2222:	6843      	ldr	r3, [r0, #4]
			LOG_FILTER_SLOT_SET(filters,
    2224:	4912      	ldr	r1, [pc, #72]	; (2270 <log_filter_set+0x80>)
    2226:	791a      	ldrb	r2, [r3, #4]
    2228:	2307      	movs	r3, #7
    222a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    222e:	fa03 f002 	lsl.w	r0, r3, r2
    2232:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
    2236:	f006 0607 	and.w	r6, r6, #7
    223a:	ea23 0300 	bic.w	r3, r3, r0
    223e:	4096      	lsls	r6, r2
    2240:	4333      	orrs	r3, r6
    2242:	2203      	movs	r2, #3
	u32_t max_filter = LOG_LEVEL_NONE;
    2244:	2000      	movs	r0, #0
		u32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
    2246:	fa23 f402 	lsr.w	r4, r3, r2
    224a:	f004 0407 	and.w	r4, r4, #7
    224e:	42a0      	cmp	r0, r4
    2250:	f102 0203 	add.w	r2, r2, #3
    2254:	bf38      	it	cc
    2256:	4620      	movcc	r0, r4
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
    2258:	2a1e      	cmp	r2, #30
    225a:	d1f4      	bne.n	2246 <log_filter_set+0x56>
			LOG_FILTER_SLOT_SET(filters,
    225c:	f023 0307 	bic.w	r3, r3, #7
    2260:	4303      	orrs	r3, r0
    2262:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
}
    2266:	e7d1      	b.n	220c <log_filter_set+0x1c>
    2268:	0002f0d0 	.word	0x0002f0d0
    226c:	0002f100 	.word	0x0002f100
    2270:	2000e1fc 	.word	0x2000e1fc

00002274 <log_init>:
{
    2274:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2278:	4b25      	ldr	r3, [pc, #148]	; (2310 <log_init+0x9c>)
    227a:	f3bf 8f5b 	dmb	ish
    227e:	e853 4f00 	ldrex	r4, [r3]
    2282:	1c62      	adds	r2, r4, #1
    2284:	e843 2100 	strex	r1, r2, [r3]
    2288:	2900      	cmp	r1, #0
    228a:	d1f8      	bne.n	227e <log_init+0xa>
    228c:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized)) {
    2290:	b9e4      	cbnz	r4, 22cc <log_init+0x58>
	k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    2292:	2304      	movs	r3, #4
    2294:	2234      	movs	r2, #52	; 0x34
    2296:	491f      	ldr	r1, [pc, #124]	; (2314 <log_init+0xa0>)
    2298:	481f      	ldr	r0, [pc, #124]	; (2318 <log_init+0xa4>)
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    229a:	4d20      	ldr	r5, [pc, #128]	; (231c <log_init+0xa8>)
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    229c:	4e20      	ldr	r6, [pc, #128]	; (2320 <log_init+0xac>)
			backend_attached = true;
    229e:	f8df b094 	ldr.w	fp, [pc, #148]	; 2334 <log_init+0xc0>
	k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    22a2:	f02b fa07 	bl	2d6b4 <k_mem_slab_init>
	timestamp_func = timestamp_get;
    22a6:	4b1f      	ldr	r3, [pc, #124]	; (2324 <log_init+0xb0>)
    22a8:	4a1f      	ldr	r2, [pc, #124]	; (2328 <log_init+0xb4>)
    22aa:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
    22ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    22b0:	f000 fd6c 	bl	2d8c <log_output_timestamp_freq_set>
    22b4:	4b1d      	ldr	r3, [pc, #116]	; (232c <log_init+0xb8>)
    22b6:	1b5b      	subs	r3, r3, r5
    22b8:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    22bc:	4b1c      	ldr	r3, [pc, #112]	; (2330 <log_init+0xbc>)
    22be:	1af6      	subs	r6, r6, r3
    22c0:	08f6      	lsrs	r6, r6, #3
    22c2:	4698      	mov	r8, r3
	backend->cb->active = true;
    22c4:	f04f 0901 	mov.w	r9, #1
	for (i = 0; i < log_backend_count_get(); i++) {
    22c8:	4554      	cmp	r4, sl
    22ca:	db01      	blt.n	22d0 <log_init+0x5c>
}
    22cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		log_backend_id_set(backend,
    22d0:	686b      	ldr	r3, [r5, #4]
	backend->cb->id = id;
    22d2:	3401      	adds	r4, #1
    22d4:	711c      	strb	r4, [r3, #4]
		if (backend->autostart) {
    22d6:	7b2b      	ldrb	r3, [r5, #12]
    22d8:	b16b      	cbz	r3, 22f6 <log_init+0x82>
		for (i = 0; i < log_sources_count(); i++) {
    22da:	2700      	movs	r7, #0
    22dc:	42be      	cmp	r6, r7
    22de:	d10c      	bne.n	22fa <log_init+0x86>
			if (backend->api->init) {
    22e0:	682b      	ldr	r3, [r5, #0]
    22e2:	689b      	ldr	r3, [r3, #8]
    22e4:	b103      	cbz	r3, 22e8 <log_init+0x74>
				backend->api->init();
    22e6:	4798      	blx	r3
			log_backend_activate(backend, NULL);
    22e8:	686b      	ldr	r3, [r5, #4]
			backend_attached = true;
    22ea:	f88b 9000 	strb.w	r9, [fp]
	backend->cb->ctx = ctx;
    22ee:	2200      	movs	r2, #0
    22f0:	601a      	str	r2, [r3, #0]
	backend->cb->active = true;
    22f2:	f883 9005 	strb.w	r9, [r3, #5]
    22f6:	3510      	adds	r5, #16
    22f8:	e7e6      	b.n	22c8 <log_init+0x54>
	return __log_const_start[source_id].level;
    22fa:	eb08 03c7 	add.w	r3, r8, r7, lsl #3
			log_filter_set(backend,
    22fe:	463a      	mov	r2, r7
    2300:	791b      	ldrb	r3, [r3, #4]
    2302:	2100      	movs	r1, #0
    2304:	4628      	mov	r0, r5
    2306:	f7ff ff73 	bl	21f0 <log_filter_set>
		for (i = 0; i < log_sources_count(); i++) {
    230a:	3701      	adds	r7, #1
    230c:	e7e6      	b.n	22dc <log_init+0x68>
    230e:	bf00      	nop
    2310:	20000584 	.word	0x20000584
    2314:	20003d30 	.word	0x20003d30
    2318:	20003638 	.word	0x20003638
    231c:	0002f0d0 	.word	0x0002f0d0
    2320:	0002f0d0 	.word	0x0002f0d0
    2324:	2000d738 	.word	0x2000d738
    2328:	00001f71 	.word	0x00001f71
    232c:	0002f100 	.word	0x0002f100
    2330:	0002ef38 	.word	0x0002ef38
    2334:	2000057c 	.word	0x2000057c

00002338 <log_process_thread_func>:
	}
}

#ifdef CONFIG_LOG_PROCESS_THREAD
static void log_process_thread_func(void *dummy1, void *dummy2, void *dummy3)
{
    2338:	b508      	push	{r3, lr}
	log_init();
    233a:	f7ff ff9b 	bl	2274 <log_init>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    233e:	f02b ff8d 	bl	2e25c <_impl_k_current_get>
	proc_tid = process_tid;
    2342:	4a09      	ldr	r2, [pc, #36]	; (2368 <log_process_thread_func+0x30>)
    2344:	6010      	str	r0, [r2, #0]
	if (!IS_ENABLED(CONFIG_LOG_INPLACE_PROCESS) &&
    2346:	b128      	cbz	r0, 2354 <log_process_thread_func+0x1c>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    2348:	4b08      	ldr	r3, [pc, #32]	; (236c <log_process_thread_func+0x34>)
	    process_tid &&
    234a:	681b      	ldr	r3, [r3, #0]
    234c:	2b09      	cmp	r3, #9
    234e:	dd01      	ble.n	2354 <log_process_thread_func+0x1c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    2350:	f02b ff5e 	bl	2e210 <_impl_k_wakeup>
	thread_set(k_current_get());

	while (1) {
		if (log_process(false) == false) {
    2354:	2000      	movs	r0, #0
    2356:	f7ff fe33 	bl	1fc0 <log_process>
    235a:	2800      	cmp	r0, #0
    235c:	d1fa      	bne.n	2354 <log_process_thread_func+0x1c>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    235e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2362:	f02b ff15 	bl	2e190 <_impl_k_sleep>
    2366:	e7f5      	b.n	2354 <log_process_thread_func+0x1c>
    2368:	20000594 	.word	0x20000594
    236c:	20000580 	.word	0x20000580

00002370 <log_backend_enable>:
{
    2370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    2374:	4b0c      	ldr	r3, [pc, #48]	; (23a8 <log_backend_enable+0x38>)
    2376:	4c0d      	ldr	r4, [pc, #52]	; (23ac <log_backend_enable+0x3c>)
    2378:	1ae4      	subs	r4, r4, r3
    237a:	4606      	mov	r6, r0
    237c:	460f      	mov	r7, r1
    237e:	4690      	mov	r8, r2
    2380:	08e4      	lsrs	r4, r4, #3
		for (int i = 0; i < log_sources_count(); i++) {
    2382:	2500      	movs	r5, #0
    2384:	42ac      	cmp	r4, r5
    2386:	d107      	bne.n	2398 <log_backend_enable+0x28>
	log_backend_activate(backend, ctx);
    2388:	6872      	ldr	r2, [r6, #4]
    238a:	2301      	movs	r3, #1
	backend->cb->ctx = ctx;
    238c:	6017      	str	r7, [r2, #0]
	backend->cb->active = true;
    238e:	7153      	strb	r3, [r2, #5]
	backend_attached = true;
    2390:	4a07      	ldr	r2, [pc, #28]	; (23b0 <log_backend_enable+0x40>)
    2392:	7013      	strb	r3, [r2, #0]
}
    2394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			log_filter_set(backend,
    2398:	462a      	mov	r2, r5
    239a:	4643      	mov	r3, r8
    239c:	2100      	movs	r1, #0
    239e:	4630      	mov	r0, r6
    23a0:	f7ff ff26 	bl	21f0 <log_filter_set>
		for (int i = 0; i < log_sources_count(); i++) {
    23a4:	3501      	adds	r5, #1
    23a6:	e7ed      	b.n	2384 <log_backend_enable+0x14>
    23a8:	0002ef38 	.word	0x0002ef38
    23ac:	0002f0d0 	.word	0x0002f0d0
    23b0:	2000057c 	.word	0x2000057c

000023b4 <log_backend_disable>:
	backend->cb->active = false;
    23b4:	6843      	ldr	r3, [r0, #4]
{
    23b6:	b570      	push	{r4, r5, r6, lr}
    23b8:	2400      	movs	r4, #0
    23ba:	715c      	strb	r4, [r3, #5]
    23bc:	4d07      	ldr	r5, [pc, #28]	; (23dc <log_backend_disable+0x28>)
    23be:	4b08      	ldr	r3, [pc, #32]	; (23e0 <log_backend_disable+0x2c>)
    23c0:	1aed      	subs	r5, r5, r3
    23c2:	4606      	mov	r6, r0
    23c4:	08ed      	lsrs	r5, r5, #3
		for (int i = 0; i < log_sources_count(); i++) {
    23c6:	42ac      	cmp	r4, r5
    23c8:	d100      	bne.n	23cc <log_backend_disable+0x18>
}
    23ca:	bd70      	pop	{r4, r5, r6, pc}
			log_filter_set(backend,
    23cc:	2300      	movs	r3, #0
    23ce:	4622      	mov	r2, r4
    23d0:	4619      	mov	r1, r3
    23d2:	4630      	mov	r0, r6
    23d4:	f7ff ff0c 	bl	21f0 <log_filter_set>
		for (int i = 0; i < log_sources_count(); i++) {
    23d8:	3401      	adds	r4, #1
    23da:	e7f4      	b.n	23c6 <log_backend_disable+0x12>
    23dc:	0002f0d0 	.word	0x0002f0d0
    23e0:	0002ef38 	.word	0x0002ef38

000023e4 <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
    23e4:	b153      	cbz	r3, 23fc <log_filter_get+0x18>
	return backend->cb->id;
    23e6:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
    23e8:	4907      	ldr	r1, [pc, #28]	; (2408 <log_filter_get+0x24>)
    23ea:	7918      	ldrb	r0, [r3, #4]
    23ec:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    23f0:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    23f4:	40d8      	lsrs	r0, r3
    23f6:	f000 0007 	and.w	r0, r0, #7
    23fa:	4770      	bx	lr
	return __log_const_start[source_id].level;
    23fc:	4b03      	ldr	r3, [pc, #12]	; (240c <log_filter_get+0x28>)
    23fe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		return log_compiled_level_get(src_id);
    2402:	7910      	ldrb	r0, [r2, #4]
}
    2404:	4770      	bx	lr
    2406:	bf00      	nop
    2408:	2000e1fc 	.word	0x2000e1fc
    240c:	0002ef38 	.word	0x0002ef38

00002410 <log_strdup>:
{
    2410:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2412:	4605      	mov	r5, r0
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    2414:	2200      	movs	r2, #0
    2416:	a901      	add	r1, sp, #4
    2418:	4810      	ldr	r0, [pc, #64]	; (245c <log_strdup+0x4c>)
    241a:	f02b f95d 	bl	2d6d8 <k_mem_slab_alloc>
	if (err) {
    241e:	4604      	mov	r4, r0
    2420:	b9d0      	cbnz	r0, 2458 <log_strdup+0x48>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2422:	2201      	movs	r2, #1
    2424:	9b01      	ldr	r3, [sp, #4]
    2426:	f3bf 8f5b 	dmb	ish
    242a:	e853 1f00 	ldrex	r1, [r3]
    242e:	e843 2000 	strex	r0, r2, [r3]
    2432:	2800      	cmp	r0, #0
    2434:	d1f9      	bne.n	242a <log_strdup+0x1a>
    2436:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    243a:	9801      	ldr	r0, [sp, #4]
    243c:	222d      	movs	r2, #45	; 0x2d
    243e:	4629      	mov	r1, r5
    2440:	3004      	adds	r0, #4
    2442:	f004 fb9d 	bl	6b80 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    2446:	9801      	ldr	r0, [sp, #4]
    2448:	237e      	movs	r3, #126	; 0x7e
    244a:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    244e:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
	return dup->buf;
    2452:	3004      	adds	r0, #4
}
    2454:	b003      	add	sp, #12
    2456:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    2458:	4801      	ldr	r0, [pc, #4]	; (2460 <log_strdup+0x50>)
    245a:	e7fb      	b.n	2454 <log_strdup+0x44>
    245c:	20003638 	.word	0x20003638
    2460:	0002f7c3 	.word	0x0002f7c3

00002464 <log_is_strdup>:
	return ((char *)buf >= pool_first->buf) &&
    2464:	4b05      	ldr	r3, [pc, #20]	; (247c <log_is_strdup+0x18>)
    2466:	4298      	cmp	r0, r3
    2468:	d305      	bcc.n	2476 <log_is_strdup+0x12>
    246a:	339c      	adds	r3, #156	; 0x9c
    246c:	4298      	cmp	r0, r3
    246e:	bf8c      	ite	hi
    2470:	2000      	movhi	r0, #0
    2472:	2001      	movls	r0, #1
    2474:	4770      	bx	lr
    2476:	2000      	movs	r0, #0
}
    2478:	4770      	bx	lr
    247a:	bf00      	nop
    247c:	20003d34 	.word	0x20003d34

00002480 <log_free>:
{
    2480:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    2482:	3804      	subs	r0, #4
    2484:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2486:	f3bf 8f5b 	dmb	ish
    248a:	e850 3f00 	ldrex	r3, [r0]
    248e:	1e5a      	subs	r2, r3, #1
    2490:	e840 2100 	strex	r1, r2, [r0]
    2494:	2900      	cmp	r1, #0
    2496:	d1f8      	bne.n	248a <log_free+0xa>
    2498:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    249c:	2b01      	cmp	r3, #1
    249e:	d103      	bne.n	24a8 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    24a0:	a901      	add	r1, sp, #4
    24a2:	4803      	ldr	r0, [pc, #12]	; (24b0 <log_free+0x30>)
    24a4:	f02b f940 	bl	2d728 <k_mem_slab_free>
}
    24a8:	b003      	add	sp, #12
    24aa:	f85d fb04 	ldr.w	pc, [sp], #4
    24ae:	bf00      	nop
    24b0:	20003638 	.word	0x20003638

000024b4 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    24b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    24b8:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
    24ba:	8903      	ldrh	r3, [r0, #8]
{
    24bc:	f89d 7020 	ldrb.w	r7, [sp, #32]
	u32_t available_len = msg->hdr.params.hexdump.length;
    24c0:	08db      	lsrs	r3, r3, #3
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
    24c2:	42a3      	cmp	r3, r4
{
    24c4:	460e      	mov	r6, r1
	if (offset >= available_len) {
    24c6:	d803      	bhi.n	24d0 <log_msg_hexdump_data_op+0x1c>
		*length = 0;
    24c8:	2300      	movs	r3, #0
    24ca:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    24cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    24d0:	6811      	ldr	r1, [r2, #0]
    24d2:	4421      	add	r1, r4
    24d4:	4299      	cmp	r1, r3
		*length = available_len - offset;
    24d6:	bf84      	itt	hi
    24d8:	1b19      	subhi	r1, r3, r4
    24da:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    24dc:	2b0c      	cmp	r3, #12
	req_len = *length;
    24de:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    24e2:	d928      	bls.n	2536 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
    24e4:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    24e6:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    24ea:	d82b      	bhi.n	2544 <log_msg_hexdump_data_op+0x90>
		head_data = msg->payload.ext.data.bytes;
    24ec:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    24ee:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    24f0:	454b      	cmp	r3, r9
    24f2:	bf28      	it	cs
    24f4:	464b      	movcs	r3, r9
    24f6:	461d      	mov	r5, r3
    24f8:	4420      	add	r0, r4
			memcpy(&head_data[offset], data, cpy_len);
    24fa:	461a      	mov	r2, r3
		if (put_op) {
    24fc:	b1ff      	cbz	r7, 253e <log_msg_hexdump_data_op+0x8a>
			memcpy(&head_data[offset], data, cpy_len);
    24fe:	4631      	mov	r1, r6
			memcpy(data, &head_data[offset], cpy_len);
    2500:	f004 fbc2 	bl	6c88 <memcpy>
		req_len -= cpy_len;
    2504:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    2508:	442e      	add	r6, r5
	while (req_len > 0) {
    250a:	f1b9 0f00 	cmp.w	r9, #0
    250e:	d0dd      	beq.n	24cc <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    2510:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    2514:	454d      	cmp	r5, r9
    2516:	bf28      	it	cs
    2518:	464d      	movcs	r5, r9
    251a:	1d20      	adds	r0, r4, #4
    251c:	4440      	add	r0, r8
			memcpy(&cont->payload.bytes[offset], data, cpy_len);
    251e:	462a      	mov	r2, r5
		if (put_op) {
    2520:	b1bf      	cbz	r7, 2552 <log_msg_hexdump_data_op+0x9e>
			memcpy(&cont->payload.bytes[offset], data, cpy_len);
    2522:	4631      	mov	r1, r6
			memcpy(data, &cont->payload.bytes[offset], cpy_len);
    2524:	f004 fbb0 	bl	6c88 <memcpy>
		req_len -= cpy_len;
    2528:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
    252c:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
    2530:	442e      	add	r6, r5
		offset = 0;
    2532:	2400      	movs	r4, #0
    2534:	e7e9      	b.n	250a <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
    2536:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
    2538:	f04f 0800 	mov.w	r8, #0
    253c:	e7d8      	b.n	24f0 <log_msg_hexdump_data_op+0x3c>
			memcpy(data, &head_data[offset], cpy_len);
    253e:	4601      	mov	r1, r0
    2540:	4630      	mov	r0, r6
    2542:	e7dd      	b.n	2500 <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
    2544:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    2546:	2c1b      	cmp	r4, #27
    2548:	d9df      	bls.n	250a <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
    254a:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    254e:	3c1c      	subs	r4, #28
    2550:	e7f9      	b.n	2546 <log_msg_hexdump_data_op+0x92>
			memcpy(data, &cont->payload.bytes[offset], cpy_len);
    2552:	4601      	mov	r1, r0
    2554:	4630      	mov	r0, r6
    2556:	e7e5      	b.n	2524 <log_msg_hexdump_data_op+0x70>

00002558 <log_msg_pool_init>:
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    2558:	2320      	movs	r3, #32
    255a:	461a      	mov	r2, r3
    255c:	4901      	ldr	r1, [pc, #4]	; (2564 <log_msg_pool_init+0xc>)
    255e:	4802      	ldr	r0, [pc, #8]	; (2568 <log_msg_pool_init+0x10>)
    2560:	f02b b8a8 	b.w	2d6b4 <k_mem_slab_init>
    2564:	20004100 	.word	0x20004100
    2568:	20003654 	.word	0x20003654

0000256c <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    256c:	3004      	adds	r0, #4
    256e:	f3bf 8f5b 	dmb	ish
    2572:	e850 3f00 	ldrex	r3, [r0]
    2576:	3301      	adds	r3, #1
    2578:	e840 3200 	strex	r2, r3, [r0]
    257c:	2a00      	cmp	r2, #0
    257e:	d1f8      	bne.n	2572 <log_msg_get+0x6>
    2580:	f3bf 8f5b 	dmb	ish
}
    2584:	4770      	bx	lr
	...

00002588 <log_msg_no_space_handle>:
{
    2588:	b573      	push	{r0, r1, r4, r5, r6, lr}
	union log_msg_chunk *msg = NULL;
    258a:	ac02      	add	r4, sp, #8
    258c:	2300      	movs	r3, #0
    258e:	f844 3d04 	str.w	r3, [r4, #-4]!
			err = k_mem_slab_alloc(&log_msg_pool,
    2592:	4e08      	ldr	r6, [pc, #32]	; (25b4 <log_msg_no_space_handle+0x2c>)
			more = log_process(true);
    2594:	2001      	movs	r0, #1
    2596:	f7ff fd13 	bl	1fc0 <log_process>
			err = k_mem_slab_alloc(&log_msg_pool,
    259a:	2200      	movs	r2, #0
			more = log_process(true);
    259c:	4605      	mov	r5, r0
			err = k_mem_slab_alloc(&log_msg_pool,
    259e:	4621      	mov	r1, r4
    25a0:	4630      	mov	r0, r6
    25a2:	f02b f899 	bl	2d6d8 <k_mem_slab_alloc>
		} while ((err != 0) && more);
    25a6:	b108      	cbz	r0, 25ac <log_msg_no_space_handle+0x24>
    25a8:	2d00      	cmp	r5, #0
    25aa:	d1f3      	bne.n	2594 <log_msg_no_space_handle+0xc>
}
    25ac:	9801      	ldr	r0, [sp, #4]
    25ae:	b002      	add	sp, #8
    25b0:	bd70      	pop	{r4, r5, r6, pc}
    25b2:	bf00      	nop
    25b4:	20003654 	.word	0x20003654

000025b8 <log_msg_chunk_alloc>:
{
    25b8:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    25ba:	a902      	add	r1, sp, #8
    25bc:	2200      	movs	r2, #0
    25be:	f841 2d04 	str.w	r2, [r1, #-4]!
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    25c2:	4805      	ldr	r0, [pc, #20]	; (25d8 <log_msg_chunk_alloc+0x20>)
    25c4:	f02b f888 	bl	2d6d8 <k_mem_slab_alloc>
	if (err != 0) {
    25c8:	b110      	cbz	r0, 25d0 <log_msg_chunk_alloc+0x18>
		msg = log_msg_no_space_handle();
    25ca:	f7ff ffdd 	bl	2588 <log_msg_no_space_handle>
    25ce:	9001      	str	r0, [sp, #4]
}
    25d0:	9801      	ldr	r0, [sp, #4]
    25d2:	b003      	add	sp, #12
    25d4:	f85d fb04 	ldr.w	pc, [sp], #4
    25d8:	20003654 	.word	0x20003654

000025dc <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    25dc:	7a40      	ldrb	r0, [r0, #9]
}
    25de:	0900      	lsrs	r0, r0, #4
    25e0:	4770      	bx	lr

000025e2 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    25e2:	7a43      	ldrb	r3, [r0, #9]
    25e4:	091b      	lsrs	r3, r3, #4
    25e6:	428b      	cmp	r3, r1
    25e8:	d916      	bls.n	2618 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    25ea:	2b03      	cmp	r3, #3
    25ec:	d803      	bhi.n	25f6 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
    25ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    25f2:	6948      	ldr	r0, [r1, #20]
    25f4:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    25f6:	2901      	cmp	r1, #1
    25f8:	d803      	bhi.n	2602 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
    25fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    25fe:	6988      	ldr	r0, [r1, #24]
    2600:	4770      	bx	lr
	cont = msg->payload.ext.next;
    2602:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    2604:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    2606:	2906      	cmp	r1, #6
    2608:	d803      	bhi.n	2612 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
    260a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    260e:	6848      	ldr	r0, [r1, #4]
    2610:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
    2612:	3907      	subs	r1, #7
		cont = cont->next;
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	e7f6      	b.n	2606 <log_msg_arg_get+0x24>
		return 0;
    2618:	2000      	movs	r0, #0
}
    261a:	4770      	bx	lr

0000261c <msg_free>:
{
    261c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    261e:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    2620:	7a45      	ldrb	r5, [r0, #9]
{
    2622:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    2624:	f014 0401 	ands.w	r4, r4, #1
	u32_t nargs = msg->hdr.params.std.nargs;
    2628:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    262c:	d010      	beq.n	2650 <msg_free+0x34>
	if (msg->hdr.params.generic.ext == 1) {
    262e:	9b01      	ldr	r3, [sp, #4]
    2630:	7a1a      	ldrb	r2, [r3, #8]
    2632:	0792      	lsls	r2, r2, #30
    2634:	d506      	bpl.n	2644 <msg_free+0x28>
    2636:	ac04      	add	r4, sp, #16
    2638:	695b      	ldr	r3, [r3, #20]
    263a:	f844 3d04 	str.w	r3, [r4, #-4]!
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    263e:	4d10      	ldr	r5, [pc, #64]	; (2680 <msg_free+0x64>)
	while (cont != NULL) {
    2640:	9b03      	ldr	r3, [sp, #12]
    2642:	b9b3      	cbnz	r3, 2672 <msg_free+0x56>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    2644:	a901      	add	r1, sp, #4
    2646:	480e      	ldr	r0, [pc, #56]	; (2680 <msg_free+0x64>)
    2648:	f02b f86e 	bl	2d728 <k_mem_slab_free>
}
    264c:	b004      	add	sp, #16
    264e:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    2650:	2d00      	cmp	r5, #0
    2652:	d0ec      	beq.n	262e <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    2654:	42ac      	cmp	r4, r5
    2656:	9801      	ldr	r0, [sp, #4]
    2658:	d2e9      	bcs.n	262e <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    265a:	4621      	mov	r1, r4
    265c:	f7ff ffc1 	bl	25e2 <log_msg_arg_get>
    2660:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    2662:	f7ff feff 	bl	2464 <log_is_strdup>
    2666:	b110      	cbz	r0, 266e <msg_free+0x52>
				log_free(buf);
    2668:	4630      	mov	r0, r6
    266a:	f7ff ff09 	bl	2480 <log_free>
		for (i = 0; i < nargs; i++) {
    266e:	3401      	adds	r4, #1
    2670:	e7f0      	b.n	2654 <msg_free+0x38>
		next = cont->next;
    2672:	681e      	ldr	r6, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2674:	4621      	mov	r1, r4
    2676:	4628      	mov	r0, r5
    2678:	f02b f856 	bl	2d728 <k_mem_slab_free>
		cont = next;
    267c:	9603      	str	r6, [sp, #12]
    267e:	e7df      	b.n	2640 <msg_free+0x24>
    2680:	20003654 	.word	0x20003654

00002684 <log_msg_put>:
{
    2684:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2686:	1d02      	adds	r2, r0, #4
    2688:	f3bf 8f5b 	dmb	ish
    268c:	e852 1f00 	ldrex	r1, [r2]
    2690:	3901      	subs	r1, #1
    2692:	e842 1c00 	strex	ip, r1, [r2]
    2696:	f1bc 0f00 	cmp.w	ip, #0
    269a:	d1f7      	bne.n	268c <log_msg_put+0x8>
    269c:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    26a0:	685b      	ldr	r3, [r3, #4]
    26a2:	b90b      	cbnz	r3, 26a8 <log_msg_put+0x24>
		msg_free(msg);
    26a4:	f7ff bfba 	b.w	261c <msg_free>
}
    26a8:	4770      	bx	lr

000026aa <log_msg_str_get>:
}
    26aa:	6900      	ldr	r0, [r0, #16]
    26ac:	4770      	bx	lr

000026ae <log_msg_create_n>:
{
    26ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26b2:	4683      	mov	fp, r0
    26b4:	460d      	mov	r5, r1
    26b6:	4616      	mov	r6, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    26b8:	f7ff ff7e 	bl	25b8 <log_msg_chunk_alloc>
	if (msg != NULL) {
    26bc:	4604      	mov	r4, r0
    26be:	b1e0      	cbz	r0, 26fa <log_msg_create_n+0x4c>
		msg->hdr.ref_cnt = 1;
    26c0:	2301      	movs	r3, #1
	*next = NULL;
    26c2:	2200      	movs	r2, #0
    26c4:	6043      	str	r3, [r0, #4]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
    26c6:	f1a6 0802 	sub.w	r8, r6, #2
    26ca:	2302      	movs	r3, #2
	next = &msg->payload.ext.next;
    26cc:	f100 0914 	add.w	r9, r0, #20
    26d0:	8103      	strh	r3, [r0, #8]
	*next = NULL;
    26d2:	6142      	str	r2, [r0, #20]
	next = &msg->payload.ext.next;
    26d4:	46ca      	mov	sl, r9
    26d6:	4647      	mov	r7, r8
		cont->next = NULL;
    26d8:	9200      	str	r2, [sp, #0]
	while (n > 0) {
    26da:	f1b8 0f00 	cmp.w	r8, #0
    26de:	dc10      	bgt.n	2702 <log_msg_create_n+0x54>
		msg->hdr.params.std.nargs = nargs;
    26e0:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
    26e2:	f8c4 b010 	str.w	fp, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
    26e6:	f366 1307 	bfi	r3, r6, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    26ea:	2e03      	cmp	r6, #3
		msg->hdr.params.std.nargs = nargs;
    26ec:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    26ee:	d819      	bhi.n	2724 <log_msg_create_n+0x76>
		memcpy(msg->payload.single.args, args, nargs * sizeof(u32_t));
    26f0:	00b2      	lsls	r2, r6, #2
    26f2:	4629      	mov	r1, r5
    26f4:	4648      	mov	r0, r9
    26f6:	f004 fac7 	bl	6c88 <memcpy>
}
    26fa:	4620      	mov	r0, r4
    26fc:	b003      	add	sp, #12
    26fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    2702:	f7ff ff59 	bl	25b8 <log_msg_chunk_alloc>
		if (!cont) {
    2706:	4602      	mov	r2, r0
    2708:	b920      	cbnz	r0, 2714 <log_msg_create_n+0x66>
    270a:	9001      	str	r0, [sp, #4]
			msg_free(msg);
    270c:	4620      	mov	r0, r4
    270e:	f7ff ff85 	bl	261c <msg_free>
    2712:	9a01      	ldr	r2, [sp, #4]
		cont->next = NULL;
    2714:	9b00      	ldr	r3, [sp, #0]
		*next = cont;
    2716:	f8ca 2000 	str.w	r2, [sl]
    271a:	f1a8 0807 	sub.w	r8, r8, #7
		cont->next = NULL;
    271e:	6013      	str	r3, [r2, #0]
		next = &cont->next;
    2720:	4692      	mov	sl, r2
    2722:	e7da      	b.n	26da <log_msg_create_n+0x2c>
		memcpy(msg->payload.ext.data.args, args,
    2724:	4629      	mov	r1, r5
    2726:	2208      	movs	r2, #8
    2728:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
    272c:	f8d4 8014 	ldr.w	r8, [r4, #20]
		memcpy(msg->payload.ext.data.args, args,
    2730:	f004 faaa 	bl	6c88 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
    2734:	463e      	mov	r6, r7
		args += LOG_MSG_NARGS_HEAD_CHUNK;
    2736:	3508      	adds	r5, #8
		u32_t cpy_args = min(nargs, ARGS_CONT_MSG);
    2738:	2e07      	cmp	r6, #7
    273a:	4637      	mov	r7, r6
    273c:	bf28      	it	cs
    273e:	2707      	movcs	r7, #7
		memcpy(cont->payload.args, args, cpy_args * sizeof(u32_t));
    2740:	ea4f 0987 	mov.w	r9, r7, lsl #2
    2744:	4629      	mov	r1, r5
    2746:	f108 0004 	add.w	r0, r8, #4
    274a:	464a      	mov	r2, r9
    274c:	f004 fa9c 	bl	6c88 <memcpy>
	while (nargs) {
    2750:	1bf6      	subs	r6, r6, r7
		args += cpy_args;
    2752:	444d      	add	r5, r9
		cont = cont->next;
    2754:	f8d8 8000 	ldr.w	r8, [r8]
	while (nargs) {
    2758:	d1ee      	bne.n	2738 <log_msg_create_n+0x8a>
    275a:	e7ce      	b.n	26fa <log_msg_create_n+0x4c>

0000275c <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
    275c:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    275e:	2400      	movs	r4, #0
    2760:	9400      	str	r4, [sp, #0]
    2762:	f7ff fea7 	bl	24b4 <log_msg_hexdump_data_op>
}
    2766:	b002      	add	sp, #8
    2768:	bd10      	pop	{r4, pc}
	...

0000276c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    276c:	b40e      	push	{r1, r2, r3}
    276e:	b503      	push	{r0, r1, lr}
    2770:	ab03      	add	r3, sp, #12
	va_list args;
	int length = 0;

	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX)
	length = _prf(out_func, (void *)log_output, (char *)fmt, args);
    2772:	4601      	mov	r1, r0
{
    2774:	f853 2b04 	ldr.w	r2, [r3], #4
	length = _prf(out_func, (void *)log_output, (char *)fmt, args);
    2778:	4804      	ldr	r0, [pc, #16]	; (278c <print_formatted+0x20>)
	va_start(args, fmt);
    277a:	9301      	str	r3, [sp, #4]
	length = _prf(out_func, (void *)log_output, (char *)fmt, args);
    277c:	f004 fb6a 	bl	6e54 <_prf>
	_vprintk(out_func, (void *)log_output, fmt, args);
#endif
	va_end(args);

	return length;
}
    2780:	b002      	add	sp, #8
    2782:	f85d eb04 	ldr.w	lr, [sp], #4
    2786:	b003      	add	sp, #12
    2788:	4770      	bx	lr
    278a:	bf00      	nop
    278c:	000027b5 	.word	0x000027b5

00002790 <log_output_flush>:

void log_output_flush(const struct log_output *log_output)
{
	int offset = 0;
	int len = log_output->control_block->offset;
    2790:	6843      	ldr	r3, [r0, #4]
{
    2792:	b570      	push	{r4, r5, r6, lr}
	int len = log_output->control_block->offset;
    2794:	681c      	ldr	r4, [r3, #0]
{
    2796:	4605      	mov	r5, r0
	int offset = 0;
    2798:	2600      	movs	r6, #0
	int processed;

	do {
		processed = log_output->func(&log_output->buf[offset], len,
    279a:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
    279e:	4621      	mov	r1, r4
    27a0:	4430      	add	r0, r6
    27a2:	682b      	ldr	r3, [r5, #0]
    27a4:	6852      	ldr	r2, [r2, #4]
    27a6:	4798      	blx	r3
					     log_output->control_block->ctx);
		len -= processed;
		offset += processed;
	} while (len);
    27a8:	1a24      	subs	r4, r4, r0
		offset += processed;
    27aa:	4406      	add	r6, r0
	} while (len);
    27ac:	d1f5      	bne.n	279a <log_output_flush+0xa>

	log_output->control_block->offset = 0;
    27ae:	686b      	ldr	r3, [r5, #4]
    27b0:	601c      	str	r4, [r3, #0]
}
    27b2:	bd70      	pop	{r4, r5, r6, pc}

000027b4 <out_func>:
{
    27b4:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
    27b6:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
    27ba:	681b      	ldr	r3, [r3, #0]
    27bc:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
    27be:	684a      	ldr	r2, [r1, #4]
    27c0:	6813      	ldr	r3, [r2, #0]
    27c2:	3301      	adds	r3, #1
    27c4:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
    27c6:	68ca      	ldr	r2, [r1, #12]
    27c8:	4293      	cmp	r3, r2
    27ca:	d102      	bne.n	27d2 <out_func+0x1e>
		log_output_flush(out_ctx);
    27cc:	4608      	mov	r0, r1
    27ce:	f7ff ffdf 	bl	2790 <log_output_flush>
}
    27d2:	2000      	movs	r0, #0
    27d4:	bd08      	pop	{r3, pc}
	...

000027d8 <log_output_msg_process>:
}

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    27d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return (msg->hdr.params.generic.type == LOG_MSG_TYPE_HEXDUMP) &&
    27dc:	7a0b      	ldrb	r3, [r1, #8]
    27de:	b093      	sub	sp, #76	; 0x4c
	if (!log_msg_is_raw_string(msg)) {
    27e0:	f003 0305 	and.w	r3, r3, #5
    27e4:	2b05      	cmp	r3, #5
{
    27e6:	4605      	mov	r5, r0
    27e8:	460c      	mov	r4, r1
    27ea:	9209      	str	r2, [sp, #36]	; 0x24
	if (!log_msg_is_raw_string(msg)) {
    27ec:	d07e      	beq.n	28ec <log_output_msg_process+0x114>
		if (stamp) {
    27ee:	f012 0602 	ands.w	r6, r2, #2
		bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    27f2:	4613      	mov	r3, r2
    27f4:	f002 0801 	and.w	r8, r2, #1
		bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    27f8:	f002 0708 	and.w	r7, r2, #8
		if (stamp) {
    27fc:	d006      	beq.n	280c <log_output_msg_process+0x34>
	if (!format) {
    27fe:	075e      	lsls	r6, r3, #29
	u32_t timestamp = log_msg_timestamp_get(msg);
    2800:	68ca      	ldr	r2, [r1, #12]
	if (!format) {
    2802:	d448      	bmi.n	2896 <log_output_msg_process+0xbe>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    2804:	49cc      	ldr	r1, [pc, #816]	; (2b38 <log_output_msg_process+0x360>)
    2806:	f7ff ffb1 	bl	276c <print_formatted>
		length = print_formatted(log_output,
    280a:	4606      	mov	r6, r0
	if (color) {
    280c:	f1b8 0f00 	cmp.w	r8, #0
    2810:	d00a      	beq.n	2828 <log_output_msg_process+0x50>
		if (colors[level] != NULL) {
    2812:	7aa3      	ldrb	r3, [r4, #10]
    2814:	4ac9      	ldr	r2, [pc, #804]	; (2b3c <log_output_msg_process+0x364>)
    2816:	f003 0307 	and.w	r3, r3, #7
    281a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    281e:	b11a      	cbz	r2, 2828 <log_output_msg_process+0x50>
			print_formatted(log_output, "%s", color);
    2820:	49c7      	ldr	r1, [pc, #796]	; (2b40 <log_output_msg_process+0x368>)
    2822:	4628      	mov	r0, r5
    2824:	f7ff ffa2 	bl	276c <print_formatted>
	return msg->hdr.ids.domain_id;
    2828:	7aa3      	ldrb	r3, [r4, #10]
	return msg->hdr.ids.source_id;
    282a:	f8b4 800a 	ldrh.w	r8, [r4, #10]
	return msg->hdr.ids.domain_id;
    282e:	f3c3 09c2 	ubfx	r9, r3, #3, #3
	return msg->hdr.ids.source_id;
    2832:	ea4f 1898 	mov.w	r8, r8, lsr #6
	if (level_on) {
    2836:	b14f      	cbz	r7, 284c <log_output_msg_process+0x74>
	return msg->hdr.ids.level;
    2838:	f003 0307 	and.w	r3, r3, #7
		total += print_formatted(log_output, "<%s> ", severity[level]);
    283c:	4ac1      	ldr	r2, [pc, #772]	; (2b44 <log_output_msg_process+0x36c>)
    283e:	49c2      	ldr	r1, [pc, #776]	; (2b48 <log_output_msg_process+0x370>)
    2840:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2844:	4628      	mov	r0, r5
    2846:	f7ff ff91 	bl	276c <print_formatted>
    284a:	4607      	mov	r7, r0
	total += print_formatted(log_output,
    284c:	4641      	mov	r1, r8
    284e:	4648      	mov	r0, r9
    2850:	f7ff fcc0 	bl	21d4 <log_source_name_get>
    2854:	49bd      	ldr	r1, [pc, #756]	; (2b4c <log_output_msg_process+0x374>)
    2856:	4602      	mov	r2, r0
    2858:	4628      	mov	r0, r5
    285a:	f7ff ff87 	bl	276c <print_formatted>
    285e:	4407      	add	r7, r0
		length += ids_print(msg, log_output, level_on);
    2860:	443e      	add	r6, r7
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2862:	7a23      	ldrb	r3, [r4, #8]
	int prefix_offset = prefix_print(msg, log_output, flags);

	if (log_msg_is_std(msg)) {
    2864:	07d9      	lsls	r1, r3, #31
    2866:	f100 81fc 	bmi.w	2c62 <log_output_msg_process+0x48a>
	const char *str = log_msg_str_get(msg);
    286a:	4620      	mov	r0, r4
    286c:	f7ff ff1d 	bl	26aa <log_msg_str_get>
    2870:	4606      	mov	r6, r0
	switch (log_msg_nargs_get(msg)) {
    2872:	4620      	mov	r0, r4
    2874:	f7ff feb2 	bl	25dc <log_msg_nargs_get>
    2878:	280a      	cmp	r0, #10
    287a:	d847      	bhi.n	290c <log_output_msg_process+0x134>
    287c:	e8df f010 	tbh	[pc, r0, lsl #1]
    2880:	003d0038 	.word	0x003d0038
    2884:	007a006a 	.word	0x007a006a
    2888:	00ac0090 	.word	0x00ac0090
    288c:	00f700cf 	.word	0x00f700cf
    2890:	01740126 	.word	0x01740126
    2894:	01af      	.short	0x01af
	} else if (freq) {
    2896:	4bae      	ldr	r3, [pc, #696]	; (2b50 <log_output_msg_process+0x378>)
    2898:	681e      	ldr	r6, [r3, #0]
    289a:	2e00      	cmp	r6, #0
    289c:	d0b6      	beq.n	280c <log_output_msg_process+0x34>
		timestamp /= timestamp_div;
    289e:	4bad      	ldr	r3, [pc, #692]	; (2b54 <log_output_msg_process+0x37c>)
    28a0:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    28a4:	6819      	ldr	r1, [r3, #0]
    28a6:	fbb2 f1f1 	udiv	r1, r2, r1
		ms = (remainder * 1000) / freq;
    28aa:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
    28ae:	fbb1 f3f6 	udiv	r3, r1, r6
    28b2:	fbb3 f2fe 	udiv	r2, r3, lr
    28b6:	fb0e 3e12 	mls	lr, lr, r2, r3
		remainder = timestamp % freq;
    28ba:	fb06 1313 	mls	r3, r6, r3, r1
		ms = (remainder * 1000) / freq;
    28be:	fb0c f103 	mul.w	r1, ip, r3
		mins = seconds / 60;
    28c2:	f04f 093c 	mov.w	r9, #60	; 0x3c
		us = (1000 * (1000 * remainder - (ms * freq))) / freq;
    28c6:	fbb1 faf6 	udiv	sl, r1, r6
    28ca:	fb06 111a 	mls	r1, r6, sl, r1
    28ce:	fb0c f101 	mul.w	r1, ip, r1
		mins = seconds / 60;
    28d2:	fbbe f3f9 	udiv	r3, lr, r9
		us = (1000 * (1000 * remainder - (ms * freq))) / freq;
    28d6:	fbb1 f6f6 	udiv	r6, r1, r6
		length = print_formatted(log_output,
    28da:	fb09 e113 	mls	r1, r9, r3, lr
    28de:	9100      	str	r1, [sp, #0]
    28e0:	e9cd a601 	strd	sl, r6, [sp, #4]
    28e4:	499c      	ldr	r1, [pc, #624]	; (2b58 <log_output_msg_process+0x380>)
    28e6:	f7ff ff41 	bl	276c <print_formatted>
    28ea:	e78e      	b.n	280a <log_output_msg_process+0x32>
	int length = 0;
    28ec:	2600      	movs	r6, #0
    28ee:	e7b8      	b.n	2862 <log_output_msg_process+0x8a>
		print_formatted(log_output, str);
    28f0:	4631      	mov	r1, r6
	print_formatted(log_output, "\r");
    28f2:	4628      	mov	r0, r5
    28f4:	f7ff ff3a 	bl	276c <print_formatted>
    28f8:	e008      	b.n	290c <log_output_msg_process+0x134>
		print_formatted(log_output, str, log_msg_arg_get(msg, 0));
    28fa:	2100      	movs	r1, #0
    28fc:	4620      	mov	r0, r4
    28fe:	f7ff fe70 	bl	25e2 <log_msg_arg_get>
    2902:	4631      	mov	r1, r6
    2904:	4602      	mov	r2, r0
    2906:	4628      	mov	r0, r5
    2908:	f7ff ff30 	bl	276c <print_formatted>
	return (msg->hdr.params.generic.type == LOG_MSG_TYPE_HEXDUMP) &&
    290c:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_raw_string(msg)) {
    290e:	f003 0305 	and.w	r3, r3, #5
    2912:	2b05      	cmp	r3, #5
    2914:	d018      	beq.n	2948 <log_output_msg_process+0x170>
	if (color) {
    2916:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2918:	07d9      	lsls	r1, r3, #31
    291a:	d50b      	bpl.n	2934 <log_output_msg_process+0x15c>
	return msg->hdr.ids.level;
    291c:	7aa3      	ldrb	r3, [r4, #10]
		if (colors[level] != NULL) {
    291e:	4a87      	ldr	r2, [pc, #540]	; (2b3c <log_output_msg_process+0x364>)
    2920:	f003 0307 	and.w	r3, r3, #7
    2924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2928:	b123      	cbz	r3, 2934 <log_output_msg_process+0x15c>
			print_formatted(log_output, "%s", color);
    292a:	4a8c      	ldr	r2, [pc, #560]	; (2b5c <log_output_msg_process+0x384>)
    292c:	4984      	ldr	r1, [pc, #528]	; (2b40 <log_output_msg_process+0x368>)
    292e:	4628      	mov	r0, r5
    2930:	f7ff ff1c 	bl	276c <print_formatted>
	if (flags & LOG_OUTPUT_FLAG_CRLF_NONE) {
    2934:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2936:	06da      	lsls	r2, r3, #27
    2938:	d406      	bmi.n	2948 <log_output_msg_process+0x170>
	if (flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) {
    293a:	069b      	lsls	r3, r3, #26
		print_formatted(ctx, "\n");
    293c:	bf4c      	ite	mi
    293e:	4988      	ldrmi	r1, [pc, #544]	; (2b60 <log_output_msg_process+0x388>)
		print_formatted(ctx, "\r\n");
    2940:	4988      	ldrpl	r1, [pc, #544]	; (2b64 <log_output_msg_process+0x38c>)
    2942:	4628      	mov	r0, r5
    2944:	f7ff ff12 	bl	276c <print_formatted>
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	postfix_print(msg, log_output, flags);

	log_output_flush(log_output);
    2948:	4628      	mov	r0, r5
    294a:	f7ff ff21 	bl	2790 <log_output_flush>
}
    294e:	b013      	add	sp, #76	; 0x4c
    2950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		print_formatted(log_output, str,
    2954:	2100      	movs	r1, #0
    2956:	4620      	mov	r0, r4
    2958:	f7ff fe43 	bl	25e2 <log_msg_arg_get>
    295c:	2101      	movs	r1, #1
    295e:	4607      	mov	r7, r0
    2960:	4620      	mov	r0, r4
    2962:	f7ff fe3e 	bl	25e2 <log_msg_arg_get>
    2966:	463a      	mov	r2, r7
    2968:	4603      	mov	r3, r0
    296a:	4631      	mov	r1, r6
    296c:	4628      	mov	r0, r5
    296e:	f7ff fefd 	bl	276c <print_formatted>
    2972:	e7cb      	b.n	290c <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    2974:	2100      	movs	r1, #0
    2976:	4620      	mov	r0, r4
    2978:	f7ff fe33 	bl	25e2 <log_msg_arg_get>
    297c:	2101      	movs	r1, #1
    297e:	4607      	mov	r7, r0
    2980:	4620      	mov	r0, r4
    2982:	f7ff fe2e 	bl	25e2 <log_msg_arg_get>
    2986:	2102      	movs	r1, #2
    2988:	4680      	mov	r8, r0
    298a:	4620      	mov	r0, r4
    298c:	f7ff fe29 	bl	25e2 <log_msg_arg_get>
    2990:	4643      	mov	r3, r8
    2992:	9000      	str	r0, [sp, #0]
    2994:	463a      	mov	r2, r7
    2996:	4631      	mov	r1, r6
    2998:	4628      	mov	r0, r5
    299a:	f7ff fee7 	bl	276c <print_formatted>
    299e:	e7b5      	b.n	290c <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    29a0:	2100      	movs	r1, #0
    29a2:	4620      	mov	r0, r4
    29a4:	f7ff fe1d 	bl	25e2 <log_msg_arg_get>
    29a8:	2101      	movs	r1, #1
    29aa:	4607      	mov	r7, r0
    29ac:	4620      	mov	r0, r4
    29ae:	f7ff fe18 	bl	25e2 <log_msg_arg_get>
    29b2:	2102      	movs	r1, #2
    29b4:	4680      	mov	r8, r0
    29b6:	4620      	mov	r0, r4
    29b8:	f7ff fe13 	bl	25e2 <log_msg_arg_get>
    29bc:	2103      	movs	r1, #3
    29be:	4681      	mov	r9, r0
    29c0:	4620      	mov	r0, r4
    29c2:	f7ff fe0e 	bl	25e2 <log_msg_arg_get>
    29c6:	4643      	mov	r3, r8
    29c8:	e9cd 9000 	strd	r9, r0, [sp]
    29cc:	463a      	mov	r2, r7
    29ce:	4631      	mov	r1, r6
    29d0:	4628      	mov	r0, r5
    29d2:	f7ff fecb 	bl	276c <print_formatted>
    29d6:	e799      	b.n	290c <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    29d8:	2100      	movs	r1, #0
    29da:	4620      	mov	r0, r4
    29dc:	f7ff fe01 	bl	25e2 <log_msg_arg_get>
    29e0:	2101      	movs	r1, #1
    29e2:	4607      	mov	r7, r0
    29e4:	4620      	mov	r0, r4
    29e6:	f7ff fdfc 	bl	25e2 <log_msg_arg_get>
    29ea:	2102      	movs	r1, #2
    29ec:	4680      	mov	r8, r0
    29ee:	4620      	mov	r0, r4
    29f0:	f7ff fdf7 	bl	25e2 <log_msg_arg_get>
    29f4:	2103      	movs	r1, #3
    29f6:	4681      	mov	r9, r0
    29f8:	4620      	mov	r0, r4
    29fa:	f7ff fdf2 	bl	25e2 <log_msg_arg_get>
    29fe:	2104      	movs	r1, #4
    2a00:	4682      	mov	sl, r0
    2a02:	4620      	mov	r0, r4
    2a04:	f7ff fded 	bl	25e2 <log_msg_arg_get>
    2a08:	f8cd 9000 	str.w	r9, [sp]
    2a0c:	e9cd a001 	strd	sl, r0, [sp, #4]
    2a10:	4643      	mov	r3, r8
    2a12:	463a      	mov	r2, r7
    2a14:	4631      	mov	r1, r6
    2a16:	4628      	mov	r0, r5
    2a18:	f7ff fea8 	bl	276c <print_formatted>
    2a1c:	e776      	b.n	290c <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    2a1e:	2100      	movs	r1, #0
    2a20:	4620      	mov	r0, r4
    2a22:	f7ff fdde 	bl	25e2 <log_msg_arg_get>
    2a26:	2101      	movs	r1, #1
    2a28:	4607      	mov	r7, r0
    2a2a:	4620      	mov	r0, r4
    2a2c:	f7ff fdd9 	bl	25e2 <log_msg_arg_get>
    2a30:	2102      	movs	r1, #2
    2a32:	4680      	mov	r8, r0
    2a34:	4620      	mov	r0, r4
    2a36:	f7ff fdd4 	bl	25e2 <log_msg_arg_get>
    2a3a:	2103      	movs	r1, #3
    2a3c:	4681      	mov	r9, r0
    2a3e:	4620      	mov	r0, r4
    2a40:	f7ff fdcf 	bl	25e2 <log_msg_arg_get>
    2a44:	2104      	movs	r1, #4
    2a46:	4682      	mov	sl, r0
    2a48:	4620      	mov	r0, r4
    2a4a:	f7ff fdca 	bl	25e2 <log_msg_arg_get>
    2a4e:	2105      	movs	r1, #5
    2a50:	4683      	mov	fp, r0
    2a52:	4620      	mov	r0, r4
    2a54:	f7ff fdc5 	bl	25e2 <log_msg_arg_get>
    2a58:	e9cd 9a00 	strd	r9, sl, [sp]
    2a5c:	e9cd b002 	strd	fp, r0, [sp, #8]
    2a60:	4643      	mov	r3, r8
    2a62:	463a      	mov	r2, r7
    2a64:	4631      	mov	r1, r6
    2a66:	4628      	mov	r0, r5
    2a68:	f7ff fe80 	bl	276c <print_formatted>
    2a6c:	e74e      	b.n	290c <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    2a6e:	2100      	movs	r1, #0
    2a70:	4620      	mov	r0, r4
    2a72:	f7ff fdb6 	bl	25e2 <log_msg_arg_get>
    2a76:	2101      	movs	r1, #1
    2a78:	4607      	mov	r7, r0
    2a7a:	4620      	mov	r0, r4
    2a7c:	f7ff fdb1 	bl	25e2 <log_msg_arg_get>
    2a80:	2102      	movs	r1, #2
    2a82:	4680      	mov	r8, r0
    2a84:	4620      	mov	r0, r4
    2a86:	f7ff fdac 	bl	25e2 <log_msg_arg_get>
    2a8a:	2103      	movs	r1, #3
    2a8c:	4681      	mov	r9, r0
    2a8e:	4620      	mov	r0, r4
    2a90:	f7ff fda7 	bl	25e2 <log_msg_arg_get>
    2a94:	2104      	movs	r1, #4
    2a96:	4682      	mov	sl, r0
    2a98:	4620      	mov	r0, r4
    2a9a:	f7ff fda2 	bl	25e2 <log_msg_arg_get>
    2a9e:	2105      	movs	r1, #5
    2aa0:	4683      	mov	fp, r0
    2aa2:	4620      	mov	r0, r4
    2aa4:	f7ff fd9d 	bl	25e2 <log_msg_arg_get>
    2aa8:	2106      	movs	r1, #6
    2aaa:	900a      	str	r0, [sp, #40]	; 0x28
    2aac:	4620      	mov	r0, r4
    2aae:	f7ff fd98 	bl	25e2 <log_msg_arg_get>
    2ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2ab4:	9004      	str	r0, [sp, #16]
    2ab6:	e9cd b302 	strd	fp, r3, [sp, #8]
    2aba:	e9cd 9a00 	strd	r9, sl, [sp]
    2abe:	4643      	mov	r3, r8
    2ac0:	463a      	mov	r2, r7
    2ac2:	4631      	mov	r1, r6
    2ac4:	4628      	mov	r0, r5
    2ac6:	f7ff fe51 	bl	276c <print_formatted>
    2aca:	e71f      	b.n	290c <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    2acc:	2100      	movs	r1, #0
    2ace:	4620      	mov	r0, r4
    2ad0:	f7ff fd87 	bl	25e2 <log_msg_arg_get>
    2ad4:	2101      	movs	r1, #1
    2ad6:	4607      	mov	r7, r0
    2ad8:	4620      	mov	r0, r4
    2ada:	f7ff fd82 	bl	25e2 <log_msg_arg_get>
    2ade:	2102      	movs	r1, #2
    2ae0:	4680      	mov	r8, r0
    2ae2:	4620      	mov	r0, r4
    2ae4:	f7ff fd7d 	bl	25e2 <log_msg_arg_get>
    2ae8:	2103      	movs	r1, #3
    2aea:	4681      	mov	r9, r0
    2aec:	4620      	mov	r0, r4
    2aee:	f7ff fd78 	bl	25e2 <log_msg_arg_get>
    2af2:	2104      	movs	r1, #4
    2af4:	4682      	mov	sl, r0
    2af6:	4620      	mov	r0, r4
    2af8:	f7ff fd73 	bl	25e2 <log_msg_arg_get>
    2afc:	2105      	movs	r1, #5
    2afe:	4683      	mov	fp, r0
    2b00:	4620      	mov	r0, r4
    2b02:	f7ff fd6e 	bl	25e2 <log_msg_arg_get>
    2b06:	2106      	movs	r1, #6
    2b08:	900b      	str	r0, [sp, #44]	; 0x2c
    2b0a:	4620      	mov	r0, r4
    2b0c:	f7ff fd69 	bl	25e2 <log_msg_arg_get>
    2b10:	2107      	movs	r1, #7
    2b12:	900a      	str	r0, [sp, #40]	; 0x28
    2b14:	4620      	mov	r0, r4
    2b16:	f7ff fd64 	bl	25e2 <log_msg_arg_get>
    2b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2b1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2b1e:	9005      	str	r0, [sp, #20]
    2b20:	9204      	str	r2, [sp, #16]
    2b22:	e9cd b302 	strd	fp, r3, [sp, #8]
    2b26:	e9cd 9a00 	strd	r9, sl, [sp]
    2b2a:	4643      	mov	r3, r8
    2b2c:	463a      	mov	r2, r7
    2b2e:	4631      	mov	r1, r6
    2b30:	4628      	mov	r0, r5
    2b32:	f7ff fe1b 	bl	276c <print_formatted>
    2b36:	e6e9      	b.n	290c <log_output_msg_process+0x134>
    2b38:	0002f7f0 	.word	0x0002f7f0
    2b3c:	0002f7dc 	.word	0x0002f7dc
    2b40:	0002fdfc 	.word	0x0002fdfc
    2b44:	0002f82c 	.word	0x0002f82c
    2b48:	0002f815 	.word	0x0002f815
    2b4c:	0002f81b 	.word	0x0002f81b
    2b50:	20000598 	.word	0x20000598
    2b54:	2000059c 	.word	0x2000059c
    2b58:	0002f7f9 	.word	0x0002f7f9
    2b5c:	0002f825 	.word	0x0002f825
    2b60:	0002fe01 	.word	0x0002fe01
    2b64:	0002f8da 	.word	0x0002f8da
		print_formatted(log_output, str,
    2b68:	2100      	movs	r1, #0
    2b6a:	4620      	mov	r0, r4
    2b6c:	f7ff fd39 	bl	25e2 <log_msg_arg_get>
    2b70:	2101      	movs	r1, #1
    2b72:	900c      	str	r0, [sp, #48]	; 0x30
    2b74:	4620      	mov	r0, r4
    2b76:	f7ff fd34 	bl	25e2 <log_msg_arg_get>
    2b7a:	2102      	movs	r1, #2
    2b7c:	900b      	str	r0, [sp, #44]	; 0x2c
    2b7e:	4620      	mov	r0, r4
    2b80:	f7ff fd2f 	bl	25e2 <log_msg_arg_get>
    2b84:	2103      	movs	r1, #3
    2b86:	4607      	mov	r7, r0
    2b88:	4620      	mov	r0, r4
    2b8a:	f7ff fd2a 	bl	25e2 <log_msg_arg_get>
    2b8e:	2104      	movs	r1, #4
    2b90:	4680      	mov	r8, r0
    2b92:	4620      	mov	r0, r4
    2b94:	f7ff fd25 	bl	25e2 <log_msg_arg_get>
    2b98:	2105      	movs	r1, #5
    2b9a:	4681      	mov	r9, r0
    2b9c:	4620      	mov	r0, r4
    2b9e:	f7ff fd20 	bl	25e2 <log_msg_arg_get>
    2ba2:	2106      	movs	r1, #6
    2ba4:	4682      	mov	sl, r0
    2ba6:	4620      	mov	r0, r4
    2ba8:	f7ff fd1b 	bl	25e2 <log_msg_arg_get>
    2bac:	2107      	movs	r1, #7
    2bae:	4683      	mov	fp, r0
    2bb0:	4620      	mov	r0, r4
    2bb2:	f7ff fd16 	bl	25e2 <log_msg_arg_get>
    2bb6:	2108      	movs	r1, #8
    2bb8:	900a      	str	r0, [sp, #40]	; 0x28
    2bba:	4620      	mov	r0, r4
    2bbc:	f7ff fd11 	bl	25e2 <log_msg_arg_get>
    2bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2bc2:	9006      	str	r0, [sp, #24]
    2bc4:	e9cd b304 	strd	fp, r3, [sp, #16]
    2bc8:	e9cd 9a02 	strd	r9, sl, [sp, #8]
    2bcc:	e9cd 7800 	strd	r7, r8, [sp]
    2bd0:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
    2bd4:	4631      	mov	r1, r6
    2bd6:	4628      	mov	r0, r5
    2bd8:	f7ff fdc8 	bl	276c <print_formatted>
    2bdc:	e696      	b.n	290c <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    2bde:	2100      	movs	r1, #0
    2be0:	4620      	mov	r0, r4
    2be2:	f7ff fcfe 	bl	25e2 <log_msg_arg_get>
    2be6:	2101      	movs	r1, #1
    2be8:	900d      	str	r0, [sp, #52]	; 0x34
    2bea:	4620      	mov	r0, r4
    2bec:	f7ff fcf9 	bl	25e2 <log_msg_arg_get>
    2bf0:	2102      	movs	r1, #2
    2bf2:	900c      	str	r0, [sp, #48]	; 0x30
    2bf4:	4620      	mov	r0, r4
    2bf6:	f7ff fcf4 	bl	25e2 <log_msg_arg_get>
    2bfa:	2103      	movs	r1, #3
    2bfc:	900a      	str	r0, [sp, #40]	; 0x28
    2bfe:	4620      	mov	r0, r4
    2c00:	f7ff fcef 	bl	25e2 <log_msg_arg_get>
    2c04:	2104      	movs	r1, #4
    2c06:	4607      	mov	r7, r0
    2c08:	4620      	mov	r0, r4
    2c0a:	f7ff fcea 	bl	25e2 <log_msg_arg_get>
    2c0e:	2105      	movs	r1, #5
    2c10:	4680      	mov	r8, r0
    2c12:	4620      	mov	r0, r4
    2c14:	f7ff fce5 	bl	25e2 <log_msg_arg_get>
    2c18:	2106      	movs	r1, #6
    2c1a:	4681      	mov	r9, r0
    2c1c:	4620      	mov	r0, r4
    2c1e:	f7ff fce0 	bl	25e2 <log_msg_arg_get>
    2c22:	2107      	movs	r1, #7
    2c24:	4682      	mov	sl, r0
    2c26:	4620      	mov	r0, r4
    2c28:	f7ff fcdb 	bl	25e2 <log_msg_arg_get>
    2c2c:	2108      	movs	r1, #8
    2c2e:	4683      	mov	fp, r0
    2c30:	4620      	mov	r0, r4
    2c32:	f7ff fcd6 	bl	25e2 <log_msg_arg_get>
    2c36:	2109      	movs	r1, #9
    2c38:	900b      	str	r0, [sp, #44]	; 0x2c
    2c3a:	4620      	mov	r0, r4
    2c3c:	f7ff fcd1 	bl	25e2 <log_msg_arg_get>
    2c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2c42:	9007      	str	r0, [sp, #28]
    2c44:	e9cd b305 	strd	fp, r3, [sp, #20]
    2c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2c4a:	9300      	str	r3, [sp, #0]
    2c4c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
    2c50:	e9cd 7801 	strd	r7, r8, [sp, #4]
    2c54:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
    2c58:	4631      	mov	r1, r6
    2c5a:	4628      	mov	r0, r5
    2c5c:	f7ff fd86 	bl	276c <print_formatted>
    2c60:	e654      	b.n	290c <log_output_msg_process+0x134>
	return (msg->hdr.params.generic.type == LOG_MSG_TYPE_HEXDUMP) &&
    2c62:	7a23      	ldrb	r3, [r4, #8]
	} else if (log_msg_is_raw_string(msg)) {
    2c64:	f003 0305 	and.w	r3, r3, #5
    2c68:	2b05      	cmp	r3, #5
    2c6a:	af10      	add	r7, sp, #64	; 0x40
    2c6c:	d114      	bne.n	2c98 <log_output_msg_process+0x4c0>
	size_t offset = 0;
    2c6e:	2600      	movs	r6, #0
		length = log_output->size;
    2c70:	68eb      	ldr	r3, [r5, #12]
    2c72:	9310      	str	r3, [sp, #64]	; 0x40
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    2c74:	463a      	mov	r2, r7
    2c76:	4633      	mov	r3, r6
    2c78:	68a9      	ldr	r1, [r5, #8]
    2c7a:	4620      	mov	r0, r4
    2c7c:	f7ff fd6e 	bl	275c <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    2c80:	686b      	ldr	r3, [r5, #4]
    2c82:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2c84:	601a      	str	r2, [r3, #0]
		log_output_flush(log_output);
    2c86:	4628      	mov	r0, r5
    2c88:	f7ff fd82 	bl	2790 <log_output_flush>
		offset += length;
    2c8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2c8e:	441e      	add	r6, r3
	} while (length > 0);
    2c90:	2b00      	cmp	r3, #0
    2c92:	d1ed      	bne.n	2c70 <log_output_msg_process+0x498>
	print_formatted(log_output, "\r");
    2c94:	4934      	ldr	r1, [pc, #208]	; (2d68 <log_output_msg_process+0x590>)
    2c96:	e62c      	b.n	28f2 <log_output_msg_process+0x11a>
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    2c98:	4620      	mov	r0, r4
    2c9a:	f7ff fd06 	bl	26aa <log_msg_str_get>
    2c9e:	4933      	ldr	r1, [pc, #204]	; (2d6c <log_output_msg_process+0x594>)
			print_formatted(log_output, " ");
    2ca0:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 2d84 <log_output_msg_process+0x5ac>
				print_formatted(log_output, "%02x ", buf[i]);
    2ca4:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 2d88 <log_output_msg_process+0x5b0>
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    2ca8:	4602      	mov	r2, r0
    2caa:	4628      	mov	r0, r5
    2cac:	f7ff fd5e 	bl	276c <print_formatted>
	u32_t offset = 0;
    2cb0:	f04f 0800 	mov.w	r8, #0
	size_t length = sizeof(buf);
    2cb4:	aa12      	add	r2, sp, #72	; 0x48
    2cb6:	2308      	movs	r3, #8
    2cb8:	f842 3d0c 	str.w	r3, [r2, #-12]!
	log_msg_hexdump_data_get(msg, buf, &length, offset);
    2cbc:	4639      	mov	r1, r7
    2cbe:	4643      	mov	r3, r8
    2cc0:	4620      	mov	r0, r4
    2cc2:	f7ff fd4b 	bl	275c <log_msg_hexdump_data_get>
	if (length > 0) {
    2cc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2cc8:	2b00      	cmp	r3, #0
    2cca:	d036      	beq.n	2d3a <log_output_msg_process+0x562>
	if (flags & LOG_OUTPUT_FLAG_CRLF_NONE) {
    2ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2cce:	06da      	lsls	r2, r3, #27
    2cd0:	d406      	bmi.n	2ce0 <log_output_msg_process+0x508>
	if (flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) {
    2cd2:	0698      	lsls	r0, r3, #26
		print_formatted(ctx, "\n");
    2cd4:	bf4c      	ite	mi
    2cd6:	4926      	ldrmi	r1, [pc, #152]	; (2d70 <log_output_msg_process+0x598>)
		print_formatted(ctx, "\r\n");
    2cd8:	4926      	ldrpl	r1, [pc, #152]	; (2d74 <log_output_msg_process+0x59c>)
    2cda:	4628      	mov	r0, r5
    2cdc:	f7ff fd46 	bl	276c <print_formatted>
	u32_t offset = 0;
    2ce0:	f04f 0a00 	mov.w	sl, #0
		for (int i = 0; i < prefix_offset; i++) {
    2ce4:	4556      	cmp	r6, sl
    2ce6:	dc2e      	bgt.n	2d46 <log_output_msg_process+0x56e>
		for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2ce8:	f04f 0a00 	mov.w	sl, #0
			if (i < length) {
    2cec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2cee:	459a      	cmp	sl, r3
    2cf0:	d230      	bcs.n	2d54 <log_output_msg_process+0x57c>
				print_formatted(log_output, "%02x ", buf[i]);
    2cf2:	f817 200a 	ldrb.w	r2, [r7, sl]
    2cf6:	4659      	mov	r1, fp
    2cf8:	4628      	mov	r0, r5
    2cfa:	f7ff fd37 	bl	276c <print_formatted>
		for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2cfe:	f10a 0a01 	add.w	sl, sl, #1
    2d02:	f1ba 0f08 	cmp.w	sl, #8
    2d06:	d1f1      	bne.n	2cec <log_output_msg_process+0x514>
		print_formatted(log_output, "|");
    2d08:	491b      	ldr	r1, [pc, #108]	; (2d78 <log_output_msg_process+0x5a0>)
    2d0a:	4628      	mov	r0, r5
    2d0c:	f7ff fd2e 	bl	276c <print_formatted>
		for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2d10:	f04f 0a00 	mov.w	sl, #0
			if (i < length) {
    2d14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2d16:	4592      	cmp	sl, r2
    2d18:	d221      	bcs.n	2d5e <log_output_msg_process+0x586>
				char c = (char)buf[i];
    2d1a:	f817 200a 	ldrb.w	r2, [r7, sl]
	return ((((unsigned)c) > ' ') && (((unsigned)c) <= '~'));
}

static inline int isprint(int c)
{
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
    2d1e:	f1a2 0120 	sub.w	r1, r2, #32
				print_formatted(log_output, "%c",
    2d22:	295f      	cmp	r1, #95	; 0x5f
    2d24:	bf28      	it	cs
    2d26:	222e      	movcs	r2, #46	; 0x2e
    2d28:	4914      	ldr	r1, [pc, #80]	; (2d7c <log_output_msg_process+0x5a4>)
    2d2a:	4628      	mov	r0, r5
    2d2c:	f7ff fd1e 	bl	276c <print_formatted>
		for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2d30:	f10a 0a01 	add.w	sl, sl, #1
    2d34:	f1ba 0f08 	cmp.w	sl, #8
    2d38:	d1ec      	bne.n	2d14 <log_output_msg_process+0x53c>
	return length;
    2d3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if (length < HEXDUMP_BYTES_IN_LINE) {
    2d3c:	2b07      	cmp	r3, #7
    2d3e:	f67f ade5 	bls.w	290c <log_output_msg_process+0x134>
		offset += length;
    2d42:	4498      	add	r8, r3
    2d44:	e7b6      	b.n	2cb4 <log_output_msg_process+0x4dc>
			print_formatted(log_output, " ");
    2d46:	4649      	mov	r1, r9
    2d48:	4628      	mov	r0, r5
    2d4a:	f7ff fd0f 	bl	276c <print_formatted>
		for (int i = 0; i < prefix_offset; i++) {
    2d4e:	f10a 0a01 	add.w	sl, sl, #1
    2d52:	e7c7      	b.n	2ce4 <log_output_msg_process+0x50c>
				print_formatted(log_output, "   ");
    2d54:	490a      	ldr	r1, [pc, #40]	; (2d80 <log_output_msg_process+0x5a8>)
    2d56:	4628      	mov	r0, r5
    2d58:	f7ff fd08 	bl	276c <print_formatted>
    2d5c:	e7cf      	b.n	2cfe <log_output_msg_process+0x526>
				print_formatted(log_output, " ");
    2d5e:	4649      	mov	r1, r9
    2d60:	4628      	mov	r0, r5
    2d62:	f7ff fd03 	bl	276c <print_formatted>
    2d66:	e7e3      	b.n	2d30 <log_output_msg_process+0x558>
    2d68:	0002fd1a 	.word	0x0002fd1a
    2d6c:	0002fdfc 	.word	0x0002fdfc
    2d70:	0002fe01 	.word	0x0002fe01
    2d74:	0002f8da 	.word	0x0002f8da
    2d78:	0002f216 	.word	0x0002f216
    2d7c:	0002fe14 	.word	0x0002fe14
    2d80:	00036371 	.word	0x00036371
    2d84:	00036373 	.word	0x00036373
    2d88:	0002f81f 	.word	0x0002f81f

00002d8c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1;
    2d8c:	4a08      	ldr	r2, [pc, #32]	; (2db0 <log_output_timestamp_freq_set+0x24>)
{
    2d8e:	b510      	push	{r4, lr}
	timestamp_div = 1;
    2d90:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2d92:	4c08      	ldr	r4, [pc, #32]	; (2db4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1;
    2d94:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2d96:	2100      	movs	r1, #0
    2d98:	42a0      	cmp	r0, r4
    2d9a:	d804      	bhi.n	2da6 <log_output_timestamp_freq_set+0x1a>
    2d9c:	b101      	cbz	r1, 2da0 <log_output_timestamp_freq_set+0x14>
    2d9e:	6013      	str	r3, [r2, #0]
		frequency /= 2;
		timestamp_div *= 2;
	}

	freq = frequency;
    2da0:	4b05      	ldr	r3, [pc, #20]	; (2db8 <log_output_timestamp_freq_set+0x2c>)
    2da2:	6018      	str	r0, [r3, #0]
}
    2da4:	bd10      	pop	{r4, pc}
		frequency /= 2;
    2da6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2;
    2da8:	005b      	lsls	r3, r3, #1
    2daa:	2101      	movs	r1, #1
    2dac:	e7f4      	b.n	2d98 <log_output_timestamp_freq_set+0xc>
    2dae:	bf00      	nop
    2db0:	2000059c 	.word	0x2000059c
    2db4:	000f4240 	.word	0x000f4240
    2db8:	20000598 	.word	0x20000598

00002dbc <char_out>:
#include <device.h>
#include <uart.h>
#include <assert.h>

static int char_out(u8_t *data, size_t length, void *ctx)
{
    2dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dbe:	460d      	mov	r5, r1
    2dc0:	4616      	mov	r6, r2
    2dc2:	4604      	mov	r4, r0
    2dc4:	1847      	adds	r7, r0, r1
	struct device *dev = (struct device *)ctx;

	for (size_t i = 0; i < length; i++) {
    2dc6:	42a7      	cmp	r7, r4
    2dc8:	d101      	bne.n	2dce <char_out+0x12>
		uart_poll_out(dev, data[i]);
	}

	return length;
}
    2dca:	4628      	mov	r0, r5
    2dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    2dce:	6873      	ldr	r3, [r6, #4]
    2dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
    2dd4:	685b      	ldr	r3, [r3, #4]
    2dd6:	4630      	mov	r0, r6
    2dd8:	4798      	blx	r3
    2dda:	e7f4      	b.n	2dc6 <char_out+0xa>

00002ddc <panic>:
	log_output_ctx_set(&log_output, dev);
}

static void panic(struct log_backend const *const backend)
{
}
    2ddc:	4770      	bx	lr
	...

00002de0 <log_backend_uart_init>:
{
    2de0:	b508      	push	{r3, lr}
	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    2de2:	4803      	ldr	r0, [pc, #12]	; (2df0 <log_backend_uart_init+0x10>)
    2de4:	f02a fb50 	bl	2d488 <device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    2de8:	4b02      	ldr	r3, [pc, #8]	; (2df4 <log_backend_uart_init+0x14>)
    2dea:	6058      	str	r0, [r3, #4]
}
    2dec:	bd08      	pop	{r3, pc}
    2dee:	bf00      	nop
    2df0:	0002f86c 	.word	0x0002f86c
    2df4:	200005ac 	.word	0x200005ac

00002df8 <put>:
{
    2df8:	b510      	push	{r4, lr}
	log_msg_get(msg);
    2dfa:	4608      	mov	r0, r1
{
    2dfc:	460c      	mov	r4, r1
	log_msg_get(msg);
    2dfe:	f7ff fbb5 	bl	256c <log_msg_get>
	log_output_msg_process(&log_output, msg, flags);
    2e02:	4621      	mov	r1, r4
    2e04:	4804      	ldr	r0, [pc, #16]	; (2e18 <put+0x20>)
    2e06:	220f      	movs	r2, #15
    2e08:	f7ff fce6 	bl	27d8 <log_output_msg_process>
	log_msg_put(msg);
    2e0c:	4620      	mov	r0, r4
}
    2e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_msg_put(msg);
    2e12:	f7ff bc37 	b.w	2684 <log_msg_put>
    2e16:	bf00      	nop
    2e18:	0002f874 	.word	0x0002f874

00002e1c <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    2e1c:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
    2e1e:	2804      	cmp	r0, #4
	entry->handler = NULL;
    2e20:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    2e22:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
    2e24:	bf98      	it	ls
    2e26:	4b04      	ldrls	r3, [pc, #16]	; (2e38 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
    2e28:	4a04      	ldr	r2, [pc, #16]	; (2e3c <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
    2e2a:	bf98      	it	ls
    2e2c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
    2e30:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
    2e32:	600b      	str	r3, [r1, #0]
}
    2e34:	4770      	bx	lr
    2e36:	bf00      	nop
    2e38:	0002f9fc 	.word	0x0002f9fc
    2e3c:	0002f8e8 	.word	0x0002f8e8

00002e40 <log_halt>:
	backend->cb->active = false;
    2e40:	684b      	ldr	r3, [r1, #4]
    2e42:	2000      	movs	r0, #0
    2e44:	7158      	strb	r0, [r3, #5]
		    size_t argc,
		    char **argv)
{
	log_backend_deactivate(backend);
	return 0;
}
    2e46:	4770      	bx	lr

00002e48 <log_go>:
	backend->cb->active = true;
    2e48:	684b      	ldr	r3, [r1, #4]
    2e4a:	2201      	movs	r2, #1
    2e4c:	715a      	strb	r2, [r3, #5]
		  size_t argc,
		  char **argv)
{
	log_backend_activate(backend, backend->cb->ctx);
	return 0;
}
    2e4e:	2000      	movs	r0, #0
    2e50:	4770      	bx	lr
	...

00002e54 <backend_name_get>:
	SHELL_SUBCMD_SET_END
};

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    2e54:	2200      	movs	r2, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
    2e56:	4b08      	ldr	r3, [pc, #32]	; (2e78 <backend_name_get+0x24>)
	entry->syntax  = NULL;
    2e58:	600a      	str	r2, [r1, #0]
	entry->handler = NULL;
    2e5a:	60ca      	str	r2, [r1, #12]
	entry->help  = NULL;
    2e5c:	604a      	str	r2, [r1, #4]
	entry->subcmd = &sub_log_backend;
    2e5e:	608b      	str	r3, [r1, #8]
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    2e60:	4a06      	ldr	r2, [pc, #24]	; (2e7c <backend_name_get+0x28>)
    2e62:	4b07      	ldr	r3, [pc, #28]	; (2e80 <backend_name_get+0x2c>)
    2e64:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
    2e66:	ebb0 1f12 	cmp.w	r0, r2, lsr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
    2e6a:	bf3e      	ittt	cc
    2e6c:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
    2e70:	689b      	ldrcc	r3, [r3, #8]
    2e72:	600b      	strcc	r3, [r1, #0]
	}
}
    2e74:	4770      	bx	lr
    2e76:	bf00      	nop
    2e78:	0002fcd8 	.word	0x0002fcd8
    2e7c:	0002f100 	.word	0x0002f100
    2e80:	0002f0d0 	.word	0x0002f0d0

00002e84 <log_status>:
{
    2e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    2e88:	4b21      	ldr	r3, [pc, #132]	; (2f10 <log_status+0x8c>)
    2e8a:	4d22      	ldr	r5, [pc, #136]	; (2f14 <log_status+0x90>)
    2e8c:	1aed      	subs	r5, r5, r3
	return backend->cb->active;
    2e8e:	684b      	ldr	r3, [r1, #4]
	if (!log_backend_is_active(backend)) {
    2e90:	795b      	ldrb	r3, [r3, #5]
{
    2e92:	4606      	mov	r6, r0
    2e94:	460f      	mov	r7, r1
    2e96:	08ed      	lsrs	r5, r5, #3
	if (!log_backend_is_active(backend)) {
    2e98:	b91b      	cbnz	r3, 2ea2 <log_status+0x1e>
		shell_fprintf(shell, SHELL_ERROR, "Logs are halted!\r\n");
    2e9a:	4a1f      	ldr	r2, [pc, #124]	; (2f18 <log_status+0x94>)
    2e9c:	2102      	movs	r1, #2
    2e9e:	f000 fc5f 	bl	3760 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    2ea2:	4b1e      	ldr	r3, [pc, #120]	; (2f1c <log_status+0x98>)
    2ea4:	4a1e      	ldr	r2, [pc, #120]	; (2f20 <log_status+0x9c>)
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    2ea6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 2f28 <log_status+0xa4>
    2eaa:	f8df 9080 	ldr.w	r9, [pc, #128]	; 2f2c <log_status+0xa8>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    2eae:	2100      	movs	r1, #0
    2eb0:	4630      	mov	r0, r6
    2eb2:	f000 fc55 	bl	3760 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
    2eb6:	4a1b      	ldr	r2, [pc, #108]	; (2f24 <log_status+0xa0>)
    2eb8:	2100      	movs	r1, #0
    2eba:	4630      	mov	r0, r6
    2ebc:	f000 fc50 	bl	3760 <shell_fprintf>
	for (i = 0; i < modules_cnt; i++) {
    2ec0:	2400      	movs	r4, #0
    2ec2:	42ac      	cmp	r4, r5
    2ec4:	d103      	bne.n	2ece <log_status+0x4a>
}
    2ec6:	2000      	movs	r0, #0
    2ec8:	b003      	add	sp, #12
    2eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2ece:	4622      	mov	r2, r4
    2ed0:	2301      	movs	r3, #1
    2ed2:	2100      	movs	r1, #0
    2ed4:	4638      	mov	r0, r7
    2ed6:	f7ff fa85 	bl	23e4 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2eda:	2300      	movs	r3, #0
    2edc:	4622      	mov	r2, r4
    2ede:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2ee0:	4682      	mov	sl, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2ee2:	4638      	mov	r0, r7
    2ee4:	f7ff fa7e 	bl	23e4 <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    2ee8:	4621      	mov	r1, r4
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2eea:	4683      	mov	fp, r0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    2eec:	2000      	movs	r0, #0
    2eee:	f7ff f971 	bl	21d4 <log_source_name_get>
    2ef2:	f858 302b 	ldr.w	r3, [r8, fp, lsl #2]
    2ef6:	9301      	str	r3, [sp, #4]
    2ef8:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    2efc:	9300      	str	r3, [sp, #0]
    2efe:	464a      	mov	r2, r9
    2f00:	4603      	mov	r3, r0
    2f02:	2100      	movs	r1, #0
    2f04:	4630      	mov	r0, r6
    2f06:	f000 fc2b 	bl	3760 <shell_fprintf>
	for (i = 0; i < modules_cnt; i++) {
    2f0a:	3401      	adds	r4, #1
    2f0c:	e7d9      	b.n	2ec2 <log_status+0x3e>
    2f0e:	bf00      	nop
    2f10:	0002ef38 	.word	0x0002ef38
    2f14:	0002f0d0 	.word	0x0002f0d0
    2f18:	0002f957 	.word	0x0002f957
    2f1c:	0002f96a 	.word	0x0002f96a
    2f20:	0002f976 	.word	0x0002f976
    2f24:	0002f994 	.word	0x0002f994
    2f28:	0002f9e8 	.word	0x0002f9e8
    2f2c:	0002f9d1 	.word	0x0002f9d1

00002f30 <module_name_get>:
{
    2f30:	b510      	push	{r4, lr}
	entry->handler = NULL;
    2f32:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
    2f34:	4a05      	ldr	r2, [pc, #20]	; (2f4c <module_name_get+0x1c>)
	entry->handler = NULL;
    2f36:	60cb      	str	r3, [r1, #12]
{
    2f38:	460c      	mov	r4, r1
	entry->help  = NULL;
    2f3a:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
    2f3c:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
    2f3e:	4601      	mov	r1, r0
    2f40:	4618      	mov	r0, r3
    2f42:	f7ff f947 	bl	21d4 <log_source_name_get>
    2f46:	6020      	str	r0, [r4, #0]
}
    2f48:	bd10      	pop	{r4, pc}
    2f4a:	bf00      	nop
    2f4c:	0002f8e8 	.word	0x0002f8e8

00002f50 <filters_set>:
{
    2f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f54:	460f      	mov	r7, r1
    2f56:	4698      	mov	r8, r3
    2f58:	4930      	ldr	r1, [pc, #192]	; (301c <filters_set+0xcc>)
    2f5a:	4b31      	ldr	r3, [pc, #196]	; (3020 <filters_set+0xd0>)
    2f5c:	1a5b      	subs	r3, r3, r1
    2f5e:	b085      	sub	sp, #20
    2f60:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	int cnt = all ? log_sources_count() : argc;
    2f64:	2a00      	cmp	r2, #0
    2f66:	bf14      	ite	ne
    2f68:	4613      	movne	r3, r2
    2f6a:	465b      	moveq	r3, fp
    2f6c:	9303      	str	r3, [sp, #12]
	if (!backend->cb->active) {
    2f6e:	687b      	ldr	r3, [r7, #4]
{
    2f70:	9002      	str	r0, [sp, #8]
	if (!backend->cb->active) {
    2f72:	795b      	ldrb	r3, [r3, #5]
	int cnt = all ? log_sources_count() : argc;
    2f74:	4616      	mov	r6, r2
	if (!backend->cb->active) {
    2f76:	b91b      	cbnz	r3, 2f80 <filters_set+0x30>
		shell_fprintf(shell, SHELL_WARNING, "Backend not active.\r\n");
    2f78:	4a2a      	ldr	r2, [pc, #168]	; (3024 <filters_set+0xd4>)
    2f7a:	2104      	movs	r1, #4
    2f7c:	f000 fbf0 	bl	3760 <shell_fprintf>
	for (i = 0; i < modules_cnt; i++) {
    2f80:	2500      	movs	r5, #0
    2f82:	e03d      	b.n	3000 <filters_set+0xb0>
		id = all ? i : module_id_get(argv[i]);
    2f84:	2e00      	cmp	r6, #0
    2f86:	d047      	beq.n	3018 <filters_set+0xc8>
    2f88:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
	for (i = 0; i < modules_cnt; i++) {
    2f8c:	f04f 0900 	mov.w	r9, #0
    2f90:	45d9      	cmp	r9, fp
    2f92:	d107      	bne.n	2fa4 <filters_set+0x54>
			shell_fprintf(shell, SHELL_ERROR,
    2f94:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    2f98:	4a23      	ldr	r2, [pc, #140]	; (3028 <filters_set+0xd8>)
    2f9a:	9802      	ldr	r0, [sp, #8]
    2f9c:	2102      	movs	r1, #2
    2f9e:	f000 fbdf 	bl	3760 <shell_fprintf>
    2fa2:	e02c      	b.n	2ffe <filters_set+0xae>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
    2fa4:	4649      	mov	r1, r9
    2fa6:	2000      	movs	r0, #0
    2fa8:	f7ff f914 	bl	21d4 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
    2fac:	2240      	movs	r2, #64	; 0x40
    2fae:	4621      	mov	r1, r4
    2fb0:	f003 fe29 	bl	6c06 <strncmp>
    2fb4:	bb50      	cbnz	r0, 300c <filters_set+0xbc>
			return i;
    2fb6:	464c      	mov	r4, r9
	compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2fb8:	2300      	movs	r3, #0
    2fba:	4619      	mov	r1, r3
    2fbc:	4622      	mov	r2, r4
    2fbe:	4638      	mov	r0, r7
    2fc0:	f7ff fa10 	bl	23e4 <log_filter_get>
    2fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2fc6:	4283      	cmp	r3, r0
    2fc8:	bf28      	it	cs
    2fca:	4603      	movcs	r3, r0
    2fcc:	4681      	mov	r9, r0
	log_filter_set(backend, CONFIG_LOG_DOMAIN_ID, module_id, level);
    2fce:	4622      	mov	r2, r4
    2fd0:	2100      	movs	r1, #0
    2fd2:	4638      	mov	r0, r7
    2fd4:	469a      	mov	sl, r3
    2fd6:	f7ff f90b 	bl	21f0 <log_filter_set>
			if (set_lvl != level) {
    2fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2fdc:	454b      	cmp	r3, r9
    2fde:	d90e      	bls.n	2ffe <filters_set+0xae>
						CONFIG_LOG_DOMAIN_ID, i) :
    2fe0:	b9be      	cbnz	r6, 3012 <filters_set+0xc2>
    2fe2:	4629      	mov	r1, r5
    2fe4:	4630      	mov	r0, r6
    2fe6:	f7ff f8f5 	bl	21d4 <log_source_name_get>
    2fea:	4603      	mov	r3, r0
				shell_fprintf(shell, SHELL_WARNING,
    2fec:	4a0f      	ldr	r2, [pc, #60]	; (302c <filters_set+0xdc>)
    2fee:	9802      	ldr	r0, [sp, #8]
    2ff0:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
    2ff4:	9200      	str	r2, [sp, #0]
    2ff6:	2104      	movs	r1, #4
    2ff8:	4a0d      	ldr	r2, [pc, #52]	; (3030 <filters_set+0xe0>)
    2ffa:	f000 fbb1 	bl	3760 <shell_fprintf>
	for (i = 0; i < cnt; i++) {
    2ffe:	3501      	adds	r5, #1
    3000:	9b03      	ldr	r3, [sp, #12]
    3002:	429d      	cmp	r5, r3
    3004:	dbbe      	blt.n	2f84 <filters_set+0x34>
}
    3006:	b005      	add	sp, #20
    3008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < modules_cnt; i++) {
    300c:	f109 0901 	add.w	r9, r9, #1
    3010:	e7be      	b.n	2f90 <filters_set+0x40>
						CONFIG_LOG_DOMAIN_ID, i) :
    3012:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    3016:	e7e9      	b.n	2fec <filters_set+0x9c>
    3018:	462c      	mov	r4, r5
    301a:	e7cd      	b.n	2fb8 <filters_set+0x68>
    301c:	0002ef38 	.word	0x0002ef38
    3020:	0002f0d0 	.word	0x0002f0d0
    3024:	0002f8f8 	.word	0x0002f8f8
    3028:	0002f925 	.word	0x0002f925
    302c:	0002f9e8 	.word	0x0002f9e8
    3030:	0002f90e 	.word	0x0002f90e

00003034 <shell_backend_cmd_execute>:
{
    3034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
    3038:	f852 7c04 	ldr.w	r7, [r2, #-4]
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    303c:	4d19      	ldr	r5, [pc, #100]	; (30a4 <shell_backend_cmd_execute+0x70>)
{
    303e:	b085      	sub	sp, #20
    3040:	4680      	mov	r8, r0
	size_t slen = strlen(name);
    3042:	4638      	mov	r0, r7
{
    3044:	4692      	mov	sl, r2
    3046:	9302      	str	r3, [sp, #8]
    3048:	468b      	mov	fp, r1
	size_t slen = strlen(name);
    304a:	f003 fdc7 	bl	6bdc <strlen>
    304e:	4a16      	ldr	r2, [pc, #88]	; (30a8 <shell_backend_cmd_execute+0x74>)
    3050:	1b52      	subs	r2, r2, r5
    3052:	0912      	lsrs	r2, r2, #4
    3054:	4603      	mov	r3, r0
    3056:	9201      	str	r2, [sp, #4]
	for (int i = 0; i < log_backend_count_get(); i++) {
    3058:	2400      	movs	r4, #0
    305a:	9a01      	ldr	r2, [sp, #4]
    305c:	4294      	cmp	r4, r2
    305e:	db08      	blt.n	3072 <shell_backend_cmd_execute+0x3e>
		shell_fprintf(shell, SHELL_ERROR,
    3060:	463b      	mov	r3, r7
    3062:	4a12      	ldr	r2, [pc, #72]	; (30ac <shell_backend_cmd_execute+0x78>)
    3064:	2102      	movs	r1, #2
    3066:	4640      	mov	r0, r8
    3068:	f000 fb7a 	bl	3760 <shell_fprintf>
		return -ENOEXEC;
    306c:	f06f 0607 	mvn.w	r6, #7
    3070:	e013      	b.n	309a <shell_backend_cmd_execute+0x66>
    3072:	eb05 1904 	add.w	r9, r5, r4, lsl #4
		if (strncmp(name, backend->name, slen) == 0) {
    3076:	461a      	mov	r2, r3
    3078:	f8d9 1008 	ldr.w	r1, [r9, #8]
    307c:	9303      	str	r3, [sp, #12]
    307e:	4638      	mov	r0, r7
    3080:	f003 fdc1 	bl	6c06 <strncmp>
    3084:	4606      	mov	r6, r0
    3086:	b110      	cbz	r0, 308e <shell_backend_cmd_execute+0x5a>
	for (int i = 0; i < log_backend_count_get(); i++) {
    3088:	3401      	adds	r4, #1
    308a:	9b03      	ldr	r3, [sp, #12]
    308c:	e7e5      	b.n	305a <shell_backend_cmd_execute+0x26>
		func(shell, backend, argc, argv);
    308e:	4653      	mov	r3, sl
    3090:	465a      	mov	r2, fp
    3092:	4649      	mov	r1, r9
    3094:	4640      	mov	r0, r8
    3096:	9c02      	ldr	r4, [sp, #8]
    3098:	47a0      	blx	r4
}
    309a:	4630      	mov	r0, r6
    309c:	b005      	add	sp, #20
    309e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30a2:	bf00      	nop
    30a4:	0002f0d0 	.word	0x0002f0d0
    30a8:	0002f100 	.word	0x0002f100
    30ac:	0002fa10 	.word	0x0002fa10

000030b0 <cmd_log_backend_status>:
{
    30b0:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
    30b2:	4b02      	ldr	r3, [pc, #8]	; (30bc <cmd_log_backend_status+0xc>)
    30b4:	f7ff ffbe 	bl	3034 <shell_backend_cmd_execute>
}
    30b8:	2000      	movs	r0, #0
    30ba:	bd08      	pop	{r3, pc}
    30bc:	00002e85 	.word	0x00002e85

000030c0 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
    30c0:	4b01      	ldr	r3, [pc, #4]	; (30c8 <cmd_log_backend_halt+0x8>)
    30c2:	f7ff bfb7 	b.w	3034 <shell_backend_cmd_execute>
    30c6:	bf00      	nop
    30c8:	00002e41 	.word	0x00002e41

000030cc <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
    30cc:	4b01      	ldr	r3, [pc, #4]	; (30d4 <cmd_log_backend_go+0x8>)
    30ce:	f7ff bfb1 	b.w	3034 <shell_backend_cmd_execute>
    30d2:	bf00      	nop
    30d4:	00002e49 	.word	0x00002e49

000030d8 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
    30d8:	4b01      	ldr	r3, [pc, #4]	; (30e0 <cmd_log_backend_enable+0x8>)
    30da:	f7ff bfab 	b.w	3034 <shell_backend_cmd_execute>
    30de:	bf00      	nop
    30e0:	00003219 	.word	0x00003219

000030e4 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
    30e4:	4b01      	ldr	r3, [pc, #4]	; (30ec <cmd_log_backend_disable+0x8>)
    30e6:	f7ff bfa5 	b.w	3034 <shell_backend_cmd_execute>
    30ea:	bf00      	nop
    30ec:	000032b7 	.word	0x000032b7

000030f0 <cmd_log>:
	SHELL_SUBCMD_SET_END
};

static int cmd_log(const struct shell *shell, size_t argc, char **argv)
{
	if ((argc == 1) || shell_help_requested(shell)) {
    30f0:	2901      	cmp	r1, #1
{
    30f2:	b507      	push	{r0, r1, r2, lr}
    30f4:	4603      	mov	r3, r0
	if ((argc == 1) || shell_help_requested(shell)) {
    30f6:	d004      	beq.n	3102 <cmd_log+0x12>
    30f8:	6881      	ldr	r1, [r0, #8]
 *
 * @return True if help has been requested.
 */
static inline bool shell_help_requested(const struct shell *shell)
{
	return shell->ctx->internal.flags.show_help;
    30fa:	f8d1 124c 	ldr.w	r1, [r1, #588]	; 0x24c
    30fe:	0789      	lsls	r1, r1, #30
    3100:	d508      	bpl.n	3114 <cmd_log+0x24>
		shell_help_print(shell, NULL, 0);
    3102:	2200      	movs	r2, #0
    3104:	4618      	mov	r0, r3
    3106:	4611      	mov	r1, r2
    3108:	f000 fc2e 	bl	3968 <shell_help_print>
		return 0;
    310c:	2000      	movs	r0, #0
	}

	shell_fprintf(shell, SHELL_ERROR, "%s:%s%s\r\n",
		      argv[0], " unknown parameter: ", argv[1]);
	return -ENOEXEC;
}
    310e:	b003      	add	sp, #12
    3110:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_fprintf(shell, SHELL_ERROR, "%s:%s%s\r\n",
    3114:	6853      	ldr	r3, [r2, #4]
    3116:	9301      	str	r3, [sp, #4]
    3118:	4b04      	ldr	r3, [pc, #16]	; (312c <cmd_log+0x3c>)
    311a:	9300      	str	r3, [sp, #0]
    311c:	6813      	ldr	r3, [r2, #0]
    311e:	4a04      	ldr	r2, [pc, #16]	; (3130 <cmd_log+0x40>)
    3120:	2102      	movs	r1, #2
    3122:	f000 fb1d 	bl	3760 <shell_fprintf>
    3126:	f06f 0007 	mvn.w	r0, #7
    312a:	e7f0      	b.n	310e <cmd_log+0x1e>
    312c:	0002f89f 	.word	0x0002f89f
    3130:	0002f895 	.word	0x0002f895

00003134 <shell_state_precheck>:
	if (shell->log_backend->control_block->state
    3134:	69c3      	ldr	r3, [r0, #28]
    3136:	68db      	ldr	r3, [r3, #12]
{
    3138:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
    313a:	791c      	ldrb	r4, [r3, #4]
    313c:	b92c      	cbnz	r4, 314a <shell_state_precheck+0x16>
		shell_fprintf(shell, SHELL_ERROR,
    313e:	4a04      	ldr	r2, [pc, #16]	; (3150 <shell_state_precheck+0x1c>)
    3140:	2102      	movs	r1, #2
    3142:	f000 fb0d 	bl	3760 <shell_fprintf>
    3146:	4620      	mov	r0, r4
}
    3148:	bd10      	pop	{r4, pc}
	return true;
    314a:	2001      	movs	r0, #1
    314c:	e7fc      	b.n	3148 <shell_state_precheck+0x14>
    314e:	bf00      	nop
    3150:	0002fa38 	.word	0x0002fa38

00003154 <cmd_log_self_halt>:
{
    3154:	b510      	push	{r4, lr}
    3156:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
    3158:	f7ff ffec 	bl	3134 <shell_state_precheck>
    315c:	b120      	cbz	r0, 3168 <cmd_log_self_halt+0x14>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
    315e:	69e3      	ldr	r3, [r4, #28]
	log_backend_deactivate(backend);
    3160:	681b      	ldr	r3, [r3, #0]
	backend->cb->active = false;
    3162:	685b      	ldr	r3, [r3, #4]
    3164:	2200      	movs	r2, #0
    3166:	715a      	strb	r2, [r3, #5]
}
    3168:	2000      	movs	r0, #0
    316a:	bd10      	pop	{r4, pc}

0000316c <cmd_log_self_go>:
{
    316c:	b510      	push	{r4, lr}
    316e:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
    3170:	f7ff ffe0 	bl	3134 <shell_state_precheck>
    3174:	b120      	cbz	r0, 3180 <cmd_log_self_go+0x14>
	return log_go(shell, shell->log_backend->backend, argc, argv);
    3176:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
    3178:	681b      	ldr	r3, [r3, #0]
	backend->cb->active = true;
    317a:	685b      	ldr	r3, [r3, #4]
    317c:	2201      	movs	r2, #1
    317e:	715a      	strb	r2, [r3, #5]
}
    3180:	2000      	movs	r0, #0
    3182:	bd10      	pop	{r4, pc}

00003184 <cmd_log_self_status>:
{
    3184:	b570      	push	{r4, r5, r6, lr}
    3186:	4604      	mov	r4, r0
    3188:	460d      	mov	r5, r1
    318a:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    318c:	f7ff ffd2 	bl	3134 <shell_state_precheck>
    3190:	b130      	cbz	r0, 31a0 <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
    3192:	69e0      	ldr	r0, [r4, #28]
    3194:	4633      	mov	r3, r6
    3196:	6801      	ldr	r1, [r0, #0]
    3198:	462a      	mov	r2, r5
    319a:	4620      	mov	r0, r4
    319c:	f7ff fe72 	bl	2e84 <log_status>
}
    31a0:	2000      	movs	r0, #0
    31a2:	bd70      	pop	{r4, r5, r6, pc}

000031a4 <cmd_log_backends_list>:
{
    31a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    31a8:	1e4c      	subs	r4, r1, #1
    31aa:	2300      	movs	r3, #0
    31ac:	4261      	negs	r1, r4
    31ae:	461a      	mov	r2, r3
    31b0:	4161      	adcs	r1, r4
{
    31b2:	4680      	mov	r8, r0
	int err = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    31b4:	f001 f97a 	bl	44ac <shell_cmd_precheck>
	if (err) {
    31b8:	4606      	mov	r6, r0
    31ba:	b960      	cbnz	r0, 31d6 <cmd_log_backends_list+0x32>
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    31bc:	4c11      	ldr	r4, [pc, #68]	; (3204 <cmd_log_backends_list+0x60>)
    31be:	4d12      	ldr	r5, [pc, #72]	; (3208 <cmd_log_backends_list+0x64>)
		shell_fprintf(shell, SHELL_NORMAL,
    31c0:	f8df 9048 	ldr.w	r9, [pc, #72]	; 320c <cmd_log_backends_list+0x68>
    31c4:	f8df a048 	ldr.w	sl, [pc, #72]	; 3210 <cmd_log_backends_list+0x6c>
    31c8:	f8df b048 	ldr.w	fp, [pc, #72]	; 3214 <cmd_log_backends_list+0x70>
    31cc:	1b2d      	subs	r5, r5, r4
    31ce:	092d      	lsrs	r5, r5, #4
	for (int i = 0; i < backend_count; i++) {
    31d0:	4607      	mov	r7, r0
    31d2:	42bd      	cmp	r5, r7
    31d4:	dc03      	bgt.n	31de <cmd_log_backends_list+0x3a>
}
    31d6:	4630      	mov	r0, r6
    31d8:	b003      	add	sp, #12
    31da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			      backend->cb->active ? "enabled" : "disabled",
    31de:	6862      	ldr	r2, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
    31e0:	7953      	ldrb	r3, [r2, #5]
    31e2:	7912      	ldrb	r2, [r2, #4]
    31e4:	2b00      	cmp	r3, #0
    31e6:	bf14      	ite	ne
    31e8:	464b      	movne	r3, r9
    31ea:	4653      	moveq	r3, sl
    31ec:	e9cd 3200 	strd	r3, r2, [sp]
    31f0:	2100      	movs	r1, #0
    31f2:	68a3      	ldr	r3, [r4, #8]
    31f4:	465a      	mov	r2, fp
    31f6:	4640      	mov	r0, r8
    31f8:	f000 fab2 	bl	3760 <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
    31fc:	3701      	adds	r7, #1
    31fe:	3410      	adds	r4, #16
    3200:	e7e7      	b.n	31d2 <cmd_log_backends_list+0x2e>
    3202:	bf00      	nop
    3204:	0002f0d0 	.word	0x0002f0d0
    3208:	0002f100 	.word	0x0002f100
    320c:	0002f8b4 	.word	0x0002f8b4
    3210:	000344b2 	.word	0x000344b2
    3214:	0002f8bc 	.word	0x0002f8bc

00003218 <log_enable>:
{
    3218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    321c:	4690      	mov	r8, r2
	int err = shell_cmd_precheck(shell, (argc > 1), NULL, 0);
    321e:	f1b8 0f01 	cmp.w	r8, #1
{
    3222:	461d      	mov	r5, r3
	int err = shell_cmd_precheck(shell, (argc > 1), NULL, 0);
    3224:	f04f 0300 	mov.w	r3, #0
{
    3228:	4689      	mov	r9, r1
	int err = shell_cmd_precheck(shell, (argc > 1), NULL, 0);
    322a:	461a      	mov	r2, r3
    322c:	bf94      	ite	ls
    322e:	2100      	movls	r1, #0
    3230:	2101      	movhi	r1, #1
{
    3232:	4607      	mov	r7, r0
	int err = shell_cmd_precheck(shell, (argc > 1), NULL, 0);
    3234:	f001 f93a 	bl	44ac <shell_cmd_precheck>
	if (err) {
    3238:	4604      	mov	r4, r0
    323a:	b968      	cbnz	r0, 3258 <log_enable+0x40>
	severity_level = severity_level_get(argv[1]);
    323c:	f8d5 a004 	ldr.w	sl, [r5, #4]
		if (strncmp(str, severity_lvls[i], 4) == 0) {
    3240:	f8df b04c 	ldr.w	fp, [pc, #76]	; 3290 <log_enable+0x78>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    3244:	2c05      	cmp	r4, #5
    3246:	d10b      	bne.n	3260 <log_enable+0x48>
		shell_fprintf(shell, SHELL_ERROR, "Invalid severity: %s\r\n",
    3248:	686b      	ldr	r3, [r5, #4]
    324a:	4a10      	ldr	r2, [pc, #64]	; (328c <log_enable+0x74>)
    324c:	2102      	movs	r1, #2
    324e:	4638      	mov	r0, r7
    3250:	f000 fa86 	bl	3760 <shell_fprintf>
    3254:	f06f 0407 	mvn.w	r4, #7
}
    3258:	4620      	mov	r0, r4
    325a:	b003      	add	sp, #12
    325c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (strncmp(str, severity_lvls[i], 4) == 0) {
    3260:	2204      	movs	r2, #4
    3262:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
    3266:	4650      	mov	r0, sl
    3268:	f003 fccd 	bl	6c06 <strncmp>
    326c:	4606      	mov	r6, r0
    326e:	b108      	cbz	r0, 3274 <log_enable+0x5c>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    3270:	3401      	adds	r4, #1
    3272:	e7e7      	b.n	3244 <log_enable+0x2c>
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
    3274:	9400      	str	r4, [sp, #0]
    3276:	f105 0308 	add.w	r3, r5, #8
    327a:	f1a8 0202 	sub.w	r2, r8, #2
    327e:	4649      	mov	r1, r9
    3280:	4638      	mov	r0, r7
    3282:	f7ff fe65 	bl	2f50 <filters_set>
	return 0;
    3286:	4634      	mov	r4, r6
    3288:	e7e6      	b.n	3258 <log_enable+0x40>
    328a:	bf00      	nop
    328c:	0002f940 	.word	0x0002f940
    3290:	0002f9e8 	.word	0x0002f9e8

00003294 <cmd_log_self_enable>:
{
    3294:	b570      	push	{r4, r5, r6, lr}
    3296:	4604      	mov	r4, r0
    3298:	460d      	mov	r5, r1
    329a:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    329c:	f7ff ff4a 	bl	3134 <shell_state_precheck>
    32a0:	b140      	cbz	r0, 32b4 <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
    32a2:	69e0      	ldr	r0, [r4, #28]
    32a4:	4633      	mov	r3, r6
    32a6:	462a      	mov	r2, r5
    32a8:	6801      	ldr	r1, [r0, #0]
    32aa:	4620      	mov	r0, r4
}
    32ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
    32b0:	f7ff bfb2 	b.w	3218 <log_enable>
}
    32b4:	bd70      	pop	{r4, r5, r6, pc}

000032b6 <log_disable>:
{
    32b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    32ba:	4615      	mov	r5, r2
	int err = shell_cmd_precheck(shell, (argc > 1), NULL, 0);
    32bc:	2d01      	cmp	r5, #1
{
    32be:	4698      	mov	r8, r3
	int err = shell_cmd_precheck(shell, (argc > 1), NULL, 0);
    32c0:	f04f 0300 	mov.w	r3, #0
{
    32c4:	460f      	mov	r7, r1
	int err = shell_cmd_precheck(shell, (argc > 1), NULL, 0);
    32c6:	461a      	mov	r2, r3
    32c8:	bf94      	ite	ls
    32ca:	2100      	movls	r1, #0
    32cc:	2101      	movhi	r1, #1
{
    32ce:	4606      	mov	r6, r0
	int err = shell_cmd_precheck(shell, (argc > 1), NULL, 0);
    32d0:	f001 f8ec 	bl	44ac <shell_cmd_precheck>
	if (err) {
    32d4:	4604      	mov	r4, r0
    32d6:	b938      	cbnz	r0, 32e8 <log_disable+0x32>
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
    32d8:	9000      	str	r0, [sp, #0]
    32da:	f108 0304 	add.w	r3, r8, #4
    32de:	1e6a      	subs	r2, r5, #1
    32e0:	4639      	mov	r1, r7
    32e2:	4630      	mov	r0, r6
    32e4:	f7ff fe34 	bl	2f50 <filters_set>
}
    32e8:	4620      	mov	r0, r4
    32ea:	b002      	add	sp, #8
    32ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000032f0 <cmd_log_self_disable>:
{
    32f0:	b570      	push	{r4, r5, r6, lr}
    32f2:	4604      	mov	r4, r0
    32f4:	460d      	mov	r5, r1
    32f6:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    32f8:	f7ff ff1c 	bl	3134 <shell_state_precheck>
    32fc:	b140      	cbz	r0, 3310 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
    32fe:	69e0      	ldr	r0, [r4, #28]
    3300:	4633      	mov	r3, r6
    3302:	462a      	mov	r2, r5
    3304:	6801      	ldr	r1, [r0, #0]
    3306:	4620      	mov	r0, r4
}
    3308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
    330c:	f7ff bfd3 	b.w	32b6 <log_disable>
}
    3310:	bd70      	pop	{r4, r5, r6, pc}
	...

00003314 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	panic_mode = 0;
    3314:	4b03      	ldr	r3, [pc, #12]	; (3324 <log_backend_rtt_init+0x10>)
    3316:	2200      	movs	r2, #0
    3318:	601a      	str	r2, [r3, #0]
	line_pos = line_buf;
    331a:	4b03      	ldr	r3, [pc, #12]	; (3328 <log_backend_rtt_init+0x14>)
    331c:	4a03      	ldr	r2, [pc, #12]	; (332c <log_backend_rtt_init+0x18>)
    331e:	601a      	str	r2, [r3, #0]
}
    3320:	4770      	bx	lr
    3322:	bf00      	nop
    3324:	2000066c 	.word	0x2000066c
    3328:	20000660 	.word	0x20000660
    332c:	200005c8 	.word	0x200005c8

00003330 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = 1;
    3330:	4b01      	ldr	r3, [pc, #4]	; (3338 <panic+0x8>)
    3332:	2201      	movs	r2, #1
    3334:	601a      	str	r2, [r3, #0]
}
    3336:	4770      	bx	lr
    3338:	2000066c 	.word	0x2000066c

0000333c <put>:
{
    333c:	b510      	push	{r4, lr}
	log_msg_get(msg);
    333e:	4608      	mov	r0, r1
{
    3340:	460c      	mov	r4, r1
	log_msg_get(msg);
    3342:	f7ff f913 	bl	256c <log_msg_get>
	log_output_msg_process(&log_output, msg, flags);
    3346:	4621      	mov	r1, r4
    3348:	4804      	ldr	r0, [pc, #16]	; (335c <put+0x20>)
    334a:	220f      	movs	r2, #15
    334c:	f7ff fa44 	bl	27d8 <log_output_msg_process>
	log_msg_put(msg);
    3350:	4620      	mov	r0, r4
}
    3352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_msg_put(msg);
    3356:	f7ff b995 	b.w	2684 <log_msg_put>
    335a:	bf00      	nop
    335c:	0002fcf4 	.word	0x0002fcf4

00003360 <msg_out>:
{
    3360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (panic_mode) {
    3364:	4b41      	ldr	r3, [pc, #260]	; (346c <msg_out+0x10c>)
    3366:	681b      	ldr	r3, [r3, #0]
{
    3368:	4680      	mov	r8, r0
    336a:	4689      	mov	r9, r1
	if (panic_mode) {
    336c:	b953      	cbnz	r3, 3384 <msg_out+0x24>
    336e:	4e40      	ldr	r6, [pc, #256]	; (3470 <msg_out+0x110>)
	if (line_pos < line_buf + sizeof(line_buf) - 1) {
    3370:	f8df a110 	ldr.w	sl, [pc, #272]	; 3484 <msg_out+0x124>
    3374:	4605      	mov	r5, r0
	for (pos = data; pos < data + length; pos++) {
    3376:	eb08 0309 	add.w	r3, r8, r9
    337a:	429d      	cmp	r5, r3
    337c:	d310      	bcc.n	33a0 <msg_out+0x40>
	return (int) (pos - data);
    337e:	eba5 0008 	sub.w	r0, r5, r8
    3382:	e00b      	b.n	339c <msg_out+0x3c>
	written = SEGGER_RTT_WriteNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER, data,
    3384:	460a      	mov	r2, r1
    3386:	4601      	mov	r1, r0
    3388:	2000      	movs	r0, #0
    338a:	f7fe fd7d 	bl	1e88 <SEGGER_RTT_WriteNoLock>
    338e:	4605      	mov	r5, r0

static void log_backend_rtt_flush(void)
{
	while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER)) {
    3390:	2000      	movs	r0, #0
    3392:	f7fe fdad 	bl	1ef0 <SEGGER_RTT_HasDataUp>
    3396:	2800      	cmp	r0, #0
    3398:	d1fa      	bne.n	3390 <msg_out+0x30>
	return written;
    339a:	4628      	mov	r0, r5
}
    339c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (line_out(*pos)) {
    33a0:	f815 3b01 	ldrb.w	r3, [r5], #1
    33a4:	6832      	ldr	r2, [r6, #0]
	if (data == '\r') {
    33a6:	2b0d      	cmp	r3, #13
    33a8:	d15a      	bne.n	3460 <msg_out+0x100>
	if (drop_cnt > 0 && !drop_warn) {
    33aa:	4f32      	ldr	r7, [pc, #200]	; (3474 <msg_out+0x114>)
	*line_pos = '\r';
    33ac:	7013      	strb	r3, [r2, #0]
	if (drop_cnt > 0 && !drop_warn) {
    33ae:	683b      	ldr	r3, [r7, #0]
    33b0:	4c31      	ldr	r4, [pc, #196]	; (3478 <msg_out+0x118>)
    33b2:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 3488 <msg_out+0x128>
    33b6:	2b00      	cmp	r3, #0
    33b8:	dd13      	ble.n	33e2 <msg_out+0x82>
    33ba:	f8db 3000 	ldr.w	r3, [fp]
    33be:	b983      	cbnz	r3, 33e2 <msg_out+0x82>
		memmove(line_buf + DROP_MSG_LEN, line_buf,
    33c0:	1b12      	subs	r2, r2, r4
    33c2:	4621      	mov	r1, r4
    33c4:	f104 0017 	add.w	r0, r4, #23
    33c8:	f003 fc47 	bl	6c5a <memmove>
		memcpy(line_buf, drop_msg, DROP_MSG_LEN);
    33cc:	2217      	movs	r2, #23
    33ce:	492b      	ldr	r1, [pc, #172]	; (347c <msg_out+0x11c>)
    33d0:	4620      	mov	r0, r4
    33d2:	f003 fc59 	bl	6c88 <memcpy>
		line_pos += DROP_MSG_LEN;
    33d6:	6833      	ldr	r3, [r6, #0]
    33d8:	3317      	adds	r3, #23
    33da:	6033      	str	r3, [r6, #0]
		drop_warn = 1;
    33dc:	2301      	movs	r3, #1
    33de:	f8cb 3000 	str.w	r3, [fp]
	if (drop_warn) {
    33e2:	f8db 3000 	ldr.w	r3, [fp]
    33e6:	b163      	cbz	r3, 3402 <msg_out+0xa2>
		int cnt = min(drop_cnt, DROP_MAX);
    33e8:	683b      	ldr	r3, [r7, #0]
    33ea:	2b63      	cmp	r3, #99	; 0x63
    33ec:	461a      	mov	r2, r3
    33ee:	bfa8      	it	ge
    33f0:	2263      	movge	r2, #99	; 0x63
		if (cnt < 10) {
    33f2:	2b09      	cmp	r3, #9
    33f4:	dc23      	bgt.n	343e <msg_out+0xde>
			line_buf[DROP_MSG_LEN - 2] = ' ';
    33f6:	2120      	movs	r1, #32
			line_buf[DROP_MSG_LEN - 3] = (u8_t) ('0' + cnt);
    33f8:	f102 0330 	add.w	r3, r2, #48	; 0x30
			line_buf[DROP_MSG_LEN - 2] = ' ';
    33fc:	7561      	strb	r1, [r4, #21]
			line_buf[DROP_MSG_LEN - 3] = (u8_t) ('0' + cnt);
    33fe:	7523      	strb	r3, [r4, #20]
			line_buf[DROP_MSG_LEN - 4] = ' ';
    3400:	74e1      	strb	r1, [r4, #19]
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    3402:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3406:	481e      	ldr	r0, [pc, #120]	; (3480 <msg_out+0x120>)
    3408:	f02a fb22 	bl	2da50 <_impl_k_mutex_lock>
					     line_buf, line_pos - line_buf + 1);
    340c:	6832      	ldr	r2, [r6, #0]
	int ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    340e:	491a      	ldr	r1, [pc, #104]	; (3478 <msg_out+0x118>)
					     line_buf, line_pos - line_buf + 1);
    3410:	f1c4 0401 	rsb	r4, r4, #1
	int ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3414:	4422      	add	r2, r4
    3416:	2000      	movs	r0, #0
    3418:	f7fe fcee 	bl	1df8 <SEGGER_RTT_WriteSkipNoLock>
    341c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    341e:	4818      	ldr	r0, [pc, #96]	; (3480 <msg_out+0x120>)
    3420:	f02a fb78 	bl	2db14 <_impl_k_mutex_unlock>
	if (!ret) {
    3424:	b9bc      	cbnz	r4, 3456 <msg_out+0xf6>
		drop_cnt++;
    3426:	683b      	ldr	r3, [r7, #0]
    3428:	3301      	adds	r3, #1
    342a:	603b      	str	r3, [r7, #0]
		line_pos = drop_cnt > 0 ? line_buf + DROP_MSG_LEN : line_buf;
    342c:	4b12      	ldr	r3, [pc, #72]	; (3478 <msg_out+0x118>)
    342e:	6839      	ldr	r1, [r7, #0]
    3430:	f103 0217 	add.w	r2, r3, #23
    3434:	2900      	cmp	r1, #0
    3436:	bfc8      	it	gt
    3438:	4613      	movgt	r3, r2
    343a:	6033      	str	r3, [r6, #0]
    343c:	e79b      	b.n	3376 <msg_out+0x16>
			line_buf[DROP_MSG_LEN - 2] = (u8_t) ('0' + cnt % 10);
    343e:	230a      	movs	r3, #10
    3440:	fb92 f1f3 	sdiv	r1, r2, r3
    3444:	fb03 2311 	mls	r3, r3, r1, r2
    3448:	3330      	adds	r3, #48	; 0x30
    344a:	7563      	strb	r3, [r4, #21]
			line_buf[DROP_MSG_LEN - 3] = (u8_t) ('0' + cnt / 10);
    344c:	3130      	adds	r1, #48	; 0x30
			line_buf[DROP_MSG_LEN - 4] = '>';
    344e:	233e      	movs	r3, #62	; 0x3e
			line_buf[DROP_MSG_LEN - 3] = (u8_t) ('0' + cnt / 10);
    3450:	7521      	strb	r1, [r4, #20]
			line_buf[DROP_MSG_LEN - 4] = '>';
    3452:	74e3      	strb	r3, [r4, #19]
    3454:	e7d5      	b.n	3402 <msg_out+0xa2>
	drop_cnt = 0;
    3456:	2300      	movs	r3, #0
    3458:	603b      	str	r3, [r7, #0]
	drop_warn = 0;
    345a:	f8cb 3000 	str.w	r3, [fp]
    345e:	e7e5      	b.n	342c <msg_out+0xcc>
	if (line_pos < line_buf + sizeof(line_buf) - 1) {
    3460:	4552      	cmp	r2, sl
		*line_pos++ = data;
    3462:	bf3e      	ittt	cc
    3464:	1c51      	addcc	r1, r2, #1
    3466:	6031      	strcc	r1, [r6, #0]
    3468:	7013      	strbcc	r3, [r2, #0]
    346a:	e784      	b.n	3376 <msg_out+0x16>
    346c:	2000066c 	.word	0x2000066c
    3470:	20000660 	.word	0x20000660
    3474:	200005c0 	.word	0x200005c0
    3478:	200005c8 	.word	0x200005c8
    347c:	0002fd04 	.word	0x0002fd04
    3480:	2000e3e0 	.word	0x2000e3e0
    3484:	2000065e 	.word	0x2000065e
    3488:	200005c4 	.word	0x200005c4

0000348c <isspace>:
	return c == ' ' || ((unsigned)c-'\t') < 5;
    348c:	2820      	cmp	r0, #32
    348e:	d005      	beq.n	349c <isspace+0x10>
    3490:	3809      	subs	r0, #9
    3492:	2804      	cmp	r0, #4
    3494:	bf8c      	ite	hi
    3496:	2000      	movhi	r0, #0
    3498:	2001      	movls	r0, #1
    349a:	4770      	bx	lr
    349c:	2001      	movs	r0, #1
}
    349e:	4770      	bx	lr

000034a0 <shell_raw_fprintf>:
#define SHELL_DEFAULT_TERMINAL_WIDTH	(80u) /* Default PuTTY width. */
#define SHELL_DEFAULT_TERMINAL_HEIGHT	(24u) /* Default PuTTY height. */

static inline void shell_raw_fprintf(const struct shell_fprintf *const ctx,
				     const char *fmt, ...)
{
    34a0:	b40e      	push	{r1, r2, r3}
    34a2:	b503      	push	{r0, r1, lr}
    34a4:	aa03      	add	r2, sp, #12
    34a6:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;

	va_start(args, fmt);
    34aa:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    34ac:	f001 f82c 	bl	4508 <shell_fprintf_fmt>
	va_end(args);
}
    34b0:	b002      	add	sp, #8
    34b2:	f85d eb04 	ldr.w	lr, [sp], #4
    34b6:	b003      	add	sp, #12
    34b8:	4770      	bx	lr

000034ba <shell_strlen>:
void shell_multiline_data_calc(struct shell_multiline_cons *cons,
				   u16_t buff_pos, u16_t buff_len);

static inline size_t shell_strlen(const char *str)
{
	return str == NULL ? 0 : strlen(str);
    34ba:	b108      	cbz	r0, 34c0 <shell_strlen+0x6>
    34bc:	f003 bb8e 	b.w	6bdc <strlen>
}
    34c0:	4770      	bx	lr
	...

000034c4 <cmd_get>:
 *			stored.
 */
static void cmd_get(const struct shell_cmd_entry *command, size_t lvl,
		    size_t idx, const struct shell_static_entry **entry,
		    struct shell_static_entry *d_entry)
{
    34c4:	b570      	push	{r4, r5, r6, lr}
    34c6:	9c04      	ldr	r4, [sp, #16]
    34c8:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(entry != NULL);
	__ASSERT_NO_MSG(d_entry != NULL);

	if (lvl == SHELL_CMD_ROOT_LVL) {
    34ca:	b961      	cbnz	r1, 34e6 <cmd_get+0x22>
	return ((u8_t *)__shell_root_cmds_end -
    34cc:	4b10      	ldr	r3, [pc, #64]	; (3510 <cmd_get+0x4c>)
    34ce:	4911      	ldr	r1, [pc, #68]	; (3514 <cmd_get+0x50>)
    34d0:	1ac9      	subs	r1, r1, r3
		if (idx < shell_root_cmd_count()) {
    34d2:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
    34d6:	d204      	bcs.n	34e2 <cmd_get+0x1e>
			const struct shell_cmd_entry *cmd;

			cmd = shell_root_cmd_get(idx);
			*entry = cmd->u.entry;
    34d8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    34dc:	6853      	ldr	r3, [r2, #4]

	if (command->is_dynamic) {
		command->u.dynamic_get(idx, d_entry);
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
	} else {
		*entry = (command->u.entry[idx].syntax != NULL) ?
    34de:	602b      	str	r3, [r5, #0]
    34e0:	e00e      	b.n	3500 <cmd_get+0x3c>
			*entry = NULL;
    34e2:	2300      	movs	r3, #0
    34e4:	e7fb      	b.n	34de <cmd_get+0x1a>
	if (command == NULL) {
    34e6:	2800      	cmp	r0, #0
    34e8:	d0fb      	beq.n	34e2 <cmd_get+0x1e>
	if (command->is_dynamic) {
    34ea:	7803      	ldrb	r3, [r0, #0]
    34ec:	6846      	ldr	r6, [r0, #4]
    34ee:	b143      	cbz	r3, 3502 <cmd_get+0x3e>
		command->u.dynamic_get(idx, d_entry);
    34f0:	4621      	mov	r1, r4
    34f2:	4610      	mov	r0, r2
    34f4:	47b0      	blx	r6
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
    34f6:	6823      	ldr	r3, [r4, #0]
    34f8:	2b00      	cmp	r3, #0
    34fa:	bf08      	it	eq
    34fc:	2400      	moveq	r4, #0
    34fe:	602c      	str	r4, [r5, #0]
				&command->u.entry[idx] : NULL;
	}
}
    3500:	bd70      	pop	{r4, r5, r6, pc}
		*entry = (command->u.entry[idx].syntax != NULL) ?
    3502:	0112      	lsls	r2, r2, #4
    3504:	18b3      	adds	r3, r6, r2
				&command->u.entry[idx] : NULL;
    3506:	58b2      	ldr	r2, [r6, r2]
    3508:	2a00      	cmp	r2, #0
    350a:	bf08      	it	eq
    350c:	2300      	moveq	r3, #0
    350e:	e7e6      	b.n	34de <cmd_get+0x1a>
    3510:	0002f100 	.word	0x0002f100
    3514:	0002f138 	.word	0x0002f138

00003518 <cursor_next_line_move.isra.14>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void cursor_next_line_move(const struct shell *shell)
{
	shell_raw_fprintf(shell->fprintf_ctx, "\r\n");
    3518:	4901      	ldr	r1, [pc, #4]	; (3520 <cursor_next_line_move.isra.14+0x8>)
    351a:	f7ff bfc1 	b.w	34a0 <shell_raw_fprintf>
    351e:	bf00      	nop
    3520:	0002f8da 	.word	0x0002f8da

00003524 <vt100_color_set>:

static void vt100_color_set(const struct shell *shell,
			    enum shell_vt100_color color)
{

	if (shell->ctx->vt100_ctx.col.col == color) {
    3524:	6883      	ldr	r3, [r0, #8]
{
    3526:	b507      	push	{r0, r1, r2, lr}
	if (shell->ctx->vt100_ctx.col.col == color) {
    3528:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    352c:	428a      	cmp	r2, r1
    352e:	d012      	beq.n	3556 <vt100_color_set+0x32>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
    3530:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    3534:	6940      	ldr	r0, [r0, #20]

	if (color != SHELL_NORMAL) {
    3536:	b189      	cbz	r1, 355c <vt100_color_set+0x38>

		u8_t cmd[] = SHELL_VT100_COLOR(color - 1);
    3538:	4b09      	ldr	r3, [pc, #36]	; (3560 <vt100_color_set+0x3c>)
    353a:	9300      	str	r3, [sp, #0]
    353c:	2333      	movs	r3, #51	; 0x33
    353e:	f88d 3004 	strb.w	r3, [sp, #4]
    3542:	312f      	adds	r1, #47	; 0x2f
    3544:	236d      	movs	r3, #109	; 0x6d
    3546:	f88d 1005 	strb.w	r1, [sp, #5]
    354a:	f8ad 3006 	strh.w	r3, [sp, #6]

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    354e:	466a      	mov	r2, sp
	} else {
		static const u8_t cmd[] = SHELL_VT100_MODESOFF;

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    3550:	4904      	ldr	r1, [pc, #16]	; (3564 <vt100_color_set+0x40>)
    3552:	f7ff ffa5 	bl	34a0 <shell_raw_fprintf>
	}
}
    3556:	b003      	add	sp, #12
    3558:	f85d fb04 	ldr.w	pc, [sp], #4
		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    355c:	4a02      	ldr	r2, [pc, #8]	; (3568 <vt100_color_set+0x44>)
    355e:	e7f7      	b.n	3550 <vt100_color_set+0x2c>
    3560:	3b315b1b 	.word	0x3b315b1b
    3564:	0002fdfc 	.word	0x0002fdfc
    3568:	0002fd30 	.word	0x0002fd30

0000356c <shell_transport_evt_handler>:
	return ret_val;
}

static void shell_transport_evt_handler(enum shell_transport_evt evt_type,
				      void *context)
{
    356c:	688b      	ldr	r3, [r1, #8]
	struct shell *shell = (struct shell *)context;
	struct k_poll_signal *signal;

	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
    356e:	b920      	cbnz	r0, 357a <shell_transport_evt_handler+0xe>
    3570:	f503 7014 	add.w	r0, r3, #592	; 0x250

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result)
    3574:	2100      	movs	r1, #0
    3576:	f02b bc37 	b.w	2ede8 <_impl_k_poll_signal>
    357a:	f503 7018 	add.w	r0, r3, #608	; 0x260
    357e:	e7f9      	b.n	3574 <shell_transport_evt_handler+0x8>

00003580 <shell_write>:
{
    3580:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3584:	4606      	mov	r6, r0
    3586:	460f      	mov	r7, r1
    3588:	4614      	mov	r4, r2
	size_t offset = 0;
    358a:	2500      	movs	r5, #0
	while (length) {
    358c:	b914      	cbnz	r4, 3594 <shell_write+0x14>
}
    358e:	b002      	add	sp, #8
    3590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
    3594:	6870      	ldr	r0, [r6, #4]
    3596:	6803      	ldr	r3, [r0, #0]
    3598:	4622      	mov	r2, r4
    359a:	f8d3 800c 	ldr.w	r8, [r3, #12]
    359e:	1979      	adds	r1, r7, r5
    35a0:	ab01      	add	r3, sp, #4
    35a2:	47c0      	blx	r8
		offset += tmp_cnt;
    35a4:	9b01      	ldr	r3, [sp, #4]
    35a6:	441d      	add	r5, r3
		length -= tmp_cnt;
    35a8:	1ae4      	subs	r4, r4, r3
		if (tmp_cnt == 0 &&
    35aa:	2b00      	cmp	r3, #0
    35ac:	d1ee      	bne.n	358c <shell_write+0xc>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
    35ae:	68b0      	ldr	r0, [r6, #8]
		if (tmp_cnt == 0 &&
    35b0:	7803      	ldrb	r3, [r0, #0]
    35b2:	2b03      	cmp	r3, #3
    35b4:	d0ea      	beq.n	358c <shell_write+0xc>
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    35b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    35ba:	2101      	movs	r1, #1
    35bc:	f500 7029 	add.w	r0, r0, #676	; 0x2a4
    35c0:	f02b fb76 	bl	2ecb0 <_impl_k_poll>
    35c4:	e7e2      	b.n	358c <shell_write+0xc>

000035c6 <formatted_text_print.constprop.28>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
    35c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    35ca:	4605      	mov	r5, r0
    35cc:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
    35ce:	460e      	mov	r6, r1
    35d0:	2900      	cmp	r1, #0
    35d2:	d061      	beq.n	3698 <formatted_text_print.constprop.28+0xd2>
    35d4:	460b      	mov	r3, r1
    35d6:	1b9f      	subs	r7, r3, r6
		shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
    35d8:	f813 0b01 	ldrb.w	r0, [r3], #1
    35dc:	f7ff ff56 	bl	348c <isspace>
    35e0:	2800      	cmp	r0, #0
    35e2:	d1f8      	bne.n	35d6 <formatted_text_print.constprop.28+0x10>
	}

	while (true) {
		size_t idx = 0;

		length = shell_strlen(str) - offset;
    35e4:	4630      	mov	r0, r6
    35e6:	f7ff ff68 	bl	34ba <shell_strlen>

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    35ea:	68ab      	ldr	r3, [r5, #8]
    35ec:	8bda      	ldrh	r2, [r3, #30]
		length = shell_strlen(str) - offset;
    35ee:	1bc0      	subs	r0, r0, r7
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    35f0:	eba2 0308 	sub.w	r3, r2, r8
		if (length <=
    35f4:	4298      	cmp	r0, r3
			for (idx = 0; idx < length; idx++) {
    35f6:	f04f 0400 	mov.w	r4, #0
    35fa:	eb06 0907 	add.w	r9, r6, r7
		if (length <=
    35fe:	d90f      	bls.n	3620 <formatted_text_print.constprop.28+0x5a>
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
    3600:	f819 1004 	ldrb.w	r1, [r9, r4]
    3604:	4608      	mov	r0, r1
    3606:	f7ff ff41 	bl	348c <isspace>
    360a:	b110      	cbz	r0, 3612 <formatted_text_print.constprop.28+0x4c>
				length = idx;
				if (*(str + offset + idx) == '\n') {
    360c:	290a      	cmp	r1, #10
    360e:	d02a      	beq.n	3666 <formatted_text_print.constprop.28+0xa0>
    3610:	4623      	mov	r3, r4
					break;
				}
			}

			if ((idx + terminal_offset) >=
    3612:	eb08 0104 	add.w	r1, r8, r4
    3616:	4291      	cmp	r1, r2
    3618:	d224      	bcs.n	3664 <formatted_text_print.constprop.28+0x9e>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
    361a:	3401      	adds	r4, #1
    361c:	e7f0      	b.n	3600 <formatted_text_print.constprop.28+0x3a>
			for (idx = 0; idx < length; idx++) {
    361e:	3401      	adds	r4, #1
    3620:	42a0      	cmp	r0, r4
    3622:	d016      	beq.n	3652 <formatted_text_print.constprop.28+0x8c>
				if (*(str + offset + idx) == '\n') {
    3624:	f819 3004 	ldrb.w	r3, [r9, r4]
    3628:	2b0a      	cmp	r3, #10
    362a:	eb07 0a04 	add.w	sl, r7, r4
    362e:	d1f6      	bne.n	361e <formatted_text_print.constprop.28+0x58>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    3630:	6968      	ldr	r0, [r5, #20]
    3632:	f000 ff5d 	bl	44f0 <shell_fprintf_buffer_flush>
					shell_write(shell, str + offset, idx);
    3636:	4649      	mov	r1, r9
    3638:	4622      	mov	r2, r4
    363a:	4628      	mov	r0, r5
    363c:	f7ff ffa0 	bl	3580 <shell_write>
					cursor_next_line_move(shell);
    3640:	6968      	ldr	r0, [r5, #20]
    3642:	f7ff ff69 	bl	3518 <cursor_next_line_move.isra.14>
					shell_op_cursor_horiz_move(shell,
    3646:	4641      	mov	r1, r8
    3648:	4628      	mov	r0, r5
					offset += idx + 1;
    364a:	f10a 0701 	add.w	r7, sl, #1
					shell_op_cursor_horiz_move(shell,
    364e:	f001 f8e7 	bl	4820 <shell_op_cursor_horiz_move>
			shell_raw_fprintf(shell->fprintf_ctx, str + offset);
    3652:	6968      	ldr	r0, [r5, #20]
    3654:	19f1      	adds	r1, r6, r7
    3656:	f7ff ff23 	bl	34a0 <shell_raw_fprintf>

		cursor_next_line_move(shell);
		shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	cursor_next_line_move(shell);
    365a:	6968      	ldr	r0, [r5, #20]
}
    365c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	cursor_next_line_move(shell);
    3660:	f7ff bf5a 	b.w	3518 <cursor_next_line_move.isra.14>
			if ((idx + terminal_offset) >=
    3664:	461c      	mov	r4, r3
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    3666:	6968      	ldr	r0, [r5, #20]
    3668:	f000 ff42 	bl	44f0 <shell_fprintf_buffer_flush>
		shell_write(shell, str + offset, length);
    366c:	4622      	mov	r2, r4
    366e:	4649      	mov	r1, r9
    3670:	4628      	mov	r0, r5
    3672:	f7ff ff85 	bl	3580 <shell_write>
		offset += length;
    3676:	443c      	add	r4, r7
    3678:	4434      	add	r4, r6
    367a:	1ba7      	subs	r7, r4, r6
		while (isspace((int) (*(str + offset)))) {
    367c:	f814 0b01 	ldrb.w	r0, [r4], #1
    3680:	f7ff ff04 	bl	348c <isspace>
    3684:	2800      	cmp	r0, #0
    3686:	d1f8      	bne.n	367a <formatted_text_print.constprop.28+0xb4>
		cursor_next_line_move(shell);
    3688:	6968      	ldr	r0, [r5, #20]
    368a:	f7ff ff45 	bl	3518 <cursor_next_line_move.isra.14>
		shell_op_cursor_horiz_move(shell, terminal_offset);
    368e:	4641      	mov	r1, r8
    3690:	4628      	mov	r0, r5
    3692:	f001 f8c5 	bl	4820 <shell_op_cursor_horiz_move>
    3696:	e7a5      	b.n	35e4 <formatted_text_print.constprop.28+0x1e>
}
    3698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000369c <shell_init>:
{
    369c:	b570      	push	{r4, r5, r6, lr}
    369e:	4604      	mov	r4, r0
	err = shell->iface->api->init(shell->iface, p_config,
    36a0:	6840      	ldr	r0, [r0, #4]
    36a2:	4a2a      	ldr	r2, [pc, #168]	; (374c <shell_init+0xb0>)
{
    36a4:	461e      	mov	r6, r3
	err = shell->iface->api->init(shell->iface, p_config,
    36a6:	6803      	ldr	r3, [r0, #0]
{
    36a8:	b086      	sub	sp, #24
	err = shell->iface->api->init(shell->iface, p_config,
    36aa:	681d      	ldr	r5, [r3, #0]
    36ac:	4623      	mov	r3, r4
    36ae:	47a8      	blx	r5
	if (err != 0) {
    36b0:	4605      	mov	r5, r0
    36b2:	2800      	cmp	r0, #0
    36b4:	d146      	bne.n	3744 <shell_init+0xa8>
	shell_history_init(shell->history);
    36b6:	68e0      	ldr	r0, [r4, #12]
    36b8:	f001 fe10 	bl	52dc <shell_history_init>
	memset(shell->ctx, 0, sizeof(*shell->ctx));
    36bc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
    36c0:	4629      	mov	r1, r5
    36c2:	68a0      	ldr	r0, [r4, #8]
    36c4:	f003 fb0d 	bl	6ce2 <memset>
		shell->ctx->internal.flags.mode_delete = 1;
    36c8:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->prompt);
    36ca:	6820      	ldr	r0, [r4, #0]
		shell->ctx->internal.flags.mode_delete = 1;
    36cc:	f893 224c 	ldrb.w	r2, [r3, #588]	; 0x24c
    36d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    36d4:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
		shell->stats->log_lost_cnt = 0;
    36d8:	69a2      	ldr	r2, [r4, #24]
    36da:	6015      	str	r5, [r2, #0]
	shell->ctx->internal.flags.tx_rdy = 1;
    36dc:	f893 224c 	ldrb.w	r2, [r3, #588]	; 0x24c
    36e0:	f042 0220 	orr.w	r2, r2, #32
    36e4:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
	shell->ctx->internal.flags.echo = CONFIG_SHELL_ECHO_STATUS;
    36e8:	f893 224c 	ldrb.w	r2, [r3, #588]	; 0x24c
    36ec:	f042 0208 	orr.w	r2, r2, #8
    36f0:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
	shell->ctx->state = SHELL_STATE_INITIALIZED;
    36f4:	2201      	movs	r2, #1
    36f6:	701a      	strb	r2, [r3, #0]
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    36f8:	4a15      	ldr	r2, [pc, #84]	; (3750 <shell_init+0xb4>)
    36fa:	61da      	str	r2, [r3, #28]
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->prompt);
    36fc:	f7ff fedd 	bl	34ba <shell_strlen>
    3700:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->internal.flags.use_colors =
    3702:	f893 224c 	ldrb.w	r2, [r3, #588]	; 0x24c
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->prompt);
    3706:	f883 0020 	strb.w	r0, [r3, #32]
	shell->ctx->internal.flags.use_colors =
    370a:	f042 0204 	orr.w	r2, r2, #4
    370e:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
	if (log_backend) {
    3712:	b126      	cbz	r6, 371e <shell_init+0x82>
			shell_log_backend_enable(shell->log_backend,
    3714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3716:	69e0      	ldr	r0, [r4, #28]
    3718:	4621      	mov	r1, r4
    371a:	f001 fe40 	bl	539e <shell_log_backend_enable>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    371e:	2300      	movs	r3, #0
    3720:	f06f 0201 	mvn.w	r2, #1
    3724:	e9cd 3202 	strd	r3, r2, [sp, #8]
    3728:	e9cd 3304 	strd	r3, r3, [sp, #16]
    372c:	e9cd 4300 	strd	r4, r3, [sp]
    3730:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
    3734:	4b07      	ldr	r3, [pc, #28]	; (3754 <shell_init+0xb8>)
    3736:	f44f 6200 	mov.w	r2, #2048	; 0x800
    373a:	f02a fe6f 	bl	2e41c <_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    373e:	4906      	ldr	r1, [pc, #24]	; (3758 <shell_init+0xbc>)
    3740:	f02a fe3a 	bl	2e3b8 <_impl_k_thread_name_set>
}
    3744:	4628      	mov	r0, r5
    3746:	b006      	add	sp, #24
    3748:	bd70      	pop	{r4, r5, r6, pc}
    374a:	bf00      	nop
    374c:	0000356d 	.word	0x0000356d
    3750:	00500018 	.word	0x00500018
    3754:	00004369 	.word	0x00004369
    3758:	00036e39 	.word	0x00036e39

0000375c <shell_print_stream>:
	shell_write((const struct shell *) user_ctx, data, data_len);
    375c:	f7ff bf10 	b.w	3580 <shell_write>

00003760 <shell_fprintf>:
{
    3760:	b40c      	push	{r2, r3}
    3762:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3764:	ab08      	add	r3, sp, #32
    3766:	460e      	mov	r6, r1
    3768:	f853 5b04 	ldr.w	r5, [r3], #4
	    shell->ctx->internal.flags.use_colors &&
    376c:	6881      	ldr	r1, [r0, #8]
	va_start(args, p_fmt);
    376e:	9301      	str	r3, [sp, #4]
	    shell->ctx->internal.flags.use_colors &&
    3770:	f8d1 324c 	ldr.w	r3, [r1, #588]	; 0x24c
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    3774:	075b      	lsls	r3, r3, #29
{
    3776:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    3778:	d538      	bpl.n	37ec <shell_fprintf+0x8c>
	    shell->ctx->internal.flags.use_colors &&
    377a:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
    377e:	42b3      	cmp	r3, r6
    3780:	d034      	beq.n	37ec <shell_fprintf+0x8c>
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
    3782:	2202      	movs	r2, #2
    3784:	3122      	adds	r1, #34	; 0x22
    3786:	4668      	mov	r0, sp
    3788:	f003 fa7e 	bl	6c88 <memcpy>
		vt100_color_set(shell, color);
    378c:	4631      	mov	r1, r6
    378e:	4620      	mov	r0, r4
    3790:	f7ff fec8 	bl	3524 <vt100_color_set>
		shell_fprintf_fmt(shell->fprintf_ctx, p_fmt, args);
    3794:	9a01      	ldr	r2, [sp, #4]
    3796:	6960      	ldr	r0, [r4, #20]
    3798:	4629      	mov	r1, r5
    379a:	f000 feb5 	bl	4508 <shell_fprintf_fmt>
	vt100_color_set(shell, color->col);
    379e:	f89d 1000 	ldrb.w	r1, [sp]
    37a2:	4620      	mov	r0, r4
    37a4:	f7ff febe 	bl	3524 <vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    37a8:	f89d 3001 	ldrb.w	r3, [sp, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    37ac:	b1cb      	cbz	r3, 37e2 <shell_fprintf+0x82>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    37ae:	68a2      	ldr	r2, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    37b0:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
    37b4:	4299      	cmp	r1, r3
    37b6:	d014      	beq.n	37e2 <shell_fprintf+0x82>
	u8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
    37b8:	f645 311b 	movw	r1, #23323	; 0x5b1b
    37bc:	f8ad 1008 	strh.w	r1, [sp, #8]
    37c0:	2134      	movs	r1, #52	; 0x34
    37c2:	f88d 100a 	strb.w	r1, [sp, #10]
    37c6:	f103 012f 	add.w	r1, r3, #47	; 0x2f
    37ca:	f88d 100b 	strb.w	r1, [sp, #11]
    37ce:	216d      	movs	r1, #109	; 0x6d
    37d0:	f8ad 100c 	strh.w	r1, [sp, #12]
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    37d4:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
	shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    37d8:	4907      	ldr	r1, [pc, #28]	; (37f8 <shell_fprintf+0x98>)
    37da:	6960      	ldr	r0, [r4, #20]
    37dc:	aa02      	add	r2, sp, #8
    37de:	f7ff fe5f 	bl	34a0 <shell_raw_fprintf>
}
    37e2:	b004      	add	sp, #16
    37e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    37e8:	b002      	add	sp, #8
    37ea:	4770      	bx	lr
		shell_fprintf_fmt(shell->fprintf_ctx, p_fmt, args);
    37ec:	9a01      	ldr	r2, [sp, #4]
    37ee:	6960      	ldr	r0, [r4, #20]
    37f0:	4629      	mov	r1, r5
    37f2:	f000 fe89 	bl	4508 <shell_fprintf_fmt>
}
    37f6:	e7f4      	b.n	37e2 <shell_fprintf+0x82>
    37f8:	0002fdfc 	.word	0x0002fdfc

000037fc <history_handle>:
{
    37fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (EXIT_HISTORY(shell)) {
    37fe:	6882      	ldr	r2, [r0, #8]
    3800:	f8d2 324c 	ldr.w	r3, [r2, #588]	; 0x24c
    3804:	061b      	lsls	r3, r3, #24
{
    3806:	4604      	mov	r4, r0
    3808:	460d      	mov	r5, r1
	if (EXIT_HISTORY(shell)) {
    380a:	d508      	bpl.n	381e <history_handle+0x22>
		EXIT_HISTORY_CLEAR(shell);
    380c:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    3810:	68c0      	ldr	r0, [r0, #12]
    3812:	f36f 13c7 	bfc	r3, #7, #1
    3816:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
		shell_history_mode_exit(shell->history);
    381a:	f001 fcec 	bl	51f6 <shell_history_mode_exit>
	if (!shell_history_active(shell->history)) {
    381e:	68e3      	ldr	r3, [r4, #12]
    3820:	68db      	ldr	r3, [r3, #12]
    3822:	b97b      	cbnz	r3, 3844 <history_handle+0x48>
		if (up) {
    3824:	2d00      	cmp	r5, #0
    3826:	d037      	beq.n	3898 <history_handle+0x9c>
			u16_t cmd_len = shell_strlen(shell->ctx->cmd_buff);
    3828:	68a0      	ldr	r0, [r4, #8]
    382a:	302c      	adds	r0, #44	; 0x2c
    382c:	f7ff fe45 	bl	34ba <shell_strlen>
			if (cmd_len) {
    3830:	b280      	uxth	r0, r0
    3832:	68a3      	ldr	r3, [r4, #8]
    3834:	2800      	cmp	r0, #0
    3836:	d031      	beq.n	389c <history_handle+0xa0>
				strcpy(shell->ctx->temp_buff,
    3838:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    383c:	f503 7096 	add.w	r0, r3, #300	; 0x12c
    3840:	f003 f994 	bl	6b6c <strcpy>
					 shell->ctx->cmd_buff, &len);
    3844:	68a2      	ldr	r2, [r4, #8]
	history_mode = shell_history_get(shell->history, up,
    3846:	68e0      	ldr	r0, [r4, #12]
    3848:	ab01      	add	r3, sp, #4
    384a:	322c      	adds	r2, #44	; 0x2c
    384c:	4629      	mov	r1, r5
    384e:	f001 fcd5 	bl	51fc <shell_history_get>
	if (!history_mode) {
    3852:	b950      	cbnz	r0, 386a <history_handle+0x6e>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
    3854:	68a0      	ldr	r0, [r4, #8]
    3856:	f500 7196 	add.w	r1, r0, #300	; 0x12c
    385a:	302c      	adds	r0, #44	; 0x2c
    385c:	f003 f986 	bl	6b6c <strcpy>
		len = shell_strlen(shell->ctx->cmd_buff);
    3860:	68a0      	ldr	r0, [r4, #8]
    3862:	302c      	adds	r0, #44	; 0x2c
    3864:	f7ff fe29 	bl	34ba <shell_strlen>
    3868:	9001      	str	r0, [sp, #4]
	shell_op_cursor_home_move(shell);
    386a:	4620      	mov	r0, r4
    386c:	f001 f914 	bl	4a98 <shell_op_cursor_home_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    3870:	4a0c      	ldr	r2, [pc, #48]	; (38a4 <history_handle+0xa8>)
    3872:	490d      	ldr	r1, [pc, #52]	; (38a8 <history_handle+0xac>)
    3874:	6960      	ldr	r0, [r4, #20]
    3876:	f7ff fe13 	bl	34a0 <shell_raw_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%s", shell->ctx->cmd_buff);
    387a:	68a3      	ldr	r3, [r4, #8]
    387c:	4a0a      	ldr	r2, [pc, #40]	; (38a8 <history_handle+0xac>)
    387e:	332c      	adds	r3, #44	; 0x2c
    3880:	4620      	mov	r0, r4
    3882:	2100      	movs	r1, #0
    3884:	f7ff ff6c 	bl	3760 <shell_fprintf>
	shell->ctx->cmd_buff_pos = len;
    3888:	68a3      	ldr	r3, [r4, #8]
    388a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    388e:	851a      	strh	r2, [r3, #40]	; 0x28
	shell->ctx->cmd_buff_len = len;
    3890:	84da      	strh	r2, [r3, #38]	; 0x26
	shell_op_cond_next_line(shell);
    3892:	4620      	mov	r0, r4
    3894:	f000 ffe8 	bl	4868 <shell_op_cond_next_line>
}
    3898:	b003      	add	sp, #12
    389a:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
    389c:	f883 012c 	strb.w	r0, [r3, #300]	; 0x12c
    38a0:	e7d0      	b.n	3844 <history_handle+0x48>
    38a2:	bf00      	nop
    38a4:	0002fd2c 	.word	0x0002fd2c
    38a8:	0002fdfc 	.word	0x0002fdfc

000038ac <help_item_print>:
			     field_width, false);
}

static void help_item_print(const struct shell *shell, const char *item_name,
			    u16_t item_name_width, const char *item_help)
{
    38ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	static const u8_t tabulator[] = "  ";
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    38b0:	4e15      	ldr	r6, [pc, #84]	; (3908 <help_item_print+0x5c>)
{
    38b2:	b085      	sub	sp, #20
    38b4:	4605      	mov	r5, r0
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    38b6:	4630      	mov	r0, r6
{
    38b8:	4688      	mov	r8, r1
    38ba:	4614      	mov	r4, r2
    38bc:	461f      	mov	r7, r3
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    38be:	f003 f98d 	bl	6bdc <strlen>
    38c2:	4681      	mov	r9, r0

	if (item_name == NULL) {
    38c4:	f1b8 0f00 	cmp.w	r8, #0
    38c8:	d01a      	beq.n	3900 <help_item_print+0x54>
		return;
	}

	if (!IS_ENABLED(CONFIG_NEWLIB_LIBC) && !IS_ENABLED(CONFIG_ARCH_POSIX)) {
		/* print option name */
		shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:",
    38ca:	e9cd 8601 	strd	r8, r6, [sp, #4]
    38ce:	9400      	str	r4, [sp, #0]
    38d0:	4633      	mov	r3, r6
    38d2:	4a0e      	ldr	r2, [pc, #56]	; (390c <help_item_print+0x60>)
    38d4:	2100      	movs	r1, #0
    38d6:	4628      	mov	r0, r5
    38d8:	f7ff ff42 	bl	3760 <shell_fprintf>
			shell_write(shell, &space, 1);
		}
		shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
	}

	if (item_help == NULL) {
    38dc:	b92f      	cbnz	r7, 38ea <help_item_print+0x3e>
		cursor_next_line_move(shell);
    38de:	6968      	ldr	r0, [r5, #20]
		return;
	}
	/* print option help */
	formatted_text_print(shell, item_help, offset, false);
}
    38e0:	b005      	add	sp, #20
    38e2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		cursor_next_line_move(shell);
    38e6:	f7ff be17 	b.w	3518 <cursor_next_line_move.isra.14>
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    38ea:	1c62      	adds	r2, r4, #1
    38ec:	eb02 0249 	add.w	r2, r2, r9, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    38f0:	b292      	uxth	r2, r2
    38f2:	4639      	mov	r1, r7
    38f4:	4628      	mov	r0, r5
}
    38f6:	b005      	add	sp, #20
    38f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	formatted_text_print(shell, item_help, offset, false);
    38fc:	f7ff be63 	b.w	35c6 <formatted_text_print.constprop.28>
}
    3900:	b005      	add	sp, #20
    3902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3906:	bf00      	nop
    3908:	0002fe03 	.word	0x0002fe03
    390c:	0002fd41 	.word	0x0002fd41

00003910 <shell_state_set.constprop.31>:
	shell->ctx->state = state;
    3910:	6883      	ldr	r3, [r0, #8]
    3912:	2202      	movs	r2, #2
    3914:	701a      	strb	r2, [r3, #0]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    3916:	2200      	movs	r2, #0
    3918:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	shell->ctx->cmd_buff_pos = 0;
    391c:	851a      	strh	r2, [r3, #40]	; 0x28
	shell->ctx->cmd_buff_len = 0;
    391e:	84da      	strh	r2, [r3, #38]	; 0x26
		shell_fprintf(shell, SHELL_INFO, "%s", shell->prompt);
    3920:	2103      	movs	r1, #3
    3922:	6803      	ldr	r3, [r0, #0]
    3924:	4a01      	ldr	r2, [pc, #4]	; (392c <shell_state_set.constprop.31+0x1c>)
    3926:	f7ff bf1b 	b.w	3760 <shell_fprintf>
    392a:	bf00      	nop
    392c:	0002fdfc 	.word	0x0002fdfc

00003930 <shell_start>:
{
    3930:	b538      	push	{r3, r4, r5, lr}
	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
    3932:	6883      	ldr	r3, [r0, #8]
    3934:	781b      	ldrb	r3, [r3, #0]
    3936:	2b01      	cmp	r3, #1
{
    3938:	4604      	mov	r4, r0
	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
    393a:	d10f      	bne.n	395c <shell_start+0x2c>
	err = shell->iface->api->enable(shell->iface, false);
    393c:	6840      	ldr	r0, [r0, #4]
    393e:	6803      	ldr	r3, [r0, #0]
    3940:	2100      	movs	r1, #0
    3942:	689b      	ldr	r3, [r3, #8]
    3944:	4798      	blx	r3
	if (err != 0) {
    3946:	4605      	mov	r5, r0
    3948:	b930      	cbnz	r0, 3958 <shell_start+0x28>
	shell_raw_fprintf(shell->fprintf_ctx, "\r\n\n");
    394a:	6960      	ldr	r0, [r4, #20]
    394c:	4905      	ldr	r1, [pc, #20]	; (3964 <shell_start+0x34>)
    394e:	f7ff fda7 	bl	34a0 <shell_raw_fprintf>
	shell_state_set(shell, SHELL_STATE_ACTIVE);
    3952:	4620      	mov	r0, r4
    3954:	f7ff ffdc 	bl	3910 <shell_state_set.constprop.31>
}
    3958:	4628      	mov	r0, r5
    395a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
    395c:	f06f 0522 	mvn.w	r5, #34	; 0x22
    3960:	e7fa      	b.n	3958 <shell_start+0x28>
    3962:	bf00      	nop
    3964:	0002fdff 	.word	0x0002fdff

00003968 <shell_help_print>:
	}
}

void shell_help_print(const struct shell *shell,
		      const struct shell_getopt_option *opt, size_t opt_len)
{
    3968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    396c:	6883      	ldr	r3, [r0, #8]
	return str == NULL ? 0 : strlen(str);
    396e:	4e63      	ldr	r6, [pc, #396]	; (3afc <shell_help_print+0x194>)
{
    3970:	b089      	sub	sp, #36	; 0x24
    3972:	4604      	mov	r4, r0
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    3974:	6858      	ldr	r0, [r3, #4]
{
    3976:	4689      	mov	r9, r1
    3978:	4617      	mov	r7, r2
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    397a:	f7ff fd9e 	bl	34ba <shell_strlen>
    397e:	4605      	mov	r5, r0
    3980:	4630      	mov	r0, r6
    3982:	f003 f92b 	bl	6bdc <strlen>
	shell_fprintf(shell, SHELL_NORMAL, "%s%s",
    3986:	68a3      	ldr	r3, [r4, #8]
    3988:	9600      	str	r6, [sp, #0]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    398a:	4405      	add	r5, r0
	shell_fprintf(shell, SHELL_NORMAL, "%s%s",
    398c:	685b      	ldr	r3, [r3, #4]
    398e:	4a5c      	ldr	r2, [pc, #368]	; (3b00 <shell_help_print+0x198>)
    3990:	2100      	movs	r1, #0
    3992:	4620      	mov	r0, r4
    3994:	f7ff fee4 	bl	3760 <shell_fprintf>
	formatted_text_print(shell, shell->ctx->active_cmd.help,
    3998:	68a3      	ldr	r3, [r4, #8]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    399a:	b2ad      	uxth	r5, r5
	formatted_text_print(shell, shell->ctx->active_cmd.help,
    399c:	462a      	mov	r2, r5
    399e:	6899      	ldr	r1, [r3, #8]
    39a0:	4620      	mov	r0, r4
    39a2:	f7ff fe10 	bl	35c6 <formatted_text_print.constprop.28>
    39a6:	4857      	ldr	r0, [pc, #348]	; (3b04 <shell_help_print+0x19c>)
    39a8:	f003 f918 	bl	6bdc <strlen>
	shell_fprintf(shell, SHELL_NORMAL, "Options:\r\n");
    39ac:	4a56      	ldr	r2, [pc, #344]	; (3b08 <shell_help_print+0x1a0>)
	u16_t longest_name = shell_strlen(help_opt);
    39ae:	fa1f f880 	uxth.w	r8, r0
	shell_fprintf(shell, SHELL_NORMAL, "Options:\r\n");
    39b2:	2100      	movs	r1, #0
    39b4:	4620      	mov	r0, r4
    39b6:	f7ff fed3 	bl	3760 <shell_fprintf>
	if ((opt == NULL) || (opt_cnt == 0)) {
    39ba:	f1b9 0f00 	cmp.w	r9, #0
    39be:	d041      	beq.n	3a44 <shell_help_print+0xdc>
    39c0:	2f00      	cmp	r7, #0
    39c2:	d03f      	beq.n	3a44 <shell_help_print+0xdc>
    39c4:	230c      	movs	r3, #12
    39c6:	435f      	muls	r7, r3
    39c8:	18fb      	adds	r3, r7, r3
    39ca:	464e      	mov	r6, r9
    39cc:	eb09 0a03 	add.w	sl, r9, r3
    39d0:	46cb      	mov	fp, r9
    39d2:	f10b 0b0c 	add.w	fp, fp, #12
	for (size_t i = 0; i < opt_cnt; ++i) {
    39d6:	45da      	cmp	sl, fp
    39d8:	d170      	bne.n	3abc <shell_help_print+0x154>
	help_item_print(shell, help_opt, longest_name, "Show command help.");
    39da:	4b4c      	ldr	r3, [pc, #304]	; (3b0c <shell_help_print+0x1a4>)
    39dc:	4949      	ldr	r1, [pc, #292]	; (3b04 <shell_help_print+0x19c>)
				strcat(shell->ctx->temp_buff, opt_sep);
    39de:	4d4c      	ldr	r5, [pc, #304]	; (3b10 <shell_help_print+0x1a8>)
	help_item_print(shell, help_opt, longest_name, "Show command help.");
    39e0:	4642      	mov	r2, r8
    39e2:	4620      	mov	r0, r4
    39e4:	f7ff ff62 	bl	38ac <help_item_print>
	memset(shell->ctx->temp_buff, 0, longest_name + 1);
    39e8:	68a0      	ldr	r0, [r4, #8]
    39ea:	f108 0201 	add.w	r2, r8, #1
    39ee:	2100      	movs	r1, #0
    39f0:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    39f4:	f003 f975 	bl	6ce2 <memset>
    39f8:	444f      	add	r7, r9
		if (opt[i].optname_short) {
    39fa:	6871      	ldr	r1, [r6, #4]
    39fc:	b121      	cbz	r1, 3a08 <shell_help_print+0xa0>
			strcpy(shell->ctx->temp_buff, opt[i].optname_short);
    39fe:	68a0      	ldr	r0, [r4, #8]
    3a00:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    3a04:	f003 f8b2 	bl	6b6c <strcpy>
		if (opt[i].optname) {
    3a08:	6831      	ldr	r1, [r6, #0]
    3a0a:	b179      	cbz	r1, 3a2c <shell_help_print+0xc4>
    3a0c:	68a3      	ldr	r3, [r4, #8]
    3a0e:	f503 7096 	add.w	r0, r3, #300	; 0x12c
			if (*shell->ctx->temp_buff) {
    3a12:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
    3a16:	2b00      	cmp	r3, #0
    3a18:	d064      	beq.n	3ae4 <shell_help_print+0x17c>
				strcat(shell->ctx->temp_buff, opt_sep);
    3a1a:	4629      	mov	r1, r5
    3a1c:	f003 f902 	bl	6c24 <strcat>
				strcat(shell->ctx->temp_buff, opt[i].optname);
    3a20:	68a0      	ldr	r0, [r4, #8]
    3a22:	6831      	ldr	r1, [r6, #0]
    3a24:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    3a28:	f003 f8fc 	bl	6c24 <strcat>
		help_item_print(shell, shell->ctx->temp_buff, longest_name,
    3a2c:	68a1      	ldr	r1, [r4, #8]
    3a2e:	68b3      	ldr	r3, [r6, #8]
    3a30:	4642      	mov	r2, r8
    3a32:	f501 7196 	add.w	r1, r1, #300	; 0x12c
    3a36:	4620      	mov	r0, r4
    3a38:	360c      	adds	r6, #12
    3a3a:	f7ff ff37 	bl	38ac <help_item_print>
	for (size_t i = 0; i < opt_cnt; ++i) {
    3a3e:	42b7      	cmp	r7, r6
    3a40:	d1db      	bne.n	39fa <shell_help_print+0x92>
    3a42:	e005      	b.n	3a50 <shell_help_print+0xe8>
		help_item_print(shell, help_opt, longest_name,
    3a44:	4b31      	ldr	r3, [pc, #196]	; (3b0c <shell_help_print+0x1a4>)
    3a46:	492f      	ldr	r1, [pc, #188]	; (3b04 <shell_help_print+0x19c>)
    3a48:	4642      	mov	r2, r8
    3a4a:	4620      	mov	r0, r4
    3a4c:	f7ff ff2e 	bl	38ac <help_item_print>
	if (!shell->ctx->active_cmd.subcmd) {
    3a50:	68a3      	ldr	r3, [r4, #8]
    3a52:	68db      	ldr	r3, [r3, #12]
	const struct shell_static_entry *entry = NULL;
    3a54:	2500      	movs	r5, #0
    3a56:	9503      	str	r5, [sp, #12]
	if (!shell->ctx->active_cmd.subcmd) {
    3a58:	2b00      	cmp	r3, #0
    3a5a:	d04b      	beq.n	3af4 <shell_help_print+0x18c>
	u16_t longest_syntax = 0;
    3a5c:	462f      	mov	r7, r5
		cmd_get(shell->ctx->active_cmd.subcmd, !SHELL_CMD_ROOT_LVL,
    3a5e:	ae04      	add	r6, sp, #16
    3a60:	68a0      	ldr	r0, [r4, #8]
    3a62:	9600      	str	r6, [sp, #0]
    3a64:	ab03      	add	r3, sp, #12
    3a66:	462a      	mov	r2, r5
    3a68:	2101      	movs	r1, #1
    3a6a:	68c0      	ldr	r0, [r0, #12]
    3a6c:	f7ff fd2a 	bl	34c4 <cmd_get>
		if (!entry) {
    3a70:	9b03      	ldr	r3, [sp, #12]
		cmd_get(shell->ctx->active_cmd.subcmd, !SHELL_CMD_ROOT_LVL,
    3a72:	f105 0801 	add.w	r8, r5, #1
		if (!entry) {
    3a76:	2b00      	cmp	r3, #0
    3a78:	d039      	beq.n	3aee <shell_help_print+0x186>
		u16_t len = shell_strlen(entry->syntax);
    3a7a:	6818      	ldr	r0, [r3, #0]
    3a7c:	f7ff fd1d 	bl	34ba <shell_strlen>
		longest_syntax = longest_syntax > len ? longest_syntax : len;
    3a80:	b280      	uxth	r0, r0
    3a82:	4287      	cmp	r7, r0
    3a84:	bf38      	it	cc
    3a86:	4607      	movcc	r7, r0
	} while (cmd_idx != 0); /* too many commands */
    3a88:	3501      	adds	r5, #1
    3a8a:	d12e      	bne.n	3aea <shell_help_print+0x182>
	shell_fprintf(shell, SHELL_NORMAL, "Subcommands:\r\n");
    3a8c:	4a21      	ldr	r2, [pc, #132]	; (3b14 <shell_help_print+0x1ac>)
    3a8e:	2100      	movs	r1, #0
    3a90:	4620      	mov	r0, r4
    3a92:	f7ff fe65 	bl	3760 <shell_fprintf>
	cmd_idx = 0;
    3a96:	2200      	movs	r2, #0
		cmd_get(shell->ctx->active_cmd.subcmd, !SHELL_CMD_ROOT_LVL,
    3a98:	68a0      	ldr	r0, [r4, #8]
    3a9a:	9600      	str	r6, [sp, #0]
    3a9c:	2101      	movs	r1, #1
    3a9e:	ab03      	add	r3, sp, #12
    3aa0:	68c0      	ldr	r0, [r0, #12]
    3aa2:	1c55      	adds	r5, r2, #1
    3aa4:	f7ff fd0e 	bl	34c4 <cmd_get>
		if (entry == NULL) {
    3aa8:	9903      	ldr	r1, [sp, #12]
    3aaa:	b319      	cbz	r1, 3af4 <shell_help_print+0x18c>
		help_item_print(shell, entry->syntax, longest_syntax,
    3aac:	684b      	ldr	r3, [r1, #4]
    3aae:	6809      	ldr	r1, [r1, #0]
    3ab0:	463a      	mov	r2, r7
    3ab2:	4620      	mov	r0, r4
    3ab4:	f7ff fefa 	bl	38ac <help_item_print>
		cmd_get(shell->ctx->active_cmd.subcmd, !SHELL_CMD_ROOT_LVL,
    3ab8:	462a      	mov	r2, r5
    3aba:	e7ed      	b.n	3a98 <shell_help_print+0x130>
		u16_t len = shell_strlen(opt[i].optname_short) +
    3abc:	f85b 0c08 	ldr.w	r0, [fp, #-8]
    3ac0:	f7ff fcfb 	bl	34ba <shell_strlen>
    3ac4:	4605      	mov	r5, r0
						 shell_strlen(opt[i].optname) +
    3ac6:	f85b 0c0c 	ldr.w	r0, [fp, #-12]
    3aca:	f7ff fcf6 	bl	34ba <shell_strlen>
		u16_t len = shell_strlen(opt[i].optname_short) +
    3ace:	4405      	add	r5, r0
    3ad0:	480f      	ldr	r0, [pc, #60]	; (3b10 <shell_help_print+0x1a8>)
    3ad2:	f003 f883 	bl	6bdc <strlen>
    3ad6:	b2ad      	uxth	r5, r5
    3ad8:	4428      	add	r0, r5
		longest_name = len > longest_name ? len : longest_name;
    3ada:	b280      	uxth	r0, r0
    3adc:	4580      	cmp	r8, r0
    3ade:	bf38      	it	cc
    3ae0:	4680      	movcc	r8, r0
    3ae2:	e776      	b.n	39d2 <shell_help_print+0x6a>
				strcpy(shell->ctx->temp_buff, opt[i].optname);
    3ae4:	f003 f842 	bl	6b6c <strcpy>
    3ae8:	e7a0      	b.n	3a2c <shell_help_print+0xc4>
		cmd_get(shell->ctx->active_cmd.subcmd, !SHELL_CMD_ROOT_LVL,
    3aea:	4645      	mov	r5, r8
    3aec:	e7b8      	b.n	3a60 <shell_help_print+0xf8>
	if (cmd_idx == 1) {
    3aee:	f1b8 0f01 	cmp.w	r8, #1
    3af2:	d1cb      	bne.n	3a8c <shell_help_print+0x124>
	}

	help_cmd_print(shell);
	help_options_print(shell, opt, opt_len);
	help_subcmd_print(shell);
}
    3af4:	b009      	add	sp, #36	; 0x24
    3af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3afa:	bf00      	nop
    3afc:	0002fd3d 	.word	0x0002fd3d
    3b00:	0002fdf5 	.word	0x0002fdf5
    3b04:	0002fd4b 	.word	0x0002fd4b
    3b08:	0002fdc6 	.word	0x0002fdc6
    3b0c:	0002fdd1 	.word	0x0002fdd1
    3b10:	0002fd56 	.word	0x0002fd56
    3b14:	0002fde4 	.word	0x0002fde4

00003b18 <shell_execute>:
{
    3b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b1c:	b097      	sub	sp, #92	; 0x5c
    3b1e:	4604      	mov	r4, r0
	const struct shell_static_entry *p_static_entry = NULL;
    3b20:	2300      	movs	r3, #0
    3b22:	9303      	str	r3, [sp, #12]
	shell_op_cursor_end_move(shell);
    3b24:	f000 ffbe 	bl	4aa4 <shell_op_cursor_end_move>
	if (!shell_cursor_in_empty_line(shell)) {
    3b28:	4620      	mov	r0, r4
    3b2a:	f000 fe89 	bl	4840 <shell_cursor_in_empty_line>
    3b2e:	b910      	cbnz	r0, 3b36 <shell_execute+0x1e>
		cursor_next_line_move(shell);
    3b30:	6960      	ldr	r0, [r4, #20]
    3b32:	f7ff fcf1 	bl	3518 <cursor_next_line_move.isra.14>
	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
    3b36:	68a0      	ldr	r0, [r4, #8]
    3b38:	2210      	movs	r2, #16
    3b3a:	2100      	movs	r1, #0
    3b3c:	3004      	adds	r0, #4
    3b3e:	f003 f8d0 	bl	6ce2 <memset>
	shell_buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    3b42:	68a0      	ldr	r0, [r4, #8]
    3b44:	f100 0126 	add.w	r1, r0, #38	; 0x26
    3b48:	302c      	adds	r0, #44	; 0x2c
    3b4a:	f000 fe0b 	bl	4764 <shell_buffer_trim>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    3b4e:	68a1      	ldr	r1, [r4, #8]
	shell_history_put(shell->history, line, length);
    3b50:	68e0      	ldr	r0, [r4, #12]
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    3b52:	8cca      	ldrh	r2, [r1, #38]	; 0x26
    3b54:	850a      	strh	r2, [r1, #40]	; 0x28
	shell_history_put(shell->history, line, length);
    3b56:	312c      	adds	r1, #44	; 0x2c
    3b58:	f001 fb86 	bl	5268 <shell_history_put>
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
    3b5c:	68a2      	ldr	r2, [r4, #8]
    3b5e:	230c      	movs	r3, #12
    3b60:	322c      	adds	r2, #44	; 0x2c
    3b62:	a909      	add	r1, sp, #36	; 0x24
    3b64:	a804      	add	r0, sp, #16
    3b66:	f000 fd3d 	bl	45e4 <shell_make_argv>
	if (!argc) {
    3b6a:	9a04      	ldr	r2, [sp, #16]
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
    3b6c:	4603      	mov	r3, r0
	if (!argc) {
    3b6e:	b12a      	cbz	r2, 3b7c <shell_execute+0x64>
	if (quote != 0) {
    3b70:	b138      	cbz	r0, 3b82 <shell_execute+0x6a>
		shell_fprintf(shell, SHELL_ERROR, "not terminated: %c\r\n",
    3b72:	4a4d      	ldr	r2, [pc, #308]	; (3ca8 <shell_execute+0x190>)
    3b74:	2102      	movs	r1, #2
    3b76:	4620      	mov	r0, r4
    3b78:	f7ff fdf2 	bl	3760 <shell_fprintf>
		return -ENOEXEC;
    3b7c:	f06f 0507 	mvn.w	r5, #7
    3b80:	e06d      	b.n	3c5e <shell_execute+0x146>
	return ((u8_t *)__shell_root_cmds_end -
    3b82:	494a      	ldr	r1, [pc, #296]	; (3cac <shell_execute+0x194>)
    3b84:	4a4a      	ldr	r2, [pc, #296]	; (3cb0 <shell_execute+0x198>)
	p_cmd = root_cmd_find(argv[0]);
    3b86:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	return ((u8_t *)__shell_root_cmds_end -
    3b8a:	eba2 0801 	sub.w	r8, r2, r1
			(u8_t *)__shell_root_cmds_start)/
    3b8e:	ea4f 08d8 	mov.w	r8, r8, lsr #3
	for (size_t cmd_idx = 0; cmd_idx < cmd_count; ++cmd_idx) {
    3b92:	4606      	mov	r6, r0
    3b94:	468a      	mov	sl, r1
    3b96:	45b0      	cmp	r8, r6
    3b98:	d108      	bne.n	3bac <shell_execute+0x94>
		shell_fprintf(shell, SHELL_ERROR, "%s%s\r\n", argv[0],
    3b9a:	4b46      	ldr	r3, [pc, #280]	; (3cb4 <shell_execute+0x19c>)
    3b9c:	9300      	str	r3, [sp, #0]
    3b9e:	4a46      	ldr	r2, [pc, #280]	; (3cb8 <shell_execute+0x1a0>)
    3ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3ba2:	2102      	movs	r1, #2
    3ba4:	4620      	mov	r0, r4
    3ba6:	f7ff fddb 	bl	3760 <shell_fprintf>
    3baa:	e7e7      	b.n	3b7c <shell_execute+0x64>
		if (strcmp(syntax, cmd->u.entry->syntax) == 0) {
    3bac:	eb0a 03c6 	add.w	r3, sl, r6, lsl #3
    3bb0:	4648      	mov	r0, r9
    3bb2:	685f      	ldr	r7, [r3, #4]
    3bb4:	6839      	ldr	r1, [r7, #0]
    3bb6:	f003 f819 	bl	6bec <strcmp>
    3bba:	4605      	mov	r5, r0
    3bbc:	2800      	cmp	r0, #0
    3bbe:	d064      	beq.n	3c8a <shell_execute+0x172>
	for (size_t cmd_idx = 0; cmd_idx < cmd_count; ++cmd_idx) {
    3bc0:	3601      	adds	r6, #1
    3bc2:	e7e8      	b.n	3b96 <shell_execute+0x7e>
		    !strcmp(argv[cmd_lvl], "--help")) {
    3bc4:	493d      	ldr	r1, [pc, #244]	; (3cbc <shell_execute+0x1a4>)
    3bc6:	6838      	ldr	r0, [r7, #0]
    3bc8:	f003 f810 	bl	6bec <strcmp>
		if (!strcmp(argv[cmd_lvl], "-h") ||
    3bcc:	b378      	cbz	r0, 3c2e <shell_execute+0x116>
		cmd_get(p_cmd, cmd_lvl, cmd_idx++, &p_static_entry, &d_entry);
    3bce:	ab05      	add	r3, sp, #20
    3bd0:	9300      	str	r3, [sp, #0]
    3bd2:	4642      	mov	r2, r8
    3bd4:	ab03      	add	r3, sp, #12
    3bd6:	4631      	mov	r1, r6
    3bd8:	4650      	mov	r0, sl
    3bda:	f7ff fc73 	bl	34c4 <cmd_get>
		if ((cmd_idx == 0) || (p_static_entry == NULL)) {
    3bde:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    3be2:	d02b      	beq.n	3c3c <shell_execute+0x124>
    3be4:	9b03      	ldr	r3, [sp, #12]
    3be6:	b34b      	cbz	r3, 3c3c <shell_execute+0x124>
		if (strcmp(argv[cmd_lvl], p_static_entry->syntax) == 0) {
    3be8:	6819      	ldr	r1, [r3, #0]
    3bea:	6838      	ldr	r0, [r7, #0]
    3bec:	f002 fffe 	bl	6bec <strcmp>
    3bf0:	f108 0801 	add.w	r8, r8, #1
    3bf4:	b990      	cbnz	r0, 3c1c <shell_execute+0x104>
			if (p_static_entry->handler != NULL) {
    3bf6:	f8dd c00c 	ldr.w	ip, [sp, #12]
    3bfa:	f8dc 300c 	ldr.w	r3, [ip, #12]
    3bfe:	b13b      	cbz	r3, 3c10 <shell_execute+0xf8>
				shell->ctx->active_cmd = *p_static_entry;
    3c00:	68a3      	ldr	r3, [r4, #8]
    3c02:	f103 0e04 	add.w	lr, r3, #4
    3c06:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    3c0a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    3c0e:	46b1      	mov	r9, r6
			p_cmd = p_static_entry->subcmd;
    3c10:	f8dc a008 	ldr.w	sl, [ip, #8]
			cmd_lvl++;
    3c14:	3601      	adds	r6, #1
    3c16:	3704      	adds	r7, #4
	cmd_lvl++;
    3c18:	f04f 0800 	mov.w	r8, #0
		if (cmd_lvl >= argc) {
    3c1c:	9b04      	ldr	r3, [sp, #16]
    3c1e:	429e      	cmp	r6, r3
    3c20:	d20c      	bcs.n	3c3c <shell_execute+0x124>
		if (!strcmp(argv[cmd_lvl], "-h") ||
    3c22:	4659      	mov	r1, fp
    3c24:	6838      	ldr	r0, [r7, #0]
    3c26:	f002 ffe1 	bl	6bec <strcmp>
    3c2a:	2800      	cmp	r0, #0
    3c2c:	d1ca      	bne.n	3bc4 <shell_execute+0xac>
			help_flag_set(shell);
    3c2e:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.show_help = 1;
    3c30:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    3c34:	f043 0302 	orr.w	r3, r3, #2
    3c38:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
	if (shell->ctx->active_cmd.handler == NULL) {
    3c3c:	68a2      	ldr	r2, [r4, #8]
    3c3e:	6913      	ldr	r3, [r2, #16]
    3c40:	b9cb      	cbnz	r3, 3c76 <shell_execute+0x15e>
		if (shell->ctx->active_cmd.help) {
    3c42:	6892      	ldr	r2, [r2, #8]
    3c44:	b17a      	cbz	r2, 3c66 <shell_execute+0x14e>
			shell_help_print(shell, NULL, 0);
    3c46:	461a      	mov	r2, r3
    3c48:	4619      	mov	r1, r3
    3c4a:	4620      	mov	r0, r4
    3c4c:	f7ff fe8c 	bl	3968 <shell_help_print>
	help_flag_clear(shell);
    3c50:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.show_help = 0;
    3c52:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    3c56:	f36f 0341 	bfc	r3, #1, #1
    3c5a:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
}
    3c5e:	4628      	mov	r0, r5
    3c60:	b017      	add	sp, #92	; 0x5c
    3c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			shell_fprintf(shell, SHELL_ERROR,
    3c66:	4a16      	ldr	r2, [pc, #88]	; (3cc0 <shell_execute+0x1a8>)
    3c68:	2102      	movs	r1, #2
    3c6a:	4620      	mov	r0, r4
    3c6c:	f7ff fd78 	bl	3760 <shell_fprintf>
			ret_val = -ENOEXEC;
    3c70:	f06f 0507 	mvn.w	r5, #7
    3c74:	e7ec      	b.n	3c50 <shell_execute+0x138>
		ret_val = shell->ctx->active_cmd.handler(shell,
    3c76:	9904      	ldr	r1, [sp, #16]
    3c78:	aa09      	add	r2, sp, #36	; 0x24
    3c7a:	eb02 0289 	add.w	r2, r2, r9, lsl #2
    3c7e:	eba1 0109 	sub.w	r1, r1, r9
    3c82:	4620      	mov	r0, r4
    3c84:	4798      	blx	r3
    3c86:	4605      	mov	r5, r0
    3c88:	e7e2      	b.n	3c50 <shell_execute+0x138>
	shell->ctx->active_cmd = *p_cmd->u.entry;
    3c8a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    3c8e:	68a6      	ldr	r6, [r4, #8]
		if (!strcmp(argv[cmd_lvl], "-h") ||
    3c90:	f8df b030 	ldr.w	fp, [pc, #48]	; 3cc4 <shell_execute+0x1ac>
	shell->ctx->active_cmd = *p_cmd->u.entry;
    3c94:	3604      	adds	r6, #4
    3c96:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	size_t cmd_with_handler_lvl = 0;
    3c9a:	46a9      	mov	r9, r5
	p_cmd = p_cmd->u.entry->subcmd;
    3c9c:	f8d7 a008 	ldr.w	sl, [r7, #8]
	cmd_lvl++;
    3ca0:	2601      	movs	r6, #1
    3ca2:	af0a      	add	r7, sp, #40	; 0x28
    3ca4:	e7b8      	b.n	3c18 <shell_execute+0x100>
    3ca6:	bf00      	nop
    3ca8:	0002fd74 	.word	0x0002fd74
    3cac:	0002f100 	.word	0x0002f100
    3cb0:	0002f138 	.word	0x0002f138
    3cb4:	0002fdb2 	.word	0x0002fdb2
    3cb8:	0002f898 	.word	0x0002f898
    3cbc:	0002fd8c 	.word	0x0002fd8c
    3cc0:	0002fd93 	.word	0x0002fd93
    3cc4:	0002fd89 	.word	0x0002fd89

00003cc8 <shell_process>:
{
    3cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3ccc:	6883      	ldr	r3, [r0, #8]
    3cce:	f3bf 8f5b 	dmb	ish
    3cd2:	b0a9      	sub	sp, #164	; 0xa4
    3cd4:	4604      	mov	r4, r0
    3cd6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
    3cda:	e853 2f00 	ldrex	r2, [r3]
    3cde:	f042 0210 	orr.w	r2, r2, #16
    3ce2:	e843 2100 	strex	r1, r2, [r3]
    3ce6:	2900      	cmp	r1, #0
    3ce8:	d1f7      	bne.n	3cda <shell_process+0x12>
    3cea:	f3bf 8f5b 	dmb	ish
	switch (shell->ctx->state) {
    3cee:	68a3      	ldr	r3, [r4, #8]
    3cf0:	781b      	ldrb	r3, [r3, #0]
    3cf2:	2b02      	cmp	r3, #2
    3cf4:	d173      	bne.n	3dde <shell_process+0x116>
	size_t count = 0;
    3cf6:	2300      	movs	r3, #0
    3cf8:	930b      	str	r3, [sp, #44]	; 0x2c
		(void)shell->iface->api->read(shell->iface, &data,
    3cfa:	6860      	ldr	r0, [r4, #4]
    3cfc:	6803      	ldr	r3, [r0, #0]
    3cfe:	2201      	movs	r2, #1
    3d00:	691d      	ldr	r5, [r3, #16]
    3d02:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    3d06:	ab0b      	add	r3, sp, #44	; 0x2c
    3d08:	47a8      	blx	r5
		if (count == 0) {
    3d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3d0c:	2b00      	cmp	r3, #0
    3d0e:	d066      	beq.n	3dde <shell_process+0x116>
		if (ascii_filter(data) != 0) {
    3d10:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
			-EINVAL : 0;
    3d14:	060a      	lsls	r2, r1, #24
    3d16:	d4f0      	bmi.n	3cfa <shell_process+0x32>
		switch (shell->ctx->receive_state) {
    3d18:	68a0      	ldr	r0, [r4, #8]
    3d1a:	7843      	ldrb	r3, [r0, #1]
    3d1c:	2b01      	cmp	r3, #1
    3d1e:	f000 82d8 	beq.w	42d2 <shell_process+0x60a>
    3d22:	d347      	bcc.n	3db4 <shell_process+0xec>
    3d24:	2b02      	cmp	r3, #2
    3d26:	f04f 0300 	mov.w	r3, #0
    3d2a:	f040 809f 	bne.w	3e6c <shell_process+0x1a4>
	shell->ctx->receive_state = state;
    3d2e:	7043      	strb	r3, [r0, #1]
	shell_raw_fprintf(shell->fprintf_ctx, "%c", ch);
}

static inline bool flag_echo_is_set(const struct shell *shell)
{
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    3d30:	f8d0 324c 	ldr.w	r3, [r0, #588]	; 0x24c
			if (!flag_echo_is_set(shell)) {
    3d34:	071a      	lsls	r2, r3, #28
    3d36:	d552      	bpl.n	3dde <shell_process+0x116>
			switch (data) {
    3d38:	3931      	subs	r1, #49	; 0x31
    3d3a:	291b      	cmp	r1, #27
    3d3c:	d8dd      	bhi.n	3cfa <shell_process+0x32>
    3d3e:	a301      	add	r3, pc, #4	; (adr r3, 3d44 <shell_process+0x7c>)
    3d40:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    3d44:	00004309 	.word	0x00004309
    3d48:	00004315 	.word	0x00004315
    3d4c:	00004333 	.word	0x00004333
    3d50:	000042fd 	.word	0x000042fd
    3d54:	00003cfb 	.word	0x00003cfb
    3d58:	00003cfb 	.word	0x00003cfb
    3d5c:	00003cfb 	.word	0x00003cfb
    3d60:	00003cfb 	.word	0x00003cfb
    3d64:	00003cfb 	.word	0x00003cfb
    3d68:	00003cfb 	.word	0x00003cfb
    3d6c:	00003cfb 	.word	0x00003cfb
    3d70:	00003cfb 	.word	0x00003cfb
    3d74:	00003cfb 	.word	0x00003cfb
    3d78:	00003cfb 	.word	0x00003cfb
    3d7c:	00003cfb 	.word	0x00003cfb
    3d80:	00003cfb 	.word	0x00003cfb
    3d84:	000042df 	.word	0x000042df
    3d88:	000042e9 	.word	0x000042e9
    3d8c:	000042ed 	.word	0x000042ed
    3d90:	000042f5 	.word	0x000042f5
    3d94:	00003cfb 	.word	0x00003cfb
    3d98:	00004301 	.word	0x00004301
    3d9c:	00003cfb 	.word	0x00003cfb
    3da0:	0000430d 	.word	0x0000430d
    3da4:	00003cfb 	.word	0x00003cfb
    3da8:	00003cfb 	.word	0x00003cfb
    3dac:	00003cfb 	.word	0x00003cfb
    3db0:	00004319 	.word	0x00004319
			if ((data == '\r') || (data == '\n')) {
    3db4:	290d      	cmp	r1, #13
    3db6:	d001      	beq.n	3dbc <shell_process+0xf4>
    3db8:	290a      	cmp	r1, #10
    3dba:	d129      	bne.n	3e10 <shell_process+0x148>
				if (!shell->ctx->cmd_buff_len) {
    3dbc:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
    3dbe:	bb1a      	cbnz	r2, 3e08 <shell_process+0x140>
	EXIT_HISTORY_CLEAR(shell);
    3dc0:	f890 324c 	ldrb.w	r3, [r0, #588]	; 0x24c
    3dc4:	f362 13c7 	bfi	r3, r2, #7, #1
    3dc8:	f880 324c 	strb.w	r3, [r0, #588]	; 0x24c
	shell_history_mode_exit(shell->history);
    3dcc:	68e0      	ldr	r0, [r4, #12]
    3dce:	f001 fa12 	bl	51f6 <shell_history_mode_exit>
					cursor_next_line_move(shell);
    3dd2:	6960      	ldr	r0, [r4, #20]
    3dd4:	f7ff fba0 	bl	3518 <cursor_next_line_move.isra.14>
				shell_state_set(shell, SHELL_STATE_ACTIVE);
    3dd8:	4620      	mov	r0, r4
    3dda:	f7ff fd99 	bl	3910 <shell_state_set.constprop.31>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    3dde:	6960      	ldr	r0, [r4, #20]
    3de0:	f000 fb86 	bl	44f0 <shell_fprintf_buffer_flush>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3de4:	68a3      	ldr	r3, [r4, #8]
    3de6:	f3bf 8f5b 	dmb	ish
    3dea:	f503 7313 	add.w	r3, r3, #588	; 0x24c
    3dee:	e853 2f00 	ldrex	r2, [r3]
    3df2:	f022 0210 	bic.w	r2, r2, #16
    3df6:	e843 2100 	strex	r1, r2, [r3]
    3dfa:	2900      	cmp	r1, #0
    3dfc:	d1f7      	bne.n	3dee <shell_process+0x126>
    3dfe:	f3bf 8f5b 	dmb	ish
}
    3e02:	b029      	add	sp, #164	; 0xa4
    3e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					(void)shell_execute(shell);
    3e08:	4620      	mov	r0, r4
    3e0a:	f7ff fe85 	bl	3b18 <shell_execute>
    3e0e:	e7e3      	b.n	3dd8 <shell_process+0x110>
			switch (data) {
    3e10:	2909      	cmp	r1, #9
    3e12:	d02d      	beq.n	3e70 <shell_process+0x1a8>
    3e14:	d811      	bhi.n	3e3a <shell_process+0x172>
    3e16:	2900      	cmp	r1, #0
    3e18:	f43f af6f 	beq.w	3cfa <shell_process+0x32>
    3e1c:	2908      	cmp	r1, #8
    3e1e:	f000 81e7 	beq.w	41f0 <shell_process+0x528>
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
    3e22:	f1a1 0320 	sub.w	r3, r1, #32
				if (isprint((int) data)) {
    3e26:	2b5e      	cmp	r3, #94	; 0x5e
    3e28:	f200 81f1 	bhi.w	420e <shell_process+0x546>
					EXIT_HISTORY_REQUEST(shell);
    3e2c:	f890 324c 	ldrb.w	r3, [r0, #588]	; 0x24c
    3e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3e34:	f880 324c 	strb.w	r3, [r0, #588]	; 0x24c
    3e38:	e104      	b.n	4044 <shell_process+0x37c>
			switch (data) {
    3e3a:	291b      	cmp	r1, #27
    3e3c:	d015      	beq.n	3e6a <shell_process+0x1a2>
    3e3e:	297f      	cmp	r1, #127	; 0x7f
    3e40:	d1ef      	bne.n	3e22 <shell_process+0x15a>
    3e42:	f8d0 324c 	ldr.w	r3, [r0, #588]	; 0x24c
				if (flag_echo_is_set(shell)) {
    3e46:	071d      	lsls	r5, r3, #28
    3e48:	f57f af57 	bpl.w	3cfa <shell_process+0x32>
					EXIT_HISTORY_REQUEST(shell);
    3e4c:	f890 324c 	ldrb.w	r3, [r0, #588]	; 0x24c
    3e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3e54:	f880 324c 	strb.w	r3, [r0, #588]	; 0x24c
	return shell->ctx->internal.flags.mode_delete == 1 ? true : false;
    3e58:	f8d0 324c 	ldr.w	r3, [r0, #588]	; 0x24c
					if (flag_delete_mode_set(shell)) {
    3e5c:	0658      	lsls	r0, r3, #25
    3e5e:	f100 81d2 	bmi.w	4206 <shell_process+0x53e>
						shell_op_char_delete(shell);
    3e62:	4620      	mov	r0, r4
    3e64:	f000 fe6d 	bl	4b42 <shell_op_char_delete>
    3e68:	e747      	b.n	3cfa <shell_process+0x32>
	shell->ctx->receive_state = state;
    3e6a:	2301      	movs	r3, #1
    3e6c:	7043      	strb	r3, [r0, #1]
    3e6e:	e744      	b.n	3cfa <shell_process+0x32>
    3e70:	f8d0 324c 	ldr.w	r3, [r0, #588]	; 0x24c
				if (flag_echo_is_set(shell)) {
    3e74:	071b      	lsls	r3, r3, #28
    3e76:	f57f af40 	bpl.w	3cfa <shell_process+0x32>
					EXIT_HISTORY_REQUEST(shell);
    3e7a:	f890 324c 	ldrb.w	r3, [r0, #588]	; 0x24c
    3e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3e82:	f880 324c 	strb.w	r3, [r0, #588]	; 0x24c
	if (compl_space == 0) {
    3e86:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    3e88:	2bff      	cmp	r3, #255	; 0xff
    3e8a:	f43f af36 	beq.w	3cfa <shell_process+0x32>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
    3e8e:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    3e90:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    3e94:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    3e98:	f002 fef6 	bl	6c88 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    3e9c:	68a2      	ldr	r2, [r4, #8]
    3e9e:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    3ea0:	4413      	add	r3, r2
    3ea2:	2100      	movs	r1, #0
	(void)shell_make_argv(argc, argv, shell->ctx->temp_buff,
    3ea4:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    3ea8:	f883 112c 	strb.w	r1, [r3, #300]	; 0x12c
	(void)shell_make_argv(argc, argv, shell->ctx->temp_buff,
    3eac:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    3eb0:	230c      	movs	r3, #12
    3eb2:	4641      	mov	r1, r8
    3eb4:	a80c      	add	r0, sp, #48	; 0x30
    3eb6:	f000 fb95 	bl	45e4 <shell_make_argv>
	int space = isspace((int)shell->ctx->cmd_buff[
    3eba:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
    3ebc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
	int space = isspace((int)shell->ctx->cmd_buff[
    3ebe:	4413      	add	r3, r2
    3ec0:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
    3ec4:	f7ff fae2 	bl	348c <isspace>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    3ec8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3eca:	2d00      	cmp	r5, #0
    3ecc:	f000 8239 	beq.w	4342 <shell_process+0x67a>
    3ed0:	b918      	cbnz	r0, 3eda <shell_process+0x212>
    3ed2:	2d01      	cmp	r5, #1
    3ed4:	f000 8238 	beq.w	4348 <shell_process+0x680>
	search_argc = space ? *argc : *argc - 1;
    3ed8:	3d01      	subs	r5, #1
	*match_arg = SHELL_CMD_ROOT_LVL;
    3eda:	2700      	movs	r7, #0
	const struct shell_cmd_entry *prev_cmd = NULL;
    3edc:	463e      	mov	r6, r7
		cmd_get(cmd, lvl, idx++, &entry, d_entry);
    3ede:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
	const struct shell_static_entry *entry = NULL;
    3ee2:	2300      	movs	r3, #0
		entry = find_cmd(prev_cmd, *match_arg, argv[*match_arg],
    3ee4:	f858 b027 	ldr.w	fp, [r8, r7, lsl #2]
	const struct shell_static_entry *entry = NULL;
    3ee8:	9317      	str	r3, [sp, #92]	; 0x5c
	size_t idx = 0;
    3eea:	461a      	mov	r2, r3
		cmd_get(cmd, lvl, idx++, &entry, d_entry);
    3eec:	ab17      	add	r3, sp, #92	; 0x5c
    3eee:	f8cd 9000 	str.w	r9, [sp]
    3ef2:	4639      	mov	r1, r7
    3ef4:	4630      	mov	r0, r6
    3ef6:	f102 0a01 	add.w	sl, r2, #1
    3efa:	f7ff fae3 	bl	34c4 <cmd_get>
		if (entry && (strcmp(cmd_str, entry->syntax) == 0)) {
    3efe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3f00:	2b00      	cmp	r3, #0
    3f02:	d04c      	beq.n	3f9e <shell_process+0x2d6>
    3f04:	6819      	ldr	r1, [r3, #0]
    3f06:	4658      	mov	r0, fp
    3f08:	f002 fe70 	bl	6bec <strcmp>
    3f0c:	2800      	cmp	r0, #0
    3f0e:	d146      	bne.n	3f9e <shell_process+0x2d6>
			return entry;
    3f10:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
		if (entry) {
    3f14:	f1ba 0f00 	cmp.w	sl, #0
    3f18:	f43f aeef 	beq.w	3cfa <shell_process+0x32>
			(*match_arg)++;
    3f1c:	3701      	adds	r7, #1
	while (*match_arg < argc) {
    3f1e:	42bd      	cmp	r5, r7
			prev_cmd = entry->subcmd;
    3f20:	f8da 6008 	ldr.w	r6, [sl, #8]
	while (*match_arg < argc) {
    3f24:	d1dd      	bne.n	3ee2 <shell_process+0x21a>
	find_completion_candidates(cmd, argv[arg_idx], &first, &cnt, &longest);
    3f26:	ab28      	add	r3, sp, #160	; 0xa0
    3f28:	eb03 0387 	add.w	r3, r3, r7, lsl #2
	*cnt = 0;
    3f2c:	f04f 0b00 	mov.w	fp, #0
	find_completion_candidates(cmd, argv[arg_idx], &first, &cnt, &longest);
    3f30:	f853 3c34 	ldr.w	r3, [r3, #-52]
    3f34:	9304      	str	r3, [sp, #16]
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
    3f36:	4618      	mov	r0, r3
    3f38:	f7ff fabf 	bl	34ba <shell_strlen>
	size_t idx = 0;
    3f3c:	465d      	mov	r5, fp
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
    3f3e:	4681      	mov	r9, r0
	*longest = 0;
    3f40:	f8cd b014 	str.w	fp, [sp, #20]
	bool found = false;
    3f44:	465e      	mov	r6, fp
		cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    3f46:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
    3f4a:	f1ba 0f00 	cmp.w	sl, #0
    3f4e:	d02b      	beq.n	3fa8 <shell_process+0x2e0>
    3f50:	f8da 0008 	ldr.w	r0, [sl, #8]
    3f54:	f8cd 8000 	str.w	r8, [sp]
    3f58:	f11a 0300 	adds.w	r3, sl, #0
    3f5c:	bf18      	it	ne
    3f5e:	2301      	movne	r3, #1
    3f60:	9302      	str	r3, [sp, #8]
    3f62:	462a      	mov	r2, r5
    3f64:	ab13      	add	r3, sp, #76	; 0x4c
    3f66:	9902      	ldr	r1, [sp, #8]
    3f68:	f7ff faac 	bl	34c4 <cmd_get>
		if (!candidate) {
    3f6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3f6e:	b1eb      	cbz	r3, 3fac <shell_process+0x2e4>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    3f70:	464a      	mov	r2, r9
    3f72:	9904      	ldr	r1, [sp, #16]
    3f74:	6818      	ldr	r0, [r3, #0]
    3f76:	f002 fe46 	bl	6c06 <strncmp>
		if (is_completion_candidate(candidate->syntax, incompl_cmd,
    3f7a:	b970      	cbnz	r0, 3f9a <shell_process+0x2d2>
			size_t slen = strlen(candidate->syntax);
    3f7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3f7e:	6818      	ldr	r0, [r3, #0]
    3f80:	f002 fe2c 	bl	6bdc <strlen>
			*longest = (slen > *longest) ? slen : *longest;
    3f84:	9b05      	ldr	r3, [sp, #20]
    3f86:	4283      	cmp	r3, r0
    3f88:	bf38      	it	cc
    3f8a:	4603      	movcc	r3, r0
    3f8c:	b29b      	uxth	r3, r3
    3f8e:	9305      	str	r3, [sp, #20]
			(*cnt)++;
    3f90:	f10b 0b01 	add.w	fp, fp, #1
			if (!found) {
    3f94:	b90e      	cbnz	r6, 3f9a <shell_process+0x2d2>
				*first_idx = idx;
    3f96:	9503      	str	r5, [sp, #12]
			found = true;
    3f98:	2601      	movs	r6, #1
		idx++;
    3f9a:	3501      	adds	r5, #1
    3f9c:	e7d5      	b.n	3f4a <shell_process+0x282>
	} while (entry);
    3f9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		cmd_get(cmd, lvl, idx++, &entry, d_entry);
    3fa0:	4652      	mov	r2, sl
	} while (entry);
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	d1a2      	bne.n	3eec <shell_process+0x224>
    3fa6:	e6a8      	b.n	3cfa <shell_process+0x32>
		cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    3fa8:	4650      	mov	r0, sl
    3faa:	e7d3      	b.n	3f54 <shell_process+0x28c>
	if (!cnt) {
    3fac:	f1bb 0f00 	cmp.w	fp, #0
    3fb0:	f43f aea3 	beq.w	3cfa <shell_process+0x32>
    3fb4:	aa28      	add	r2, sp, #160	; 0xa0
    3fb6:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	} else if (cnt == 1) {
    3fba:	f1bb 0f01 	cmp.w	fp, #1
    3fbe:	f852 6c34 	ldr.w	r6, [r2, #-52]
    3fc2:	d148      	bne.n	4056 <shell_process+0x38e>
	size_t arg_len = shell_strlen(arg);
    3fc4:	4630      	mov	r0, r6
    3fc6:	f7ff fa78 	bl	34ba <shell_strlen>
    3fca:	4605      	mov	r5, r0
	cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    3fcc:	f1ba 0f00 	cmp.w	sl, #0
    3fd0:	d035      	beq.n	403e <shell_process+0x376>
    3fd2:	f8da 0008 	ldr.w	r0, [sl, #8]
    3fd6:	68a3      	ldr	r3, [r4, #8]
    3fd8:	3304      	adds	r3, #4
    3fda:	9300      	str	r3, [sp, #0]
    3fdc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    3fe0:	ab17      	add	r3, sp, #92	; 0x5c
    3fe2:	f7ff fa6f 	bl	34c4 <cmd_get>
	cmd_len = shell_strlen(match->syntax);
    3fe6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3fe8:	6818      	ldr	r0, [r3, #0]
    3fea:	f7ff fa66 	bl	34ba <shell_strlen>
	if (cmd_len != arg_len) {
    3fee:	4285      	cmp	r5, r0
    3ff0:	d007      	beq.n	4002 <shell_process+0x33a>
					   match->syntax + arg_len,
    3ff2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		shell_op_completion_insert(shell,
    3ff4:	6819      	ldr	r1, [r3, #0]
    3ff6:	1b42      	subs	r2, r0, r5
    3ff8:	b292      	uxth	r2, r2
    3ffa:	4429      	add	r1, r5
    3ffc:	4620      	mov	r0, r4
    3ffe:	f000 fdcc 	bl	4b9a <shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    4002:	68a3      	ldr	r3, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
    4004:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
	if (!isspace((int) shell->ctx->cmd_buff[
    4006:	441a      	add	r2, r3
    4008:	f892 002c 	ldrb.w	r0, [r2, #44]	; 0x2c
    400c:	f7ff fa3e 	bl	348c <isspace>
    4010:	b9e0      	cbnz	r0, 404c <shell_process+0x384>
		if (shell->ctx->internal.flags.insert_mode) {
    4012:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
    4016:	07d7      	lsls	r7, r2, #31
    4018:	d513      	bpl.n	4042 <shell_process+0x37a>
			shell->ctx->internal.flags.insert_mode = 0;
    401a:	f893 224c 	ldrb.w	r2, [r3, #588]	; 0x24c
    401e:	f360 0200 	bfi	r2, r0, #0, #1
    4022:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
			shell_op_char_insert(shell, ' ');
    4026:	2120      	movs	r1, #32
    4028:	4620      	mov	r0, r4
    402a:	f000 fd71 	bl	4b10 <shell_op_char_insert>
			shell->ctx->internal.flags.insert_mode = 1;
    402e:	68a2      	ldr	r2, [r4, #8]
    4030:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    4034:	f043 0301 	orr.w	r3, r3, #1
		EXIT_HISTORY_REQUEST(shell);
    4038:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
    403c:	e65d      	b.n	3cfa <shell_process+0x32>
	cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    403e:	4650      	mov	r0, sl
    4040:	e7c9      	b.n	3fd6 <shell_process+0x30e>
			shell_op_char_insert(shell, ' ');
    4042:	2120      	movs	r1, #32
					shell_op_char_insert(shell, data);
    4044:	4620      	mov	r0, r4
    4046:	f000 fd63 	bl	4b10 <shell_op_char_insert>
    404a:	e656      	b.n	3cfa <shell_process+0x32>
		shell_op_cursor_move(shell, 1);
    404c:	2101      	movs	r1, #1
    404e:	4620      	mov	r0, r4
    4050:	f000 fc44 	bl	48dc <shell_op_cursor_move>
    4054:	e651      	b.n	3cfa <shell_process+0x32>
	size_t str_len = shell_strlen(str);
    4056:	4630      	mov	r0, r6
    4058:	9304      	str	r3, [sp, #16]
    405a:	f7ff fa2e 	bl	34ba <shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    405e:	68a2      	ldr	r2, [r4, #8]
    4060:	9b04      	ldr	r3, [sp, #16]
    4062:	8493      	strh	r3, [r2, #36]	; 0x24
    4064:	9b03      	ldr	r3, [sp, #12]
	size_t str_len = shell_strlen(str);
    4066:	9007      	str	r0, [sp, #28]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    4068:	f8cd b010 	str.w	fp, [sp, #16]
    406c:	9306      	str	r3, [sp, #24]
		cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    406e:	f1ba 0f00 	cmp.w	sl, #0
    4072:	d052      	beq.n	411a <shell_process+0x452>
    4074:	f8da 0008 	ldr.w	r0, [sl, #8]
    4078:	68a3      	ldr	r3, [r4, #8]
    407a:	9a06      	ldr	r2, [sp, #24]
    407c:	9902      	ldr	r1, [sp, #8]
    407e:	3304      	adds	r3, #4
    4080:	9300      	str	r3, [sp, #0]
    4082:	ab17      	add	r3, sp, #92	; 0x5c
    4084:	f7ff fa1e 	bl	34c4 <cmd_get>
		idx++;
    4088:	9b06      	ldr	r3, [sp, #24]
    408a:	3301      	adds	r3, #1
    408c:	9306      	str	r3, [sp, #24]
		if (str && match->syntax &&
    408e:	2e00      	cmp	r6, #0
    4090:	d145      	bne.n	411e <shell_process+0x456>
		tab_item_print(shell, match->syntax, longest);
    4092:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4094:	f8d3 8000 	ldr.w	r8, [r3]
	if (option == NULL) {
    4098:	f1b8 0f00 	cmp.w	r8, #0
    409c:	d14a      	bne.n	4134 <shell_process+0x46c>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    409e:	68a3      	ldr	r3, [r4, #8]
    40a0:	f8a3 8024 	strh.w	r8, [r3, #36]	; 0x24
	while (cnt) {
    40a4:	9b04      	ldr	r3, [sp, #16]
    40a6:	3b01      	subs	r3, #1
    40a8:	9304      	str	r3, [sp, #16]
    40aa:	d1e0      	bne.n	406e <shell_process+0x3a6>
	shell_fprintf(shell, SHELL_INFO, "\r\n%s", shell->prompt);
    40ac:	6823      	ldr	r3, [r4, #0]
    40ae:	4aa7      	ldr	r2, [pc, #668]	; (434c <shell_process+0x684>)
    40b0:	2103      	movs	r1, #3
    40b2:	4620      	mov	r0, r4
    40b4:	f7ff fb54 	bl	3760 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%s", shell->ctx->cmd_buff);
    40b8:	68a3      	ldr	r3, [r4, #8]
    40ba:	4aa5      	ldr	r2, [pc, #660]	; (4350 <shell_process+0x688>)
    40bc:	9904      	ldr	r1, [sp, #16]
    40be:	332c      	adds	r3, #44	; 0x2c
    40c0:	4620      	mov	r0, r4
    40c2:	f7ff fb4d 	bl	3760 <shell_fprintf>
	shell_op_cursor_position_synchronize(shell);
    40c6:	4620      	mov	r0, r4
    40c8:	f000 fbe2 	bl	4890 <shell_op_cursor_position_synchronize>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    40cc:	ab28      	add	r3, sp, #160	; 0xa0
    40ce:	eb03 0087 	add.w	r0, r3, r7, lsl #2
    40d2:	f850 8c34 	ldr.w	r8, [r0, #-52]
	cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    40d6:	f1ba 0f00 	cmp.w	sl, #0
    40da:	d063      	beq.n	41a4 <shell_process+0x4dc>
    40dc:	f8da 0008 	ldr.w	r0, [sl, #8]
    40e0:	ab13      	add	r3, sp, #76	; 0x4c
    40e2:	9300      	str	r3, [sp, #0]
    40e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    40e8:	ab0d      	add	r3, sp, #52	; 0x34
    40ea:	f7ff f9eb 	bl	34c4 <cmd_get>
	*str = match->syntax;
    40ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    40f0:	681f      	ldr	r7, [r3, #0]
	for (size_t idx = first + 1; idx < first + cnt; idx++) {
    40f2:	9b03      	ldr	r3, [sp, #12]
	u16_t common = UINT16_MAX;
    40f4:	f64f 75ff 	movw	r5, #65535	; 0xffff
	for (size_t idx = first + 1; idx < first + cnt; idx++) {
    40f8:	1c5e      	adds	r6, r3, #1
    40fa:	449b      	add	fp, r3
    40fc:	455e      	cmp	r6, fp
    40fe:	d353      	bcc.n	41a8 <shell_process+0x4e0>
	int arg_len = shell_strlen(arg);
    4100:	4640      	mov	r0, r8
    4102:	f7ff f9da 	bl	34ba <shell_strlen>
	if (common) {
    4106:	2d00      	cmp	r5, #0
    4108:	f43f adf7 	beq.w	3cfa <shell_process+0x32>
		shell_op_completion_insert(shell, &completion[arg_len],
    410c:	1a2a      	subs	r2, r5, r0
    410e:	1839      	adds	r1, r7, r0
    4110:	b292      	uxth	r2, r2
    4112:	4620      	mov	r0, r4
    4114:	f000 fd41 	bl	4b9a <shell_op_completion_insert>
    4118:	e5ef      	b.n	3cfa <shell_process+0x32>
		cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    411a:	4650      	mov	r0, sl
    411c:	e7ac      	b.n	4078 <shell_process+0x3b0>
		if (str && match->syntax &&
    411e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4120:	6818      	ldr	r0, [r3, #0]
    4122:	2800      	cmp	r0, #0
    4124:	d0b5      	beq.n	4092 <shell_process+0x3ca>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    4126:	9a07      	ldr	r2, [sp, #28]
    4128:	4631      	mov	r1, r6
    412a:	f002 fd6c 	bl	6c06 <strncmp>
		if (str && match->syntax &&
    412e:	2800      	cmp	r0, #0
    4130:	d0af      	beq.n	4092 <shell_process+0x3ca>
    4132:	e79c      	b.n	406e <shell_process+0x3a6>
	longest_option += shell_strlen(tab);
    4134:	4887      	ldr	r0, [pc, #540]	; (4354 <shell_process+0x68c>)
    4136:	f7ff f9c0 	bl	34ba <shell_strlen>
    413a:	9b05      	ldr	r3, [sp, #20]
    413c:	4418      	add	r0, r3
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    413e:	68a3      	ldr	r3, [r4, #8]
	longest_option += shell_strlen(tab);
    4140:	fa1f f980 	uxth.w	r9, r0
			- shell_strlen(tab)) / longest_option;
    4144:	4883      	ldr	r0, [pc, #524]	; (4354 <shell_process+0x68c>)
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    4146:	8bdd      	ldrh	r5, [r3, #30]
			- shell_strlen(tab)) / longest_option;
    4148:	f7ff f9b7 	bl	34ba <shell_strlen>
    414c:	9009      	str	r0, [sp, #36]	; 0x24
	diff = longest_option - shell_strlen(option);
    414e:	4640      	mov	r0, r8
    4150:	f7ff f9b3 	bl	34ba <shell_strlen>
    4154:	eba9 0000 	sub.w	r0, r9, r0
    4158:	b283      	uxth	r3, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0) {
    415a:	68a1      	ldr	r1, [r4, #8]
	diff = longest_option - shell_strlen(option);
    415c:	9308      	str	r3, [sp, #32]
			- shell_strlen(tab)) / longest_option;
    415e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0) {
    4160:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
			- shell_strlen(tab)) / longest_option;
    4162:	1aed      	subs	r5, r5, r3
    4164:	fbb5 f9f9 	udiv	r9, r5, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0) {
    4168:	fa1f f989 	uxth.w	r9, r9
    416c:	1c50      	adds	r0, r2, #1
    416e:	fbb2 f3f9 	udiv	r3, r2, r9
    4172:	fb09 2213 	mls	r2, r9, r3, r2
    4176:	b292      	uxth	r2, r2
    4178:	8488      	strh	r0, [r1, #36]	; 0x24
    417a:	b962      	cbnz	r2, 4196 <shell_process+0x4ce>
		shell_fprintf(shell, SHELL_OPTION, "\r\n%s%s", tab, option);
    417c:	f8cd 8000 	str.w	r8, [sp]
    4180:	4b74      	ldr	r3, [pc, #464]	; (4354 <shell_process+0x68c>)
    4182:	4a75      	ldr	r2, [pc, #468]	; (4358 <shell_process+0x690>)
    4184:	2107      	movs	r1, #7
    4186:	4620      	mov	r0, r4
    4188:	f7ff faea 	bl	3760 <shell_fprintf>
	shell_op_cursor_horiz_move(shell, diff);
    418c:	9908      	ldr	r1, [sp, #32]
    418e:	4620      	mov	r0, r4
    4190:	f000 fb46 	bl	4820 <shell_op_cursor_horiz_move>
    4194:	e786      	b.n	40a4 <shell_process+0x3dc>
		shell_fprintf(shell, SHELL_OPTION, "%s", option);
    4196:	4643      	mov	r3, r8
    4198:	4a6d      	ldr	r2, [pc, #436]	; (4350 <shell_process+0x688>)
    419a:	2107      	movs	r1, #7
    419c:	4620      	mov	r0, r4
    419e:	f7ff fadf 	bl	3760 <shell_fprintf>
    41a2:	e7f3      	b.n	418c <shell_process+0x4c4>
	cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    41a4:	4650      	mov	r0, sl
    41a6:	e79b      	b.n	40e0 <shell_process+0x418>
		cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    41a8:	f1ba 0f00 	cmp.w	sl, #0
    41ac:	d01e      	beq.n	41ec <shell_process+0x524>
    41ae:	f8da 0008 	ldr.w	r0, [sl, #8]
    41b2:	9902      	ldr	r1, [sp, #8]
    41b4:	ab17      	add	r3, sp, #92	; 0x5c
    41b6:	9300      	str	r3, [sp, #0]
    41b8:	4632      	mov	r2, r6
    41ba:	ab0e      	add	r3, sp, #56	; 0x38
    41bc:	f7ff f982 	bl	34c4 <cmd_get>
		curr_common = shell_str_common(match->syntax, match2->syntax,
    41c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    41c2:	6819      	ldr	r1, [r3, #0]
    41c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    41c6:	6818      	ldr	r0, [r3, #0]
	size_t common = 0;
    41c8:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    41ca:	f811 c002 	ldrb.w	ip, [r1, r2]
    41ce:	5c83      	ldrb	r3, [r0, r2]
    41d0:	4563      	cmp	r3, ip
    41d2:	d105      	bne.n	41e0 <shell_process+0x518>
    41d4:	b123      	cbz	r3, 41e0 <shell_process+0x518>
		common++;
    41d6:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    41d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    41dc:	429a      	cmp	r2, r3
    41de:	d1f4      	bne.n	41ca <shell_process+0x502>
		common = (curr_common < common) ? curr_common : common;
    41e0:	4295      	cmp	r5, r2
    41e2:	bfa8      	it	ge
    41e4:	4615      	movge	r5, r2
    41e6:	b2ad      	uxth	r5, r5
	for (size_t idx = first + 1; idx < first + cnt; idx++) {
    41e8:	3601      	adds	r6, #1
    41ea:	e787      	b.n	40fc <shell_process+0x434>
		cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    41ec:	4650      	mov	r0, sl
    41ee:	e7e0      	b.n	41b2 <shell_process+0x4ea>
    41f0:	f8d0 324c 	ldr.w	r3, [r0, #588]	; 0x24c
				if (flag_echo_is_set(shell)) {
    41f4:	071e      	lsls	r6, r3, #28
    41f6:	f57f ad80 	bpl.w	3cfa <shell_process+0x32>
					EXIT_HISTORY_REQUEST(shell);
    41fa:	f890 324c 	ldrb.w	r3, [r0, #588]	; 0x24c
    41fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4202:	f880 324c 	strb.w	r3, [r0, #588]	; 0x24c
						shell_op_char_backspace(shell);
    4206:	4620      	mov	r0, r4
    4208:	f000 fcb6 	bl	4b78 <shell_op_char_backspace>
    420c:	e575      	b.n	3cfa <shell_process+0x32>
	switch (data) {
    420e:	2905      	cmp	r1, #5
    4210:	d076      	beq.n	4300 <shell_process+0x638>
    4212:	d819      	bhi.n	4248 <shell_process+0x580>
    4214:	2901      	cmp	r1, #1
    4216:	d079      	beq.n	430c <shell_process+0x644>
    4218:	2903      	cmp	r1, #3
    421a:	f47f ad6e 	bne.w	3cfa <shell_process+0x32>
		shell_op_cursor_end_move(shell);
    421e:	4620      	mov	r0, r4
    4220:	f000 fc40 	bl	4aa4 <shell_op_cursor_end_move>
		if (!shell_cursor_in_empty_line(shell)) {
    4224:	4620      	mov	r0, r4
    4226:	f000 fb0b 	bl	4840 <shell_cursor_in_empty_line>
    422a:	b910      	cbnz	r0, 4232 <shell_process+0x56a>
			cursor_next_line_move(shell);
    422c:	6960      	ldr	r0, [r4, #20]
    422e:	f7ff f973 	bl	3518 <cursor_next_line_move.isra.14>
		EXIT_HISTORY_REQUEST(shell);
    4232:	68a2      	ldr	r2, [r4, #8]
    4234:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    4238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    423c:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
		shell_state_set(shell, SHELL_STATE_ACTIVE);
    4240:	4620      	mov	r0, r4
    4242:	f7ff fb65 	bl	3910 <shell_state_set.constprop.31>
    4246:	e558      	b.n	3cfa <shell_process+0x32>
	switch (data) {
    4248:	2915      	cmp	r1, #21
    424a:	d024      	beq.n	4296 <shell_process+0x5ce>
    424c:	2917      	cmp	r1, #23
    424e:	d037      	beq.n	42c0 <shell_process+0x5f8>
    4250:	290c      	cmp	r1, #12
    4252:	f47f ad52 	bne.w	3cfa <shell_process+0x32>
		SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    4256:	4a41      	ldr	r2, [pc, #260]	; (435c <shell_process+0x694>)
    4258:	493d      	ldr	r1, [pc, #244]	; (4350 <shell_process+0x688>)
    425a:	6960      	ldr	r0, [r4, #20]
    425c:	f7ff f920 	bl	34a0 <shell_raw_fprintf>
		SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    4260:	4a3f      	ldr	r2, [pc, #252]	; (4360 <shell_process+0x698>)
    4262:	493b      	ldr	r1, [pc, #236]	; (4350 <shell_process+0x688>)
    4264:	6960      	ldr	r0, [r4, #20]
    4266:	f7ff f91b 	bl	34a0 <shell_raw_fprintf>
		shell_fprintf(shell, SHELL_INFO, "%s", shell->prompt);
    426a:	6823      	ldr	r3, [r4, #0]
    426c:	4a38      	ldr	r2, [pc, #224]	; (4350 <shell_process+0x688>)
    426e:	2103      	movs	r1, #3
    4270:	4620      	mov	r0, r4
    4272:	f7ff fa75 	bl	3760 <shell_fprintf>
		if (flag_echo_is_set(shell)) {
    4276:	68a3      	ldr	r3, [r4, #8]
    4278:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
    427c:	0711      	lsls	r1, r2, #28
    427e:	f57f ad3c 	bpl.w	3cfa <shell_process+0x32>
			shell_fprintf(shell, SHELL_NORMAL, "%s",
    4282:	4620      	mov	r0, r4
    4284:	332c      	adds	r3, #44	; 0x2c
    4286:	4a32      	ldr	r2, [pc, #200]	; (4350 <shell_process+0x688>)
    4288:	2100      	movs	r1, #0
    428a:	f7ff fa69 	bl	3760 <shell_fprintf>
			shell_op_cursor_position_synchronize(shell);
    428e:	4620      	mov	r0, r4
    4290:	f000 fafe 	bl	4890 <shell_op_cursor_position_synchronize>
    4294:	e531      	b.n	3cfa <shell_process+0x32>
		shell_op_cursor_home_move(shell);
    4296:	4620      	mov	r0, r4
    4298:	f000 fbfe 	bl	4a98 <shell_op_cursor_home_move>
		shell_cmd_buffer_clear(shell);
    429c:	68a3      	ldr	r3, [r4, #8]
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    429e:	492c      	ldr	r1, [pc, #176]	; (4350 <shell_process+0x688>)
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    42a0:	2200      	movs	r2, #0
    42a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	shell->ctx->cmd_buff_pos = 0;
    42a6:	851a      	strh	r2, [r3, #40]	; 0x28
	shell->ctx->cmd_buff_len = 0;
    42a8:	84da      	strh	r2, [r3, #38]	; 0x26
		EXIT_HISTORY_REQUEST(shell);
    42aa:	f893 224c 	ldrb.w	r2, [r3, #588]	; 0x24c
    42ae:	6960      	ldr	r0, [r4, #20]
    42b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    42b4:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
    42b8:	4a2a      	ldr	r2, [pc, #168]	; (4364 <shell_process+0x69c>)
    42ba:	f7ff f8f1 	bl	34a0 <shell_raw_fprintf>
    42be:	e51c      	b.n	3cfa <shell_process+0x32>
		shell_op_word_remove(shell);
    42c0:	4620      	mov	r0, r4
    42c2:	f000 fb8f 	bl	49e4 <shell_op_word_remove>
		EXIT_HISTORY_REQUEST(shell);
    42c6:	68a2      	ldr	r2, [r4, #8]
    42c8:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    42cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    42d0:	e6b2      	b.n	4038 <shell_process+0x370>
			if (data == '[') {
    42d2:	295b      	cmp	r1, #91	; 0x5b
    42d4:	d101      	bne.n	42da <shell_process+0x612>
	shell->ctx->receive_state = state;
    42d6:	2302      	movs	r3, #2
    42d8:	e5c8      	b.n	3e6c <shell_process+0x1a4>
    42da:	2300      	movs	r3, #0
    42dc:	e5c6      	b.n	3e6c <shell_process+0x1a4>
				history_handle(shell, true);
    42de:	2101      	movs	r1, #1
				history_handle(shell, false);
    42e0:	4620      	mov	r0, r4
    42e2:	f7ff fa8b 	bl	37fc <history_handle>
    42e6:	e508      	b.n	3cfa <shell_process+0x32>
    42e8:	2100      	movs	r1, #0
    42ea:	e7f9      	b.n	42e0 <shell_process+0x618>
				shell_op_right_arrow(shell);
    42ec:	4620      	mov	r0, r4
    42ee:	f000 fbe8 	bl	4ac2 <shell_op_right_arrow>
    42f2:	e502      	b.n	3cfa <shell_process+0x32>
				shell_op_left_arrow(shell);
    42f4:	4620      	mov	r0, r4
    42f6:	f000 fbdc 	bl	4ab2 <shell_op_left_arrow>
    42fa:	e4fe      	b.n	3cfa <shell_process+0x32>
	shell->ctx->receive_state = state;
    42fc:	2303      	movs	r3, #3
    42fe:	7043      	strb	r3, [r0, #1]
		shell_op_cursor_end_move(shell);
    4300:	4620      	mov	r0, r4
    4302:	f000 fbcf 	bl	4aa4 <shell_op_cursor_end_move>
    4306:	e4f8      	b.n	3cfa <shell_process+0x32>
	shell->ctx->receive_state = state;
    4308:	2303      	movs	r3, #3
    430a:	7043      	strb	r3, [r0, #1]
		shell_op_cursor_home_move(shell);
    430c:	4620      	mov	r0, r4
    430e:	f000 fbc3 	bl	4a98 <shell_op_cursor_home_move>
    4312:	e4f2      	b.n	3cfa <shell_process+0x32>
	shell->ctx->receive_state = state;
    4314:	2303      	movs	r3, #3
    4316:	7043      	strb	r3, [r0, #1]
				shell->ctx->internal.flags.insert_mode ^= 1;
    4318:	f8d0 324c 	ldr.w	r3, [r0, #588]	; 0x24c
    431c:	f890 224c 	ldrb.w	r2, [r0, #588]	; 0x24c
    4320:	f003 0301 	and.w	r3, r3, #1
    4324:	f083 0301 	eor.w	r3, r3, #1
    4328:	f363 0200 	bfi	r2, r3, #0, #1
    432c:	f880 224c 	strb.w	r2, [r0, #588]	; 0x24c
    4330:	e4e3      	b.n	3cfa <shell_process+0x32>
	shell->ctx->receive_state = state;
    4332:	2303      	movs	r3, #3
    4334:	7043      	strb	r3, [r0, #1]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    4336:	f8d0 324c 	ldr.w	r3, [r0, #588]	; 0x24c
				if (flag_echo_is_set(shell)) {
    433a:	071b      	lsls	r3, r3, #28
    433c:	f57f acdd 	bpl.w	3cfa <shell_process+0x32>
    4340:	e58f      	b.n	3e62 <shell_process+0x19a>
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
    4342:	2700      	movs	r7, #0
		*cmd = NULL;
    4344:	46ba      	mov	sl, r7
    4346:	e5ee      	b.n	3f26 <shell_process+0x25e>
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
    4348:	4607      	mov	r7, r0
    434a:	e7fb      	b.n	4344 <shell_process+0x67c>
    434c:	0002fdfa 	.word	0x0002fdfa
    4350:	0002fdfc 	.word	0x0002fdfc
    4354:	00036372 	.word	0x00036372
    4358:	0002fdf3 	.word	0x0002fdf3
    435c:	0002fd34 	.word	0x0002fd34
    4360:	0002fd38 	.word	0x0002fd38
    4364:	0002fd2c 	.word	0x0002fd2c

00004368 <shell_thread>:
{
    4368:	b5f0      	push	{r4, r5, r6, r7, lr}
    436a:	4604      	mov	r4, r0
    436c:	b085      	sub	sp, #20
    436e:	f44f 7624 	mov.w	r6, #656	; 0x290
    4372:	f44f 7514 	mov.w	r5, #592	; 0x250
		k_poll_signal_init(&shell->ctx->signals[i]);
    4376:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_INIT, k_poll_signal_init, struct k_poll_signal *, signal)
    4378:	4428      	add	r0, r5
    437a:	f02a fd2b 	bl	2edd4 <_impl_k_poll_signal_init>
		k_poll_event_init(&shell->ctx->events[i],
    437e:	68a0      	ldr	r0, [r4, #8]
    4380:	2200      	movs	r2, #0
    4382:	1943      	adds	r3, r0, r5
    4384:	2101      	movs	r1, #1
    4386:	4430      	add	r0, r6
    4388:	3510      	adds	r5, #16
    438a:	f02a fc7b 	bl	2ec84 <k_poll_event_init>
	for (i = 0; i < SHELL_SIGNALS; i++) {
    438e:	f5b5 7f24 	cmp.w	r5, #656	; 0x290
    4392:	f106 0614 	add.w	r6, r6, #20
    4396:	d1ee      	bne.n	4376 <shell_thread+0xe>
	err = shell_start(shell);
    4398:	4620      	mov	r0, r4
    439a:	f7ff fac9 	bl	3930 <shell_start>
	if (err != 0) {
    439e:	2800      	cmp	r0, #0
    43a0:	d17d      	bne.n	449e <shell_thread+0x136>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    43a2:	4f40      	ldr	r7, [pc, #256]	; (44a4 <shell_thread+0x13c>)
    43a4:	4d40      	ldr	r5, [pc, #256]	; (44a8 <shell_thread+0x140>)
		err = k_poll(shell->ctx->events, SHELL_SIGNALS, K_FOREVER);
    43a6:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    43a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    43ac:	2104      	movs	r1, #4
    43ae:	f500 7024 	add.w	r0, r0, #656	; 0x290
    43b2:	f02a fc7d 	bl	2ecb0 <_impl_k_poll>
		k_poll_signal_check(&shell->ctx->signals[SHELL_SIGNAL_KILL],
    43b6:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)
    43b8:	aa01      	add	r2, sp, #4
    43ba:	4669      	mov	r1, sp
    43bc:	f500 7020 	add.w	r0, r0, #640	; 0x280
    43c0:	f02a fd0d 	bl	2edde <_impl_k_poll_signal_check>
		if (signaled) {
    43c4:	9b00      	ldr	r3, [sp, #0]
    43c6:	b1cb      	cbz	r3, 43fc <shell_thread+0x94>
				&shell->ctx->signals[SHELL_SIGNAL_KILL]);
    43c8:	68a3      	ldr	r3, [r4, #8]
 */
__syscall void k_poll_signal_reset(struct k_poll_signal *signal);

static inline void _impl_k_poll_signal_reset(struct k_poll_signal *signal)
{
	signal->signaled = 0;
    43ca:	2200      	movs	r2, #0
    43cc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	return shell->ctx->internal.flags.processing == 1 ? true : false;
    43d0:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
	if (flag_processing_is_set(shell)) {
    43d4:	06d9      	lsls	r1, r3, #27
    43d6:	d40d      	bmi.n	43f4 <shell_thread+0x8c>
		shell_log_backend_disable(shell->log_backend);
    43d8:	69e0      	ldr	r0, [r4, #28]
    43da:	f000 ffef 	bl	53bc <shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
    43de:	6860      	ldr	r0, [r4, #4]
    43e0:	6803      	ldr	r3, [r0, #0]
    43e2:	685b      	ldr	r3, [r3, #4]
    43e4:	4798      	blx	r3
	if (err != 0) {
    43e6:	4606      	mov	r6, r0
    43e8:	b920      	cbnz	r0, 43f4 <shell_thread+0x8c>
	shell_history_purge(shell->history);
    43ea:	68e0      	ldr	r0, [r4, #12]
    43ec:	f000 ff31 	bl	5252 <shell_history_purge>
	shell->ctx->state = SHELL_STATE_UNINITIALIZED;
    43f0:	68a3      	ldr	r3, [r4, #8]
    43f2:	701e      	strb	r6, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    43f4:	f029 ff32 	bl	2e25c <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    43f8:	f002 f9fe 	bl	67f8 <_impl_k_thread_abort>
		k_poll_signal_check(&shell->ctx->signals[SHELL_SIGNAL_LOG_MSG],
    43fc:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)
    43fe:	aa01      	add	r2, sp, #4
    4400:	4669      	mov	r1, sp
    4402:	f500 701c 	add.w	r0, r0, #624	; 0x270
    4406:	f02a fcea 	bl	2edde <_impl_k_poll_signal_check>
		if (!signaled) {
    440a:	9a00      	ldr	r2, [sp, #0]
    440c:	68a3      	ldr	r3, [r4, #8]
    440e:	b93a      	cbnz	r2, 4420 <shell_thread+0xb8>
    4410:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
    4414:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
			shell_process(shell);
    4418:	4620      	mov	r0, r4
    441a:	f7ff fc55 	bl	3cc8 <shell_process>
    441e:	e7c2      	b.n	43a6 <shell_thread+0x3e>
    4420:	2200      	movs	r2, #0
    4422:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    4426:	68a0      	ldr	r0, [r4, #8]
    4428:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
    442a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    442c:	3014      	adds	r0, #20
    442e:	f000 f8c3 	bl	45b8 <shell_multiline_data_calc>
	shell_op_cursor_horiz_move(shell, -shell->ctx->vt100_ctx.cons.cur_x);
    4432:	68a3      	ldr	r3, [r4, #8]
    4434:	8a99      	ldrh	r1, [r3, #20]
    4436:	4620      	mov	r0, r4
    4438:	4249      	negs	r1, r1
    443a:	f000 f9f1 	bl	4820 <shell_op_cursor_horiz_move>
	shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
    443e:	68a3      	ldr	r3, [r4, #8]
    4440:	8b19      	ldrh	r1, [r3, #24]
    4442:	4620      	mov	r0, r4
    4444:	3901      	subs	r1, #1
    4446:	f000 f9db 	bl	4800 <shell_op_cursor_vert_move>
    444a:	463a      	mov	r2, r7
    444c:	4629      	mov	r1, r5
    444e:	6960      	ldr	r0, [r4, #20]
    4450:	f7ff f826 	bl	34a0 <shell_raw_fprintf>
		processed = shell_log_backend_process(shell->log_backend);
    4454:	69e0      	ldr	r0, [r4, #28]
    4456:	f000 ffc1 	bl	53dc <shell_log_backend_process>
	shell_fprintf(shell, SHELL_INFO, "%s", shell->prompt);
    445a:	6823      	ldr	r3, [r4, #0]
    445c:	462a      	mov	r2, r5
		processed = shell_log_backend_process(shell->log_backend);
    445e:	4606      	mov	r6, r0
	shell_fprintf(shell, SHELL_INFO, "%s", shell->prompt);
    4460:	2103      	movs	r1, #3
    4462:	4620      	mov	r0, r4
    4464:	f7ff f97c 	bl	3760 <shell_fprintf>
	if (flag_echo_is_set(shell)) {
    4468:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    446a:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
    446e:	0712      	lsls	r2, r2, #28
    4470:	d508      	bpl.n	4484 <shell_thread+0x11c>
		shell_fprintf(shell, SHELL_NORMAL, "%s", shell->ctx->cmd_buff);
    4472:	4620      	mov	r0, r4
    4474:	332c      	adds	r3, #44	; 0x2c
    4476:	462a      	mov	r2, r5
    4478:	2100      	movs	r1, #0
    447a:	f7ff f971 	bl	3760 <shell_fprintf>
		shell_op_cursor_position_synchronize(shell);
    447e:	4620      	mov	r0, r4
    4480:	f000 fa06 	bl	4890 <shell_op_cursor_position_synchronize>
		k_poll_signal_check(&shell->ctx->signals[SHELL_SIGNAL_RXRDY],
    4484:	68a0      	ldr	r0, [r4, #8]
    4486:	aa03      	add	r2, sp, #12
    4488:	a902      	add	r1, sp, #8
    448a:	f500 7014 	add.w	r0, r0, #592	; 0x250
    448e:	f02a fca6 	bl	2edde <_impl_k_poll_signal_check>
	} while (processed && !signaled);
    4492:	2e00      	cmp	r6, #0
    4494:	d087      	beq.n	43a6 <shell_thread+0x3e>
    4496:	9b02      	ldr	r3, [sp, #8]
    4498:	2b00      	cmp	r3, #0
    449a:	d0c4      	beq.n	4426 <shell_thread+0xbe>
    449c:	e783      	b.n	43a6 <shell_thread+0x3e>
}
    449e:	b005      	add	sp, #20
    44a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44a2:	bf00      	nop
    44a4:	0002fd2c 	.word	0x0002fd2c
    44a8:	0002fdfc 	.word	0x0002fdfc

000044ac <shell_cmd_precheck>:

int shell_cmd_precheck(const struct shell *shell,
		       bool arg_cnt_ok,
		       const struct shell_getopt_option *opt,
		       size_t opt_len)
{
    44ac:	b570      	push	{r4, r5, r6, lr}
    44ae:	4615      	mov	r5, r2
	if (shell_help_requested(shell)) {
    44b0:	6882      	ldr	r2, [r0, #8]
{
    44b2:	461e      	mov	r6, r3
    44b4:	f8d2 324c 	ldr.w	r3, [r2, #588]	; 0x24c
    44b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
    44bc:	4604      	mov	r4, r0
	if (shell_help_requested(shell)) {
    44be:	b12b      	cbz	r3, 44cc <shell_cmd_precheck+0x20>
		shell_help_print(shell, opt, opt_len);
    44c0:	4632      	mov	r2, r6
    44c2:	4629      	mov	r1, r5
    44c4:	f7ff fa50 	bl	3968 <shell_help_print>
		return 1; /* help printed */
    44c8:	2001      	movs	r0, #1

		return -EINVAL;
	}

	return 0;
}
    44ca:	bd70      	pop	{r4, r5, r6, pc}
	if (!arg_cnt_ok) {
    44cc:	b961      	cbnz	r1, 44e8 <shell_cmd_precheck+0x3c>
		shell_fprintf(shell, SHELL_ERROR,
    44ce:	6853      	ldr	r3, [r2, #4]
    44d0:	4a06      	ldr	r2, [pc, #24]	; (44ec <shell_cmd_precheck+0x40>)
    44d2:	2102      	movs	r1, #2
    44d4:	f7ff f944 	bl	3760 <shell_fprintf>
			shell_help_print(shell, opt, opt_len);
    44d8:	4620      	mov	r0, r4
    44da:	4632      	mov	r2, r6
    44dc:	4629      	mov	r1, r5
    44de:	f7ff fa43 	bl	3968 <shell_help_print>
		return -EINVAL;
    44e2:	f06f 0015 	mvn.w	r0, #21
    44e6:	e7f0      	b.n	44ca <shell_cmd_precheck+0x1e>
	return 0;
    44e8:	4618      	mov	r0, r3
    44ea:	e7ee      	b.n	44ca <shell_cmd_precheck+0x1e>
    44ec:	0002fd59 	.word	0x0002fd59

000044f0 <shell_fprintf_buffer_flush>:
}


void shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    44f0:	6902      	ldr	r2, [r0, #16]
    44f2:	6883      	ldr	r3, [r0, #8]
    44f4:	6812      	ldr	r2, [r2, #0]
    44f6:	6801      	ldr	r1, [r0, #0]
{
    44f8:	b510      	push	{r4, lr}
    44fa:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    44fc:	68c0      	ldr	r0, [r0, #12]
    44fe:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
    4500:	6923      	ldr	r3, [r4, #16]
    4502:	2200      	movs	r2, #0
    4504:	601a      	str	r2, [r3, #0]
}
    4506:	bd10      	pop	{r4, pc}

00004508 <shell_fprintf_fmt>:
{
    4508:	b510      	push	{r4, lr}
    450a:	4604      	mov	r4, r0
	(void)_prf(out_func, (void *)sh_fprintf, (char *)fmt, args);
    450c:	4613      	mov	r3, r2
    450e:	460a      	mov	r2, r1
    4510:	4601      	mov	r1, r0
    4512:	4806      	ldr	r0, [pc, #24]	; (452c <shell_fprintf_fmt+0x24>)
    4514:	f002 fc9e 	bl	6e54 <_prf>
	if (sh_fprintf->ctrl_blk->autoflush) {
    4518:	6923      	ldr	r3, [r4, #16]
    451a:	791b      	ldrb	r3, [r3, #4]
    451c:	b123      	cbz	r3, 4528 <shell_fprintf_fmt+0x20>
		shell_fprintf_buffer_flush(sh_fprintf);
    451e:	4620      	mov	r0, r4
}
    4520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_fprintf_buffer_flush(sh_fprintf);
    4524:	f7ff bfe4 	b.w	44f0 <shell_fprintf_buffer_flush>
}
    4528:	bd10      	pop	{r4, pc}
    452a:	bf00      	nop
    452c:	00004531 	.word	0x00004531

00004530 <out_func>:
{
    4530:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    4532:	68cb      	ldr	r3, [r1, #12]
    4534:	7c1b      	ldrb	r3, [r3, #16]
    4536:	2b02      	cmp	r3, #2
{
    4538:	4605      	mov	r5, r0
    453a:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    453c:	d104      	bne.n	4548 <out_func+0x18>
    453e:	280a      	cmp	r0, #10
    4540:	d102      	bne.n	4548 <out_func+0x18>
		(void)out_func('\r', ctx);
    4542:	200d      	movs	r0, #13
    4544:	f7ff fff4 	bl	4530 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (u8_t)c;
    4548:	6923      	ldr	r3, [r4, #16]
    454a:	6822      	ldr	r2, [r4, #0]
    454c:	681b      	ldr	r3, [r3, #0]
    454e:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
    4550:	6922      	ldr	r2, [r4, #16]
    4552:	6813      	ldr	r3, [r2, #0]
    4554:	3301      	adds	r3, #1
    4556:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
    4558:	6862      	ldr	r2, [r4, #4]
    455a:	4293      	cmp	r3, r2
    455c:	d102      	bne.n	4564 <out_func+0x34>
		shell_fprintf_buffer_flush(sh_fprintf);
    455e:	4620      	mov	r0, r4
    4560:	f7ff ffc6 	bl	44f0 <shell_fprintf_buffer_flush>
}
    4564:	2000      	movs	r0, #0
    4566:	bd38      	pop	{r3, r4, r5, pc}

00004568 <isspace>:
	return c == ' ' || ((unsigned)c-'\t') < 5;
    4568:	2820      	cmp	r0, #32
    456a:	d005      	beq.n	4578 <isspace+0x10>
    456c:	3809      	subs	r0, #9
    456e:	2804      	cmp	r0, #4
    4570:	bf8c      	ite	hi
    4572:	2000      	movhi	r0, #0
    4574:	2001      	movls	r0, #1
    4576:	4770      	bx	lr
    4578:	2001      	movs	r0, #1
}
    457a:	4770      	bx	lr

0000457c <shell_strlen>:
    457c:	b108      	cbz	r0, 4582 <shell_strlen+0x6>
    457e:	f002 bb2d 	b.w	6bdc <strlen>
}
    4582:	4770      	bx	lr

00004584 <column_span_with_buffer_offsets_get>:
}

s32_t column_span_with_buffer_offsets_get(struct shell_multiline_cons *cons,
					  u16_t offset1,
					  u16_t offset2)
{
    4584:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
    4586:	7b03      	ldrb	r3, [r0, #12]
    4588:	8944      	ldrh	r4, [r0, #10]
    458a:	441a      	add	r2, r3
    458c:	4419      	add	r1, r3
    458e:	fb92 f0f4 	sdiv	r0, r2, r4
    4592:	fb91 f3f4 	sdiv	r3, r1, r4
    4596:	fb04 2010 	mls	r0, r4, r0, r2
    459a:	fb04 1113 	mls	r1, r4, r3, r1
	return col_num_with_buffer_offset_get(cons, offset2)
			- col_num_with_buffer_offset_get(cons, offset1);
}
    459e:	1a40      	subs	r0, r0, r1
    45a0:	bd10      	pop	{r4, pc}

000045a2 <row_span_with_buffer_offsets_get>:

s32_t row_span_with_buffer_offsets_get(struct shell_multiline_cons *cons,
				       u16_t offset1,
				       u16_t offset2)
{
    45a2:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
    45a4:	7b03      	ldrb	r3, [r0, #12]
    45a6:	8944      	ldrh	r4, [r0, #10]
    45a8:	441a      	add	r2, r3
    45aa:	4419      	add	r1, r3
    45ac:	fb92 f0f4 	sdiv	r0, r2, r4
    45b0:	fb91 f1f4 	sdiv	r1, r1, r4
	return line_num_with_buffer_offset_get(cons, offset2)
		- line_num_with_buffer_offset_get(cons, offset1);
}
    45b4:	1a40      	subs	r0, r0, r1
    45b6:	bd10      	pop	{r4, pc}

000045b8 <shell_multiline_data_calc>:

void shell_multiline_data_calc(struct shell_multiline_cons *cons,
			       u16_t buff_pos, u16_t buff_len)
{
    45b8:	b530      	push	{r4, r5, lr}
	/* Current cursor position in command.
	 * +1 -> because home position is (1, 1)
	 */
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    45ba:	7b04      	ldrb	r4, [r0, #12]
    45bc:	8945      	ldrh	r5, [r0, #10]
    45be:	4421      	add	r1, r4
    45c0:	fb91 f3f5 	sdiv	r3, r1, r5
    45c4:	fb05 1113 	mls	r1, r5, r3, r1
    45c8:	3101      	adds	r1, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    45ca:	3301      	adds	r3, #1

	/* Extreme position when cursor is at the end of command. */
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    45cc:	4422      	add	r2, r4
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    45ce:	8001      	strh	r1, [r0, #0]
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    45d0:	8083      	strh	r3, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    45d2:	fb92 f3f5 	sdiv	r3, r2, r5
    45d6:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    45d8:	fb05 2313 	mls	r3, r5, r3, r2
    45dc:	3301      	adds	r3, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    45de:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    45e0:	8043      	strh	r3, [r0, #2]
}
    45e2:	bd30      	pop	{r4, r5, pc}

000045e4 <shell_make_argv>:
	*ppcmd = cmd;
}


char shell_make_argv(size_t *argc, char **argv, char *cmd, u8_t max_argc)
{
    45e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45e8:	4699      	mov	r9, r3
	char quote = 0;
	char c;

	*argc = 0;
    45ea:	2300      	movs	r3, #0
{
    45ec:	4607      	mov	r7, r0
    45ee:	4688      	mov	r8, r1
    45f0:	4614      	mov	r4, r2
	*argc = 0;
    45f2:	6003      	str	r3, [r0, #0]
	do {
		c = *cmd;
    45f4:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
    45f6:	b140      	cbz	r0, 460a <shell_make_argv+0x26>
			break;
		}

		if (isspace((int) c)) {
    45f8:	f7ff ffb6 	bl	4568 <isspace>
    45fc:	b160      	cbz	r0, 4618 <shell_make_argv+0x34>
			*cmd++ = '\0';
    45fe:	2300      	movs	r3, #0
    4600:	7023      	strb	r3, [r4, #0]
    4602:	3401      	adds	r4, #1

		argv[(*argc)++] = cmd;
		quote = 0;

		make_argv(&cmd, c, quote);
	} while (*argc < max_argc);
    4604:	683b      	ldr	r3, [r7, #0]
    4606:	454b      	cmp	r3, r9
    4608:	d3f4      	bcc.n	45f4 <shell_make_argv+0x10>

	argv[*argc] = 0;
    460a:	683b      	ldr	r3, [r7, #0]
    460c:	2000      	movs	r0, #0
    460e:	f848 0023 	str.w	r0, [r8, r3, lsl #2]

	return quote;
}
    4612:	b003      	add	sp, #12
    4614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		argv[(*argc)++] = cmd;
    4618:	683b      	ldr	r3, [r7, #0]
    461a:	1c5a      	adds	r2, r3, #1
    461c:	603a      	str	r2, [r7, #0]
    461e:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
    4622:	4606      	mov	r6, r0
		c = *cmd;
    4624:	f894 a000 	ldrb.w	sl, [r4]
		if (c == '\0') {
    4628:	f1ba 0f00 	cmp.w	sl, #0
    462c:	d0ea      	beq.n	4604 <shell_make_argv+0x20>
		if (!quote) {
    462e:	2e00      	cmp	r6, #0
    4630:	f040 8089 	bne.w	4746 <shell_make_argv+0x162>
			switch (c) {
    4634:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
    4638:	d005      	beq.n	4646 <shell_make_argv+0x62>
    463a:	f1ba 0f5c 	cmp.w	sl, #92	; 0x5c
    463e:	d00e      	beq.n	465e <shell_make_argv+0x7a>
    4640:	f1ba 0f22 	cmp.w	sl, #34	; 0x22
    4644:	d177      	bne.n	4736 <shell_make_argv+0x152>
				memmove(cmd, cmd + 1,
    4646:	4620      	mov	r0, r4
    4648:	f7ff ff98 	bl	457c <shell_strlen>
    464c:	1c61      	adds	r1, r4, #1
    464e:	4602      	mov	r2, r0
    4650:	4620      	mov	r0, r4
    4652:	f002 fb02 	bl	6c5a <memmove>
    4656:	4625      	mov	r5, r4
    4658:	4656      	mov	r6, sl
			quote = 0;
    465a:	462c      	mov	r4, r5
    465c:	e7e2      	b.n	4624 <shell_make_argv+0x40>
				memmove(cmd, cmd + 1,
    465e:	1c65      	adds	r5, r4, #1
				memmove(cmd, cmd + 1,
    4660:	4620      	mov	r0, r4
    4662:	f7ff ff8b 	bl	457c <shell_strlen>
    4666:	4629      	mov	r1, r5
    4668:	4602      	mov	r2, r0
    466a:	4620      	mov	r0, r4
    466c:	f002 faf5 	bl	6c5a <memmove>
    4670:	e7f3      	b.n	465a <shell_make_argv+0x76>
		if (quote && c == '\\') {
    4672:	f1ba 0f5c 	cmp.w	sl, #92	; 0x5c
    4676:	d164      	bne.n	4742 <shell_make_argv+0x15e>
    4678:	7862      	ldrb	r2, [r4, #1]
			if (t == quote) {
    467a:	4296      	cmp	r6, r2
    467c:	d0f0      	beq.n	4660 <shell_make_argv+0x7c>
			if (t == '0') {
    467e:	2a30      	cmp	r2, #48	; 0x30
    4680:	d126      	bne.n	46d0 <shell_make_argv+0xec>
    4682:	2302      	movs	r3, #2
				u8_t v = 0;
    4684:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
    4688:	5ce2      	ldrb	r2, [r4, r3]
					if (t >= '0' && t <= '7') {
    468a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    468e:	b2c9      	uxtb	r1, r1
    4690:	2907      	cmp	r1, #7
    4692:	fa5f fb83 	uxtb.w	fp, r3
    4696:	d818      	bhi.n	46ca <shell_make_argv+0xe6>
    4698:	3301      	adds	r3, #1
						v = (v << 3) | (t - '0');
    469a:	ea41 01ca 	orr.w	r1, r1, sl, lsl #3
				for (i = 2; i < (2 + 3); i++) {
    469e:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
    46a0:	fa5f fa81 	uxtb.w	sl, r1
				for (i = 2; i < (2 + 3); i++) {
    46a4:	d1f0      	bne.n	4688 <shell_make_argv+0xa4>
    46a6:	469b      	mov	fp, r3
					memmove(cmd, cmd + (i - 1),
    46a8:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
    46ac:	4421      	add	r1, r4
						shell_strlen(cmd) - (i - 2));
    46ae:	4620      	mov	r0, r4
					memmove(cmd, cmd + (i - 1),
    46b0:	9101      	str	r1, [sp, #4]
						shell_strlen(cmd) - (i - 2));
    46b2:	f7ff ff63 	bl	457c <shell_strlen>
					memmove(cmd, cmd + (i - 1),
    46b6:	9901      	ldr	r1, [sp, #4]
    46b8:	1c82      	adds	r2, r0, #2
    46ba:	eba2 020b 	sub.w	r2, r2, fp
					memmove(cmd, cmd + (i - 1),
    46be:	4620      	mov	r0, r4
    46c0:	f002 facb 	bl	6c5a <memmove>
					*cmd++ = v;
    46c4:	f884 a000 	strb.w	sl, [r4]
    46c8:	e7c7      	b.n	465a <shell_make_argv+0x76>
				if (i > 2) {
    46ca:	f1bb 0f02 	cmp.w	fp, #2
    46ce:	d1eb      	bne.n	46a8 <shell_make_argv+0xc4>
			if (t == 'x') {
    46d0:	2a78      	cmp	r2, #120	; 0x78
    46d2:	d136      	bne.n	4742 <shell_make_argv+0x15e>
    46d4:	2102      	movs	r1, #2
				u8_t v = 0;
    46d6:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
    46da:	5c63      	ldrb	r3, [r4, r1]
					if (t >= '0' && t <= '9') {
    46dc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    46e0:	b2d2      	uxtb	r2, r2
    46e2:	2a09      	cmp	r2, #9
    46e4:	b2c8      	uxtb	r0, r1
    46e6:	d814      	bhi.n	4712 <shell_make_argv+0x12e>
						v = (v << 4) | (t - '0');
    46e8:	ea42 130a 	orr.w	r3, r2, sl, lsl #4
				for (i = 2; i < (2 + 2); i++) {
    46ec:	2903      	cmp	r1, #3
						v = (v << 4) | (t - 'A' + 10);
    46ee:	fa5f fa83 	uxtb.w	sl, r3
				for (i = 2; i < (2 + 2); i++) {
    46f2:	d10c      	bne.n	470e <shell_make_argv+0x12a>
    46f4:	2304      	movs	r3, #4
						shell_strlen(cmd) - (i - 2));
    46f6:	4620      	mov	r0, r4
					memmove(cmd, cmd + (i - 1),
    46f8:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
    46fc:	9301      	str	r3, [sp, #4]
						shell_strlen(cmd) - (i - 2));
    46fe:	f7ff ff3d 	bl	457c <shell_strlen>
					memmove(cmd, cmd + (i - 1),
    4702:	9b01      	ldr	r3, [sp, #4]
    4704:	44a3      	add	fp, r4
    4706:	1c82      	adds	r2, r0, #2
    4708:	1ad2      	subs	r2, r2, r3
    470a:	4659      	mov	r1, fp
    470c:	e7d7      	b.n	46be <shell_make_argv+0xda>
				for (i = 2; i < (2 + 2); i++) {
    470e:	2103      	movs	r1, #3
    4710:	e7e3      	b.n	46da <shell_make_argv+0xf6>
					} else if ((t >= 'a') &&
    4712:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    4716:	2a05      	cmp	r2, #5
    4718:	d803      	bhi.n	4722 <shell_make_argv+0x13e>
						v = (v << 4) | (t - 'a' + 10);
    471a:	3b57      	subs	r3, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
    471c:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
    4720:	e7e4      	b.n	46ec <shell_make_argv+0x108>
					} else if ((t >= 'A') && (t <= 'F')) {
    4722:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    4726:	2a05      	cmp	r2, #5
    4728:	d801      	bhi.n	472e <shell_make_argv+0x14a>
						v = (v << 4) | (t - 'A' + 10);
    472a:	3b37      	subs	r3, #55	; 0x37
    472c:	e7f6      	b.n	471c <shell_make_argv+0x138>
				if (i > 2) {
    472e:	2802      	cmp	r0, #2
    4730:	d007      	beq.n	4742 <shell_make_argv+0x15e>
    4732:	2303      	movs	r3, #3
    4734:	e7df      	b.n	46f6 <shell_make_argv+0x112>
		if (!quote && isspace((int) c)) {
    4736:	4650      	mov	r0, sl
    4738:	f7ff ff16 	bl	4568 <isspace>
    473c:	2800      	cmp	r0, #0
    473e:	f47f af61 	bne.w	4604 <shell_make_argv+0x20>
		cmd += 1;
    4742:	1c65      	adds	r5, r4, #1
    4744:	e789      	b.n	465a <shell_make_argv+0x76>
		if (quote == c) {
    4746:	45b2      	cmp	sl, r6
    4748:	f104 0501 	add.w	r5, r4, #1
    474c:	d191      	bne.n	4672 <shell_make_argv+0x8e>
			memmove(cmd, cmd + 1, shell_strlen(cmd));
    474e:	4620      	mov	r0, r4
    4750:	f7ff ff14 	bl	457c <shell_strlen>
    4754:	4629      	mov	r1, r5
    4756:	4602      	mov	r2, r0
    4758:	4620      	mov	r0, r4
    475a:	f002 fa7e 	bl	6c5a <memmove>
    475e:	4625      	mov	r5, r4
			quote = 0;
    4760:	2600      	movs	r6, #0
    4762:	e77a      	b.n	465a <shell_make_argv+0x76>

00004764 <shell_buffer_trim>:
		}
	}
}

void shell_buffer_trim(char *buff, u16_t *buff_len)
{
    4764:	b570      	push	{r4, r5, r6, lr}
	u16_t i = 0;

	/* no command in the buffer */
	if (buff[0] == '\0') {
    4766:	7803      	ldrb	r3, [r0, #0]
{
    4768:	4604      	mov	r4, r0
    476a:	460d      	mov	r5, r1
	if (buff[0] == '\0') {
    476c:	b93b      	cbnz	r3, 477e <shell_buffer_trim+0x1a>
	/* Removing counted whitespace characters. */
	if (--i > 0) {
		memmove(buff, buff + i, (*buff_len + 1) - i); /* +1 for '\0' */
		*buff_len = *buff_len - i;
	}
}
    476e:	bd70      	pop	{r4, r5, r6, pc}
		*buff_len -= 1;
    4770:	3b01      	subs	r3, #1
    4772:	b29b      	uxth	r3, r3
    4774:	802b      	strh	r3, [r5, #0]
		if (*buff_len == 0) {
    4776:	b913      	cbnz	r3, 477e <shell_buffer_trim+0x1a>
			buff[0] = '\0';
    4778:	2300      	movs	r3, #0
    477a:	7023      	strb	r3, [r4, #0]
			return;
    477c:	e7f7      	b.n	476e <shell_buffer_trim+0xa>
	while (isspace((int) buff[*buff_len - 1])) {
    477e:	882b      	ldrh	r3, [r5, #0]
    4780:	18e2      	adds	r2, r4, r3
    4782:	f812 0c01 	ldrb.w	r0, [r2, #-1]
    4786:	f7ff feef 	bl	4568 <isspace>
    478a:	2800      	cmp	r0, #0
    478c:	d1f0      	bne.n	4770 <shell_buffer_trim+0xc>
	buff[*buff_len] = '\0';
    478e:	54e0      	strb	r0, [r4, r3]
	while (isspace((int) buff[i++])) {
    4790:	4603      	mov	r3, r0
    4792:	5ce0      	ldrb	r0, [r4, r3]
    4794:	b29e      	uxth	r6, r3
    4796:	18e1      	adds	r1, r4, r3
    4798:	f7ff fee6 	bl	4568 <isspace>
    479c:	b958      	cbnz	r0, 47b6 <shell_buffer_trim+0x52>
	if (--i > 0) {
    479e:	2e00      	cmp	r6, #0
    47a0:	d0e5      	beq.n	476e <shell_buffer_trim+0xa>
		memmove(buff, buff + i, (*buff_len + 1) - i); /* +1 for '\0' */
    47a2:	882a      	ldrh	r2, [r5, #0]
    47a4:	3201      	adds	r2, #1
    47a6:	1ad2      	subs	r2, r2, r3
    47a8:	4620      	mov	r0, r4
    47aa:	f002 fa56 	bl	6c5a <memmove>
		*buff_len = *buff_len - i;
    47ae:	882b      	ldrh	r3, [r5, #0]
    47b0:	1b9b      	subs	r3, r3, r6
    47b2:	802b      	strh	r3, [r5, #0]
    47b4:	e7db      	b.n	476e <shell_buffer_trim+0xa>
    47b6:	3301      	adds	r3, #1
		if (i == 0) {
    47b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    47bc:	d1e9      	bne.n	4792 <shell_buffer_trim+0x2e>
    47be:	e7db      	b.n	4778 <shell_buffer_trim+0x14>

000047c0 <shell_raw_fprintf>:
{
    47c0:	b40e      	push	{r1, r2, r3}
    47c2:	b503      	push	{r0, r1, lr}
    47c4:	aa03      	add	r2, sp, #12
    47c6:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    47ca:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    47cc:	f7ff fe9c 	bl	4508 <shell_fprintf_fmt>
}
    47d0:	b002      	add	sp, #8
    47d2:	f85d eb04 	ldr.w	lr, [sp], #4
    47d6:	b003      	add	sp, #12
    47d8:	4770      	bx	lr

000047da <full_line_cmd>:

/* Function returns true if command length is equal to multiplicity of terminal
 * width.
 */
static inline bool full_line_cmd(const struct shell *shell)
{
    47da:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->prompt))
    47dc:	6883      	ldr	r3, [r0, #8]
{
    47de:	4605      	mov	r5, r0
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->prompt))
    47e0:	6800      	ldr	r0, [r0, #0]
    47e2:	8cdc      	ldrh	r4, [r3, #38]	; 0x26
	return str == NULL ? 0 : strlen(str);
    47e4:	b108      	cbz	r0, 47ea <full_line_cmd+0x10>
    47e6:	f002 f9f9 	bl	6bdc <strlen>
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0);
    47ea:	68ab      	ldr	r3, [r5, #8]
    47ec:	8bda      	ldrh	r2, [r3, #30]
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->prompt))
    47ee:	4420      	add	r0, r4
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0);
    47f0:	fbb0 f3f2 	udiv	r3, r0, r2
    47f4:	fb02 0013 	mls	r0, r2, r3, r0
}
    47f8:	fab0 f080 	clz	r0, r0
    47fc:	0940      	lsrs	r0, r0, #5
    47fe:	bd38      	pop	{r3, r4, r5, pc}

00004800 <shell_op_cursor_vert_move>:
	if (delta != 0) {
    4800:	b159      	cbz	r1, 481a <shell_op_cursor_vert_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
    4802:	2900      	cmp	r1, #0
    4804:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
    4808:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
    480c:	bfcc      	ite	gt
    480e:	2341      	movgt	r3, #65	; 0x41
    4810:	2342      	movle	r3, #66	; 0x42
    4812:	4902      	ldr	r1, [pc, #8]	; (481c <shell_op_cursor_vert_move+0x1c>)
    4814:	6940      	ldr	r0, [r0, #20]
    4816:	f7ff bfd3 	b.w	47c0 <shell_raw_fprintf>
}
    481a:	4770      	bx	lr
    481c:	0002fe10 	.word	0x0002fe10

00004820 <shell_op_cursor_horiz_move>:
	if (delta != 0) {
    4820:	b159      	cbz	r1, 483a <shell_op_cursor_horiz_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
    4822:	2900      	cmp	r1, #0
    4824:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
    4828:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
    482c:	bfcc      	ite	gt
    482e:	2343      	movgt	r3, #67	; 0x43
    4830:	2344      	movle	r3, #68	; 0x44
    4832:	4902      	ldr	r1, [pc, #8]	; (483c <shell_op_cursor_horiz_move+0x1c>)
    4834:	6940      	ldr	r0, [r0, #20]
    4836:	f7ff bfc3 	b.w	47c0 <shell_raw_fprintf>
}
    483a:	4770      	bx	lr
    483c:	0002fe10 	.word	0x0002fe10

00004840 <shell_cursor_in_empty_line>:

/* Function returns true if cursor is at beginning of an empty line. */
bool shell_cursor_in_empty_line(const struct shell *shell)
{
    4840:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->prompt))
    4842:	6883      	ldr	r3, [r0, #8]
{
    4844:	4605      	mov	r5, r0
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->prompt))
    4846:	6800      	ldr	r0, [r0, #0]
    4848:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
    484a:	b108      	cbz	r0, 4850 <shell_cursor_in_empty_line+0x10>
    484c:	f002 f9c6 	bl	6bdc <strlen>
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0);
    4850:	68ab      	ldr	r3, [r5, #8]
    4852:	8bda      	ldrh	r2, [r3, #30]
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->prompt))
    4854:	4420      	add	r0, r4
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0);
    4856:	fbb0 f3f2 	udiv	r3, r0, r2
    485a:	fb02 0013 	mls	r0, r2, r3, r0
}
    485e:	fab0 f080 	clz	r0, r0
    4862:	0940      	lsrs	r0, r0, #5
    4864:	bd38      	pop	{r3, r4, r5, pc}
	...

00004868 <shell_op_cond_next_line>:

void shell_op_cond_next_line(const struct shell *shell)
{
    4868:	b510      	push	{r4, lr}
    486a:	4604      	mov	r4, r0
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    486c:	f7ff ffe8 	bl	4840 <shell_cursor_in_empty_line>
    4870:	b128      	cbz	r0, 487e <shell_op_cond_next_line+0x16>
	shell_raw_fprintf(shell->fprintf_ctx, "\r\n");
    4872:	6960      	ldr	r0, [r4, #20]
    4874:	4905      	ldr	r1, [pc, #20]	; (488c <shell_op_cond_next_line+0x24>)
		cursor_next_line_move(shell);
	}
}
    4876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    487a:	f7ff bfa1 	b.w	47c0 <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    487e:	4620      	mov	r0, r4
    4880:	f7ff ffab 	bl	47da <full_line_cmd>
    4884:	2800      	cmp	r0, #0
    4886:	d1f4      	bne.n	4872 <shell_op_cond_next_line+0xa>
}
    4888:	bd10      	pop	{r4, pc}
    488a:	bf00      	nop
    488c:	0002f8da 	.word	0x0002f8da

00004890 <shell_op_cursor_position_synchronize>:

void shell_op_cursor_position_synchronize(const struct shell *shell)
{
    4890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    4892:	6884      	ldr	r4, [r0, #8]
{
    4894:	4605      	mov	r5, r0
	bool last_line;

	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    4896:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    4898:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    489a:	f104 0014 	add.w	r0, r4, #20
    489e:	f7ff fe8b 	bl	45b8 <shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
    48a2:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
    48a4:	8b27      	ldrh	r7, [r4, #24]
    48a6:	8b66      	ldrh	r6, [r4, #26]
	if (full_line_cmd(shell)) {
    48a8:	f7ff ff97 	bl	47da <full_line_cmd>
    48ac:	b118      	cbz	r0, 48b6 <shell_op_cursor_position_synchronize+0x26>
    48ae:	490a      	ldr	r1, [pc, #40]	; (48d8 <shell_op_cursor_position_synchronize+0x48>)
    48b0:	6968      	ldr	r0, [r5, #20]
    48b2:	f7ff ff85 	bl	47c0 <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	if (last_line) {
    48b6:	42b7      	cmp	r7, r6
    48b8:	d107      	bne.n	48ca <shell_op_cursor_position_synchronize+0x3a>
		shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    48ba:	8aa1      	ldrh	r1, [r4, #20]
							       cons->cur_x_end);
    48bc:	8ae3      	ldrh	r3, [r4, #22]
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    48be:	4628      	mov	r0, r5
    48c0:	1ac9      	subs	r1, r1, r3
	}
}
    48c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    48c6:	f7ff bfab 	b.w	4820 <shell_op_cursor_horiz_move>
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
    48ca:	8b61      	ldrh	r1, [r4, #26]
    48cc:	8b23      	ldrh	r3, [r4, #24]
    48ce:	4628      	mov	r0, r5
    48d0:	1ac9      	subs	r1, r1, r3
    48d2:	f7ff ff95 	bl	4800 <shell_op_cursor_vert_move>
    48d6:	e7f0      	b.n	48ba <shell_op_cursor_position_synchronize+0x2a>
    48d8:	0002f8da 	.word	0x0002f8da

000048dc <shell_op_cursor_move>:

void shell_op_cursor_move(const struct shell *shell, s16_t val)
{
    48dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48de:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    48e0:	6880      	ldr	r0, [r0, #8]
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
    48e2:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	s32_t row_span;
	s32_t col_span;

	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    48e4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
    48e6:	4419      	add	r1, r3
    48e8:	b28d      	uxth	r5, r1
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    48ea:	3014      	adds	r0, #20
    48ec:	4619      	mov	r1, r3
    48ee:	f7ff fe63 	bl	45b8 <shell_multiline_data_calc>
				  shell->ctx->cmd_buff_len);

	/* Calculate the new cursor. */
	row_span = row_span_with_buffer_offsets_get(&shell->ctx->vt100_ctx.cons,
    48f2:	68a0      	ldr	r0, [r4, #8]
    48f4:	462a      	mov	r2, r5
    48f6:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    48f8:	3014      	adds	r0, #20
    48fa:	f7ff fe52 	bl	45a2 <row_span_with_buffer_offsets_get>
    48fe:	4607      	mov	r7, r0
						    shell->ctx->cmd_buff_pos,
						    new_pos);
	col_span = column_span_with_buffer_offsets_get(
						    &shell->ctx->vt100_ctx.cons,
    4900:	68a0      	ldr	r0, [r4, #8]
	col_span = column_span_with_buffer_offsets_get(
    4902:	462a      	mov	r2, r5
    4904:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    4906:	3014      	adds	r0, #20
    4908:	f7ff fe3c 	bl	4584 <column_span_with_buffer_offsets_get>
						    shell->ctx->cmd_buff_pos,
						    new_pos);

	shell_op_cursor_vert_move(shell, -row_span);
    490c:	4279      	negs	r1, r7
	col_span = column_span_with_buffer_offsets_get(
    490e:	4606      	mov	r6, r0
	shell_op_cursor_vert_move(shell, -row_span);
    4910:	4620      	mov	r0, r4
    4912:	f7ff ff75 	bl	4800 <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, col_span);
    4916:	4631      	mov	r1, r6
    4918:	4620      	mov	r0, r4
    491a:	f7ff ff81 	bl	4820 <shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
    491e:	68a3      	ldr	r3, [r4, #8]
    4920:	851d      	strh	r5, [r3, #40]	; 0x28
}
    4922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004924 <reprint_from_cursor>:
	}
}

static void reprint_from_cursor(const struct shell *shell, u16_t diff,
				bool data_removed)
{
    4924:	b570      	push	{r4, r5, r6, lr}
    4926:	4604      	mov	r4, r0
    4928:	460d      	mov	r5, r1
	 * was called.
	 *
	 * Such condition is useful for Bluetooth devices to save number of
	 * bytes transmitted between terminal and device.
	 */
	if (data_removed) {
    492a:	4616      	mov	r6, r2
    492c:	b122      	cbz	r2, 4938 <reprint_from_cursor+0x14>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    492e:	4a11      	ldr	r2, [pc, #68]	; (4974 <reprint_from_cursor+0x50>)
    4930:	4911      	ldr	r1, [pc, #68]	; (4978 <reprint_from_cursor+0x54>)
    4932:	6940      	ldr	r0, [r0, #20]
    4934:	f7ff ff44 	bl	47c0 <shell_raw_fprintf>
		clear_eos(shell);
	}

	shell_fprintf(shell, SHELL_NORMAL, "%s",
			&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    4938:	68a2      	ldr	r2, [r4, #8]
	shell_fprintf(shell, SHELL_NORMAL, "%s",
    493a:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    493c:	332c      	adds	r3, #44	; 0x2c
    493e:	4413      	add	r3, r2
    4940:	4620      	mov	r0, r4
    4942:	4a0d      	ldr	r2, [pc, #52]	; (4978 <reprint_from_cursor+0x54>)
    4944:	2100      	movs	r1, #0
    4946:	f7fe ff0b 	bl	3760 <shell_fprintf>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    494a:	68a3      	ldr	r3, [r4, #8]
    494c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    494e:	851a      	strh	r2, [r3, #40]	; 0x28

	if (full_line_cmd(shell)) {
    4950:	4620      	mov	r0, r4
    4952:	f7ff ff42 	bl	47da <full_line_cmd>
    4956:	b128      	cbz	r0, 4964 <reprint_from_cursor+0x40>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    4958:	b106      	cbz	r6, 495c <reprint_from_cursor+0x38>
    495a:	b11d      	cbz	r5, 4964 <reprint_from_cursor+0x40>
	shell_raw_fprintf(shell->fprintf_ctx, "\r\n");
    495c:	4907      	ldr	r1, [pc, #28]	; (497c <reprint_from_cursor+0x58>)
    495e:	6960      	ldr	r0, [r4, #20]
    4960:	f7ff ff2e 	bl	47c0 <shell_raw_fprintf>
			cursor_next_line_move(shell);
		}
	}

	shell_op_cursor_move(shell, -diff);
    4964:	4269      	negs	r1, r5
    4966:	4620      	mov	r0, r4
    4968:	b209      	sxth	r1, r1
}
    496a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_op_cursor_move(shell, -diff);
    496e:	f7ff bfb5 	b.w	48dc <shell_op_cursor_move>
    4972:	bf00      	nop
    4974:	0002fe06 	.word	0x0002fe06
    4978:	0002fdfc 	.word	0x0002fdfc
    497c:	0002f8da 	.word	0x0002f8da

00004980 <data_insert>:

static void data_insert(const struct shell *shell, const char *data, u16_t len)
{
    4980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    4984:	6886      	ldr	r6, [r0, #8]
    4986:	8cf4      	ldrh	r4, [r6, #38]	; 0x26
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];

	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    4988:	18a3      	adds	r3, r4, r2
    498a:	2bff      	cmp	r3, #255	; 0xff
{
    498c:	4607      	mov	r7, r0
    498e:	4688      	mov	r8, r1
    4990:	4615      	mov	r5, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    4992:	dc1f      	bgt.n	49d4 <data_insert+0x54>
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    4994:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    4996:	1ae4      	subs	r4, r4, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    4998:	332c      	adds	r3, #44	; 0x2c
    499a:	441e      	add	r6, r3
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    499c:	b2a4      	uxth	r4, r4
		return;
	}

	memmove(curr_pos + len, curr_pos, after);
    499e:	4622      	mov	r2, r4
    49a0:	4631      	mov	r1, r6
    49a2:	1970      	adds	r0, r6, r5
    49a4:	f002 f959 	bl	6c5a <memmove>
	memcpy(curr_pos, data, len);
    49a8:	462a      	mov	r2, r5
    49aa:	4641      	mov	r1, r8
    49ac:	4630      	mov	r0, r6
    49ae:	f002 f96b 	bl	6c88 <memcpy>
	shell->ctx->cmd_buff_len += len;
    49b2:	68ba      	ldr	r2, [r7, #8]
    49b4:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
    49b6:	442b      	add	r3, r5
    49b8:	b29b      	uxth	r3, r3
    49ba:	84d3      	strh	r3, [r2, #38]	; 0x26
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    49bc:	4413      	add	r3, r2
    49be:	2200      	movs	r2, #0
    49c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	if (!flag_echo_is_set(shell)) {
    49c4:	68bb      	ldr	r3, [r7, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    49c6:	f8d3 124c 	ldr.w	r1, [r3, #588]	; 0x24c
    49ca:	0709      	lsls	r1, r1, #28
    49cc:	d404      	bmi.n	49d8 <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
    49ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    49d0:	4415      	add	r5, r2
    49d2:	851d      	strh	r5, [r3, #40]	; 0x28
		return;
	}

	reprint_from_cursor(shell, after, false);
}
    49d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
    49d8:	4621      	mov	r1, r4
    49da:	4638      	mov	r0, r7
}
    49dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
    49e0:	f7ff bfa0 	b.w	4924 <reprint_from_cursor>

000049e4 <shell_op_word_remove>:
{
    49e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    49e6:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
    49e8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
{
    49ea:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    49ec:	2a00      	cmp	r2, #0
    49ee:	d049      	beq.n	4a84 <shell_op_word_remove+0xa0>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    49f0:	8d18      	ldrh	r0, [r3, #40]	; 0x28
	if ((shell->ctx->cmd_buff_len == 0) ||
    49f2:	2800      	cmp	r0, #0
    49f4:	d046      	beq.n	4a84 <shell_op_word_remove+0xa0>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    49f6:	302b      	adds	r0, #43	; 0x2b
    49f8:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
    49fa:	f103 062c 	add.w	r6, r3, #44	; 0x2c
    49fe:	4603      	mov	r3, r0
    4a00:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    4a02:	42b3      	cmp	r3, r6
    4a04:	b2a4      	uxth	r4, r4
    4a06:	4619      	mov	r1, r3
    4a08:	d30e      	bcc.n	4a28 <shell_op_word_remove+0x44>
    4a0a:	7819      	ldrb	r1, [r3, #0]
    4a0c:	2920      	cmp	r1, #32
    4a0e:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
    4a12:	d035      	beq.n	4a80 <shell_op_word_remove+0x9c>
    4a14:	4619      	mov	r1, r3
    4a16:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
    4a18:	7808      	ldrb	r0, [r1, #0]
    4a1a:	2820      	cmp	r0, #32
    4a1c:	d004      	beq.n	4a28 <shell_op_word_remove+0x44>
		++chars_to_delete;
    4a1e:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
    4a20:	429e      	cmp	r6, r3
		++chars_to_delete;
    4a22:	b2a4      	uxth	r4, r4
		--str;
    4a24:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
    4a26:	d9f5      	bls.n	4a14 <shell_op_word_remove+0x30>
	memmove(str + 1, str + 1 + chars_to_delete,
    4a28:	1c63      	adds	r3, r4, #1
    4a2a:	1c4e      	adds	r6, r1, #1
    4a2c:	1b12      	subs	r2, r2, r4
    4a2e:	4419      	add	r1, r3
    4a30:	4630      	mov	r0, r6
    4a32:	f002 f912 	bl	6c5a <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    4a36:	68a9      	ldr	r1, [r5, #8]
    4a38:	8cca      	ldrh	r2, [r1, #38]	; 0x26
    4a3a:	1b12      	subs	r2, r2, r4
    4a3c:	b292      	uxth	r2, r2
    4a3e:	84ca      	strh	r2, [r1, #38]	; 0x26
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    4a40:	440a      	add	r2, r1
    4a42:	2700      	movs	r7, #0
	shell_op_cursor_move(shell, -chars_to_delete);
    4a44:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    4a46:	f882 702c 	strb.w	r7, [r2, #44]	; 0x2c
	shell_op_cursor_move(shell, -chars_to_delete);
    4a4a:	4628      	mov	r0, r5
    4a4c:	b209      	sxth	r1, r1
    4a4e:	f7ff ff45 	bl	48dc <shell_op_cursor_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
    4a52:	6968      	ldr	r0, [r5, #20]
    4a54:	4a0c      	ldr	r2, [pc, #48]	; (4a88 <shell_op_word_remove+0xa4>)
    4a56:	490d      	ldr	r1, [pc, #52]	; (4a8c <shell_op_word_remove+0xa8>)
    4a58:	f7ff feb2 	bl	47c0 <shell_raw_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    4a5c:	4633      	mov	r3, r6
    4a5e:	4639      	mov	r1, r7
    4a60:	4628      	mov	r0, r5
    4a62:	4a0a      	ldr	r2, [pc, #40]	; (4a8c <shell_op_word_remove+0xa8>)
    4a64:	f7fe fe7c 	bl	3760 <shell_fprintf>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    4a68:	6968      	ldr	r0, [r5, #20]
    4a6a:	4a09      	ldr	r2, [pc, #36]	; (4a90 <shell_op_word_remove+0xac>)
    4a6c:	4907      	ldr	r1, [pc, #28]	; (4a8c <shell_op_word_remove+0xa8>)
    4a6e:	f7ff fea7 	bl	47c0 <shell_raw_fprintf>
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
    4a72:	6968      	ldr	r0, [r5, #20]
    4a74:	4a07      	ldr	r2, [pc, #28]	; (4a94 <shell_op_word_remove+0xb0>)
    4a76:	4905      	ldr	r1, [pc, #20]	; (4a8c <shell_op_word_remove+0xa8>)
}
    4a78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4a7c:	f7ff bea0 	b.w	47c0 <shell_raw_fprintf>
    4a80:	463b      	mov	r3, r7
    4a82:	e7bd      	b.n	4a00 <shell_op_word_remove+0x1c>
    4a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a86:	bf00      	nop
    4a88:	0002fe0a 	.word	0x0002fe0a
    4a8c:	0002fdfc 	.word	0x0002fdfc
    4a90:	0002fe06 	.word	0x0002fe06
    4a94:	0002fe0d 	.word	0x0002fe0d

00004a98 <shell_op_cursor_home_move>:
	shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
    4a98:	6883      	ldr	r3, [r0, #8]
    4a9a:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    4a9c:	4249      	negs	r1, r1
    4a9e:	b209      	sxth	r1, r1
    4aa0:	f7ff bf1c 	b.w	48dc <shell_op_cursor_move>

00004aa4 <shell_op_cursor_end_move>:
	shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
    4aa4:	6883      	ldr	r3, [r0, #8]
    4aa6:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
    4aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4aaa:	1ac9      	subs	r1, r1, r3
    4aac:	b209      	sxth	r1, r1
    4aae:	f7ff bf15 	b.w	48dc <shell_op_cursor_move>

00004ab2 <shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
    4ab2:	6883      	ldr	r3, [r0, #8]
    4ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4ab6:	b11b      	cbz	r3, 4ac0 <shell_op_left_arrow+0xe>
		shell_op_cursor_move(shell, -1);
    4ab8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4abc:	f7ff bf0e 	b.w	48dc <shell_op_cursor_move>
}
    4ac0:	4770      	bx	lr

00004ac2 <shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
    4ac2:	6883      	ldr	r3, [r0, #8]
    4ac4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    4ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4ac8:	429a      	cmp	r2, r3
    4aca:	d202      	bcs.n	4ad2 <shell_op_right_arrow+0x10>
		shell_op_cursor_move(shell, 1);
    4acc:	2101      	movs	r1, #1
    4ace:	f7ff bf05 	b.w	48dc <shell_op_cursor_move>
}
    4ad2:	4770      	bx	lr

00004ad4 <char_replace>:

void char_replace(const struct shell *shell, char data)
{
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    4ad4:	6883      	ldr	r3, [r0, #8]
{
    4ad6:	460a      	mov	r2, r1
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    4ad8:	8d19      	ldrh	r1, [r3, #40]	; 0x28
{
    4ada:	b510      	push	{r4, lr}
    4adc:	4604      	mov	r4, r0
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    4ade:	1c48      	adds	r0, r1, #1
    4ae0:	8518      	strh	r0, [r3, #40]	; 0x28
    4ae2:	440b      	add	r3, r1
	shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    4ae4:	4908      	ldr	r1, [pc, #32]	; (4b08 <char_replace+0x34>)
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    4ae6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    4aea:	6960      	ldr	r0, [r4, #20]
    4aec:	f7ff fe68 	bl	47c0 <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell)) {
    4af0:	4620      	mov	r0, r4
    4af2:	f7ff fea5 	bl	4840 <shell_cursor_in_empty_line>
    4af6:	b128      	cbz	r0, 4b04 <char_replace+0x30>
	shell_raw_fprintf(shell->fprintf_ctx, "\r\n");
    4af8:	6960      	ldr	r0, [r4, #20]
    4afa:	4904      	ldr	r1, [pc, #16]	; (4b0c <char_replace+0x38>)
		cursor_next_line_move(shell);
	}
}
    4afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b00:	f7ff be5e 	b.w	47c0 <shell_raw_fprintf>
    4b04:	bd10      	pop	{r4, pc}
    4b06:	bf00      	nop
    4b08:	0002fe14 	.word	0x0002fe14
    4b0c:	0002f8da 	.word	0x0002f8da

00004b10 <shell_op_char_insert>:

void shell_op_char_insert(const struct shell *shell, char data)
{
    4b10:	b513      	push	{r0, r1, r4, lr}
	if (shell->ctx->internal.flags.insert_mode &&
    4b12:	6883      	ldr	r3, [r0, #8]
{
    4b14:	f88d 1007 	strb.w	r1, [sp, #7]
	if (shell->ctx->internal.flags.insert_mode &&
    4b18:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
    4b1c:	07d2      	lsls	r2, r2, #31
{
    4b1e:	4604      	mov	r4, r0
	if (shell->ctx->internal.flags.insert_mode &&
    4b20:	d508      	bpl.n	4b34 <shell_op_char_insert+0x24>
    4b22:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    4b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b26:	429a      	cmp	r2, r3
    4b28:	d004      	beq.n	4b34 <shell_op_char_insert+0x24>
		(shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
		char_replace(shell, data);
    4b2a:	b2c9      	uxtb	r1, r1
    4b2c:	f7ff ffd2 	bl	4ad4 <char_replace>
	} else {
		data_insert(shell, &data, 1);
	}
}
    4b30:	b002      	add	sp, #8
    4b32:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    4b34:	2201      	movs	r2, #1
    4b36:	f10d 0107 	add.w	r1, sp, #7
    4b3a:	4620      	mov	r0, r4
    4b3c:	f7ff ff20 	bl	4980 <data_insert>
}
    4b40:	e7f6      	b.n	4b30 <shell_op_char_insert+0x20>

00004b42 <shell_op_char_delete>:
	shell_op_cursor_move(shell, -1);
	shell_op_char_delete(shell);
}

void shell_op_char_delete(const struct shell *shell)
{
    4b42:	b538      	push	{r3, r4, r5, lr}
    4b44:	4605      	mov	r5, r0
	u16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    4b46:	6880      	ldr	r0, [r0, #8]
    4b48:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    4b4a:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
    4b4c:	1ae4      	subs	r4, r4, r3
    4b4e:	b2a4      	uxth	r4, r4
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];

	if (diff == 0) {
    4b50:	b18c      	cbz	r4, 4b76 <shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    4b52:	332c      	adds	r3, #44	; 0x2c
    4b54:	4418      	add	r0, r3
		return;
	}

	memmove(str, str + 1, diff);
    4b56:	4622      	mov	r2, r4
    4b58:	1c41      	adds	r1, r0, #1
    4b5a:	f002 f87e 	bl	6c5a <memmove>
	--shell->ctx->cmd_buff_len;
    4b5e:	68aa      	ldr	r2, [r5, #8]
    4b60:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
	reprint_from_cursor(shell, --diff, true);
    4b62:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
    4b64:	3b01      	subs	r3, #1
    4b66:	84d3      	strh	r3, [r2, #38]	; 0x26
	reprint_from_cursor(shell, --diff, true);
    4b68:	4628      	mov	r0, r5
    4b6a:	2201      	movs	r2, #1
    4b6c:	b289      	uxth	r1, r1
}
    4b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
    4b72:	f7ff bed7 	b.w	4924 <reprint_from_cursor>
}
    4b76:	bd38      	pop	{r3, r4, r5, pc}

00004b78 <shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
    4b78:	6883      	ldr	r3, [r0, #8]
    4b7a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
{
    4b7c:	b510      	push	{r4, lr}
    4b7e:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    4b80:	b152      	cbz	r2, 4b98 <shell_op_char_backspace+0x20>
    4b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b84:	b143      	cbz	r3, 4b98 <shell_op_char_backspace+0x20>
	shell_op_cursor_move(shell, -1);
    4b86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4b8a:	f7ff fea7 	bl	48dc <shell_op_cursor_move>
	shell_op_char_delete(shell);
    4b8e:	4620      	mov	r0, r4
}
    4b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_op_char_delete(shell);
    4b94:	f7ff bfd5 	b.w	4b42 <shell_op_char_delete>
}
    4b98:	bd10      	pop	{r4, pc}

00004b9a <shell_op_completion_insert>:

void shell_op_completion_insert(const struct shell *shell,
				const char *compl,
				u16_t compl_len)
{
	data_insert(shell, compl, compl_len);
    4b9a:	f7ff bef1 	b.w	4980 <data_insert>

00004b9e <timer_handler>:
SHELL_UART_DEFINE(shell_transport_uart);
SHELL_DEFINE(uart_shell, "uart:~$ ", &shell_transport_uart, 10,
	     SHELL_FLAG_OLF_CRLF);

static void timer_handler(struct k_timer *timer)
{
    4b9e:	b510      	push	{r4, lr}
    4ba0:	4604      	mov	r4, r0
	struct shell_uart *sh_uart =
			CONTAINER_OF(timer, struct shell_uart, timer);

	if (uart_poll_in(sh_uart->dev, sh_uart->rx) == 0) {
    4ba2:	f850 0c08 	ldr.w	r0, [r0, #-8]
	return api->poll_in(dev, p_char);
    4ba6:	6843      	ldr	r3, [r0, #4]
    4ba8:	f104 0130 	add.w	r1, r4, #48	; 0x30
    4bac:	681b      	ldr	r3, [r3, #0]
    4bae:	4798      	blx	r3
    4bb0:	b938      	cbnz	r0, 4bc2 <timer_handler+0x24>
		sh_uart->rx_cnt = 1;
    4bb2:	2301      	movs	r3, #1
    4bb4:	6363      	str	r3, [r4, #52]	; 0x34
		sh_uart->handler(SHELL_TRANSPORT_EVT_RX_RDY, sh_uart->context);
    4bb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4bb8:	f854 3c04 	ldr.w	r3, [r4, #-4]
	}
}
    4bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sh_uart->handler(SHELL_TRANSPORT_EVT_RX_RDY, sh_uart->context);
    4bc0:	4718      	bx	r3
}
    4bc2:	bd10      	pop	{r4, pc}

00004bc4 <uninit>:
}

static int uninit(const struct shell_transport *transport)
{
	return 0;
}
    4bc4:	2000      	movs	r0, #0
    4bc6:	4770      	bx	lr

00004bc8 <enable>:

static int enable(const struct shell_transport *transport, bool blocking)
{
	return 0;
}
    4bc8:	2000      	movs	r0, #0
    4bca:	4770      	bx	lr

00004bcc <write>:

static int write(const struct shell_transport *transport,
		 const void *data, size_t length, size_t *cnt)
{
    4bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    4bd0:	6845      	ldr	r5, [r0, #4]
{
    4bd2:	4616      	mov	r6, r2
    4bd4:	461f      	mov	r7, r3
    4bd6:	460c      	mov	r4, r1
    4bd8:	eb01 0802 	add.w	r8, r1, r2
	const u8_t *data8 = (const u8_t *)data;

	for (size_t i = 0; i < length; i++) {
    4bdc:	45a0      	cmp	r8, r4
    4bde:	d107      	bne.n	4bf0 <write+0x24>
		uart_poll_out(sh_uart->dev, data8[i]);
	}

	*cnt = length;
    4be0:	603e      	str	r6, [r7, #0]

	sh_uart->handler(SHELL_TRANSPORT_EVT_TX_RDY, sh_uart->context);
    4be2:	686b      	ldr	r3, [r5, #4]
    4be4:	6b69      	ldr	r1, [r5, #52]	; 0x34
    4be6:	2001      	movs	r0, #1
    4be8:	4798      	blx	r3

	return 0;
}
    4bea:	2000      	movs	r0, #0
    4bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uart_poll_out(sh_uart->dev, data8[i]);
    4bf0:	6828      	ldr	r0, [r5, #0]
	return api->poll_out(dev, out_char);
    4bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
    4bf6:	6843      	ldr	r3, [r0, #4]
    4bf8:	685b      	ldr	r3, [r3, #4]
    4bfa:	4798      	blx	r3
    4bfc:	e7ee      	b.n	4bdc <write+0x10>

00004bfe <read>:

static int read(const struct shell_transport *transport,
		void *data, size_t length, size_t *cnt)
{
    4bfe:	b570      	push	{r4, r5, r6, lr}
	struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    4c00:	6844      	ldr	r4, [r0, #4]
{
    4c02:	461d      	mov	r5, r3

	if (sh_uart->rx_cnt) {
    4c04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
{
    4c06:	460e      	mov	r6, r1
	if (sh_uart->rx_cnt) {
    4c08:	b143      	cbz	r3, 4c1c <read+0x1e>
		memcpy(data, sh_uart->rx, 1);
    4c0a:	2201      	movs	r2, #1
    4c0c:	f104 0138 	add.w	r1, r4, #56	; 0x38
    4c10:	4630      	mov	r0, r6
    4c12:	f002 f839 	bl	6c88 <memcpy>
		sh_uart->rx_cnt = 0;
    4c16:	2300      	movs	r3, #0
    4c18:	63e3      	str	r3, [r4, #60]	; 0x3c
		*cnt = 1;
    4c1a:	2301      	movs	r3, #1
	} else {
		*cnt = 0;
    4c1c:	602b      	str	r3, [r5, #0]
	}

	return 0;
}
    4c1e:	2000      	movs	r0, #0
    4c20:	bd70      	pop	{r4, r5, r6, pc}
	...

00004c24 <init>:
{
    4c24:	b570      	push	{r4, r5, r6, lr}
	struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    4c26:	6844      	ldr	r4, [r0, #4]
	sh_uart->dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    4c28:	480a      	ldr	r0, [pc, #40]	; (4c54 <init+0x30>)
{
    4c2a:	461d      	mov	r5, r3
    4c2c:	4616      	mov	r6, r2
	sh_uart->dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    4c2e:	f028 fc2b 	bl	2d488 <device_get_binding>
	sh_uart->context = context;
    4c32:	6365      	str	r5, [r4, #52]	; 0x34
	sh_uart->handler = evt_handler;
    4c34:	e9c4 0600 	strd	r0, r6, [r4]
	k_timer_init(&sh_uart->timer, timer_handler, NULL);
    4c38:	3408      	adds	r4, #8
    4c3a:	4620      	mov	r0, r4
    4c3c:	2200      	movs	r2, #0
    4c3e:	4906      	ldr	r1, [pc, #24]	; (4c58 <init+0x34>)
    4c40:	f029 ff24 	bl	2ea8c <k_timer_init>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period)
    4c44:	2214      	movs	r2, #20
    4c46:	4620      	mov	r0, r4
    4c48:	4611      	mov	r1, r2
    4c4a:	f029 ff2d 	bl	2eaa8 <_impl_k_timer_start>
}
    4c4e:	2000      	movs	r0, #0
    4c50:	bd70      	pop	{r4, r5, r6, pc}
    4c52:	bf00      	nop
    4c54:	0002f86c 	.word	0x0002f86c
    4c58:	00004b9f 	.word	0x00004b9f

00004c5c <enable_shell_uart>:
	.write = write,
	.read = read
};

static int enable_shell_uart(struct device *arg)
{
    4c5c:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(arg);
	shell_init(&uart_shell, NULL, true, true, LOG_LEVEL_INF);
    4c5e:	2303      	movs	r3, #3
    4c60:	9300      	str	r3, [sp, #0]
    4c62:	2301      	movs	r3, #1
    4c64:	461a      	mov	r2, r3
    4c66:	2100      	movs	r1, #0
    4c68:	4803      	ldr	r0, [pc, #12]	; (4c78 <enable_shell_uart+0x1c>)
    4c6a:	f7fe fd17 	bl	369c <shell_init>
	return 0;
}
    4c6e:	2000      	movs	r0, #0
    4c70:	b003      	add	sp, #12
    4c72:	f85d fb04 	ldr.w	pc, [sp], #4
    4c76:	bf00      	nop
    4c78:	0002fe50 	.word	0x0002fe50

00004c7c <cmd_shell_stats_reset>:
	if (!IS_ENABLED(CONFIG_SHELL_STATS)) {
		shell_fprintf(shell, SHELL_ERROR, "Command not supported.\n");
		return -ENOEXEC;
	}

	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4c7c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    4c80:	f1dc 0100 	rsbs	r1, ip, #0
    4c84:	f04f 0300 	mov.w	r3, #0
{
    4c88:	b510      	push	{r4, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4c8a:	eb41 010c 	adc.w	r1, r1, ip
    4c8e:	461a      	mov	r2, r3
{
    4c90:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4c92:	f7ff fc0b 	bl	44ac <shell_cmd_precheck>

	if (ret == 0) {
    4c96:	b908      	cbnz	r0, 4c9c <cmd_shell_stats_reset+0x20>
		shell->stats->log_lost_cnt = 0;
    4c98:	69a3      	ldr	r3, [r4, #24]
    4c9a:	6018      	str	r0, [r3, #0]
	}

	return ret;
}
    4c9c:	bd10      	pop	{r4, pc}

00004c9e <cmd_echo_on>:
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4c9e:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    4ca2:	f1dc 0100 	rsbs	r1, ip, #0
    4ca6:	f04f 0300 	mov.w	r3, #0
{
    4caa:	b510      	push	{r4, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4cac:	eb41 010c 	adc.w	r1, r1, ip
    4cb0:	461a      	mov	r2, r3
{
    4cb2:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4cb4:	f7ff fbfa 	bl	44ac <shell_cmd_precheck>
	if (ret == 0) {
    4cb8:	b930      	cbnz	r0, 4cc8 <cmd_echo_on+0x2a>
		shell->ctx->internal.flags.echo = 1;
    4cba:	68a2      	ldr	r2, [r4, #8]
    4cbc:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    4cc0:	f043 0308 	orr.w	r3, r3, #8
    4cc4:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
}
    4cc8:	bd10      	pop	{r4, pc}

00004cca <cmd_echo_off>:
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4cca:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    4cce:	f1dc 0100 	rsbs	r1, ip, #0
    4cd2:	f04f 0300 	mov.w	r3, #0
{
    4cd6:	b510      	push	{r4, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4cd8:	eb41 010c 	adc.w	r1, r1, ip
    4cdc:	461a      	mov	r2, r3
{
    4cde:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4ce0:	f7ff fbe4 	bl	44ac <shell_cmd_precheck>
	if (ret == 0) {
    4ce4:	b930      	cbnz	r0, 4cf4 <cmd_echo_off+0x2a>
		shell->ctx->internal.flags.echo = 0;
    4ce6:	68a2      	ldr	r2, [r4, #8]
    4ce8:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    4cec:	f360 03c3 	bfi	r3, r0, #3, #1
    4cf0:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
}
    4cf4:	bd10      	pop	{r4, pc}

00004cf6 <cmd_colors_on>:
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4cf6:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    4cfa:	f1dc 0100 	rsbs	r1, ip, #0
    4cfe:	f04f 0300 	mov.w	r3, #0
{
    4d02:	b510      	push	{r4, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4d04:	eb41 010c 	adc.w	r1, r1, ip
    4d08:	461a      	mov	r2, r3
{
    4d0a:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4d0c:	f7ff fbce 	bl	44ac <shell_cmd_precheck>
	if (ret == 0) {
    4d10:	b930      	cbnz	r0, 4d20 <cmd_colors_on+0x2a>
		shell->ctx->internal.flags.use_colors = 1;
    4d12:	68a2      	ldr	r2, [r4, #8]
    4d14:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    4d18:	f043 0304 	orr.w	r3, r3, #4
    4d1c:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
}
    4d20:	bd10      	pop	{r4, pc}

00004d22 <cmd_colors_off>:
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4d22:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    4d26:	f1dc 0100 	rsbs	r1, ip, #0
    4d2a:	f04f 0300 	mov.w	r3, #0
{
    4d2e:	b510      	push	{r4, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4d30:	eb41 010c 	adc.w	r1, r1, ip
    4d34:	461a      	mov	r2, r3
{
    4d36:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4d38:	f7ff fbb8 	bl	44ac <shell_cmd_precheck>
	if (ret == 0) {
    4d3c:	b930      	cbnz	r0, 4d4c <cmd_colors_off+0x2a>
		shell->ctx->internal.flags.use_colors = 0;
    4d3e:	68a2      	ldr	r2, [r4, #8]
    4d40:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    4d44:	f360 0382 	bfi	r3, r0, #2, #1
    4d48:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
}
    4d4c:	bd10      	pop	{r4, pc}

00004d4e <cmd_bacskpace_mode_delete>:
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4d4e:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    4d52:	f1dc 0100 	rsbs	r1, ip, #0
    4d56:	f04f 0300 	mov.w	r3, #0
{
    4d5a:	b510      	push	{r4, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4d5c:	eb41 010c 	adc.w	r1, r1, ip
    4d60:	461a      	mov	r2, r3
{
    4d62:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4d64:	f7ff fba2 	bl	44ac <shell_cmd_precheck>
	if (ret == 0) {
    4d68:	b930      	cbnz	r0, 4d78 <cmd_bacskpace_mode_delete+0x2a>
		shell->ctx->internal.flags.mode_delete = 1;
    4d6a:	68a2      	ldr	r2, [r4, #8]
    4d6c:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    4d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4d74:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
}
    4d78:	bd10      	pop	{r4, pc}

00004d7a <cmd_bacskpace_mode_backspace>:
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4d7a:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    4d7e:	f1dc 0100 	rsbs	r1, ip, #0
    4d82:	f04f 0300 	mov.w	r3, #0
{
    4d86:	b510      	push	{r4, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4d88:	eb41 010c 	adc.w	r1, r1, ip
    4d8c:	461a      	mov	r2, r3
{
    4d8e:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4d90:	f7ff fb8c 	bl	44ac <shell_cmd_precheck>
	if (ret == 0) {
    4d94:	b930      	cbnz	r0, 4da4 <cmd_bacskpace_mode_backspace+0x2a>
		shell->ctx->internal.flags.mode_delete = 0;
    4d96:	68a2      	ldr	r2, [r4, #8]
    4d98:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    4d9c:	f360 1386 	bfi	r3, r0, #6, #1
    4da0:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
}
    4da4:	bd10      	pop	{r4, pc}

00004da6 <shell_raw_fprintf>:
{
    4da6:	b40e      	push	{r1, r2, r3}
    4da8:	b503      	push	{r0, r1, lr}
    4daa:	aa03      	add	r2, sp, #12
    4dac:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    4db0:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    4db2:	f7ff fba9 	bl	4508 <shell_fprintf_fmt>
}
    4db6:	b002      	add	sp, #8
    4db8:	f85d eb04 	ldr.w	lr, [sp], #4
    4dbc:	b003      	add	sp, #12
    4dbe:	4770      	bx	lr

00004dc0 <cmd_help>:
{
    4dc0:	b508      	push	{r3, lr}
	shell_fprintf(shell, SHELL_NORMAL,
    4dc2:	4a03      	ldr	r2, [pc, #12]	; (4dd0 <cmd_help+0x10>)
    4dc4:	2100      	movs	r1, #0
    4dc6:	f7fe fccb 	bl	3760 <shell_fprintf>
}
    4dca:	2000      	movs	r0, #0
    4dcc:	bd08      	pop	{r3, pc}
    4dce:	bf00      	nop
    4dd0:	0002fedf 	.word	0x0002fedf

00004dd4 <cmd_clear>:
{
    4dd4:	b538      	push	{r3, r4, r5, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4dd6:	1e4c      	subs	r4, r1, #1
    4dd8:	4261      	negs	r1, r4
    4dda:	f04f 0300 	mov.w	r3, #0
    4dde:	4161      	adcs	r1, r4
    4de0:	461a      	mov	r2, r3
{
    4de2:	4605      	mov	r5, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4de4:	f7ff fb62 	bl	44ac <shell_cmd_precheck>
	if (ret) {
    4de8:	4604      	mov	r4, r0
    4dea:	b948      	cbnz	r0, 4e00 <cmd_clear+0x2c>
	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    4dec:	4a05      	ldr	r2, [pc, #20]	; (4e04 <cmd_clear+0x30>)
    4dee:	4906      	ldr	r1, [pc, #24]	; (4e08 <cmd_clear+0x34>)
    4df0:	6968      	ldr	r0, [r5, #20]
    4df2:	f7ff ffd8 	bl	4da6 <shell_raw_fprintf>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    4df6:	4a05      	ldr	r2, [pc, #20]	; (4e0c <cmd_clear+0x38>)
    4df8:	4903      	ldr	r1, [pc, #12]	; (4e08 <cmd_clear+0x34>)
    4dfa:	6968      	ldr	r0, [r5, #20]
    4dfc:	f7ff ffd3 	bl	4da6 <shell_raw_fprintf>
}
    4e00:	4620      	mov	r0, r4
    4e02:	bd38      	pop	{r3, r4, r5, pc}
    4e04:	0002feb6 	.word	0x0002feb6
    4e08:	0002fdfc 	.word	0x0002fdfc
    4e0c:	0002feba 	.word	0x0002feba

00004e10 <cmd_resize_default>:
	return -EINVAL;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    4e10:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(argv);

	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4e12:	1e4c      	subs	r4, r1, #1
    4e14:	4261      	negs	r1, r4
    4e16:	f04f 0300 	mov.w	r3, #0
    4e1a:	4161      	adcs	r1, r4
    4e1c:	461a      	mov	r2, r3
{
    4e1e:	4605      	mov	r5, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4e20:	f7ff fb44 	bl	44ac <shell_cmd_precheck>

	if (ret == 0) {
    4e24:	4604      	mov	r4, r0
    4e26:	b938      	cbnz	r0, 4e38 <cmd_resize_default+0x28>
		SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    4e28:	4a04      	ldr	r2, [pc, #16]	; (4e3c <cmd_resize_default+0x2c>)
    4e2a:	4905      	ldr	r1, [pc, #20]	; (4e40 <cmd_resize_default+0x30>)
    4e2c:	6968      	ldr	r0, [r5, #20]
    4e2e:	f7ff ffba 	bl	4da6 <shell_raw_fprintf>
		shell->ctx->vt100_ctx.cons.terminal_wid =
						   SHELL_DEFAULT_TERMINAL_WIDTH;
		shell->ctx->vt100_ctx.cons.terminal_hei =
    4e32:	68ab      	ldr	r3, [r5, #8]
    4e34:	4a03      	ldr	r2, [pc, #12]	; (4e44 <cmd_resize_default+0x34>)
    4e36:	61da      	str	r2, [r3, #28]
						  SHELL_DEFAULT_TERMINAL_HEIGHT;
	}

	return ret;
}
    4e38:	4620      	mov	r0, r4
    4e3a:	bd38      	pop	{r3, r4, r5, pc}
    4e3c:	0002febf 	.word	0x0002febf
    4e40:	0002fdfc 	.word	0x0002fdfc
    4e44:	00500018 	.word	0x00500018

00004e48 <cmd_bacskpace_mode.part.10>:
static int cmd_shell(const struct shell *shell, size_t argc, char **argv)
    4e48:	b507      	push	{r0, r1, r2, lr}
	shell_fprintf(shell, SHELL_ERROR, "%s:%s%s\n", argv[0],
    4e4a:	684b      	ldr	r3, [r1, #4]
    4e4c:	9301      	str	r3, [sp, #4]
    4e4e:	4b06      	ldr	r3, [pc, #24]	; (4e68 <cmd_bacskpace_mode.part.10+0x20>)
    4e50:	9300      	str	r3, [sp, #0]
    4e52:	680b      	ldr	r3, [r1, #0]
    4e54:	4a05      	ldr	r2, [pc, #20]	; (4e6c <cmd_bacskpace_mode.part.10+0x24>)
    4e56:	2102      	movs	r1, #2
    4e58:	f7fe fc82 	bl	3760 <shell_fprintf>
}
    4e5c:	f06f 0015 	mvn.w	r0, #21
    4e60:	b003      	add	sp, #12
    4e62:	f85d fb04 	ldr.w	pc, [sp], #4
    4e66:	bf00      	nop
    4e68:	0002f89f 	.word	0x0002f89f
    4e6c:	00030011 	.word	0x00030011

00004e70 <cmd_shell>:
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4e70:	f1a1 0c02 	sub.w	ip, r1, #2
{
    4e74:	b538      	push	{r3, r4, r5, lr}
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4e76:	f1dc 0100 	rsbs	r1, ip, #0
    4e7a:	f04f 0300 	mov.w	r3, #0
{
    4e7e:	4615      	mov	r5, r2
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4e80:	eb41 010c 	adc.w	r1, r1, ip
    4e84:	461a      	mov	r2, r3
{
    4e86:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4e88:	f7ff fb10 	bl	44ac <shell_cmd_precheck>
	if (ret) {
    4e8c:	b928      	cbnz	r0, 4e9a <cmd_shell+0x2a>
    4e8e:	4629      	mov	r1, r5
    4e90:	4620      	mov	r0, r4
}
    4e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4e96:	f7ff bfd7 	b.w	4e48 <cmd_bacskpace_mode.part.10>
    4e9a:	bd38      	pop	{r3, r4, r5, pc}

00004e9c <cmd_shell_stats_show>:
{
    4e9c:	b538      	push	{r3, r4, r5, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4e9e:	1e4c      	subs	r4, r1, #1
    4ea0:	4261      	negs	r1, r4
    4ea2:	f04f 0300 	mov.w	r3, #0
    4ea6:	4161      	adcs	r1, r4
    4ea8:	461a      	mov	r2, r3
{
    4eaa:	4605      	mov	r5, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4eac:	f7ff fafe 	bl	44ac <shell_cmd_precheck>
	if (ret == 0) {
    4eb0:	4604      	mov	r4, r0
    4eb2:	b930      	cbnz	r0, 4ec2 <cmd_shell_stats_show+0x26>
		shell_fprintf(shell, SHELL_NORMAL, "Lost logs: %u\n",
    4eb4:	69ab      	ldr	r3, [r5, #24]
    4eb6:	4a04      	ldr	r2, [pc, #16]	; (4ec8 <cmd_shell_stats_show+0x2c>)
    4eb8:	681b      	ldr	r3, [r3, #0]
    4eba:	4601      	mov	r1, r0
    4ebc:	4628      	mov	r0, r5
    4ebe:	f7fe fc4f 	bl	3760 <shell_fprintf>
}
    4ec2:	4620      	mov	r0, r4
    4ec4:	bd38      	pop	{r3, r4, r5, pc}
    4ec6:	bf00      	nop
    4ec8:	0003001a 	.word	0x0003001a

00004ecc <cmd_echo>:
{
    4ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int ret = shell_cmd_precheck(shell, (argc <= 2), NULL, 0);
    4ece:	2902      	cmp	r1, #2
    4ed0:	f04f 0300 	mov.w	r3, #0
{
    4ed4:	460e      	mov	r6, r1
    4ed6:	4617      	mov	r7, r2
	int ret = shell_cmd_precheck(shell, (argc <= 2), NULL, 0);
    4ed8:	bf88      	it	hi
    4eda:	2100      	movhi	r1, #0
    4edc:	461a      	mov	r2, r3
    4ede:	bf98      	it	ls
    4ee0:	2101      	movls	r1, #1
{
    4ee2:	4605      	mov	r5, r0
	int ret = shell_cmd_precheck(shell, (argc <= 2), NULL, 0);
    4ee4:	f7ff fae2 	bl	44ac <shell_cmd_precheck>
	if (ret) {
    4ee8:	4604      	mov	r4, r0
    4eea:	b9a8      	cbnz	r0, 4f18 <cmd_echo+0x4c>
	if (argc == 2) {
    4eec:	2e02      	cmp	r6, #2
    4eee:	d105      	bne.n	4efc <cmd_echo+0x30>
    4ef0:	4639      	mov	r1, r7
    4ef2:	4628      	mov	r0, r5
}
    4ef4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4ef8:	f7ff bfa6 	b.w	4e48 <cmd_bacskpace_mode.part.10>
		      flag_echo_is_set(shell) ? "on" : "off");
    4efc:	68ab      	ldr	r3, [r5, #8]
	shell_fprintf(shell, SHELL_NORMAL, "Echo status: %s\n",
    4efe:	4a07      	ldr	r2, [pc, #28]	; (4f1c <cmd_echo+0x50>)
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    4f00:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
    4f04:	f013 0f08 	tst.w	r3, #8
    4f08:	4601      	mov	r1, r0
    4f0a:	4b05      	ldr	r3, [pc, #20]	; (4f20 <cmd_echo+0x54>)
    4f0c:	4628      	mov	r0, r5
    4f0e:	bf18      	it	ne
    4f10:	4613      	movne	r3, r2
    4f12:	4a04      	ldr	r2, [pc, #16]	; (4f24 <cmd_echo+0x58>)
    4f14:	f7fe fc24 	bl	3760 <shell_fprintf>
}
    4f18:	4620      	mov	r0, r4
    4f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f1c:	0003201f 	.word	0x0003201f
    4f20:	0002fec5 	.word	0x0002fec5
    4f24:	0002fec9 	.word	0x0002fec9

00004f28 <cmd_colors>:
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4f28:	f1a1 0c02 	sub.w	ip, r1, #2
{
    4f2c:	b538      	push	{r3, r4, r5, lr}
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4f2e:	f1dc 0100 	rsbs	r1, ip, #0
    4f32:	f04f 0300 	mov.w	r3, #0
{
    4f36:	4615      	mov	r5, r2
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4f38:	eb41 010c 	adc.w	r1, r1, ip
    4f3c:	461a      	mov	r2, r3
{
    4f3e:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4f40:	f7ff fab4 	bl	44ac <shell_cmd_precheck>
	if (ret) {
    4f44:	b928      	cbnz	r0, 4f52 <cmd_colors+0x2a>
    4f46:	4629      	mov	r1, r5
    4f48:	4620      	mov	r0, r4
}
    4f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4f4e:	f7ff bf7b 	b.w	4e48 <cmd_bacskpace_mode.part.10>
    4f52:	bd38      	pop	{r3, r4, r5, pc}

00004f54 <cmd_bacskpace_mode>:
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4f54:	f1a1 0c02 	sub.w	ip, r1, #2
{
    4f58:	b538      	push	{r3, r4, r5, lr}
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4f5a:	f1dc 0100 	rsbs	r1, ip, #0
    4f5e:	f04f 0300 	mov.w	r3, #0
{
    4f62:	4615      	mov	r5, r2
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4f64:	eb41 010c 	adc.w	r1, r1, ip
    4f68:	461a      	mov	r2, r3
{
    4f6a:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4f6c:	f7ff fa9e 	bl	44ac <shell_cmd_precheck>
	if (ret) {
    4f70:	b928      	cbnz	r0, 4f7e <cmd_bacskpace_mode+0x2a>
    4f72:	4629      	mov	r1, r5
    4f74:	4620      	mov	r0, r4
}
    4f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4f7a:	f7ff bf65 	b.w	4e48 <cmd_bacskpace_mode.part.10>
    4f7e:	bd38      	pop	{r3, r4, r5, pc}

00004f80 <cmd_shell_stats>:
{
    4f80:	b507      	push	{r0, r1, r2, lr}
	if (shell_help_requested(shell)) {
    4f82:	6883      	ldr	r3, [r0, #8]
    4f84:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
    4f88:	f3c3 0340 	ubfx	r3, r3, #1, #1
    4f8c:	b13b      	cbz	r3, 4f9e <cmd_shell_stats+0x1e>
		shell_help_print(shell, NULL, 0);
    4f8e:	2200      	movs	r2, #0
    4f90:	4611      	mov	r1, r2
    4f92:	f7fe fce9 	bl	3968 <shell_help_print>
		return 1;
    4f96:	2001      	movs	r0, #1
}
    4f98:	b003      	add	sp, #12
    4f9a:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (argc == 1) {
    4f9e:	2901      	cmp	r1, #1
    4fa0:	d106      	bne.n	4fb0 <cmd_shell_stats+0x30>
		shell_help_print(shell, NULL, 0);
    4fa2:	461a      	mov	r2, r3
    4fa4:	4619      	mov	r1, r3
    4fa6:	f7fe fcdf 	bl	3968 <shell_help_print>
	return -EINVAL;
    4faa:	f06f 0015 	mvn.w	r0, #21
    4fae:	e7f3      	b.n	4f98 <cmd_shell_stats+0x18>
		shell_fprintf(shell, SHELL_ERROR, "%s:%s%s\n", argv[0],
    4fb0:	6853      	ldr	r3, [r2, #4]
    4fb2:	9301      	str	r3, [sp, #4]
    4fb4:	4b03      	ldr	r3, [pc, #12]	; (4fc4 <cmd_shell_stats+0x44>)
    4fb6:	9300      	str	r3, [sp, #0]
    4fb8:	6813      	ldr	r3, [r2, #0]
    4fba:	4a03      	ldr	r2, [pc, #12]	; (4fc8 <cmd_shell_stats+0x48>)
    4fbc:	2102      	movs	r1, #2
    4fbe:	f7fe fbcf 	bl	3760 <shell_fprintf>
    4fc2:	e7f2      	b.n	4faa <cmd_shell_stats+0x2a>
    4fc4:	0002f89f 	.word	0x0002f89f
    4fc8:	00030011 	.word	0x00030011

00004fcc <cmd_history>:
{
    4fcc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4fd0:	1e4d      	subs	r5, r1, #1
    4fd2:	4269      	negs	r1, r5
    4fd4:	f04f 0300 	mov.w	r3, #0
    4fd8:	4169      	adcs	r1, r5
    4fda:	461a      	mov	r2, r3
{
    4fdc:	4604      	mov	r4, r0
	ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4fde:	f7ff fa65 	bl	44ac <shell_cmd_precheck>
	if (ret) {
    4fe2:	4605      	mov	r5, r0
    4fe4:	b9d8      	cbnz	r0, 501e <cmd_history+0x52>
			shell_fprintf(shell, SHELL_NORMAL, "[%3d] %s\n",
    4fe6:	f8df 8040 	ldr.w	r8, [pc, #64]	; 5028 <cmd_history+0x5c>
	size_t i = 0;
    4fea:	4606      	mov	r6, r0
				  shell->ctx->temp_buff, &len);
    4fec:	68a2      	ldr	r2, [r4, #8]
		shell_history_get(shell->history, true,
    4fee:	68e0      	ldr	r0, [r4, #12]
    4ff0:	ab03      	add	r3, sp, #12
    4ff2:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    4ff6:	2101      	movs	r1, #1
    4ff8:	f000 f900 	bl	51fc <shell_history_get>
		if (len) {
    4ffc:	9a03      	ldr	r2, [sp, #12]
    4ffe:	68a3      	ldr	r3, [r4, #8]
    5000:	b15a      	cbz	r2, 501a <cmd_history+0x4e>
				      i++, shell->ctx->temp_buff);
    5002:	f503 7396 	add.w	r3, r3, #300	; 0x12c
			shell_fprintf(shell, SHELL_NORMAL, "[%3d] %s\n",
    5006:	9300      	str	r3, [sp, #0]
    5008:	1c77      	adds	r7, r6, #1
    500a:	4633      	mov	r3, r6
    500c:	4642      	mov	r2, r8
    500e:	2100      	movs	r1, #0
    5010:	4620      	mov	r0, r4
    5012:	f7fe fba5 	bl	3760 <shell_fprintf>
    5016:	463e      	mov	r6, r7
    5018:	e7e8      	b.n	4fec <cmd_history+0x20>
	shell->ctx->temp_buff[0] = '\0';
    501a:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
}
    501e:	4628      	mov	r0, r5
    5020:	b004      	add	sp, #16
    5022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5026:	bf00      	nop
    5028:	0002ffcd 	.word	0x0002ffcd

0000502c <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    502c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (!IS_ENABLED(CONFIG_SHELL_CMDS_RESIZE)) {
		shell_fprintf(shell, SHELL_ERROR, "Command not supported.\n");
		return -ENOEXEC;
	}

	err = shell_cmd_precheck(shell, (argc <= 2), NULL, 0);
    5030:	2902      	cmp	r1, #2
    5032:	f04f 0300 	mov.w	r3, #0
{
    5036:	460f      	mov	r7, r1
    5038:	4616      	mov	r6, r2
	err = shell_cmd_precheck(shell, (argc <= 2), NULL, 0);
    503a:	bf88      	it	hi
    503c:	2100      	movhi	r1, #0
    503e:	461a      	mov	r2, r3
    5040:	bf98      	it	ls
    5042:	2101      	movls	r1, #1
{
    5044:	4604      	mov	r4, r0
	err = shell_cmd_precheck(shell, (argc <= 2), NULL, 0);
    5046:	f7ff fa31 	bl	44ac <shell_cmd_precheck>
	if (err) {
    504a:	4605      	mov	r5, r0
    504c:	b968      	cbnz	r0, 506a <cmd_resize+0x3e>
		return err;
	}

	if (argc != 1) {
    504e:	2f01      	cmp	r7, #1
    5050:	d00f      	beq.n	5072 <cmd_resize+0x46>
		shell_fprintf(shell, SHELL_ERROR, "%s:%s%s\n", argv[0],
    5052:	6873      	ldr	r3, [r6, #4]
    5054:	9301      	str	r3, [sp, #4]
    5056:	4b54      	ldr	r3, [pc, #336]	; (51a8 <cmd_resize+0x17c>)
    5058:	9300      	str	r3, [sp, #0]
    505a:	6833      	ldr	r3, [r6, #0]
    505c:	4a53      	ldr	r2, [pc, #332]	; (51ac <cmd_resize+0x180>)
    505e:	2102      	movs	r1, #2
    5060:	4620      	mov	r0, r4
    5062:	f7fe fb7d 	bl	3760 <shell_fprintf>
			      SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    5066:	f06f 0515 	mvn.w	r5, #21
			      "screen size\n");
		return -ENOEXEC;
	}

	return 0;
}
    506a:	4628      	mov	r0, r5
    506c:	b004      	add	sp, #16
    506e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
    5072:	4a4f      	ldr	r2, [pc, #316]	; (51b0 <cmd_resize+0x184>)
    5074:	494f      	ldr	r1, [pc, #316]	; (51b4 <cmd_resize+0x188>)
    5076:	6960      	ldr	r0, [r4, #20]
    5078:	f7ff fe95 	bl	4da6 <shell_raw_fprintf>
	shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    507c:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    5080:	4620      	mov	r0, r4
    5082:	f7ff fbbd 	bl	4800 <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    5086:	21fa      	movs	r1, #250	; 0xfa
    5088:	4620      	mov	r0, r4
    508a:	f7ff fbc9 	bl	4820 <shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    508e:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
    5090:	f88d 500b 	strb.w	r5, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    5094:	f44f 7280 	mov.w	r2, #256	; 0x100
    5098:	4629      	mov	r1, r5
    509a:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    509e:	f001 fe20 	bl	6ce2 <memset>
	shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    50a2:	4945      	ldr	r1, [pc, #276]	; (51b8 <cmd_resize+0x18c>)
    50a4:	6960      	ldr	r0, [r4, #20]
    50a6:	f7ff fe7e 	bl	4da6 <shell_raw_fprintf>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    50aa:	6960      	ldr	r0, [r4, #20]
    50ac:	f7ff fa20 	bl	44f0 <shell_fprintf_buffer_flush>
    50b0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	u16_t buff_idx = 0;
    50b4:	462e      	mov	r6, r5
			(void)shell->iface->api->read(shell->iface, &c,
    50b6:	6860      	ldr	r0, [r4, #4]
    50b8:	6803      	ldr	r3, [r0, #0]
    50ba:	2201      	movs	r2, #1
    50bc:	691f      	ldr	r7, [r3, #16]
    50be:	f10d 010b 	add.w	r1, sp, #11
    50c2:	ab03      	add	r3, sp, #12
    50c4:	47b8      	blx	r7
			if (cnt == 0) {
    50c6:	9b03      	ldr	r3, [sp, #12]
    50c8:	b963      	cbnz	r3, 50e4 <cmd_resize+0xb8>
    50ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    50ce:	2001      	movs	r0, #1
    50d0:	fa1f f888 	uxth.w	r8, r8
    50d4:	f029 f85c 	bl	2e190 <_impl_k_sleep>
	for (u16_t i = 0; i < 1000; i++) {
    50d8:	f1b8 0f00 	cmp.w	r8, #0
    50dc:	d1eb      	bne.n	50b6 <cmd_resize+0x8a>
		ret_val = -ENOTSUP;
    50de:	f06f 0522 	mvn.w	r5, #34	; 0x22
    50e2:	e02f      	b.n	5144 <cmd_resize+0x118>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    50e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    50e8:	68a7      	ldr	r7, [r4, #8]
    50ea:	2b1b      	cmp	r3, #27
    50ec:	d051      	beq.n	5192 <cmd_resize+0x166>
    50ee:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
    50f2:	2a1b      	cmp	r2, #27
    50f4:	d1df      	bne.n	50b6 <cmd_resize+0x8a>
			if (c == 'R') { /* End of response from the terminal. */
    50f6:	2b52      	cmp	r3, #82	; 0x52
    50f8:	d14b      	bne.n	5192 <cmd_resize+0x166>
				shell->ctx->temp_buff[buff_idx] = '\0';
    50fa:	443e      	add	r6, r7
    50fc:	2300      	movs	r3, #0
    50fe:	f886 312c 	strb.w	r3, [r6, #300]	; 0x12c
				if (shell->ctx->temp_buff[1] != '[') {
    5102:	f897 212d 	ldrb.w	r2, [r7, #301]	; 0x12d
    5106:	2a5b      	cmp	r2, #91	; 0x5b
    5108:	d14b      	bne.n	51a2 <cmd_resize+0x176>
    510a:	f507 7197 	add.w	r1, r7, #302	; 0x12e
				buff_idx = 2;
    510e:	2002      	movs	r0, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    5110:	f811 2b01 	ldrb.w	r2, [r1], #1
    5114:	3001      	adds	r0, #1
    5116:	2a3b      	cmp	r2, #59	; 0x3b
    5118:	b280      	uxth	r0, r0
    511a:	d125      	bne.n	5168 <cmd_resize+0x13c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    511c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    5120:	d0dd      	beq.n	50de <cmd_resize+0xb2>
    5122:	f200 162b 	addw	r6, r0, #299	; 0x12b
    5126:	443e      	add	r6, r7
	*x = 0;
    5128:	2200      	movs	r2, #0
				while (shell->ctx->temp_buff[buff_idx]
    512a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    512e:	bb29      	cbnz	r1, 517c <cmd_resize+0x150>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    5130:	2afa      	cmp	r2, #250	; 0xfa
    5132:	bf28      	it	cs
    5134:	22fa      	movcs	r2, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    5136:	2bfa      	cmp	r3, #250	; 0xfa
    5138:	bf28      	it	cs
    513a:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
    513c:	f887 112c 	strb.w	r1, [r7, #300]	; 0x12c
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    5140:	83fa      	strh	r2, [r7, #30]
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    5142:	83bb      	strh	r3, [r7, #28]
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
    5144:	4a1d      	ldr	r2, [pc, #116]	; (51bc <cmd_resize+0x190>)
    5146:	491b      	ldr	r1, [pc, #108]	; (51b4 <cmd_resize+0x188>)
    5148:	6960      	ldr	r0, [r4, #20]
    514a:	f7ff fe2c 	bl	4da6 <shell_raw_fprintf>
	if (err != 0) {
    514e:	2d00      	cmp	r5, #0
    5150:	d08b      	beq.n	506a <cmd_resize+0x3e>
		shell->ctx->vt100_ctx.cons.terminal_hei =
    5152:	68a3      	ldr	r3, [r4, #8]
    5154:	4a1a      	ldr	r2, [pc, #104]	; (51c0 <cmd_resize+0x194>)
    5156:	61da      	str	r2, [r3, #28]
		shell_fprintf(shell, SHELL_WARNING,
    5158:	2104      	movs	r1, #4
    515a:	4a1a      	ldr	r2, [pc, #104]	; (51c4 <cmd_resize+0x198>)
    515c:	4620      	mov	r0, r4
    515e:	f7fe faff 	bl	3760 <shell_fprintf>
    5162:	f06f 0507 	mvn.w	r5, #7
    5166:	e780      	b.n	506a <cmd_resize+0x3e>
					*y = *y * 10 +
    5168:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    516c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    5170:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
    5172:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
					*y = *y * 10 +
    5176:	b29b      	uxth	r3, r3
					if (buff_idx >=
    5178:	d1ca      	bne.n	5110 <cmd_resize+0xe4>
    517a:	e7b0      	b.n	50de <cmd_resize+0xb2>
					(shell->ctx->temp_buff[buff_idx++] -
    517c:	3001      	adds	r0, #1
    517e:	b280      	uxth	r0, r0
					*x = *x * 10 +
    5180:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5184:	3930      	subs	r1, #48	; 0x30
    5186:	eb01 0242 	add.w	r2, r1, r2, lsl #1
					if (buff_idx >=
    518a:	28ff      	cmp	r0, #255	; 0xff
					*x = *x * 10 +
    518c:	b292      	uxth	r2, r2
					if (buff_idx >=
    518e:	d9cc      	bls.n	512a <cmd_resize+0xfe>
    5190:	e7a5      	b.n	50de <cmd_resize+0xb2>
			shell->ctx->temp_buff[buff_idx] = c;
    5192:	19ba      	adds	r2, r7, r6
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    5194:	3601      	adds	r6, #1
    5196:	b2b6      	uxth	r6, r6
    5198:	2e09      	cmp	r6, #9
			shell->ctx->temp_buff[buff_idx] = c;
    519a:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    519e:	d98a      	bls.n	50b6 <cmd_resize+0x8a>
				shell->ctx->temp_buff[0] = 0;
    51a0:	2300      	movs	r3, #0
    51a2:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
    51a6:	e79a      	b.n	50de <cmd_resize+0xb2>
    51a8:	0002f89f 	.word	0x0002f89f
    51ac:	00030011 	.word	0x00030011
    51b0:	0002feb0 	.word	0x0002feb0
    51b4:	0002fdfc 	.word	0x0002fdfc
    51b8:	0002feda 	.word	0x0002feda
    51bc:	0002feb3 	.word	0x0002feb3
    51c0:	00500018 	.word	0x00500018
    51c4:	0002ffd7 	.word	0x0002ffd7

000051c8 <remove_from_tail>:
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    51c8:	6842      	ldr	r2, [r0, #4]
static void remove_from_tail(struct shell_history *history)
{
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item;

	l_item = sys_dlist_peek_tail(&history->list);
    51ca:	1d03      	adds	r3, r0, #4
    51cc:	429a      	cmp	r2, r3
{
    51ce:	b513      	push	{r0, r1, r4, lr}
    51d0:	d00d      	beq.n	51ee <remove_from_tail+0x26>
    51d2:	6883      	ldr	r3, [r0, #8]
	sys_dlist_remove(l_item);

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
	k_mem_slab_free(history->mem_slab, (void **)&l_item);
    51d4:	6800      	ldr	r0, [r0, #0]
	node->prev->next = node->next;
    51d6:	e9d3 4200 	ldrd	r4, r2, [r3]
	l_item = sys_dlist_peek_tail(&history->list);
    51da:	a902      	add	r1, sp, #8
    51dc:	f841 3d04 	str.w	r3, [r1, #-4]!
    51e0:	6014      	str	r4, [r2, #0]
	node->next->prev = node->prev;
    51e2:	681b      	ldr	r3, [r3, #0]
    51e4:	605a      	str	r2, [r3, #4]
	k_mem_slab_free(history->mem_slab, (void **)&l_item);
    51e6:	f028 fa9f 	bl	2d728 <k_mem_slab_free>
}
    51ea:	b002      	add	sp, #8
    51ec:	bd10      	pop	{r4, pc}
	l_item = sys_dlist_peek_tail(&history->list);
    51ee:	2300      	movs	r3, #0
    51f0:	9301      	str	r3, [sp, #4]
	node->prev->next = node->next;
    51f2:	685b      	ldr	r3, [r3, #4]
    51f4:	deff      	udf	#255	; 0xff

000051f6 <shell_history_mode_exit>:
	history->current = NULL;
    51f6:	2300      	movs	r3, #0
    51f8:	60c3      	str	r3, [r0, #12]
}
    51fa:	4770      	bx	lr

000051fc <shell_history_get>:
{
    51fc:	b570      	push	{r4, r5, r6, lr}
    51fe:	4615      	mov	r5, r2
	return list->head == list;
    5200:	4602      	mov	r2, r0
    5202:	461e      	mov	r6, r3
    5204:	f852 4f04 	ldr.w	r4, [r2, #4]!
	if (sys_dlist_is_empty(&history->list)) {
    5208:	4294      	cmp	r4, r2
    520a:	d102      	bne.n	5212 <shell_history_get+0x16>
		*len = 0;
    520c:	2000      	movs	r0, #0
    520e:	6030      	str	r0, [r6, #0]
}
    5210:	bd70      	pop	{r4, r5, r6, pc}
    5212:	68c2      	ldr	r2, [r0, #12]
	if (!up) { /* button down */
    5214:	b9b1      	cbnz	r1, 5244 <shell_history_get+0x48>
		if (history->current == NULL) {
    5216:	2a00      	cmp	r2, #0
    5218:	d0f8      	beq.n	520c <shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
    521a:	4294      	cmp	r4, r2
    521c:	d102      	bne.n	5224 <shell_history_get+0x28>
	history->current = l_item;
    521e:	2300      	movs	r3, #0
    5220:	60c3      	str	r3, [r0, #12]
    5222:	e7f3      	b.n	520c <shell_history_get+0x10>
    5224:	6854      	ldr	r4, [r2, #4]
    5226:	60c4      	str	r4, [r0, #12]
	if (h_item) {
    5228:	2c00      	cmp	r4, #0
    522a:	d0ef      	beq.n	520c <shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
    522c:	8922      	ldrh	r2, [r4, #8]
    522e:	f104 010a 	add.w	r1, r4, #10
    5232:	4628      	mov	r0, r5
    5234:	f001 fd28 	bl	6c88 <memcpy>
		*len = h_item->len;
    5238:	8922      	ldrh	r2, [r4, #8]
    523a:	6032      	str	r2, [r6, #0]
		dst[*len] = '\0';
    523c:	2300      	movs	r3, #0
    523e:	54ab      	strb	r3, [r5, r2]
		return true;
    5240:	2001      	movs	r0, #1
    5242:	e7e5      	b.n	5210 <shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
    5244:	2a00      	cmp	r2, #0
    5246:	d0ee      	beq.n	5226 <shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
    5248:	6883      	ldr	r3, [r0, #8]
    524a:	4293      	cmp	r3, r2
    524c:	d0e7      	beq.n	521e <shell_history_get+0x22>
    524e:	6814      	ldr	r4, [r2, #0]
    5250:	e7e9      	b.n	5226 <shell_history_get+0x2a>

00005252 <shell_history_purge>:

void shell_history_purge(struct shell_history *history)
{
    5252:	b538      	push	{r3, r4, r5, lr}
    5254:	4604      	mov	r4, r0
	while (!sys_dlist_is_empty(&history->list)) {
    5256:	1d05      	adds	r5, r0, #4
    5258:	6863      	ldr	r3, [r4, #4]
    525a:	42ab      	cmp	r3, r5
    525c:	d100      	bne.n	5260 <shell_history_purge+0xe>
		remove_from_tail(history);
	}
}
    525e:	bd38      	pop	{r3, r4, r5, pc}
		remove_from_tail(history);
    5260:	4620      	mov	r0, r4
    5262:	f7ff ffb1 	bl	51c8 <remove_from_tail>
    5266:	e7f7      	b.n	5258 <shell_history_purge+0x6>

00005268 <shell_history_put>:
	history->current = NULL;
    5268:	2300      	movs	r3, #0

void shell_history_put(struct shell_history *history, u8_t *line, size_t len)
{
    526a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    526e:	4604      	mov	r4, r0
    5270:	4689      	mov	r9, r1
	history->current = NULL;
    5272:	60c3      	str	r3, [r0, #12]
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item;

	shell_history_mode_exit(history);

	if (len == 0) {
    5274:	4616      	mov	r6, r2
    5276:	b352      	cbz	r2, 52ce <shell_history_put+0x66>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
    5278:	1d07      	adds	r7, r0, #4
	return list->head == list;
    527a:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    527c:	4287      	cmp	r7, r0
    527e:	d119      	bne.n	52b4 <shell_history_put+0x4c>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    5280:	9301      	str	r3, [sp, #4]
	   (strncmp(h_item->data, line, CONFIG_SHELL_CMD_BUFF_SIZE) == 0)) {
		/* Same command as before, do not store */
		return;
	}

	while (k_mem_slab_alloc(history->mem_slab, (void **)&h_item, K_NO_WAIT)
    5282:	2200      	movs	r2, #0
    5284:	a901      	add	r1, sp, #4
    5286:	6820      	ldr	r0, [r4, #0]
    5288:	f028 fa26 	bl	2d6d8 <k_mem_slab_alloc>
    528c:	4680      	mov	r8, r0
    528e:	bb08      	cbnz	r0, 52d4 <shell_history_put+0x6c>
			!= 0) {
		/* if no space remove the oldest entry. */
		remove_from_tail(history);
	}

	add_to_head(history, h_item, line, len);
    5290:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
    5292:	4632      	mov	r2, r6
	item->len = len;
    5294:	812e      	strh	r6, [r5, #8]
	item->data[len] = '\0';
    5296:	442e      	add	r6, r5
	memcpy(item->data, src, len);
    5298:	4649      	mov	r1, r9
    529a:	f105 000a 	add.w	r0, r5, #10
    529e:	f001 fcf3 	bl	6c88 <memcpy>
	item->data[len] = '\0';
    52a2:	f886 800a 	strb.w	r8, [r6, #10]
	node->next = list->head;
    52a6:	6863      	ldr	r3, [r4, #4]
	node->prev = list;
    52a8:	e9c5 3700 	strd	r3, r7, [r5]
	list->head->prev = node;
    52ac:	6863      	ldr	r3, [r4, #4]
    52ae:	605d      	str	r5, [r3, #4]
	list->head = node;
    52b0:	6065      	str	r5, [r4, #4]
    52b2:	e00c      	b.n	52ce <shell_history_put+0x66>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    52b4:	9001      	str	r0, [sp, #4]
	if (h_item &&
    52b6:	2800      	cmp	r0, #0
    52b8:	d0e3      	beq.n	5282 <shell_history_put+0x1a>
	   (h_item->len == len) &&
    52ba:	8903      	ldrh	r3, [r0, #8]
	if (h_item &&
    52bc:	4293      	cmp	r3, r2
    52be:	d1e0      	bne.n	5282 <shell_history_put+0x1a>
	   (strncmp(h_item->data, line, CONFIG_SHELL_CMD_BUFF_SIZE) == 0)) {
    52c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    52c4:	300a      	adds	r0, #10
    52c6:	f001 fc9e 	bl	6c06 <strncmp>
	   (h_item->len == len) &&
    52ca:	2800      	cmp	r0, #0
    52cc:	d1d9      	bne.n	5282 <shell_history_put+0x1a>
}
    52ce:	b003      	add	sp, #12
    52d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		remove_from_tail(history);
    52d4:	4620      	mov	r0, r4
    52d6:	f7ff ff77 	bl	51c8 <remove_from_tail>
    52da:	e7d2      	b.n	5282 <shell_history_put+0x1a>

000052dc <shell_history_init>:

void shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
    52dc:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
    52de:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
    52e2:	2300      	movs	r3, #0
    52e4:	60c3      	str	r3, [r0, #12]
}
    52e6:	4770      	bx	lr

000052e8 <msg_from_fifo>:
	backend->control_block->cnt = 0;
	backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
}

static struct log_msg *msg_from_fifo(const struct shell_log_backend *backend)
{
    52e8:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    52ea:	2100      	movs	r1, #0
    52ec:	4604      	mov	r4, r0
    52ee:	6840      	ldr	r0, [r0, #4]
    52f0:	f028 fcc8 	bl	2dc84 <_impl_k_queue_get>
	struct log_msg *msg = k_fifo_get(backend->fifo, K_NO_WAIT);

	if (msg) {
    52f4:	b158      	cbz	r0, 530e <msg_from_fifo+0x26>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    52f6:	68e3      	ldr	r3, [r4, #12]
    52f8:	f3bf 8f5b 	dmb	ish
    52fc:	e853 2f00 	ldrex	r2, [r3]
    5300:	3a01      	subs	r2, #1
    5302:	e843 2100 	strex	r1, r2, [r3]
    5306:	2900      	cmp	r1, #0
    5308:	d1f8      	bne.n	52fc <msg_from_fifo+0x14>
    530a:	f3bf 8f5b 	dmb	ish
		atomic_dec(&backend->control_block->cnt);
	}

	return msg;
}
    530e:	bd10      	pop	{r4, pc}

00005310 <put>:

	return true;
}

static void put(const struct log_backend *const backend, struct log_msg *msg)
{
    5310:	b538      	push	{r3, r4, r5, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    5312:	6843      	ldr	r3, [r0, #4]
    5314:	681d      	ldr	r5, [r3, #0]
	struct k_poll_signal *signal;

	log_msg_get(msg);
    5316:	4608      	mov	r0, r1
{
    5318:	460c      	mov	r4, r1
	log_msg_get(msg);
    531a:	f7fd f927 	bl	256c <log_msg_get>

	switch (shell->log_backend->control_block->state) {
    531e:	69eb      	ldr	r3, [r5, #28]
    5320:	68da      	ldr	r2, [r3, #12]
    5322:	7912      	ldrb	r2, [r2, #4]
    5324:	2a01      	cmp	r2, #1
    5326:	d006      	beq.n	5336 <put+0x26>
    5328:	2a03      	cmp	r2, #3
    532a:	d028      	beq.n	537e <put+0x6e>
	case SHELL_LOG_BACKEND_DISABLED:
		/* fall through */
		/* no break */
	default:
		/* Discard message. */
		log_msg_put(msg);
    532c:	4620      	mov	r0, r4
	}
}
    532e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		log_msg_put(msg);
    5332:	f7fd b9a7 	b.w	2684 <log_msg_put>
	k_fifo_put(shell->log_backend->fifo, msg);
    5336:	6858      	ldr	r0, [r3, #4]
    5338:	4621      	mov	r1, r4
    533a:	f028 fc7f 	bl	2dc3c <k_queue_append>
	cnt = atomic_inc(&shell->log_backend->control_block->cnt);
    533e:	69eb      	ldr	r3, [r5, #28]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5340:	68db      	ldr	r3, [r3, #12]
    5342:	f3bf 8f5b 	dmb	ish
    5346:	e853 2f00 	ldrex	r2, [r3]
    534a:	1c51      	adds	r1, r2, #1
    534c:	e843 1000 	strex	r0, r1, [r3]
    5350:	2800      	cmp	r0, #0
    5352:	d1f8      	bne.n	5346 <put+0x36>
    5354:	f3bf 8f5b 	dmb	ish
	if (cnt >= CONFIG_SHELL_MAX_LOG_MSG_BUFFERED) {
    5358:	2a07      	cmp	r2, #7
    535a:	dd08      	ble.n	536e <put+0x5e>
		log_msg_put(msg_from_fifo(shell->log_backend));
    535c:	69e8      	ldr	r0, [r5, #28]
    535e:	f7ff ffc3 	bl	52e8 <msg_from_fifo>
    5362:	f7fd f98f 	bl	2684 <log_msg_put>
			shell->stats->log_lost_cnt++;
    5366:	69aa      	ldr	r2, [r5, #24]
    5368:	6813      	ldr	r3, [r2, #0]
    536a:	3301      	adds	r3, #1
    536c:	6013      	str	r3, [r2, #0]
			signal = &shell->ctx->signals[SHELL_SIGNAL_LOG_MSG];
    536e:	68a8      	ldr	r0, [r5, #8]
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result)
    5370:	2100      	movs	r1, #0
    5372:	f500 701c 	add.w	r0, r0, #624	; 0x270
}
    5376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    537a:	f029 bd35 	b.w	2ede8 <_impl_k_poll_signal>
	log_output_msg_process(log_output, msg, flags);
    537e:	220f      	movs	r2, #15
    5380:	4621      	mov	r1, r4
    5382:	6898      	ldr	r0, [r3, #8]
    5384:	f7fd fa28 	bl	27d8 <log_output_msg_process>
    5388:	e7d0      	b.n	532c <put+0x1c>

0000538a <shell_log_backend_output_func>:
{
    538a:	b510      	push	{r4, lr}
    538c:	4613      	mov	r3, r2
    538e:	460c      	mov	r4, r1
	shell_print_stream(ctx, data, length);
    5390:	460a      	mov	r2, r1
    5392:	4601      	mov	r1, r0
    5394:	4618      	mov	r0, r3
    5396:	f7fe f9e1 	bl	375c <shell_print_stream>
}
    539a:	4620      	mov	r0, r4
    539c:	bd10      	pop	{r4, pc}

0000539e <shell_log_backend_enable>:
{
    539e:	b538      	push	{r3, r4, r5, lr}
    53a0:	4604      	mov	r4, r0
	log_backend_enable(backend->backend, ctx, init_log_level);
    53a2:	6800      	ldr	r0, [r0, #0]
{
    53a4:	460d      	mov	r5, r1
	log_backend_enable(backend->backend, ctx, init_log_level);
    53a6:	f7fc ffe3 	bl	2370 <log_backend_enable>
	log_output_ctx_set(backend->log_output, ctx);
    53aa:	68a3      	ldr	r3, [r4, #8]
    53ac:	685b      	ldr	r3, [r3, #4]
    53ae:	605d      	str	r5, [r3, #4]
	backend->control_block->cnt = 0;
    53b0:	68e3      	ldr	r3, [r4, #12]
    53b2:	2200      	movs	r2, #0
    53b4:	601a      	str	r2, [r3, #0]
	backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
    53b6:	2201      	movs	r2, #1
    53b8:	711a      	strb	r2, [r3, #4]
}
    53ba:	bd38      	pop	{r3, r4, r5, pc}

000053bc <shell_log_backend_disable>:
{
    53bc:	b510      	push	{r4, lr}
    53be:	4604      	mov	r4, r0
		msg = msg_from_fifo(backend);
    53c0:	f7ff ff92 	bl	52e8 <msg_from_fifo>
	while (msg) {
    53c4:	b930      	cbnz	r0, 53d4 <shell_log_backend_disable+0x18>
	log_backend_disable(backend->backend);
    53c6:	6820      	ldr	r0, [r4, #0]
    53c8:	f7fc fff4 	bl	23b4 <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
    53cc:	68e3      	ldr	r3, [r4, #12]
    53ce:	2202      	movs	r2, #2
    53d0:	711a      	strb	r2, [r3, #4]
}
    53d2:	bd10      	pop	{r4, pc}
		log_msg_put(msg);
    53d4:	f7fd f956 	bl	2684 <log_msg_put>
		msg = msg_from_fifo(backend);
    53d8:	4620      	mov	r0, r4
    53da:	e7f1      	b.n	53c0 <shell_log_backend_disable+0x4>

000053dc <shell_log_backend_process>:
{
    53dc:	b538      	push	{r3, r4, r5, lr}
			(const struct shell *)backend->backend->cb->ctx;
    53de:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
    53e0:	685b      	ldr	r3, [r3, #4]
    53e2:	681d      	ldr	r5, [r3, #0]
	struct log_msg *msg = msg_from_fifo(backend);
    53e4:	f7ff ff80 	bl	52e8 <msg_from_fifo>
	if (!msg) {
    53e8:	4604      	mov	r4, r0
    53ea:	b148      	cbz	r0, 5400 <shell_log_backend_process+0x24>
	msg_process(shell->log_backend->log_output, msg);
    53ec:	69eb      	ldr	r3, [r5, #28]
	log_output_msg_process(log_output, msg, flags);
    53ee:	4601      	mov	r1, r0
    53f0:	220f      	movs	r2, #15
    53f2:	6898      	ldr	r0, [r3, #8]
    53f4:	f7fd f9f0 	bl	27d8 <log_output_msg_process>
	log_msg_put(msg);
    53f8:	4620      	mov	r0, r4
    53fa:	f7fd f943 	bl	2684 <log_msg_put>
	return true;
    53fe:	2001      	movs	r0, #1
}
    5400:	bd38      	pop	{r3, r4, r5, pc}

00005402 <panic>:

static void panic(const struct log_backend *const backend)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    5402:	6843      	ldr	r3, [r0, #4]
{
    5404:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    5406:	681c      	ldr	r4, [r3, #0]
	int err;

	err = shell->iface->api->enable(shell->iface, true);
    5408:	6860      	ldr	r0, [r4, #4]
    540a:	6803      	ldr	r3, [r0, #0]
    540c:	2101      	movs	r1, #1
    540e:	689b      	ldr	r3, [r3, #8]
    5410:	4798      	blx	r3

	if (err == 0) {
    5412:	b9d0      	cbnz	r0, 544a <panic+0x48>
		shell->log_backend->control_block->state =
    5414:	69e3      	ldr	r3, [r4, #28]
							SHELL_LOG_BACKEND_PANIC;

		/* Move to the start of next line. */
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    5416:	68a0      	ldr	r0, [r4, #8]
		shell->log_backend->control_block->state =
    5418:	68db      	ldr	r3, [r3, #12]
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    541a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
		shell->log_backend->control_block->state =
    541c:	2203      	movs	r2, #3
    541e:	711a      	strb	r2, [r3, #4]
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    5420:	3014      	adds	r0, #20
    5422:	8a42      	ldrh	r2, [r0, #18]
    5424:	f7ff f8c8 	bl	45b8 <shell_multiline_data_calc>
						  shell->ctx->cmd_buff_pos,
						  shell->ctx->cmd_buff_len);
		shell_op_cursor_vert_move(shell, -1);
    5428:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    542c:	4620      	mov	r0, r4
    542e:	f7ff f9e7 	bl	4800 <shell_op_cursor_vert_move>
		shell_op_cursor_horiz_move(shell,
					   -shell->ctx->vt100_ctx.cons.cur_x);
    5432:	68a3      	ldr	r3, [r4, #8]
    5434:	8a99      	ldrh	r1, [r3, #20]
		shell_op_cursor_horiz_move(shell,
    5436:	4620      	mov	r0, r4
    5438:	4249      	negs	r1, r1
    543a:	f7ff f9f1 	bl	4820 <shell_op_cursor_horiz_move>

		while (shell_log_backend_process(shell->log_backend)) {
    543e:	69e0      	ldr	r0, [r4, #28]
    5440:	f7ff ffcc 	bl	53dc <shell_log_backend_process>
    5444:	2800      	cmp	r0, #0
    5446:	d1fa      	bne.n	543e <panic+0x3c>
			/* empty */
		}
	} else {
		shell_log_backend_disable(shell->log_backend);
	}
}
    5448:	bd10      	pop	{r4, pc}
		shell_log_backend_disable(shell->log_backend);
    544a:	69e0      	ldr	r0, [r4, #28]
}
    544c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_log_backend_disable(shell->log_backend);
    5450:	f7ff bfb4 	b.w	53bc <shell_log_backend_disable>

00005454 <_app_send>:

static void _app_send(struct net_context *net_ctx,
		      int status,
		      void *token,
		      void *user_data)
{
    5454:	4618      	mov	r0, r3
	struct net_app_ctx *ctx = user_data;

	ARG_UNUSED(ctx);

#if defined(CONFIG_NET_APP_CLIENT)
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
    5456:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
    545a:	2b02      	cmp	r3, #2
{
    545c:	b410      	push	{r4}
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
    545e:	d105      	bne.n	546c <_app_send+0x18>
    5460:	6c44      	ldr	r4, [r0, #68]	; 0x44
    5462:	b11c      	cbz	r4, 546c <_app_send+0x18>
		ctx->cb.send(ctx, status, token, ctx->user_data);
    5464:	46a4      	mov	ip, r4
    5466:	6f03      	ldr	r3, [r0, #112]	; 0x70
#if defined(CONFIG_NET_APP_SERVER)
	if (ctx->app_type == NET_APP_SERVER && ctx->cb.send) {
		ctx->cb.send(ctx, status, token, ctx->user_data);
	}
#endif
}
    5468:	bc10      	pop	{r4}
		ctx->cb.send(ctx, status, token, ctx->user_data);
    546a:	4760      	bx	ip
}
    546c:	bc10      	pop	{r4}
    546e:	4770      	bx	lr

00005470 <setup_ipv6_ctx>:
{
    5470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
    5472:	4603      	mov	r3, r0
{
    5474:	4604      	mov	r4, r0
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
    5476:	200a      	movs	r0, #10
    5478:	f01a fb66 	bl	1fb48 <net_context_get>
	if (ret < 0) {
    547c:	1e05      	subs	r5, r0, #0
    547e:	da19      	bge.n	54b4 <setup_ipv6_ctx+0x44>
		NET_ERR("Cannot get network context (%d)", ret);
    5480:	4b1a      	ldr	r3, [pc, #104]	; (54ec <setup_ipv6_ctx+0x7c>)
    5482:	681b      	ldr	r3, [r3, #0]
    5484:	075a      	lsls	r2, r3, #29
    5486:	d011      	beq.n	54ac <setup_ipv6_ctx+0x3c>
    5488:	2201      	movs	r2, #1
    548a:	f04f 0300 	mov.w	r3, #0
    548e:	f362 0302 	bfi	r3, r2, #0, #3
    5492:	4917      	ldr	r1, [pc, #92]	; (54f0 <setup_ipv6_ctx+0x80>)
    5494:	4a17      	ldr	r2, [pc, #92]	; (54f4 <setup_ipv6_ctx+0x84>)
    5496:	4818      	ldr	r0, [pc, #96]	; (54f8 <setup_ipv6_ctx+0x88>)
    5498:	1a52      	subs	r2, r2, r1
    549a:	08d2      	lsrs	r2, r2, #3
    549c:	f36f 03c5 	bfc	r3, #3, #3
    54a0:	f362 138f 	bfi	r3, r2, #6, #10
    54a4:	4915      	ldr	r1, [pc, #84]	; (54fc <setup_ipv6_ctx+0x8c>)
    54a6:	462a      	mov	r2, r5
    54a8:	f7fc fe34 	bl	2114 <log_2>
		ctx->ipv6.ctx = NULL;
    54ac:	2300      	movs	r3, #0
    54ae:	6023      	str	r3, [r4, #0]
}
    54b0:	4628      	mov	r0, r5
    54b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_context_setup_pools(ctx->ipv6.ctx, ctx->tx_slab,
    54b4:	6826      	ldr	r6, [r4, #0]
    54b6:	e9d4 741a 	ldrd	r7, r4, [r4, #104]	; 0x68
#if defined(CONFIG_NET_CONTEXT_NET_PKT_POOL)
static inline void net_context_setup_pools(struct net_context *context,
					   net_pkt_get_slab_func_t tx_slab,
					   net_pkt_get_pool_func_t data_pool)
{
	NET_ASSERT(context);
    54ba:	b9a6      	cbnz	r6, 54e6 <setup_ipv6_ctx+0x76>
    54bc:	4b0b      	ldr	r3, [pc, #44]	; (54ec <setup_ipv6_ctx+0x7c>)
    54be:	681b      	ldr	r3, [r3, #0]
    54c0:	075b      	lsls	r3, r3, #29
    54c2:	d010      	beq.n	54e6 <setup_ipv6_ctx+0x76>
    54c4:	2301      	movs	r3, #1
    54c6:	f04f 0200 	mov.w	r2, #0
    54ca:	f363 0202 	bfi	r2, r3, #0, #3
    54ce:	4908      	ldr	r1, [pc, #32]	; (54f0 <setup_ipv6_ctx+0x80>)
    54d0:	4b08      	ldr	r3, [pc, #32]	; (54f4 <setup_ipv6_ctx+0x84>)
    54d2:	480b      	ldr	r0, [pc, #44]	; (5500 <setup_ipv6_ctx+0x90>)
    54d4:	1a5b      	subs	r3, r3, r1
    54d6:	f366 02c5 	bfi	r2, r6, #3, #3
    54da:	08db      	lsrs	r3, r3, #3
    54dc:	f363 128f 	bfi	r2, r3, #6, #10
    54e0:	4908      	ldr	r1, [pc, #32]	; (5504 <setup_ipv6_ctx+0x94>)
    54e2:	f7fc fe03 	bl	20ec <log_1>

	context->tx_slab = tx_slab;
	context->data_pool = data_pool;
    54e6:	e9c6 740f 	strd	r7, r4, [r6, #60]	; 0x3c
    54ea:	e7e1      	b.n	54b0 <setup_ipv6_ctx+0x40>
    54ec:	2000e258 	.word	0x2000e258
    54f0:	0002ef38 	.word	0x0002ef38
    54f4:	0002eff0 	.word	0x0002eff0
    54f8:	00030660 	.word	0x00030660
    54fc:	0003061d 	.word	0x0003061d
    5500:	00030684 	.word	0x00030684
    5504:	000305f0 	.word	0x000305f0

00005508 <select_client_ctx>:
	if (ctx->proto == IPPROTO_UDP) {
    5508:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    550c:	2b11      	cmp	r3, #17
    550e:	d10b      	bne.n	5528 <select_client_ctx+0x20>
    5510:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
    5514:	f003 0302 	and.w	r3, r3, #2
		if (!dst) {
    5518:	b919      	cbnz	r1, 5522 <select_client_ctx+0x1a>
			if (ctx->is_tls) {
    551a:	b91b      	cbnz	r3, 5524 <select_client_ctx+0x1c>
				return ctx->default_ctx->ctx;
    551c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    551e:	6818      	ldr	r0, [r3, #0]
    5520:	4770      	bx	lr
			if (ctx->is_tls) {
    5522:	b183      	cbz	r3, 5546 <select_client_ctx+0x3e>
				return NULL;
    5524:	2000      	movs	r0, #0
}
    5526:	4770      	bx	lr
		if (!dst) {
    5528:	b969      	cbnz	r1, 5546 <select_client_ctx+0x3e>
			if (ctx->default_ctx->ctx &&
    552a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    552c:	681b      	ldr	r3, [r3, #0]
    552e:	2b00      	cmp	r3, #0
    5530:	d0f4      	beq.n	551c <select_client_ctx+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5532:	f3bf 8f5b 	dmb	ish
    5536:	685b      	ldr	r3, [r3, #4]
    5538:	f3bf 8f5b 	dmb	ish
    553c:	2b00      	cmp	r3, #0
    553e:	dced      	bgt.n	551c <select_client_ctx+0x14>
				ctx->default_ctx->ctx = NULL;
    5540:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5542:	6019      	str	r1, [r3, #0]
    5544:	e7ea      	b.n	551c <select_client_ctx+0x14>
			if (dst->sa_family == AF_INET) {
    5546:	880b      	ldrh	r3, [r1, #0]
    5548:	2b02      	cmp	r3, #2
    554a:	d0eb      	beq.n	5524 <select_client_ctx+0x1c>
			if (dst->sa_family == AF_INET6) {
    554c:	2b0a      	cmp	r3, #10
    554e:	d10c      	bne.n	556a <select_client_ctx+0x62>
				if (ctx->ipv6.ctx &&
    5550:	6803      	ldr	r3, [r0, #0]
    5552:	b143      	cbz	r3, 5566 <select_client_ctx+0x5e>
    5554:	f3bf 8f5b 	dmb	ish
    5558:	685b      	ldr	r3, [r3, #4]
    555a:	f3bf 8f5b 	dmb	ish
    555e:	2b00      	cmp	r3, #0
					ctx->ipv6.ctx = NULL;
    5560:	bfdc      	itt	le
    5562:	2300      	movle	r3, #0
    5564:	6003      	strle	r3, [r0, #0]
				return ctx->ipv6.ctx;
    5566:	6800      	ldr	r0, [r0, #0]
    5568:	4770      	bx	lr
			if (dst->sa_family == AF_UNSPEC) {
    556a:	2b00      	cmp	r3, #0
    556c:	d1da      	bne.n	5524 <select_client_ctx+0x1c>
				if (ctx->default_ctx->ctx &&
    556e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    5570:	6812      	ldr	r2, [r2, #0]
    5572:	2a00      	cmp	r2, #0
    5574:	d0d2      	beq.n	551c <select_client_ctx+0x14>
    5576:	f3bf 8f5b 	dmb	ish
    557a:	6852      	ldr	r2, [r2, #4]
    557c:	f3bf 8f5b 	dmb	ish
    5580:	2a00      	cmp	r2, #0
					ctx->default_ctx->ctx = NULL;
    5582:	bfdc      	itt	le
    5584:	6b42      	ldrle	r2, [r0, #52]	; 0x34
    5586:	6013      	strle	r3, [r2, #0]
    5588:	e7c8      	b.n	551c <select_client_ctx+0x14>

0000558a <_net_app_register>:
}
    558a:	4770      	bx	lr

0000558c <_net_app_sprint_ipaddr>:
{
    558c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (addr->sa_family == AF_INET6) {
    558e:	8814      	ldrh	r4, [r2, #0]
    5590:	2c0a      	cmp	r4, #10
{
    5592:	b08d      	sub	sp, #52	; 0x34
    5594:	4606      	mov	r6, r0
    5596:	460f      	mov	r7, r1
    5598:	4615      	mov	r5, r2
	if (addr->sa_family == AF_INET6) {
    559a:	d117      	bne.n	55cc <_net_app_sprint_ipaddr+0x40>
		net_addr_ntop(addr->sa_family,
    559c:	2328      	movs	r3, #40	; 0x28
    559e:	aa02      	add	r2, sp, #8
    55a0:	1d29      	adds	r1, r5, #4
    55a2:	4620      	mov	r0, r4
    55a4:	f01d fcfe 	bl	22fa4 <net_addr_ntop>
		snprintk(buf, buflen, "[%s]:%u", log_strdup(ipaddr),
    55a8:	a802      	add	r0, sp, #8
    55aa:	f7fc ff31 	bl	2410 <log_strdup>
			 ntohs(net_sin6(addr)->sin6_port));
    55ae:	886a      	ldrh	r2, [r5, #2]
    55b0:	0213      	lsls	r3, r2, #8
    55b2:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		snprintk(buf, buflen, "[%s]:%u", log_strdup(ipaddr),
    55b6:	b29b      	uxth	r3, r3
    55b8:	9300      	str	r3, [sp, #0]
    55ba:	4a08      	ldr	r2, [pc, #32]	; (55dc <_net_app_sprint_ipaddr+0x50>)
    55bc:	4603      	mov	r3, r0
    55be:	4639      	mov	r1, r7
    55c0:	4630      	mov	r0, r6
    55c2:	f7fb ff6d 	bl	14a0 <snprintk>
}
    55c6:	4630      	mov	r0, r6
    55c8:	b00d      	add	sp, #52	; 0x34
    55ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (addr->sa_family == AF_INET) {
    55cc:	2c02      	cmp	r4, #2
    55ce:	d0fa      	beq.n	55c6 <_net_app_sprint_ipaddr+0x3a>
		snprintk(buf, buflen, "<AF_UNSPEC %d>",
    55d0:	4623      	mov	r3, r4
    55d2:	4a03      	ldr	r2, [pc, #12]	; (55e0 <_net_app_sprint_ipaddr+0x54>)
    55d4:	f7fb ff64 	bl	14a0 <snprintk>
    55d8:	e7f5      	b.n	55c6 <_net_app_sprint_ipaddr+0x3a>
    55da:	bf00      	nop
    55dc:	00030649 	.word	0x00030649
    55e0:	00030651 	.word	0x00030651

000055e4 <_net_app_print_info>:
{
    55e4:	b510      	push	{r4, lr}
	_net_app_sprint_ipaddr(local, sizeof(local), &ctx->default_ctx->local);
    55e6:	6b42      	ldr	r2, [r0, #52]	; 0x34
{
    55e8:	b09a      	sub	sp, #104	; 0x68
    55ea:	4604      	mov	r4, r0
	_net_app_sprint_ipaddr(local, sizeof(local), &ctx->default_ctx->local);
    55ec:	3204      	adds	r2, #4
    55ee:	2131      	movs	r1, #49	; 0x31
    55f0:	4668      	mov	r0, sp
    55f2:	f7ff ffcb 	bl	558c <_net_app_sprint_ipaddr>
			       &ctx->default_ctx->remote);
    55f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
	_net_app_sprint_ipaddr(remote, sizeof(remote),
    55f8:	2131      	movs	r1, #49	; 0x31
    55fa:	321c      	adds	r2, #28
    55fc:	a80d      	add	r0, sp, #52	; 0x34
    55fe:	f7ff ffc5 	bl	558c <_net_app_sprint_ipaddr>
}
    5602:	b01a      	add	sp, #104	; 0x68
    5604:	bd10      	pop	{r4, pc}

00005606 <_net_app_received>:
{
    5606:	4618      	mov	r0, r3
	if (ctx->app_type == NET_APP_CLIENT) {
    5608:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
    560c:	2b02      	cmp	r3, #2
{
    560e:	b430      	push	{r4, r5}
    5610:	4614      	mov	r4, r2
	if (ctx->app_type == NET_APP_CLIENT) {
    5612:	d10c      	bne.n	562e <_net_app_received+0x28>
		if (!pkt) {
    5614:	b929      	cbnz	r1, 5622 <_net_app_received+0x1c>
			if (ctx->cb.close) {
    5616:	6c83      	ldr	r3, [r0, #72]	; 0x48
    5618:	b14b      	cbz	r3, 562e <_net_app_received+0x28>
				ctx->cb.close(ctx, status, ctx->user_data);
    561a:	4621      	mov	r1, r4
    561c:	6f02      	ldr	r2, [r0, #112]	; 0x70
}
    561e:	bc30      	pop	{r4, r5}
				ctx->cb.close(ctx, status, ctx->user_data);
    5620:	4718      	bx	r3
		if (ctx->cb.recv) {
    5622:	6c04      	ldr	r4, [r0, #64]	; 0x40
    5624:	b11c      	cbz	r4, 562e <_net_app_received+0x28>
			ctx->cb.recv(ctx, pkt, status, ctx->user_data);
    5626:	46a4      	mov	ip, r4
    5628:	6f03      	ldr	r3, [r0, #112]	; 0x70
}
    562a:	bc30      	pop	{r4, r5}
			ctx->cb.recv(ctx, pkt, status, ctx->user_data);
    562c:	4760      	bx	ip
}
    562e:	bc30      	pop	{r4, r5}
    5630:	4770      	bx	lr
	...

00005634 <_net_app_set_net_ctx>:
{
    5634:	b510      	push	{r4, lr}
	if (!net_ctx || !net_context_is_used(net_ctx)) {
    5636:	4608      	mov	r0, r1
{
    5638:	4614      	mov	r4, r2
	if (!net_ctx || !net_context_is_used(net_ctx)) {
    563a:	b309      	cbz	r1, 5680 <_net_app_set_net_ctx+0x4c>
    563c:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    5640:	07d2      	lsls	r2, r2, #31
    5642:	d51d      	bpl.n	5680 <_net_app_set_net_ctx+0x4c>
	ret = net_context_bind(net_ctx, addr, socklen);
    5644:	4621      	mov	r1, r4
    5646:	461a      	mov	r2, r3
    5648:	f01a fc4a 	bl	1fee0 <net_context_bind>
	if (ret < 0) {
    564c:	1e04      	subs	r4, r0, #0
    564e:	da15      	bge.n	567c <_net_app_set_net_ctx+0x48>
		NET_ERR("Cannot bind context (%d)", ret);
    5650:	4b0d      	ldr	r3, [pc, #52]	; (5688 <_net_app_set_net_ctx+0x54>)
    5652:	681b      	ldr	r3, [r3, #0]
    5654:	075b      	lsls	r3, r3, #29
    5656:	d011      	beq.n	567c <_net_app_set_net_ctx+0x48>
    5658:	2201      	movs	r2, #1
    565a:	f04f 0300 	mov.w	r3, #0
    565e:	f362 0302 	bfi	r3, r2, #0, #3
    5662:	490a      	ldr	r1, [pc, #40]	; (568c <_net_app_set_net_ctx+0x58>)
    5664:	4a0a      	ldr	r2, [pc, #40]	; (5690 <_net_app_set_net_ctx+0x5c>)
    5666:	480b      	ldr	r0, [pc, #44]	; (5694 <_net_app_set_net_ctx+0x60>)
    5668:	1a52      	subs	r2, r2, r1
    566a:	08d2      	lsrs	r2, r2, #3
    566c:	f36f 03c5 	bfc	r3, #3, #3
    5670:	f362 138f 	bfi	r3, r2, #6, #10
    5674:	4908      	ldr	r1, [pc, #32]	; (5698 <_net_app_set_net_ctx+0x64>)
    5676:	4622      	mov	r2, r4
    5678:	f7fc fd4c 	bl	2114 <log_2>
}
    567c:	4620      	mov	r0, r4
    567e:	bd10      	pop	{r4, pc}
		return -ENOENT;
    5680:	f06f 0401 	mvn.w	r4, #1
    5684:	e7fa      	b.n	567c <_net_app_set_net_ctx+0x48>
    5686:	bf00      	nop
    5688:	2000e258 	.word	0x2000e258
    568c:	0002ef38 	.word	0x0002ef38
    5690:	0002eff0 	.word	0x0002eff0
    5694:	0003062c 	.word	0x0003062c
    5698:	00030608 	.word	0x00030608

0000569c <_net_app_set_local_addr>:
{
    569c:	b5f0      	push	{r4, r5, r6, r7, lr}
    569e:	4606      	mov	r6, r0
    56a0:	b085      	sub	sp, #20
    56a2:	460c      	mov	r4, r1
    56a4:	880d      	ldrh	r5, [r1, #0]
	if (myaddr) {
    56a6:	4610      	mov	r0, r2
    56a8:	b16a      	cbz	r2, 56c6 <_net_app_set_local_addr+0x2a>
		if (addr->sa_family == AF_INET) {
    56aa:	2d02      	cmp	r5, #2
    56ac:	d032      	beq.n	5714 <_net_app_set_local_addr+0x78>
		} else if (addr->sa_family == AF_INET6) {
    56ae:	2d0a      	cmp	r5, #10
    56b0:	d133      	bne.n	571a <_net_app_set_local_addr+0x7e>
			net_sin6(addr)->sin6_port = htons(port);
    56b2:	ba5b      	rev16	r3, r3
    56b4:	804b      	strh	r3, [r1, #2]
		return net_addr_pton(addr->sa_family, myaddr, inaddr);
    56b6:	1d0a      	adds	r2, r1, #4
    56b8:	4601      	mov	r1, r0
    56ba:	4628      	mov	r0, r5
}
    56bc:	b005      	add	sp, #20
    56be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return net_addr_pton(addr->sa_family, myaddr, inaddr);
    56c2:	f01d bd57 	b.w	23174 <net_addr_pton>
	if (addr->sa_family == AF_INET6) {
    56c6:	2d0a      	cmp	r5, #10
    56c8:	d11e      	bne.n	5708 <_net_app_set_local_addr+0x6c>
		net_ipaddr_copy(&net_sin6(addr)->sin6_addr,
    56ca:	f106 0120 	add.w	r1, r6, #32
    56ce:	f01c fab5 	bl	21c3c <net_if_ipv6_select_src_addr>
    56d2:	466d      	mov	r5, sp
    56d4:	4603      	mov	r3, r0
    56d6:	f100 0710 	add.w	r7, r0, #16
    56da:	462a      	mov	r2, r5
    56dc:	6818      	ldr	r0, [r3, #0]
    56de:	6859      	ldr	r1, [r3, #4]
    56e0:	462e      	mov	r6, r5
    56e2:	c603      	stmia	r6!, {r0, r1}
    56e4:	3308      	adds	r3, #8
    56e6:	42bb      	cmp	r3, r7
    56e8:	4635      	mov	r5, r6
    56ea:	d1f7      	bne.n	56dc <_net_app_set_local_addr+0x40>
    56ec:	3404      	adds	r4, #4
    56ee:	ad04      	add	r5, sp, #16
    56f0:	4613      	mov	r3, r2
    56f2:	cb03      	ldmia	r3!, {r0, r1}
    56f4:	42ab      	cmp	r3, r5
    56f6:	6020      	str	r0, [r4, #0]
    56f8:	6061      	str	r1, [r4, #4]
    56fa:	461a      	mov	r2, r3
    56fc:	f104 0408 	add.w	r4, r4, #8
    5700:	d1f6      	bne.n	56f0 <_net_app_set_local_addr+0x54>
	return 0;
    5702:	2000      	movs	r0, #0
}
    5704:	b005      	add	sp, #20
    5706:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EPFNOSUPPORT;
    5708:	2d02      	cmp	r5, #2
    570a:	bf14      	ite	ne
    570c:	2000      	movne	r0, #0
    570e:	f06f 002d 	mvneq.w	r0, #45	; 0x2d
    5712:	e7f7      	b.n	5704 <_net_app_set_local_addr+0x68>
    5714:	f06f 002d 	mvn.w	r0, #45	; 0x2d
    5718:	e7f4      	b.n	5704 <_net_app_set_local_addr+0x68>
			return -EAFNOSUPPORT;
    571a:	f06f 002e 	mvn.w	r0, #46	; 0x2e
    571e:	e7f1      	b.n	5704 <_net_app_set_local_addr+0x68>

00005720 <_net_app_config_local_ctx>:
{
    5720:	b538      	push	{r3, r4, r5, lr}
    5722:	4604      	mov	r4, r0
	if (!addr) {
    5724:	461d      	mov	r5, r3
    5726:	b94b      	cbnz	r3, 573c <_net_app_config_local_ctx+0x1c>
		if (ctx->ipv6.local.sa_family == AF_INET6 ||
    5728:	8883      	ldrh	r3, [r0, #4]
    572a:	2b0a      	cmp	r3, #10
    572c:	d000      	beq.n	5730 <_net_app_config_local_ctx+0x10>
    572e:	b9b3      	cbnz	r3, 575e <_net_app_config_local_ctx+0x3e>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
    5730:	4620      	mov	r0, r4
    5732:	f7ff fe9d 	bl	5470 <setup_ipv6_ctx>
		if (!ret) {
    5736:	b900      	cbnz	r0, 573a <_net_app_config_local_ctx+0x1a>
	ctx->default_ctx = &ctx->ipv6;
    5738:	6364      	str	r4, [r4, #52]	; 0x34
}
    573a:	bd38      	pop	{r3, r4, r5, pc}
		if (addr->sa_family == AF_INET6) {
    573c:	8818      	ldrh	r0, [r3, #0]
    573e:	280a      	cmp	r0, #10
    5740:	d106      	bne.n	5750 <_net_app_config_local_ctx+0x30>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
    5742:	4620      	mov	r0, r4
    5744:	f7ff fe94 	bl	5470 <setup_ipv6_ctx>
				net_sin6(addr)->sin6_port;
    5748:	886b      	ldrh	r3, [r5, #2]
			ctx->default_ctx = &ctx->ipv6;
    574a:	6364      	str	r4, [r4, #52]	; 0x34
			net_sin6(&ctx->ipv6.local)->sin6_port =
    574c:	80e3      	strh	r3, [r4, #6]
    574e:	e7f4      	b.n	573a <_net_app_config_local_ctx+0x1a>
		} else if (addr->sa_family == AF_INET) {
    5750:	2802      	cmp	r0, #2
    5752:	d004      	beq.n	575e <_net_app_config_local_ctx+0x3e>
		} else if (addr->sa_family == AF_UNSPEC) {
    5754:	2800      	cmp	r0, #0
    5756:	d0f4      	beq.n	5742 <_net_app_config_local_ctx+0x22>
			ret = -EINVAL;
    5758:	f06f 0015 	mvn.w	r0, #21
    575c:	e7ed      	b.n	573a <_net_app_config_local_ctx+0x1a>
			ret = -EPFNOSUPPORT;
    575e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
    5762:	e7ea      	b.n	573a <_net_app_config_local_ctx+0x1a>

00005764 <net_app_release>:
{
    5764:	b510      	push	{r4, lr}
	if (!ctx) {
    5766:	4604      	mov	r4, r0
    5768:	b188      	cbz	r0, 578e <net_app_release+0x2a>
	if (!ctx->is_init) {
    576a:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
    576e:	07db      	lsls	r3, r3, #31
    5770:	d510      	bpl.n	5794 <net_app_release+0x30>
	if (ctx->ipv6.ctx) {
    5772:	6800      	ldr	r0, [r0, #0]
    5774:	b118      	cbz	r0, 577e <net_app_release+0x1a>
		net_context_put(ctx->ipv6.ctx);
    5776:	f01a fb77 	bl	1fe68 <net_context_put>
		ctx->ipv6.ctx = NULL;
    577a:	2300      	movs	r3, #0
    577c:	6023      	str	r3, [r4, #0]
	ctx->is_init = false;
    577e:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
    5782:	f36f 0300 	bfc	r3, #0, #1
    5786:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	return 0;
    578a:	2000      	movs	r0, #0
}
    578c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    578e:	f06f 0015 	mvn.w	r0, #21
    5792:	e7fb      	b.n	578c <net_app_release+0x28>
		return -ENOENT;
    5794:	f06f 0001 	mvn.w	r0, #1
    5798:	e7f8      	b.n	578c <net_app_release+0x28>

0000579a <_net_app_select_net_ctx_debug>:
	if (ctx->app_type == NET_APP_CLIENT) {
    579a:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    579e:	2b02      	cmp	r3, #2
    57a0:	d101      	bne.n	57a6 <_net_app_select_net_ctx_debug+0xc>
		net_ctx = select_client_ctx(ctx, dst);
    57a2:	f7ff beb1 	b.w	5508 <select_client_ctx>
}
    57a6:	2000      	movs	r0, #0
    57a8:	4770      	bx	lr

000057aa <net_app_set_cb>:
{
    57aa:	b510      	push	{r4, lr}
	if (!ctx) {
    57ac:	b150      	cbz	r0, 57c4 <net_app_set_cb+0x1a>
	if (!ctx->is_init) {
    57ae:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
    57b2:	07e4      	lsls	r4, r4, #31
    57b4:	d509      	bpl.n	57ca <net_app_set_cb+0x20>
	ctx->cb.send = send_cb;
    57b6:	6443      	str	r3, [r0, #68]	; 0x44
	ctx->cb.close = close_cb;
    57b8:	9b02      	ldr	r3, [sp, #8]
    57ba:	6483      	str	r3, [r0, #72]	; 0x48
	ctx->cb.recv = recv_cb;
    57bc:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
	return 0;
    57c0:	2000      	movs	r0, #0
}
    57c2:	bd10      	pop	{r4, pc}
		return -EINVAL;
    57c4:	f06f 0015 	mvn.w	r0, #21
    57c8:	e7fb      	b.n	57c2 <net_app_set_cb+0x18>
		return -ENOENT;
    57ca:	f06f 0001 	mvn.w	r0, #1
    57ce:	e7f8      	b.n	57c2 <net_app_set_cb+0x18>

000057d0 <net_app_send_pkt>:
		     struct net_pkt *pkt,
		     const struct sockaddr *dst,
		     socklen_t dst_len,
		     s32_t timeout,
		     void *user_data_send)
{
    57d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    57d2:	460d      	mov	r5, r1
    57d4:	b08b      	sub	sp, #44	; 0x2c
    57d6:	4616      	mov	r6, r2
    57d8:	461f      	mov	r7, r3
	int ret;

	if (!ctx) {
    57da:	4604      	mov	r4, r0
    57dc:	2800      	cmp	r0, #0
    57de:	d055      	beq.n	588c <net_app_send_pkt+0xbc>
		return -EINVAL;
	}

	if (!ctx->is_init) {
    57e0:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
    57e4:	07db      	lsls	r3, r3, #31
    57e6:	d554      	bpl.n	5892 <net_app_send_pkt+0xc2>
	 * will be put back just before sending the packet. Normally the
	 * data that is sent does not contain IP header, but if the caller
	 * replies the packet directly back, the IP header could be there
	 * at this point.
	 */
	if (net_pkt_appdatalen(pkt) > 0) {
    57e8:	8fc9      	ldrh	r1, [r1, #62]	; 0x3e
    57ea:	6968      	ldr	r0, [r5, #20]
    57ec:	bb49      	cbnz	r1, 5842 <net_app_send_pkt+0x72>
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;

	while (buf) {
    57ee:	bb58      	cbnz	r0, 5848 <net_app_send_pkt+0x78>
			net_pkt_appdatalen(pkt);
		if (header_len > 0) {
			net_buf_pull(pkt->frags, header_len);
		}
	} else {
		net_pkt_set_appdatalen(pkt, net_buf_frags_len(pkt->frags));
    57f0:	87e9      	strh	r1, [r5, #62]	; 0x3e
    57f2:	e00b      	b.n	580c <net_app_send_pkt+0x3c>
		bytes += buf->len;
    57f4:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
		buf = buf->frags;
    57f8:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
    57fa:	4463      	add	r3, ip
	while (buf) {
    57fc:	2a00      	cmp	r2, #0
    57fe:	d1f9      	bne.n	57f4 <net_app_send_pkt+0x24>
		header_len = net_buf_frags_len(pkt->frags) -
    5800:	1a59      	subs	r1, r3, r1
		if (header_len > 0) {
    5802:	2900      	cmp	r1, #0
    5804:	dd02      	ble.n	580c <net_app_send_pkt+0x3c>
			net_buf_pull(pkt->frags, header_len);
    5806:	3008      	adds	r0, #8
    5808:	f019 fdd2 	bl	1f3b0 <net_buf_simple_pull>
	}

	if (ctx->proto == IPPROTO_UDP) {
    580c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    5810:	2b11      	cmp	r3, #17
    5812:	d109      	bne.n	5828 <net_app_send_pkt+0x58>
    5814:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
    5818:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (!dst) {
    581c:	b9c6      	cbnz	r6, 5850 <net_app_send_pkt+0x80>
				dst_len = sizeof(struct sockaddr_in);
#else
				return -EPFNOSUPPORT;
#endif
			} else {
				if (net_pkt_family(pkt) == AF_INET6) {
    581e:	2b0a      	cmp	r3, #10
    5820:	d13a      	bne.n	5898 <net_app_send_pkt+0xc8>
#if defined(CONFIG_NET_IPV6)
					dst = &ctx->ipv6.remote;
    5822:	f104 061c 	add.w	r6, r4, #28
				if (net_pkt_family(pkt) == AF_INET6) {
#if defined(CONFIG_NET_IPV6)
					net_ipaddr_copy(
						net_sin6(&ctx->ipv6.remote),
						net_sin6(dst));
					dst_len = sizeof(struct sockaddr_in6);
    5826:	2718      	movs	r7, #24
				}
			}
		}
	}

	ret = ctx->send_data(pkt, dst, dst_len, _app_send, timeout,
    5828:	9b11      	ldr	r3, [sp, #68]	; 0x44
    582a:	9301      	str	r3, [sp, #4]
    582c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    582e:	9300      	str	r3, [sp, #0]
    5830:	9402      	str	r4, [sp, #8]
    5832:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    5834:	4b1a      	ldr	r3, [pc, #104]	; (58a0 <net_app_send_pkt+0xd0>)
    5836:	463a      	mov	r2, r7
    5838:	4631      	mov	r1, r6
    583a:	4628      	mov	r0, r5
    583c:	47a0      	blx	r4
	if (ret < 0) {
		NET_DBG("Cannot send to peer (%d)", ret);
	}

	return ret;
}
    583e:	b00b      	add	sp, #44	; 0x2c
    5840:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5842:	4602      	mov	r2, r0
	size_t bytes = 0;
    5844:	2300      	movs	r3, #0
    5846:	e7d9      	b.n	57fc <net_app_send_pkt+0x2c>
		bytes += buf->len;
    5848:	8983      	ldrh	r3, [r0, #12]
		buf = buf->frags;
    584a:	6800      	ldr	r0, [r0, #0]
		bytes += buf->len;
    584c:	4419      	add	r1, r3
    584e:	e7ce      	b.n	57ee <net_app_send_pkt+0x1e>
				if (net_pkt_family(pkt) == AF_INET6) {
    5850:	2b0a      	cmp	r3, #10
    5852:	d121      	bne.n	5898 <net_app_send_pkt+0xc8>
					net_ipaddr_copy(
    5854:	af04      	add	r7, sp, #16
    5856:	4633      	mov	r3, r6
    5858:	f106 0e18 	add.w	lr, r6, #24
    585c:	463a      	mov	r2, r7
    585e:	6818      	ldr	r0, [r3, #0]
    5860:	6859      	ldr	r1, [r3, #4]
    5862:	46bc      	mov	ip, r7
    5864:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    5868:	3308      	adds	r3, #8
    586a:	4573      	cmp	r3, lr
    586c:	4667      	mov	r7, ip
    586e:	d1f6      	bne.n	585e <net_app_send_pkt+0x8e>
    5870:	f104 071c 	add.w	r7, r4, #28
    5874:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
    5878:	4613      	mov	r3, r2
    587a:	cb03      	ldmia	r3!, {r0, r1}
    587c:	4563      	cmp	r3, ip
    587e:	6038      	str	r0, [r7, #0]
    5880:	6079      	str	r1, [r7, #4]
    5882:	461a      	mov	r2, r3
    5884:	f107 0708 	add.w	r7, r7, #8
    5888:	d1f6      	bne.n	5878 <net_app_send_pkt+0xa8>
    588a:	e7cc      	b.n	5826 <net_app_send_pkt+0x56>
		return -EINVAL;
    588c:	f06f 0015 	mvn.w	r0, #21
    5890:	e7d5      	b.n	583e <net_app_send_pkt+0x6e>
		return -ENOENT;
    5892:	f06f 0001 	mvn.w	r0, #1
    5896:	e7d2      	b.n	583e <net_app_send_pkt+0x6e>
					return -EPFNOSUPPORT;
    5898:	f06f 002d 	mvn.w	r0, #45	; 0x2d
    589c:	e7cf      	b.n	583e <net_app_send_pkt+0x6e>
    589e:	bf00      	nop
    58a0:	00005455 	.word	0x00005455

000058a4 <net_app_get_net_pkt>:
}

struct net_pkt *net_app_get_net_pkt(struct net_app_ctx *ctx,
				    sa_family_t family,
				    s32_t timeout)
{
    58a4:	b570      	push	{r4, r5, r6, lr}
    58a6:	b086      	sub	sp, #24
    58a8:	4604      	mov	r4, r0
    58aa:	460e      	mov	r6, r1
    58ac:	4615      	mov	r5, r2
	struct net_context *net_ctx;
	struct sockaddr dst = { 0 };
    58ae:	2100      	movs	r1, #0
    58b0:	2218      	movs	r2, #24
    58b2:	4668      	mov	r0, sp
    58b4:	f001 fa15 	bl	6ce2 <memset>

	if (!ctx) {
    58b8:	b914      	cbnz	r4, 58c0 <net_app_get_net_pkt+0x1c>
		return NULL;
    58ba:	2000      	movs	r0, #0
	if (!net_ctx) {
		return NULL;
	}

	return net_pkt_get_tx(net_ctx, timeout);
}
    58bc:	b006      	add	sp, #24
    58be:	bd70      	pop	{r4, r5, r6, pc}
	if (!ctx->is_init) {
    58c0:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
    58c4:	07db      	lsls	r3, r3, #31
    58c6:	d5f8      	bpl.n	58ba <net_app_get_net_pkt+0x16>
	if (ctx->app_type == NET_APP_CLIENT) {
    58c8:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
	dst.sa_family = family;
    58cc:	f8ad 6000 	strh.w	r6, [sp]
	if (ctx->app_type == NET_APP_CLIENT) {
    58d0:	2b02      	cmp	r3, #2
    58d2:	d1f2      	bne.n	58ba <net_app_get_net_pkt+0x16>
		net_ctx = select_client_ctx(ctx, dst);
    58d4:	4669      	mov	r1, sp
    58d6:	4620      	mov	r0, r4
    58d8:	f7ff fe16 	bl	5508 <select_client_ctx>
	if (!net_ctx) {
    58dc:	2800      	cmp	r0, #0
    58de:	d0ec      	beq.n	58ba <net_app_get_net_pkt+0x16>
	return net_pkt_get_tx(net_ctx, timeout);
    58e0:	4629      	mov	r1, r5
    58e2:	f01c fdf1 	bl	224c8 <net_pkt_get_tx>
    58e6:	e7e9      	b.n	58bc <net_app_get_net_pkt+0x18>

000058e8 <net_app_close>:

	return frag;
}

int net_app_close(struct net_app_ctx *ctx)
{
    58e8:	b538      	push	{r3, r4, r5, lr}
	struct net_context *net_ctx;

	if (!ctx) {
    58ea:	4604      	mov	r4, r0
    58ec:	b330      	cbz	r0, 593c <net_app_close+0x54>
		return -EINVAL;
	}

	if (!ctx->is_init) {
    58ee:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
    58f2:	07db      	lsls	r3, r3, #31
    58f4:	d525      	bpl.n	5942 <net_app_close+0x5a>
	if (ctx->app_type == NET_APP_CLIENT) {
    58f6:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    58fa:	2b02      	cmp	r3, #2
    58fc:	d11c      	bne.n	5938 <net_app_close+0x50>
		net_ctx = select_client_ctx(ctx, dst);
    58fe:	2100      	movs	r1, #0
    5900:	f7ff fe02 	bl	5508 <select_client_ctx>
    5904:	4605      	mov	r5, r0
	}
#endif

	net_ctx = _net_app_select_net_ctx(ctx, NULL);

	if (ctx->cb.close) {
    5906:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    5908:	b11b      	cbz	r3, 5912 <net_app_close+0x2a>
		ctx->cb.close(ctx, 0, ctx->user_data);
    590a:	6f22      	ldr	r2, [r4, #112]	; 0x70
    590c:	2100      	movs	r1, #0
    590e:	4620      	mov	r0, r4
    5910:	4798      	blx	r3
			}
		}
	}
#endif

	if (net_ctx) {
    5912:	b125      	cbz	r5, 591e <net_app_close+0x36>
		net_ctx->net_app = NULL;
    5914:	2300      	movs	r3, #0
    5916:	64ab      	str	r3, [r5, #72]	; 0x48
		net_context_put(net_ctx);
    5918:	4628      	mov	r0, r5
    591a:	f01a faa5 	bl	1fe68 <net_context_put>

		NET_DBG("Closing net_ctx %p", net_ctx);
	}

#if defined(CONFIG_NET_APP_CLIENT)
	if (ctx->app_type == NET_APP_CLIENT) {
    591e:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    5922:	2b02      	cmp	r3, #2
    5924:	d110      	bne.n	5948 <net_app_close+0x60>
		ctx->is_enabled = false;
    5926:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
		 */
#if defined(CONFIG_NET_IPV4)
		net_sin(&ctx->ipv4.local)->sin_port = 0;
#endif
#if defined(CONFIG_NET_IPV6)
		net_sin6(&ctx->ipv6.local)->sin6_port = 0;
    592a:	2000      	movs	r0, #0
		ctx->is_enabled = false;
    592c:	f36f 0382 	bfc	r3, #2, #1
    5930:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
		net_sin6(&ctx->ipv6.local)->sin6_port = 0;
    5934:	80e0      	strh	r0, [r4, #6]
#endif
	}
#endif

	return 0;
}
    5936:	bd38      	pop	{r3, r4, r5, pc}
	struct net_context *net_ctx = NULL;
    5938:	2500      	movs	r5, #0
    593a:	e7e4      	b.n	5906 <net_app_close+0x1e>
		return -EINVAL;
    593c:	f06f 0015 	mvn.w	r0, #21
    5940:	e7f9      	b.n	5936 <net_app_close+0x4e>
		return -ENOENT;
    5942:	f06f 0001 	mvn.w	r0, #1
    5946:	e7f6      	b.n	5936 <net_app_close+0x4e>
	return 0;
    5948:	2000      	movs	r0, #0
    594a:	e7f4      	b.n	5936 <net_app_close+0x4e>

0000594c <_app_connected>:
}

static void _app_connected(struct net_context *net_ctx,
			   int status,
			   void *user_data)
{
    594c:	b570      	push	{r4, r5, r6, lr}
    594e:	4614      	mov	r4, r2
	if (ctx->is_tls) {
		k_sem_give(&ctx->client.connect_wait);
	}
#endif

	ret = net_context_recv(net_ctx, ctx->recv_cb, K_NO_WAIT, ctx);
    5950:	4613      	mov	r3, r2
{
    5952:	460d      	mov	r5, r1
	ret = net_context_recv(net_ctx, ctx->recv_cb, K_NO_WAIT, ctx);
    5954:	2200      	movs	r2, #0
    5956:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    5958:	f01a fe2c 	bl	205b4 <net_context_recv>
		 */
		NET_DBG("Postponing TLS connection cb for ctx %p", ctx);
	} else
#endif
	{
		if (ctx->cb.connect) {
    595c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    595e:	b12b      	cbz	r3, 596c <_app_connected+0x20>
			ctx->cb.connect(ctx, status, ctx->user_data);
    5960:	6f22      	ldr	r2, [r4, #112]	; 0x70
    5962:	4629      	mov	r1, r5
    5964:	4620      	mov	r0, r4
		}
	}
}
    5966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			ctx->cb.connect(ctx, status, ctx->user_data);
    596a:	4718      	bx	r3
}
    596c:	bd70      	pop	{r4, r5, r6, pc}

0000596e <bind_local.part.4>:
static int bind_local(struct net_app_ctx *ctx)
    596e:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ctx->ipv6.local.sa_family = AF_INET6;
    5970:	4605      	mov	r5, r0
				ntohs(net_sin6(&ctx->ipv6.local)->sin6_port));
    5972:	88c2      	ldrh	r2, [r0, #6]
		ctx->ipv6.local.sa_family = AF_INET6;
    5974:	230a      	movs	r3, #10
    5976:	f825 3f04 	strh.w	r3, [r5, #4]!
				ntohs(net_sin6(&ctx->ipv6.local)->sin6_port));
    597a:	0213      	lsls	r3, r2, #8
static int bind_local(struct net_app_ctx *ctx)
    597c:	4604      	mov	r4, r0
				ntohs(net_sin6(&ctx->ipv6.local)->sin6_port));
    597e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		_net_app_set_local_addr(ctx, &ctx->ipv6.local, NULL,
    5982:	4629      	mov	r1, r5
    5984:	b29b      	uxth	r3, r3
    5986:	2200      	movs	r2, #0
    5988:	f7ff fe88 	bl	569c <_net_app_set_local_addr>
		ret = _net_app_set_net_ctx(ctx, ctx->ipv6.ctx,
    598c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    5990:	9300      	str	r3, [sp, #0]
    5992:	462a      	mov	r2, r5
    5994:	2318      	movs	r3, #24
    5996:	6821      	ldr	r1, [r4, #0]
    5998:	4620      	mov	r0, r4
    599a:	f7ff fe4b 	bl	5634 <_net_app_set_net_ctx>
		if (ret < 0) {
    599e:	1e05      	subs	r5, r0, #0
    59a0:	da04      	bge.n	59ac <bind_local.part.4+0x3e>
			net_context_put(ctx->ipv6.ctx);
    59a2:	6820      	ldr	r0, [r4, #0]
    59a4:	f01a fa60 	bl	1fe68 <net_context_put>
			ctx->ipv6.ctx = NULL;
    59a8:	2300      	movs	r3, #0
    59aa:	6023      	str	r3, [r4, #0]
}
    59ac:	4628      	mov	r0, r5
    59ae:	b003      	add	sp, #12
    59b0:	bd30      	pop	{r4, r5, pc}
	...

000059b4 <net_app_init_client>:
{
    59b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59b8:	b09b      	sub	sp, #108	; 0x6c
    59ba:	468a      	mov	sl, r1
    59bc:	4693      	mov	fp, r2
    59be:	461d      	mov	r5, r3
    59c0:	e9dd 6824 	ldrd	r6, r8, [sp, #144]	; 0x90
    59c4:	f8bd 9098 	ldrh.w	r9, [sp, #152]	; 0x98
	if (!ctx) {
    59c8:	4604      	mov	r4, r0
    59ca:	b928      	cbnz	r0, 59d8 <net_app_init_client+0x24>
		ret = -EINVAL;
    59cc:	f06f 0515 	mvn.w	r5, #21
}
    59d0:	4628      	mov	r0, r5
    59d2:	b01b      	add	sp, #108	; 0x6c
    59d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ctx->is_init) {
    59d8:	f890 7077 	ldrb.w	r7, [r0, #119]	; 0x77
    59dc:	f017 0701 	ands.w	r7, r7, #1
    59e0:	f040 810b 	bne.w	5bfa <net_app_init_client+0x246>
	(void)memset(&addr, 0, sizeof(addr));
    59e4:	2218      	movs	r2, #24
    59e6:	4639      	mov	r1, r7
    59e8:	a808      	add	r0, sp, #32
    59ea:	f001 f97a 	bl	6ce2 <memset>
	(void)memset(&remote_addr, 0, sizeof(remote_addr));
    59ee:	2218      	movs	r2, #24
    59f0:	4639      	mov	r1, r7
    59f2:	a802      	add	r0, sp, #8
    59f4:	f001 f975 	bl	6ce2 <memset>
	if (peer_addr) {
    59f8:	2e00      	cmp	r6, #0
    59fa:	d03e      	beq.n	5a7a <net_app_init_client+0xc6>
		memcpy(&remote_addr, peer_addr, sizeof(remote_addr));
    59fc:	2218      	movs	r2, #24
    59fe:	4631      	mov	r1, r6
    5a00:	a802      	add	r0, sp, #8
    5a02:	f001 f941 	bl	6c88 <memcpy>
    5a06:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		addr.sa_family = remote_addr.sa_family;
    5a0a:	f8ad 3020 	strh.w	r3, [sp, #32]
	if (client_addr) {
    5a0e:	b18d      	cbz	r5, 5a34 <net_app_init_client+0x80>
		if (client_addr->sa_family == AF_INET6) {
    5a10:	882a      	ldrh	r2, [r5, #0]
    5a12:	2a0a      	cmp	r2, #10
    5a14:	d169      	bne.n	5aea <net_app_init_client+0x136>
 *
 *  @return True if the address is unspecified, false otherwise.
 */
static inline bool net_is_ipv6_addr_unspecified(const struct in6_addr *addr)
{
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
    5a16:	686a      	ldr	r2, [r5, #4]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
    5a18:	2a00      	cmp	r2, #0
    5a1a:	d166      	bne.n	5aea <net_app_init_client+0x136>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
    5a1c:	68aa      	ldr	r2, [r5, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
    5a1e:	2a00      	cmp	r2, #0
    5a20:	d163      	bne.n	5aea <net_app_init_client+0x136>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
    5a22:	68ea      	ldr	r2, [r5, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
    5a24:	2a00      	cmp	r2, #0
    5a26:	d160      	bne.n	5aea <net_app_init_client+0x136>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
    5a28:	692a      	ldr	r2, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
    5a2a:	2a00      	cmp	r2, #0
    5a2c:	d15d      	bne.n	5aea <net_app_init_client+0x136>
			local_port = net_sin6(client_addr)->sin6_port;
    5a2e:	886a      	ldrh	r2, [r5, #2]
				net_sin6(&addr)->sin6_port = local_port;
    5a30:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
	ctx->app_type = NET_APP_CLIENT;
    5a34:	2302      	movs	r3, #2
    5a36:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	ctx->user_data = user_data;
    5a3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    5a3c:	6723      	str	r3, [r4, #112]	; 0x70
	ctx->send_data = net_context_sendto;
    5a3e:	4b72      	ldr	r3, [pc, #456]	; (5c08 <net_app_init_client+0x254>)
    5a40:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->recv_cb = _net_app_received;
    5a42:	4b72      	ldr	r3, [pc, #456]	; (5c0c <net_app_init_client+0x258>)
    5a44:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->is_enabled = true;
    5a46:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
	ctx->proto = proto;
    5a4a:	f884 b075 	strb.w	fp, [r4, #117]	; 0x75
	ctx->is_enabled = true;
    5a4e:	f043 0304 	orr.w	r3, r3, #4
    5a52:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	ctx->sock_type = sock_type;
    5a56:	f884 a074 	strb.w	sl, [r4, #116]	; 0x74
	ret = _net_app_config_local_ctx(ctx, sock_type, proto, &addr);
    5a5a:	ab08      	add	r3, sp, #32
    5a5c:	465a      	mov	r2, fp
    5a5e:	4651      	mov	r1, sl
    5a60:	4620      	mov	r0, r4
    5a62:	f7ff fe5d 	bl	5720 <_net_app_config_local_ctx>
	if (ret < 0) {
    5a66:	1e05      	subs	r5, r0, #0
    5a68:	da4b      	bge.n	5b02 <net_app_init_client+0x14e>
	if (ctx->ipv6.ctx) {
    5a6a:	6820      	ldr	r0, [r4, #0]
    5a6c:	2800      	cmp	r0, #0
    5a6e:	d0af      	beq.n	59d0 <net_app_init_client+0x1c>
		net_context_put(ctx->ipv6.ctx);
    5a70:	f01a f9fa 	bl	1fe68 <net_context_put>
		ctx->ipv6.ctx = NULL;
    5a74:	2300      	movs	r3, #0
    5a76:	6023      	str	r3, [r4, #0]
    5a78:	e7aa      	b.n	59d0 <net_app_init_client+0x1c>
	} else if (peer_addr_str) {
    5a7a:	f1b8 0f00 	cmp.w	r8, #0
    5a7e:	d032      	beq.n	5ae6 <net_app_init_client+0x132>
	if (peer_addr_str[0] == '[') {
    5a80:	f898 3000 	ldrb.w	r3, [r8]
    5a84:	2b5b      	cmp	r3, #91	; 0x5b
    5a86:	d127      	bne.n	5ad8 <net_app_init_client+0x124>
		ptr = strstr(peer_addr_str, "]:");
    5a88:	4961      	ldr	r1, [pc, #388]	; (5c10 <net_app_init_client+0x25c>)
    5a8a:	4640      	mov	r0, r8
    5a8c:	f001 f851 	bl	6b32 <strstr>
		if (!ptr) {
    5a90:	b310      	cbz	r0, 5ad8 <net_app_init_client+0x124>
		end = min(INET6_ADDRSTRLEN, ptr - (peer_addr_str + 1));
    5a92:	f108 0101 	add.w	r1, r8, #1
    5a96:	1a47      	subs	r7, r0, r1
    5a98:	2f2e      	cmp	r7, #46	; 0x2e
    5a9a:	bfa8      	it	ge
    5a9c:	272e      	movge	r7, #46	; 0x2e
		memcpy(buf, peer_addr_str + 1, end);
    5a9e:	463a      	mov	r2, r7
		end = min(INET6_ADDRSTRLEN, ptr - (peer_addr_str + 1));
    5aa0:	9001      	str	r0, [sp, #4]
		memcpy(buf, peer_addr_str + 1, end);
    5aa2:	a80e      	add	r0, sp, #56	; 0x38
    5aa4:	f001 f8f0 	bl	6c88 <memcpy>
		buf[end] = '\0';
    5aa8:	ab1a      	add	r3, sp, #104	; 0x68
    5aaa:	441f      	add	r7, r3
		port = strtol(ptr + 2, NULL, 10);
    5aac:	9b01      	ldr	r3, [sp, #4]
		buf[end] = '\0';
    5aae:	f807 6c30 	strb.w	r6, [r7, #-48]
		port = strtol(ptr + 2, NULL, 10);
    5ab2:	1c98      	adds	r0, r3, #2
    5ab4:	220a      	movs	r2, #10
    5ab6:	4631      	mov	r1, r6
    5ab8:	f000 ff4c 	bl	6954 <strtol>
		if (ret > 0) {
    5abc:	b283      	uxth	r3, r0
    5abe:	b15b      	cbz	r3, 5ad8 <net_app_init_client+0x124>
			peer_port = ret;
    5ac0:	4699      	mov	r9, r3
			base_peer_addr = base_addr_str;
    5ac2:	af0e      	add	r7, sp, #56	; 0x38
		addr_ok = net_ipaddr_parse(base_peer_addr,
    5ac4:	4638      	mov	r0, r7
    5ac6:	f001 f889 	bl	6bdc <strlen>
    5aca:	aa02      	add	r2, sp, #8
    5acc:	4601      	mov	r1, r0
    5ace:	4638      	mov	r0, r7
    5ad0:	f01d fc9e 	bl	23410 <net_ipaddr_parse>
    5ad4:	4607      	mov	r7, r0
    5ad6:	e796      	b.n	5a06 <net_app_init_client+0x52>
			strncpy(base_addr_str, peer_addr_str,
    5ad8:	222e      	movs	r2, #46	; 0x2e
    5ada:	4641      	mov	r1, r8
    5adc:	a80e      	add	r0, sp, #56	; 0x38
    5ade:	f001 f84f 	bl	6b80 <strncpy>
    5ae2:	4647      	mov	r7, r8
    5ae4:	e7ee      	b.n	5ac4 <net_app_init_client+0x110>
	int ret, addr_ok = false;
    5ae6:	4647      	mov	r7, r8
    5ae8:	e78d      	b.n	5a06 <net_app_init_client+0x52>
			memcpy(&addr, client_addr, sizeof(addr));
    5aea:	2218      	movs	r2, #24
    5aec:	4629      	mov	r1, r5
    5aee:	a808      	add	r0, sp, #32
    5af0:	f001 f8ca 	bl	6c88 <memcpy>
			if (addr.sa_family != remote_addr.sa_family) {
    5af4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    5af8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5afc:	429a      	cmp	r2, r3
    5afe:	d099      	beq.n	5a34 <net_app_init_client+0x80>
    5b00:	e764      	b.n	59cc <net_app_init_client+0x18>
	if (peer_addr) {
    5b02:	b1ae      	cbz	r6, 5b30 <net_app_init_client+0x17c>
		if (peer_addr->sa_family == AF_INET) {
    5b04:	8833      	ldrh	r3, [r6, #0]
    5b06:	2b02      	cmp	r3, #2
    5b08:	d07a      	beq.n	5c00 <net_app_init_client+0x24c>
		} else if (peer_addr->sa_family == AF_INET6) {
    5b0a:	2b0a      	cmp	r3, #10
    5b0c:	d106      	bne.n	5b1c <net_app_init_client+0x168>
			memcpy(&ctx->ipv6.remote, peer_addr,
    5b0e:	2218      	movs	r2, #24
    5b10:	4631      	mov	r1, r6
    5b12:	f104 001c 	add.w	r0, r4, #28
    5b16:	f001 f8b7 	bl	6c88 <memcpy>
			ctx->default_ctx = &ctx->ipv6;
    5b1a:	6364      	str	r4, [r4, #52]	; 0x34
	ctx->is_init = true;
    5b1c:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
    5b20:	f043 0301 	orr.w	r3, r3, #1
    5b24:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	_net_app_register(ctx);
    5b28:	4620      	mov	r0, r4
    5b2a:	f7ff fd2e 	bl	558a <_net_app_register>
    5b2e:	e74f      	b.n	59d0 <net_app_init_client+0x1c>
	if (!peer_addr_str) {
    5b30:	f1b8 0f00 	cmp.w	r8, #0
    5b34:	d11d      	bne.n	5b72 <net_app_init_client+0x1be>
		NET_ERR("Cannot know where to connect.");
    5b36:	4b37      	ldr	r3, [pc, #220]	; (5c14 <net_app_init_client+0x260>)
    5b38:	681b      	ldr	r3, [r3, #0]
    5b3a:	075a      	lsls	r2, r3, #29
    5b3c:	d010      	beq.n	5b60 <net_app_init_client+0x1ac>
    5b3e:	2301      	movs	r3, #1
    5b40:	f04f 0200 	mov.w	r2, #0
    5b44:	f363 0202 	bfi	r2, r3, #0, #3
    5b48:	4933      	ldr	r1, [pc, #204]	; (5c18 <net_app_init_client+0x264>)
    5b4a:	4b34      	ldr	r3, [pc, #208]	; (5c1c <net_app_init_client+0x268>)
    5b4c:	4834      	ldr	r0, [pc, #208]	; (5c20 <net_app_init_client+0x26c>)
    5b4e:	1a5b      	subs	r3, r3, r1
    5b50:	f368 02c5 	bfi	r2, r8, #3, #3
    5b54:	08db      	lsrs	r3, r3, #3
    5b56:	f363 128f 	bfi	r2, r3, #6, #10
    5b5a:	4932      	ldr	r1, [pc, #200]	; (5c24 <net_app_init_client+0x270>)
    5b5c:	f7fc fac6 	bl	20ec <log_1>
	if (ctx->ipv6.ctx) {
    5b60:	6820      	ldr	r0, [r4, #0]
    5b62:	2800      	cmp	r0, #0
    5b64:	f43f af32 	beq.w	59cc <net_app_init_client+0x18>
		net_context_put(ctx->ipv6.ctx);
    5b68:	f01a f97e 	bl	1fe68 <net_context_put>
		ctx->ipv6.ctx = NULL;
    5b6c:	2300      	movs	r3, #0
    5b6e:	6023      	str	r3, [r4, #0]
    5b70:	e72c      	b.n	59cc <net_app_init_client+0x18>
	if (peer_addr_ok && remote_addr->sa_family == AF_INET6) {
    5b72:	b32f      	cbz	r7, 5bc0 <net_app_init_client+0x20c>
    5b74:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5b78:	2b0a      	cmp	r3, #10
    5b7a:	d11a      	bne.n	5bb2 <net_app_init_client+0x1fe>
		memcpy(&ctx->ipv6.remote, remote_addr,
    5b7c:	2218      	movs	r2, #24
    5b7e:	a902      	add	r1, sp, #8
    5b80:	f104 001c 	add.w	r0, r4, #28
    5b84:	f001 f880 	bl	6c88 <memcpy>
	    ctx->default_ctx->remote.sa_family == AF_UNSPEC) {
    5b88:	8ba3      	ldrh	r3, [r4, #28]
		ctx->default_ctx = &ctx->ipv6;
    5b8a:	6364      	str	r4, [r4, #52]	; 0x34
	if (!ctx->default_ctx ||
    5b8c:	b1db      	cbz	r3, 5bc6 <net_app_init_client+0x212>
		if (ctx->default_ctx->remote.sa_family == AF_INET6) {
    5b8e:	2b0a      	cmp	r3, #10
    5b90:	d131      	bne.n	5bf6 <net_app_init_client+0x242>
	if (ctx->ipv6.remote.sa_family == AF_INET6 && ctx->ipv6.ctx) {
    5b92:	6823      	ldr	r3, [r4, #0]
			net_sin6(&ctx->default_ctx->remote)->sin6_port =
    5b94:	fa99 f999 	rev16.w	r9, r9
    5b98:	f8a4 901e 	strh.w	r9, [r4, #30]
	if (ctx->ipv6.remote.sa_family == AF_INET6 && ctx->ipv6.ctx) {
    5b9c:	b35b      	cbz	r3, 5bf6 <net_app_init_client+0x242>
    5b9e:	4620      	mov	r0, r4
    5ba0:	f7ff fee5 	bl	596e <bind_local.part.4>
	if (ret < 0) {
    5ba4:	1e05      	subs	r5, r0, #0
    5ba6:	f6ff af13 	blt.w	59d0 <net_app_init_client+0x1c>
	_net_app_print_info(ctx);
    5baa:	4620      	mov	r0, r4
    5bac:	f7ff fd1a 	bl	55e4 <_net_app_print_info>
    5bb0:	e7b4      	b.n	5b1c <net_app_init_client+0x168>
		return -EAFNOSUPPORT;
    5bb2:	2b02      	cmp	r3, #2
    5bb4:	bf14      	ite	ne
    5bb6:	f06f 0515 	mvnne.w	r5, #21
    5bba:	f06f 052e 	mvneq.w	r5, #46	; 0x2e
    5bbe:	e754      	b.n	5a6a <net_app_init_client+0xb6>
	if (peer_addr_ok && remote_addr->sa_family == AF_INET6) {
    5bc0:	f06f 0515 	mvn.w	r5, #21
    5bc4:	e751      	b.n	5a6a <net_app_init_client+0xb6>
		NET_ERR("Unknown protocol family.");
    5bc6:	4b13      	ldr	r3, [pc, #76]	; (5c14 <net_app_init_client+0x260>)
    5bc8:	681b      	ldr	r3, [r3, #0]
    5bca:	075b      	lsls	r3, r3, #29
    5bcc:	d010      	beq.n	5bf0 <net_app_init_client+0x23c>
    5bce:	2301      	movs	r3, #1
    5bd0:	f04f 0200 	mov.w	r2, #0
    5bd4:	f363 0202 	bfi	r2, r3, #0, #3
    5bd8:	490f      	ldr	r1, [pc, #60]	; (5c18 <net_app_init_client+0x264>)
    5bda:	4b10      	ldr	r3, [pc, #64]	; (5c1c <net_app_init_client+0x268>)
    5bdc:	4812      	ldr	r0, [pc, #72]	; (5c28 <net_app_init_client+0x274>)
    5bde:	1a5b      	subs	r3, r3, r1
    5be0:	f366 02c5 	bfi	r2, r6, #3, #3
    5be4:	08db      	lsrs	r3, r3, #3
    5be6:	f363 128f 	bfi	r2, r3, #6, #10
    5bea:	490e      	ldr	r1, [pc, #56]	; (5c24 <net_app_init_client+0x270>)
    5bec:	f7fc fa7e 	bl	20ec <log_1>
		return -EPFNOSUPPORT;
    5bf0:	f06f 052d 	mvn.w	r5, #45	; 0x2d
    5bf4:	e6ec      	b.n	59d0 <net_app_init_client+0x1c>
	int ret = 0;
    5bf6:	4635      	mov	r5, r6
    5bf8:	e7d7      	b.n	5baa <net_app_init_client+0x1f6>
		return -EALREADY;
    5bfa:	f06f 0544 	mvn.w	r5, #68	; 0x44
    5bfe:	e6e7      	b.n	59d0 <net_app_init_client+0x1c>
			return -EPROTONOSUPPORT;
    5c00:	f06f 052a 	mvn.w	r5, #42	; 0x2a
    5c04:	e6e4      	b.n	59d0 <net_app_init_client+0x1c>
    5c06:	bf00      	nop
    5c08:	00020515 	.word	0x00020515
    5c0c:	00005607 	.word	0x00005607
    5c10:	000306e6 	.word	0x000306e6
    5c14:	2000e25c 	.word	0x2000e25c
    5c18:	0002ef38 	.word	0x0002ef38
    5c1c:	0002eff8 	.word	0x0002eff8
    5c20:	000306e9 	.word	0x000306e9
    5c24:	000306c2 	.word	0x000306c2
    5c28:	0003070b 	.word	0x0003070b

00005c2c <net_app_connect>:
	}
#endif
}

int net_app_connect(struct net_app_ctx *ctx, s32_t timeout)
{
    5c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c2e:	460f      	mov	r7, r1
    5c30:	b087      	sub	sp, #28
	struct net_context *net_ctx;
	bool started = false;
	int ret;

	if (!ctx) {
    5c32:	4604      	mov	r4, r0
    5c34:	b918      	cbnz	r0, 5c3e <net_app_connect+0x12>
		return -EINVAL;
    5c36:	f06f 0015 	mvn.w	r0, #21
		}
#endif
	}

	return ret;
}
    5c3a:	b007      	add	sp, #28
    5c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!ctx->is_init) {
    5c3e:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
    5c42:	07dd      	lsls	r5, r3, #31
    5c44:	f140 8092 	bpl.w	5d6c <net_app_connect+0x140>
	if (ctx->app_type != NET_APP_CLIENT) {
    5c48:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    5c4c:	2b02      	cmp	r3, #2
    5c4e:	d1f2      	bne.n	5c36 <net_app_connect+0xa>
	net_ctx = _net_app_select_net_ctx(ctx, NULL);
    5c50:	2100      	movs	r1, #0
    5c52:	f240 23bb 	movw	r3, #699	; 0x2bb
    5c56:	4a48      	ldr	r2, [pc, #288]	; (5d78 <net_app_connect+0x14c>)
    5c58:	f7ff fd9f 	bl	579a <_net_app_select_net_ctx_debug>
    5c5c:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
	if (!net_ctx && ctx->is_enabled) {
    5c60:	4606      	mov	r6, r0
    5c62:	b910      	cbnz	r0, 5c6a <net_app_connect+0x3e>
    5c64:	0748      	lsls	r0, r1, #29
    5c66:	f100 8084 	bmi.w	5d72 <net_app_connect+0x146>
	if (!ctx->is_enabled) {
    5c6a:	f011 0504 	ands.w	r5, r1, #4
    5c6e:	d130      	bne.n	5cd2 <net_app_connect+0xa6>
		ret = _net_app_config_local_ctx(ctx, ctx->sock_type,
    5c70:	462b      	mov	r3, r5
    5c72:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    5c76:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    5c7a:	4620      	mov	r0, r4
    5c7c:	f7ff fd50 	bl	5720 <_net_app_config_local_ctx>
		if (ret < 0) {
    5c80:	2800      	cmp	r0, #0
    5c82:	dbd8      	blt.n	5c36 <net_app_connect+0xa>
		net_ctx = _net_app_select_net_ctx(ctx, NULL);
    5c84:	f44f 7332 	mov.w	r3, #712	; 0x2c8
    5c88:	4a3b      	ldr	r2, [pc, #236]	; (5d78 <net_app_connect+0x14c>)
    5c8a:	4629      	mov	r1, r5
    5c8c:	4620      	mov	r0, r4
    5c8e:	f7ff fd84 	bl	579a <_net_app_select_net_ctx_debug>
	if (ctx->ipv6.remote.sa_family == AF_INET6 && ctx->ipv6.ctx) {
    5c92:	8ba3      	ldrh	r3, [r4, #28]
    5c94:	2b0a      	cmp	r3, #10
		net_ctx = _net_app_select_net_ctx(ctx, NULL);
    5c96:	4606      	mov	r6, r0
	if (ctx->ipv6.remote.sa_family == AF_INET6 && ctx->ipv6.ctx) {
    5c98:	d012      	beq.n	5cc0 <net_app_connect+0x94>
		ctx->is_enabled = true;
    5c9a:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
    5c9e:	f043 0304 	orr.w	r3, r3, #4
    5ca2:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
		_net_app_print_info(ctx);
    5ca6:	4620      	mov	r0, r4
    5ca8:	f7ff fc9c 	bl	55e4 <_net_app_print_info>
					  &ctx->default_ctx->remote,
    5cac:	6b61      	ldr	r1, [r4, #52]	; 0x34
		ret = net_context_connect(net_ctx,
    5cae:	4b33      	ldr	r3, [pc, #204]	; (5d7c <net_app_connect+0x150>)
    5cb0:	e9cd 7400 	strd	r7, r4, [sp]
    5cb4:	2218      	movs	r2, #24
    5cb6:	311c      	adds	r1, #28
    5cb8:	4630      	mov	r0, r6
    5cba:	f01a fad5 	bl	20268 <net_context_connect>
	return ret;
    5cbe:	e7bc      	b.n	5c3a <net_app_connect+0xe>
	if (ctx->ipv6.remote.sa_family == AF_INET6 && ctx->ipv6.ctx) {
    5cc0:	6823      	ldr	r3, [r4, #0]
    5cc2:	2b00      	cmp	r3, #0
    5cc4:	d0e9      	beq.n	5c9a <net_app_connect+0x6e>
    5cc6:	4620      	mov	r0, r4
    5cc8:	f7ff fe51 	bl	596e <bind_local.part.4>
		if (ret < 0) {
    5ccc:	2800      	cmp	r0, #0
    5cce:	dae4      	bge.n	5c9a <net_app_connect+0x6e>
    5cd0:	e7b1      	b.n	5c36 <net_app_connect+0xa>
	NET_ASSERT(context);
    5cd2:	b9a6      	cbnz	r6, 5cfe <net_app_connect+0xd2>
    5cd4:	4b2a      	ldr	r3, [pc, #168]	; (5d80 <net_app_connect+0x154>)
    5cd6:	681b      	ldr	r3, [r3, #0]
    5cd8:	075a      	lsls	r2, r3, #29
    5cda:	d010      	beq.n	5cfe <net_app_connect+0xd2>
    5cdc:	2301      	movs	r3, #1
    5cde:	f04f 0200 	mov.w	r2, #0
    5ce2:	f363 0202 	bfi	r2, r3, #0, #3
    5ce6:	4927      	ldr	r1, [pc, #156]	; (5d84 <net_app_connect+0x158>)
    5ce8:	4b27      	ldr	r3, [pc, #156]	; (5d88 <net_app_connect+0x15c>)
    5cea:	4828      	ldr	r0, [pc, #160]	; (5d8c <net_app_connect+0x160>)
    5cec:	1a5b      	subs	r3, r3, r1
    5cee:	f366 02c5 	bfi	r2, r6, #3, #3
    5cf2:	08db      	lsrs	r3, r3, #3
    5cf4:	f363 128f 	bfi	r2, r3, #6, #10
    5cf8:	4925      	ldr	r1, [pc, #148]	; (5d90 <net_app_connect+0x164>)
    5cfa:	f7fc f9f7 	bl	20ec <log_1>
	if (context->flags & NET_CONTEXT_FAMILY) {
    5cfe:	f896 3065 	ldrb.w	r3, [r6, #101]	; 0x65
    5d02:	06db      	lsls	r3, r3, #27
    5d04:	d5d2      	bpl.n	5cac <net_app_connect+0x80>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
    5d06:	68a3      	ldr	r3, [r4, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
    5d08:	2b00      	cmp	r3, #0
    5d0a:	d1cf      	bne.n	5cac <net_app_connect+0x80>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
    5d0c:	68e3      	ldr	r3, [r4, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
    5d0e:	2b00      	cmp	r3, #0
    5d10:	d1cc      	bne.n	5cac <net_app_connect+0x80>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
    5d12:	6923      	ldr	r3, [r4, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
    5d14:	2b00      	cmp	r3, #0
    5d16:	d1c9      	bne.n	5cac <net_app_connect+0x80>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
    5d18:	6960      	ldr	r0, [r4, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
    5d1a:	2800      	cmp	r0, #0
    5d1c:	d1c6      	bne.n	5cac <net_app_connect+0x80>
		laddr = net_if_ipv6_select_src_addr(NULL, raddr);
    5d1e:	f104 0120 	add.w	r1, r4, #32
    5d22:	f01b ff8b 	bl	21c3c <net_if_ipv6_select_src_addr>
		if (laddr && laddr != net_ipv6_unspecified_address()) {
    5d26:	4605      	mov	r5, r0
    5d28:	2800      	cmp	r0, #0
    5d2a:	d0bf      	beq.n	5cac <net_app_connect+0x80>
    5d2c:	f01f f91a 	bl	24f64 <net_ipv6_unspecified_address>
    5d30:	4285      	cmp	r5, r0
    5d32:	d0bb      	beq.n	5cac <net_app_connect+0x80>
			net_ipaddr_copy(&net_sin6(&ctx->ipv6.local)->sin6_addr,
    5d34:	462b      	mov	r3, r5
    5d36:	ad02      	add	r5, sp, #8
    5d38:	f103 0e10 	add.w	lr, r3, #16
    5d3c:	462a      	mov	r2, r5
    5d3e:	6818      	ldr	r0, [r3, #0]
    5d40:	6859      	ldr	r1, [r3, #4]
    5d42:	46ac      	mov	ip, r5
    5d44:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    5d48:	3308      	adds	r3, #8
    5d4a:	4573      	cmp	r3, lr
    5d4c:	4665      	mov	r5, ip
    5d4e:	d1f6      	bne.n	5d3e <net_app_connect+0x112>
    5d50:	f104 0508 	add.w	r5, r4, #8
    5d54:	f10d 0c18 	add.w	ip, sp, #24
    5d58:	4613      	mov	r3, r2
    5d5a:	cb03      	ldmia	r3!, {r0, r1}
    5d5c:	4563      	cmp	r3, ip
    5d5e:	6028      	str	r0, [r5, #0]
    5d60:	6069      	str	r1, [r5, #4]
    5d62:	461a      	mov	r2, r3
    5d64:	f105 0508 	add.w	r5, r5, #8
    5d68:	d1f6      	bne.n	5d58 <net_app_connect+0x12c>
    5d6a:	e79f      	b.n	5cac <net_app_connect+0x80>
		return -ENOENT;
    5d6c:	f06f 0001 	mvn.w	r0, #1
    5d70:	e763      	b.n	5c3a <net_app_connect+0xe>
		return -EAFNOSUPPORT;
    5d72:	f06f 002e 	mvn.w	r0, #46	; 0x2e
    5d76:	e760      	b.n	5c3a <net_app_connect+0xe>
    5d78:	000306d6 	.word	0x000306d6
    5d7c:	0000594d 	.word	0x0000594d
    5d80:	2000e25c 	.word	0x2000e25c
    5d84:	0002ef38 	.word	0x0002ef38
    5d88:	0002eff8 	.word	0x0002eff8
    5d8c:	00030684 	.word	0x00030684
    5d90:	000306ab 	.word	0x000306ab

00005d94 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    5d94:	b513      	push	{r0, r1, r4, lr}
    5d96:	4c11      	ldr	r4, [pc, #68]	; (5ddc <sys_rand32_get+0x48>)
    5d98:	f3bf 8f5b 	dmb	ish
    5d9c:	6820      	ldr	r0, [r4, #0]
    5d9e:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    5da2:	b960      	cbnz	r0, 5dbe <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    5da4:	480e      	ldr	r0, [pc, #56]	; (5de0 <sys_rand32_get+0x4c>)
    5da6:	f027 fb6f 	bl	2d488 <device_get_binding>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5daa:	f3bf 8f5b 	dmb	ish
    5dae:	e854 3f00 	ldrex	r3, [r4]
    5db2:	e844 0200 	strex	r2, r0, [r4]
    5db6:	2a00      	cmp	r2, #0
    5db8:	d1f9      	bne.n	5dae <sys_rand32_get+0x1a>
    5dba:	f3bf 8f5b 	dmb	ish
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    5dbe:	6843      	ldr	r3, [r0, #4]
    5dc0:	2204      	movs	r2, #4
    5dc2:	681b      	ldr	r3, [r3, #0]
    5dc4:	eb0d 0102 	add.w	r1, sp, r2
    5dc8:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    5dca:	2800      	cmp	r0, #0
    5dcc:	da02      	bge.n	5dd4 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    5dce:	f000 fa4f 	bl	6270 <_timer_cycle_get_32>
    5dd2:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    5dd4:	9801      	ldr	r0, [sp, #4]
    5dd6:	b002      	add	sp, #8
    5dd8:	bd10      	pop	{r4, pc}
    5dda:	bf00      	nop
    5ddc:	20000a38 	.word	0x20000a38
    5de0:	00030737 	.word	0x00030737

00005de4 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    5de4:	280a      	cmp	r0, #10
{
    5de6:	b538      	push	{r3, r4, r5, lr}
    5de8:	4604      	mov	r4, r0
    5dea:	4d07      	ldr	r5, [pc, #28]	; (5e08 <console_out+0x24>)
	if ('\n' == c) {
    5dec:	d104      	bne.n	5df8 <console_out+0x14>
    5dee:	6828      	ldr	r0, [r5, #0]
    5df0:	6843      	ldr	r3, [r0, #4]
    5df2:	210d      	movs	r1, #13
    5df4:	685b      	ldr	r3, [r3, #4]
    5df6:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    5df8:	6828      	ldr	r0, [r5, #0]
    5dfa:	6843      	ldr	r3, [r0, #4]
    5dfc:	b2e1      	uxtb	r1, r4
    5dfe:	685b      	ldr	r3, [r3, #4]
    5e00:	4798      	blx	r3

	return c;
}
    5e02:	4620      	mov	r0, r4
    5e04:	bd38      	pop	{r3, r4, r5, pc}
    5e06:	bf00      	nop
    5e08:	20000a3c 	.word	0x20000a3c

00005e0c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    5e0c:	4801      	ldr	r0, [pc, #4]	; (5e14 <uart_console_hook_install+0x8>)
    5e0e:	f7fb b9f1 	b.w	11f4 <__printk_hook_install>
    5e12:	bf00      	nop
    5e14:	00005de5 	.word	0x00005de5

00005e18 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    5e18:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    5e1a:	4804      	ldr	r0, [pc, #16]	; (5e2c <uart_console_init+0x14>)
    5e1c:	f027 fb34 	bl	2d488 <device_get_binding>
    5e20:	4b03      	ldr	r3, [pc, #12]	; (5e30 <uart_console_init+0x18>)
    5e22:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    5e24:	f7ff fff2 	bl	5e0c <uart_console_hook_install>

	return 0;
}
    5e28:	2000      	movs	r0, #0
    5e2a:	bd08      	pop	{r3, pc}
    5e2c:	0002f86c 	.word	0x0002f86c
    5e30:	20000a3c 	.word	0x20000a3c

00005e34 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    5e34:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    5e36:	4c04      	ldr	r4, [pc, #16]	; (5e48 <rtt_console_init+0x14>)
    5e38:	4620      	mov	r0, r4
    5e3a:	f7fb f9db 	bl	11f4 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    5e3e:	4620      	mov	r0, r4
    5e40:	f001 fbf2 	bl	7628 <__stdout_hook_install>

	return 0;
}
    5e44:	2000      	movs	r0, #0
    5e46:	bd10      	pop	{r4, pc}
    5e48:	00005e4d 	.word	0x00005e4d

00005e4c <rtt_console_out>:
{
    5e4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    5e50:	4f16      	ldr	r7, [pc, #88]	; (5eac <rtt_console_out+0x60>)
    5e52:	4d17      	ldr	r5, [pc, #92]	; (5eb0 <rtt_console_out+0x64>)
	char c = (char)character;
    5e54:	f88d 0007 	strb.w	r0, [sp, #7]
{
    5e58:	4606      	mov	r6, r0
	char c = (char)character;
    5e5a:	2403      	movs	r4, #3
    5e5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5e60:	4638      	mov	r0, r7
    5e62:	f027 fdf5 	bl	2da50 <_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    5e66:	2201      	movs	r2, #1
    5e68:	f10d 0107 	add.w	r1, sp, #7
    5e6c:	2000      	movs	r0, #0
    5e6e:	f7fc f80b 	bl	1e88 <SEGGER_RTT_WriteNoLock>
    5e72:	4680      	mov	r8, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    5e74:	4638      	mov	r0, r7
    5e76:	f027 fe4d 	bl	2db14 <_impl_k_mutex_unlock>
		if (cnt) {
    5e7a:	f1b8 0f00 	cmp.w	r8, #0
    5e7e:	d005      	beq.n	5e8c <rtt_console_out+0x40>
			host_present = true;
    5e80:	2301      	movs	r3, #1
    5e82:	702b      	strb	r3, [r5, #0]
}
    5e84:	4630      	mov	r0, r6
    5e86:	b002      	add	sp, #8
    5e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    5e8c:	782b      	ldrb	r3, [r5, #0]
    5e8e:	2b00      	cmp	r3, #0
    5e90:	d0f8      	beq.n	5e84 <rtt_console_out+0x38>
			if (max_cnt) {
    5e92:	3c01      	subs	r4, #1
    5e94:	d007      	beq.n	5ea6 <rtt_console_out+0x5a>
	if (k_is_in_isr()) {
    5e96:	f028 fa77 	bl	2e388 <k_is_in_isr>
    5e9a:	2800      	cmp	r0, #0
    5e9c:	d1de      	bne.n	5e5c <rtt_console_out+0x10>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    5e9e:	2002      	movs	r0, #2
    5ea0:	f028 f976 	bl	2e190 <_impl_k_sleep>
		SEGGER_RTT_LOCK();
    5ea4:	e7da      	b.n	5e5c <rtt_console_out+0x10>
				host_present = false;
    5ea6:	702c      	strb	r4, [r5, #0]
    5ea8:	e7ec      	b.n	5e84 <rtt_console_out+0x38>
    5eaa:	bf00      	nop
    5eac:	2000e3e0 	.word	0x2000e3e0
    5eb0:	20000a40 	.word	0x20000a40

00005eb4 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    5eb4:	b510      	push	{r4, lr}
	__asm__ volatile(
    5eb6:	f04f 0320 	mov.w	r3, #32
    5eba:	f3ef 8211 	mrs	r2, BASEPRI
    5ebe:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    5ec2:	4c11      	ldr	r4, [pc, #68]	; (5f08 <_m16src_stop+0x54>)
    5ec4:	7823      	ldrb	r3, [r4, #0]
    5ec6:	b923      	cbnz	r3, 5ed2 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5ec8:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    5ecc:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    5ed0:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    5ed2:	3b01      	subs	r3, #1
    5ed4:	b2db      	uxtb	r3, r3
    5ed6:	7023      	strb	r3, [r4, #0]
    5ed8:	b123      	cbz	r3, 5ee4 <_m16src_stop+0x30>
    5eda:	f382 8811 	msr	BASEPRI, r2
		return -EBUSY;
    5ede:	f06f 000f 	mvn.w	r0, #15
    5ee2:	e7f5      	b.n	5ed0 <_m16src_stop+0x1c>
	if (m16src_grd) {
    5ee4:	4b09      	ldr	r3, [pc, #36]	; (5f0c <_m16src_stop+0x58>)
    5ee6:	7818      	ldrb	r0, [r3, #0]
    5ee8:	2101      	movs	r1, #1
    5eea:	b128      	cbz	r0, 5ef8 <_m16src_stop+0x44>
		m16src_ref++;
    5eec:	7021      	strb	r1, [r4, #0]
    5eee:	f382 8811 	msr	BASEPRI, r2
		return -EAGAIN;
    5ef2:	f06f 000a 	mvn.w	r0, #10
    5ef6:	e7eb      	b.n	5ed0 <_m16src_stop+0x1c>
	m16src_grd = 1;
    5ef8:	7019      	strb	r1, [r3, #0]
    5efa:	f382 8811 	msr	BASEPRI, r2
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    5efe:	4a04      	ldr	r2, [pc, #16]	; (5f10 <_m16src_stop+0x5c>)
    5f00:	6011      	str	r1, [r2, #0]
	m16src_grd = 0;
    5f02:	7018      	strb	r0, [r3, #0]
	return 0;
    5f04:	e7e4      	b.n	5ed0 <_m16src_stop+0x1c>
    5f06:	bf00      	nop
    5f08:	20000a43 	.word	0x20000a43
    5f0c:	20000a42 	.word	0x20000a42
    5f10:	40000004 	.word	0x40000004

00005f14 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    5f14:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    5f16:	2200      	movs	r2, #0
    5f18:	4610      	mov	r0, r2
    5f1a:	2101      	movs	r1, #1
    5f1c:	f000 fb92 	bl	6644 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    5f20:	2000      	movs	r0, #0
    5f22:	f000 fb5d 	bl	65e0 <_arch_irq_enable>

	return 0;
}
    5f26:	2000      	movs	r0, #0
    5f28:	bd08      	pop	{r3, pc}
	...

00005f2c <_m16src_start>:
{
    5f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5f2e:	f04f 0220 	mov.w	r2, #32
    5f32:	f3ef 8311 	mrs	r3, BASEPRI
    5f36:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    5f3a:	4a26      	ldr	r2, [pc, #152]	; (5fd4 <_m16src_start+0xa8>)
    5f3c:	7810      	ldrb	r0, [r2, #0]
    5f3e:	1c44      	adds	r4, r0, #1
    5f40:	7014      	strb	r4, [r2, #0]
    5f42:	b170      	cbz	r0, 5f62 <_m16src_start+0x36>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5f44:	f383 8811 	msr	BASEPRI, r3
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    5f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f4c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5f50:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    5f54:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    5f58:	bf0c      	ite	eq
    5f5a:	2000      	moveq	r0, #0
    5f5c:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    5f60:	e007      	b.n	5f72 <_m16src_start+0x46>
	if (m16src_grd) {
    5f62:	4d1d      	ldr	r5, [pc, #116]	; (5fd8 <_m16src_start+0xac>)
    5f64:	782f      	ldrb	r7, [r5, #0]
    5f66:	b12f      	cbz	r7, 5f74 <_m16src_start+0x48>
		m16src_ref--;
    5f68:	7010      	strb	r0, [r2, #0]
    5f6a:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    5f6e:	f06f 000a 	mvn.w	r0, #10
}
    5f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    5f74:	2601      	movs	r6, #1
    5f76:	702e      	strb	r6, [r5, #0]
    5f78:	f383 8811 	msr	BASEPRI, r3
    5f7c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    5f80:	b319      	cbz	r1, 5fca <_m16src_start+0x9e>
		irq_disable(POWER_CLOCK_IRQn);
    5f82:	4638      	mov	r0, r7
    5f84:	f000 fb3c 	bl	6600 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    5f88:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    5f8c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    5f90:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    5f94:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    5f96:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    5f9a:	b192      	cbz	r2, 5fc2 <_m16src_start+0x96>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    5f9c:	2200      	movs	r2, #0
    5f9e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5fa2:	4a0e      	ldr	r2, [pc, #56]	; (5fdc <_m16src_start+0xb0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    5fa4:	f013 0f01 	tst.w	r3, #1
    5fa8:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    5fac:	bf08      	it	eq
    5fae:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    5fb2:	2000      	movs	r0, #0
    5fb4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    5fb8:	f000 fb12 	bl	65e0 <_arch_irq_enable>
	m16src_grd = 0;
    5fbc:	2300      	movs	r3, #0
    5fbe:	702b      	strb	r3, [r5, #0]
    5fc0:	e7c2      	b.n	5f48 <_m16src_start+0x1c>
			__WFE();
    5fc2:	bf20      	wfe
			__SEV();
    5fc4:	bf40      	sev
			__WFE();
    5fc6:	bf20      	wfe
    5fc8:	e7e5      	b.n	5f96 <_m16src_start+0x6a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    5fca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    5fce:	6026      	str	r6, [r4, #0]
    5fd0:	e7f4      	b.n	5fbc <_m16src_start+0x90>
    5fd2:	bf00      	nop
    5fd4:	20000a43 	.word	0x20000a43
    5fd8:	20000a42 	.word	0x20000a42
    5fdc:	e000e100 	.word	0xe000e100

00005fe0 <_k32src_start>:
{
    5fe0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5fe2:	f04f 0220 	mov.w	r2, #32
    5fe6:	f3ef 8311 	mrs	r3, BASEPRI
    5fea:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    5fee:	4d1d      	ldr	r5, [pc, #116]	; (6064 <_k32src_start+0x84>)
    5ff0:	782a      	ldrb	r2, [r5, #0]
    5ff2:	b18a      	cbz	r2, 6018 <_k32src_start+0x38>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5ff4:	f383 8811 	msr	BASEPRI, r3
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    5ff8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5ffc:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    6000:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    6004:	f003 0303 	and.w	r3, r3, #3
    6008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    600c:	4393      	bics	r3, r2
}
    600e:	bf14      	ite	ne
    6010:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    6014:	2000      	moveq	r0, #0
    6016:	bd38      	pop	{r3, r4, r5, pc}
	k32src_initialized = 1;
    6018:	2401      	movs	r4, #1
    601a:	702c      	strb	r4, [r5, #0]
    601c:	f383 8811 	msr	BASEPRI, r3
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    6020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6024:	4d10      	ldr	r5, [pc, #64]	; (6068 <_k32src_start+0x88>)
    6026:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    602a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    602e:	602c      	str	r4, [r5, #0]
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    6030:	f011 0103 	ands.w	r1, r1, #3
    NRF_CLOCK->INTENCLR = int_mask;
    6034:	f04f 0518 	mov.w	r5, #24
    6038:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    603c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    6040:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    6044:	d1d8      	bne.n	5ff8 <_k32src_start+0x18>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    6046:	2210      	movs	r2, #16
    6048:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    604c:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
    6050:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    6054:	f7ff ff6a 	bl	5f2c <_m16src_start>
		if (!err) {
    6058:	2800      	cmp	r0, #0
    605a:	d1cd      	bne.n	5ff8 <_k32src_start+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    605c:	4b03      	ldr	r3, [pc, #12]	; (606c <_k32src_start+0x8c>)
    605e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    6062:	e7c9      	b.n	5ff8 <_k32src_start+0x18>
    6064:	20000a41 	.word	0x20000a41
    6068:	40000008 	.word	0x40000008
    606c:	e000e100 	.word	0xe000e100

00006070 <_power_clock_isr>:
{
    6070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    6072:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    6076:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    6078:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    607c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    6080:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    6084:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    6088:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    608c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    6090:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    6094:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    6098:	f1bc 0f00 	cmp.w	ip, #0
    609c:	d003      	beq.n	60a6 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    609e:	f04f 0c00 	mov.w	ip, #0
    60a2:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	if (hf) {
    60a6:	b127      	cbz	r7, 60b2 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    60a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60ac:	2700      	movs	r7, #0
    60ae:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    60b2:	b152      	cbz	r2, 60ca <_power_clock_isr+0x5a>
    60b4:	03e3      	lsls	r3, r4, #15
    60b6:	d508      	bpl.n	60ca <_power_clock_isr+0x5a>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    60b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    60bc:	4c15      	ldr	r4, [pc, #84]	; (6114 <_power_clock_isr+0xa4>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    60be:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    60c0:	2702      	movs	r7, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    60c2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    60c6:	6027      	str	r7, [r4, #0]
		NRF_CLOCK->TASKS_CAL = 1;
    60c8:	611a      	str	r2, [r3, #16]
	if (lf) {
    60ca:	b120      	cbz	r0, 60d6 <_power_clock_isr+0x66>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    60cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60d0:	2200      	movs	r2, #0
    60d2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    60d6:	b159      	cbz	r1, 60f0 <_power_clock_isr+0x80>
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    60d8:	4b0e      	ldr	r3, [pc, #56]	; (6114 <_power_clock_isr+0xa4>)
		NRF_CLOCK->EVENTS_DONE = 0;
    60da:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    60de:	2100      	movs	r1, #0
    60e0:	6019      	str	r1, [r3, #0]
		err = _m16src_stop(dev, NULL);
    60e2:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    60e4:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    60e8:	f7ff fee4 	bl	5eb4 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    60ec:	2301      	movs	r3, #1
    60ee:	6163      	str	r3, [r4, #20]
	if (ctto) {
    60f0:	b176      	cbz	r6, 6110 <_power_clock_isr+0xa0>
		NRF_CLOCK->EVENTS_CTTO = 0;
    60f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60f6:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    60f8:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    60fa:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    60fe:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    6100:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    6104:	f7ff ff12 	bl	5f2c <_m16src_start>
		if (!err) {
    6108:	b910      	cbnz	r0, 6110 <_power_clock_isr+0xa0>
    610a:	4b03      	ldr	r3, [pc, #12]	; (6118 <_power_clock_isr+0xa8>)
    610c:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
}
    6110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6112:	bf00      	nop
    6114:	40000c34 	.word	0x40000c34
    6118:	e000e100 	.word	0xe000e100

0000611c <rtc_compare_set>:

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_rtc, uint32_t ch, uint32_t cc_val)
{
    p_rtc->CC[ch] = cc_val;
    611c:	4b08      	ldr	r3, [pc, #32]	; (6140 <rtc_compare_set+0x24>)
    611e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_rtc)
{
     return p_rtc->COUNTER;
    6122:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    6126:	1ac0      	subs	r0, r0, r3
    6128:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    612c:	4b05      	ldr	r3, [pc, #20]	; (6144 <rtc_compare_set+0x28>)
    612e:	3802      	subs	r0, #2
    6130:	4298      	cmp	r0, r3
    6132:	bf82      	ittt	hi
    6134:	4b04      	ldrhi	r3, [pc, #16]	; (6148 <rtc_compare_set+0x2c>)
    6136:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    613a:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
    613e:	4770      	bx	lr
    6140:	40011000 	.word	0x40011000
    6144:	007ffffd 	.word	0x007ffffd
    6148:	e000e100 	.word	0xe000e100

0000614c <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    614c:	b510      	push	{r4, lr}
    614e:	4b13      	ldr	r3, [pc, #76]	; (619c <rtc_announce_set_next+0x50>)
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    6150:	4c13      	ldr	r4, [pc, #76]	; (61a0 <rtc_announce_set_next+0x54>)
    6152:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    6156:	6822      	ldr	r2, [r4, #0]
    6158:	1a80      	subs	r0, r0, r2
    615a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick()) {
    615e:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    6162:	d913      	bls.n	618c <rtc_announce_set_next+0x40>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick();

		if (sys_elapsed > expected_sys_ticks) {
    6164:	490f      	ldr	r1, [pc, #60]	; (61a4 <rtc_announce_set_next+0x58>)
    6166:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick();
    6168:	f240 1347 	movw	r3, #327	; 0x147
    616c:	fbb0 f0f3 	udiv	r0, r0, r3
    6170:	4288      	cmp	r0, r1
    6172:	bf28      	it	cs
    6174:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    6176:	fb03 2300 	mla	r3, r3, r0, r2
#endif
}

static void wrapped_announce(s32_t ticks)
{
	driver_uptime += ticks;
    617a:	4a0b      	ldr	r2, [pc, #44]	; (61a8 <rtc_announce_set_next+0x5c>)
				(sys_elapsed * sys_clock_hw_cycles_per_tick())
			   ) & RTC_MASK;
    617c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    6180:	6023      	str	r3, [r4, #0]
    6182:	6813      	ldr	r3, [r2, #0]
    6184:	4403      	add	r3, r0
    6186:	6013      	str	r3, [r2, #0]
	z_clock_announce(ticks);
    6188:	f028 fbb8 	bl	2e8fc <z_clock_announce>
		_sys_idle_elapsed_ticks = sys_elapsed;
		z_clock_announce(_sys_idle_elapsed_ticks);
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick());
    618c:	6820      	ldr	r0, [r4, #0]
}
    618e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick());
    6192:	f200 1047 	addw	r0, r0, #327	; 0x147
    6196:	f7ff bfc1 	b.w	611c <rtc_compare_set>
    619a:	bf00      	nop
    619c:	40011000 	.word	0x40011000
    61a0:	20000a4c 	.word	0x20000a4c
    61a4:	20000a48 	.word	0x20000a48
    61a8:	20000a44 	.word	0x20000a44

000061ac <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    61ac:	4b02      	ldr	r3, [pc, #8]	; (61b8 <rtc1_nrf5_isr+0xc>)
    61ae:	2200      	movs	r2, #0
    61b0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	/* z_clock_announce() could cause new programming */
	if (!expected_sys_ticks && _sys_clock_always_on) {
		program_max_cycles();
	}
#else
	rtc_announce_set_next();
    61b4:	f7ff bfca 	b.w	614c <rtc_announce_set_next>
    61b8:	40011000 	.word	0x40011000

000061bc <z_clock_set_timeout>:
}
    61bc:	4770      	bx	lr

000061be <z_clock_elapsed>:
}
    61be:	2000      	movs	r0, #0
    61c0:	4770      	bx	lr
	...

000061c4 <z_clock_idle_exit>:
{
    61c4:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    61c6:	4b07      	ldr	r3, [pc, #28]	; (61e4 <z_clock_idle_exit+0x20>)
    61c8:	2200      	movs	r2, #0
    61ca:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    61ce:	4b06      	ldr	r3, [pc, #24]	; (61e8 <z_clock_idle_exit+0x24>)
    61d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    61d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    61d8:	f7ff ffb8 	bl	614c <rtc_announce_set_next>
	expected_sys_ticks = 1;
    61dc:	4b03      	ldr	r3, [pc, #12]	; (61ec <z_clock_idle_exit+0x28>)
    61de:	2201      	movs	r2, #1
    61e0:	601a      	str	r2, [r3, #0]
}
    61e2:	bd08      	pop	{r3, pc}
    61e4:	40011000 	.word	0x40011000
    61e8:	e000e100 	.word	0xe000e100
    61ec:	20000a48 	.word	0x20000a48

000061f0 <z_clock_driver_init>:
	sys_trace_isr_exit();

}

int z_clock_driver_init(struct device *device)
{
    61f0:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    61f2:	4819      	ldr	r0, [pc, #100]	; (6258 <z_clock_driver_init+0x68>)
    61f4:	f027 f948 	bl	2d488 <device_get_binding>
	if (!clock) {
    61f8:	b350      	cbz	r0, 6250 <z_clock_driver_init+0x60>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    61fa:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    61fc:	4d17      	ldr	r5, [pc, #92]	; (625c <z_clock_driver_init+0x6c>)
    61fe:	681b      	ldr	r3, [r3, #0]
    6200:	2101      	movs	r1, #1
    6202:	4798      	blx	r3
	rtc_past = 0;
    6204:	4b16      	ldr	r3, [pc, #88]	; (6260 <z_clock_driver_init+0x70>)
    6206:	2400      	movs	r4, #0
    6208:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    620a:	4b16      	ldr	r3, [pc, #88]	; (6264 <z_clock_driver_init+0x74>)
    620c:	2601      	movs	r6, #1
    620e:	601e      	str	r6, [r3, #0]
    p_rtc->CC[ch] = cc_val;
    6210:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    6214:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    6218:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_rtc, uint32_t mask)
{
    p_rtc->EVTENSET = mask;
    621c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6220:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_rtc->INTENSET = mask;
    6224:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    6228:	4b0f      	ldr	r3, [pc, #60]	; (6268 <z_clock_driver_init+0x78>)
		       sys_clock_hw_cycles_per_tick());
	nrf_rtc_event_enable(SYS_CLOCK_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(SYS_CLOCK_RTC, RTC_INTENSET_COMPARE0_Msk);

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    622a:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    622e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6232:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    6236:	4631      	mov	r1, r6
    6238:	4622      	mov	r2, r4
    623a:	2011      	movs	r0, #17
    623c:	f000 fa02 	bl	6644 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    6240:	2011      	movs	r0, #17
    6242:	f000 f9cd 	bl	65e0 <_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
    6246:	4b09      	ldr	r3, [pc, #36]	; (626c <z_clock_driver_init+0x7c>)

	nrf_rtc_task_trigger(SYS_CLOCK_RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(SYS_CLOCK_RTC, NRF_RTC_TASK_START);

	return 0;
    6248:	4620      	mov	r0, r4
    624a:	601e      	str	r6, [r3, #0]
    624c:	602e      	str	r6, [r5, #0]
}
    624e:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    6250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6254:	e7fb      	b.n	624e <z_clock_driver_init+0x5e>
    6256:	bf00      	nop
    6258:	0003075c 	.word	0x0003075c
    625c:	40011000 	.word	0x40011000
    6260:	20000a4c 	.word	0x20000a4c
    6264:	20000a48 	.word	0x20000a48
    6268:	e000e100 	.word	0xe000e100
    626c:	40011008 	.word	0x40011008

00006270 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    6270:	b508      	push	{r3, lr}
	u32_t ticked_cycles;
	u32_t elapsed_cycles;

	/* Number of timer cycles announced as ticks so far. */
	ticked_cycles = z_tick_get() * sys_clock_hw_cycles_per_tick();
    6272:	f028 fb8f 	bl	2e994 <z_tick_get>
    6276:	f240 1347 	movw	r3, #327	; 0x147
    627a:	4358      	muls	r0, r3
     return p_rtc->COUNTER;
    627c:	4b03      	ldr	r3, [pc, #12]	; (628c <_timer_cycle_get_32+0x1c>)
    627e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * The value of RTC_COUNTER is not reset on tick, so it will
	 * compensate potentialy missed update of z_tick_get()
	 * which could have happen between the ticked_cycles calculation
	 * and the code below.
	 */
	elapsed_cycles = (RTC_COUNTER - ticked_cycles) & RTC_MASK;
    6282:	1a1b      	subs	r3, r3, r0
    6284:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return ticked_cycles + elapsed_cycles;
}
    6288:	4418      	add	r0, r3
    628a:	bd08      	pop	{r3, pc}
    628c:	40011000 	.word	0x40011000

00006290 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    6290:	4804      	ldr	r0, [pc, #16]	; (62a4 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    6292:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    6294:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    6296:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    6298:	d003      	beq.n	62a2 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    629a:	4903      	ldr	r1, [pc, #12]	; (62a8 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    629c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    62a0:	600a      	str	r2, [r1, #0]

000062a2 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    62a2:	4770      	bx	lr
    ldr r0, =_kernel
    62a4:	20003780 	.word	0x20003780
    ldr r1, =_SCS_ICSR
    62a8:	e000ed04 	.word	0xe000ed04

000062ac <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    62ac:	4804      	ldr	r0, [pc, #16]	; (62c0 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    62ae:	2300      	movs	r3, #0
    62b0:	2120      	movs	r1, #32
    62b2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    62b4:	3301      	adds	r3, #1
    62b6:	2b27      	cmp	r3, #39	; 0x27
    62b8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    62bc:	d1f9      	bne.n	62b2 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    62be:	4770      	bx	lr
    62c0:	e000e100 	.word	0xe000e100

000062c4 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    62c4:	4a08      	ldr	r2, [pc, #32]	; (62e8 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    62c6:	4909      	ldr	r1, [pc, #36]	; (62ec <__swap+0x28>)
	_current->arch.basepri = key;
    62c8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    62ca:	6809      	ldr	r1, [r1, #0]
    62cc:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    62ce:	4908      	ldr	r1, [pc, #32]	; (62f0 <__swap+0x2c>)
	_current->arch.basepri = key;
    62d0:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    62d2:	684b      	ldr	r3, [r1, #4]
    62d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    62d8:	604b      	str	r3, [r1, #4]
    62da:	2300      	movs	r3, #0
    62dc:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    62e0:	6893      	ldr	r3, [r2, #8]
}
    62e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
    62e4:	4770      	bx	lr
    62e6:	bf00      	nop
    62e8:	20003780 	.word	0x20003780
    62ec:	000376d0 	.word	0x000376d0
    62f0:	e000ed00 	.word	0xe000ed00

000062f4 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    62f4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    62f6:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    62fa:	490d      	ldr	r1, [pc, #52]	; (6330 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    62fc:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    62fe:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    6302:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    6304:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    6308:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    630c:	4f09      	ldr	r7, [pc, #36]	; (6334 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    630e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    6312:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    6314:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    6316:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    6318:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    631a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    631c:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    631e:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    6322:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    6326:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r3, #0
    msr PSPLIM, r3
    pop {r3}
#endif

    msr PSP, ip
    632a:	f38c 8809 	msr	PSP, ip
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    632e:	4770      	bx	lr
    ldr r1, =_kernel
    6330:	20003780 	.word	0x20003780
    ldr v4, =_SCS_ICSR
    6334:	e000ed04 	.word	0xe000ed04

00006338 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    6338:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    633c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    633e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    6342:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    6346:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    6348:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    634c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    6350:	2902      	cmp	r1, #2
    beq _oops
    6352:	d0ff      	beq.n	6354 <_oops>

00006354 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    6354:	b500      	push	{lr}
    blx _do_kernel_oops
    6356:	f000 fa1f 	bl	6798 <_do_kernel_oops>
    pop {pc}
    635a:	bd00      	pop	{pc}

0000635c <_MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    635c:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    635e:	4c19      	ldr	r4, [pc, #100]	; (63c4 <_MpuFault.isra.2+0x68>)
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    6360:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    6362:	4819      	ldr	r0, [pc, #100]	; (63c8 <_MpuFault.isra.2+0x6c>)
    6364:	f7fb f88e 	bl	1484 <printk>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    6368:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    636a:	06d9      	lsls	r1, r3, #27
    636c:	d502      	bpl.n	6374 <_MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error\n");
    636e:	4817      	ldr	r0, [pc, #92]	; (63cc <_MpuFault.isra.2+0x70>)
    6370:	f7fb f888 	bl	1484 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    6374:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6376:	071a      	lsls	r2, r3, #28
    6378:	d502      	bpl.n	6380 <_MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    637a:	4815      	ldr	r0, [pc, #84]	; (63d0 <_MpuFault.isra.2+0x74>)
    637c:	f7fb f882 	bl	1484 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    6380:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6382:	079b      	lsls	r3, r3, #30
    6384:	d50e      	bpl.n	63a4 <_MpuFault.isra.2+0x48>
		PR_FAULT_INFO("  Data Access Violation\n");
    6386:	4813      	ldr	r0, [pc, #76]	; (63d4 <_MpuFault.isra.2+0x78>)
    6388:	f7fb f87c 	bl	1484 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    638c:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    638e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6390:	0618      	lsls	r0, r3, #24
    6392:	d507      	bpl.n	63a4 <_MpuFault.isra.2+0x48>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    6394:	4810      	ldr	r0, [pc, #64]	; (63d8 <_MpuFault.isra.2+0x7c>)
    6396:	f7fb f875 	bl	1484 <printk>
			if (fromHardFault) {
    639a:	b11d      	cbz	r5, 63a4 <_MpuFault.isra.2+0x48>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    639c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    639e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    63a2:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    63a4:	4c07      	ldr	r4, [pc, #28]	; (63c4 <_MpuFault.isra.2+0x68>)
    63a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    63a8:	07d2      	lsls	r2, r2, #31
    63aa:	d502      	bpl.n	63b2 <_MpuFault.isra.2+0x56>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    63ac:	480b      	ldr	r0, [pc, #44]	; (63dc <_MpuFault.isra.2+0x80>)
    63ae:	f7fb f869 	bl	1484 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    63b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    63b4:	069b      	lsls	r3, r3, #26
    63b6:	d502      	bpl.n	63be <_MpuFault.isra.2+0x62>
		PR_FAULT_INFO(
    63b8:	4809      	ldr	r0, [pc, #36]	; (63e0 <_MpuFault.isra.2+0x84>)
    63ba:	f7fb f863 	bl	1484 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    63be:	2000      	movs	r0, #0
    63c0:	bd38      	pop	{r3, r4, r5, pc}
    63c2:	bf00      	nop
    63c4:	e000ed00 	.word	0xe000ed00
    63c8:	000308cb 	.word	0x000308cb
    63cc:	000308e2 	.word	0x000308e2
    63d0:	000308f4 	.word	0x000308f4
    63d4:	00030908 	.word	0x00030908
    63d8:	00030921 	.word	0x00030921
    63dc:	00030938 	.word	0x00030938
    63e0:	00030958 	.word	0x00030958

000063e4 <_BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    63e4:	b538      	push	{r3, r4, r5, lr}
{
	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    63e6:	4c1b      	ldr	r4, [pc, #108]	; (6454 <_BusFault.isra.3+0x70>)
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    63e8:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    63ea:	481b      	ldr	r0, [pc, #108]	; (6458 <_BusFault.isra.3+0x74>)
    63ec:	f7fb f84a 	bl	1484 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    63f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    63f2:	04d8      	lsls	r0, r3, #19
    63f4:	d504      	bpl.n	6400 <_BusFault.isra.3+0x1c>
		PR_FAULT_INFO("  Stacking error\n");
    63f6:	4819      	ldr	r0, [pc, #100]	; (645c <_BusFault.isra.3+0x78>)
		PR_FAULT_INFO("  Instruction bus error\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    63f8:	f7fb f844 	bl	1484 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		return _NANO_ERR_RECOVERABLE;
	}

	return _NANO_ERR_HW_EXCEPTION;
}
    63fc:	2000      	movs	r0, #0
    63fe:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    6400:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6402:	0519      	lsls	r1, r3, #20
    6404:	d501      	bpl.n	640a <_BusFault.isra.3+0x26>
		PR_FAULT_INFO("  Unstacking error\n");
    6406:	4816      	ldr	r0, [pc, #88]	; (6460 <_BusFault.isra.3+0x7c>)
    6408:	e7f6      	b.n	63f8 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    640a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    640c:	059a      	lsls	r2, r3, #22
    640e:	d514      	bpl.n	643a <_BusFault.isra.3+0x56>
		PR_FAULT_INFO("  Precise data bus error\n");
    6410:	4814      	ldr	r0, [pc, #80]	; (6464 <_BusFault.isra.3+0x80>)
    6412:	f7fb f837 	bl	1484 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    6416:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    6418:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    641a:	041b      	lsls	r3, r3, #16
    641c:	d507      	bpl.n	642e <_BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    641e:	4812      	ldr	r0, [pc, #72]	; (6468 <_BusFault.isra.3+0x84>)
    6420:	f7fb f830 	bl	1484 <printk>
			if (fromHardFault) {
    6424:	b11d      	cbz	r5, 642e <_BusFault.isra.3+0x4a>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    6426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6428:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    642c:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    642e:	4b09      	ldr	r3, [pc, #36]	; (6454 <_BusFault.isra.3+0x70>)
    6430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6432:	0558      	lsls	r0, r3, #21
    6434:	d5e2      	bpl.n	63fc <_BusFault.isra.3+0x18>
			PR_FAULT_INFO("  Imprecise data bus error\n");
    6436:	480d      	ldr	r0, [pc, #52]	; (646c <_BusFault.isra.3+0x88>)
    6438:	e7de      	b.n	63f8 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    643a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    643c:	0559      	lsls	r1, r3, #21
    643e:	d4fa      	bmi.n	6436 <_BusFault.isra.3+0x52>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    6440:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6442:	05da      	lsls	r2, r3, #23
    6444:	d501      	bpl.n	644a <_BusFault.isra.3+0x66>
		PR_FAULT_INFO("  Instruction bus error\n");
    6446:	480a      	ldr	r0, [pc, #40]	; (6470 <_BusFault.isra.3+0x8c>)
    6448:	e7d6      	b.n	63f8 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    644a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    644c:	049b      	lsls	r3, r3, #18
    644e:	d5d5      	bpl.n	63fc <_BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    6450:	4808      	ldr	r0, [pc, #32]	; (6474 <_BusFault.isra.3+0x90>)
    6452:	e7d1      	b.n	63f8 <_BusFault.isra.3+0x14>
    6454:	e000ed00 	.word	0xe000ed00
    6458:	0003077c 	.word	0x0003077c
    645c:	000308e2 	.word	0x000308e2
    6460:	000308f4 	.word	0x000308f4
    6464:	00030793 	.word	0x00030793
    6468:	000307ad 	.word	0x000307ad
    646c:	000307c3 	.word	0x000307c3
    6470:	000307df 	.word	0x000307df
    6474:	00030958 	.word	0x00030958

00006478 <_UsageFault.isra.5>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
    6478:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    647a:	4c19      	ldr	r4, [pc, #100]	; (64e0 <_UsageFault.isra.5+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    647c:	4819      	ldr	r0, [pc, #100]	; (64e4 <_UsageFault.isra.5+0x6c>)
    647e:	f7fb f801 	bl	1484 <printk>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    6482:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6484:	019a      	lsls	r2, r3, #6
    6486:	d502      	bpl.n	648e <_UsageFault.isra.5+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    6488:	4817      	ldr	r0, [pc, #92]	; (64e8 <_UsageFault.isra.5+0x70>)
    648a:	f7fa fffb 	bl	1484 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    648e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6490:	01db      	lsls	r3, r3, #7
    6492:	d502      	bpl.n	649a <_UsageFault.isra.5+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    6494:	4815      	ldr	r0, [pc, #84]	; (64ec <_UsageFault.isra.5+0x74>)
    6496:	f7fa fff5 	bl	1484 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    649a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    649c:	0318      	lsls	r0, r3, #12
    649e:	d502      	bpl.n	64a6 <_UsageFault.isra.5+0x2e>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    64a0:	4813      	ldr	r0, [pc, #76]	; (64f0 <_UsageFault.isra.5+0x78>)
    64a2:	f7fa ffef 	bl	1484 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    64a6:	4c0e      	ldr	r4, [pc, #56]	; (64e0 <_UsageFault.isra.5+0x68>)
    64a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    64aa:	0359      	lsls	r1, r3, #13
    64ac:	d502      	bpl.n	64b4 <_UsageFault.isra.5+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    64ae:	4811      	ldr	r0, [pc, #68]	; (64f4 <_UsageFault.isra.5+0x7c>)
    64b0:	f7fa ffe8 	bl	1484 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    64b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    64b6:	039a      	lsls	r2, r3, #14
    64b8:	d502      	bpl.n	64c0 <_UsageFault.isra.5+0x48>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    64ba:	480f      	ldr	r0, [pc, #60]	; (64f8 <_UsageFault.isra.5+0x80>)
    64bc:	f7fa ffe2 	bl	1484 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    64c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    64c2:	03db      	lsls	r3, r3, #15
    64c4:	d502      	bpl.n	64cc <_UsageFault.isra.5+0x54>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    64c6:	480d      	ldr	r0, [pc, #52]	; (64fc <_UsageFault.isra.5+0x84>)
    64c8:	f7fa ffdc 	bl	1484 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    64cc:	4a04      	ldr	r2, [pc, #16]	; (64e0 <_UsageFault.isra.5+0x68>)
    64ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
    64d0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    64d4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    64d8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    64da:	2000      	movs	r0, #0
    64dc:	bd10      	pop	{r4, pc}
    64de:	bf00      	nop
    64e0:	e000ed00 	.word	0xe000ed00
    64e4:	00030988 	.word	0x00030988
    64e8:	000309a1 	.word	0x000309a1
    64ec:	000309b5 	.word	0x000309b5
    64f0:	000309d0 	.word	0x000309d0
    64f4:	000309ef 	.word	0x000309ef
    64f8:	00030a15 	.word	0x00030a15
    64fc:	00030a30 	.word	0x00030a30

00006500 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    6500:	b570      	push	{r4, r5, r6, lr}
	u32_t reason;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6502:	4d28      	ldr	r5, [pc, #160]	; (65a4 <_Fault+0xa4>)
    6504:	686c      	ldr	r4, [r5, #4]
    6506:	f3c4 0408 	ubfx	r4, r4, #0, #9
{
    650a:	4606      	mov	r6, r0

	LOG_PANIC();
    650c:	f7fb fe40 	bl	2190 <log_panic>
	switch (fault) {
    6510:	1ee3      	subs	r3, r4, #3
    6512:	2b09      	cmp	r3, #9
    6514:	d83a      	bhi.n	658c <_Fault+0x8c>
    6516:	e8df f003 	tbb	[pc, r3]
    651a:	3305      	.short	0x3305
    651c:	39393035 	.word	0x39393035
    6520:	37393939 	.word	0x37393939
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    6524:	4820      	ldr	r0, [pc, #128]	; (65a8 <_Fault+0xa8>)
    6526:	f7fa ffad 	bl	1484 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    652a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    652c:	079a      	lsls	r2, r3, #30
    652e:	d503      	bpl.n	6538 <_Fault+0x38>
		PR_EXC("  Bus fault on vector table read\n");
    6530:	481e      	ldr	r0, [pc, #120]	; (65ac <_Fault+0xac>)
	PR_FAULT_INFO(
    6532:	f7fa ffa7 	bl	1484 <printk>
    6536:	e002      	b.n	653e <_Fault+0x3e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    6538:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    653a:	005b      	lsls	r3, r3, #1
    653c:	d405      	bmi.n	654a <_Fault+0x4a>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    653e:	2000      	movs	r0, #0

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
_exit_fatal:
	reason = _NANO_ERR_HW_EXCEPTION;
#endif
	_NanoFatalErrorHandler(reason, esf);
    6540:	4631      	mov	r1, r6
}
    6542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_NanoFatalErrorHandler(reason, esf);
    6546:	f000 b8f3 	b.w	6730 <_NanoFatalErrorHandler>
		PR_EXC("  Fault escalation (see below)\n");
    654a:	4819      	ldr	r0, [pc, #100]	; (65b0 <_Fault+0xb0>)
    654c:	f7fa ff9a 	bl	1484 <printk>
		if (SCB_MMFSR) {
    6550:	4b18      	ldr	r3, [pc, #96]	; (65b4 <_Fault+0xb4>)
    6552:	781b      	ldrb	r3, [r3, #0]
    6554:	b12b      	cbz	r3, 6562 <_Fault+0x62>
			reason = _MpuFault(esf, 1);
    6556:	2001      	movs	r0, #1
		reason = _MpuFault(esf, 0);
    6558:	f7ff ff00 	bl	635c <_MpuFault.isra.2>
	if (reason == _NANO_ERR_RECOVERABLE) {
    655c:	2806      	cmp	r0, #6
    655e:	d1ef      	bne.n	6540 <_Fault+0x40>
}
    6560:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR) {
    6562:	4b15      	ldr	r3, [pc, #84]	; (65b8 <_Fault+0xb8>)
    6564:	781b      	ldrb	r3, [r3, #0]
    6566:	b11b      	cbz	r3, 6570 <_Fault+0x70>
			reason = _BusFault(esf, 1);
    6568:	2001      	movs	r0, #1
		reason = _BusFault(esf, 0);
    656a:	f7ff ff3b 	bl	63e4 <_BusFault.isra.3>
    656e:	e7f5      	b.n	655c <_Fault+0x5c>
		} else if (SCB_UFSR) {
    6570:	4b12      	ldr	r3, [pc, #72]	; (65bc <_Fault+0xbc>)
    6572:	881b      	ldrh	r3, [r3, #0]
    6574:	b29b      	uxth	r3, r3
    6576:	2b00      	cmp	r3, #0
    6578:	d0e1      	beq.n	653e <_Fault+0x3e>
		reason = _UsageFault(esf);
    657a:	f7ff ff7d 	bl	6478 <_UsageFault.isra.5>
    657e:	e7ed      	b.n	655c <_Fault+0x5c>
		reason = _MpuFault(esf, 0);
    6580:	2000      	movs	r0, #0
    6582:	e7e9      	b.n	6558 <_Fault+0x58>
		reason = _BusFault(esf, 0);
    6584:	2000      	movs	r0, #0
    6586:	e7f0      	b.n	656a <_Fault+0x6a>
	PR_FAULT_INFO(
    6588:	480d      	ldr	r0, [pc, #52]	; (65c0 <_Fault+0xc0>)
    658a:	e7d2      	b.n	6532 <_Fault+0x32>
	PR_FAULT_INFO("***** %s %d) *****\n",
    658c:	4b0d      	ldr	r3, [pc, #52]	; (65c4 <_Fault+0xc4>)
    658e:	490e      	ldr	r1, [pc, #56]	; (65c8 <_Fault+0xc8>)
    6590:	480e      	ldr	r0, [pc, #56]	; (65cc <_Fault+0xcc>)
    6592:	f1a4 0210 	sub.w	r2, r4, #16
    6596:	2c0f      	cmp	r4, #15
    6598:	bfc8      	it	gt
    659a:	4619      	movgt	r1, r3
    659c:	f7fa ff72 	bl	1484 <printk>
    65a0:	e7cd      	b.n	653e <_Fault+0x3e>
    65a2:	bf00      	nop
    65a4:	e000ed00 	.word	0xe000ed00
    65a8:	00030826 	.word	0x00030826
    65ac:	0003083e 	.word	0x0003083e
    65b0:	00030860 	.word	0x00030860
    65b4:	e000ed28 	.word	0xe000ed28
    65b8:	e000ed29 	.word	0xe000ed29
    65bc:	e000ed2a 	.word	0xe000ed2a
    65c0:	00030880 	.word	0x00030880
    65c4:	0003080d 	.word	0x0003080d
    65c8:	000307f8 	.word	0x000307f8
    65cc:	000308b7 	.word	0x000308b7

000065d0 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    65d0:	4a02      	ldr	r2, [pc, #8]	; (65dc <_FaultInit+0xc>)
    65d2:	6953      	ldr	r3, [r2, #20]
    65d4:	f043 0310 	orr.w	r3, r3, #16
    65d8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    65da:	4770      	bx	lr
    65dc:	e000ed00 	.word	0xe000ed00

000065e0 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    65e0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    65e2:	2b00      	cmp	r3, #0
    65e4:	db08      	blt.n	65f8 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    65e6:	2201      	movs	r2, #1
    65e8:	f000 001f 	and.w	r0, r0, #31
    65ec:	fa02 f000 	lsl.w	r0, r2, r0
    65f0:	095b      	lsrs	r3, r3, #5
    65f2:	4a02      	ldr	r2, [pc, #8]	; (65fc <_arch_irq_enable+0x1c>)
    65f4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    65f8:	4770      	bx	lr
    65fa:	bf00      	nop
    65fc:	e000e100 	.word	0xe000e100

00006600 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    6600:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6602:	2b00      	cmp	r3, #0
    6604:	db0d      	blt.n	6622 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6606:	2201      	movs	r2, #1
    6608:	095b      	lsrs	r3, r3, #5
    660a:	f000 001f 	and.w	r0, r0, #31
    660e:	fa02 f000 	lsl.w	r0, r2, r0
    6612:	3320      	adds	r3, #32
    6614:	4a03      	ldr	r2, [pc, #12]	; (6624 <_arch_irq_disable+0x24>)
    6616:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    661a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    661e:	f3bf 8f6f 	isb	sy
}
    6622:	4770      	bx	lr
    6624:	e000e100 	.word	0xe000e100

00006628 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    6628:	0942      	lsrs	r2, r0, #5
    662a:	4b05      	ldr	r3, [pc, #20]	; (6640 <_arch_irq_is_enabled+0x18>)
    662c:	f000 001f 	and.w	r0, r0, #31
    6630:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    6634:	2301      	movs	r3, #1
    6636:	fa03 f000 	lsl.w	r0, r3, r0
}
    663a:	4010      	ands	r0, r2
    663c:	4770      	bx	lr
    663e:	bf00      	nop
    6640:	e000e100 	.word	0xe000e100

00006644 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    6644:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6646:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6648:	bfa8      	it	ge
    664a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    664e:	f101 0101 	add.w	r1, r1, #1
    6652:	ea4f 1141 	mov.w	r1, r1, lsl #5
    6656:	bfae      	itee	ge
    6658:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    665c:	f000 000f 	andlt.w	r0, r0, #15
    6660:	4b03      	ldrlt	r3, [pc, #12]	; (6670 <_irq_priority_set+0x2c>)
    6662:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6664:	bfac      	ite	ge
    6666:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    666a:	5419      	strblt	r1, [r3, r0]
}
    666c:	4770      	bx	lr
    666e:	bf00      	nop
    6670:	e000ed14 	.word	0xe000ed14

00006674 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    6674:	f000 b848 	b.w	6708 <__bus_fault>

00006678 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    6678:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    667a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    667c:	4b04      	ldr	r3, [pc, #16]	; (6690 <_arch_isr_direct_pm+0x18>)
    667e:	6a18      	ldr	r0, [r3, #32]
    6680:	b118      	cbz	r0, 668a <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    6682:	2200      	movs	r2, #0
    6684:	621a      	str	r2, [r3, #32]
		_sys_power_save_idle_exit(idle_val);
    6686:	f026 ff2b 	bl	2d4e0 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    668a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    668c:	bd08      	pop	{r3, pc}
    668e:	bf00      	nop
    6690:	20003780 	.word	0x20003780

00006694 <_arch_isr_direct_header>:
#endif

void _arch_isr_direct_header(void)
{
	z_sys_trace_isr_enter();
}
    6694:	4770      	bx	lr
	...

00006698 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    6698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    669a:	460c      	mov	r4, r1
    669c:	4605      	mov	r5, r0
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
    669e:	21aa      	movs	r1, #170	; 0xaa
    66a0:	4620      	mov	r0, r4
    66a2:	4616      	mov	r6, r2
    66a4:	461f      	mov	r7, r3
    66a6:	f000 fb1c 	bl	6ce2 <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    66aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    66ac:	9909      	ldr	r1, [sp, #36]	; 0x24
    66ae:	2204      	movs	r2, #4
    66b0:	4628      	mov	r0, r5
    66b2:	f027 ff69 	bl	2e588 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    66b6:	f1a6 0120 	sub.w	r1, r6, #32
    66ba:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    66bc:	4a0b      	ldr	r2, [pc, #44]	; (66ec <_new_thread+0x54>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    66be:	f021 0107 	bic.w	r1, r1, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    66c2:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    66c4:	f022 0201 	bic.w	r2, r2, #1
	thread->fn_abort = NULL;
    66c8:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    66cc:	e9c5 4616 	strd	r4, r6, [r5, #88]	; 0x58
    66d0:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    66d2:	9a06      	ldr	r2, [sp, #24]
    66d4:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    66d6:	9a07      	ldr	r2, [sp, #28]
    66d8:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    66da:	9a08      	ldr	r2, [sp, #32]
    66dc:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
    66de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->a1 = (u32_t)pEntry;
    66e2:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    66e4:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    66e6:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    66e8:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    66ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    66ec:	00000d09 	.word	0x00000d09

000066f0 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    66f0:	4901      	ldr	r1, [pc, #4]	; (66f8 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    66f2:	2210      	movs	r2, #16
	str r2, [r1]
    66f4:	600a      	str	r2, [r1, #0]
	bx lr
    66f6:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    66f8:	e000ed10 	.word	0xe000ed10

000066fc <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    66fc:	4040      	eors	r0, r0
	msr BASEPRI, r0
    66fe:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    6702:	bf30      	wfi

	bx lr
    6704:	4770      	bx	lr
    6706:	bf00      	nop

00006708 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    6708:	4040      	eors	r0, r0
	msr BASEPRI, r0
    670a:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    670e:	f8df c01c 	ldr.w	ip, [pc, #28]	; 672c <__bus_fault+0x24>
	ldr ip, [ip]
    6712:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    6716:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    671a:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    671c:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    6720:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    6724:	b500      	push	{lr}
	bl _Fault
    6726:	f7ff feeb 	bl	6500 <_Fault>

	pop {pc}
    672a:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    672c:	e000ed04 	.word	0xe000ed04

00006730 <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    6730:	b538      	push	{r3, r4, r5, lr}
    6732:	4604      	mov	r4, r0
    6734:	460d      	mov	r5, r1
	LOG_PANIC();
    6736:	f7fb fd2b 	bl	2190 <log_panic>

	switch (reason) {
    673a:	2c05      	cmp	r4, #5
    673c:	d81a      	bhi.n	6774 <_NanoFatalErrorHandler+0x44>
    673e:	e8df f004 	tbb	[pc, r4]
    6742:	1903      	.short	0x1903
    6744:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    6748:	480d      	ldr	r0, [pc, #52]	; (6780 <_NanoFatalErrorHandler+0x50>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    674a:	f7fa fe9b 	bl	1484 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    674e:	f027 fd85 	bl	2e25c <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    6752:	69aa      	ldr	r2, [r5, #24]
    6754:	4601      	mov	r1, r0
    6756:	480b      	ldr	r0, [pc, #44]	; (6784 <_NanoFatalErrorHandler+0x54>)
    6758:	f7fa fe94 	bl	1484 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    675c:	4629      	mov	r1, r5
    675e:	4620      	mov	r0, r4
}
    6760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    6764:	f000 b81c 	b.w	67a0 <_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    6768:	4807      	ldr	r0, [pc, #28]	; (6788 <_NanoFatalErrorHandler+0x58>)
    676a:	e7ee      	b.n	674a <_NanoFatalErrorHandler+0x1a>
		printk("***** Kernel OOPS! *****\n");
    676c:	4807      	ldr	r0, [pc, #28]	; (678c <_NanoFatalErrorHandler+0x5c>)
    676e:	e7ec      	b.n	674a <_NanoFatalErrorHandler+0x1a>
		printk("***** Kernel Panic! *****\n");
    6770:	4807      	ldr	r0, [pc, #28]	; (6790 <_NanoFatalErrorHandler+0x60>)
    6772:	e7ea      	b.n	674a <_NanoFatalErrorHandler+0x1a>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    6774:	4621      	mov	r1, r4
    6776:	4807      	ldr	r0, [pc, #28]	; (6794 <_NanoFatalErrorHandler+0x64>)
    6778:	f7fa fe84 	bl	1484 <printk>
		break;
    677c:	e7e7      	b.n	674e <_NanoFatalErrorHandler+0x1e>
    677e:	bf00      	nop
    6780:	00030a5c 	.word	0x00030a5c
    6784:	00030afa 	.word	0x00030afa
    6788:	00030a7c 	.word	0x00030a7c
    678c:	00030aa2 	.word	0x00030aa2
    6790:	00030abc 	.word	0x00030abc
    6794:	00030ad7 	.word	0x00030ad7

00006798 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    6798:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    679a:	6800      	ldr	r0, [r0, #0]
    679c:	f7ff bfc8 	b.w	6730 <_NanoFatalErrorHandler>

000067a0 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    67a0:	2805      	cmp	r0, #5
{
    67a2:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    67a4:	d00c      	beq.n	67c0 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    67a6:	f027 fdef 	bl	2e388 <k_is_in_isr>
    67aa:	b160      	cbz	r0, 67c6 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    67ac:	f027 fdec 	bl	2e388 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    67b0:	490c      	ldr	r1, [pc, #48]	; (67e4 <_SysFatalErrorHandler+0x44>)
    67b2:	4b0d      	ldr	r3, [pc, #52]	; (67e8 <_SysFatalErrorHandler+0x48>)
    67b4:	2800      	cmp	r0, #0
    67b6:	bf08      	it	eq
    67b8:	4619      	moveq	r1, r3
    67ba:	480c      	ldr	r0, [pc, #48]	; (67ec <_SysFatalErrorHandler+0x4c>)
    67bc:	f7fa fe62 	bl	1484 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    67c0:	f7ff ff9c 	bl	66fc <k_cpu_idle>
    67c4:	e7fc      	b.n	67c0 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    67c6:	f027 fdef 	bl	2e3a8 <_is_thread_essential>
    67ca:	2800      	cmp	r0, #0
    67cc:	d1ee      	bne.n	67ac <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    67ce:	4c08      	ldr	r4, [pc, #32]	; (67f0 <_SysFatalErrorHandler+0x50>)
    67d0:	4808      	ldr	r0, [pc, #32]	; (67f4 <_SysFatalErrorHandler+0x54>)
    67d2:	68a1      	ldr	r1, [r4, #8]
    67d4:	f7fa fe56 	bl	1484 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    67d8:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    67da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67de:	f000 b80b 	b.w	67f8 <_impl_k_thread_abort>
    67e2:	bf00      	nop
    67e4:	00030b36 	.word	0x00030b36
    67e8:	00030b3a 	.word	0x00030b3a
    67ec:	00030b4b 	.word	0x00030b4b
    67f0:	20003780 	.word	0x20003780
    67f4:	00030b6b 	.word	0x00030b6b

000067f8 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    67f8:	b538      	push	{r3, r4, r5, lr}
    67fa:	4605      	mov	r5, r0
	__asm__ volatile(
    67fc:	f04f 0320 	mov.w	r3, #32
    6800:	f3ef 8411 	mrs	r4, BASEPRI
    6804:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    6808:	f027 fe50 	bl	2e4ac <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    680c:	4b0a      	ldr	r3, [pc, #40]	; (6838 <_impl_k_thread_abort+0x40>)
    680e:	689b      	ldr	r3, [r3, #8]
    6810:	42ab      	cmp	r3, r5
    6812:	d10b      	bne.n	682c <_impl_k_thread_abort+0x34>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    6814:	4b09      	ldr	r3, [pc, #36]	; (683c <_impl_k_thread_abort+0x44>)
    6816:	685a      	ldr	r2, [r3, #4]
    6818:	f3c2 0208 	ubfx	r2, r2, #0, #9
    681c:	b912      	cbnz	r2, 6824 <_impl_k_thread_abort+0x2c>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    681e:	4620      	mov	r0, r4
    6820:	f7ff fd50 	bl	62c4 <__swap>
			(void)_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6824:	685a      	ldr	r2, [r3, #4]
    6826:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    682a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    682c:	4620      	mov	r0, r4
}
    682e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    6832:	f027 bb2d 	b.w	2de90 <_reschedule>
    6836:	bf00      	nop
    6838:	20003780 	.word	0x20003780
    683c:	e000ed00 	.word	0xe000ed00

00006840 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    6840:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    6842:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    6844:	4a0b      	ldr	r2, [pc, #44]	; (6874 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    6846:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    6848:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    684a:	bf1e      	ittt	ne
	movne	r1, #0
    684c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    684e:	6211      	strne	r1, [r2, #32]
		blxne	_sys_power_save_idle_exit
    6850:	f026 fe46 	blne	2d4e0 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    6854:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    6856:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    685a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    685e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    6862:	4905      	ldr	r1, [pc, #20]	; (6878 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    6864:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    6866:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    6868:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    686a:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    686e:	f7ff bd0f 	b.w	6290 <_ExcExit>
    6872:	0000      	.short	0x0000
	ldr r2, =_kernel
    6874:	20003780 	.word	0x20003780
	ldr r1, =_sw_isr_table
    6878:	000000dc 	.word	0x000000dc

0000687c <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    687c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    687e:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =_interrupt_stack
    6882:	480a      	ldr	r0, [pc, #40]	; (68ac <__reset+0x30>)
    ldr r1, =0xaa
    6884:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
    6888:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
    688c:	f000 fa29 	bl	6ce2 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    6890:	4806      	ldr	r0, [pc, #24]	; (68ac <__reset+0x30>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    6892:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    6896:	1840      	adds	r0, r0, r1
    msr PSP, r0
    6898:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    689c:	2002      	movs	r0, #2
    msr CONTROL, r0
    689e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    68a2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    68a6:	f000 f807 	bl	68b8 <_PrepC>
    68aa:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    68ac:	2000caf0 	.word	0x2000caf0

000068b0 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    68b0:	bf30      	wfi
    b _SysNmiOnReset
    68b2:	f7ff bffd 	b.w	68b0 <_SysNmiOnReset>
    68b6:	bf00      	nop

000068b8 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    68b8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    68ba:	4b07      	ldr	r3, [pc, #28]	; (68d8 <_PrepC+0x20>)
    68bc:	4a07      	ldr	r2, [pc, #28]	; (68dc <_PrepC+0x24>)
    68be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    68c2:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    68c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    68c8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    68cc:	f026 fe22 	bl	2d514 <_bss_zero>
	_data_copy();
    68d0:	f026 fe2a 	bl	2d528 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    68d4:	f026 fe4c 	bl	2d570 <_Cstart>
    68d8:	00000000 	.word	0x00000000
    68dc:	e000ed00 	.word	0xe000ed00

000068e0 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    68e0:	b508      	push	{r3, lr}
	handler();
    68e2:	f7ff ffe5 	bl	68b0 <_SysNmiOnReset>
	_ExcExit();
}
    68e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    68ea:	f7ff bcd1 	b.w	6290 <_ExcExit>
	...

000068f0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    68f0:	4b03      	ldr	r3, [pc, #12]	; (6900 <arm_core_mpu_enable+0x10>)
    68f2:	2205      	movs	r2, #5
    68f4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    68f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    68fa:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    68fe:	4770      	bx	lr
    6900:	e000ed90 	.word	0xe000ed90

00006904 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    6904:	4a11      	ldr	r2, [pc, #68]	; (694c <arm_mpu_init+0x48>)
{
    6906:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    6908:	6814      	ldr	r4, [r2, #0]
    690a:	2c08      	cmp	r4, #8
    690c:	d81b      	bhi.n	6946 <arm_mpu_init+0x42>
	MPU->CTRL = 0;
    690e:	4910      	ldr	r1, [pc, #64]	; (6950 <arm_mpu_init+0x4c>)
    6910:	6850      	ldr	r0, [r2, #4]
    6912:	2300      	movs	r3, #0
    6914:	604b      	str	r3, [r1, #4]

	/* Architecture-specific configuration */
	_mpu_init();

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    6916:	429c      	cmp	r4, r3
    6918:	f100 000c 	add.w	r0, r0, #12
    691c:	d103      	bne.n	6926 <arm_mpu_init+0x22>
	if (size > 0) {
		_region_init(index, &region_conf);
	}
#endif

	arm_core_mpu_enable();
    691e:	f7ff ffe7 	bl	68f0 <arm_core_mpu_enable>
    6922:	2000      	movs	r0, #0
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    6924:	bd10      	pop	{r4, pc}
 *   The caller must provide a valid region index.
 */
static void _region_init(u32_t index, struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    6926:	608b      	str	r3, [r1, #8]
	/* Configure the region */
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6928:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    692c:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    6930:	f042 0210 	orr.w	r2, r2, #16
    6934:	431a      	orrs	r2, r3
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6936:	60ca      	str	r2, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6938:	f850 2c04 	ldr.w	r2, [r0, #-4]
    693c:	f042 0201 	orr.w	r2, r2, #1
    6940:	610a      	str	r2, [r1, #16]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    6942:	3301      	adds	r3, #1
    6944:	e7e7      	b.n	6916 <arm_mpu_init+0x12>
		return -1;
    6946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    694a:	e7eb      	b.n	6924 <arm_mpu_init+0x20>
    694c:	2000d714 	.word	0x2000d714
    6950:	e000ed90 	.word	0xe000ed90

00006954 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
    6954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6958:	4684      	mov	ip, r0
    695a:	460f      	mov	r7, r1
	register const char *s = nptr;
    695c:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
    695e:	462c      	mov	r4, r5
    6960:	f814 3b01 	ldrb.w	r3, [r4], #1
	return c == ' ' || ((unsigned)c-'\t') < 5;
    6964:	2b20      	cmp	r3, #32
    6966:	d036      	beq.n	69d6 <strtol+0x82>
    6968:	f1a3 0109 	sub.w	r1, r3, #9
    696c:	2904      	cmp	r1, #4
    696e:	d932      	bls.n	69d6 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
    6970:	2b2d      	cmp	r3, #45	; 0x2d
    6972:	d132      	bne.n	69da <strtol+0x86>
		neg = 1;
		c = *s++;
    6974:	786b      	ldrb	r3, [r5, #1]
    6976:	1cac      	adds	r4, r5, #2
		neg = 1;
    6978:	2101      	movs	r1, #1
	} else if (c == '+')
		c = *s++;
	if ((base == 0 || base == 16) &&
    697a:	2a00      	cmp	r2, #0
    697c:	d05c      	beq.n	6a38 <strtol+0xe4>
    697e:	2a10      	cmp	r2, #16
    6980:	d109      	bne.n	6996 <strtol+0x42>
    6982:	2b30      	cmp	r3, #48	; 0x30
    6984:	d107      	bne.n	6996 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    6986:	7823      	ldrb	r3, [r4, #0]
    6988:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    698c:	2b58      	cmp	r3, #88	; 0x58
    698e:	d14e      	bne.n	6a2e <strtol+0xda>
		c = s[1];
    6990:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
    6992:	2210      	movs	r2, #16
		s += 2;
    6994:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
    6996:	2900      	cmp	r1, #0
    6998:	bf0c      	ite	eq
    699a:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
    699e:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    69a2:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
    69a4:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
    69a8:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
    69aa:	fb02 891e 	mls	r9, r2, lr, r8
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
    69ae:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c))
    69b2:	2d09      	cmp	r5, #9
    69b4:	d817      	bhi.n	69e6 <strtol+0x92>
			c -= '0';
    69b6:	462b      	mov	r3, r5
		else if (isalpha(c))
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
		if (c >= base)
    69b8:	429a      	cmp	r2, r3
    69ba:	dd24      	ble.n	6a06 <strtol+0xb2>
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
    69bc:	1c75      	adds	r5, r6, #1
    69be:	d007      	beq.n	69d0 <strtol+0x7c>
    69c0:	4570      	cmp	r0, lr
    69c2:	d81d      	bhi.n	6a00 <strtol+0xac>
    69c4:	d101      	bne.n	69ca <strtol+0x76>
    69c6:	454b      	cmp	r3, r9
    69c8:	dc1a      	bgt.n	6a00 <strtol+0xac>
			any = -1;
		else {
			any = 1;
			acc *= base;
			acc += c;
    69ca:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
    69ce:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
    69d0:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c))
    69d4:	e7eb      	b.n	69ae <strtol+0x5a>
{
    69d6:	4625      	mov	r5, r4
    69d8:	e7c1      	b.n	695e <strtol+0xa>
	} else if (c == '+')
    69da:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    69dc:	bf04      	itt	eq
    69de:	1cac      	addeq	r4, r5, #2
    69e0:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
    69e2:	2100      	movs	r1, #0
    69e4:	e7c9      	b.n	697a <strtol+0x26>
	return (((unsigned)c|32)-'a') < 26;
    69e6:	f043 0520 	orr.w	r5, r3, #32
    69ea:	3d61      	subs	r5, #97	; 0x61
		else if (isalpha(c))
    69ec:	2d19      	cmp	r5, #25
    69ee:	d80a      	bhi.n	6a06 <strtol+0xb2>
	return ((unsigned)(a)-'A') < 26;
    69f0:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
    69f4:	2d19      	cmp	r5, #25
    69f6:	bf8c      	ite	hi
    69f8:	2557      	movhi	r5, #87	; 0x57
    69fa:	2537      	movls	r5, #55	; 0x37
    69fc:	1b5b      	subs	r3, r3, r5
    69fe:	e7db      	b.n	69b8 <strtol+0x64>
			any = -1;
    6a00:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    6a04:	e7e4      	b.n	69d0 <strtol+0x7c>
		}
	}
	if (any < 0) {
    6a06:	1c73      	adds	r3, r6, #1
    6a08:	d107      	bne.n	6a1a <strtol+0xc6>

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
    6a0a:	f026 fd63 	bl	2d4d4 <_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
    6a0e:	2326      	movs	r3, #38	; 0x26
    6a10:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
    6a12:	4640      	mov	r0, r8
	} else if (neg)
		acc = -acc;
	if (endptr != NULL)
    6a14:	b937      	cbnz	r7, 6a24 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	return acc;
}
    6a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg)
    6a1a:	b101      	cbz	r1, 6a1e <strtol+0xca>
		acc = -acc;
    6a1c:	4240      	negs	r0, r0
	if (endptr != NULL)
    6a1e:	2f00      	cmp	r7, #0
    6a20:	d0f9      	beq.n	6a16 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
    6a22:	b10e      	cbz	r6, 6a28 <strtol+0xd4>
    6a24:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
    6a28:	f8c7 c000 	str.w	ip, [r7]
	return acc;
    6a2c:	e7f3      	b.n	6a16 <strtol+0xc2>
	if (base == 0)
    6a2e:	2330      	movs	r3, #48	; 0x30
    6a30:	2a00      	cmp	r2, #0
    6a32:	d1b0      	bne.n	6996 <strtol+0x42>
		base = c == '0' ? 8 : 10;
    6a34:	2208      	movs	r2, #8
    6a36:	e7ae      	b.n	6996 <strtol+0x42>
	if ((base == 0 || base == 16) &&
    6a38:	2b30      	cmp	r3, #48	; 0x30
    6a3a:	d0a4      	beq.n	6986 <strtol+0x32>
		base = c == '0' ? 8 : 10;
    6a3c:	220a      	movs	r2, #10
    6a3e:	e7aa      	b.n	6996 <strtol+0x42>

00006a40 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
    6a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a44:	4684      	mov	ip, r0
    6a46:	460f      	mov	r7, r1
	register const char *s = nptr;
    6a48:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
    6a4a:	462c      	mov	r4, r5
    6a4c:	f814 3b01 	ldrb.w	r3, [r4], #1
	return c == ' ' || ((unsigned)c-'\t') < 5;
    6a50:	2b20      	cmp	r3, #32
    6a52:	d035      	beq.n	6ac0 <strtoul+0x80>
    6a54:	f1a3 0109 	sub.w	r1, r3, #9
    6a58:	2904      	cmp	r1, #4
    6a5a:	d931      	bls.n	6ac0 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
    6a5c:	2b2d      	cmp	r3, #45	; 0x2d
    6a5e:	d131      	bne.n	6ac4 <strtoul+0x84>
		neg = 1;
		c = *s++;
    6a60:	786b      	ldrb	r3, [r5, #1]
    6a62:	1cac      	adds	r4, r5, #2
		neg = 1;
    6a64:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+')
		c = *s++;
	if ((base == 0 || base == 16) &&
    6a68:	2a00      	cmp	r2, #0
    6a6a:	d05e      	beq.n	6b2a <strtoul+0xea>
    6a6c:	2a10      	cmp	r2, #16
    6a6e:	d109      	bne.n	6a84 <strtoul+0x44>
    6a70:	2b30      	cmp	r3, #48	; 0x30
    6a72:	d107      	bne.n	6a84 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    6a74:	7823      	ldrb	r3, [r4, #0]
    6a76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    6a7a:	2b58      	cmp	r3, #88	; 0x58
    6a7c:	d150      	bne.n	6b20 <strtoul+0xe0>
		c = s[1];
    6a7e:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
    6a80:	2210      	movs	r2, #16
		s += 2;
    6a82:	3402      	adds	r4, #2
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
    6a84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    6a88:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
    6a8a:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
    6a8e:	fb02 f801 	mul.w	r8, r2, r1
    6a92:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
    6a96:	4630      	mov	r0, r6
	return (((unsigned)(a)-'0') < 10);
    6a98:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c))
    6a9c:	2d09      	cmp	r5, #9
    6a9e:	d818      	bhi.n	6ad2 <strtoul+0x92>
			c -= '0';
    6aa0:	462b      	mov	r3, r5
		else if (isalpha(c))
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
		if (c >= base)
    6aa2:	429a      	cmp	r2, r3
    6aa4:	dd25      	ble.n	6af2 <strtoul+0xb2>
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
    6aa6:	2e00      	cmp	r6, #0
    6aa8:	db20      	blt.n	6aec <strtoul+0xac>
    6aaa:	4288      	cmp	r0, r1
    6aac:	d81e      	bhi.n	6aec <strtoul+0xac>
    6aae:	d101      	bne.n	6ab4 <strtoul+0x74>
    6ab0:	4543      	cmp	r3, r8
    6ab2:	dc1b      	bgt.n	6aec <strtoul+0xac>
			any = -1;
		else {
			any = 1;
			acc *= base;
			acc += c;
    6ab4:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
    6ab8:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
    6aba:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c))
    6abe:	e7eb      	b.n	6a98 <strtoul+0x58>
{
    6ac0:	4625      	mov	r5, r4
    6ac2:	e7c2      	b.n	6a4a <strtoul+0xa>
	} else if (c == '+')
    6ac4:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    6ac6:	bf04      	itt	eq
    6ac8:	1cac      	addeq	r4, r5, #2
    6aca:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
    6acc:	f04f 0e00 	mov.w	lr, #0
    6ad0:	e7ca      	b.n	6a68 <strtoul+0x28>
	return (((unsigned)c|32)-'a') < 26;
    6ad2:	f043 0520 	orr.w	r5, r3, #32
    6ad6:	3d61      	subs	r5, #97	; 0x61
		else if (isalpha(c))
    6ad8:	2d19      	cmp	r5, #25
    6ada:	d80a      	bhi.n	6af2 <strtoul+0xb2>
	return ((unsigned)(a)-'A') < 26;
    6adc:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
    6ae0:	2d19      	cmp	r5, #25
    6ae2:	bf8c      	ite	hi
    6ae4:	2557      	movhi	r5, #87	; 0x57
    6ae6:	2537      	movls	r5, #55	; 0x37
    6ae8:	1b5b      	subs	r3, r3, r5
    6aea:	e7da      	b.n	6aa2 <strtoul+0x62>
			any = -1;
    6aec:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    6af0:	e7e3      	b.n	6aba <strtoul+0x7a>
		}
	}
	if (any < 0) {
    6af2:	2e00      	cmp	r6, #0
    6af4:	da08      	bge.n	6b08 <strtoul+0xc8>
    6af6:	f026 fced 	bl	2d4d4 <_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
    6afa:	2326      	movs	r3, #38	; 0x26
    6afc:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
    6afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg)
		acc = -acc;
	if (endptr != NULL)
    6b02:	b947      	cbnz	r7, 6b16 <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	return acc;
}
    6b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg)
    6b08:	f1be 0f00 	cmp.w	lr, #0
    6b0c:	d000      	beq.n	6b10 <strtoul+0xd0>
		acc = -acc;
    6b0e:	4240      	negs	r0, r0
	if (endptr != NULL)
    6b10:	2f00      	cmp	r7, #0
    6b12:	d0f7      	beq.n	6b04 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
    6b14:	b10e      	cbz	r6, 6b1a <strtoul+0xda>
    6b16:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
    6b1a:	f8c7 c000 	str.w	ip, [r7]
	return acc;
    6b1e:	e7f1      	b.n	6b04 <strtoul+0xc4>
	if (base == 0)
    6b20:	2330      	movs	r3, #48	; 0x30
    6b22:	2a00      	cmp	r2, #0
    6b24:	d1ae      	bne.n	6a84 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
    6b26:	2208      	movs	r2, #8
    6b28:	e7ac      	b.n	6a84 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
    6b2a:	2b30      	cmp	r3, #48	; 0x30
    6b2c:	d0a2      	beq.n	6a74 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
    6b2e:	220a      	movs	r2, #10
    6b30:	e7a8      	b.n	6a84 <strtoul+0x44>

00006b32 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
    6b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
    6b36:	780f      	ldrb	r7, [r1, #0]
{
    6b38:	4605      	mov	r5, r0
	if (c != 0) {
    6b3a:	b187      	cbz	r7, 6b5e <strstr+0x2c>
	c = *find++;
    6b3c:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
    6b3e:	4620      	mov	r0, r4
    6b40:	f000 f84c 	bl	6bdc <strlen>
    6b44:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
    6b46:	462e      	mov	r6, r5
    6b48:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0)
    6b4c:	b163      	cbz	r3, 6b68 <strstr+0x36>
				return NULL;
			} while (sc != c);
    6b4e:	429f      	cmp	r7, r3
    6b50:	d108      	bne.n	6b64 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
    6b52:	4642      	mov	r2, r8
    6b54:	4621      	mov	r1, r4
    6b56:	4630      	mov	r0, r6
    6b58:	f000 f855 	bl	6c06 <strncmp>
    6b5c:	b910      	cbnz	r0, 6b64 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
    6b5e:	4628      	mov	r0, r5
    6b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    6b64:	4635      	mov	r5, r6
    6b66:	e7ee      	b.n	6b46 <strstr+0x14>
				return NULL;
    6b68:	461d      	mov	r5, r3
    6b6a:	e7f8      	b.n	6b5e <strstr+0x2c>

00006b6c <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    6b6c:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    6b6e:	4603      	mov	r3, r0
    6b70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6b74:	b90a      	cbnz	r2, 6b7a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    6b76:	701a      	strb	r2, [r3, #0]

	return dest;
}
    6b78:	4770      	bx	lr
		*d = *s;
    6b7a:	f803 2b01 	strb.w	r2, [r3], #1
    6b7e:	e7f7      	b.n	6b70 <strcpy+0x4>

00006b80 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    6b80:	b570      	push	{r4, r5, r6, lr}
    6b82:	3901      	subs	r1, #1
    6b84:	4605      	mov	r5, r0
    6b86:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    6b88:	b142      	cbz	r2, 6b9c <strncpy+0x1c>
    6b8a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    6b8e:	1e56      	subs	r6, r2, #1
    6b90:	b92b      	cbnz	r3, 6b9e <strncpy+0x1e>
    6b92:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    6b94:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
    6b98:	42a2      	cmp	r2, r4
    6b9a:	d1fb      	bne.n	6b94 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
    6b9c:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    6b9e:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
    6ba2:	4632      	mov	r2, r6
    6ba4:	e7ef      	b.n	6b86 <strncpy+0x6>

00006ba6 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    6ba6:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0'))
    6ba8:	7802      	ldrb	r2, [r0, #0]
    6baa:	428a      	cmp	r2, r1
    6bac:	4603      	mov	r3, r0
    6bae:	f100 0001 	add.w	r0, r0, #1
    6bb2:	d004      	beq.n	6bbe <strchr+0x18>
    6bb4:	2a00      	cmp	r2, #0
    6bb6:	d1f7      	bne.n	6ba8 <strchr+0x2>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
    6bb8:	2900      	cmp	r1, #0
    6bba:	bf18      	it	ne
    6bbc:	2300      	movne	r3, #0
}
    6bbe:	4618      	mov	r0, r3
    6bc0:	4770      	bx	lr

00006bc2 <strrchr>:
 *
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
    6bc2:	b510      	push	{r4, lr}
	char *match = NULL;
    6bc4:	2300      	movs	r3, #0

	do {
		if (*s == (char)c) {
    6bc6:	b2c9      	uxtb	r1, r1
    6bc8:	4604      	mov	r4, r0
    6bca:	f810 2b01 	ldrb.w	r2, [r0], #1
    6bce:	428a      	cmp	r2, r1
    6bd0:	bf08      	it	eq
    6bd2:	4623      	moveq	r3, r4
			match = (char *)s;
		}
	} while (*s++);
    6bd4:	2a00      	cmp	r2, #0
    6bd6:	d1f7      	bne.n	6bc8 <strrchr+0x6>

	return match;
}
    6bd8:	4618      	mov	r0, r3
    6bda:	bd10      	pop	{r4, pc}

00006bdc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6bdc:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    6bde:	4603      	mov	r3, r0
    6be0:	1a98      	subs	r0, r3, r2
    6be2:	f813 1b01 	ldrb.w	r1, [r3], #1
    6be6:	2900      	cmp	r1, #0
    6be8:	d1fa      	bne.n	6be0 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    6bea:	4770      	bx	lr

00006bec <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    6bec:	3801      	subs	r0, #1
    6bee:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6bf0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    6bf4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6bf8:	4293      	cmp	r3, r2
    6bfa:	d102      	bne.n	6c02 <strcmp+0x16>
    6bfc:	2b00      	cmp	r3, #0
    6bfe:	d1f7      	bne.n	6bf0 <strcmp+0x4>
    6c00:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    6c02:	1a98      	subs	r0, r3, r2
    6c04:	4770      	bx	lr

00006c06 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
    6c06:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    6c08:	2400      	movs	r4, #0
    6c0a:	42a2      	cmp	r2, r4
    6c0c:	d008      	beq.n	6c20 <strncmp+0x1a>
    6c0e:	5d03      	ldrb	r3, [r0, r4]
    6c10:	5d0d      	ldrb	r5, [r1, r4]
    6c12:	42ab      	cmp	r3, r5
    6c14:	d102      	bne.n	6c1c <strncmp+0x16>
    6c16:	3401      	adds	r4, #1
    6c18:	2b00      	cmp	r3, #0
    6c1a:	d1f6      	bne.n	6c0a <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    6c1c:	1b58      	subs	r0, r3, r5
    6c1e:	e000      	b.n	6c22 <strncmp+0x1c>
    6c20:	2000      	movs	r0, #0
}
    6c22:	bd30      	pop	{r4, r5, pc}

00006c24 <strcat>:

char *strcat(char *_MLIBC_RESTRICT dest, const char *_MLIBC_RESTRICT src)
{
    6c24:	b538      	push	{r3, r4, r5, lr}
    6c26:	4604      	mov	r4, r0
    6c28:	460d      	mov	r5, r1
	strcpy(dest + strlen(dest), src);
    6c2a:	f7ff ffd7 	bl	6bdc <strlen>
    6c2e:	4629      	mov	r1, r5
    6c30:	4420      	add	r0, r4
    6c32:	f7ff ff9b 	bl	6b6c <strcpy>
	return dest;
}
    6c36:	4620      	mov	r0, r4
    6c38:	bd38      	pop	{r3, r4, r5, pc}

00006c3a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    6c3a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    6c3c:	b15a      	cbz	r2, 6c56 <memcmp+0x1c>
    6c3e:	3901      	subs	r1, #1
    6c40:	1884      	adds	r4, r0, r2
    6c42:	f810 2b01 	ldrb.w	r2, [r0], #1
    6c46:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    6c4a:	42a0      	cmp	r0, r4
    6c4c:	d001      	beq.n	6c52 <memcmp+0x18>
    6c4e:	429a      	cmp	r2, r3
    6c50:	d0f7      	beq.n	6c42 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    6c52:	1ad0      	subs	r0, r2, r3
}
    6c54:	bd10      	pop	{r4, pc}
		return 0;
    6c56:	4610      	mov	r0, r2
    6c58:	e7fc      	b.n	6c54 <memcmp+0x1a>

00006c5a <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    6c5a:	1a43      	subs	r3, r0, r1
    6c5c:	4293      	cmp	r3, r2
{
    6c5e:	b510      	push	{r4, lr}
    6c60:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    6c64:	d308      	bcc.n	6c78 <memmove+0x1e>
    6c66:	3901      	subs	r1, #1
	char *dest = d;
    6c68:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    6c6a:	429a      	cmp	r2, r3
    6c6c:	d00b      	beq.n	6c86 <memmove+0x2c>
			*dest = *src;
    6c6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    6c72:	f802 4b01 	strb.w	r4, [r2], #1
    6c76:	e7f8      	b.n	6c6a <memmove+0x10>
    6c78:	440a      	add	r2, r1
			dest[n] = src[n];
    6c7a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    6c7e:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    6c82:	428a      	cmp	r2, r1
    6c84:	d1f9      	bne.n	6c7a <memmove+0x20>
			n--;
		}
	}

	return d;
}
    6c86:	bd10      	pop	{r4, pc}

00006c88 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    6c88:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    6c8a:	ea81 0400 	eor.w	r4, r1, r0
    6c8e:	07a5      	lsls	r5, r4, #30
    6c90:	4603      	mov	r3, r0
    6c92:	d00b      	beq.n	6cac <memcpy+0x24>
    6c94:	3b01      	subs	r3, #1
    6c96:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    6c98:	4291      	cmp	r1, r2
    6c9a:	d11d      	bne.n	6cd8 <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    6c9e:	2a00      	cmp	r2, #0
    6ca0:	d0fc      	beq.n	6c9c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    6ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
    6ca6:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    6caa:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    6cac:	079c      	lsls	r4, r3, #30
    6cae:	d1f6      	bne.n	6c9e <memcpy+0x16>
    6cb0:	1f1d      	subs	r5, r3, #4
    6cb2:	460c      	mov	r4, r1
    6cb4:	188f      	adds	r7, r1, r2
		while (n >= sizeof(unsigned int)) {
    6cb6:	1b3e      	subs	r6, r7, r4
    6cb8:	2e03      	cmp	r6, #3
    6cba:	d808      	bhi.n	6cce <memcpy+0x46>
    6cbc:	0894      	lsrs	r4, r2, #2
    6cbe:	f06f 0503 	mvn.w	r5, #3
    6cc2:	fb05 2204 	mla	r2, r5, r4, r2
    6cc6:	00a4      	lsls	r4, r4, #2
    6cc8:	4423      	add	r3, r4
    6cca:	4421      	add	r1, r4
    6ccc:	e7e2      	b.n	6c94 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    6cce:	f854 6b04 	ldr.w	r6, [r4], #4
    6cd2:	f845 6f04 	str.w	r6, [r5, #4]!
    6cd6:	e7ee      	b.n	6cb6 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    6cd8:	f811 4b01 	ldrb.w	r4, [r1], #1
    6cdc:	f803 4f01 	strb.w	r4, [r3, #1]!
    6ce0:	e7da      	b.n	6c98 <memcpy+0x10>

00006ce2 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    6ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6ce4:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    6ce6:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    6ce8:	079c      	lsls	r4, r3, #30
    6cea:	d10f      	bne.n	6d0c <memset+0x2a>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    6cec:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    6cf0:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    6cf4:	461d      	mov	r5, r3
    6cf6:	189f      	adds	r7, r3, r2
    6cf8:	1b7e      	subs	r6, r7, r5
    6cfa:	2e03      	cmp	r6, #3
    6cfc:	d80c      	bhi.n	6d18 <memset+0x36>
    6cfe:	0894      	lsrs	r4, r2, #2
    6d00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    6d04:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    6d06:	429c      	cmp	r4, r3
    6d08:	d109      	bne.n	6d1e <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
    6d0c:	2a00      	cmp	r2, #0
    6d0e:	d0fc      	beq.n	6d0a <memset+0x28>
		*(d_byte++) = c_byte;
    6d10:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6d14:	3a01      	subs	r2, #1
    6d16:	e7e7      	b.n	6ce8 <memset+0x6>
		*(d_word++) = c_word;
    6d18:	f845 4b04 	str.w	r4, [r5], #4
    6d1c:	e7ec      	b.n	6cf8 <memset+0x16>
		*(d_byte++) = c_byte;
    6d1e:	f804 1b01 	strb.w	r1, [r4], #1
    6d22:	e7f0      	b.n	6d06 <memset+0x24>

00006d24 <memchr>:
 *
 * @return pointer to start of found byte
 */

void *memchr(const void *s, unsigned char c, size_t n)
{
    6d24:	b510      	push	{r4, lr}
	if (n != 0) {
    6d26:	b152      	cbz	r2, 6d3e <memchr+0x1a>
    6d28:	4402      	add	r2, r0
		const unsigned char *p = s;

		do {
			if (*p++ == c) {
    6d2a:	4603      	mov	r3, r0
    6d2c:	f813 4b01 	ldrb.w	r4, [r3], #1
    6d30:	428c      	cmp	r4, r1
    6d32:	d003      	beq.n	6d3c <memchr+0x18>
				return ((void *)(p - 1));
			}

		} while (--n != 0);
    6d34:	4293      	cmp	r3, r2
    6d36:	4618      	mov	r0, r3
    6d38:	d1f7      	bne.n	6d2a <memchr+0x6>
	}

	return NULL;
    6d3a:	2000      	movs	r0, #0
}
    6d3c:	bd10      	pop	{r4, pc}
	return NULL;
    6d3e:	4610      	mov	r0, r2
    6d40:	e7fc      	b.n	6d3c <memchr+0x18>

00006d42 <_to_x>:
/* Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes), padding with leading zeros up to the minimum length.
 */
static int _to_x(char *buf, uint32_t n, int base, int minlen)
{
    6d42:	b570      	push	{r4, r5, r6, lr}
    6d44:	4604      	mov	r4, r0
	char *buf0 = buf;

	do {
		int d = n % base;
    6d46:	fbb1 f6f2 	udiv	r6, r1, r2
    6d4a:	fb02 1116 	mls	r1, r2, r6, r1

		n /= base;
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    6d4e:	b2cd      	uxtb	r5, r1
    6d50:	2909      	cmp	r1, #9
    6d52:	bf8c      	ite	hi
    6d54:	2127      	movhi	r1, #39	; 0x27
    6d56:	2100      	movls	r1, #0
    6d58:	3530      	adds	r5, #48	; 0x30
    6d5a:	4429      	add	r1, r5
    6d5c:	f804 1b01 	strb.w	r1, [r4], #1
	} while (n);
    6d60:	4631      	mov	r1, r6
    6d62:	2e00      	cmp	r6, #0
    6d64:	d1ef      	bne.n	6d46 <_to_x+0x4>
		*end++ = '0';
    6d66:	2130      	movs	r1, #48	; 0x30
    6d68:	1a22      	subs	r2, r4, r0
	while (end - start < minlen) {
    6d6a:	4293      	cmp	r3, r2
    6d6c:	dc07      	bgt.n	6d7e <_to_x+0x3c>
	*end = 0;
    6d6e:	4623      	mov	r3, r4
    6d70:	2100      	movs	r1, #0
    6d72:	f803 1901 	strb.w	r1, [r3], #-1
	for (end--; end > start; end--, start++) {
    6d76:	4283      	cmp	r3, r0
    6d78:	d804      	bhi.n	6d84 <_to_x+0x42>
	return _reverse_and_pad(buf0, buf, minlen);
}
    6d7a:	4610      	mov	r0, r2
    6d7c:	bd70      	pop	{r4, r5, r6, pc}
		*end++ = '0';
    6d7e:	f804 1b01 	strb.w	r1, [r4], #1
    6d82:	e7f1      	b.n	6d68 <_to_x+0x26>
		char tmp = *end;
    6d84:	7819      	ldrb	r1, [r3, #0]
		*end = *start;
    6d86:	7804      	ldrb	r4, [r0, #0]
    6d88:	f803 4901 	strb.w	r4, [r3], #-1
		*start = tmp;
    6d8c:	f800 1b01 	strb.w	r1, [r0], #1
    6d90:	e7f1      	b.n	6d76 <_to_x+0x34>

00006d92 <_rlrshift>:
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
}

static	void _rlrshift(uint64_t *v)
{
	*v = (*v & 1) + (*v >> 1);
    6d92:	e9d0 2300 	ldrd	r2, r3, [r0]
{
    6d96:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	*v = (*v & 1) + (*v >> 1);
    6d9a:	ea5f 0c53 	movs.w	ip, r3, lsr #1
    6d9e:	ea4f 0b32 	mov.w	fp, r2, rrx
    6da2:	f002 0401 	and.w	r4, r2, #1
    6da6:	eb1b 0204 	adds.w	r2, fp, r4
    6daa:	f04f 0500 	mov.w	r5, #0
    6dae:	eb4c 0305 	adc.w	r3, ip, r5
    6db2:	e9c0 2300 	strd	r2, r3, [r0]
}
    6db6:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

00006dba <_ldiv5>:
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
	uint32_t i, hi;
	uint64_t rem = *v, quot = 0, q;
    6dba:	e9d0 2300 	ldrd	r2, r3, [r0]
{
    6dbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 */
	rem += 2;

	for (i = 0; i < 3; i++) {
		hi = rem >> shifts[i];
		q = (uint64_t)(hi / 5) << shifts[i];
    6dc2:	2105      	movs	r1, #5
	rem += 2;
    6dc4:	f112 0802 	adds.w	r8, r2, #2
		rem -= q * 5;
    6dc8:	f04f 0600 	mov.w	r6, #0
	rem += 2;
    6dcc:	f143 0900 	adc.w	r9, r3, #0
		rem -= q * 5;
    6dd0:	ebb8 0806 	subs.w	r8, r8, r6
		q = (uint64_t)(hi / 5) << shifts[i];
    6dd4:	fbb9 f5f1 	udiv	r5, r9, r1
		rem -= q * 5;
    6dd8:	fb01 f705 	mul.w	r7, r1, r5
    6ddc:	eb69 0907 	sbc.w	r9, r9, r7
		hi = rem >> shifts[i];
    6de0:	ea4f 06d8 	mov.w	r6, r8, lsr #3
    6de4:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
		q = (uint64_t)(hi / 5) << shifts[i];
    6de8:	2400      	movs	r4, #0
    6dea:	fbb6 fcf1 	udiv	ip, r6, r1
    6dee:	ea4f 06cc 	mov.w	r6, ip, lsl #3
		quot += q;
    6df2:	19a2      	adds	r2, r4, r6
		q = (uint64_t)(hi / 5) << shifts[i];
    6df4:	ea4f 775c 	mov.w	r7, ip, lsr #29
		rem -= q * 5;
    6df8:	46c2      	mov	sl, r8
		quot += q;
    6dfa:	eb45 0307 	adc.w	r3, r5, r7
    6dfe:	4614      	mov	r4, r2
		rem -= q * 5;
    6e00:	fba6 8901 	umull	r8, r9, r6, r1
    6e04:	ebba 0208 	subs.w	r2, sl, r8
		quot += q;
    6e08:	461d      	mov	r5, r3
		q = (uint64_t)(hi / 5) << shifts[i];
    6e0a:	fbb2 f2f1 	udiv	r2, r2, r1
		quot += q;
    6e0e:	18a4      	adds	r4, r4, r2
    6e10:	f145 0500 	adc.w	r5, r5, #0
	}

	*v = quot;
    6e14:	e9c0 4500 	strd	r4, r5, [r0]
}
    6e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006e1c <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	int		rval;

	if (*digit_count > 0) {
    6e1c:	680b      	ldr	r3, [r1, #0]
    6e1e:	2b00      	cmp	r3, #0
{
    6e20:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
	if (*digit_count > 0) {
    6e24:	dd13      	ble.n	6e4e <_get_digit+0x32>
		*digit_count -= 1;
		*fr = *fr * 10;
    6e26:	6802      	ldr	r2, [r0, #0]
    6e28:	6844      	ldr	r4, [r0, #4]
		*digit_count -= 1;
    6e2a:	3b01      	subs	r3, #1
    6e2c:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10;
    6e2e:	210a      	movs	r1, #10
    6e30:	fba2 bc01 	umull	fp, ip, r2, r1
    6e34:	fb01 cc04 	mla	ip, r1, r4, ip
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    6e38:	465a      	mov	r2, fp
    6e3a:	f02c 4370 	bic.w	r3, ip, #4026531840	; 0xf0000000
    6e3e:	e9c0 2300 	strd	r2, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
    6e42:	ea4f 711c 	mov.w	r1, ip, lsr #28
    6e46:	3130      	adds	r1, #48	; 0x30
	} else
		rval = '0';
	return (char) (rval);
}
    6e48:	b2c8      	uxtb	r0, r1
    6e4a:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
		rval = '0';
    6e4e:	2130      	movs	r1, #48	; 0x30
    6e50:	e7fa      	b.n	6e48 <_get_digit+0x2c>
	...

00006e54 <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, char *format, va_list vargs)
{
    6e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e58:	b0c9      	sub	sp, #292	; 0x124
    6e5a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    6e5e:	461f      	mov	r7, r3
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
    6e60:	2300      	movs	r3, #0
{
    6e62:	4693      	mov	fp, r2
	count = 0;
    6e64:	9304      	str	r3, [sp, #16]

	while ((c = *format++)) {
    6e66:	f89b 0000 	ldrb.w	r0, [fp]
    6e6a:	f10b 0501 	add.w	r5, fp, #1
    6e6e:	b148      	cbz	r0, 6e84 <_prf+0x30>
		if (c != '%') {
    6e70:	2825      	cmp	r0, #37	; 0x25
    6e72:	d07b      	beq.n	6f6c <_prf+0x118>
			if ((*func) (c, dest) == EOF) {
    6e74:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
    6e78:	4798      	blx	r3
    6e7a:	3001      	adds	r0, #1
    6e7c:	d106      	bne.n	6e8c <_prf+0x38>
				return EOF;
    6e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e82:	9304      	str	r3, [sp, #16]
				}
			}
		}
	}
	return count;
}
    6e84:	9804      	ldr	r0, [sp, #16]
    6e86:	b049      	add	sp, #292	; 0x124
    6e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			count++;
    6e8c:	9b04      	ldr	r3, [sp, #16]
    6e8e:	3301      	adds	r3, #1
    6e90:	e9cd 3704 	strd	r3, r7, [sp, #16]
	while ((c = *format++)) {
    6e94:	46ab      	mov	fp, r5
			if (c >= MAXFLD + 1)
    6e96:	9f05      	ldr	r7, [sp, #20]
    6e98:	e7e5      	b.n	6e66 <_prf+0x12>
				switch (c) {
    6e9a:	2c23      	cmp	r4, #35	; 0x23
    6e9c:	d05f      	beq.n	6f5e <_prf+0x10a>
    6e9e:	d854      	bhi.n	6f4a <_prf+0xf6>
    6ea0:	2c00      	cmp	r4, #0
    6ea2:	d0ef      	beq.n	6e84 <_prf+0x30>
					fspace = true;
    6ea4:	2c20      	cmp	r4, #32
    6ea6:	bf08      	it	eq
    6ea8:	f04f 0901 	moveq.w	r9, #1
					fplus = true;
    6eac:	465d      	mov	r5, fp
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    6eae:	46ab      	mov	fp, r5
    6eb0:	48bf      	ldr	r0, [pc, #764]	; (71b0 <_prf+0x35c>)
    6eb2:	f81b 4b01 	ldrb.w	r4, [fp], #1
    6eb6:	4621      	mov	r1, r4
    6eb8:	f7ff fe75 	bl	6ba6 <strchr>
    6ebc:	2800      	cmp	r0, #0
    6ebe:	d1ec      	bne.n	6e9a <_prf+0x46>
			if (c == '*') {
    6ec0:	2c2a      	cmp	r4, #42	; 0x2a
    6ec2:	d15b      	bne.n	6f7c <_prf+0x128>
				width = (int32_t) va_arg(vargs, int32_t);
    6ec4:	683a      	ldr	r2, [r7, #0]
    6ec6:	9203      	str	r2, [sp, #12]
				if (width < 0) {
    6ec8:	2a00      	cmp	r2, #0
					width = -width;
    6eca:	bfb8      	it	lt
    6ecc:	4252      	neglt	r2, r2
				width = (int32_t) va_arg(vargs, int32_t);
    6ece:	f107 0304 	add.w	r3, r7, #4
					width = -width;
    6ed2:	bfb8      	it	lt
    6ed4:	9203      	strlt	r2, [sp, #12]
				c = *format++;
    6ed6:	786c      	ldrb	r4, [r5, #1]
					fminus = true;
    6ed8:	bfbc      	itt	lt
    6eda:	2201      	movlt	r2, #1
    6edc:	9206      	strlt	r2, [sp, #24]
				c = *format++;
    6ede:	f105 0b02 	add.w	fp, r5, #2
				width = (int32_t) va_arg(vargs, int32_t);
    6ee2:	461f      	mov	r7, r3
				width = MAXFLD;
    6ee4:	9b03      	ldr	r3, [sp, #12]
    6ee6:	2bc9      	cmp	r3, #201	; 0xc9
    6ee8:	bf28      	it	cs
    6eea:	23c8      	movcs	r3, #200	; 0xc8
    6eec:	9303      	str	r3, [sp, #12]
			if (c == '.') {
    6eee:	2c2e      	cmp	r4, #46	; 0x2e
    6ef0:	d169      	bne.n	6fc6 <_prf+0x172>
				if (c == '*') {
    6ef2:	f89b 3000 	ldrb.w	r3, [fp]
    6ef6:	2b2a      	cmp	r3, #42	; 0x2a
    6ef8:	d162      	bne.n	6fc0 <_prf+0x16c>
					precision = (int32_t)
    6efa:	683d      	ldr	r5, [r7, #0]
				c = *format++;
    6efc:	f10b 0b01 	add.w	fp, fp, #1
					precision = (int32_t)
    6f00:	3704      	adds	r7, #4
					precision = -1;
    6f02:	2dc9      	cmp	r5, #201	; 0xc9
				c = *format++;
    6f04:	f89b 4000 	ldrb.w	r4, [fp]
					precision = -1;
    6f08:	bfa8      	it	ge
    6f0a:	f04f 35ff 	movge.w	r5, #4294967295	; 0xffffffff
				c = *format++;
    6f0e:	f10b 0b01 	add.w	fp, fp, #1
			if (strchr("hlLz", c) != NULL) {
    6f12:	4621      	mov	r1, r4
    6f14:	48a7      	ldr	r0, [pc, #668]	; (71b4 <_prf+0x360>)
    6f16:	f7ff fe46 	bl	6ba6 <strchr>
    6f1a:	b118      	cbz	r0, 6f24 <_prf+0xd0>
				c = *format++;
    6f1c:	f89b 4000 	ldrb.w	r4, [fp]
    6f20:	f10b 0b01 	add.w	fp, fp, #1
			switch (c) {
    6f24:	2c67      	cmp	r4, #103	; 0x67
    6f26:	dc7c      	bgt.n	7022 <_prf+0x1ce>
    6f28:	2c65      	cmp	r4, #101	; 0x65
    6f2a:	f280 80e0 	bge.w	70ee <_prf+0x29a>
    6f2e:	2c47      	cmp	r4, #71	; 0x47
    6f30:	dc4c      	bgt.n	6fcc <_prf+0x178>
    6f32:	2c45      	cmp	r4, #69	; 0x45
    6f34:	f280 80db 	bge.w	70ee <_prf+0x29a>
    6f38:	2c00      	cmp	r4, #0
    6f3a:	d0a3      	beq.n	6e84 <_prf+0x30>
    6f3c:	2c25      	cmp	r4, #37	; 0x25
    6f3e:	f000 8335 	beq.w	75ac <_prf+0x758>
			if (c >= MAXFLD + 1)
    6f42:	2cc8      	cmp	r4, #200	; 0xc8
    6f44:	f340 833c 	ble.w	75c0 <_prf+0x76c>
    6f48:	e799      	b.n	6e7e <_prf+0x2a>
				switch (c) {
    6f4a:	2c2d      	cmp	r4, #45	; 0x2d
    6f4c:	d00b      	beq.n	6f66 <_prf+0x112>
    6f4e:	2c30      	cmp	r4, #48	; 0x30
    6f50:	d007      	beq.n	6f62 <_prf+0x10e>
					fplus = true;
    6f52:	2c2b      	cmp	r4, #43	; 0x2b
    6f54:	9b07      	ldr	r3, [sp, #28]
    6f56:	bf08      	it	eq
    6f58:	2301      	moveq	r3, #1
    6f5a:	9307      	str	r3, [sp, #28]
    6f5c:	e7a6      	b.n	6eac <_prf+0x58>
					falt = true;
    6f5e:	2601      	movs	r6, #1
					break;
    6f60:	e7a4      	b.n	6eac <_prf+0x58>
					pad = '0';
    6f62:	9402      	str	r4, [sp, #8]
					break;
    6f64:	e7a2      	b.n	6eac <_prf+0x58>
					fminus = true;
    6f66:	2301      	movs	r3, #1
    6f68:	9306      	str	r3, [sp, #24]
    6f6a:	e79f      	b.n	6eac <_prf+0x58>
			fminus = fplus = fspace = falt = false;
    6f6c:	f04f 0900 	mov.w	r9, #0
			pad = ' ';		/* Default pad character    */
    6f70:	2320      	movs	r3, #32
    6f72:	9302      	str	r3, [sp, #8]
			fminus = fplus = fspace = falt = false;
    6f74:	e9cd 9906 	strd	r9, r9, [sp, #24]
    6f78:	464e      	mov	r6, r9
    6f7a:	e798      	b.n	6eae <_prf+0x5a>
	return (((unsigned)(a)-'0') < 10);
    6f7c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c))
    6f80:	2b09      	cmp	r3, #9
				width = 0;
    6f82:	9003      	str	r0, [sp, #12]
			} else if (!isdigit(c))
    6f84:	d8b3      	bhi.n	6eee <_prf+0x9a>
		i = 10 * i + *p++ - '0';
    6f86:	220a      	movs	r2, #10
	while (isdigit(((int) *p)))
    6f88:	46ab      	mov	fp, r5
    6f8a:	f81b 0b01 	ldrb.w	r0, [fp], #1
    6f8e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    6f92:	2b09      	cmp	r3, #9
    6f94:	4604      	mov	r4, r0
    6f96:	d8a5      	bhi.n	6ee4 <_prf+0x90>
		i = 10 * i + *p++ - '0';
    6f98:	9b03      	ldr	r3, [sp, #12]
    6f9a:	fb02 0003 	mla	r0, r2, r3, r0
    6f9e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    6fa2:	9303      	str	r3, [sp, #12]
    6fa4:	465d      	mov	r5, fp
    6fa6:	e7ef      	b.n	6f88 <_prf+0x134>
    6fa8:	fb00 3505 	mla	r5, r0, r5, r3
    6fac:	3d30      	subs	r5, #48	; 0x30
    6fae:	4693      	mov	fp, r2
	while (isdigit(((int) *p)))
    6fb0:	465a      	mov	r2, fp
    6fb2:	f812 3b01 	ldrb.w	r3, [r2], #1
    6fb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    6fba:	2909      	cmp	r1, #9
    6fbc:	d9f4      	bls.n	6fa8 <_prf+0x154>
    6fbe:	e7a0      	b.n	6f02 <_prf+0xae>
	i = 0;
    6fc0:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    6fc2:	200a      	movs	r0, #10
    6fc4:	e7f4      	b.n	6fb0 <_prf+0x15c>
			precision = -1;	/* No precision specified   */
    6fc6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    6fca:	e7a2      	b.n	6f12 <_prf+0xbe>
			switch (c) {
    6fcc:	2c63      	cmp	r4, #99	; 0x63
    6fce:	d06f      	beq.n	70b0 <_prf+0x25c>
    6fd0:	dc32      	bgt.n	7038 <_prf+0x1e4>
    6fd2:	2c58      	cmp	r4, #88	; 0x58
    6fd4:	d1b5      	bne.n	6f42 <_prf+0xee>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    6fd6:	1d3b      	adds	r3, r7, #4
    6fd8:	9305      	str	r3, [sp, #20]
    6fda:	6839      	ldr	r1, [r7, #0]
	if (alt_form) {
    6fdc:	2e00      	cmp	r6, #0
    6fde:	f000 82dc 	beq.w	759a <_prf+0x746>
		*buf++ = '0';
    6fe2:	f647 0330 	movw	r3, #30768	; 0x7830
    6fe6:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
		*buf++ = 'x';
    6fea:	f10d 0756 	add.w	r7, sp, #86	; 0x56
	len = _to_x(buf, value, 16, precision);
    6fee:	462b      	mov	r3, r5
    6ff0:	2210      	movs	r2, #16
    6ff2:	4638      	mov	r0, r7
    6ff4:	f7ff fea5 	bl	6d42 <_to_x>
	if (prefix == 'X') {
    6ff8:	2c58      	cmp	r4, #88	; 0x58
    6ffa:	d106      	bne.n	700a <_prf+0x1b6>
    6ffc:	f10d 0253 	add.w	r2, sp, #83	; 0x53
	for (/**/; *buf; buf++) {
    7000:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    7004:	2b00      	cmp	r3, #0
    7006:	f040 82ca 	bne.w	759e <_prf+0x74a>
	return len + (buf - buf0);
    700a:	f10d 0854 	add.w	r8, sp, #84	; 0x54
			prefix = 0;
    700e:	2e00      	cmp	r6, #0
	return len + (buf - buf0);
    7010:	eba7 0808 	sub.w	r8, r7, r8
    7014:	4440      	add	r0, r8
			prefix = 0;
    7016:	bf14      	ite	ne
    7018:	f04f 0902 	movne.w	r9, #2
    701c:	f04f 0900 	moveq.w	r9, #0
    7020:	e029      	b.n	7076 <_prf+0x222>
			switch (c) {
    7022:	2c70      	cmp	r4, #112	; 0x70
    7024:	f000 8294 	beq.w	7550 <_prf+0x6fc>
    7028:	dc2b      	bgt.n	7082 <_prf+0x22e>
    702a:	2c6e      	cmp	r4, #110	; 0x6e
    702c:	f000 8253 	beq.w	74d6 <_prf+0x682>
    7030:	f300 8257 	bgt.w	74e2 <_prf+0x68e>
    7034:	2c69      	cmp	r4, #105	; 0x69
    7036:	d184      	bne.n	6f42 <_prf+0xee>
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    7038:	683c      	ldr	r4, [r7, #0]
    703a:	1d3b      	adds	r3, r7, #4
	if (value < 0) {
    703c:	2c00      	cmp	r4, #0
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    703e:	9305      	str	r3, [sp, #20]
	if (value < 0) {
    7040:	da42      	bge.n	70c8 <_prf+0x274>
		*buf++ = '-';
    7042:	232d      	movs	r3, #45	; 0x2d
		if (value != 0x80000000)
    7044:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
		*buf++ = '-';
    7048:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (value != 0x80000000)
    704c:	d041      	beq.n	70d2 <_prf+0x27e>
			value = -value;
    704e:	4261      	negs	r1, r4
		*buf++ = ' ';
    7050:	f10d 0855 	add.w	r8, sp, #85	; 0x55
	return _to_x(buf, value, 10, precision);
    7054:	462b      	mov	r3, r5
    7056:	4640      	mov	r0, r8
    7058:	220a      	movs	r2, #10
    705a:	f7ff fe72 	bl	6d42 <_to_x>
				if (fplus || fspace || (int32_temp < 0))
    705e:	9b07      	ldr	r3, [sp, #28]
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
    7060:	4480      	add	r8, r0
    7062:	a815      	add	r0, sp, #84	; 0x54
    7064:	eba8 0000 	sub.w	r0, r8, r0
				if (fplus || fspace || (int32_temp < 0))
    7068:	2b00      	cmp	r3, #0
    706a:	d13d      	bne.n	70e8 <_prf+0x294>
    706c:	f1b9 0f00 	cmp.w	r9, #0
    7070:	d101      	bne.n	7076 <_prf+0x222>
    7072:	ea4f 79d4 	mov.w	r9, r4, lsr #31
			prefix = 0;
    7076:	3501      	adds	r5, #1
    7078:	9b02      	ldr	r3, [sp, #8]
    707a:	bf18      	it	ne
    707c:	2320      	movne	r3, #32
    707e:	9302      	str	r3, [sp, #8]
    7080:	e080      	b.n	7184 <_prf+0x330>
			switch (c) {
    7082:	2c75      	cmp	r4, #117	; 0x75
    7084:	f000 8280 	beq.w	7588 <_prf+0x734>
    7088:	2c78      	cmp	r4, #120	; 0x78
    708a:	d0a4      	beq.n	6fd6 <_prf+0x182>
    708c:	2c73      	cmp	r4, #115	; 0x73
    708e:	f47f af58 	bne.w	6f42 <_prf+0xee>
				cptr_temp = (char *) va_arg(vargs, char *);
    7092:	1d3b      	adds	r3, r7, #4
    7094:	6839      	ldr	r1, [r7, #0]
    7096:	9305      	str	r3, [sp, #20]
				for (c = 0; c < MAXFLD; c++) {
    7098:	2600      	movs	r6, #0
					if (cptr_temp[c] == '\0') {
    709a:	5d8b      	ldrb	r3, [r1, r6]
    709c:	2b00      	cmp	r3, #0
    709e:	f000 8266 	beq.w	756e <_prf+0x71a>
				for (c = 0; c < MAXFLD; c++) {
    70a2:	3601      	adds	r6, #1
    70a4:	2ec8      	cmp	r6, #200	; 0xc8
    70a6:	d1f8      	bne.n	709a <_prf+0x246>
				if ((precision >= 0) && (precision < c))
    70a8:	2d00      	cmp	r5, #0
    70aa:	f280 8262 	bge.w	7572 <_prf+0x71e>
    70ae:	e266      	b.n	757e <_prf+0x72a>
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
    70b0:	1d3b      	adds	r3, r7, #4
    70b2:	9305      	str	r3, [sp, #20]
    70b4:	683b      	ldr	r3, [r7, #0]
    70b6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
				buf[1] = '\0';
    70ba:	2300      	movs	r3, #0
    70bc:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
				c = 1;
    70c0:	2601      	movs	r6, #1
					prefix = 2;
    70c2:	f04f 0900 	mov.w	r9, #0
    70c6:	e21c      	b.n	7502 <_prf+0x6ae>
	} else if (fplus)
    70c8:	9b07      	ldr	r3, [sp, #28]
    70ca:	b123      	cbz	r3, 70d6 <_prf+0x282>
		*buf++ = '+';
    70cc:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    70ce:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    70d2:	4621      	mov	r1, r4
    70d4:	e7bc      	b.n	7050 <_prf+0x1fc>
	else if (fspace)
    70d6:	f1b9 0f00 	cmp.w	r9, #0
    70da:	d001      	beq.n	70e0 <_prf+0x28c>
		*buf++ = ' ';
    70dc:	2320      	movs	r3, #32
    70de:	e7f6      	b.n	70ce <_prf+0x27a>
	else if (fspace)
    70e0:	4621      	mov	r1, r4
    70e2:	f10d 0854 	add.w	r8, sp, #84	; 0x54
    70e6:	e7b5      	b.n	7054 <_prf+0x200>
					prefix = 1;
    70e8:	f8dd 901c 	ldr.w	r9, [sp, #28]
    70ec:	e7c3      	b.n	7076 <_prf+0x222>
				u.d = (double) va_arg(vargs, double);
    70ee:	3707      	adds	r7, #7
    70f0:	f027 0707 	bic.w	r7, r7, #7
    70f4:	f107 0308 	add.w	r3, r7, #8
				double_temp = u.i;
    70f8:	e9d7 c700 	ldrd	ip, r7, [r7]
				u.d = (double) va_arg(vargs, double);
    70fc:	9305      	str	r3, [sp, #20]
	fract = (double_temp << 11) & ~HIGHBIT64;
    70fe:	02fb      	lsls	r3, r7, #11
    7100:	ea43 535c 	orr.w	r3, r3, ip, lsr #21
    7104:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    7108:	ea4f 22cc 	mov.w	r2, ip, lsl #11
    710c:	460b      	mov	r3, r1
	exp = double_temp >> 52 & 0x7ff;
    710e:	f3c7 580a 	ubfx	r8, r7, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    7112:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if (exp == 0x7ff) {
    7116:	f240 73ff 	movw	r3, #2047	; 0x7ff
	fract = (double_temp << 11) & ~HIGHBIT64;
    711a:	4610      	mov	r0, r2
	if (exp == 0x7ff) {
    711c:	4598      	cmp	r8, r3
	fract = (double_temp << 11) & ~HIGHBIT64;
    711e:	e9cd 0100 	strd	r0, r1, [sp]
	sign = !!(double_temp & HIGHBIT64);
    7122:	4660      	mov	r0, ip
	if (exp == 0x7ff) {
    7124:	d148      	bne.n	71b8 <_prf+0x364>
		if (sign) {
    7126:	2800      	cmp	r0, #0
		if (!fract) {
    7128:	e9dd 1200 	ldrd	r1, r2, [sp]
		if (sign) {
    712c:	f177 0300 	sbcs.w	r3, r7, #0
			*buf++ = '-';
    7130:	bfb8      	it	lt
    7132:	232d      	movlt	r3, #45	; 0x2d
    7134:	a815      	add	r0, sp, #84	; 0x54
    7136:	bfb6      	itet	lt
    7138:	f88d 3054 	strblt.w	r3, [sp, #84]	; 0x54
		if (sign) {
    713c:	4603      	movge	r3, r0
			*buf++ = '-';
    713e:	f10d 0355 	addlt.w	r3, sp, #85	; 0x55
		if (!fract) {
    7142:	430a      	orrs	r2, r1
    7144:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    7148:	f103 0803 	add.w	r8, r3, #3
    714c:	d125      	bne.n	719a <_prf+0x346>
			if (isupper(c)) {
    714e:	2c19      	cmp	r4, #25
    7150:	d81d      	bhi.n	718e <_prf+0x33a>
				*buf++ = 'I';
    7152:	2249      	movs	r2, #73	; 0x49
    7154:	701a      	strb	r2, [r3, #0]
				*buf++ = 'N';
    7156:	224e      	movs	r2, #78	; 0x4e
    7158:	705a      	strb	r2, [r3, #1]
				*buf++ = 'F';
    715a:	2246      	movs	r2, #70	; 0x46
				*buf++ = 'n';
    715c:	709a      	strb	r2, [r3, #2]
		*buf = 0;
    715e:	2200      	movs	r2, #0
    7160:	70da      	strb	r2, [r3, #3]
				if (fplus || fspace || (buf[0] == '-'))
    7162:	9b07      	ldr	r3, [sp, #28]
	return buf - start;
    7164:	eba8 0000 	sub.w	r0, r8, r0
				if (fplus || fspace || (buf[0] == '-'))
    7168:	2b00      	cmp	r3, #0
    716a:	f040 8255 	bne.w	7618 <_prf+0x7c4>
    716e:	f1b9 0f00 	cmp.w	r9, #0
    7172:	d107      	bne.n	7184 <_prf+0x330>
    7174:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
    7178:	f1a1 032d 	sub.w	r3, r1, #45	; 0x2d
    717c:	f1d3 0900 	rsbs	r9, r3, #0
    7180:	eb49 0903 	adc.w	r9, r9, r3
			if (c >= MAXFLD + 1)
    7184:	28c8      	cmp	r0, #200	; 0xc8
    7186:	f73f ae7a 	bgt.w	6e7e <_prf+0x2a>
    718a:	4606      	mov	r6, r0
    718c:	e1b9      	b.n	7502 <_prf+0x6ae>
				*buf++ = 'i';
    718e:	2269      	movs	r2, #105	; 0x69
    7190:	701a      	strb	r2, [r3, #0]
				*buf++ = 'n';
    7192:	226e      	movs	r2, #110	; 0x6e
    7194:	705a      	strb	r2, [r3, #1]
				*buf++ = 'f';
    7196:	2266      	movs	r2, #102	; 0x66
    7198:	e7e0      	b.n	715c <_prf+0x308>
			if (isupper(c)) {
    719a:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    719c:	bf99      	ittee	ls
    719e:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    71a0:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    71a2:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    71a4:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    71a6:	bf94      	ite	ls
    71a8:	701a      	strbls	r2, [r3, #0]
				*buf++ = 'n';
    71aa:	701a      	strbhi	r2, [r3, #0]
				*buf++ = 'a';
    71ac:	7059      	strb	r1, [r3, #1]
    71ae:	e7d5      	b.n	715c <_prf+0x308>
    71b0:	00030b94 	.word	0x00030b94
    71b4:	00030b9a 	.word	0x00030b9a
	if ((exp | fract) != 0) {
    71b8:	e9dd 2300 	ldrd	r2, r3, [sp]
		c = 'f';
    71bc:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
    71be:	ea42 0208 	orr.w	r2, r2, r8
    71c2:	ea43 73e8 	orr.w	r3, r3, r8, asr #31
		c = 'f';
    71c6:	bf08      	it	eq
    71c8:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    71ca:	4313      	orrs	r3, r2
    71cc:	d043      	beq.n	7256 <_prf+0x402>
		fract |= HIGHBIT64;
    71ce:	e9dd 2300 	ldrd	r2, r3, [sp]
	if (decexp && sign) {
    71d2:	2800      	cmp	r0, #0
		fract |= HIGHBIT64;
    71d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    71d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if (decexp && sign) {
    71dc:	f177 0300 	sbcs.w	r3, r7, #0
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    71e0:	f2a8 38fe 	subw	r8, r8, #1022	; 0x3fe
	if (decexp && sign) {
    71e4:	da39      	bge.n	725a <_prf+0x406>
		*buf++ = '-';
    71e6:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    71e8:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    71ec:	f10d 0a55 	add.w	sl, sp, #85	; 0x55
	decexp = 0;
    71f0:	2300      	movs	r3, #0
    71f2:	9300      	str	r3, [sp, #0]
	while (exp <= -3) {
    71f4:	f118 0f02 	cmn.w	r8, #2
    71f8:	db3e      	blt.n	7278 <_prf+0x424>
	while (exp > 0) {
    71fa:	f1b8 0f00 	cmp.w	r8, #0
    71fe:	dc79      	bgt.n	72f4 <_prf+0x4a0>
		_rlrshift(&fract);
    7200:	a810      	add	r0, sp, #64	; 0x40
		exp++;
    7202:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    7206:	f7ff fdc4 	bl	6d92 <_rlrshift>
	while (exp < (0 + 4)) {
    720a:	f1b8 0f04 	cmp.w	r8, #4
    720e:	d1f7      	bne.n	7200 <_prf+0x3ac>
		precision = 6;		/* Default precision if none given */
    7210:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    7212:	f024 0320 	bic.w	r3, r4, #32
		precision = 6;		/* Default precision if none given */
    7216:	bfb8      	it	lt
    7218:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    721a:	2b47      	cmp	r3, #71	; 0x47
    721c:	f040 8097 	bne.w	734e <_prf+0x4fa>
		if (!falt && (precision > 0))
    7220:	2e00      	cmp	r6, #0
    7222:	f040 8092 	bne.w	734a <_prf+0x4f6>
    7226:	1c2b      	adds	r3, r5, #0
    7228:	bf18      	it	ne
    722a:	2301      	movne	r3, #1
	prune_zero = false;		/* Assume trailing 0's allowed     */
    722c:	9308      	str	r3, [sp, #32]
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
    722e:	9b00      	ldr	r3, [sp, #0]
    7230:	3303      	adds	r3, #3
    7232:	db04      	blt.n	723e <_prf+0x3ea>
    7234:	9a00      	ldr	r2, [sp, #0]
    7236:	1c6b      	adds	r3, r5, #1
    7238:	429a      	cmp	r2, r3
    723a:	f340 808d 	ble.w	7358 <_prf+0x504>
				c = 'E';
    723e:	2c67      	cmp	r4, #103	; 0x67
    7240:	bf0c      	ite	eq
    7242:	2465      	moveq	r4, #101	; 0x65
    7244:	2445      	movne	r4, #69	; 0x45
		exp = precision + 1;
    7246:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
    724a:	2310      	movs	r3, #16
    724c:	4598      	cmp	r8, r3
    724e:	930f      	str	r3, [sp, #60]	; 0x3c
    7250:	bfa8      	it	ge
    7252:	4698      	movge	r8, r3
    7254:	e089      	b.n	736a <_prf+0x516>
	if ((exp | fract) != 0) {
    7256:	f04f 0800 	mov.w	r8, #0
	} else if (fplus) {
    725a:	9b07      	ldr	r3, [sp, #28]
    725c:	b10b      	cbz	r3, 7262 <_prf+0x40e>
		*buf++ = '+';
    725e:	232b      	movs	r3, #43	; 0x2b
    7260:	e7c2      	b.n	71e8 <_prf+0x394>
	} else if (fspace) {
    7262:	f1b9 0f00 	cmp.w	r9, #0
    7266:	d001      	beq.n	726c <_prf+0x418>
		*buf++ = ' ';
    7268:	2320      	movs	r3, #32
    726a:	e7bd      	b.n	71e8 <_prf+0x394>
	} else if (fspace) {
    726c:	f10d 0a54 	add.w	sl, sp, #84	; 0x54
    7270:	e7be      	b.n	71f0 <_prf+0x39c>
			_rlrshift(&fract);
    7272:	a810      	add	r0, sp, #64	; 0x40
    7274:	f7ff fd8d 	bl	6d92 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    7278:	e9dd 7c10 	ldrd	r7, ip, [sp, #64]	; 0x40
    727c:	2300      	movs	r3, #0
    727e:	930b      	str	r3, [sp, #44]	; 0x2c
    7280:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    7284:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    7288:	4aa8      	ldr	r2, [pc, #672]	; (752c <_prf+0x6d8>)
    728a:	2300      	movs	r3, #0
    728c:	428b      	cmp	r3, r1
    728e:	bf08      	it	eq
    7290:	4282      	cmpeq	r2, r0
    7292:	f108 0801 	add.w	r8, r8, #1
    7296:	d3ec      	bcc.n	7272 <_prf+0x41e>
		fract *= 5;
    7298:	2205      	movs	r2, #5
    729a:	fba7 0102 	umull	r0, r1, r7, r2
    729e:	e9cd 0108 	strd	r0, r1, [sp, #32]
    72a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    72a4:	fb02 330c 	mla	r3, r2, ip, r3
    72a8:	9309      	str	r3, [sp, #36]	; 0x24
    72aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    72ae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
		decexp--;
    72b2:	9b00      	ldr	r3, [sp, #0]
    72b4:	3b01      	subs	r3, #1
    72b6:	9300      	str	r3, [sp, #0]
    72b8:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    72bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    72be:	2300      	movs	r3, #0
    72c0:	2100      	movs	r1, #0
    72c2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    72c6:	4299      	cmp	r1, r3
    72c8:	bf08      	it	eq
    72ca:	4290      	cmpeq	r0, r2
    72cc:	d207      	bcs.n	72de <_prf+0x48a>
    72ce:	f1bc 0f00 	cmp.w	ip, #0
    72d2:	d08f      	beq.n	71f4 <_prf+0x3a0>
    72d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    72d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    72dc:	e78a      	b.n	71f4 <_prf+0x3a0>
			fract <<= 1;
    72de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    72e2:	1892      	adds	r2, r2, r2
    72e4:	415b      	adcs	r3, r3
    72e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
			exp--;
    72ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    72ee:	f04f 0c01 	mov.w	ip, #1
    72f2:	e7e3      	b.n	72bc <_prf+0x468>
		_ldiv5(&fract);
    72f4:	a810      	add	r0, sp, #64	; 0x40
    72f6:	f7ff fd60 	bl	6dba <_ldiv5>
		decexp++;
    72fa:	9b00      	ldr	r3, [sp, #0]
    72fc:	3301      	adds	r3, #1
    72fe:	9300      	str	r3, [sp, #0]
    7300:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    7304:	e9cd 2308 	strd	r2, r3, [sp, #32]
		exp--;
    7308:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    730c:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    7310:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7312:	2300      	movs	r3, #0
    7314:	2100      	movs	r1, #0
    7316:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    731a:	4299      	cmp	r1, r3
    731c:	bf08      	it	eq
    731e:	4290      	cmpeq	r0, r2
    7320:	d208      	bcs.n	7334 <_prf+0x4e0>
    7322:	f1bc 0f00 	cmp.w	ip, #0
    7326:	f43f af68 	beq.w	71fa <_prf+0x3a6>
    732a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    732e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    7332:	e762      	b.n	71fa <_prf+0x3a6>
			fract <<= 1;
    7334:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    7338:	1892      	adds	r2, r2, r2
    733a:	415b      	adcs	r3, r3
    733c:	e9cd 2308 	strd	r2, r3, [sp, #32]
			exp--;
    7340:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    7344:	f04f 0c01 	mov.w	ip, #1
    7348:	e7e2      	b.n	7310 <_prf+0x4bc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    734a:	2300      	movs	r3, #0
    734c:	e76e      	b.n	722c <_prf+0x3d8>
    734e:	2300      	movs	r3, #0
	if (c == 'f') {
    7350:	2c66      	cmp	r4, #102	; 0x66
	prune_zero = false;		/* Assume trailing 0's allowed     */
    7352:	9308      	str	r3, [sp, #32]
	if (c == 'f') {
    7354:	f47f af77 	bne.w	7246 <_prf+0x3f2>
		if (exp < 0)
    7358:	9b00      	ldr	r3, [sp, #0]
    735a:	eb13 0805 	adds.w	r8, r3, r5
    735e:	d54b      	bpl.n	73f8 <_prf+0x5a4>
	digit_count = 16;
    7360:	2310      	movs	r3, #16
    7362:	930f      	str	r3, [sp, #60]	; 0x3c
    7364:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    7366:	f04f 0800 	mov.w	r8, #0
	ltemp = 0x0800000000000000;
    736a:	a948      	add	r1, sp, #288	; 0x120
    736c:	2200      	movs	r2, #0
    736e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    7372:	e961 2336 	strd	r2, r3, [r1, #-216]!	; 0xd8
	while (exp--) {
    7376:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
    737a:	d23f      	bcs.n	73fc <_prf+0x5a8>
	fract += ltemp;
    737c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    7380:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    7384:	1817      	adds	r7, r2, r0
    7386:	eb43 0801 	adc.w	r8, r3, r1
    738a:	463a      	mov	r2, r7
    738c:	4643      	mov	r3, r8
    738e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if ((fract >> 32) & 0xF0000000) {
    7392:	f008 4270 	and.w	r2, r8, #4026531840	; 0xf0000000
    7396:	2300      	movs	r3, #0
    7398:	4313      	orrs	r3, r2
    739a:	d008      	beq.n	73ae <_prf+0x55a>
		_ldiv5(&fract);
    739c:	a810      	add	r0, sp, #64	; 0x40
    739e:	f7ff fd0c 	bl	6dba <_ldiv5>
		_rlrshift(&fract);
    73a2:	a810      	add	r0, sp, #64	; 0x40
    73a4:	f7ff fcf5 	bl	6d92 <_rlrshift>
		decexp++;
    73a8:	9b00      	ldr	r3, [sp, #0]
    73aa:	3301      	adds	r3, #1
    73ac:	9300      	str	r3, [sp, #0]
	if (c == 'f') {
    73ae:	2c66      	cmp	r4, #102	; 0x66
    73b0:	f10a 0801 	add.w	r8, sl, #1
    73b4:	d140      	bne.n	7438 <_prf+0x5e4>
		if (decexp > 0) {
    73b6:	9b00      	ldr	r3, [sp, #0]
    73b8:	2b00      	cmp	r3, #0
    73ba:	dd29      	ble.n	7410 <_prf+0x5bc>
    73bc:	4453      	add	r3, sl
    73be:	4698      	mov	r8, r3
				*buf++ = _get_digit(&fract, &digit_count);
    73c0:	a90f      	add	r1, sp, #60	; 0x3c
    73c2:	a810      	add	r0, sp, #64	; 0x40
    73c4:	f7ff fd2a 	bl	6e1c <_get_digit>
    73c8:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0) {
    73cc:	45c2      	cmp	sl, r8
    73ce:	d1f7      	bne.n	73c0 <_prf+0x56c>
    73d0:	2300      	movs	r3, #0
    73d2:	9300      	str	r3, [sp, #0]
		if (falt || (precision > 0))
    73d4:	b906      	cbnz	r6, 73d8 <_prf+0x584>
    73d6:	b15d      	cbz	r5, 73f0 <_prf+0x59c>
			*buf++ = '.';
    73d8:	232e      	movs	r3, #46	; 0x2e
    73da:	f888 3000 	strb.w	r3, [r8]
    73de:	4646      	mov	r6, r8
    73e0:	eb08 0305 	add.w	r3, r8, r5
				*buf++ = '0';
    73e4:	f04f 0a30 	mov.w	sl, #48	; 0x30
		while (precision-- > 0) {
    73e8:	42b3      	cmp	r3, r6
    73ea:	d115      	bne.n	7418 <_prf+0x5c4>
    73ec:	3501      	adds	r5, #1
    73ee:	44a8      	add	r8, r5
	if (prune_zero) {
    73f0:	9b08      	ldr	r3, [sp, #32]
    73f2:	2b00      	cmp	r3, #0
    73f4:	d139      	bne.n	746a <_prf+0x616>
    73f6:	e060      	b.n	74ba <_prf+0x666>
		if (exp < 0)
    73f8:	2466      	movs	r4, #102	; 0x66
    73fa:	e726      	b.n	724a <_prf+0x3f6>
		_ldiv5(&ltemp);
    73fc:	4608      	mov	r0, r1
    73fe:	910a      	str	r1, [sp, #40]	; 0x28
    7400:	f7ff fcdb 	bl	6dba <_ldiv5>
		_rlrshift(&ltemp);
    7404:	990a      	ldr	r1, [sp, #40]	; 0x28
    7406:	4608      	mov	r0, r1
    7408:	f7ff fcc3 	bl	6d92 <_rlrshift>
    740c:	990a      	ldr	r1, [sp, #40]	; 0x28
    740e:	e7b2      	b.n	7376 <_prf+0x522>
			*buf++ = '0';
    7410:	2330      	movs	r3, #48	; 0x30
    7412:	f88a 3000 	strb.w	r3, [sl]
    7416:	e7dd      	b.n	73d4 <_prf+0x580>
			if (decexp < 0) {
    7418:	9a00      	ldr	r2, [sp, #0]
    741a:	b12a      	cbz	r2, 7428 <_prf+0x5d4>
				decexp++;
    741c:	3201      	adds	r2, #1
				*buf++ = '0';
    741e:	f886 a001 	strb.w	sl, [r6, #1]
				decexp++;
    7422:	9200      	str	r2, [sp, #0]
    7424:	3601      	adds	r6, #1
    7426:	e7df      	b.n	73e8 <_prf+0x594>
				*buf++ = _get_digit(&fract, &digit_count);
    7428:	a90f      	add	r1, sp, #60	; 0x3c
    742a:	a810      	add	r0, sp, #64	; 0x40
    742c:	930a      	str	r3, [sp, #40]	; 0x28
    742e:	f7ff fcf5 	bl	6e1c <_get_digit>
    7432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7434:	7070      	strb	r0, [r6, #1]
    7436:	e7f5      	b.n	7424 <_prf+0x5d0>
		*buf = _get_digit(&fract, &digit_count);
    7438:	a90f      	add	r1, sp, #60	; 0x3c
    743a:	a810      	add	r0, sp, #64	; 0x40
    743c:	f7ff fcee 	bl	6e1c <_get_digit>
		if (*buf++ != '0')
    7440:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    7442:	bf18      	it	ne
    7444:	9b00      	ldrne	r3, [sp, #0]
		*buf = _get_digit(&fract, &digit_count);
    7446:	f88a 0000 	strb.w	r0, [sl]
			decexp--;
    744a:	bf1c      	itt	ne
    744c:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
    7450:	9300      	strne	r3, [sp, #0]
		if (falt || (precision > 0))
    7452:	b906      	cbnz	r6, 7456 <_prf+0x602>
    7454:	b13d      	cbz	r5, 7466 <_prf+0x612>
			*buf++ = '.';
    7456:	f10a 0802 	add.w	r8, sl, #2
    745a:	232e      	movs	r3, #46	; 0x2e
    745c:	f88a 3001 	strb.w	r3, [sl, #1]
    7460:	4445      	add	r5, r8
		while (precision-- > 0)
    7462:	4545      	cmp	r5, r8
    7464:	d12e      	bne.n	74c4 <_prf+0x670>
	if (prune_zero) {
    7466:	9b08      	ldr	r3, [sp, #32]
    7468:	b143      	cbz	r3, 747c <_prf+0x628>
		while (*--buf == '0')
    746a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
    746e:	2a30      	cmp	r2, #48	; 0x30
    7470:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    7474:	d02d      	beq.n	74d2 <_prf+0x67e>
    7476:	2a2e      	cmp	r2, #46	; 0x2e
    7478:	bf08      	it	eq
    747a:	4698      	moveq	r8, r3
	if ((c == 'e') || (c == 'E')) {
    747c:	f024 0320 	bic.w	r3, r4, #32
    7480:	2b45      	cmp	r3, #69	; 0x45
    7482:	d11a      	bne.n	74ba <_prf+0x666>
		if (decexp < 0) {
    7484:	9b00      	ldr	r3, [sp, #0]
		*buf++ = (char) c;
    7486:	f888 4000 	strb.w	r4, [r8]
		if (decexp < 0) {
    748a:	2b00      	cmp	r3, #0
			decexp = -decexp;
    748c:	bfbb      	ittet	lt
    748e:	425b      	neglt	r3, r3
    7490:	9300      	strlt	r3, [sp, #0]
			*buf++ = '+';
    7492:	232b      	movge	r3, #43	; 0x2b
			*buf++ = '-';
    7494:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    7496:	f888 3001 	strb.w	r3, [r8, #1]
		*buf++ = (char) ((decexp / 10) + '0');
    749a:	220a      	movs	r2, #10
    749c:	9b00      	ldr	r3, [sp, #0]
    749e:	fb93 f3f2 	sdiv	r3, r3, r2
    74a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
    74a6:	f888 1002 	strb.w	r1, [r8, #2]
		decexp %= 10;
    74aa:	9900      	ldr	r1, [sp, #0]
    74ac:	fb02 1713 	mls	r7, r2, r3, r1
		*buf++ = (char) (decexp + '0');
    74b0:	3730      	adds	r7, #48	; 0x30
    74b2:	f888 7003 	strb.w	r7, [r8, #3]
    74b6:	f108 0804 	add.w	r8, r8, #4
	*buf = 0;
    74ba:	2300      	movs	r3, #0
    74bc:	f888 3000 	strb.w	r3, [r8]
	return buf - start;
    74c0:	a815      	add	r0, sp, #84	; 0x54
    74c2:	e64e      	b.n	7162 <_prf+0x30e>
			*buf++ = _get_digit(&fract, &digit_count);
    74c4:	a90f      	add	r1, sp, #60	; 0x3c
    74c6:	a810      	add	r0, sp, #64	; 0x40
    74c8:	f7ff fca8 	bl	6e1c <_get_digit>
    74cc:	f808 0b01 	strb.w	r0, [r8], #1
    74d0:	e7c7      	b.n	7462 <_prf+0x60e>
		while (*--buf == '0')
    74d2:	4698      	mov	r8, r3
    74d4:	e7c9      	b.n	746a <_prf+0x616>
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
    74d6:	1d3b      	adds	r3, r7, #4
    74d8:	9305      	str	r3, [sp, #20]
				*int32ptr_temp = count;
    74da:	683b      	ldr	r3, [r7, #0]
    74dc:	9a04      	ldr	r2, [sp, #16]
    74de:	601a      	str	r2, [r3, #0]
				break;
    74e0:	e4d9      	b.n	6e96 <_prf+0x42>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    74e2:	1d3b      	adds	r3, r7, #4
    74e4:	9305      	str	r3, [sp, #20]
    74e6:	6839      	ldr	r1, [r7, #0]
	if (alt_form) {
    74e8:	b316      	cbz	r6, 7530 <_prf+0x6dc>
		*buf++ = '0';
    74ea:	2330      	movs	r3, #48	; 0x30
    74ec:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (!value) {
    74f0:	bb59      	cbnz	r1, 754a <_prf+0x6f6>
			prefix = 0;
    74f2:	3501      	adds	r5, #1
    74f4:	9b02      	ldr	r3, [sp, #8]
			*buf++ = 0;
    74f6:	f88d 1055 	strb.w	r1, [sp, #85]	; 0x55
			prefix = 0;
    74fa:	bf18      	it	ne
    74fc:	2320      	movne	r3, #32
    74fe:	4689      	mov	r9, r1
    7500:	9302      	str	r3, [sp, #8]
				if (c < width) {
    7502:	9b03      	ldr	r3, [sp, #12]
    7504:	42b3      	cmp	r3, r6
    7506:	f340 8085 	ble.w	7614 <_prf+0x7c0>
					if (fminus)	{
    750a:	9b06      	ldr	r3, [sp, #24]
    750c:	ad15      	add	r5, sp, #84	; 0x54
    750e:	2b00      	cmp	r3, #0
    7510:	d058      	beq.n	75c4 <_prf+0x770>
							buf[i] = ' ';
    7512:	2320      	movs	r3, #32
						for (i = c; i < width; i++)
    7514:	9a03      	ldr	r2, [sp, #12]
							buf[i] = ' ';
    7516:	55ab      	strb	r3, [r5, r6]
						for (i = c; i < width; i++)
    7518:	3601      	adds	r6, #1
    751a:	42b2      	cmp	r2, r6
    751c:	d1fa      	bne.n	7514 <_prf+0x6c0>
    751e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
					if ((*func)(*cptr, dest) == EOF)
    7522:	ac15      	add	r4, sp, #84	; 0x54
    7524:	4413      	add	r3, r2
    7526:	461d      	mov	r5, r3
    7528:	1aa4      	subs	r4, r4, r2
    752a:	e06f      	b.n	760c <_prf+0x7b8>
    752c:	33333332 	.word	0x33333332
	if (alt_form) {
    7530:	a815      	add	r0, sp, #84	; 0x54
	return (buf - buf0) + _to_x(buf, value, 8, precision);
    7532:	f10d 0854 	add.w	r8, sp, #84	; 0x54
    7536:	462b      	mov	r3, r5
    7538:	2208      	movs	r2, #8
    753a:	eba0 0808 	sub.w	r8, r0, r8
    753e:	f7ff fc00 	bl	6d42 <_to_x>
    7542:	4440      	add	r0, r8
			prefix = 0;
    7544:	f04f 0900 	mov.w	r9, #0
    7548:	e595      	b.n	7076 <_prf+0x222>
		*buf++ = '0';
    754a:	f10d 0055 	add.w	r0, sp, #85	; 0x55
    754e:	e7f0      	b.n	7532 <_prf+0x6de>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    7550:	1d3b      	adds	r3, r7, #4
    7552:	9305      	str	r3, [sp, #20]
		*buf++ = '0';
    7554:	f647 0330 	movw	r3, #30768	; 0x7830
    7558:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    755c:	6839      	ldr	r1, [r7, #0]
	len = _to_x(buf, value, 16, precision);
    755e:	2308      	movs	r3, #8
    7560:	2210      	movs	r2, #16
    7562:	f10d 0056 	add.w	r0, sp, #86	; 0x56
    7566:	f7ff fbec 	bl	6d42 <_to_x>
	return len + (buf - buf0);
    756a:	3002      	adds	r0, #2
    756c:	e7ea      	b.n	7544 <_prf+0x6f0>
				if ((precision >= 0) && (precision < c))
    756e:	2d00      	cmp	r5, #0
    7570:	db02      	blt.n	7578 <_prf+0x724>
    7572:	42ae      	cmp	r6, r5
    7574:	bfa8      	it	ge
    7576:	462e      	movge	r6, r5
				if (c > 0) {
    7578:	2e00      	cmp	r6, #0
    757a:	f43f ac8c 	beq.w	6e96 <_prf+0x42>
					memcpy(buf, cptr_temp, (size_t) c);
    757e:	4632      	mov	r2, r6
    7580:	a815      	add	r0, sp, #84	; 0x54
    7582:	f7ff fb81 	bl	6c88 <memcpy>
    7586:	e59c      	b.n	70c2 <_prf+0x26e>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    7588:	1d3b      	adds	r3, r7, #4
    758a:	9305      	str	r3, [sp, #20]
	return _to_x(buf, value, 10, precision);
    758c:	220a      	movs	r2, #10
    758e:	462b      	mov	r3, r5
    7590:	6839      	ldr	r1, [r7, #0]
    7592:	a815      	add	r0, sp, #84	; 0x54
    7594:	f7ff fbd5 	bl	6d42 <_to_x>
    7598:	e7d4      	b.n	7544 <_prf+0x6f0>
	if (alt_form) {
    759a:	af15      	add	r7, sp, #84	; 0x54
    759c:	e527      	b.n	6fee <_prf+0x19a>
		if (*buf >= 'a' && *buf <= 'z') {
    759e:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    75a2:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    75a4:	bf9c      	itt	ls
    75a6:	3b20      	subls	r3, #32
    75a8:	7013      	strbls	r3, [r2, #0]
    75aa:	e529      	b.n	7000 <_prf+0x1ac>
				if ((*func)('%', dest) == EOF) {
    75ac:	990d      	ldr	r1, [sp, #52]	; 0x34
    75ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    75b0:	4620      	mov	r0, r4
    75b2:	4798      	blx	r3
    75b4:	3001      	adds	r0, #1
    75b6:	f43f ac62 	beq.w	6e7e <_prf+0x2a>
				count++;
    75ba:	9b04      	ldr	r3, [sp, #16]
    75bc:	3301      	adds	r3, #1
    75be:	9304      	str	r3, [sp, #16]
			if (c >= MAXFLD + 1)
    75c0:	9705      	str	r7, [sp, #20]
    75c2:	e468      	b.n	6e96 <_prf+0x42>
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    75c4:	9b03      	ldr	r3, [sp, #12]
    75c6:	1b9c      	subs	r4, r3, r6
    75c8:	1c72      	adds	r2, r6, #1
    75ca:	1928      	adds	r0, r5, r4
    75cc:	4629      	mov	r1, r5
    75ce:	f7ff fb44 	bl	6c5a <memmove>
						if (pad == ' ')
    75d2:	9b06      	ldr	r3, [sp, #24]
    75d4:	9a02      	ldr	r2, [sp, #8]
    75d6:	2a20      	cmp	r2, #32
    75d8:	bf18      	it	ne
    75da:	464b      	movne	r3, r9
    75dc:	9306      	str	r3, [sp, #24]
						c = width - c + prefix;
    75de:	441c      	add	r4, r3
						for (i = prefix; i < c; i++)
    75e0:	9b06      	ldr	r3, [sp, #24]
    75e2:	42a3      	cmp	r3, r4
    75e4:	da9b      	bge.n	751e <_prf+0x6ca>
							buf[i] = pad;
    75e6:	9b06      	ldr	r3, [sp, #24]
    75e8:	461a      	mov	r2, r3
    75ea:	9b02      	ldr	r3, [sp, #8]
    75ec:	54ab      	strb	r3, [r5, r2]
						for (i = prefix; i < c; i++)
    75ee:	4613      	mov	r3, r2
    75f0:	3301      	adds	r3, #1
    75f2:	9306      	str	r3, [sp, #24]
    75f4:	e7f4      	b.n	75e0 <_prf+0x78c>
					if ((*func)(*cptr, dest) == EOF)
    75f6:	9b04      	ldr	r3, [sp, #16]
    75f8:	990d      	ldr	r1, [sp, #52]	; 0x34
    75fa:	5ce0      	ldrb	r0, [r4, r3]
    75fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    75fe:	4798      	blx	r3
    7600:	3001      	adds	r0, #1
    7602:	f43f ac3c 	beq.w	6e7e <_prf+0x2a>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
    7606:	9b04      	ldr	r3, [sp, #16]
    7608:	3301      	adds	r3, #1
    760a:	9304      	str	r3, [sp, #16]
    760c:	9b04      	ldr	r3, [sp, #16]
    760e:	42ab      	cmp	r3, r5
    7610:	d1f1      	bne.n	75f6 <_prf+0x7a2>
    7612:	e440      	b.n	6e96 <_prf+0x42>
    7614:	9603      	str	r6, [sp, #12]
    7616:	e782      	b.n	751e <_prf+0x6ca>
					prefix = 1;
    7618:	f8dd 901c 	ldr.w	r9, [sp, #28]
    761c:	e5b2      	b.n	7184 <_prf+0x330>
    761e:	bf00      	nop

00007620 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    7620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7624:	4770      	bx	lr
	...

00007628 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    7628:	4b01      	ldr	r3, [pc, #4]	; (7630 <__stdout_hook_install+0x8>)
    762a:	6018      	str	r0, [r3, #0]
}
    762c:	4770      	bx	lr
    762e:	bf00      	nop
    7630:	2000d770 	.word	0x2000d770

00007634 <bt_hex_real>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex_real(const void *buf, size_t len)
{
    7634:	b570      	push	{r4, r5, r6, lr}
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const u8_t *b = buf;
	int i;

	len = min(len, (sizeof(hex) - 1) / 2);
    7636:	2908      	cmp	r1, #8
    7638:	4a0e      	ldr	r2, [pc, #56]	; (7674 <bt_hex_real+0x40>)

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    763a:	4d0f      	ldr	r5, [pc, #60]	; (7678 <bt_hex_real+0x44>)
    763c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
	len = min(len, (sizeof(hex) - 1) / 2);
    7640:	bf28      	it	cs
    7642:	2108      	movcs	r1, #8
	for (i = 0; i < len; i++) {
    7644:	2300      	movs	r3, #0
    7646:	428b      	cmp	r3, r1
    7648:	d104      	bne.n	7654 <bt_hex_real+0x20>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    764a:	2100      	movs	r1, #0
    764c:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]

	return str;
}
    7650:	4808      	ldr	r0, [pc, #32]	; (7674 <bt_hex_real+0x40>)
    7652:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    7654:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    7658:	0924      	lsrs	r4, r4, #4
		str[i * 2 + 1] = hex[b[i] & 0xf];
    765a:	eb02 0643 	add.w	r6, r2, r3, lsl #1
		str[i * 2]     = hex[b[i] >> 4];
    765e:	5d2c      	ldrb	r4, [r5, r4]
    7660:	f802 4013 	strb.w	r4, [r2, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    7664:	7804      	ldrb	r4, [r0, #0]
    7666:	f004 040f 	and.w	r4, r4, #15
	for (i = 0; i < len; i++) {
    766a:	3301      	adds	r3, #1
		str[i * 2 + 1] = hex[b[i] & 0xf];
    766c:	5d2c      	ldrb	r4, [r5, r4]
    766e:	7074      	strb	r4, [r6, #1]
    7670:	e7e9      	b.n	7646 <bt_hex_real+0x12>
    7672:	bf00      	nop
    7674:	20000a50 	.word	0x20000a50
    7678:	00030be4 	.word	0x00030be4

0000767c <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    767c:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    767e:	7803      	ldrb	r3, [r0, #0]
    7680:	b08b      	sub	sp, #44	; 0x2c
    7682:	4604      	mov	r4, r0
    7684:	ad07      	add	r5, sp, #28
    7686:	2b03      	cmp	r3, #3
    7688:	d821      	bhi.n	76ce <bt_addr_le_str_real+0x52>
    768a:	e8df f003 	tbb	[pc, r3]
    768e:	1a02      	.short	0x1a02
    7690:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    7692:	4912      	ldr	r1, [pc, #72]	; (76dc <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    7694:	4628      	mov	r0, r5
    7696:	f7ff fa69 	bl	6b6c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    769a:	7862      	ldrb	r2, [r4, #1]
    769c:	9204      	str	r2, [sp, #16]
    769e:	78a2      	ldrb	r2, [r4, #2]
    76a0:	9203      	str	r2, [sp, #12]
    76a2:	78e2      	ldrb	r2, [r4, #3]
    76a4:	9202      	str	r2, [sp, #8]
    76a6:	7922      	ldrb	r2, [r4, #4]
    76a8:	9201      	str	r2, [sp, #4]
    76aa:	7962      	ldrb	r2, [r4, #5]
    76ac:	9200      	str	r2, [sp, #0]
    76ae:	79a3      	ldrb	r3, [r4, #6]
    76b0:	9505      	str	r5, [sp, #20]
    76b2:	4a0b      	ldr	r2, [pc, #44]	; (76e0 <bt_addr_le_str_real+0x64>)
    76b4:	480b      	ldr	r0, [pc, #44]	; (76e4 <bt_addr_le_str_real+0x68>)
    76b6:	211b      	movs	r1, #27
    76b8:	f7f9 fef2 	bl	14a0 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    76bc:	4809      	ldr	r0, [pc, #36]	; (76e4 <bt_addr_le_str_real+0x68>)
    76be:	b00b      	add	sp, #44	; 0x2c
    76c0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    76c2:	4909      	ldr	r1, [pc, #36]	; (76e8 <bt_addr_le_str_real+0x6c>)
    76c4:	e7e6      	b.n	7694 <bt_addr_le_str_real+0x18>
		strcpy(type, "public id");
    76c6:	4909      	ldr	r1, [pc, #36]	; (76ec <bt_addr_le_str_real+0x70>)
    76c8:	e7e4      	b.n	7694 <bt_addr_le_str_real+0x18>
		strcpy(type, "random id");
    76ca:	4909      	ldr	r1, [pc, #36]	; (76f0 <bt_addr_le_str_real+0x74>)
    76cc:	e7e2      	b.n	7694 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    76ce:	4a09      	ldr	r2, [pc, #36]	; (76f4 <bt_addr_le_str_real+0x78>)
    76d0:	210a      	movs	r1, #10
    76d2:	4628      	mov	r0, r5
    76d4:	f7f9 fee4 	bl	14a0 <snprintk>
    76d8:	e7df      	b.n	769a <bt_addr_le_str_real+0x1e>
    76da:	bf00      	nop
    76dc:	00030b9f 	.word	0x00030b9f
    76e0:	00030bc1 	.word	0x00030bc1
    76e4:	20000ad1 	.word	0x20000ad1
    76e8:	00030ba6 	.word	0x00030ba6
    76ec:	00030bad 	.word	0x00030bad
    76f0:	00030bb7 	.word	0x00030bb7
    76f4:	00033ba3 	.word	0x00033ba3

000076f8 <ah>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#define LOG_MODULE_NAME bt_rpa
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    76f8:	b530      	push	{r4, r5, lr}
    76fa:	b085      	sub	sp, #20
    76fc:	4604      	mov	r4, r0
    76fe:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    7700:	4668      	mov	r0, sp
    7702:	2203      	movs	r2, #3
    7704:	f7ff fac0 	bl	6c88 <memcpy>
	(void)memset(res + 3, 0, 13);
    7708:	220d      	movs	r2, #13
    770a:	2100      	movs	r1, #0
    770c:	f10d 0003 	add.w	r0, sp, #3
    7710:	f7ff fae7 	bl	6ce2 <memset>

	err = bt_encrypt_le(irk, res, res);
    7714:	4620      	mov	r0, r4
    7716:	466a      	mov	r2, sp
    7718:	4669      	mov	r1, sp
    771a:	f015 fb6f 	bl	1cdfc <bt_encrypt_le>
	if (err) {
    771e:	4604      	mov	r4, r0
    7720:	b920      	cbnz	r0, 772c <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    7722:	2203      	movs	r2, #3
    7724:	4669      	mov	r1, sp
    7726:	4628      	mov	r0, r5
    7728:	f7ff faae 	bl	6c88 <memcpy>

	return 0;
}
    772c:	4620      	mov	r0, r4
    772e:	b005      	add	sp, #20
    7730:	bd30      	pop	{r4, r5, pc}

00007732 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    7732:	b513      	push	{r0, r1, r4, lr}
    7734:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    7736:	aa01      	add	r2, sp, #4
    7738:	3103      	adds	r1, #3
    773a:	f7ff ffdd 	bl	76f8 <ah>
	if (err) {
    773e:	b948      	cbnz	r0, 7754 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    7740:	2203      	movs	r2, #3
    7742:	a901      	add	r1, sp, #4
    7744:	4620      	mov	r0, r4
    7746:	f7ff fa78 	bl	6c3a <memcmp>
    774a:	fab0 f080 	clz	r0, r0
    774e:	0940      	lsrs	r0, r0, #5
}
    7750:	b002      	add	sp, #8
    7752:	bd10      	pop	{r4, pc}
		return false;
    7754:	2000      	movs	r0, #0
    7756:	e7fb      	b.n	7750 <bt_rpa_irk_matches+0x1e>

00007758 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    7758:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    775a:	1ccd      	adds	r5, r1, #3
{
    775c:	4606      	mov	r6, r0
    775e:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    7760:	4628      	mov	r0, r5
    7762:	2103      	movs	r1, #3
    7764:	f015 fb30 	bl	1cdc8 <bt_rand>
	if (err) {
    7768:	b960      	cbnz	r0, 7784 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    776a:	7963      	ldrb	r3, [r4, #5]
    776c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7774:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    7776:	4622      	mov	r2, r4
    7778:	4629      	mov	r1, r5
    777a:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    777c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    7780:	f7ff bfba 	b.w	76f8 <ah>
}
    7784:	bd70      	pop	{r4, r5, r6, pc}
	...

00007788 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    7788:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    778a:	7802      	ldrb	r2, [r0, #0]
    778c:	2a01      	cmp	r2, #1
{
    778e:	4604      	mov	r4, r0
    7790:	460b      	mov	r3, r1
	switch (src->type) {
    7792:	d017      	beq.n	77c4 <uuid_to_uuid128+0x3c>
    7794:	d303      	bcc.n	779e <uuid_to_uuid128+0x16>
    7796:	2a02      	cmp	r2, #2
    7798:	d02c      	beq.n	77f4 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    779a:	bcf0      	pop	{r4, r5, r6, r7}
    779c:	4770      	bx	lr
		*dst = uuid128_base;
    779e:	4a18      	ldr	r2, [pc, #96]	; (7800 <uuid_to_uuid128+0x78>)
    77a0:	460d      	mov	r5, r1
    77a2:	f102 0710 	add.w	r7, r2, #16
    77a6:	6810      	ldr	r0, [r2, #0]
    77a8:	6851      	ldr	r1, [r2, #4]
    77aa:	462e      	mov	r6, r5
    77ac:	c603      	stmia	r6!, {r0, r1}
    77ae:	3208      	adds	r2, #8
    77b0:	42ba      	cmp	r2, r7
    77b2:	4635      	mov	r5, r6
    77b4:	d1f7      	bne.n	77a6 <uuid_to_uuid128+0x1e>
    77b6:	7812      	ldrb	r2, [r2, #0]
    77b8:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    77ba:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    77bc:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    77be:	0a12      	lsrs	r2, r2, #8
    77c0:	739a      	strb	r2, [r3, #14]
    77c2:	e7ea      	b.n	779a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    77c4:	4a0e      	ldr	r2, [pc, #56]	; (7800 <uuid_to_uuid128+0x78>)
    77c6:	460d      	mov	r5, r1
    77c8:	f102 0710 	add.w	r7, r2, #16
    77cc:	6810      	ldr	r0, [r2, #0]
    77ce:	6851      	ldr	r1, [r2, #4]
    77d0:	462e      	mov	r6, r5
    77d2:	c603      	stmia	r6!, {r0, r1}
    77d4:	3208      	adds	r2, #8
    77d6:	42ba      	cmp	r2, r7
    77d8:	4635      	mov	r5, r6
    77da:	d1f7      	bne.n	77cc <uuid_to_uuid128+0x44>
    77dc:	7812      	ldrb	r2, [r2, #0]
    77de:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    77e0:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    77e2:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    77e4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    77e8:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    77ea:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    77ec:	0a12      	lsrs	r2, r2, #8
    77ee:	7399      	strb	r1, [r3, #14]
    77f0:	741a      	strb	r2, [r3, #16]
    77f2:	e7d2      	b.n	779a <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    77f4:	4601      	mov	r1, r0
    77f6:	2211      	movs	r2, #17
    77f8:	4618      	mov	r0, r3
}
    77fa:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    77fc:	f7ff ba44 	b.w	6c88 <memcpy>
    7800:	00030bfc 	.word	0x00030bfc

00007804 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    7804:	b510      	push	{r4, lr}
    7806:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    7808:	7801      	ldrb	r1, [r0, #0]
    780a:	7822      	ldrb	r2, [r4, #0]
    780c:	428a      	cmp	r2, r1
{
    780e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    7810:	d00e      	beq.n	7830 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    7812:	4669      	mov	r1, sp
    7814:	f7ff ffb8 	bl	7788 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    7818:	a905      	add	r1, sp, #20
    781a:	4620      	mov	r0, r4
    781c:	f7ff ffb4 	bl	7788 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    7820:	2210      	movs	r2, #16
    7822:	f10d 0115 	add.w	r1, sp, #21
    7826:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    782a:	f7ff fa06 	bl	6c3a <memcmp>
    782e:	e00a      	b.n	7846 <bt_uuid_cmp+0x42>
	switch (u1->type) {
    7830:	2a01      	cmp	r2, #1
    7832:	d00a      	beq.n	784a <bt_uuid_cmp+0x46>
    7834:	d304      	bcc.n	7840 <bt_uuid_cmp+0x3c>
    7836:	2a02      	cmp	r2, #2
    7838:	d00a      	beq.n	7850 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    783a:	f06f 0015 	mvn.w	r0, #21
    783e:	e002      	b.n	7846 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    7840:	8840      	ldrh	r0, [r0, #2]
    7842:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    7844:	1ac0      	subs	r0, r0, r3
}
    7846:	b00a      	add	sp, #40	; 0x28
    7848:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    784a:	6840      	ldr	r0, [r0, #4]
    784c:	6863      	ldr	r3, [r4, #4]
    784e:	e7f9      	b.n	7844 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    7850:	2210      	movs	r2, #16
    7852:	1c61      	adds	r1, r4, #1
    7854:	3001      	adds	r0, #1
    7856:	e7e8      	b.n	782a <bt_uuid_cmp+0x26>

00007858 <ver_str>:
	return 0;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    7858:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    785a:	4d0b      	ldr	r5, [pc, #44]	; (7888 <ver_str+0x30>)
{
    785c:	4606      	mov	r6, r0
	const char * const str[] = {
    785e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    7860:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    7862:	466c      	mov	r4, sp
    7864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    786a:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    786e:	2e09      	cmp	r6, #9
	const char * const str[] = {
    7870:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    7874:	bf9b      	ittet	ls
    7876:	ab0a      	addls	r3, sp, #40	; 0x28
    7878:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    787c:	4803      	ldrhi	r0, [pc, #12]	; (788c <ver_str+0x34>)
		return str[ver];
    787e:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    7882:	b00a      	add	sp, #40	; 0x28
    7884:	bd70      	pop	{r4, r5, r6, pc}
    7886:	bf00      	nop
    7888:	0002f164 	.word	0x0002f164
    788c:	000317c4 	.word	0x000317c4

00007890 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    7890:	2207      	movs	r2, #7
    7892:	f7ff b9f9 	b.w	6c88 <memcpy>

00007896 <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7896:	f3bf 8f5b 	dmb	ish
    789a:	e850 3f00 	ldrex	r3, [r0]
    789e:	ea43 0201 	orr.w	r2, r3, r1
    78a2:	e840 2c00 	strex	ip, r2, [r0]
    78a6:	f1bc 0f00 	cmp.w	ip, #0
    78aa:	d1f6      	bne.n	789a <atomic_or+0x4>
    78ac:	f3bf 8f5b 	dmb	ish
}
    78b0:	4618      	mov	r0, r3
    78b2:	4770      	bx	lr

000078b4 <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    78b4:	f3bf 8f5b 	dmb	ish
    78b8:	e850 3f00 	ldrex	r3, [r0]
    78bc:	ea03 0201 	and.w	r2, r3, r1
    78c0:	e840 2c00 	strex	ip, r2, [r0]
    78c4:	f1bc 0f00 	cmp.w	ip, #0
    78c8:	d1f6      	bne.n	78b8 <atomic_and+0x4>
    78ca:	f3bf 8f5b 	dmb	ish
}
    78ce:	4618      	mov	r0, r3
    78d0:	4770      	bx	lr
	...

000078d4 <stack_analyze>:
#endif

#if defined(CONFIG_INIT_STACKS) && defined(CONFIG_PRINTK)
static inline void stack_analyze(const char *name, const char *stack,
				 unsigned int size)
{
    78d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	size_t unused = 0;
    78d6:	2300      	movs	r3, #0
	for (i = 0; i < size; i++) {
    78d8:	429a      	cmp	r2, r3
    78da:	d002      	beq.n	78e2 <stack_analyze+0xe>
		if (checked_stack[i] == 0xaaU) {
    78dc:	5ccc      	ldrb	r4, [r1, r3]
    78de:	2caa      	cmp	r4, #170	; 0xaa
    78e0:	d00d      	beq.n	78fe <stack_analyze+0x2a>
	unsigned int pcnt, unused = 0;

	unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	pcnt = ((size - unused) * 100) / size;
    78e2:	1ad4      	subs	r4, r2, r3
    78e4:	2164      	movs	r1, #100	; 0x64
    78e6:	4361      	muls	r1, r4

	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    78e8:	9400      	str	r4, [sp, #0]
	pcnt = ((size - unused) * 100) / size;
    78ea:	fbb1 f1f2 	udiv	r1, r1, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    78ee:	e9cd 2101 	strd	r2, r1, [sp, #4]
    78f2:	4601      	mov	r1, r0
    78f4:	4803      	ldr	r0, [pc, #12]	; (7904 <stack_analyze+0x30>)
    78f6:	f7f9 fdc5 	bl	1484 <printk>
	       size, unused, size - unused, size, pcnt);
}
    78fa:	b004      	add	sp, #16
    78fc:	bd10      	pop	{r4, pc}
			unused++;
    78fe:	3301      	adds	r3, #1
    7900:	e7ea      	b.n	78d8 <stack_analyze+0x4>
    7902:	bf00      	nop
    7904:	00031679 	.word	0x00031679

00007908 <hci_stack_dump>:
{
    7908:	4603      	mov	r3, r0
    790a:	4608      	mov	r0, r1
	stack_analyze((char *)user_data, (char *)thread->stack_info.start,
    790c:	e9d3 1216 	ldrd	r1, r2, [r3, #88]	; 0x58
    7910:	f7ff bfe0 	b.w	78d4 <stack_analyze>

00007914 <update_sec_level>:
{
    7914:	b510      	push	{r4, lr}
	if (!conn->encrypt) {
    7916:	7ac3      	ldrb	r3, [r0, #11]
{
    7918:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    791a:	b913      	cbnz	r3, 7922 <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_LOW;
    791c:	2301      	movs	r3, #1
    791e:	7243      	strb	r3, [r0, #9]
}
    7920:	bd10      	pop	{r4, pc}
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    7922:	6f03      	ldr	r3, [r0, #112]	; 0x70
    7924:	b353      	cbz	r3, 797c <update_sec_level+0x68>
    7926:	7a5a      	ldrb	r2, [r3, #9]
    7928:	07d1      	lsls	r1, r2, #31
    792a:	d527      	bpl.n	797c <update_sec_level+0x68>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    792c:	06d2      	lsls	r2, r2, #27
    792e:	d523      	bpl.n	7978 <update_sec_level+0x64>
    7930:	7a1b      	ldrb	r3, [r3, #8]
    7932:	2b10      	cmp	r3, #16
    7934:	d120      	bne.n	7978 <update_sec_level+0x64>
			conn->sec_level = BT_SECURITY_FIPS;
    7936:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_MEDIUM;
    7938:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    793a:	7aa2      	ldrb	r2, [r4, #10]
    793c:	7a63      	ldrb	r3, [r4, #9]
    793e:	429a      	cmp	r2, r3
    7940:	d9ee      	bls.n	7920 <update_sec_level+0xc>
		BT_ERR("Failed to set required security level");
    7942:	4b0f      	ldr	r3, [pc, #60]	; (7980 <update_sec_level+0x6c>)
    7944:	681b      	ldr	r3, [r3, #0]
    7946:	075b      	lsls	r3, r3, #29
    7948:	d010      	beq.n	796c <update_sec_level+0x58>
    794a:	2301      	movs	r3, #1
    794c:	f04f 0200 	mov.w	r2, #0
    7950:	f363 0202 	bfi	r2, r3, #0, #3
    7954:	490b      	ldr	r1, [pc, #44]	; (7984 <update_sec_level+0x70>)
    7956:	4b0c      	ldr	r3, [pc, #48]	; (7988 <update_sec_level+0x74>)
    7958:	480c      	ldr	r0, [pc, #48]	; (798c <update_sec_level+0x78>)
    795a:	1a5b      	subs	r3, r3, r1
    795c:	f36f 02c5 	bfc	r2, #3, #3
    7960:	08db      	lsrs	r3, r3, #3
    7962:	f363 128f 	bfi	r2, r3, #6, #10
    7966:	490a      	ldr	r1, [pc, #40]	; (7990 <update_sec_level+0x7c>)
    7968:	f7fa fbc0 	bl	20ec <log_1>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    796c:	4620      	mov	r0, r4
    796e:	2105      	movs	r1, #5
}
    7970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    7974:	f003 bce4 	b.w	b340 <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_HIGH;
    7978:	2303      	movs	r3, #3
    797a:	e7dd      	b.n	7938 <update_sec_level+0x24>
		conn->sec_level = BT_SECURITY_MEDIUM;
    797c:	2302      	movs	r3, #2
    797e:	e7db      	b.n	7938 <update_sec_level+0x24>
    7980:	2000e238 	.word	0x2000e238
    7984:	0002ef38 	.word	0x0002ef38
    7988:	0002efb0 	.word	0x0002efb0
    798c:	00031789 	.word	0x00031789
    7990:	00030cfd 	.word	0x00030cfd

00007994 <find_pending_connect>:
{
    7994:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT);
    7996:	2103      	movs	r1, #3
{
    7998:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT);
    799a:	f003 fc1f 	bl	b1dc <bt_conn_lookup_state_le>
	if (conn) {
    799e:	b928      	cbnz	r0, 79ac <find_pending_connect+0x18>
	return bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT_DIR_ADV);
    79a0:	4620      	mov	r0, r4
    79a2:	2102      	movs	r1, #2
}
    79a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT_DIR_ADV);
    79a8:	f003 bc18 	b.w	b1dc <bt_conn_lookup_state_le>
}
    79ac:	bd10      	pop	{r4, pc}
	...

000079b0 <hci_cmd_done>:
{
    79b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79b4:	4606      	mov	r6, r0
    79b6:	b088      	sub	sp, #32
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    79b8:	7990      	ldrb	r0, [r2, #6]
    79ba:	4f35      	ldr	r7, [pc, #212]	; (7a90 <hci_cmd_done+0xe0>)
{
    79bc:	4688      	mov	r8, r1
    79be:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    79c0:	f017 fb84 	bl	1f0cc <net_buf_pool_get>
    79c4:	4287      	cmp	r7, r0
    79c6:	d024      	beq.n	7a12 <hci_cmd_done+0x62>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    79c8:	4b32      	ldr	r3, [pc, #200]	; (7a94 <hci_cmd_done+0xe4>)
    79ca:	681b      	ldr	r3, [r3, #0]
    79cc:	f003 0307 	and.w	r3, r3, #7
    79d0:	2b01      	cmp	r3, #1
    79d2:	d91b      	bls.n	7a0c <hci_cmd_done+0x5c>
    79d4:	2302      	movs	r3, #2
    79d6:	f04f 0400 	mov.w	r4, #0
    79da:	f363 0402 	bfi	r4, r3, #0, #3
    79de:	4a2e      	ldr	r2, [pc, #184]	; (7a98 <hci_cmd_done+0xe8>)
    79e0:	4b2e      	ldr	r3, [pc, #184]	; (7a9c <hci_cmd_done+0xec>)
    79e2:	79a8      	ldrb	r0, [r5, #6]
    79e4:	9005      	str	r0, [sp, #20]
    79e6:	1ad2      	subs	r2, r2, r3
    79e8:	4b2d      	ldr	r3, [pc, #180]	; (7aa0 <hci_cmd_done+0xf0>)
    79ea:	08d2      	lsrs	r2, r2, #3
    79ec:	f36f 04c5 	bfc	r4, #3, #3
    79f0:	f362 148f 	bfi	r4, r2, #6, #10
    79f4:	e9cd 3603 	strd	r3, r6, [sp, #12]
    79f8:	f017 fb68 	bl	1f0cc <net_buf_pool_get>
    79fc:	4623      	mov	r3, r4
    79fe:	e9cd 0706 	strd	r0, r7, [sp, #24]
    7a02:	2205      	movs	r2, #5
    7a04:	a903      	add	r1, sp, #12
    7a06:	4827      	ldr	r0, [pc, #156]	; (7aa4 <hci_cmd_done+0xf4>)
    7a08:	f7fa fbb7 	bl	217a <log_n>
}
    7a0c:	b008      	add	sp, #32
    7a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    7a12:	4628      	mov	r0, r5
    7a14:	f017 fb60 	bl	1f0d8 <net_buf_id>
    7a18:	4c23      	ldr	r4, [pc, #140]	; (7aa8 <hci_cmd_done+0xf8>)
    7a1a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    7a1e:	8843      	ldrh	r3, [r0, #2]
    7a20:	42b3      	cmp	r3, r6
    7a22:	d01f      	beq.n	7a64 <hci_cmd_done+0xb4>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    7a24:	4b1b      	ldr	r3, [pc, #108]	; (7a94 <hci_cmd_done+0xe4>)
    7a26:	681b      	ldr	r3, [r3, #0]
    7a28:	f003 0307 	and.w	r3, r3, #7
    7a2c:	2b01      	cmp	r3, #1
    7a2e:	d919      	bls.n	7a64 <hci_cmd_done+0xb4>
    7a30:	2302      	movs	r3, #2
    7a32:	f04f 0700 	mov.w	r7, #0
    7a36:	4a19      	ldr	r2, [pc, #100]	; (7a9c <hci_cmd_done+0xec>)
    7a38:	f363 0702 	bfi	r7, r3, #0, #3
    7a3c:	4b16      	ldr	r3, [pc, #88]	; (7a98 <hci_cmd_done+0xe8>)
    7a3e:	1a9b      	subs	r3, r3, r2
    7a40:	08db      	lsrs	r3, r3, #3
    7a42:	f36f 07c5 	bfc	r7, #3, #3
    7a46:	4628      	mov	r0, r5
    7a48:	f363 178f 	bfi	r7, r3, #6, #10
    7a4c:	f017 fb44 	bl	1f0d8 <net_buf_id>
    7a50:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    7a54:	4632      	mov	r2, r6
    7a56:	8843      	ldrh	r3, [r0, #2]
    7a58:	4911      	ldr	r1, [pc, #68]	; (7aa0 <hci_cmd_done+0xf0>)
    7a5a:	f8ad 7000 	strh.w	r7, [sp]
    7a5e:	4813      	ldr	r0, [pc, #76]	; (7aac <hci_cmd_done+0xfc>)
    7a60:	f7fa fb70 	bl	2144 <log_3>
	if (cmd(buf)->sync) {
    7a64:	4628      	mov	r0, r5
    7a66:	f017 fb37 	bl	1f0d8 <net_buf_id>
    7a6a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    7a6e:	6843      	ldr	r3, [r0, #4]
    7a70:	2b00      	cmp	r3, #0
    7a72:	d0cb      	beq.n	7a0c <hci_cmd_done+0x5c>
		cmd(buf)->status = status;
    7a74:	4628      	mov	r0, r5
    7a76:	f017 fb2f 	bl	1f0d8 <net_buf_id>
    7a7a:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    7a7e:	4628      	mov	r0, r5
    7a80:	f017 fb2a 	bl	1f0d8 <net_buf_id>
    7a84:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    7a88:	6840      	ldr	r0, [r0, #4]
    7a8a:	f026 fbf6 	bl	2e27a <_impl_k_sem_give>
    7a8e:	e7bd      	b.n	7a0c <hci_cmd_done+0x5c>
    7a90:	2000e4b4 	.word	0x2000e4b4
    7a94:	2000e238 	.word	0x2000e238
    7a98:	0002efb0 	.word	0x0002efb0
    7a9c:	0002ef38 	.word	0x0002ef38
    7aa0:	00030d62 	.word	0x00030d62
    7aa4:	00031505 	.word	0x00031505
    7aa8:	20000aec 	.word	0x20000aec
    7aac:	0003153e 	.word	0x0003153e

00007ab0 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    7ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t id;

	for (id = 0; id < bt_dev.id_count; id++) {
    7ab2:	4e0b      	ldr	r6, [pc, #44]	; (7ae0 <id_find+0x30>)
{
    7ab4:	4607      	mov	r7, r0
	for (id = 0; id < bt_dev.id_count; id++) {
    7ab6:	2500      	movs	r5, #0
    7ab8:	79f3      	ldrb	r3, [r6, #7]
    7aba:	b2ec      	uxtb	r4, r5
    7abc:	42a3      	cmp	r3, r4
    7abe:	d802      	bhi.n	7ac6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    7ac0:	f06f 0401 	mvn.w	r4, #1
    7ac4:	e009      	b.n	7ada <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    7ac6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    7aca:	2207      	movs	r2, #7
    7acc:	4431      	add	r1, r6
    7ace:	4638      	mov	r0, r7
    7ad0:	f7ff f8b3 	bl	6c3a <memcmp>
    7ad4:	3501      	adds	r5, #1
    7ad6:	2800      	cmp	r0, #0
    7ad8:	d1ee      	bne.n	7ab8 <id_find+0x8>
}
    7ada:	4620      	mov	r0, r4
    7adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ade:	bf00      	nop
    7ae0:	2000d778 	.word	0x2000d778

00007ae4 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7ae4:	f3bf 8f5b 	dmb	ish
    7ae8:	6800      	ldr	r0, [r0, #0]
    7aea:	f3bf 8f5b 	dmb	ish
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    7aee:	4108      	asrs	r0, r1
}
    7af0:	f000 0001 	and.w	r0, r0, #1
    7af4:	4770      	bx	lr
	...

00007af8 <slave_update_conn_param>:
{
    7af8:	b508      	push	{r3, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    7afa:	2109      	movs	r1, #9
{
    7afc:	4603      	mov	r3, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    7afe:	3004      	adds	r0, #4
    7b00:	f7ff fff0 	bl	7ae4 <atomic_test_bit>
    7b04:	b940      	cbnz	r0, 7b18 <slave_update_conn_param+0x20>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7b06:	f103 0174 	add.w	r1, r3, #116	; 0x74
    7b0a:	f241 3288 	movw	r2, #5000	; 0x1388
    7b0e:	4803      	ldr	r0, [pc, #12]	; (7b1c <slave_update_conn_param+0x24>)
}
    7b10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7b14:	f026 bdfa 	b.w	2e70c <k_delayed_work_submit_to_queue>
    7b18:	bd08      	pop	{r3, pc}
    7b1a:	bf00      	nop
    7b1c:	200037b0 	.word	0x200037b0

00007b20 <sys_put_le64>:
    7b20:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    7b24:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
    7b26:	0e00      	lsrs	r0, r0, #24
    7b28:	7053      	strb	r3, [r2, #1]
    7b2a:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
    7b2c:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    7b2e:	f3c1 2007 	ubfx	r0, r1, #8, #8
    7b32:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
    7b34:	7093      	strb	r3, [r2, #2]
    7b36:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
    7b38:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
    7b3a:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
    7b3c:	71d1      	strb	r1, [r2, #7]
 */
static inline void sys_put_le64(u64_t val, u8_t dst[8])
{
	sys_put_le32(val, dst);
	sys_put_le32(val >> 32, &dst[4]);
}
    7b3e:	4770      	bx	lr

00007b40 <bt_hci_cmd_create>:
{
    7b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b44:	4680      	mov	r8, r0
    7b46:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    7b48:	4813      	ldr	r0, [pc, #76]	; (7b98 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    7b4a:	4d14      	ldr	r5, [pc, #80]	; (7b9c <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    7b4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7b50:	f017 fb50 	bl	1f1f4 <net_buf_alloc_fixed>
    7b54:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    7b56:	f100 0608 	add.w	r6, r0, #8
    7b5a:	2100      	movs	r1, #0
    7b5c:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    7b5e:	2700      	movs	r7, #0
    7b60:	f017 fb67 	bl	1f232 <net_buf_simple_reserve>
    7b64:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    7b66:	4620      	mov	r0, r4
    7b68:	f017 fab6 	bl	1f0d8 <net_buf_id>
    7b6c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    7b70:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    7b74:	4620      	mov	r0, r4
    7b76:	f017 faaf 	bl	1f0d8 <net_buf_id>
    7b7a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    7b7e:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    7b80:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    7b82:	4630      	mov	r0, r6
    7b84:	f017 fbc4 	bl	1f310 <net_buf_simple_add>
	hdr->param_len = param_len;
    7b88:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    7b8c:	f8a0 8000 	strh.w	r8, [r0]
}
    7b90:	4620      	mov	r0, r4
    7b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b96:	bf00      	nop
    7b98:	2000e4b4 	.word	0x2000e4b4
    7b9c:	20000aec 	.word	0x20000aec

00007ba0 <bt_hci_cmd_send_sync>:
{
    7ba0:	b570      	push	{r4, r5, r6, lr}
    7ba2:	4615      	mov	r5, r2
    7ba4:	b086      	sub	sp, #24
	if (!buf) {
    7ba6:	460c      	mov	r4, r1
    7ba8:	b919      	cbnz	r1, 7bb2 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    7baa:	f7ff ffc9 	bl	7b40 <bt_hci_cmd_create>
		if (!buf) {
    7bae:	4604      	mov	r4, r0
    7bb0:	b368      	cbz	r0, 7c0e <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    7bb2:	2201      	movs	r2, #1
    7bb4:	2100      	movs	r1, #0
    7bb6:	4668      	mov	r0, sp
    7bb8:	f026 fb56 	bl	2e268 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    7bbc:	4620      	mov	r0, r4
    7bbe:	f017 fa8b 	bl	1f0d8 <net_buf_id>
    7bc2:	4e14      	ldr	r6, [pc, #80]	; (7c14 <bt_hci_cmd_send_sync+0x74>)
    7bc4:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    7bc8:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    7bcc:	4620      	mov	r0, r4
    7bce:	f017 fb6f 	bl	1f2b0 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    7bd2:	4621      	mov	r1, r4
    7bd4:	4810      	ldr	r0, [pc, #64]	; (7c18 <bt_hci_cmd_send_sync+0x78>)
    7bd6:	f017 fb30 	bl	1f23a <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    7bda:	f242 7110 	movw	r1, #10000	; 0x2710
    7bde:	4668      	mov	r0, sp
    7be0:	f026 fb72 	bl	2e2c8 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    7be4:	4620      	mov	r0, r4
    7be6:	f017 fa77 	bl	1f0d8 <net_buf_id>
    7bea:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    7bee:	b130      	cbz	r0, 7bfe <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    7bf0:	4620      	mov	r0, r4
    7bf2:	f017 fb2f 	bl	1f254 <net_buf_unref>
		err = -EIO;
    7bf6:	f06f 0004 	mvn.w	r0, #4
}
    7bfa:	b006      	add	sp, #24
    7bfc:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    7bfe:	b10d      	cbz	r5, 7c04 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    7c00:	602c      	str	r4, [r5, #0]
    7c02:	e7fa      	b.n	7bfa <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    7c04:	4620      	mov	r0, r4
    7c06:	f017 fb25 	bl	1f254 <net_buf_unref>
		err = 0;
    7c0a:	4628      	mov	r0, r5
    7c0c:	e7f5      	b.n	7bfa <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    7c0e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    7c12:	e7f2      	b.n	7bfa <bt_hci_cmd_send_sync+0x5a>
    7c14:	20000aec 	.word	0x20000aec
    7c18:	2000d83c 	.word	0x2000d83c

00007c1c <hci_id_add>:
{
    7c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c1e:	4607      	mov	r7, r0
    7c20:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    7c22:	f242 0027 	movw	r0, #8231	; 0x2027
    7c26:	2127      	movs	r1, #39	; 0x27
    7c28:	f7ff ff8a 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    7c2c:	4604      	mov	r4, r0
    7c2e:	b1d0      	cbz	r0, 7c66 <hci_id_add+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
    7c30:	2127      	movs	r1, #39	; 0x27
    7c32:	3008      	adds	r0, #8
    7c34:	f017 fb6c 	bl	1f310 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    7c38:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
    7c3a:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    7c3c:	f7ff fe28 	bl	7890 <bt_addr_le_copy>
	memcpy(cp->peer_irk, val, 16);
    7c40:	4631      	mov	r1, r6
    7c42:	2210      	movs	r2, #16
    7c44:	1de8      	adds	r0, r5, #7
    7c46:	f7ff f81f 	bl	6c88 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
    7c4a:	2210      	movs	r2, #16
    7c4c:	2100      	movs	r1, #0
    7c4e:	f105 0017 	add.w	r0, r5, #23
    7c52:	f7ff f846 	bl	6ce2 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    7c56:	4621      	mov	r1, r4
    7c58:	2200      	movs	r2, #0
    7c5a:	f242 0027 	movw	r0, #8231	; 0x2027
}
    7c5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    7c62:	f7ff bf9d 	b.w	7ba0 <bt_hci_cmd_send_sync>
}
    7c66:	f06f 0036 	mvn.w	r0, #54	; 0x36
    7c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007c6c <keys_add_id>:
	hci_id_add(&keys->addr, keys->irk.val);
    7c6c:	f100 0126 	add.w	r1, r0, #38	; 0x26
    7c70:	3001      	adds	r0, #1
    7c72:	f7ff bfd3 	b.w	7c1c <hci_id_add>

00007c76 <addr_res_enable>:
{
    7c76:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
    7c78:	2101      	movs	r1, #1
{
    7c7a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
    7c7c:	f242 002d 	movw	r0, #8237	; 0x202d
    7c80:	f7ff ff5e 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    7c84:	4604      	mov	r4, r0
    7c86:	b158      	cbz	r0, 7ca0 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
    7c88:	4629      	mov	r1, r5
    7c8a:	3008      	adds	r0, #8
    7c8c:	f017 fb4f 	bl	1f32e <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
    7c90:	4621      	mov	r1, r4
    7c92:	2200      	movs	r2, #0
    7c94:	f242 002d 	movw	r0, #8237	; 0x202d
}
    7c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
    7c9c:	f7ff bf80 	b.w	7ba0 <bt_hci_cmd_send_sync>
}
    7ca0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    7ca4:	bd38      	pop	{r3, r4, r5, pc}
	...

00007ca8 <set_le_scan_enable>:
{
    7ca8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    7caa:	2102      	movs	r1, #2
{
    7cac:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    7cae:	f242 000c 	movw	r0, #8204	; 0x200c
    7cb2:	f7ff ff45 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    7cb6:	4604      	mov	r4, r0
    7cb8:	b330      	cbz	r0, 7d08 <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    7cba:	2102      	movs	r1, #2
    7cbc:	3008      	adds	r0, #8
    7cbe:	f017 fb27 	bl	1f310 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    7cc2:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    7cc4:	4603      	mov	r3, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    7cc6:	d116      	bne.n	7cf6 <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    7cc8:	210d      	movs	r1, #13
    7cca:	4811      	ldr	r0, [pc, #68]	; (7d10 <set_le_scan_enable+0x68>)
    7ccc:	f7ff ff0a 	bl	7ae4 <atomic_test_bit>
    7cd0:	7058      	strb	r0, [r3, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    7cd2:	4621      	mov	r1, r4
	cp->enable = enable;
    7cd4:	701d      	strb	r5, [r3, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    7cd6:	2200      	movs	r2, #0
    7cd8:	f242 000c 	movw	r0, #8204	; 0x200c
    7cdc:	f7ff ff60 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    7ce0:	4604      	mov	r4, r0
    7ce2:	b930      	cbnz	r0, 7cf2 <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    7ce4:	2d01      	cmp	r5, #1
    7ce6:	d109      	bne.n	7cfc <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7ce8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    7cec:	4808      	ldr	r0, [pc, #32]	; (7d10 <set_le_scan_enable+0x68>)
    7cee:	f7ff fdd2 	bl	7896 <atomic_or>
}
    7cf2:	4620      	mov	r0, r4
    7cf4:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    7cf6:	2200      	movs	r2, #0
    7cf8:	7042      	strb	r2, [r0, #1]
    7cfa:	e7ea      	b.n	7cd2 <set_le_scan_enable+0x2a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7cfc:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    7d00:	4803      	ldr	r0, [pc, #12]	; (7d10 <set_le_scan_enable+0x68>)
    7d02:	f7ff fdd7 	bl	78b4 <atomic_and>
    7d06:	e7f4      	b.n	7cf2 <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    7d08:	f06f 0436 	mvn.w	r4, #54	; 0x36
    7d0c:	e7f1      	b.n	7cf2 <set_le_scan_enable+0x4a>
    7d0e:	bf00      	nop
    7d10:	2000d7e8 	.word	0x2000d7e8

00007d14 <set_advertise_enable>:
{
    7d14:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    7d16:	2101      	movs	r1, #1
{
    7d18:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    7d1a:	f242 000a 	movw	r0, #8202	; 0x200a
    7d1e:	f7ff ff0f 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    7d22:	4604      	mov	r4, r0
    7d24:	b1d8      	cbz	r0, 7d5e <set_advertise_enable+0x4a>
    7d26:	3008      	adds	r0, #8
	if (enable) {
    7d28:	b18d      	cbz	r5, 7d4e <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    7d2a:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    7d2c:	f017 faff 	bl	1f32e <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    7d30:	4621      	mov	r1, r4
    7d32:	2200      	movs	r2, #0
    7d34:	f242 000a 	movw	r0, #8202	; 0x200a
    7d38:	f7ff ff32 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    7d3c:	4604      	mov	r4, r0
    7d3e:	b920      	cbnz	r0, 7d4a <set_advertise_enable+0x36>
	if (enable) {
    7d40:	b13d      	cbz	r5, 7d52 <set_advertise_enable+0x3e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7d42:	2140      	movs	r1, #64	; 0x40
    7d44:	4807      	ldr	r0, [pc, #28]	; (7d64 <set_advertise_enable+0x50>)
    7d46:	f7ff fda6 	bl	7896 <atomic_or>
}
    7d4a:	4620      	mov	r0, r4
    7d4c:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    7d4e:	4629      	mov	r1, r5
    7d50:	e7ec      	b.n	7d2c <set_advertise_enable+0x18>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7d52:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7d56:	4803      	ldr	r0, [pc, #12]	; (7d64 <set_advertise_enable+0x50>)
    7d58:	f7ff fdac 	bl	78b4 <atomic_and>
    7d5c:	e7f5      	b.n	7d4a <set_advertise_enable+0x36>
		return -ENOBUFS;
    7d5e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    7d62:	e7f2      	b.n	7d4a <set_advertise_enable+0x36>
    7d64:	2000d7e8 	.word	0x2000d7e8

00007d68 <set_random_address>:
{
    7d68:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    7d6a:	4d15      	ldr	r5, [pc, #84]	; (7dc0 <set_random_address+0x58>)
    7d6c:	2206      	movs	r2, #6
    7d6e:	f105 010a 	add.w	r1, r5, #10
    7d72:	4606      	mov	r6, r0
    7d74:	f7fe ff61 	bl	6c3a <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    7d78:	4604      	mov	r4, r0
    7d7a:	b1d8      	cbz	r0, 7db4 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    7d7c:	2106      	movs	r1, #6
    7d7e:	f242 0005 	movw	r0, #8197	; 0x2005
    7d82:	f7ff fedd 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    7d86:	4604      	mov	r4, r0
    7d88:	b1b0      	cbz	r0, 7db8 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    7d8a:	2206      	movs	r2, #6
    7d8c:	4631      	mov	r1, r6
    7d8e:	3008      	adds	r0, #8
    7d90:	f017 fac4 	bl	1f31c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    7d94:	4621      	mov	r1, r4
    7d96:	2200      	movs	r2, #0
    7d98:	f242 0005 	movw	r0, #8197	; 0x2005
    7d9c:	f7ff ff00 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    7da0:	4604      	mov	r4, r0
    7da2:	b938      	cbnz	r0, 7db4 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    7da4:	2206      	movs	r2, #6
    7da6:	4631      	mov	r1, r6
    7da8:	f105 000a 	add.w	r0, r5, #10
    7dac:	f7fe ff6c 	bl	6c88 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    7db0:	2301      	movs	r3, #1
    7db2:	726b      	strb	r3, [r5, #9]
}
    7db4:	4620      	mov	r0, r4
    7db6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    7db8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    7dbc:	e7fa      	b.n	7db4 <set_random_address+0x4c>
    7dbe:	bf00      	nop
    7dc0:	2000d778 	.word	0x2000d778

00007dc4 <le_set_private_addr.isra.26>:
static int le_set_private_addr(u8_t id)
    7dc4:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    7dc6:	2106      	movs	r1, #6
    7dc8:	4668      	mov	r0, sp
    7dca:	f014 fffd 	bl	1cdc8 <bt_rand>
	if (err) {
    7dce:	b940      	cbnz	r0, 7de2 <le_set_private_addr.isra.26+0x1e>
	nrpa.val[5] &= 0x3f;
    7dd0:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    7dd4:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    7dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7dda:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    7dde:	f7ff ffc3 	bl	7d68 <set_random_address>
}
    7de2:	b003      	add	sp, #12
    7de4:	f85d fb04 	ldr.w	pc, [sp], #4

00007de8 <set_ad>:
{
    7de8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7dec:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    7dee:	2120      	movs	r1, #32
{
    7df0:	4682      	mov	sl, r0
    7df2:	4691      	mov	r9, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    7df4:	f7ff fea4 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    7df8:	4607      	mov	r7, r0
    7dfa:	2800      	cmp	r0, #0
    7dfc:	d05e      	beq.n	7ebc <set_ad+0xd4>
	set_data = net_buf_add(buf, sizeof(*set_data));
    7dfe:	2120      	movs	r1, #32
    7e00:	3008      	adds	r0, #8
    7e02:	f017 fa85 	bl	1f310 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    7e06:	2220      	movs	r2, #32
    7e08:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    7e0a:	4605      	mov	r5, r0
	(void)memset(set_data, 0, sizeof(*set_data));
    7e0c:	f7fe ff69 	bl	6ce2 <memset>
    7e10:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
	for (c = 0; c < ad_len; c++) {
    7e14:	45a1      	cmp	r9, r4
    7e16:	d106      	bne.n	7e26 <set_ad+0x3e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    7e18:	4639      	mov	r1, r7
    7e1a:	4650      	mov	r0, sl
    7e1c:	2200      	movs	r2, #0
}
    7e1e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    7e22:	f7ff bebd 	b.w	7ba0 <bt_hci_cmd_send_sync>
    7e26:	6826      	ldr	r6, [r4, #0]
		for (i = 0; i < ad[c].len; i++) {
    7e28:	f04f 0b00 	mov.w	fp, #0
    7e2c:	6863      	ldr	r3, [r4, #4]
    7e2e:	455b      	cmp	r3, fp
    7e30:	d801      	bhi.n	7e36 <set_ad+0x4e>
    7e32:	3408      	adds	r4, #8
    7e34:	e7ee      	b.n	7e14 <set_ad+0x2c>
			int len = data[i].data_len;
    7e36:	7872      	ldrb	r2, [r6, #1]
			if (set_data->len + len + 2 > 31) {
    7e38:	782b      	ldrb	r3, [r5, #0]
			u8_t type = data[i].type;
    7e3a:	7831      	ldrb	r1, [r6, #0]
			if (set_data->len + len + 2 > 31) {
    7e3c:	1898      	adds	r0, r3, r2
    7e3e:	3002      	adds	r0, #2
    7e40:	281f      	cmp	r0, #31
    7e42:	dd20      	ble.n	7e86 <set_ad+0x9e>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    7e44:	2909      	cmp	r1, #9
				len = 31 - (set_data->len + 2);
    7e46:	f1c3 021d 	rsb	r2, r3, #29
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    7e4a:	d100      	bne.n	7e4e <set_ad+0x66>
    7e4c:	b9d2      	cbnz	r2, 7e84 <set_ad+0x9c>
					net_buf_unref(buf);
    7e4e:	4638      	mov	r0, r7
    7e50:	f017 fa00 	bl	1f254 <net_buf_unref>
					BT_ERR("Too big advertising data");
    7e54:	4b1b      	ldr	r3, [pc, #108]	; (7ec4 <set_ad+0xdc>)
    7e56:	681b      	ldr	r3, [r3, #0]
    7e58:	075b      	lsls	r3, r3, #29
    7e5a:	d010      	beq.n	7e7e <set_ad+0x96>
    7e5c:	2301      	movs	r3, #1
    7e5e:	f04f 0200 	mov.w	r2, #0
    7e62:	f363 0202 	bfi	r2, r3, #0, #3
    7e66:	4918      	ldr	r1, [pc, #96]	; (7ec8 <set_ad+0xe0>)
    7e68:	4b18      	ldr	r3, [pc, #96]	; (7ecc <set_ad+0xe4>)
    7e6a:	4819      	ldr	r0, [pc, #100]	; (7ed0 <set_ad+0xe8>)
    7e6c:	1a5b      	subs	r3, r3, r1
    7e6e:	f36f 02c5 	bfc	r2, #3, #3
    7e72:	08db      	lsrs	r3, r3, #3
    7e74:	f363 128f 	bfi	r2, r3, #6, #10
    7e78:	4916      	ldr	r1, [pc, #88]	; (7ed4 <set_ad+0xec>)
    7e7a:	f7fa f937 	bl	20ec <log_1>
					return -EINVAL;
    7e7e:	f06f 0015 	mvn.w	r0, #21
    7e82:	e01d      	b.n	7ec0 <set_ad+0xd8>
				type = BT_DATA_NAME_SHORTENED;
    7e84:	2108      	movs	r1, #8
			set_data->data[set_data->len++] = len + 1;
    7e86:	fa5f f882 	uxtb.w	r8, r2
    7e8a:	18e8      	adds	r0, r5, r3
    7e8c:	f108 0c01 	add.w	ip, r8, #1
    7e90:	f880 c001 	strb.w	ip, [r0, #1]
			set_data->data[set_data->len++] = type;
    7e94:	1c98      	adds	r0, r3, #2
			set_data->data[set_data->len++] = len + 1;
    7e96:	3301      	adds	r3, #1
			set_data->data[set_data->len++] = type;
    7e98:	fa55 f383 	uxtab	r3, r5, r3
    7e9c:	b2c0      	uxtb	r0, r0
    7e9e:	7028      	strb	r0, [r5, #0]
    7ea0:	7059      	strb	r1, [r3, #1]
			memcpy(&set_data->data[set_data->len], data[i].data,
    7ea2:	3001      	adds	r0, #1
    7ea4:	6871      	ldr	r1, [r6, #4]
    7ea6:	4428      	add	r0, r5
    7ea8:	f7fe feee 	bl	6c88 <memcpy>
			set_data->len += len;
    7eac:	782b      	ldrb	r3, [r5, #0]
    7eae:	4498      	add	r8, r3
    7eb0:	f885 8000 	strb.w	r8, [r5]
		for (i = 0; i < ad[c].len; i++) {
    7eb4:	f10b 0b01 	add.w	fp, fp, #1
    7eb8:	3608      	adds	r6, #8
    7eba:	e7b7      	b.n	7e2c <set_ad+0x44>
		return -ENOBUFS;
    7ebc:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    7ec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ec4:	2000e238 	.word	0x2000e238
    7ec8:	0002ef38 	.word	0x0002ef38
    7ecc:	0002efb0 	.word	0x0002efb0
    7ed0:	0003165c 	.word	0x0003165c
    7ed4:	00030dfe 	.word	0x00030dfe

00007ed8 <le_adv_update>:
}

static int le_adv_update(const struct bt_data *ad, size_t ad_len,
			 const struct bt_data *sd, size_t sd_len,
			 bool connectable, bool use_name)
{
    7ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7edc:	b086      	sub	sp, #24
	struct bt_ad d[2] = {};
	int err;

	d[0].data = ad;
	d[0].len = ad_len;
    7ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
{
    7ee2:	4615      	mov	r5, r2
    7ee4:	461e      	mov	r6, r3

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    7ee6:	2201      	movs	r2, #1
	struct bt_ad d[2] = {};
    7ee8:	2300      	movs	r3, #0
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    7eea:	a902      	add	r1, sp, #8
    7eec:	f242 0008 	movw	r0, #8200	; 0x2008
{
    7ef0:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    7ef4:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
	struct bt_ad d[2] = {};
    7ef8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    7efc:	f7ff ff74 	bl	7de8 <set_ad>
	if (err) {
    7f00:	4604      	mov	r4, r0
    7f02:	bb10      	cbnz	r0, 7f4a <le_adv_update+0x72>
		return err;
	}

	d[0].data = sd;
	d[0].len = sd_len;
    7f04:	e9cd 5602 	strd	r5, r6, [sp, #8]

	if (use_name) {
    7f08:	f1b8 0f00 	cmp.w	r8, #0
    7f0c:	d011      	beq.n	7f32 <le_adv_update+0x5a>
		const char *name;

		if (sd) {
    7f0e:	b115      	cbz	r5, 7f16 <le_adv_update+0x3e>
	for (i = 0; i < ad_len; i++) {
    7f10:	4602      	mov	r2, r0
    7f12:	42b2      	cmp	r2, r6
    7f14:	d11d      	bne.n	7f52 <le_adv_update+0x7a>
			}
		}

		name = bt_get_name();

		d[1].data = (&(struct bt_data)BT_DATA(
    7f16:	4d14      	ldr	r5, [pc, #80]	; (7f68 <le_adv_update+0x90>)
    7f18:	2309      	movs	r3, #9
    7f1a:	4628      	mov	r0, r5
    7f1c:	f88d 3000 	strb.w	r3, [sp]
    7f20:	f7fe fe5c 	bl	6bdc <strlen>
					BT_DATA_NAME_COMPLETE,
					name, strlen(name)));
		d[1].len = 1;
    7f24:	2301      	movs	r3, #1
		d[1].data = (&(struct bt_data)BT_DATA(
    7f26:	f88d 0001 	strb.w	r0, [sp, #1]
    7f2a:	9501      	str	r5, [sp, #4]
    7f2c:	f8cd d010 	str.w	sp, [sp, #16]
		d[1].len = 1;
    7f30:	9305      	str	r3, [sp, #20]
	 * by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and
	 * zero len.
	 * So following condition check is unusual but correct.
	 */
	if (d[0].data || d[1].data || connectable) {
    7f32:	9b02      	ldr	r3, [sp, #8]
    7f34:	b913      	cbnz	r3, 7f3c <le_adv_update+0x64>
    7f36:	9b04      	ldr	r3, [sp, #16]
    7f38:	b903      	cbnz	r3, 7f3c <le_adv_update+0x64>
    7f3a:	b137      	cbz	r7, 7f4a <le_adv_update+0x72>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, d, 2);
    7f3c:	2202      	movs	r2, #2
    7f3e:	a902      	add	r1, sp, #8
    7f40:	f242 0009 	movw	r0, #8201	; 0x2009
    7f44:	f7ff ff50 	bl	7de8 <set_ad>
    7f48:	4604      	mov	r4, r0
			return err;
		}
	}

	return 0;
}
    7f4a:	4620      	mov	r0, r4
    7f4c:	b006      	add	sp, #24
    7f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    7f52:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
    7f56:	3908      	subs	r1, #8
    7f58:	2901      	cmp	r1, #1
    7f5a:	d901      	bls.n	7f60 <le_adv_update+0x88>
	for (i = 0; i < ad_len; i++) {
    7f5c:	3201      	adds	r2, #1
    7f5e:	e7d8      	b.n	7f12 <le_adv_update+0x3a>
				return -EINVAL;
    7f60:	f06f 0415 	mvn.w	r4, #21
    7f64:	e7f1      	b.n	7f4a <le_adv_update+0x72>
    7f66:	bf00      	nop
    7f68:	000315f0 	.word	0x000315f0

00007f6c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    7f6c:	8802      	ldrh	r2, [r0, #0]
    7f6e:	8843      	ldrh	r3, [r0, #2]
    7f70:	429a      	cmp	r2, r3
{
    7f72:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    7f74:	d818      	bhi.n	7fa8 <bt_le_conn_params_valid+0x3c>
    7f76:	2a05      	cmp	r2, #5
    7f78:	d916      	bls.n	7fa8 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    7f7a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    7f7e:	d813      	bhi.n	7fa8 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    7f80:	8884      	ldrh	r4, [r0, #4]
    7f82:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    7f86:	d20f      	bcs.n	7fa8 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    7f88:	88c1      	ldrh	r1, [r0, #6]
    7f8a:	f1a1 020a 	sub.w	r2, r1, #10
    7f8e:	b292      	uxth	r2, r2
    7f90:	f640 4076 	movw	r0, #3190	; 0xc76
    7f94:	4282      	cmp	r2, r0
    7f96:	d807      	bhi.n	7fa8 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    7f98:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    7f9c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    7fa0:	bfb4      	ite	lt
    7fa2:	2001      	movlt	r0, #1
    7fa4:	2000      	movge	r0, #0
}
    7fa6:	bd10      	pop	{r4, pc}
		return false;
    7fa8:	2000      	movs	r0, #0
    7faa:	e7fc      	b.n	7fa6 <bt_le_conn_params_valid+0x3a>

00007fac <bt_id_add>:
{
    7fac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    7fb0:	4d85      	ldr	r5, [pc, #532]	; (81c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c8>)
    7fb2:	f895 20a4 	ldrb.w	r2, [r5, #164]	; 0xa4
    7fb6:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
{
    7fba:	4607      	mov	r7, r0
    7fbc:	462c      	mov	r4, r5
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    7fbe:	b10a      	cbz	r2, 7fc4 <bt_id_add+0x18>
    7fc0:	429a      	cmp	r2, r3
    7fc2:	d205      	bcs.n	7fd0 <bt_id_add+0x24>
		bt_dev.le.rl_entries++;
    7fc4:	3301      	adds	r3, #1
    7fc6:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
}
    7fca:	b002      	add	sp, #8
    7fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    7fd0:	2103      	movs	r1, #3
    7fd2:	2000      	movs	r0, #0
    7fd4:	f003 f902 	bl	b1dc <bt_conn_lookup_state_le>
	if (conn) {
    7fd8:	4606      	mov	r6, r0
    7fda:	b168      	cbz	r0, 7ff8 <bt_id_add+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7fdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    7fe0:	f105 0070 	add.w	r0, r5, #112	; 0x70
    7fe4:	f7ff fc57 	bl	7896 <atomic_or>
		keys->flags |= BT_KEYS_ID_PENDING_ADD;
    7fe8:	7a7b      	ldrb	r3, [r7, #9]
    7fea:	f043 0304 	orr.w	r3, r3, #4
    7fee:	727b      	strb	r3, [r7, #9]
		bt_conn_unref(conn);
    7ff0:	4630      	mov	r0, r6
    7ff2:	f003 f915 	bl	b220 <bt_conn_unref>
		return;
    7ff6:	e7e8      	b.n	7fca <bt_id_add+0x1e>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    7ff8:	f105 0070 	add.w	r0, r5, #112	; 0x70
    7ffc:	2106      	movs	r1, #6
    7ffe:	f7ff fd71 	bl	7ae4 <atomic_test_bit>
	if (adv_enabled) {
    8002:	4605      	mov	r5, r0
    8004:	b110      	cbz	r0, 800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
		set_advertise_enable(false);
    8006:	4630      	mov	r0, r6
    8008:	f7ff fe84 	bl	7d14 <set_advertise_enable>
	scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
    800c:	210a      	movs	r1, #10
    800e:	486f      	ldr	r0, [pc, #444]	; (81cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cc>)
    8010:	f7ff fd68 	bl	7ae4 <atomic_test_bit>
	if (scan_enabled) {
    8014:	4606      	mov	r6, r0
    8016:	b110      	cbz	r0, 801e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    8018:	2000      	movs	r0, #0
    801a:	f7ff fe45 	bl	7ca8 <set_le_scan_enable>
	if (bt_dev.le.rl_entries) {
    801e:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    8022:	b1db      	cbz	r3, 805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    8024:	2000      	movs	r0, #0
    8026:	f7ff fe26 	bl	7c76 <addr_res_enable>
		if (err) {
    802a:	b1b8      	cbz	r0, 805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>
			BT_WARN("Failed to disable address resolution");
    802c:	4b68      	ldr	r3, [pc, #416]	; (81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>)
    802e:	681b      	ldr	r3, [r3, #0]
    8030:	f003 0307 	and.w	r3, r3, #7
    8034:	2b01      	cmp	r3, #1
    8036:	d94d      	bls.n	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
    8038:	2302      	movs	r3, #2
    803a:	f04f 0200 	mov.w	r2, #0
    803e:	f363 0202 	bfi	r2, r3, #0, #3
    8042:	4964      	ldr	r1, [pc, #400]	; (81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>)
    8044:	4b64      	ldr	r3, [pc, #400]	; (81d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d8>)
    8046:	4865      	ldr	r0, [pc, #404]	; (81dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1dc>)
    8048:	1a5b      	subs	r3, r3, r1
    804a:	f36f 02c5 	bfc	r2, #3, #3
    804e:	08db      	lsrs	r3, r3, #3
    8050:	4963      	ldr	r1, [pc, #396]	; (81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>)
    8052:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Failed to set privacy mode");
    8056:	f7fa f849 	bl	20ec <log_1>
    805a:	e03b      	b.n	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    805c:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    8060:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    8064:	429a      	cmp	r2, r3
    8066:	d143      	bne.n	80f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf0>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    8068:	4f59      	ldr	r7, [pc, #356]	; (81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>)
    806a:	683b      	ldr	r3, [r7, #0]
    806c:	f003 0307 	and.w	r3, r3, #7
    8070:	2b01      	cmp	r3, #1
    8072:	d910      	bls.n	8096 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x96>
    8074:	2302      	movs	r3, #2
    8076:	f04f 0200 	mov.w	r2, #0
    807a:	f363 0202 	bfi	r2, r3, #0, #3
    807e:	4955      	ldr	r1, [pc, #340]	; (81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>)
    8080:	4b55      	ldr	r3, [pc, #340]	; (81d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d8>)
    8082:	4858      	ldr	r0, [pc, #352]	; (81e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e4>)
    8084:	1a5b      	subs	r3, r3, r1
    8086:	f36f 02c5 	bfc	r2, #3, #3
    808a:	08db      	lsrs	r3, r3, #3
    808c:	f363 128f 	bfi	r2, r3, #6, #10
    8090:	4953      	ldr	r1, [pc, #332]	; (81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>)
    8092:	f7fa f82b 	bl	20ec <log_1>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    8096:	2200      	movs	r2, #0
    8098:	4611      	mov	r1, r2
    809a:	f242 0029 	movw	r0, #8233	; 0x2029
    809e:	f7ff fd7f 	bl	7ba0 <bt_hci_cmd_send_sync>
		if (err) {
    80a2:	b190      	cbz	r0, 80ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca>
			BT_ERR("Failed to clear resolution list");
    80a4:	683b      	ldr	r3, [r7, #0]
    80a6:	0759      	lsls	r1, r3, #29
    80a8:	d014      	beq.n	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
    80aa:	2301      	movs	r3, #1
    80ac:	f04f 0200 	mov.w	r2, #0
    80b0:	f363 0202 	bfi	r2, r3, #0, #3
    80b4:	4947      	ldr	r1, [pc, #284]	; (81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>)
    80b6:	4b48      	ldr	r3, [pc, #288]	; (81d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d8>)
    80b8:	484b      	ldr	r0, [pc, #300]	; (81e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e8>)
    80ba:	1a5b      	subs	r3, r3, r1
    80bc:	f36f 02c5 	bfc	r2, #3, #3
    80c0:	08db      	lsrs	r3, r3, #3
    80c2:	f363 128f 	bfi	r2, r3, #6, #10
    80c6:	4946      	ldr	r1, [pc, #280]	; (81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>)
    80c8:	e7c5      	b.n	8056 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x56>
		bt_dev.le.rl_entries++;
    80ca:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    80ce:	3301      	adds	r3, #1
    80d0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    80d4:	2001      	movs	r0, #1
    80d6:	f7ff fdce 	bl	7c76 <addr_res_enable>
	if (scan_enabled) {
    80da:	b116      	cbz	r6, 80e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe2>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    80dc:	2001      	movs	r0, #1
    80de:	f7ff fde3 	bl	7ca8 <set_le_scan_enable>
	if (adv_enabled) {
    80e2:	2d00      	cmp	r5, #0
    80e4:	f43f af71 	beq.w	7fca <bt_id_add+0x1e>
		set_advertise_enable(true);
    80e8:	2001      	movs	r0, #1
    80ea:	f7ff fe13 	bl	7d14 <set_advertise_enable>
    80ee:	e76c      	b.n	7fca <bt_id_add+0x1e>
	err = hci_id_add(&keys->addr, keys->irk.val);
    80f0:	f107 0801 	add.w	r8, r7, #1
    80f4:	f107 0126 	add.w	r1, r7, #38	; 0x26
    80f8:	4640      	mov	r0, r8
    80fa:	f7ff fd8f 	bl	7c1c <hci_id_add>
	if (err) {
    80fe:	4607      	mov	r7, r0
    8100:	b198      	cbz	r0, 812a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12a>
		BT_ERR("Failed to add IRK to controller");
    8102:	4b33      	ldr	r3, [pc, #204]	; (81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>)
    8104:	681b      	ldr	r3, [r3, #0]
    8106:	075a      	lsls	r2, r3, #29
    8108:	d0e4      	beq.n	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
    810a:	2301      	movs	r3, #1
    810c:	f04f 0200 	mov.w	r2, #0
    8110:	f363 0202 	bfi	r2, r3, #0, #3
    8114:	492f      	ldr	r1, [pc, #188]	; (81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>)
    8116:	4b30      	ldr	r3, [pc, #192]	; (81d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d8>)
    8118:	4834      	ldr	r0, [pc, #208]	; (81ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ec>)
    811a:	1a5b      	subs	r3, r3, r1
    811c:	f36f 02c5 	bfc	r2, #3, #3
    8120:	08db      	lsrs	r3, r3, #3
    8122:	f363 128f 	bfi	r2, r3, #6, #10
    8126:	492e      	ldr	r1, [pc, #184]	; (81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>)
    8128:	e795      	b.n	8056 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x56>
	bt_dev.le.rl_entries++;
    812a:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    812e:	3301      	adds	r3, #1
    8130:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    8134:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    8138:	f013 0304 	ands.w	r3, r3, #4
    813c:	d115      	bne.n	816a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a>
		BT_WARN("Set privacy mode command is not supported");
    813e:	4a24      	ldr	r2, [pc, #144]	; (81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>)
    8140:	6812      	ldr	r2, [r2, #0]
    8142:	f002 0207 	and.w	r2, r2, #7
    8146:	2a01      	cmp	r2, #1
    8148:	d9c4      	bls.n	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
    814a:	2102      	movs	r1, #2
    814c:	f04f 0200 	mov.w	r2, #0
    8150:	f361 0202 	bfi	r2, r1, #0, #3
    8154:	f363 02c5 	bfi	r2, r3, #3, #3
    8158:	491e      	ldr	r1, [pc, #120]	; (81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>)
    815a:	4b1f      	ldr	r3, [pc, #124]	; (81d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d8>)
    815c:	4824      	ldr	r0, [pc, #144]	; (81f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f0>)
    815e:	1a5b      	subs	r3, r3, r1
    8160:	08db      	lsrs	r3, r3, #3
    8162:	f363 128f 	bfi	r2, r3, #6, #10
    8166:	4923      	ldr	r1, [pc, #140]	; (81f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f4>)
    8168:	e775      	b.n	8056 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x56>
	bt_addr_le_copy(&cp.id_addr, addr);
    816a:	4641      	mov	r1, r8
    816c:	4668      	mov	r0, sp
    816e:	f7ff fb8f 	bl	7890 <bt_addr_le_copy>
	cp.mode = mode;
    8172:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    8174:	2108      	movs	r1, #8
    8176:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    817a:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    817e:	f7ff fcdf 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    8182:	4604      	mov	r4, r0
    8184:	b160      	cbz	r0, 81a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a0>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    8186:	2208      	movs	r2, #8
    8188:	4669      	mov	r1, sp
    818a:	4410      	add	r0, r2
    818c:	f017 f8c6 	bl	1f31c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    8190:	463a      	mov	r2, r7
    8192:	4621      	mov	r1, r4
    8194:	f242 004e 	movw	r0, #8270	; 0x204e
    8198:	f7ff fd02 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    819c:	2800      	cmp	r0, #0
    819e:	d099      	beq.n	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
		BT_ERR("Failed to set privacy mode");
    81a0:	4b0b      	ldr	r3, [pc, #44]	; (81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>)
    81a2:	681b      	ldr	r3, [r3, #0]
    81a4:	075b      	lsls	r3, r3, #29
    81a6:	d095      	beq.n	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
    81a8:	2301      	movs	r3, #1
    81aa:	f04f 0200 	mov.w	r2, #0
    81ae:	f363 0202 	bfi	r2, r3, #0, #3
    81b2:	4908      	ldr	r1, [pc, #32]	; (81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>)
    81b4:	4b08      	ldr	r3, [pc, #32]	; (81d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d8>)
    81b6:	4810      	ldr	r0, [pc, #64]	; (81f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f8>)
    81b8:	1a5b      	subs	r3, r3, r1
    81ba:	f36f 02c5 	bfc	r2, #3, #3
    81be:	08db      	lsrs	r3, r3, #3
    81c0:	f363 128f 	bfi	r2, r3, #6, #10
    81c4:	4906      	ldr	r1, [pc, #24]	; (81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>)
    81c6:	e746      	b.n	8056 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x56>
    81c8:	2000d778 	.word	0x2000d778
    81cc:	2000d7e8 	.word	0x2000d7e8
    81d0:	2000e238 	.word	0x2000e238
    81d4:	0002ef38 	.word	0x0002ef38
    81d8:	0002efb0 	.word	0x0002efb0
    81dc:	00030f31 	.word	0x00030f31
    81e0:	00030ce9 	.word	0x00030ce9
    81e4:	00030f5a 	.word	0x00030f5a
    81e8:	00030f8f 	.word	0x00030f8f
    81ec:	00030fb3 	.word	0x00030fb3
    81f0:	00030fd7 	.word	0x00030fd7
    81f4:	00030cd5 	.word	0x00030cd5
    81f8:	00031005 	.word	0x00031005

000081fc <bt_id_del>:
{
    81fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    8200:	4d55      	ldr	r5, [pc, #340]	; (8358 <bt_id_del+0x15c>)
    8202:	f895 20a4 	ldrb.w	r2, [r5, #164]	; 0xa4
    8206:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
{
    820a:	4606      	mov	r6, r0
    820c:	462c      	mov	r4, r5
	if (!bt_dev.le.rl_size ||
    820e:	b112      	cbz	r2, 8216 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    8210:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    8212:	4293      	cmp	r3, r2
    8214:	dd04      	ble.n	8220 <bt_id_del+0x24>
		bt_dev.le.rl_entries--;
    8216:	3b01      	subs	r3, #1
    8218:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
}
    821c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    8220:	2103      	movs	r1, #3
    8222:	2000      	movs	r0, #0
    8224:	f002 ffda 	bl	b1dc <bt_conn_lookup_state_le>
	if (conn) {
    8228:	4680      	mov	r8, r0
    822a:	b170      	cbz	r0, 824a <bt_id_del+0x4e>
    822c:	f105 0070 	add.w	r0, r5, #112	; 0x70
    8230:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8234:	f7ff fb2f 	bl	7896 <atomic_or>
		keys->flags |= BT_KEYS_ID_PENDING_DEL;
    8238:	7a73      	ldrb	r3, [r6, #9]
    823a:	f043 0308 	orr.w	r3, r3, #8
    823e:	7273      	strb	r3, [r6, #9]
		bt_conn_unref(conn);
    8240:	4640      	mov	r0, r8
}
    8242:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    8246:	f002 bfeb 	b.w	b220 <bt_conn_unref>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    824a:	2106      	movs	r1, #6
    824c:	f105 0070 	add.w	r0, r5, #112	; 0x70
    8250:	f7ff fc48 	bl	7ae4 <atomic_test_bit>
	if (adv_enabled) {
    8254:	4607      	mov	r7, r0
    8256:	b110      	cbz	r0, 825e <bt_id_del+0x62>
		set_advertise_enable(false);
    8258:	4640      	mov	r0, r8
    825a:	f7ff fd5b 	bl	7d14 <set_advertise_enable>
	scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
    825e:	210a      	movs	r1, #10
    8260:	483e      	ldr	r0, [pc, #248]	; (835c <bt_id_del+0x160>)
    8262:	f7ff fc3f 	bl	7ae4 <atomic_test_bit>
	if (scan_enabled) {
    8266:	4680      	mov	r8, r0
    8268:	b110      	cbz	r0, 8270 <bt_id_del+0x74>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    826a:	2000      	movs	r0, #0
    826c:	f7ff fd1c 	bl	7ca8 <set_le_scan_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    8270:	2000      	movs	r0, #0
    8272:	f7ff fd00 	bl	7c76 <addr_res_enable>
	if (err) {
    8276:	4605      	mov	r5, r0
    8278:	b340      	cbz	r0, 82cc <bt_id_del+0xd0>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    827a:	4b39      	ldr	r3, [pc, #228]	; (8360 <bt_id_del+0x164>)
    827c:	681b      	ldr	r3, [r3, #0]
    827e:	075a      	lsls	r2, r3, #29
    8280:	d011      	beq.n	82a6 <bt_id_del+0xaa>
    8282:	2201      	movs	r2, #1
    8284:	f04f 0300 	mov.w	r3, #0
    8288:	f362 0302 	bfi	r3, r2, #0, #3
    828c:	4935      	ldr	r1, [pc, #212]	; (8364 <bt_id_del+0x168>)
    828e:	4a36      	ldr	r2, [pc, #216]	; (8368 <bt_id_del+0x16c>)
    8290:	1a52      	subs	r2, r2, r1
    8292:	08d2      	lsrs	r2, r2, #3
    8294:	f36f 03c5 	bfc	r3, #3, #3
    8298:	f362 138f 	bfi	r3, r2, #6, #10
    829c:	4933      	ldr	r1, [pc, #204]	; (836c <bt_id_del+0x170>)
    829e:	4602      	mov	r2, r0
    82a0:	4833      	ldr	r0, [pc, #204]	; (8370 <bt_id_del+0x174>)
    82a2:	f7f9 ff37 	bl	2114 <log_2>
	if (bt_dev.le.rl_entries) {
    82a6:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    82aa:	b113      	cbz	r3, 82b2 <bt_id_del+0xb6>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    82ac:	2001      	movs	r0, #1
    82ae:	f7ff fce2 	bl	7c76 <addr_res_enable>
	if (scan_enabled) {
    82b2:	f1b8 0f00 	cmp.w	r8, #0
    82b6:	d002      	beq.n	82be <bt_id_del+0xc2>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    82b8:	2001      	movs	r0, #1
    82ba:	f7ff fcf5 	bl	7ca8 <set_le_scan_enable>
	if (adv_enabled) {
    82be:	2f00      	cmp	r7, #0
    82c0:	d0ac      	beq.n	821c <bt_id_del+0x20>
		set_advertise_enable(true);
    82c2:	2001      	movs	r0, #1
}
    82c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		set_advertise_enable(true);
    82c8:	f7ff bd24 	b.w	7d14 <set_advertise_enable>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    82cc:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    82d0:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
    82d4:	429a      	cmp	r2, r3
    82d6:	d20c      	bcs.n	82f2 <bt_id_del+0xf6>
		bt_dev.le.rl_entries--;
    82d8:	3b01      	subs	r3, #1
    82da:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		keys->keys &= ~BT_KEYS_IRK;
    82de:	8973      	ldrh	r3, [r6, #10]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    82e0:	4924      	ldr	r1, [pc, #144]	; (8374 <bt_id_del+0x178>)
		keys->keys &= ~BT_KEYS_IRK;
    82e2:	f023 0302 	bic.w	r3, r3, #2
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    82e6:	4602      	mov	r2, r0
		keys->keys &= ~BT_KEYS_IRK;
    82e8:	8173      	strh	r3, [r6, #10]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    82ea:	2002      	movs	r0, #2
    82ec:	f008 ff46 	bl	1117c <bt_keys_foreach>
    82f0:	e7d9      	b.n	82a6 <bt_id_del+0xaa>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    82f2:	2107      	movs	r1, #7
    82f4:	f242 0028 	movw	r0, #8232	; 0x2028
    82f8:	f7ff fc22 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    82fc:	4681      	mov	r9, r0
    82fe:	2800      	cmp	r0, #0
    8300:	d0d1      	beq.n	82a6 <bt_id_del+0xaa>
	cp = net_buf_add(buf, sizeof(*cp));
    8302:	2107      	movs	r1, #7
    8304:	3008      	adds	r0, #8
    8306:	f017 f803 	bl	1f310 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, &keys->addr);
    830a:	1c71      	adds	r1, r6, #1
    830c:	f7ff fac0 	bl	7890 <bt_addr_le_copy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    8310:	462a      	mov	r2, r5
    8312:	4649      	mov	r1, r9
    8314:	f242 0028 	movw	r0, #8232	; 0x2028
    8318:	f7ff fc42 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    831c:	b1a8      	cbz	r0, 834a <bt_id_del+0x14e>
		BT_ERR("Failed to remove IRK from controller");
    831e:	4b10      	ldr	r3, [pc, #64]	; (8360 <bt_id_del+0x164>)
    8320:	681b      	ldr	r3, [r3, #0]
    8322:	075b      	lsls	r3, r3, #29
    8324:	d0bf      	beq.n	82a6 <bt_id_del+0xaa>
    8326:	2301      	movs	r3, #1
    8328:	f04f 0200 	mov.w	r2, #0
    832c:	f363 0202 	bfi	r2, r3, #0, #3
    8330:	490c      	ldr	r1, [pc, #48]	; (8364 <bt_id_del+0x168>)
    8332:	4b0d      	ldr	r3, [pc, #52]	; (8368 <bt_id_del+0x16c>)
    8334:	4810      	ldr	r0, [pc, #64]	; (8378 <bt_id_del+0x17c>)
    8336:	1a5b      	subs	r3, r3, r1
    8338:	f365 02c5 	bfi	r2, r5, #3, #3
    833c:	08db      	lsrs	r3, r3, #3
    833e:	f363 128f 	bfi	r2, r3, #6, #10
    8342:	490a      	ldr	r1, [pc, #40]	; (836c <bt_id_del+0x170>)
    8344:	f7f9 fed2 	bl	20ec <log_1>
    8348:	e7ad      	b.n	82a6 <bt_id_del+0xaa>
	bt_dev.le.rl_entries--;
    834a:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    834e:	3b01      	subs	r3, #1
    8350:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
    8354:	e7a7      	b.n	82a6 <bt_id_del+0xaa>
    8356:	bf00      	nop
    8358:	2000d778 	.word	0x2000d778
    835c:	2000d7e8 	.word	0x2000d7e8
    8360:	2000e238 	.word	0x2000e238
    8364:	0002ef38 	.word	0x0002ef38
    8368:	0002efb0 	.word	0x0002efb0
    836c:	00030cf3 	.word	0x00030cf3
    8370:	00031056 	.word	0x00031056
    8374:	00007c6d 	.word	0x00007c6d
    8378:	00031087 	.word	0x00031087

0000837c <update_pending_id>:
	if (keys->flags & BT_KEYS_ID_PENDING_ADD) {
    837c:	7a43      	ldrb	r3, [r0, #9]
    837e:	0759      	lsls	r1, r3, #29
    8380:	d504      	bpl.n	838c <update_pending_id+0x10>
		keys->flags &= ~BT_KEYS_ID_PENDING_ADD;
    8382:	f023 0304 	bic.w	r3, r3, #4
    8386:	7243      	strb	r3, [r0, #9]
		bt_id_add(keys);
    8388:	f7ff be10 	b.w	7fac <bt_id_add>
	if (keys->flags & BT_KEYS_ID_PENDING_DEL) {
    838c:	0719      	lsls	r1, r3, #28
    838e:	d504      	bpl.n	839a <update_pending_id+0x1e>
		keys->flags &= ~BT_KEYS_ID_PENDING_DEL;
    8390:	f023 0308 	bic.w	r3, r3, #8
    8394:	7243      	strb	r3, [r0, #9]
		bt_id_del(keys);
    8396:	f7ff bf31 	b.w	81fc <bt_id_del>
}
    839a:	4770      	bx	lr

0000839c <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    839c:	2301      	movs	r3, #1
{
    839e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    83a0:	2106      	movs	r1, #6
{
    83a2:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    83a4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    83a8:	f014 fd0e 	bl	1cdc8 <bt_rand>
	if (err) {
    83ac:	b918      	cbnz	r0, 83b6 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    83ae:	79a3      	ldrb	r3, [r4, #6]
    83b0:	f063 033f 	orn	r3, r3, #63	; 0x3f
    83b4:	71a3      	strb	r3, [r4, #6]
}
    83b6:	bd10      	pop	{r4, pc}

000083b8 <id_create.isra.30>:
static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    83b8:	b530      	push	{r4, r5, lr}
    83ba:	4d14      	ldr	r5, [pc, #80]	; (840c <id_create.isra.30+0x54>)
    83bc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    83c0:	b085      	sub	sp, #20
    83c2:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    83c4:	460c      	mov	r4, r1
    83c6:	b179      	cbz	r1, 83e8 <id_create.isra.30+0x30>
    83c8:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    83ca:	2207      	movs	r2, #7
    83cc:	4669      	mov	r1, sp
    83ce:	4620      	mov	r0, r4
    83d0:	9300      	str	r3, [sp, #0]
    83d2:	f8cd 3003 	str.w	r3, [sp, #3]
    83d6:	f7fe fc30 	bl	6c3a <memcmp>
    83da:	b128      	cbz	r0, 83e8 <id_create.isra.30+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    83dc:	4621      	mov	r1, r4
    83de:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    83e0:	f7ff fa56 	bl	7890 <bt_addr_le_copy>
}
    83e4:	b005      	add	sp, #20
    83e6:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    83e8:	a802      	add	r0, sp, #8
    83ea:	f7ff ffd7 	bl	839c <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    83ee:	a802      	add	r0, sp, #8
    83f0:	f7ff fb5e 	bl	7ab0 <id_find>
    83f4:	2800      	cmp	r0, #0
    83f6:	daf7      	bge.n	83e8 <id_create.isra.30+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    83f8:	a902      	add	r1, sp, #8
    83fa:	4628      	mov	r0, r5
    83fc:	f7ff fa48 	bl	7890 <bt_addr_le_copy>
		if (addr) {
    8400:	2c00      	cmp	r4, #0
    8402:	d0ef      	beq.n	83e4 <id_create.isra.30+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    8404:	4629      	mov	r1, r5
    8406:	4620      	mov	r0, r4
    8408:	e7ea      	b.n	83e0 <id_create.isra.30+0x28>
    840a:	bf00      	nop
    840c:	2000d778 	.word	0x2000d778

00008410 <bt_dev_show_info>:
{
    8410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8414:	4b48      	ldr	r3, [pc, #288]	; (8538 <bt_dev_show_info+0x128>)
    8416:	4d49      	ldr	r5, [pc, #292]	; (853c <bt_dev_show_info+0x12c>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    8418:	4f49      	ldr	r7, [pc, #292]	; (8540 <bt_dev_show_info+0x130>)
    841a:	4c4a      	ldr	r4, [pc, #296]	; (8544 <bt_dev_show_info+0x134>)
    841c:	1aed      	subs	r5, r5, r3
    841e:	683b      	ldr	r3, [r7, #0]
    8420:	f003 0307 	and.w	r3, r3, #7
    8424:	2b02      	cmp	r3, #2
{
    8426:	b089      	sub	sp, #36	; 0x24
    8428:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    842c:	d91e      	bls.n	846c <bt_dev_show_info+0x5c>
    842e:	2303      	movs	r3, #3
    8430:	f04f 0600 	mov.w	r6, #0
    8434:	4a44      	ldr	r2, [pc, #272]	; (8548 <bt_dev_show_info+0x138>)
    8436:	f894 9007 	ldrb.w	r9, [r4, #7]
    843a:	f363 0602 	bfi	r6, r3, #0, #3
    843e:	4b43      	ldr	r3, [pc, #268]	; (854c <bt_dev_show_info+0x13c>)
    8440:	4620      	mov	r0, r4
    8442:	f1b9 0f01 	cmp.w	r9, #1
    8446:	bf94      	ite	ls
    8448:	4691      	movls	r9, r2
    844a:	4699      	movhi	r9, r3
    844c:	f7ff f916 	bl	767c <bt_addr_le_str_real>
    8450:	f7f9 ffde 	bl	2410 <log_strdup>
    8454:	f36f 06c5 	bfc	r6, #3, #3
    8458:	f365 168f 	bfi	r6, r5, #6, #10
    845c:	4603      	mov	r3, r0
    845e:	f8ad 6000 	strh.w	r6, [sp]
    8462:	464a      	mov	r2, r9
    8464:	493a      	ldr	r1, [pc, #232]	; (8550 <bt_dev_show_info+0x140>)
    8466:	483b      	ldr	r0, [pc, #236]	; (8554 <bt_dev_show_info+0x144>)
    8468:	f7f9 fe6c 	bl	2144 <log_3>
		BT_INFO("Identity[%d]: %s",
    846c:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8550 <bt_dev_show_info+0x140>
    8470:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8560 <bt_dev_show_info+0x150>
{
    8474:	2601      	movs	r6, #1
		BT_INFO("Identity[%d]: %s",
    8476:	f04f 0903 	mov.w	r9, #3
	for (i = 1; i < bt_dev.id_count; i++) {
    847a:	79e2      	ldrb	r2, [r4, #7]
    847c:	683b      	ldr	r3, [r7, #0]
    847e:	42b2      	cmp	r2, r6
    8480:	f003 0307 	and.w	r3, r3, #7
    8484:	dc3e      	bgt.n	8504 <bt_dev_show_info+0xf4>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    8486:	2b02      	cmp	r3, #2
    8488:	d91b      	bls.n	84c2 <bt_dev_show_info+0xb2>
    848a:	f894 8010 	ldrb.w	r8, [r4, #16]
    848e:	2303      	movs	r3, #3
    8490:	f04f 0600 	mov.w	r6, #0
    8494:	f363 0602 	bfi	r6, r3, #0, #3
    8498:	4640      	mov	r0, r8
    849a:	4b2d      	ldr	r3, [pc, #180]	; (8550 <bt_dev_show_info+0x140>)
    849c:	9303      	str	r3, [sp, #12]
    849e:	f7ff f9db 	bl	7858 <ver_str>
    84a2:	f36f 06c5 	bfc	r6, #3, #3
    84a6:	8a63      	ldrh	r3, [r4, #18]
    84a8:	9306      	str	r3, [sp, #24]
    84aa:	f365 168f 	bfi	r6, r5, #6, #10
    84ae:	8ae3      	ldrh	r3, [r4, #22]
    84b0:	9307      	str	r3, [sp, #28]
    84b2:	e9cd 0804 	strd	r0, r8, [sp, #16]
    84b6:	4633      	mov	r3, r6
    84b8:	2205      	movs	r2, #5
    84ba:	a903      	add	r1, sp, #12
    84bc:	4826      	ldr	r0, [pc, #152]	; (8558 <bt_dev_show_info+0x148>)
    84be:	f7f9 fe5c 	bl	217a <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    84c2:	683b      	ldr	r3, [r7, #0]
    84c4:	f003 0307 	and.w	r3, r3, #7
    84c8:	2b02      	cmp	r3, #2
    84ca:	d918      	bls.n	84fe <bt_dev_show_info+0xee>
    84cc:	2303      	movs	r3, #3
    84ce:	f04f 0600 	mov.w	r6, #0
    84d2:	f363 0602 	bfi	r6, r3, #0, #3
    84d6:	f36f 06c5 	bfc	r6, #3, #3
    84da:	f365 168f 	bfi	r6, r5, #6, #10
    84de:	7c65      	ldrb	r5, [r4, #17]
    84e0:	4b1b      	ldr	r3, [pc, #108]	; (8550 <bt_dev_show_info+0x140>)
    84e2:	9303      	str	r3, [sp, #12]
    84e4:	4628      	mov	r0, r5
    84e6:	f7ff f9b7 	bl	7858 <ver_str>
    84ea:	8aa3      	ldrh	r3, [r4, #20]
    84ec:	9306      	str	r3, [sp, #24]
    84ee:	e9cd 0504 	strd	r0, r5, [sp, #16]
    84f2:	4633      	mov	r3, r6
    84f4:	2204      	movs	r2, #4
    84f6:	a903      	add	r1, sp, #12
    84f8:	4818      	ldr	r0, [pc, #96]	; (855c <bt_dev_show_info+0x14c>)
    84fa:	f7f9 fe3e 	bl	217a <log_n>
}
    84fe:	b009      	add	sp, #36	; 0x24
    8500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_INFO("Identity[%d]: %s",
    8504:	2b02      	cmp	r3, #2
    8506:	d914      	bls.n	8532 <bt_dev_show_info+0x122>
    8508:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
    850c:	4420      	add	r0, r4
    850e:	f7ff f8b5 	bl	767c <bt_addr_le_str_real>
    8512:	f7f9 ff7d 	bl	2410 <log_strdup>
    8516:	f369 0802 	bfi	r8, r9, #0, #3
    851a:	f36f 08c5 	bfc	r8, #3, #3
    851e:	f365 188f 	bfi	r8, r5, #6, #10
    8522:	4603      	mov	r3, r0
    8524:	f8ad 8000 	strh.w	r8, [sp]
    8528:	4632      	mov	r2, r6
    852a:	4651      	mov	r1, sl
    852c:	4658      	mov	r0, fp
    852e:	f7f9 fe09 	bl	2144 <log_3>
	for (i = 1; i < bt_dev.id_count; i++) {
    8532:	3601      	adds	r6, #1
    8534:	e7a1      	b.n	847a <bt_dev_show_info+0x6a>
    8536:	bf00      	nop
    8538:	0002ef38 	.word	0x0002ef38
    853c:	0002efb0 	.word	0x0002efb0
    8540:	2000e238 	.word	0x2000e238
    8544:	2000d778 	.word	0x2000d778
    8548:	0002f21b 	.word	0x0002f21b
    854c:	00030e35 	.word	0x00030e35
    8550:	00030db9 	.word	0x00030db9
    8554:	00030e39 	.word	0x00030e39
    8558:	00030e61 	.word	0x00030e61
    855c:	00030ea3 	.word	0x00030ea3
    8560:	00030e4c 	.word	0x00030e4c

00008564 <bt_send>:
	return bt_dev.drv->send(buf);
    8564:	4b02      	ldr	r3, [pc, #8]	; (8570 <bt_send+0xc>)
    8566:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    856a:	691b      	ldr	r3, [r3, #16]
    856c:	4718      	bx	r3
    856e:	bf00      	nop
    8570:	2000d778 	.word	0x2000d778

00008574 <bt_hci_cmd_send>:
{
    8574:	b538      	push	{r3, r4, r5, lr}
    8576:	4604      	mov	r4, r0
	if (!buf) {
    8578:	460d      	mov	r5, r1
    857a:	b919      	cbnz	r1, 8584 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    857c:	f7ff fae0 	bl	7b40 <bt_hci_cmd_create>
		if (!buf) {
    8580:	4605      	mov	r5, r0
    8582:	b348      	cbz	r0, 85d8 <bt_hci_cmd_send+0x64>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    8584:	f640 4335 	movw	r3, #3125	; 0xc35
    8588:	429c      	cmp	r4, r3
    858a:	d11f      	bne.n	85cc <bt_hci_cmd_send+0x58>
		err = bt_send(buf);
    858c:	4628      	mov	r0, r5
    858e:	f7ff ffe9 	bl	8564 <bt_send>
		if (err) {
    8592:	4604      	mov	r4, r0
    8594:	b1c0      	cbz	r0, 85c8 <bt_hci_cmd_send+0x54>
			BT_ERR("Unable to send to driver (err %d)", err);
    8596:	4b12      	ldr	r3, [pc, #72]	; (85e0 <bt_hci_cmd_send+0x6c>)
    8598:	681b      	ldr	r3, [r3, #0]
    859a:	075b      	lsls	r3, r3, #29
    859c:	d011      	beq.n	85c2 <bt_hci_cmd_send+0x4e>
    859e:	2201      	movs	r2, #1
    85a0:	f04f 0300 	mov.w	r3, #0
    85a4:	f362 0302 	bfi	r3, r2, #0, #3
    85a8:	490e      	ldr	r1, [pc, #56]	; (85e4 <bt_hci_cmd_send+0x70>)
    85aa:	4a0f      	ldr	r2, [pc, #60]	; (85e8 <bt_hci_cmd_send+0x74>)
    85ac:	1a52      	subs	r2, r2, r1
    85ae:	08d2      	lsrs	r2, r2, #3
    85b0:	f36f 03c5 	bfc	r3, #3, #3
    85b4:	f362 138f 	bfi	r3, r2, #6, #10
    85b8:	490c      	ldr	r1, [pc, #48]	; (85ec <bt_hci_cmd_send+0x78>)
    85ba:	4602      	mov	r2, r0
    85bc:	480c      	ldr	r0, [pc, #48]	; (85f0 <bt_hci_cmd_send+0x7c>)
    85be:	f7f9 fda9 	bl	2114 <log_2>
			net_buf_unref(buf);
    85c2:	4628      	mov	r0, r5
    85c4:	f016 fe46 	bl	1f254 <net_buf_unref>
}
    85c8:	4620      	mov	r0, r4
    85ca:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    85cc:	4629      	mov	r1, r5
    85ce:	4809      	ldr	r0, [pc, #36]	; (85f4 <bt_hci_cmd_send+0x80>)
    85d0:	f016 fe33 	bl	1f23a <net_buf_put>
	return 0;
    85d4:	2400      	movs	r4, #0
    85d6:	e7f7      	b.n	85c8 <bt_hci_cmd_send+0x54>
			return -ENOBUFS;
    85d8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    85dc:	e7f4      	b.n	85c8 <bt_hci_cmd_send+0x54>
    85de:	bf00      	nop
    85e0:	2000e238 	.word	0x2000e238
    85e4:	0002ef38 	.word	0x0002ef38
    85e8:	0002efb0 	.word	0x0002efb0
    85ec:	00030c0d 	.word	0x00030c0d
    85f0:	00030f0b 	.word	0x00030f0b
    85f4:	2000d83c 	.word	0x2000d83c

000085f8 <start_le_scan>:
{
    85f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    85fa:	4605      	mov	r5, r0
    85fc:	460e      	mov	r6, r1
    85fe:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    8600:	2100      	movs	r1, #0
    8602:	2207      	movs	r2, #7
    8604:	4668      	mov	r0, sp
    8606:	f7fe fb6c 	bl	6ce2 <memset>
		set_param.addr_type =  bt_dev.id_addr[0].type;
    860a:	4825      	ldr	r0, [pc, #148]	; (86a0 <start_le_scan+0xa8>)
	set_param.scan_type = scan_type;
    860c:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    8610:	2300      	movs	r3, #0
    8612:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    8616:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr[0].type;
    8618:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    861a:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    861e:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr[0].type;
    8622:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    8626:	d12a      	bne.n	867e <start_le_scan+0x86>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    8628:	2106      	movs	r1, #6
    862a:	3070      	adds	r0, #112	; 0x70
    862c:	f7ff fa5a 	bl	7ae4 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    8630:	bb28      	cbnz	r0, 867e <start_le_scan+0x86>
			err = le_set_private_addr(BT_ID_DEFAULT);
    8632:	f7ff fbc7 	bl	7dc4 <le_set_private_addr.isra.26>
			if (err) {
    8636:	4604      	mov	r4, r0
    8638:	b9f0      	cbnz	r0, 8678 <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    863a:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    863e:	2107      	movs	r1, #7
    8640:	f242 000b 	movw	r0, #8203	; 0x200b
    8644:	f7ff fa7c 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    8648:	4604      	mov	r4, r0
    864a:	b330      	cbz	r0, 869a <start_le_scan+0xa2>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    864c:	2207      	movs	r2, #7
    864e:	4669      	mov	r1, sp
    8650:	3008      	adds	r0, #8
    8652:	f016 fe63 	bl	1f31c <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    8656:	4621      	mov	r1, r4
    8658:	f242 000b 	movw	r0, #8203	; 0x200b
    865c:	f7ff ff8a 	bl	8574 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    8660:	2001      	movs	r0, #1
    8662:	f7ff fb21 	bl	7ca8 <set_le_scan_enable>
	if (err) {
    8666:	4604      	mov	r4, r0
    8668:	b930      	cbnz	r0, 8678 <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    866a:	2d01      	cmp	r5, #1
    866c:	d10f      	bne.n	868e <start_le_scan+0x96>
    866e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    8672:	480c      	ldr	r0, [pc, #48]	; (86a4 <start_le_scan+0xac>)
    8674:	f7ff f90f 	bl	7896 <atomic_or>
}
    8678:	4620      	mov	r0, r4
    867a:	b002      	add	sp, #8
    867c:	bd70      	pop	{r4, r5, r6, pc}
		} else if (set_param.addr_type == BT_ADDR_LE_RANDOM) {
    867e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8682:	2b01      	cmp	r3, #1
    8684:	d1db      	bne.n	863e <start_le_scan+0x46>
			set_random_address(&bt_dev.id_addr[0].a);
    8686:	4808      	ldr	r0, [pc, #32]	; (86a8 <start_le_scan+0xb0>)
    8688:	f7ff fb6e 	bl	7d68 <set_random_address>
    868c:	e7d7      	b.n	863e <start_le_scan+0x46>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    868e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    8692:	4804      	ldr	r0, [pc, #16]	; (86a4 <start_le_scan+0xac>)
    8694:	f7ff f90e 	bl	78b4 <atomic_and>
    8698:	e7ee      	b.n	8678 <start_le_scan+0x80>
		return -ENOBUFS;
    869a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    869e:	e7eb      	b.n	8678 <start_le_scan+0x80>
    86a0:	2000d778 	.word	0x2000d778
    86a4:	2000d7e8 	.word	0x2000d7e8
    86a8:	2000d779 	.word	0x2000d779

000086ac <bt_le_scan_update>:
{
    86ac:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    86ae:	210b      	movs	r1, #11
{
    86b0:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    86b2:	4816      	ldr	r0, [pc, #88]	; (870c <bt_le_scan_update+0x60>)
    86b4:	f7ff fa16 	bl	7ae4 <atomic_test_bit>
    86b8:	4603      	mov	r3, r0
    86ba:	b108      	cbz	r0, 86c0 <bt_le_scan_update+0x14>
		return 0;
    86bc:	2000      	movs	r0, #0
}
    86be:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    86c0:	210a      	movs	r1, #10
    86c2:	4812      	ldr	r0, [pc, #72]	; (870c <bt_le_scan_update+0x60>)
    86c4:	f7ff fa0e 	bl	7ae4 <atomic_test_bit>
    86c8:	b9d0      	cbnz	r0, 8700 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    86ca:	2101      	movs	r1, #1
    86cc:	2000      	movs	r0, #0
    86ce:	f002 fd85 	bl	b1dc <bt_conn_lookup_state_le>
		if (!conn) {
    86d2:	4604      	mov	r4, r0
    86d4:	2800      	cmp	r0, #0
    86d6:	d0f1      	beq.n	86bc <bt_le_scan_update+0x10>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    86d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    86dc:	480b      	ldr	r0, [pc, #44]	; (870c <bt_le_scan_update+0x60>)
    86de:	f7ff f8da 	bl	7896 <atomic_or>
		bt_conn_unref(conn);
    86e2:	4620      	mov	r0, r4
    86e4:	f002 fd9c 	bl	b220 <bt_conn_unref>
			window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    86e8:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    86ea:	bf15      	itete	ne
    86ec:	2230      	movne	r2, #48	; 0x30
    86ee:	2212      	moveq	r2, #18
    86f0:	2160      	movne	r1, #96	; 0x60
    86f2:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    86f6:	2000      	movs	r0, #0
}
    86f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    86fc:	f7ff bf7c 	b.w	85f8 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    8700:	4618      	mov	r0, r3
    8702:	f7ff fad1 	bl	7ca8 <set_le_scan_enable>
		if (err) {
    8706:	2800      	cmp	r0, #0
    8708:	d0df      	beq.n	86ca <bt_le_scan_update+0x1e>
    870a:	e7d8      	b.n	86be <bt_le_scan_update+0x12>
    870c:	2000d7e8 	.word	0x2000d7e8

00008710 <hci_le_set_phy.isra.35>:
static int hci_le_set_phy(struct bt_conn *conn)
    8710:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    8712:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    8714:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    8716:	f242 0032 	movw	r0, #8242	; 0x2032
    871a:	f7ff fa11 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    871e:	4605      	mov	r5, r0
    8720:	b198      	cbz	r0, 874a <hci_le_set_phy.isra.35+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    8722:	2107      	movs	r1, #7
    8724:	3008      	adds	r0, #8
    8726:	f016 fdf3 	bl	1f310 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    872a:	8823      	ldrh	r3, [r4, #0]
    872c:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    872e:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    8730:	2302      	movs	r3, #2
	cp->all_phys = 0;
    8732:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    8734:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    8736:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    8738:	7144      	strb	r4, [r0, #5]
    873a:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    873c:	4629      	mov	r1, r5
    873e:	f242 0032 	movw	r0, #8242	; 0x2032
    8742:	f7ff ff17 	bl	8574 <bt_hci_cmd_send>
	return 0;
    8746:	4620      	mov	r0, r4
}
    8748:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    874a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    874e:	e7fb      	b.n	8748 <hci_le_set_phy.isra.35+0x38>

00008750 <hci_le_set_data_len.isra.36>:
static int hci_le_set_data_len(struct bt_conn *conn)
    8750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8752:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    8754:	aa01      	add	r2, sp, #4
    8756:	2100      	movs	r1, #0
    8758:	f242 002f 	movw	r0, #8239	; 0x202f
    875c:	f7ff fa20 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    8760:	b9d8      	cbnz	r0, 879a <hci_le_set_data_len.isra.36+0x4a>
	rp = (void *)rsp->data;
    8762:	9801      	ldr	r0, [sp, #4]
    8764:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    8766:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    876a:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    876e:	f016 fd71 	bl	1f254 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    8772:	2106      	movs	r1, #6
    8774:	f242 0022 	movw	r0, #8226	; 0x2022
    8778:	f7ff f9e2 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    877c:	4604      	mov	r4, r0
    877e:	b170      	cbz	r0, 879e <hci_le_set_data_len.isra.36+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    8780:	2106      	movs	r1, #6
    8782:	3008      	adds	r0, #8
    8784:	f016 fdc4 	bl	1f310 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    8788:	883b      	ldrh	r3, [r7, #0]
    878a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    878c:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    878e:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    8790:	4621      	mov	r1, r4
    8792:	f242 0022 	movw	r0, #8226	; 0x2022
    8796:	f7ff feed 	bl	8574 <bt_hci_cmd_send>
}
    879a:	b003      	add	sp, #12
    879c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    879e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    87a2:	e7fa      	b.n	879a <hci_le_set_data_len.isra.36+0x4a>

000087a4 <le_enh_conn_complete>:
{
    87a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    87a6:	f46f 4100 	mvn.w	r1, #32768	; 0x8000
	u16_t handle = sys_le16_to_cpu(evt->handle);
    87aa:	f8b0 7001 	ldrh.w	r7, [r0, #1]
{
    87ae:	b085      	sub	sp, #20
    87b0:	4605      	mov	r5, r0
    87b2:	487c      	ldr	r0, [pc, #496]	; (89a4 <le_enh_conn_complete+0x200>)
    87b4:	f7ff f87e 	bl	78b4 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    87b8:	0404      	lsls	r4, r0, #16
	u16_t handle = sys_le16_to_cpu(evt->handle);
    87ba:	b2be      	uxth	r6, r7
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    87bc:	d504      	bpl.n	87c8 <le_enh_conn_complete+0x24>
		bt_keys_foreach(BT_KEYS_IRK, update_pending_id, NULL);
    87be:	2200      	movs	r2, #0
    87c0:	4979      	ldr	r1, [pc, #484]	; (89a8 <le_enh_conn_complete+0x204>)
    87c2:	2002      	movs	r0, #2
    87c4:	f008 fcda 	bl	1117c <bt_keys_foreach>
		if (evt->status) {
    87c8:	782b      	ldrb	r3, [r5, #0]
    87ca:	b313      	cbz	r3, 8812 <le_enh_conn_complete+0x6e>
			conn = find_pending_connect(NULL);
    87cc:	2000      	movs	r0, #0
    87ce:	f7ff f8e1 	bl	7994 <find_pending_connect>
			if (!conn) {
    87d2:	4604      	mov	r4, r0
    87d4:	2800      	cmp	r0, #0
    87d6:	d05b      	beq.n	8890 <le_enh_conn_complete+0xec>
			conn->err = evt->status;
    87d8:	782b      	ldrb	r3, [r5, #0]
    87da:	7303      	strb	r3, [r0, #12]
		if (conn->err == BT_HCI_ERR_ADV_TIMEOUT) {
    87dc:	2b3c      	cmp	r3, #60	; 0x3c
    87de:	d104      	bne.n	87ea <le_enh_conn_complete+0x46>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    87e0:	f06f 0140 	mvn.w	r1, #64	; 0x40
    87e4:	486f      	ldr	r0, [pc, #444]	; (89a4 <le_enh_conn_complete+0x200>)
    87e6:	f7ff f865 	bl	78b4 <atomic_and>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    87ea:	2100      	movs	r1, #0
    87ec:	4620      	mov	r0, r4
    87ee:	f002 fbb5 	bl	af5c <bt_conn_set_state>
			if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    87f2:	2100      	movs	r1, #0
    87f4:	1d20      	adds	r0, r4, #4
    87f6:	f7ff f975 	bl	7ae4 <atomic_test_bit>
    87fa:	b118      	cbz	r0, 8804 <le_enh_conn_complete+0x60>
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    87fc:	2101      	movs	r1, #1
    87fe:	4620      	mov	r0, r4
    8800:	f002 fbac 	bl	af5c <bt_conn_set_state>
	bt_conn_unref(conn);
    8804:	4620      	mov	r0, r4
    8806:	f002 fd0b 	bl	b220 <bt_conn_unref>
		bt_le_scan_update(false);
    880a:	2000      	movs	r0, #0
    880c:	f7ff ff4e 	bl	86ac <bt_le_scan_update>
    8810:	e03e      	b.n	8890 <le_enh_conn_complete+0xec>
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    8812:	1d2c      	adds	r4, r5, #4
    8814:	4621      	mov	r1, r4
    8816:	a802      	add	r0, sp, #8
    8818:	f7ff f83a 	bl	7890 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    881c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    8820:	3b02      	subs	r3, #2
    8822:	b2db      	uxtb	r3, r3
    8824:	2b01      	cmp	r3, #1
    8826:	d835      	bhi.n	8894 <le_enh_conn_complete+0xf0>
	memcpy(dst, src, sizeof(*dst));
    8828:	2206      	movs	r2, #6
    882a:	f105 0111 	add.w	r1, r5, #17
    882e:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8832:	f88d 3008 	strb.w	r3, [sp, #8]
    8836:	f7fe fa27 	bl	6c88 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    883a:	2301      	movs	r3, #1
    883c:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(&id_addr);
    8840:	a802      	add	r0, sp, #8
    8842:	f7ff f8a7 	bl	7994 <find_pending_connect>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    8846:	78eb      	ldrb	r3, [r5, #3]
    8848:	2b01      	cmp	r3, #1
	conn = find_pending_connect(&id_addr);
    884a:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    884c:	d109      	bne.n	8862 <le_enh_conn_complete+0xbe>
    884e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    8852:	4854      	ldr	r0, [pc, #336]	; (89a4 <le_enh_conn_complete+0x200>)
    8854:	f7ff f82e 	bl	78b4 <atomic_and>
		if (!conn) {
    8858:	bb0c      	cbnz	r4, 889e <le_enh_conn_complete+0xfa>
			conn = bt_conn_add_le(&id_addr);
    885a:	a802      	add	r0, sp, #8
    885c:	f002 fb48 	bl	aef0 <bt_conn_add_le>
    8860:	4604      	mov	r4, r0
	if (!conn) {
    8862:	b9e4      	cbnz	r4, 889e <le_enh_conn_complete+0xfa>
		BT_ERR("Unable to add new conn for handle %u", handle);
    8864:	4b51      	ldr	r3, [pc, #324]	; (89ac <le_enh_conn_complete+0x208>)
    8866:	681b      	ldr	r3, [r3, #0]
    8868:	0758      	lsls	r0, r3, #29
    886a:	d011      	beq.n	8890 <le_enh_conn_complete+0xec>
    886c:	2201      	movs	r2, #1
    886e:	f04f 0300 	mov.w	r3, #0
    8872:	f362 0302 	bfi	r3, r2, #0, #3
    8876:	494e      	ldr	r1, [pc, #312]	; (89b0 <le_enh_conn_complete+0x20c>)
    8878:	4a4e      	ldr	r2, [pc, #312]	; (89b4 <le_enh_conn_complete+0x210>)
    887a:	484f      	ldr	r0, [pc, #316]	; (89b8 <le_enh_conn_complete+0x214>)
    887c:	1a52      	subs	r2, r2, r1
    887e:	08d2      	lsrs	r2, r2, #3
    8880:	f364 03c5 	bfi	r3, r4, #3, #3
    8884:	f362 138f 	bfi	r3, r2, #6, #10
    8888:	494c      	ldr	r1, [pc, #304]	; (89bc <le_enh_conn_complete+0x218>)
    888a:	4632      	mov	r2, r6
    888c:	f7f9 fc42 	bl	2114 <log_2>
}
    8890:	b005      	add	sp, #20
    8892:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    8894:	4621      	mov	r1, r4
    8896:	4668      	mov	r0, sp
    8898:	f7fe fffa 	bl	7890 <bt_addr_le_copy>
    889c:	e7d0      	b.n	8840 <le_enh_conn_complete+0x9c>
	conn->handle = handle;
    889e:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    88a0:	a902      	add	r1, sp, #8
	conn->handle = handle;
    88a2:	f820 7b48 	strh.w	r7, [r0], #72
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    88a6:	f7fe fff3 	bl	7890 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    88aa:	7e2a      	ldrb	r2, [r5, #24]
    88ac:	7deb      	ldrb	r3, [r5, #23]
    88ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    88b2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    88b6:	7eaa      	ldrb	r2, [r5, #26]
    88b8:	7e6b      	ldrb	r3, [r5, #25]
    88ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    88be:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    88c2:	7eeb      	ldrb	r3, [r5, #27]
    88c4:	7f2a      	ldrb	r2, [r5, #28]
    88c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    88ca:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->role = evt->role;
    88ce:	78ef      	ldrb	r7, [r5, #3]
    88d0:	70e7      	strb	r7, [r4, #3]
	conn->err = 0;
    88d2:	2300      	movs	r3, #0
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    88d4:	2f01      	cmp	r7, #1
	conn->err = 0;
    88d6:	7323      	strb	r3, [r4, #12]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    88d8:	d120      	bne.n	891c <le_enh_conn_complete+0x178>
		conn->id = bt_dev.adv_id;
    88da:	4e39      	ldr	r6, [pc, #228]	; (89c0 <le_enh_conn_complete+0x21c>)
    88dc:	7a33      	ldrb	r3, [r6, #8]
    88de:	7223      	strb	r3, [r4, #8]
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    88e0:	4669      	mov	r1, sp
    88e2:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    88e6:	f7fe ffd3 	bl	7890 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    88ea:	7a21      	ldrb	r1, [r4, #8]
    88ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.resp_addr,
    88f0:	4431      	add	r1, r6
    88f2:	f104 0056 	add.w	r0, r4, #86	; 0x56
    88f6:	f7fe ffcb 	bl	7890 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    88fa:	2109      	movs	r1, #9
    88fc:	f106 0070 	add.w	r0, r6, #112	; 0x70
    8900:	f7ff f8f0 	bl	7ae4 <atomic_test_bit>
    8904:	b150      	cbz	r0, 891c <le_enh_conn_complete+0x178>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    8906:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
    890a:	2000      	movs	r0, #0
    890c:	f003 0140 	and.w	r1, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    8910:	ea50 0301 	orrs.w	r3, r0, r1
    8914:	d002      	beq.n	891c <le_enh_conn_complete+0x178>
			set_advertise_enable(true);
    8916:	4638      	mov	r0, r7
    8918:	f7ff f9fc 	bl	7d14 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    891c:	2104      	movs	r1, #4
    891e:	4620      	mov	r0, r4
    8920:	f002 fb1c 	bl	af5c <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    8924:	7b63      	ldrb	r3, [r4, #13]
    8926:	2b04      	cmp	r3, #4
    8928:	f47f af6c 	bne.w	8804 <le_enh_conn_complete+0x60>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    892c:	78eb      	ldrb	r3, [r5, #3]
    892e:	b123      	cbz	r3, 893a <le_enh_conn_complete+0x196>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    8930:	4b23      	ldr	r3, [pc, #140]	; (89c0 <le_enh_conn_complete+0x21c>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    8932:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    8936:	0719      	lsls	r1, r3, #28
    8938:	d512      	bpl.n	8960 <le_enh_conn_complete+0x1bc>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    893a:	2102      	movs	r1, #2
    893c:	f242 0016 	movw	r0, #8214	; 0x2016
    8940:	f7ff f8fe 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    8944:	4605      	mov	r5, r0
    8946:	b158      	cbz	r0, 8960 <le_enh_conn_complete+0x1bc>
	cp = net_buf_add(buf, sizeof(*cp));
    8948:	2102      	movs	r1, #2
    894a:	3008      	adds	r0, #8
    894c:	f016 fce0 	bl	1f310 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    8950:	8823      	ldrh	r3, [r4, #0]
    8952:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    8954:	4629      	mov	r1, r5
    8956:	f242 0016 	movw	r0, #8214	; 0x2016
    895a:	f7ff fe0b 	bl	8574 <bt_hci_cmd_send>
    895e:	e751      	b.n	8804 <le_enh_conn_complete+0x60>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    8960:	4d17      	ldr	r5, [pc, #92]	; (89c0 <le_enh_conn_complete+0x21c>)
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    8962:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    8966:	07d2      	lsls	r2, r2, #31
    8968:	d508      	bpl.n	897c <le_enh_conn_complete+0x1d8>
		err = hci_le_set_phy(conn);
    896a:	4620      	mov	r0, r4
    896c:	f7ff fed0 	bl	8710 <hci_le_set_phy.isra.35>
		if (!err) {
    8970:	b920      	cbnz	r0, 897c <le_enh_conn_complete+0x1d8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8972:	2180      	movs	r1, #128	; 0x80
    8974:	1d20      	adds	r0, r4, #4
    8976:	f7fe ff8e 	bl	7896 <atomic_or>
    897a:	e743      	b.n	8804 <le_enh_conn_complete+0x60>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    897c:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    8980:	069b      	lsls	r3, r3, #26
    8982:	d506      	bpl.n	8992 <le_enh_conn_complete+0x1ee>
		err = hci_le_set_data_len(conn);
    8984:	4620      	mov	r0, r4
    8986:	f7ff fee3 	bl	8750 <hci_le_set_data_len.isra.36>
		if (!err) {
    898a:	b910      	cbnz	r0, 8992 <le_enh_conn_complete+0x1ee>
    898c:	f44f 7180 	mov.w	r1, #256	; 0x100
    8990:	e7f0      	b.n	8974 <le_enh_conn_complete+0x1d0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8992:	78e3      	ldrb	r3, [r4, #3]
    8994:	2b01      	cmp	r3, #1
    8996:	f47f af35 	bne.w	8804 <le_enh_conn_complete+0x60>
		slave_update_conn_param(conn);
    899a:	4620      	mov	r0, r4
    899c:	f7ff f8ac 	bl	7af8 <slave_update_conn_param>
    89a0:	e730      	b.n	8804 <le_enh_conn_complete+0x60>
    89a2:	bf00      	nop
    89a4:	2000d7e8 	.word	0x2000d7e8
    89a8:	0000837d 	.word	0x0000837d
    89ac:	2000e238 	.word	0x2000e238
    89b0:	0002ef38 	.word	0x0002ef38
    89b4:	0002efb0 	.word	0x0002efb0
    89b8:	000315f7 	.word	0x000315f7
    89bc:	00030c54 	.word	0x00030c54
    89c0:	2000d778 	.word	0x2000d778

000089c4 <le_conn_param_neg_reply>:
{
    89c4:	b570      	push	{r4, r5, r6, lr}
    89c6:	4606      	mov	r6, r0
    89c8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    89ca:	f242 0021 	movw	r0, #8225	; 0x2021
    89ce:	2103      	movs	r1, #3
    89d0:	f7ff f8b6 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    89d4:	4604      	mov	r4, r0
    89d6:	b160      	cbz	r0, 89f2 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    89d8:	2103      	movs	r1, #3
    89da:	3008      	adds	r0, #8
    89dc:	f016 fc98 	bl	1f310 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    89e0:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    89e2:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    89e4:	4621      	mov	r1, r4
    89e6:	f242 0021 	movw	r0, #8225	; 0x2021
}
    89ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    89ee:	f7ff bdc1 	b.w	8574 <bt_hci_cmd_send>
}
    89f2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    89f6:	bd70      	pop	{r4, r5, r6, pc}

000089f8 <hci_tx_thread>:
{
    89f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("Uncleared pending sent_cmd");
    89fc:	4b6b      	ldr	r3, [pc, #428]	; (8bac <hci_tx_thread+0x1b4>)
    89fe:	4c6c      	ldr	r4, [pc, #432]	; (8bb0 <hci_tx_thread+0x1b8>)
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    8a00:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8bb8 <hci_tx_thread+0x1c0>
		BT_ERR("Uncleared pending sent_cmd");
    8a04:	1ae4      	subs	r4, r4, r3
    8a06:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		events[0].state = K_POLL_STATE_NOT_READY;
    8a0a:	4a6a      	ldr	r2, [pc, #424]	; (8bb4 <hci_tx_thread+0x1bc>)
    8a0c:	68d3      	ldr	r3, [r2, #12]
    8a0e:	f36f 3310 	bfc	r3, #12, #5
    8a12:	60d3      	str	r3, [r2, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    8a14:	f102 0014 	add.w	r0, r2, #20
    8a18:	f002 fa22 	bl	ae60 <bt_conn_prepare_events>
    8a1c:	1c43      	adds	r3, r0, #1
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    8a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8a22:	4619      	mov	r1, r3
    8a24:	4863      	ldr	r0, [pc, #396]	; (8bb4 <hci_tx_thread+0x1bc>)
    8a26:	9300      	str	r3, [sp, #0]
    8a28:	f026 f942 	bl	2ecb0 <_impl_k_poll>
		BT_ASSERT(err == 0);
    8a2c:	2800      	cmp	r0, #0
    8a2e:	f000 80b9 	beq.w	8ba4 <hci_tx_thread+0x1ac>
    8a32:	4b61      	ldr	r3, [pc, #388]	; (8bb8 <hci_tx_thread+0x1c0>)
    8a34:	681b      	ldr	r3, [r3, #0]
    8a36:	0759      	lsls	r1, r3, #29
    8a38:	d00c      	beq.n	8a54 <hci_tx_thread+0x5c>
    8a3a:	f04f 0200 	mov.w	r2, #0
    8a3e:	2301      	movs	r3, #1
    8a40:	f363 0202 	bfi	r2, r3, #0, #3
    8a44:	f36f 02c5 	bfc	r2, #3, #3
    8a48:	495c      	ldr	r1, [pc, #368]	; (8bbc <hci_tx_thread+0x1c4>)
    8a4a:	485d      	ldr	r0, [pc, #372]	; (8bc0 <hci_tx_thread+0x1c8>)
    8a4c:	f364 128f 	bfi	r2, r4, #6, #10
	BT_ASSERT(buf);
    8a50:	f7f9 fb4c 	bl	20ec <log_1>
    8a54:	4040      	eors	r0, r0
    8a56:	f380 8811 	msr	BASEPRI, r0
    8a5a:	f04f 0004 	mov.w	r0, #4
    8a5e:	df02      	svc	2
		switch (ev->state) {
    8a60:	68f2      	ldr	r2, [r6, #12]
    8a62:	f3c2 3204 	ubfx	r2, r2, #12, #5
    8a66:	2a01      	cmp	r2, #1
    8a68:	d971      	bls.n	8b4e <hci_tx_thread+0x156>
    8a6a:	2a04      	cmp	r2, #4
    8a6c:	f040 8087 	bne.w	8b7e <hci_tx_thread+0x186>
			if (ev->tag == BT_EVENT_CMD_TX) {
    8a70:	7b33      	ldrb	r3, [r6, #12]
    8a72:	2b00      	cmp	r3, #0
    8a74:	d175      	bne.n	8b62 <hci_tx_thread+0x16a>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    8a76:	4619      	mov	r1, r3
    8a78:	4852      	ldr	r0, [pc, #328]	; (8bc4 <hci_tx_thread+0x1cc>)
    8a7a:	9301      	str	r3, [sp, #4]
    8a7c:	f016 fbc0 	bl	1f200 <net_buf_get>
	BT_ASSERT(buf);
    8a80:	9b01      	ldr	r3, [sp, #4]
    8a82:	4607      	mov	r7, r0
    8a84:	b978      	cbnz	r0, 8aa6 <hci_tx_thread+0xae>
    8a86:	4b4c      	ldr	r3, [pc, #304]	; (8bb8 <hci_tx_thread+0x1c0>)
    8a88:	681b      	ldr	r3, [r3, #0]
    8a8a:	075a      	lsls	r2, r3, #29
    8a8c:	d0e2      	beq.n	8a54 <hci_tx_thread+0x5c>
    8a8e:	f04f 0200 	mov.w	r2, #0
    8a92:	2301      	movs	r3, #1
    8a94:	f363 0202 	bfi	r2, r3, #0, #3
    8a98:	f360 02c5 	bfi	r2, r0, #3, #3
    8a9c:	f364 128f 	bfi	r2, r4, #6, #10
    8aa0:	4949      	ldr	r1, [pc, #292]	; (8bc8 <hci_tx_thread+0x1d0>)
    8aa2:	484a      	ldr	r0, [pc, #296]	; (8bcc <hci_tx_thread+0x1d4>)
    8aa4:	e7d4      	b.n	8a50 <hci_tx_thread+0x58>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    8aa6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8aaa:	4849      	ldr	r0, [pc, #292]	; (8bd0 <hci_tx_thread+0x1d8>)
    8aac:	9301      	str	r3, [sp, #4]
    8aae:	f025 fc0b 	bl	2e2c8 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    8ab2:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
    8ab6:	b1c2      	cbz	r2, 8aea <hci_tx_thread+0xf2>
		BT_ERR("Uncleared pending sent_cmd");
    8ab8:	f8db 2000 	ldr.w	r2, [fp]
    8abc:	9b01      	ldr	r3, [sp, #4]
    8abe:	f012 0f07 	tst.w	r2, #7
    8ac2:	d00b      	beq.n	8adc <hci_tx_thread+0xe4>
    8ac4:	2201      	movs	r2, #1
    8ac6:	f362 0802 	bfi	r8, r2, #0, #3
    8aca:	f363 08c5 	bfi	r8, r3, #3, #3
    8ace:	f364 188f 	bfi	r8, r4, #6, #10
    8ad2:	4642      	mov	r2, r8
    8ad4:	493c      	ldr	r1, [pc, #240]	; (8bc8 <hci_tx_thread+0x1d0>)
    8ad6:	483f      	ldr	r0, [pc, #252]	; (8bd4 <hci_tx_thread+0x1dc>)
    8ad8:	f7f9 fb08 	bl	20ec <log_1>
		net_buf_unref(bt_dev.sent_cmd);
    8adc:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    8ae0:	f016 fbb8 	bl	1f254 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8ae4:	2300      	movs	r3, #0
    8ae6:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    8aea:	4638      	mov	r0, r7
    8aec:	f016 fbe0 	bl	1f2b0 <net_buf_ref>
    8af0:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	err = bt_send(buf);
    8af4:	4638      	mov	r0, r7
    8af6:	f7ff fd35 	bl	8564 <bt_send>
	if (err) {
    8afa:	4602      	mov	r2, r0
    8afc:	b338      	cbz	r0, 8b4e <hci_tx_thread+0x156>
		BT_ERR("Unable to send to driver (err %d)", err);
    8afe:	f8db 3000 	ldr.w	r3, [fp]
    8b02:	075b      	lsls	r3, r3, #29
    8b04:	d00b      	beq.n	8b1e <hci_tx_thread+0x126>
    8b06:	2301      	movs	r3, #1
    8b08:	f363 0902 	bfi	r9, r3, #0, #3
    8b0c:	f36f 09c5 	bfc	r9, #3, #3
    8b10:	f364 198f 	bfi	r9, r4, #6, #10
    8b14:	464b      	mov	r3, r9
    8b16:	492c      	ldr	r1, [pc, #176]	; (8bc8 <hci_tx_thread+0x1d0>)
    8b18:	482f      	ldr	r0, [pc, #188]	; (8bd8 <hci_tx_thread+0x1e0>)
    8b1a:	f7f9 fafb 	bl	2114 <log_2>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    8b1e:	482c      	ldr	r0, [pc, #176]	; (8bd0 <hci_tx_thread+0x1d8>)
    8b20:	f025 fbab 	bl	2e27a <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    8b24:	4638      	mov	r0, r7
    8b26:	f016 fad7 	bl	1f0d8 <net_buf_id>
    8b2a:	4b2c      	ldr	r3, [pc, #176]	; (8bdc <hci_tx_thread+0x1e4>)
    8b2c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    8b30:	2200      	movs	r2, #0
    8b32:	211f      	movs	r1, #31
    8b34:	8840      	ldrh	r0, [r0, #2]
    8b36:	f7fe ff3b 	bl	79b0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    8b3a:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    8b3e:	f016 fb89 	bl	1f254 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8b42:	2300      	movs	r3, #0
		net_buf_unref(buf);
    8b44:	4638      	mov	r0, r7
		bt_dev.sent_cmd = NULL;
    8b46:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    8b4a:	f016 fb83 	bl	1f254 <net_buf_unref>
	for (; count; ev++, count--) {
    8b4e:	9b00      	ldr	r3, [sp, #0]
    8b50:	3b01      	subs	r3, #1
    8b52:	3614      	adds	r6, #20
    8b54:	9300      	str	r3, [sp, #0]
    8b56:	9b00      	ldr	r3, [sp, #0]
    8b58:	2b00      	cmp	r3, #0
    8b5a:	d181      	bne.n	8a60 <hci_tx_thread+0x68>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    8b5c:	f025 faee 	bl	2e13c <_impl_k_yield>
    8b60:	e753      	b.n	8a0a <hci_tx_thread+0x12>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    8b62:	2b01      	cmp	r3, #1
    8b64:	d104      	bne.n	8b70 <hci_tx_thread+0x178>
					conn = CONTAINER_OF(ev->fifo,
    8b66:	6930      	ldr	r0, [r6, #16]
					bt_conn_notify_tx(conn);
    8b68:	381c      	subs	r0, #28
    8b6a:	f002 f899 	bl	aca0 <bt_conn_notify_tx>
    8b6e:	e7ee      	b.n	8b4e <hci_tx_thread+0x156>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    8b70:	2b02      	cmp	r3, #2
    8b72:	d1ec      	bne.n	8b4e <hci_tx_thread+0x156>
					conn = CONTAINER_OF(ev->fifo,
    8b74:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    8b76:	382c      	subs	r0, #44	; 0x2c
    8b78:	f002 fcfe 	bl	b578 <bt_conn_process_tx>
    8b7c:	e7e7      	b.n	8b4e <hci_tx_thread+0x156>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    8b7e:	f8db 3000 	ldr.w	r3, [fp]
    8b82:	f003 0307 	and.w	r3, r3, #7
    8b86:	2b01      	cmp	r3, #1
    8b88:	d9e1      	bls.n	8b4e <hci_tx_thread+0x156>
    8b8a:	2302      	movs	r3, #2
    8b8c:	f363 0a02 	bfi	sl, r3, #0, #3
    8b90:	f36f 0ac5 	bfc	sl, #3, #3
    8b94:	f364 1a8f 	bfi	sl, r4, #6, #10
    8b98:	4653      	mov	r3, sl
    8b9a:	4911      	ldr	r1, [pc, #68]	; (8be0 <hci_tx_thread+0x1e8>)
    8b9c:	4811      	ldr	r0, [pc, #68]	; (8be4 <hci_tx_thread+0x1ec>)
    8b9e:	f7f9 fab9 	bl	2114 <log_2>
    8ba2:	e7d4      	b.n	8b4e <hci_tx_thread+0x156>
    8ba4:	4e03      	ldr	r6, [pc, #12]	; (8bb4 <hci_tx_thread+0x1bc>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    8ba6:	4d10      	ldr	r5, [pc, #64]	; (8be8 <hci_tx_thread+0x1f0>)
    8ba8:	e7d5      	b.n	8b56 <hci_tx_thread+0x15e>
    8baa:	bf00      	nop
    8bac:	0002ef38 	.word	0x0002ef38
    8bb0:	0002efb0 	.word	0x0002efb0
    8bb4:	2000d850 	.word	0x2000d850
    8bb8:	2000e238 	.word	0x2000e238
    8bbc:	00030da3 	.word	0x00030da3
    8bc0:	00031575 	.word	0x00031575
    8bc4:	2000d83c 	.word	0x2000d83c
    8bc8:	00030d8b 	.word	0x00030d8b
    8bcc:	00031593 	.word	0x00031593
    8bd0:	2000d820 	.word	0x2000d820
    8bd4:	000315ac 	.word	0x000315ac
    8bd8:	00030f0b 	.word	0x00030f0b
    8bdc:	20000aec 	.word	0x20000aec
    8be0:	00030d94 	.word	0x00030d94
    8be4:	000315cb 	.word	0x000315cb
    8be8:	2000d778 	.word	0x2000d778

00008bec <bt_recv>:
{
    8bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    8bf0:	7d02      	ldrb	r2, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    8bf2:	2a01      	cmp	r2, #1
{
    8bf4:	b091      	sub	sp, #68	; 0x44
    8bf6:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    8bf8:	d058      	beq.n	8cac <bt_recv+0xc0>
    8bfa:	2a03      	cmp	r2, #3
    8bfc:	f040 8589 	bne.w	9712 <bt_recv+0xb26>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    8c00:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    8c02:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    8c04:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    8c06:	f3c6 030b 	ubfx	r3, r6, #0, #12
    8c0a:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    8c0c:	23ff      	movs	r3, #255	; 0xff
    8c0e:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    8c10:	2104      	movs	r1, #4
    8c12:	3008      	adds	r0, #8
    8c14:	f016 fbcc 	bl	1f3b0 <net_buf_simple_pull>
	if (buf->len != len) {
    8c18:	89a2      	ldrh	r2, [r4, #12]
    8c1a:	4295      	cmp	r5, r2
    8c1c:	d01e      	beq.n	8c5c <bt_recv+0x70>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    8c1e:	4bb0      	ldr	r3, [pc, #704]	; (8ee0 <bt_recv+0x2f4>)
    8c20:	681b      	ldr	r3, [r3, #0]
    8c22:	075e      	lsls	r6, r3, #29
    8c24:	d013      	beq.n	8c4e <bt_recv+0x62>
    8c26:	2301      	movs	r3, #1
    8c28:	f04f 0000 	mov.w	r0, #0
    8c2c:	f363 0002 	bfi	r0, r3, #0, #3
    8c30:	49ac      	ldr	r1, [pc, #688]	; (8ee4 <bt_recv+0x2f8>)
    8c32:	4bad      	ldr	r3, [pc, #692]	; (8ee8 <bt_recv+0x2fc>)
    8c34:	1ac9      	subs	r1, r1, r3
    8c36:	08c9      	lsrs	r1, r1, #3
    8c38:	f36f 00c5 	bfc	r0, #3, #3
    8c3c:	f361 108f 	bfi	r0, r1, #6, #10
    8c40:	f8ad 0000 	strh.w	r0, [sp]
    8c44:	462b      	mov	r3, r5
    8c46:	49a9      	ldr	r1, [pc, #676]	; (8eec <bt_recv+0x300>)
    8c48:	48a9      	ldr	r0, [pc, #676]	; (8ef0 <bt_recv+0x304>)
    8c4a:	f7f9 fa7b 	bl	2144 <log_3>
		net_buf_unref(buf);
    8c4e:	4620      	mov	r0, r4
    8c50:	f016 fb00 	bl	1f254 <net_buf_unref>
		return 0;
    8c54:	2000      	movs	r0, #0
}
    8c56:	b011      	add	sp, #68	; 0x44
    8c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    8c5c:	8ae0      	ldrh	r0, [r4, #22]
    8c5e:	f002 fa6d 	bl	b13c <bt_conn_lookup_handle>
	if (!conn) {
    8c62:	4605      	mov	r5, r0
    8c64:	b9b0      	cbnz	r0, 8c94 <bt_recv+0xa8>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    8c66:	4b9e      	ldr	r3, [pc, #632]	; (8ee0 <bt_recv+0x2f4>)
    8c68:	681b      	ldr	r3, [r3, #0]
    8c6a:	0758      	lsls	r0, r3, #29
    8c6c:	d0ef      	beq.n	8c4e <bt_recv+0x62>
    8c6e:	2201      	movs	r2, #1
    8c70:	f04f 0300 	mov.w	r3, #0
    8c74:	f362 0302 	bfi	r3, r2, #0, #3
    8c78:	499b      	ldr	r1, [pc, #620]	; (8ee8 <bt_recv+0x2fc>)
    8c7a:	4a9a      	ldr	r2, [pc, #616]	; (8ee4 <bt_recv+0x2f8>)
    8c7c:	489d      	ldr	r0, [pc, #628]	; (8ef4 <bt_recv+0x308>)
    8c7e:	1a52      	subs	r2, r2, r1
    8c80:	08d2      	lsrs	r2, r2, #3
    8c82:	f365 03c5 	bfi	r3, r5, #3, #3
    8c86:	f362 138f 	bfi	r3, r2, #6, #10
    8c8a:	4998      	ldr	r1, [pc, #608]	; (8eec <bt_recv+0x300>)
    8c8c:	8ae2      	ldrh	r2, [r4, #22]
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8c8e:	f7f9 fa41 	bl	2114 <log_2>
    8c92:	e7dc      	b.n	8c4e <bt_recv+0x62>
	acl(buf)->id = bt_conn_get_id(conn);
    8c94:	f002 fcea 	bl	b66c <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    8c98:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    8c9a:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    8c9c:	4621      	mov	r1, r4
    8c9e:	4628      	mov	r0, r5
    8ca0:	f001 feee 	bl	aa80 <bt_conn_recv>
	bt_conn_unref(conn);
    8ca4:	4628      	mov	r0, r5
    8ca6:	f002 fabb 	bl	b220 <bt_conn_unref>
    8caa:	e7d3      	b.n	8c54 <bt_recv+0x68>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    8cac:	6885      	ldr	r5, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    8cae:	782b      	ldrb	r3, [r5, #0]
    8cb0:	2b13      	cmp	r3, #19
    8cb2:	d81f      	bhi.n	8cf4 <bt_recv+0x108>
    8cb4:	fa02 f303 	lsl.w	r3, r2, r3
    8cb8:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    8cbc:	d01a      	beq.n	8cf4 <bt_recv+0x108>
    8cbe:	4b88      	ldr	r3, [pc, #544]	; (8ee0 <bt_recv+0x2f4>)
    8cc0:	681b      	ldr	r3, [r3, #0]
    8cc2:	0759      	lsls	r1, r3, #29
    8cc4:	d010      	beq.n	8ce8 <bt_recv+0xfc>
    8cc6:	f04f 0100 	mov.w	r1, #0
    8cca:	f362 0102 	bfi	r1, r2, #0, #3
    8cce:	4b85      	ldr	r3, [pc, #532]	; (8ee4 <bt_recv+0x2f8>)
    8cd0:	4a85      	ldr	r2, [pc, #532]	; (8ee8 <bt_recv+0x2fc>)
    8cd2:	4889      	ldr	r0, [pc, #548]	; (8ef8 <bt_recv+0x30c>)
    8cd4:	1a9b      	subs	r3, r3, r2
    8cd6:	f36f 01c5 	bfc	r1, #3, #3
    8cda:	08db      	lsrs	r3, r3, #3
    8cdc:	f363 118f 	bfi	r1, r3, #6, #10
    8ce0:	460a      	mov	r2, r1
    8ce2:	4986      	ldr	r1, [pc, #536]	; (8efc <bt_recv+0x310>)
    8ce4:	f7f9 fa02 	bl	20ec <log_1>
    8ce8:	4040      	eors	r0, r0
    8cea:	f380 8811 	msr	BASEPRI, r0
    8cee:	f04f 0004 	mov.w	r0, #4
    8cf2:	df02      	svc	2
	net_buf_pull(buf, sizeof(*hdr));
    8cf4:	f104 0608 	add.w	r6, r4, #8
    8cf8:	2102      	movs	r1, #2
    8cfa:	4630      	mov	r0, r6
    8cfc:	f016 fb58 	bl	1f3b0 <net_buf_simple_pull>
	switch (hdr->evt) {
    8d00:	782a      	ldrb	r2, [r5, #0]
    8d02:	2a08      	cmp	r2, #8
    8d04:	f000 809d 	beq.w	8e42 <bt_recv+0x256>
    8d08:	d825      	bhi.n	8d56 <bt_recv+0x16a>
    8d0a:	2a05      	cmp	r2, #5
    8d0c:	d040      	beq.n	8d90 <bt_recv+0x1a4>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    8d0e:	4b74      	ldr	r3, [pc, #464]	; (8ee0 <bt_recv+0x2f4>)
    8d10:	681b      	ldr	r3, [r3, #0]
    8d12:	f003 0307 	and.w	r3, r3, #7
    8d16:	2b01      	cmp	r3, #1
    8d18:	d999      	bls.n	8c4e <bt_recv+0x62>
    8d1a:	2302      	movs	r3, #2
    8d1c:	f04f 0500 	mov.w	r5, #0
    8d20:	f363 0502 	bfi	r5, r3, #0, #3
    8d24:	496f      	ldr	r1, [pc, #444]	; (8ee4 <bt_recv+0x2f8>)
    8d26:	4b70      	ldr	r3, [pc, #448]	; (8ee8 <bt_recv+0x2fc>)
    8d28:	68a0      	ldr	r0, [r4, #8]
    8d2a:	1ac9      	subs	r1, r1, r3
    8d2c:	08c9      	lsrs	r1, r1, #3
    8d2e:	4b73      	ldr	r3, [pc, #460]	; (8efc <bt_recv+0x310>)
    8d30:	f36f 05c5 	bfc	r5, #3, #3
    8d34:	f361 158f 	bfi	r5, r1, #6, #10
    8d38:	89a1      	ldrh	r1, [r4, #12]
    8d3a:	910a      	str	r1, [sp, #40]	; 0x28
    8d3c:	e9cd 3208 	strd	r3, r2, [sp, #32]
    8d40:	f7fe fc78 	bl	7634 <bt_hex_real>
    8d44:	f7f9 fb64 	bl	2410 <log_strdup>
    8d48:	462b      	mov	r3, r5
    8d4a:	900b      	str	r0, [sp, #44]	; 0x2c
    8d4c:	2204      	movs	r2, #4
    8d4e:	a908      	add	r1, sp, #32
    8d50:	486b      	ldr	r0, [pc, #428]	; (8f00 <bt_recv+0x314>)
    8d52:	f000 bcda 	b.w	970a <bt_recv+0xb1e>
	switch (hdr->evt) {
    8d56:	2a30      	cmp	r2, #48	; 0x30
    8d58:	f000 80a4 	beq.w	8ea4 <bt_recv+0x2b8>
    8d5c:	2a3e      	cmp	r2, #62	; 0x3e
    8d5e:	d1d6      	bne.n	8d0e <bt_recv+0x122>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    8d60:	68a5      	ldr	r5, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    8d62:	2101      	movs	r1, #1
    8d64:	4630      	mov	r0, r6
    8d66:	f016 fb23 	bl	1f3b0 <net_buf_simple_pull>
	switch (evt->subevent) {
    8d6a:	7829      	ldrb	r1, [r5, #0]
    8d6c:	1e4b      	subs	r3, r1, #1
    8d6e:	2b0b      	cmp	r3, #11
    8d70:	f200 84a8 	bhi.w	96c4 <bt_recv+0xad8>
    8d74:	e8df f013 	tbh	[pc, r3, lsl #1]
    8d78:	03d000e8 	.word	0x03d000e8
    8d7c:	0177013f 	.word	0x0177013f
    8d80:	01c002a2 	.word	0x01c002a2
    8d84:	038c0229 	.word	0x038c0229
    8d88:	013d03ac 	.word	0x013d03ac
    8d8c:	025504a6 	.word	0x025504a6
		hci_disconn_complete(buf);
    8d90:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    8d92:	783e      	ldrb	r6, [r7, #0]
    8d94:	2e00      	cmp	r6, #0
    8d96:	f47f af5a 	bne.w	8c4e <bt_recv+0x62>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    8d9a:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    8d9e:	4640      	mov	r0, r8
    8da0:	f002 f9cc 	bl	b13c <bt_conn_lookup_handle>
	if (!conn) {
    8da4:	4605      	mov	r5, r0
    8da6:	bb38      	cbnz	r0, 8df8 <bt_recv+0x20c>
		BT_ERR("Unable to look up conn with handle %u", handle);
    8da8:	4b4d      	ldr	r3, [pc, #308]	; (8ee0 <bt_recv+0x2f4>)
    8daa:	681b      	ldr	r3, [r3, #0]
    8dac:	075a      	lsls	r2, r3, #29
    8dae:	d011      	beq.n	8dd4 <bt_recv+0x1e8>
    8db0:	2201      	movs	r2, #1
    8db2:	f04f 0300 	mov.w	r3, #0
    8db6:	f362 0302 	bfi	r3, r2, #0, #3
    8dba:	494a      	ldr	r1, [pc, #296]	; (8ee4 <bt_recv+0x2f8>)
    8dbc:	4a4a      	ldr	r2, [pc, #296]	; (8ee8 <bt_recv+0x2fc>)
    8dbe:	1a89      	subs	r1, r1, r2
    8dc0:	f360 03c5 	bfi	r3, r0, #3, #3
    8dc4:	08c9      	lsrs	r1, r1, #3
    8dc6:	f361 138f 	bfi	r3, r1, #6, #10
    8dca:	4642      	mov	r2, r8
    8dcc:	494d      	ldr	r1, [pc, #308]	; (8f04 <bt_recv+0x318>)
    8dce:	484e      	ldr	r0, [pc, #312]	; (8f08 <bt_recv+0x31c>)
    8dd0:	f7f9 f9a0 	bl	2114 <log_2>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    8dd4:	2109      	movs	r1, #9
    8dd6:	484d      	ldr	r0, [pc, #308]	; (8f0c <bt_recv+0x320>)
    8dd8:	f7fe fe84 	bl	7ae4 <atomic_test_bit>
    8ddc:	2800      	cmp	r0, #0
    8dde:	f43f af36 	beq.w	8c4e <bt_recv+0x62>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    8de2:	2106      	movs	r1, #6
    8de4:	4849      	ldr	r0, [pc, #292]	; (8f0c <bt_recv+0x320>)
    8de6:	f7fe fe7d 	bl	7ae4 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    8dea:	2800      	cmp	r0, #0
    8dec:	f47f af2f 	bne.w	8c4e <bt_recv+0x62>
		set_advertise_enable(true);
    8df0:	2001      	movs	r0, #1
    8df2:	f7fe ff8f 	bl	7d14 <set_advertise_enable>
    8df6:	e72a      	b.n	8c4e <bt_recv+0x62>
	conn->err = evt->reason;
    8df8:	78fb      	ldrb	r3, [r7, #3]
    8dfa:	7303      	strb	r3, [r0, #12]
	k_thread_foreach(hci_stack_dump, "HCI");
    8dfc:	4944      	ldr	r1, [pc, #272]	; (8f10 <bt_recv+0x324>)
    8dfe:	4845      	ldr	r0, [pc, #276]	; (8f14 <bt_recv+0x328>)
    8e00:	f025 fac1 	bl	2e386 <k_thread_foreach>
	STACK_ANALYZE("tx stack", tx_thread_stack);
    8e04:	f44f 7220 	mov.w	r2, #640	; 0x280
    8e08:	4943      	ldr	r1, [pc, #268]	; (8f18 <bt_recv+0x32c>)
    8e0a:	4844      	ldr	r0, [pc, #272]	; (8f1c <bt_recv+0x330>)
    8e0c:	f7fe fd62 	bl	78d4 <stack_analyze>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8e10:	4631      	mov	r1, r6
    8e12:	4628      	mov	r0, r5
    8e14:	f002 f8a2 	bl	af5c <bt_conn_set_state>
	conn->handle = 0;
    8e18:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    8e1a:	78ae      	ldrb	r6, [r5, #2]
    8e1c:	b10e      	cbz	r6, 8e22 <bt_recv+0x236>
	bt_conn_unref(conn);
    8e1e:	4628      	mov	r0, r5
    8e20:	e11e      	b.n	9060 <bt_recv+0x474>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    8e22:	4631      	mov	r1, r6
    8e24:	1d28      	adds	r0, r5, #4
    8e26:	f7fe fe5d 	bl	7ae4 <atomic_test_bit>
    8e2a:	b130      	cbz	r0, 8e3a <bt_recv+0x24e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    8e2c:	4628      	mov	r0, r5
    8e2e:	2101      	movs	r1, #1
    8e30:	f002 f894 	bl	af5c <bt_conn_set_state>
		bt_le_scan_update(false);
    8e34:	4630      	mov	r0, r6
    8e36:	f7ff fc39 	bl	86ac <bt_le_scan_update>
	bt_conn_unref(conn);
    8e3a:	4628      	mov	r0, r5
    8e3c:	f002 f9f0 	bl	b220 <bt_conn_unref>
    8e40:	e7c8      	b.n	8dd4 <bt_recv+0x1e8>
		hci_encrypt_change(buf);
    8e42:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    8e44:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    8e48:	4638      	mov	r0, r7
    8e4a:	f002 f977 	bl	b13c <bt_conn_lookup_handle>
	if (!conn) {
    8e4e:	4605      	mov	r5, r0
    8e50:	b9a8      	cbnz	r0, 8e7e <bt_recv+0x292>
		BT_ERR("Unable to look up conn with handle %u", handle);
    8e52:	4b23      	ldr	r3, [pc, #140]	; (8ee0 <bt_recv+0x2f4>)
    8e54:	681b      	ldr	r3, [r3, #0]
    8e56:	075b      	lsls	r3, r3, #29
    8e58:	f43f aef9 	beq.w	8c4e <bt_recv+0x62>
    8e5c:	2201      	movs	r2, #1
    8e5e:	f04f 0300 	mov.w	r3, #0
    8e62:	f362 0302 	bfi	r3, r2, #0, #3
    8e66:	491f      	ldr	r1, [pc, #124]	; (8ee4 <bt_recv+0x2f8>)
    8e68:	4a1f      	ldr	r2, [pc, #124]	; (8ee8 <bt_recv+0x2fc>)
    8e6a:	1a89      	subs	r1, r1, r2
    8e6c:	08c9      	lsrs	r1, r1, #3
    8e6e:	f360 03c5 	bfi	r3, r0, #3, #3
    8e72:	f361 138f 	bfi	r3, r1, #6, #10
    8e76:	492a      	ldr	r1, [pc, #168]	; (8f20 <bt_recv+0x334>)
    8e78:	463a      	mov	r2, r7
		BT_ERR("Unable to look up conn with handle %u", handle);
    8e7a:	4823      	ldr	r0, [pc, #140]	; (8f08 <bt_recv+0x31c>)
    8e7c:	e707      	b.n	8c8e <bt_recv+0xa2>
	if (evt->status) {
    8e7e:	7833      	ldrb	r3, [r6, #0]
    8e80:	7882      	ldrb	r2, [r0, #2]
    8e82:	b123      	cbz	r3, 8e8e <bt_recv+0x2a2>
		if (conn->type == BT_CONN_TYPE_LE) {
    8e84:	2a00      	cmp	r2, #0
    8e86:	d1ca      	bne.n	8e1e <bt_recv+0x232>
			conn->required_sec_level = conn->sec_level;
    8e88:	7a43      	ldrb	r3, [r0, #9]
    8e8a:	7283      	strb	r3, [r0, #10]
    8e8c:	e7c7      	b.n	8e1e <bt_recv+0x232>
	conn->encrypt = evt->encrypt;
    8e8e:	78f3      	ldrb	r3, [r6, #3]
    8e90:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    8e92:	2a00      	cmp	r2, #0
    8e94:	d150      	bne.n	8f38 <bt_recv+0x34c>
		if (conn->encrypt) {
    8e96:	b10b      	cbz	r3, 8e9c <bt_recv+0x2b0>
		bt_smp_update_keys(conn);
    8e98:	f008 f86c 	bl	10f74 <bt_smp_update_keys>
		update_sec_level(conn);
    8e9c:	4628      	mov	r0, r5
    8e9e:	f7fe fd39 	bl	7914 <update_sec_level>
    8ea2:	e049      	b.n	8f38 <bt_recv+0x34c>
		hci_encrypt_key_refresh_complete(buf);
    8ea4:	68a6      	ldr	r6, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8ea6:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    8eaa:	4638      	mov	r0, r7
    8eac:	f002 f946 	bl	b13c <bt_conn_lookup_handle>
	if (!conn) {
    8eb0:	4605      	mov	r5, r0
    8eb2:	2800      	cmp	r0, #0
    8eb4:	d138      	bne.n	8f28 <bt_recv+0x33c>
		BT_ERR("Unable to look up conn with handle %u", handle);
    8eb6:	4b0a      	ldr	r3, [pc, #40]	; (8ee0 <bt_recv+0x2f4>)
    8eb8:	681b      	ldr	r3, [r3, #0]
    8eba:	075e      	lsls	r6, r3, #29
    8ebc:	f43f aec7 	beq.w	8c4e <bt_recv+0x62>
    8ec0:	2201      	movs	r2, #1
    8ec2:	f04f 0300 	mov.w	r3, #0
    8ec6:	f362 0302 	bfi	r3, r2, #0, #3
    8eca:	4906      	ldr	r1, [pc, #24]	; (8ee4 <bt_recv+0x2f8>)
    8ecc:	4a06      	ldr	r2, [pc, #24]	; (8ee8 <bt_recv+0x2fc>)
    8ece:	1a89      	subs	r1, r1, r2
    8ed0:	08c9      	lsrs	r1, r1, #3
    8ed2:	f360 03c5 	bfi	r3, r0, #3, #3
    8ed6:	f361 138f 	bfi	r3, r1, #6, #10
    8eda:	463a      	mov	r2, r7
    8edc:	4911      	ldr	r1, [pc, #68]	; (8f24 <bt_recv+0x338>)
    8ede:	e7cc      	b.n	8e7a <bt_recv+0x28e>
    8ee0:	2000e238 	.word	0x2000e238
    8ee4:	0002efb0 	.word	0x0002efb0
    8ee8:	0002ef38 	.word	0x0002ef38
    8eec:	00030c1d 	.word	0x00030c1d
    8ef0:	00031238 	.word	0x00031238
    8ef4:	00031260 	.word	0x00031260
    8ef8:	00031286 	.word	0x00031286
    8efc:	00030d81 	.word	0x00030d81
    8f00:	0003135c 	.word	0x0003135c
    8f04:	00030c3f 	.word	0x00030c3f
    8f08:	000312b9 	.word	0x000312b9
    8f0c:	2000d7e8 	.word	0x2000d7e8
    8f10:	000312e3 	.word	0x000312e3
    8f14:	00007909 	.word	0x00007909
    8f18:	20005100 	.word	0x20005100
    8f1c:	000312e7 	.word	0x000312e7
    8f20:	00030d0e 	.word	0x00030d0e
    8f24:	00030d21 	.word	0x00030d21
	if (evt->status) {
    8f28:	7831      	ldrb	r1, [r6, #0]
    8f2a:	b111      	cbz	r1, 8f32 <bt_recv+0x346>
		bt_l2cap_encrypt_change(conn, evt->status);
    8f2c:	f002 fdac 	bl	ba88 <bt_l2cap_encrypt_change>
    8f30:	e68d      	b.n	8c4e <bt_recv+0x62>
	if (conn->type == BT_CONN_TYPE_LE) {
    8f32:	7883      	ldrb	r3, [r0, #2]
    8f34:	2b00      	cmp	r3, #0
    8f36:	d0af      	beq.n	8e98 <bt_recv+0x2ac>
	bt_l2cap_encrypt_change(conn, evt->status);
    8f38:	4628      	mov	r0, r5
    8f3a:	7831      	ldrb	r1, [r6, #0]
    8f3c:	f002 fda4 	bl	ba88 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    8f40:	4628      	mov	r0, r5
    8f42:	f001 fd35 	bl	a9b0 <bt_conn_security_changed>
    8f46:	e76a      	b.n	8e1e <bt_recv+0x232>
		le_legacy_conn_complete(buf);
    8f48:	68a5      	ldr	r5, [r4, #8]
	enh.status         = evt->status;
    8f4a:	782b      	ldrb	r3, [r5, #0]
    8f4c:	f88d 3020 	strb.w	r3, [sp, #32]
	enh.handle         = evt->handle;
    8f50:	f8b5 3001 	ldrh.w	r3, [r5, #1]
    8f54:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.role           = evt->role;
    8f58:	78eb      	ldrb	r3, [r5, #3]
    8f5a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	enh.interval       = evt->interval;
    8f5e:	f8b5 300b 	ldrh.w	r3, [r5, #11]
    8f62:	f8ad 3037 	strh.w	r3, [sp, #55]	; 0x37
	enh.latency        = evt->latency;
    8f66:	f8b5 300d 	ldrh.w	r3, [r5, #13]
    8f6a:	f8ad 3039 	strh.w	r3, [sp, #57]	; 0x39
	enh.supv_timeout   = evt->supv_timeout;
    8f6e:	f8b5 300f 	ldrh.w	r3, [r5, #15]
    8f72:	f8ad 303b 	strh.w	r3, [sp, #59]	; 0x3b
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    8f76:	ae09      	add	r6, sp, #36	; 0x24
	enh.clock_accuracy = evt->clock_accuracy;
    8f78:	7c6b      	ldrb	r3, [r5, #17]
    8f7a:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    8f7e:	1d29      	adds	r1, r5, #4
    8f80:	4630      	mov	r0, r6
    8f82:	f7fe fc85 	bl	7890 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    8f86:	2700      	movs	r7, #0
    8f88:	a904      	add	r1, sp, #16
    8f8a:	2206      	movs	r2, #6
    8f8c:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
    8f90:	9704      	str	r7, [sp, #16]
    8f92:	f8ad 7014 	strh.w	r7, [sp, #20]
    8f96:	f7fd fe77 	bl	6c88 <memcpy>
	if (evt->role == BT_HCI_ROLE_SLAVE) {
    8f9a:	78eb      	ldrb	r3, [r5, #3]
    8f9c:	2b01      	cmp	r3, #1
		keys = bt_keys_find_irk(id, addr);
    8f9e:	bf0a      	itet	eq
    8fa0:	4bbc      	ldreq	r3, [pc, #752]	; (9294 <bt_recv+0x6a8>)
    8fa2:	4638      	movne	r0, r7
    8fa4:	7a18      	ldrbeq	r0, [r3, #8]
    8fa6:	4631      	mov	r1, r6
    8fa8:	f008 f920 	bl	111ec <bt_keys_find_irk>
		if (keys) {
    8fac:	b1b0      	cbz	r0, 8fdc <bt_recv+0x3f0>
			return &keys->addr;
    8fae:	1c45      	adds	r5, r0, #1
	if (id_addr != &enh.peer_addr) {
    8fb0:	42b5      	cmp	r5, r6
    8fb2:	d013      	beq.n	8fdc <bt_recv+0x3f0>
    8fb4:	2206      	movs	r2, #6
    8fb6:	f10d 0125 	add.w	r1, sp, #37	; 0x25
    8fba:	f10d 0031 	add.w	r0, sp, #49	; 0x31
    8fbe:	f7fd fe63 	bl	6c88 <memcpy>
		bt_addr_le_copy(&enh.peer_addr, id_addr);
    8fc2:	4629      	mov	r1, r5
    8fc4:	4630      	mov	r0, r6
    8fc6:	f7fe fc63 	bl	7890 <bt_addr_le_copy>
		enh.peer_addr.type += BT_ADDR_LE_PUBLIC_ID;
    8fca:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    8fce:	3302      	adds	r3, #2
    8fd0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	le_enh_conn_complete(&enh);
    8fd4:	a808      	add	r0, sp, #32
		le_enh_conn_complete((void *)buf->data);
    8fd6:	f7ff fbe5 	bl	87a4 <le_enh_conn_complete>
    8fda:	e638      	b.n	8c4e <bt_recv+0x62>
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    8fdc:	2300      	movs	r3, #0
    8fde:	2206      	movs	r2, #6
    8fe0:	a906      	add	r1, sp, #24
    8fe2:	f10d 0031 	add.w	r0, sp, #49	; 0x31
    8fe6:	9306      	str	r3, [sp, #24]
    8fe8:	f8ad 301c 	strh.w	r3, [sp, #28]
    8fec:	f7fd fe4c 	bl	6c88 <memcpy>
    8ff0:	e7f0      	b.n	8fd4 <bt_recv+0x3e8>
		le_enh_conn_complete((void *)buf->data);
    8ff2:	68a0      	ldr	r0, [r4, #8]
    8ff4:	e7ef      	b.n	8fd6 <bt_recv+0x3ea>
		le_conn_update_complete(buf);
    8ff6:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8ff8:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8ffc:	4638      	mov	r0, r7
    8ffe:	f002 f89d 	bl	b13c <bt_conn_lookup_handle>
	if (!conn) {
    9002:	4606      	mov	r6, r0
    9004:	b9a8      	cbnz	r0, 9032 <bt_recv+0x446>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9006:	4ba4      	ldr	r3, [pc, #656]	; (9298 <bt_recv+0x6ac>)
    9008:	681b      	ldr	r3, [r3, #0]
    900a:	0758      	lsls	r0, r3, #29
    900c:	f43f ae1f 	beq.w	8c4e <bt_recv+0x62>
    9010:	2201      	movs	r2, #1
    9012:	f04f 0300 	mov.w	r3, #0
    9016:	f362 0302 	bfi	r3, r2, #0, #3
    901a:	49a0      	ldr	r1, [pc, #640]	; (929c <bt_recv+0x6b0>)
    901c:	4aa0      	ldr	r2, [pc, #640]	; (92a0 <bt_recv+0x6b4>)
    901e:	1a89      	subs	r1, r1, r2
    9020:	08c9      	lsrs	r1, r1, #3
    9022:	f366 03c5 	bfi	r3, r6, #3, #3
    9026:	f361 138f 	bfi	r3, r1, #6, #10
    902a:	499e      	ldr	r1, [pc, #632]	; (92a4 <bt_recv+0x6b8>)
    902c:	463a      	mov	r2, r7
    902e:	489e      	ldr	r0, [pc, #632]	; (92a8 <bt_recv+0x6bc>)
    9030:	e62d      	b.n	8c8e <bt_recv+0xa2>
	if (!evt->status) {
    9032:	782b      	ldrb	r3, [r5, #0]
    9034:	b99b      	cbnz	r3, 905e <bt_recv+0x472>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    9036:	792a      	ldrb	r2, [r5, #4]
    9038:	78eb      	ldrb	r3, [r5, #3]
    903a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    903e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    9042:	79aa      	ldrb	r2, [r5, #6]
    9044:	796b      	ldrb	r3, [r5, #5]
    9046:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    904a:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    904e:	79eb      	ldrb	r3, [r5, #7]
    9050:	7a2a      	ldrb	r2, [r5, #8]
    9052:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9056:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    905a:	f001 fc1f 	bl	a89c <notify_le_param_updated>
	bt_conn_unref(conn);
    905e:	4630      	mov	r0, r6
	bt_conn_unref(conn);
    9060:	f002 f8de 	bl	b220 <bt_conn_unref>
    9064:	e5f3      	b.n	8c4e <bt_recv+0x62>
		le_remote_feat_complete(buf);
    9066:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    9068:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    906c:	4638      	mov	r0, r7
    906e:	f002 f865 	bl	b13c <bt_conn_lookup_handle>
	if (!conn) {
    9072:	4605      	mov	r5, r0
    9074:	b9a0      	cbnz	r0, 90a0 <bt_recv+0x4b4>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9076:	4b88      	ldr	r3, [pc, #544]	; (9298 <bt_recv+0x6ac>)
    9078:	681b      	ldr	r3, [r3, #0]
    907a:	0759      	lsls	r1, r3, #29
    907c:	f43f ade7 	beq.w	8c4e <bt_recv+0x62>
    9080:	2201      	movs	r2, #1
    9082:	f04f 0300 	mov.w	r3, #0
    9086:	f362 0302 	bfi	r3, r2, #0, #3
    908a:	4984      	ldr	r1, [pc, #528]	; (929c <bt_recv+0x6b0>)
    908c:	4a84      	ldr	r2, [pc, #528]	; (92a0 <bt_recv+0x6b4>)
    908e:	1a89      	subs	r1, r1, r2
    9090:	08c9      	lsrs	r1, r1, #3
    9092:	f360 03c5 	bfi	r3, r0, #3, #3
    9096:	f361 138f 	bfi	r3, r1, #6, #10
    909a:	463a      	mov	r2, r7
    909c:	4983      	ldr	r1, [pc, #524]	; (92ac <bt_recv+0x6c0>)
    909e:	e7c6      	b.n	902e <bt_recv+0x442>
	if (!evt->status) {
    90a0:	7833      	ldrb	r3, [r6, #0]
    90a2:	b923      	cbnz	r3, 90ae <bt_recv+0x4c2>
		memcpy(conn->le.features, evt->features,
    90a4:	2208      	movs	r2, #8
    90a6:	1cf1      	adds	r1, r6, #3
    90a8:	3068      	adds	r0, #104	; 0x68
    90aa:	f7fd fded 	bl	6c88 <memcpy>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    90ae:	4e79      	ldr	r6, [pc, #484]	; (9294 <bt_recv+0x6a8>)
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    90b0:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    90b4:	07d2      	lsls	r2, r2, #31
    90b6:	d50c      	bpl.n	90d2 <bt_recv+0x4e6>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    90b8:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
    90bc:	07db      	lsls	r3, r3, #31
    90be:	d508      	bpl.n	90d2 <bt_recv+0x4e6>
		err = hci_le_set_phy(conn);
    90c0:	4628      	mov	r0, r5
    90c2:	f7ff fb25 	bl	8710 <hci_le_set_phy.isra.35>
		if (!err) {
    90c6:	b920      	cbnz	r0, 90d2 <bt_recv+0x4e6>
    90c8:	2180      	movs	r1, #128	; 0x80
    90ca:	1d28      	adds	r0, r5, #4
    90cc:	f7fe fbe3 	bl	7896 <atomic_or>
    90d0:	e6a5      	b.n	8e1e <bt_recv+0x232>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    90d2:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    90d6:	069f      	lsls	r7, r3, #26
    90d8:	f140 809b 	bpl.w	9212 <bt_recv+0x626>
    90dc:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    90e0:	069e      	lsls	r6, r3, #26
    90e2:	f140 8096 	bpl.w	9212 <bt_recv+0x626>
		err = hci_le_set_data_len(conn);
    90e6:	4628      	mov	r0, r5
    90e8:	f7ff fb32 	bl	8750 <hci_le_set_data_len.isra.36>
		if (!err) {
    90ec:	2800      	cmp	r0, #0
    90ee:	f040 8090 	bne.w	9212 <bt_recv+0x626>
    90f2:	f44f 7180 	mov.w	r1, #256	; 0x100
    90f6:	e7e8      	b.n	90ca <bt_recv+0x4de>
		le_conn_param_req(buf);
    90f8:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    90fa:	78d9      	ldrb	r1, [r3, #3]
    90fc:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    90fe:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    9100:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9104:	f8ad 2020 	strh.w	r2, [sp, #32]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    9108:	7959      	ldrb	r1, [r3, #5]
    910a:	791a      	ldrb	r2, [r3, #4]
    910c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9110:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
	param.latency = sys_le16_to_cpu(evt->latency);
    9114:	799a      	ldrb	r2, [r3, #6]
    9116:	79d9      	ldrb	r1, [r3, #7]
    9118:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    911c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9120:	7a1a      	ldrb	r2, [r3, #8]
    9122:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    9124:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9126:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    912a:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    912c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	conn = bt_conn_lookup_handle(handle);
    9130:	f002 f804 	bl	b13c <bt_conn_lookup_handle>
	if (!conn) {
    9134:	4680      	mov	r8, r0
    9136:	b9d0      	cbnz	r0, 916e <bt_recv+0x582>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9138:	4b57      	ldr	r3, [pc, #348]	; (9298 <bt_recv+0x6ac>)
    913a:	681b      	ldr	r3, [r3, #0]
    913c:	0758      	lsls	r0, r3, #29
    913e:	d011      	beq.n	9164 <bt_recv+0x578>
    9140:	2201      	movs	r2, #1
    9142:	f04f 0300 	mov.w	r3, #0
    9146:	f362 0302 	bfi	r3, r2, #0, #3
    914a:	4955      	ldr	r1, [pc, #340]	; (92a0 <bt_recv+0x6b4>)
    914c:	4a53      	ldr	r2, [pc, #332]	; (929c <bt_recv+0x6b0>)
    914e:	4856      	ldr	r0, [pc, #344]	; (92a8 <bt_recv+0x6bc>)
    9150:	1a52      	subs	r2, r2, r1
    9152:	08d2      	lsrs	r2, r2, #3
    9154:	f368 03c5 	bfi	r3, r8, #3, #3
    9158:	f362 138f 	bfi	r3, r2, #6, #10
    915c:	4954      	ldr	r1, [pc, #336]	; (92b0 <bt_recv+0x6c4>)
    915e:	462a      	mov	r2, r5
    9160:	f7f8 ffd8 	bl	2114 <log_2>
		return le_conn_param_neg_reply(handle,
    9164:	2102      	movs	r1, #2
    9166:	4628      	mov	r0, r5
    9168:	f7ff fc2c 	bl	89c4 <le_conn_param_neg_reply>
    916c:	e56f      	b.n	8c4e <bt_recv+0x62>
	if (!le_param_req(conn, &param)) {
    916e:	a908      	add	r1, sp, #32
    9170:	f001 fba8 	bl	a8c4 <le_param_req>
    9174:	b928      	cbnz	r0, 9182 <bt_recv+0x596>
		err = le_conn_param_neg_reply(handle,
    9176:	211e      	movs	r1, #30
    9178:	4628      	mov	r0, r5
    917a:	f7ff fc23 	bl	89c4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    917e:	4640      	mov	r0, r8
    9180:	e76e      	b.n	9060 <bt_recv+0x474>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    9182:	210e      	movs	r1, #14
    9184:	f242 0020 	movw	r0, #8224	; 0x2020
    9188:	f7fe fcda 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    918c:	4606      	mov	r6, r0
    918e:	2800      	cmp	r0, #0
    9190:	d0f5      	beq.n	917e <bt_recv+0x592>
	cp = net_buf_add(buf, sizeof(*cp));
    9192:	210e      	movs	r1, #14
    9194:	3008      	adds	r0, #8
    9196:	f016 f8bb 	bl	1f310 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    919a:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    919c:	4605      	mov	r5, r0
	(void)memset(cp, 0, sizeof(*cp));
    919e:	2100      	movs	r1, #0
    91a0:	f7fd fd9f 	bl	6ce2 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    91a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    91a8:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    91aa:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    91ae:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    91b0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    91b4:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    91b6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
	cp->handle = sys_cpu_to_le16(handle);
    91ba:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    91bc:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    91be:	4631      	mov	r1, r6
    91c0:	f242 0020 	movw	r0, #8224	; 0x2020
    91c4:	f7ff f9d6 	bl	8574 <bt_hci_cmd_send>
    91c8:	e7d9      	b.n	917e <bt_recv+0x592>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    91ca:	68a3      	ldr	r3, [r4, #8]
    91cc:	881e      	ldrh	r6, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    91ce:	4630      	mov	r0, r6
    91d0:	f001 ffb4 	bl	b13c <bt_conn_lookup_handle>
	if (!conn) {
    91d4:	4605      	mov	r5, r0
    91d6:	b9a0      	cbnz	r0, 9202 <bt_recv+0x616>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    91d8:	4b2f      	ldr	r3, [pc, #188]	; (9298 <bt_recv+0x6ac>)
    91da:	681b      	ldr	r3, [r3, #0]
    91dc:	0759      	lsls	r1, r3, #29
    91de:	f43f ad36 	beq.w	8c4e <bt_recv+0x62>
    91e2:	2201      	movs	r2, #1
    91e4:	f04f 0300 	mov.w	r3, #0
    91e8:	f362 0302 	bfi	r3, r2, #0, #3
    91ec:	492b      	ldr	r1, [pc, #172]	; (929c <bt_recv+0x6b0>)
    91ee:	4a2c      	ldr	r2, [pc, #176]	; (92a0 <bt_recv+0x6b4>)
    91f0:	1a89      	subs	r1, r1, r2
    91f2:	08c9      	lsrs	r1, r1, #3
    91f4:	f360 03c5 	bfi	r3, r0, #3, #3
    91f8:	f361 138f 	bfi	r3, r1, #6, #10
    91fc:	4632      	mov	r2, r6
    91fe:	492d      	ldr	r1, [pc, #180]	; (92b4 <bt_recv+0x6c8>)
    9200:	e715      	b.n	902e <bt_recv+0x442>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9202:	f46f 7180 	mvn.w	r1, #256	; 0x100
    9206:	3004      	adds	r0, #4
    9208:	f7fe fb54 	bl	78b4 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    920c:	05c2      	lsls	r2, r0, #23
    920e:	f57f ae06 	bpl.w	8e1e <bt_recv+0x232>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9212:	78eb      	ldrb	r3, [r5, #3]
    9214:	2b01      	cmp	r3, #1
    9216:	f47f ae02 	bne.w	8e1e <bt_recv+0x232>
		slave_update_conn_param(conn);
    921a:	4628      	mov	r0, r5
    921c:	f7fe fc6c 	bl	7af8 <slave_update_conn_param>
    9220:	e5fd      	b.n	8e1e <bt_recv+0x232>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    9222:	68a3      	ldr	r3, [r4, #8]
    9224:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    9228:	4630      	mov	r0, r6
    922a:	f001 ff87 	bl	b13c <bt_conn_lookup_handle>
	if (!conn) {
    922e:	4605      	mov	r5, r0
    9230:	b9a0      	cbnz	r0, 925c <bt_recv+0x670>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9232:	4b19      	ldr	r3, [pc, #100]	; (9298 <bt_recv+0x6ac>)
    9234:	681b      	ldr	r3, [r3, #0]
    9236:	075b      	lsls	r3, r3, #29
    9238:	f43f ad09 	beq.w	8c4e <bt_recv+0x62>
    923c:	2201      	movs	r2, #1
    923e:	f04f 0300 	mov.w	r3, #0
    9242:	f362 0302 	bfi	r3, r2, #0, #3
    9246:	4915      	ldr	r1, [pc, #84]	; (929c <bt_recv+0x6b0>)
    9248:	4a15      	ldr	r2, [pc, #84]	; (92a0 <bt_recv+0x6b4>)
    924a:	1a89      	subs	r1, r1, r2
    924c:	08c9      	lsrs	r1, r1, #3
    924e:	f360 03c5 	bfi	r3, r0, #3, #3
    9252:	f361 138f 	bfi	r3, r1, #6, #10
    9256:	4632      	mov	r2, r6
    9258:	4917      	ldr	r1, [pc, #92]	; (92b8 <bt_recv+0x6cc>)
    925a:	e6e8      	b.n	902e <bt_recv+0x442>
	    !atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    925c:	1d06      	adds	r6, r0, #4
    925e:	f06f 0180 	mvn.w	r1, #128	; 0x80
    9262:	4630      	mov	r0, r6
    9264:	f7fe fb26 	bl	78b4 <atomic_and>
	if (!IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) ||
    9268:	0607      	lsls	r7, r0, #24
    926a:	f57f add8 	bpl.w	8e1e <bt_recv+0x232>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    926e:	4b09      	ldr	r3, [pc, #36]	; (9294 <bt_recv+0x6a8>)
    9270:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    9274:	0698      	lsls	r0, r3, #26
    9276:	d5cc      	bpl.n	9212 <bt_recv+0x626>
    9278:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    927c:	0699      	lsls	r1, r3, #26
    927e:	d5c8      	bpl.n	9212 <bt_recv+0x626>
		err = hci_le_set_data_len(conn);
    9280:	4628      	mov	r0, r5
    9282:	f7ff fa65 	bl	8750 <hci_le_set_data_len.isra.36>
		if (!err) {
    9286:	2800      	cmp	r0, #0
    9288:	d1c3      	bne.n	9212 <bt_recv+0x626>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    928a:	f44f 7180 	mov.w	r1, #256	; 0x100
    928e:	4630      	mov	r0, r6
    9290:	e71c      	b.n	90cc <bt_recv+0x4e0>
    9292:	bf00      	nop
    9294:	2000d778 	.word	0x2000d778
    9298:	2000e238 	.word	0x2000e238
    929c:	0002efb0 	.word	0x0002efb0
    92a0:	0002ef38 	.word	0x0002ef38
    92a4:	00030cbd 	.word	0x00030cbd
    92a8:	000312f0 	.word	0x000312f0
    92ac:	00030c69 	.word	0x00030c69
    92b0:	00030cab 	.word	0x00030cab
    92b4:	00030c81 	.word	0x00030c81
    92b8:	00030c94 	.word	0x00030c94
		le_ltk_request(buf);
    92bc:	68a6      	ldr	r6, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    92be:	8837      	ldrh	r7, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
    92c0:	4638      	mov	r0, r7
    92c2:	f001 ff3b 	bl	b13c <bt_conn_lookup_handle>
	if (!conn) {
    92c6:	4605      	mov	r5, r0
    92c8:	b9a0      	cbnz	r0, 92f4 <bt_recv+0x708>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    92ca:	4b89      	ldr	r3, [pc, #548]	; (94f0 <bt_recv+0x904>)
    92cc:	681b      	ldr	r3, [r3, #0]
    92ce:	075a      	lsls	r2, r3, #29
    92d0:	f43f acbd 	beq.w	8c4e <bt_recv+0x62>
    92d4:	2201      	movs	r2, #1
    92d6:	f04f 0300 	mov.w	r3, #0
    92da:	f362 0302 	bfi	r3, r2, #0, #3
    92de:	4985      	ldr	r1, [pc, #532]	; (94f4 <bt_recv+0x908>)
    92e0:	4a85      	ldr	r2, [pc, #532]	; (94f8 <bt_recv+0x90c>)
    92e2:	1a89      	subs	r1, r1, r2
    92e4:	08c9      	lsrs	r1, r1, #3
    92e6:	f360 03c5 	bfi	r3, r0, #3, #3
    92ea:	f361 138f 	bfi	r3, r1, #6, #10
    92ee:	463a      	mov	r2, r7
    92f0:	4982      	ldr	r1, [pc, #520]	; (94fc <bt_recv+0x910>)
    92f2:	e69c      	b.n	902e <bt_recv+0x442>
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    92f4:	f8d6 2002 	ldr.w	r2, [r6, #2]
    92f8:	f8d6 3006 	ldr.w	r3, [r6, #6]
    92fc:	4313      	orrs	r3, r2
    92fe:	d134      	bne.n	936a <bt_recv+0x77e>
    9300:	8973      	ldrh	r3, [r6, #10]
    9302:	bb93      	cbnz	r3, 936a <bt_recv+0x77e>
    9304:	a908      	add	r1, sp, #32
    9306:	f007 fec7 	bl	11098 <bt_smp_get_tk>
    930a:	b370      	cbz	r0, 936a <bt_recv+0x77e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    930c:	2112      	movs	r1, #18
    930e:	f242 001a 	movw	r0, #8218	; 0x201a
    9312:	f7fe fc15 	bl	7b40 <bt_hci_cmd_create>
		if (!buf) {
    9316:	4607      	mov	r7, r0
    9318:	b9b0      	cbnz	r0, 9348 <bt_recv+0x75c>
			BT_ERR("Out of command buffers");
    931a:	4b75      	ldr	r3, [pc, #468]	; (94f0 <bt_recv+0x904>)
    931c:	681b      	ldr	r3, [r3, #0]
    931e:	0759      	lsls	r1, r3, #29
    9320:	f43f ad7d 	beq.w	8e1e <bt_recv+0x232>
    9324:	2301      	movs	r3, #1
    9326:	f04f 0200 	mov.w	r2, #0
    932a:	f363 0202 	bfi	r2, r3, #0, #3
    932e:	4972      	ldr	r1, [pc, #456]	; (94f8 <bt_recv+0x90c>)
    9330:	4b70      	ldr	r3, [pc, #448]	; (94f4 <bt_recv+0x908>)
    9332:	1a5b      	subs	r3, r3, r1
    9334:	f367 02c5 	bfi	r2, r7, #3, #3
    9338:	08db      	lsrs	r3, r3, #3
    933a:	4970      	ldr	r1, [pc, #448]	; (94fc <bt_recv+0x910>)
    933c:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Out of command buffers");
    9340:	486f      	ldr	r0, [pc, #444]	; (9500 <bt_recv+0x914>)
    9342:	f7f8 fed3 	bl	20ec <log_1>
    9346:	e56a      	b.n	8e1e <bt_recv+0x232>
		cp = net_buf_add(buf, sizeof(*cp));
    9348:	2112      	movs	r1, #18
    934a:	3008      	adds	r0, #8
    934c:	f015 ffe0 	bl	1f310 <net_buf_simple_add>
		cp->handle = evt->handle;
    9350:	8833      	ldrh	r3, [r6, #0]
    9352:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    9356:	2210      	movs	r2, #16
    9358:	a908      	add	r1, sp, #32
    935a:	f7fd fc95 	bl	6c88 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    935e:	4639      	mov	r1, r7
    9360:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    9364:	f7ff f906 	bl	8574 <bt_hci_cmd_send>
    9368:	e559      	b.n	8e1e <bt_recv+0x232>
	if (!conn->le.keys) {
    936a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    936c:	2b00      	cmp	r3, #0
    936e:	f040 81ec 	bne.w	974a <bt_recv+0xb5e>
					     &conn->le.dst);
    9372:	f105 0748 	add.w	r7, r5, #72	; 0x48
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
    9376:	463a      	mov	r2, r7
    9378:	7a29      	ldrb	r1, [r5, #8]
    937a:	2020      	movs	r0, #32
    937c:	f007 ff0e 	bl	1119c <bt_keys_find>
    9380:	6728      	str	r0, [r5, #112]	; 0x70
		if (!conn->le.keys) {
    9382:	2800      	cmp	r0, #0
    9384:	f040 81e1 	bne.w	974a <bt_recv+0xb5e>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    9388:	463a      	mov	r2, r7
    938a:	7a29      	ldrb	r1, [r5, #8]
    938c:	2001      	movs	r0, #1
    938e:	f007 ff05 	bl	1119c <bt_keys_find>
    9392:	6728      	str	r0, [r5, #112]	; 0x70
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    9394:	2800      	cmp	r0, #0
    9396:	d056      	beq.n	9446 <bt_recv+0x85a>
    9398:	8941      	ldrh	r1, [r0, #10]
    939a:	068b      	lsls	r3, r1, #26
    939c:	d52c      	bpl.n	93f8 <bt_recv+0x80c>
	    evt->rand == 0 && evt->ediv == 0) {
    939e:	f8d6 2002 	ldr.w	r2, [r6, #2]
    93a2:	f8d6 3006 	ldr.w	r3, [r6, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    93a6:	4313      	orrs	r3, r2
    93a8:	d126      	bne.n	93f8 <bt_recv+0x80c>
	    evt->rand == 0 && evt->ediv == 0) {
    93aa:	f8b6 800a 	ldrh.w	r8, [r6, #10]
    93ae:	f1b8 0f00 	cmp.w	r8, #0
    93b2:	d121      	bne.n	93f8 <bt_recv+0x80c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    93b4:	2112      	movs	r1, #18
    93b6:	f242 001a 	movw	r0, #8218	; 0x201a
    93ba:	f7fe fbc1 	bl	7b40 <bt_hci_cmd_create>
		if (!buf) {
    93be:	4607      	mov	r7, r0
    93c0:	2800      	cmp	r0, #0
    93c2:	d0aa      	beq.n	931a <bt_recv+0x72e>
		cp = net_buf_add(buf, sizeof(*cp));
    93c4:	2112      	movs	r1, #18
    93c6:	3008      	adds	r0, #8
    93c8:	f015 ffa2 	bl	1f310 <net_buf_simple_add>
		cp->handle = evt->handle;
    93cc:	8833      	ldrh	r3, [r6, #0]
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    93ce:	6f29      	ldr	r1, [r5, #112]	; 0x70
		cp->handle = evt->handle;
    93d0:	4606      	mov	r6, r0
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    93d2:	3116      	adds	r1, #22
		cp->handle = evt->handle;
    93d4:	f826 3b02 	strh.w	r3, [r6], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    93d8:	f811 2c0e 	ldrb.w	r2, [r1, #-14]
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    93dc:	4630      	mov	r0, r6
    93de:	f7fd fc53 	bl	6c88 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    93e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    93e4:	7a18      	ldrb	r0, [r3, #8]
    93e6:	280f      	cmp	r0, #15
    93e8:	d8b9      	bhi.n	935e <bt_recv+0x772>
			(void)memset(cp->ltk + conn->le.keys->enc_size, 0,
    93ea:	f1c0 0210 	rsb	r2, r0, #16
    93ee:	4641      	mov	r1, r8
    93f0:	4430      	add	r0, r6
    93f2:	f7fd fc76 	bl	6ce2 <memset>
    93f6:	e7b2      	b.n	935e <bt_recv+0x772>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    93f8:	07cf      	lsls	r7, r1, #31
    93fa:	d524      	bpl.n	9446 <bt_recv+0x85a>
	    !memcmp(conn->le.keys->slave_ltk.rand, &evt->rand, 8) &&
    93fc:	2208      	movs	r2, #8
    93fe:	1cb1      	adds	r1, r6, #2
    9400:	3064      	adds	r0, #100	; 0x64
    9402:	f7fd fc1a 	bl	6c3a <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    9406:	b9f0      	cbnz	r0, 9446 <bt_recv+0x85a>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &evt->ediv, 2)) {
    9408:	6f28      	ldr	r0, [r5, #112]	; 0x70
    940a:	2202      	movs	r2, #2
    940c:	f106 010a 	add.w	r1, r6, #10
    9410:	306c      	adds	r0, #108	; 0x6c
    9412:	f7fd fc12 	bl	6c3a <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &evt->rand, 8) &&
    9416:	4680      	mov	r8, r0
    9418:	b9a8      	cbnz	r0, 9446 <bt_recv+0x85a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    941a:	2112      	movs	r1, #18
    941c:	f242 001a 	movw	r0, #8218	; 0x201a
    9420:	f7fe fb8e 	bl	7b40 <bt_hci_cmd_create>
		if (!buf) {
    9424:	4607      	mov	r7, r0
    9426:	2800      	cmp	r0, #0
    9428:	f43f af77 	beq.w	931a <bt_recv+0x72e>
		cp = net_buf_add(buf, sizeof(*cp));
    942c:	2112      	movs	r1, #18
    942e:	3008      	adds	r0, #8
    9430:	f015 ff6e 	bl	1f310 <net_buf_simple_add>
		cp->handle = evt->handle;
    9434:	8833      	ldrh	r3, [r6, #0]
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    9436:	6f29      	ldr	r1, [r5, #112]	; 0x70
		cp->handle = evt->handle;
    9438:	4606      	mov	r6, r0
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    943a:	316e      	adds	r1, #110	; 0x6e
		cp->handle = evt->handle;
    943c:	f826 3b02 	strh.w	r3, [r6], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    9440:	f811 2c66 	ldrb.w	r2, [r1, #-102]
    9444:	e7ca      	b.n	93dc <bt_recv+0x7f0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    9446:	2102      	movs	r1, #2
    9448:	f242 001b 	movw	r0, #8219	; 0x201b
	le_ltk_neg_reply(evt->handle);
    944c:	8837      	ldrh	r7, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    944e:	f7fe fb77 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    9452:	4606      	mov	r6, r0
    9454:	b998      	cbnz	r0, 947e <bt_recv+0x892>
		BT_ERR("Out of command buffers");
    9456:	4b26      	ldr	r3, [pc, #152]	; (94f0 <bt_recv+0x904>)
    9458:	681b      	ldr	r3, [r3, #0]
    945a:	075a      	lsls	r2, r3, #29
    945c:	f43f acdf 	beq.w	8e1e <bt_recv+0x232>
    9460:	2301      	movs	r3, #1
    9462:	f04f 0200 	mov.w	r2, #0
    9466:	f363 0202 	bfi	r2, r3, #0, #3
    946a:	4923      	ldr	r1, [pc, #140]	; (94f8 <bt_recv+0x90c>)
    946c:	4b21      	ldr	r3, [pc, #132]	; (94f4 <bt_recv+0x908>)
    946e:	1a5b      	subs	r3, r3, r1
    9470:	f360 02c5 	bfi	r2, r0, #3, #3
    9474:	08db      	lsrs	r3, r3, #3
    9476:	f363 128f 	bfi	r2, r3, #6, #10
    947a:	4922      	ldr	r1, [pc, #136]	; (9504 <bt_recv+0x918>)
    947c:	e760      	b.n	9340 <bt_recv+0x754>
	cp = net_buf_add(buf, sizeof(*cp));
    947e:	2102      	movs	r1, #2
    9480:	3008      	adds	r0, #8
    9482:	f015 ff45 	bl	1f310 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    9486:	4631      	mov	r1, r6
	cp->handle = handle;
    9488:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    948a:	f242 001b 	movw	r0, #8219	; 0x201b
    948e:	e769      	b.n	9364 <bt_recv+0x778>
		le_pkey_complete(buf);
    9490:	68a6      	ldr	r6, [r4, #8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9492:	481d      	ldr	r0, [pc, #116]	; (9508 <bt_recv+0x91c>)
    9494:	f06f 0120 	mvn.w	r1, #32
    9498:	f7fe fa0c 	bl	78b4 <atomic_and>
	if (!evt->status) {
    949c:	7833      	ldrb	r3, [r6, #0]
    949e:	b943      	cbnz	r3, 94b2 <bt_recv+0x8c6>
		memcpy(pub_key, evt->key, 64);
    94a0:	1c71      	adds	r1, r6, #1
    94a2:	2240      	movs	r2, #64	; 0x40
    94a4:	4819      	ldr	r0, [pc, #100]	; (950c <bt_recv+0x920>)
    94a6:	f7fd fbef 	bl	6c88 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    94aa:	2110      	movs	r1, #16
    94ac:	4816      	ldr	r0, [pc, #88]	; (9508 <bt_recv+0x91c>)
    94ae:	f7fe f9f2 	bl	7896 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    94b2:	4b17      	ldr	r3, [pc, #92]	; (9510 <bt_recv+0x924>)
    94b4:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    94b6:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    94b8:	2d00      	cmp	r5, #0
    94ba:	f43f abc8 	beq.w	8c4e <bt_recv+0x62>
		cb->func(evt->status ? NULL : evt->key);
    94be:	7832      	ldrb	r2, [r6, #0]
    94c0:	682b      	ldr	r3, [r5, #0]
    94c2:	2a00      	cmp	r2, #0
    94c4:	bf0c      	ite	eq
    94c6:	4638      	moveq	r0, r7
    94c8:	2000      	movne	r0, #0
    94ca:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    94cc:	686d      	ldr	r5, [r5, #4]
    94ce:	e7f3      	b.n	94b8 <bt_recv+0x8cc>
	if (dh_key_cb) {
    94d0:	4d10      	ldr	r5, [pc, #64]	; (9514 <bt_recv+0x928>)
    94d2:	682a      	ldr	r2, [r5, #0]
    94d4:	2a00      	cmp	r2, #0
    94d6:	f43f abba 	beq.w	8c4e <bt_recv+0x62>
		le_dhkey_complete(buf);
    94da:	68a0      	ldr	r0, [r4, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    94dc:	7803      	ldrb	r3, [r0, #0]
    94de:	b92b      	cbnz	r3, 94ec <bt_recv+0x900>
    94e0:	3001      	adds	r0, #1
    94e2:	4790      	blx	r2
		dh_key_cb = NULL;
    94e4:	2300      	movs	r3, #0
    94e6:	602b      	str	r3, [r5, #0]
    94e8:	f7ff bbb1 	b.w	8c4e <bt_recv+0x62>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    94ec:	2000      	movs	r0, #0
    94ee:	e7f8      	b.n	94e2 <bt_recv+0x8f6>
    94f0:	2000e238 	.word	0x2000e238
    94f4:	0002efb0 	.word	0x0002efb0
    94f8:	0002ef38 	.word	0x0002ef38
    94fc:	00030d53 	.word	0x00030d53
    9500:	00031318 	.word	0x00031318
    9504:	00030d42 	.word	0x00030d42
    9508:	2000d7e8 	.word	0x2000d7e8
    950c:	20000b00 	.word	0x20000b00
    9510:	20000b40 	.word	0x20000b40
    9514:	20000afc 	.word	0x20000afc
	u8_t num_reports = net_buf_pull_u8(buf);
    9518:	4630      	mov	r0, r6
    951a:	f015 ff51 	bl	1f3c0 <net_buf_simple_pull_u8>
			bt_addr_le_copy(&id_addr,
    951e:	f8df 8254 	ldr.w	r8, [pc, #596]	; 9774 <bt_recv+0xb88>
	u8_t num_reports = net_buf_pull_u8(buf);
    9522:	9002      	str	r0, [sp, #8]
	while (num_reports--) {
    9524:	9b02      	ldr	r3, [sp, #8]
    9526:	3b01      	subs	r3, #1
    9528:	b2db      	uxtb	r3, r3
    952a:	2bff      	cmp	r3, #255	; 0xff
    952c:	9302      	str	r3, [sp, #8]
    952e:	f43f ab8e 	beq.w	8c4e <bt_recv+0x62>
		info = (void *)buf->data;
    9532:	68a5      	ldr	r5, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    9534:	2109      	movs	r1, #9
    9536:	4630      	mov	r0, r6
    9538:	f015 ff3a 	bl	1f3b0 <net_buf_simple_pull>
		rssi = info->data[info->length];
    953c:	7a2b      	ldrb	r3, [r5, #8]
    953e:	442b      	add	r3, r5
    9540:	f105 0901 	add.w	r9, r5, #1
    9544:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    9548:	786b      	ldrb	r3, [r5, #1]
    954a:	3b02      	subs	r3, #2
    954c:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    954e:	4649      	mov	r1, r9
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    9550:	f200 809a 	bhi.w	9688 <bt_recv+0xa9c>
			bt_addr_le_copy(&id_addr, &info->addr);
    9554:	a808      	add	r0, sp, #32
    9556:	f7fe f99b 	bl	7890 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    955a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    955e:	3b02      	subs	r3, #2
    9560:	f88d 3020 	strb.w	r3, [sp, #32]
		if (scan_dev_found_cb) {
    9564:	4b7a      	ldr	r3, [pc, #488]	; (9750 <bt_recv+0xb64>)
    9566:	461f      	mov	r7, r3
    9568:	681b      	ldr	r3, [r3, #0]
    956a:	b1ab      	cbz	r3, 9598 <bt_recv+0x9ac>
	state->offset = net_buf_simple_headroom(buf);
    956c:	4630      	mov	r0, r6
    956e:	f015 ff37 	bl	1f3e0 <net_buf_simple_headroom>
	state->len = buf->len;
    9572:	89a3      	ldrh	r3, [r4, #12]
    9574:	9303      	str	r3, [sp, #12]
			buf->len = info->length;
    9576:	7a2b      	ldrb	r3, [r5, #8]
    9578:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    957a:	683b      	ldr	r3, [r7, #0]
    957c:	782a      	ldrb	r2, [r5, #0]
	state->offset = net_buf_simple_headroom(buf);
    957e:	4682      	mov	sl, r0
    9580:	461f      	mov	r7, r3
    9582:	fa4f f18b 	sxtb.w	r1, fp
    9586:	4633      	mov	r3, r6
    9588:	a808      	add	r0, sp, #32
    958a:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
    958c:	6923      	ldr	r3, [r4, #16]
    958e:	fa13 f38a 	uxtah	r3, r3, sl
    9592:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    9594:	9b03      	ldr	r3, [sp, #12]
    9596:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    9598:	210b      	movs	r1, #11
    959a:	486e      	ldr	r0, [pc, #440]	; (9754 <bt_recv+0xb68>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    959c:	782b      	ldrb	r3, [r5, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    959e:	f7fe faa1 	bl	7ae4 <atomic_test_bit>
    95a2:	4682      	mov	sl, r0
    95a4:	2800      	cmp	r0, #0
    95a6:	d169      	bne.n	967c <bt_recv+0xa90>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    95a8:	2b01      	cmp	r3, #1
    95aa:	d867      	bhi.n	967c <bt_recv+0xa90>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    95ac:	2101      	movs	r1, #1
    95ae:	a808      	add	r0, sp, #32
    95b0:	f001 fe14 	bl	b1dc <bt_conn_lookup_state_le>
	if (!conn) {
    95b4:	4607      	mov	r7, r0
    95b6:	2800      	cmp	r0, #0
    95b8:	d060      	beq.n	967c <bt_recv+0xa90>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    95ba:	210a      	movs	r1, #10
    95bc:	4865      	ldr	r0, [pc, #404]	; (9754 <bt_recv+0xb68>)
    95be:	f7fe fa91 	bl	7ae4 <atomic_test_bit>
    95c2:	2800      	cmp	r0, #0
    95c4:	d16c      	bne.n	96a0 <bt_recv+0xab4>
		const bt_addr_le_t *addr = &bt_dev.id_addr[conn->id];
    95c6:	7a3b      	ldrb	r3, [r7, #8]
    95c8:	ebc3 00c3 	rsb	r0, r3, r3, lsl #3
    95cc:	eb08 0a00 	add.w	sl, r8, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    95d0:	f818 3000 	ldrb.w	r3, [r8, r0]
    95d4:	2b01      	cmp	r3, #1
    95d6:	d103      	bne.n	95e0 <bt_recv+0x9f4>
			set_random_address(&addr->a);
    95d8:	3001      	adds	r0, #1
    95da:	4440      	add	r0, r8
    95dc:	f7fe fbc4 	bl	7d68 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, addr);
    95e0:	4651      	mov	r1, sl
    95e2:	f107 004f 	add.w	r0, r7, #79	; 0x4f
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    95e6:	f107 0a56 	add.w	sl, r7, #86	; 0x56
		bt_addr_le_copy(&conn->le.init_addr, addr);
    95ea:	f7fe f951 	bl	7890 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    95ee:	4649      	mov	r1, r9
    95f0:	4650      	mov	r0, sl
    95f2:	f7fe f94d 	bl	7890 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    95f6:	2119      	movs	r1, #25
    95f8:	f242 000d 	movw	r0, #8205	; 0x200d
    95fc:	f7fe faa0 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    9600:	4683      	mov	fp, r0
    9602:	2800      	cmp	r0, #0
    9604:	d051      	beq.n	96aa <bt_recv+0xabe>
	cp = net_buf_add(buf, sizeof(*cp));
    9606:	2119      	movs	r1, #25
    9608:	3008      	adds	r0, #8
    960a:	f015 fe81 	bl	1f310 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    960e:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    9610:	4681      	mov	r9, r0
	(void)memset(cp, 0, sizeof(*cp));
    9612:	2100      	movs	r1, #0
    9614:	f7fd fb65 	bl	6ce2 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    9618:	2200      	movs	r2, #0
    961a:	2360      	movs	r3, #96	; 0x60
    961c:	f889 3000 	strb.w	r3, [r9]
    9620:	f889 2001 	strb.w	r2, [r9, #1]
	cp->scan_window = cp->scan_interval;
    9624:	f889 3002 	strb.w	r3, [r9, #2]
    9628:	f889 2003 	strb.w	r2, [r9, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    962c:	4651      	mov	r1, sl
    962e:	f109 0005 	add.w	r0, r9, #5
	cp->scan_window = cp->scan_interval;
    9632:	9203      	str	r2, [sp, #12]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    9634:	f7fe f92c 	bl	7890 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    9638:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
    963c:	f889 300c 	strb.w	r3, [r9, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    9640:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    9644:	f8a9 300d 	strh.w	r3, [r9, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    9648:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
    964c:	f8a9 300f 	strh.w	r3, [r9, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    9650:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
    9654:	f8a9 3011 	strh.w	r3, [r9, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    9658:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    965c:	f8a9 3013 	strh.w	r3, [r9, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    9660:	9a03      	ldr	r2, [sp, #12]
    9662:	4659      	mov	r1, fp
    9664:	f242 000d 	movw	r0, #8205	; 0x200d
    9668:	f7fe fa9a 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    966c:	b9e8      	cbnz	r0, 96aa <bt_recv+0xabe>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    966e:	4638      	mov	r0, r7
    9670:	2103      	movs	r1, #3
    9672:	f001 fc73 	bl	af5c <bt_conn_set_state>
	bt_conn_unref(conn);
    9676:	4638      	mov	r0, r7
    9678:	f001 fdd2 	bl	b220 <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    967c:	7a29      	ldrb	r1, [r5, #8]
    967e:	4630      	mov	r0, r6
    9680:	3101      	adds	r1, #1
    9682:	f015 fe95 	bl	1f3b0 <net_buf_simple_pull>
    9686:	e74d      	b.n	9524 <bt_recv+0x938>
		keys = bt_keys_find_irk(id, addr);
    9688:	f898 0008 	ldrb.w	r0, [r8, #8]
    968c:	f007 fdae 	bl	111ec <bt_keys_find_irk>
		if (keys) {
    9690:	b120      	cbz	r0, 969c <bt_recv+0xab0>
			return &keys->addr;
    9692:	1c41      	adds	r1, r0, #1
			bt_addr_le_copy(&id_addr,
    9694:	a808      	add	r0, sp, #32
    9696:	f7fe f8fb 	bl	7890 <bt_addr_le_copy>
    969a:	e763      	b.n	9564 <bt_recv+0x978>
	return addr;
    969c:	4649      	mov	r1, r9
    969e:	e7f9      	b.n	9694 <bt_recv+0xaa8>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    96a0:	4650      	mov	r0, sl
    96a2:	f7fe fb01 	bl	7ca8 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    96a6:	2800      	cmp	r0, #0
    96a8:	d08d      	beq.n	95c6 <bt_recv+0x9da>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    96aa:	231f      	movs	r3, #31
    96ac:	733b      	strb	r3, [r7, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    96ae:	2100      	movs	r1, #0
    96b0:	4638      	mov	r0, r7
    96b2:	f001 fc53 	bl	af5c <bt_conn_set_state>
	bt_conn_unref(conn);
    96b6:	4638      	mov	r0, r7
    96b8:	f001 fdb2 	bl	b220 <bt_conn_unref>
	bt_le_scan_update(false);
    96bc:	2000      	movs	r0, #0
    96be:	f7fe fff5 	bl	86ac <bt_le_scan_update>
    96c2:	e7db      	b.n	967c <bt_recv+0xa90>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    96c4:	4b24      	ldr	r3, [pc, #144]	; (9758 <bt_recv+0xb6c>)
    96c6:	681b      	ldr	r3, [r3, #0]
    96c8:	f003 0307 	and.w	r3, r3, #7
    96cc:	2b01      	cmp	r3, #1
    96ce:	f67f aabe 	bls.w	8c4e <bt_recv+0x62>
    96d2:	2302      	movs	r3, #2
    96d4:	f04f 0500 	mov.w	r5, #0
    96d8:	f363 0502 	bfi	r5, r3, #0, #3
    96dc:	4a1f      	ldr	r2, [pc, #124]	; (975c <bt_recv+0xb70>)
    96de:	4b20      	ldr	r3, [pc, #128]	; (9760 <bt_recv+0xb74>)
    96e0:	68a0      	ldr	r0, [r4, #8]
    96e2:	1ad2      	subs	r2, r2, r3
    96e4:	4b1f      	ldr	r3, [pc, #124]	; (9764 <bt_recv+0xb78>)
    96e6:	08d2      	lsrs	r2, r2, #3
    96e8:	e9cd 3108 	strd	r3, r1, [sp, #32]
    96ec:	f36f 05c5 	bfc	r5, #3, #3
    96f0:	89a1      	ldrh	r1, [r4, #12]
    96f2:	910a      	str	r1, [sp, #40]	; 0x28
    96f4:	f362 158f 	bfi	r5, r2, #6, #10
    96f8:	f7fd ff9c 	bl	7634 <bt_hex_real>
    96fc:	f7f8 fe88 	bl	2410 <log_strdup>
    9700:	900b      	str	r0, [sp, #44]	; 0x2c
    9702:	4819      	ldr	r0, [pc, #100]	; (9768 <bt_recv+0xb7c>)
    9704:	462b      	mov	r3, r5
    9706:	2204      	movs	r2, #4
    9708:	a908      	add	r1, sp, #32
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    970a:	f7f8 fd36 	bl	217a <log_n>
    970e:	f7ff ba9e 	b.w	8c4e <bt_recv+0x62>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    9712:	4b11      	ldr	r3, [pc, #68]	; (9758 <bt_recv+0xb6c>)
    9714:	681b      	ldr	r3, [r3, #0]
    9716:	075b      	lsls	r3, r3, #29
    9718:	d010      	beq.n	973c <bt_recv+0xb50>
    971a:	2101      	movs	r1, #1
    971c:	f04f 0300 	mov.w	r3, #0
    9720:	f361 0302 	bfi	r3, r1, #0, #3
    9724:	480e      	ldr	r0, [pc, #56]	; (9760 <bt_recv+0xb74>)
    9726:	490d      	ldr	r1, [pc, #52]	; (975c <bt_recv+0xb70>)
    9728:	1a09      	subs	r1, r1, r0
    972a:	08c9      	lsrs	r1, r1, #3
    972c:	f36f 03c5 	bfc	r3, #3, #3
    9730:	f361 138f 	bfi	r3, r1, #6, #10
    9734:	480d      	ldr	r0, [pc, #52]	; (976c <bt_recv+0xb80>)
    9736:	490e      	ldr	r1, [pc, #56]	; (9770 <bt_recv+0xb84>)
    9738:	f7f8 fcec 	bl	2114 <log_2>
		net_buf_unref(buf);
    973c:	4620      	mov	r0, r4
    973e:	f015 fd89 	bl	1f254 <net_buf_unref>
		return -EINVAL;
    9742:	f06f 0015 	mvn.w	r0, #21
    9746:	f7ff ba86 	b.w	8c56 <bt_recv+0x6a>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    974a:	6f28      	ldr	r0, [r5, #112]	; 0x70
    974c:	e624      	b.n	9398 <bt_recv+0x7ac>
    974e:	bf00      	nop
    9750:	20000b48 	.word	0x20000b48
    9754:	2000d7e8 	.word	0x2000d7e8
    9758:	2000e238 	.word	0x2000e238
    975c:	0002efb0 	.word	0x0002efb0
    9760:	0002ef38 	.word	0x0002ef38
    9764:	00030d6f 	.word	0x00030d6f
    9768:	00031333 	.word	0x00031333
    976c:	00031382 	.word	0x00031382
    9770:	00030ddf 	.word	0x00030ddf
    9774:	2000d778 	.word	0x2000d778

00009778 <bt_recv_prio>:
{
    9778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    977c:	7d05      	ldrb	r5, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    977e:	f8d0 9008 	ldr.w	r9, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9782:	2d01      	cmp	r5, #1
{
    9784:	b085      	sub	sp, #20
    9786:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9788:	d01a      	beq.n	97c0 <bt_recv_prio+0x48>
    978a:	4b88      	ldr	r3, [pc, #544]	; (99ac <bt_recv_prio+0x234>)
    978c:	681b      	ldr	r3, [r3, #0]
    978e:	075d      	lsls	r5, r3, #29
    9790:	d010      	beq.n	97b4 <bt_recv_prio+0x3c>
    9792:	2301      	movs	r3, #1
    9794:	f04f 0200 	mov.w	r2, #0
    9798:	f363 0202 	bfi	r2, r3, #0, #3
    979c:	4984      	ldr	r1, [pc, #528]	; (99b0 <bt_recv_prio+0x238>)
    979e:	4b85      	ldr	r3, [pc, #532]	; (99b4 <bt_recv_prio+0x23c>)
    97a0:	4885      	ldr	r0, [pc, #532]	; (99b8 <bt_recv_prio+0x240>)
    97a2:	1a5b      	subs	r3, r3, r1
    97a4:	f36f 02c5 	bfc	r2, #3, #3
    97a8:	08db      	lsrs	r3, r3, #3
    97aa:	4984      	ldr	r1, [pc, #528]	; (99bc <bt_recv_prio+0x244>)
    97ac:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ASSERT(0);
    97b0:	f7f8 fc9c 	bl	20ec <log_1>
    97b4:	4040      	eors	r0, r0
    97b6:	f380 8811 	msr	BASEPRI, r0
    97ba:	f04f 0004 	mov.w	r0, #4
    97be:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    97c0:	8983      	ldrh	r3, [r0, #12]
    97c2:	2b01      	cmp	r3, #1
    97c4:	d812      	bhi.n	97ec <bt_recv_prio+0x74>
    97c6:	4b79      	ldr	r3, [pc, #484]	; (99ac <bt_recv_prio+0x234>)
    97c8:	681b      	ldr	r3, [r3, #0]
    97ca:	075c      	lsls	r4, r3, #29
    97cc:	d0f2      	beq.n	97b4 <bt_recv_prio+0x3c>
    97ce:	4978      	ldr	r1, [pc, #480]	; (99b0 <bt_recv_prio+0x238>)
    97d0:	4b78      	ldr	r3, [pc, #480]	; (99b4 <bt_recv_prio+0x23c>)
    97d2:	487b      	ldr	r0, [pc, #492]	; (99c0 <bt_recv_prio+0x248>)
    97d4:	f04f 0200 	mov.w	r2, #0
    97d8:	1a5b      	subs	r3, r3, r1
    97da:	f365 0202 	bfi	r2, r5, #0, #3
    97de:	f36f 02c5 	bfc	r2, #3, #3
    97e2:	08db      	lsrs	r3, r3, #3
    97e4:	f363 128f 	bfi	r2, r3, #6, #10
    97e8:	4974      	ldr	r1, [pc, #464]	; (99bc <bt_recv_prio+0x244>)
    97ea:	e7e1      	b.n	97b0 <bt_recv_prio+0x38>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    97ec:	f899 3000 	ldrb.w	r3, [r9]
    97f0:	2b13      	cmp	r3, #19
    97f2:	d82c      	bhi.n	984e <bt_recv_prio+0xd6>
    97f4:	fa05 f303 	lsl.w	r3, r5, r3
    97f8:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    97fc:	d027      	beq.n	984e <bt_recv_prio+0xd6>
	net_buf_pull(buf, sizeof(*hdr));
    97fe:	f100 0608 	add.w	r6, r0, #8
    9802:	2102      	movs	r1, #2
    9804:	4630      	mov	r0, r6
    9806:	f015 fdd3 	bl	1f3b0 <net_buf_simple_pull>
	switch (hdr->evt) {
    980a:	f899 3000 	ldrb.w	r3, [r9]
    980e:	2b0f      	cmp	r3, #15
    9810:	d031      	beq.n	9876 <bt_recv_prio+0xfe>
    9812:	2b13      	cmp	r3, #19
    9814:	d03f      	beq.n	9896 <bt_recv_prio+0x11e>
    9816:	2b0e      	cmp	r3, #14
    9818:	f040 80b0 	bne.w	997c <bt_recv_prio+0x204>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    981c:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    981e:	2103      	movs	r1, #3
    9820:	4630      	mov	r0, r6
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    9822:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    9826:	781d      	ldrb	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    9828:	f015 fdc2 	bl	1f3b0 <net_buf_simple_pull>
	status = buf->data[0];
    982c:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    982e:	4622      	mov	r2, r4
    9830:	7819      	ldrb	r1, [r3, #0]
    9832:	4638      	mov	r0, r7
    9834:	f7fe f8bc 	bl	79b0 <hci_cmd_done>
	if (ncmd) {
    9838:	b115      	cbz	r5, 9840 <bt_recv_prio+0xc8>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    983a:	4862      	ldr	r0, [pc, #392]	; (99c4 <bt_recv_prio+0x24c>)
    983c:	f024 fd1d 	bl	2e27a <_impl_k_sem_give>
	net_buf_unref(buf);
    9840:	4620      	mov	r0, r4
    9842:	f015 fd07 	bl	1f254 <net_buf_unref>
}
    9846:	2000      	movs	r0, #0
    9848:	b005      	add	sp, #20
    984a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    984e:	4b57      	ldr	r3, [pc, #348]	; (99ac <bt_recv_prio+0x234>)
    9850:	681b      	ldr	r3, [r3, #0]
    9852:	0758      	lsls	r0, r3, #29
    9854:	d0ae      	beq.n	97b4 <bt_recv_prio+0x3c>
    9856:	2301      	movs	r3, #1
    9858:	f04f 0200 	mov.w	r2, #0
    985c:	f363 0202 	bfi	r2, r3, #0, #3
    9860:	4953      	ldr	r1, [pc, #332]	; (99b0 <bt_recv_prio+0x238>)
    9862:	4b54      	ldr	r3, [pc, #336]	; (99b4 <bt_recv_prio+0x23c>)
    9864:	4858      	ldr	r0, [pc, #352]	; (99c8 <bt_recv_prio+0x250>)
    9866:	1a5b      	subs	r3, r3, r1
    9868:	f36f 02c5 	bfc	r2, #3, #3
    986c:	08db      	lsrs	r3, r3, #3
    986e:	f363 128f 	bfi	r2, r3, #6, #10
    9872:	4952      	ldr	r1, [pc, #328]	; (99bc <bt_recv_prio+0x244>)
    9874:	e79c      	b.n	97b0 <bt_recv_prio+0x38>
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    9876:	68a5      	ldr	r5, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    9878:	f8b5 8002 	ldrh.w	r8, [r5, #2]
	u8_t ncmd = evt->ncmd;
    987c:	786f      	ldrb	r7, [r5, #1]
	net_buf_pull(buf, sizeof(*evt));
    987e:	2104      	movs	r1, #4
    9880:	4630      	mov	r0, r6
    9882:	f015 fd95 	bl	1f3b0 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    9886:	4622      	mov	r2, r4
    9888:	7829      	ldrb	r1, [r5, #0]
    988a:	4640      	mov	r0, r8
    988c:	f7fe f890 	bl	79b0 <hci_cmd_done>
	if (ncmd) {
    9890:	2f00      	cmp	r7, #0
    9892:	d0d5      	beq.n	9840 <bt_recv_prio+0xc8>
    9894:	e7d1      	b.n	983a <bt_recv_prio+0xc2>
		hci_num_completed_packets(buf);
    9896:	68a3      	ldr	r3, [r4, #8]
    9898:	9301      	str	r3, [sp, #4]
    989a:	4d46      	ldr	r5, [pc, #280]	; (99b4 <bt_recv_prio+0x23c>)
				BT_ERR("packets count mismatch");
    989c:	4b44      	ldr	r3, [pc, #272]	; (99b0 <bt_recv_prio+0x238>)
    989e:	f8df 910c 	ldr.w	r9, [pc, #268]	; 99ac <bt_recv_prio+0x234>
    98a2:	1aed      	subs	r5, r5, r3
    98a4:	f3c5 03c9 	ubfx	r3, r5, #3, #10
    98a8:	9302      	str	r3, [sp, #8]
	for (i = 0; i < evt->num_handles; i++) {
    98aa:	2600      	movs	r6, #0
    98ac:	9b01      	ldr	r3, [sp, #4]
    98ae:	781b      	ldrb	r3, [r3, #0]
    98b0:	429e      	cmp	r6, r3
    98b2:	dac5      	bge.n	9840 <bt_recv_prio+0xc8>
    98b4:	9b01      	ldr	r3, [sp, #4]
    98b6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    98ba:	f8b3 2001 	ldrh.w	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    98be:	f8b3 5003 	ldrh.w	r5, [r3, #3]
    98c2:	f04f 0320 	mov.w	r3, #32
    98c6:	f3ef 8b11 	mrs	fp, BASEPRI
    98ca:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    98ce:	4610      	mov	r0, r2
    98d0:	9203      	str	r2, [sp, #12]
    98d2:	f001 fc33 	bl	b13c <bt_conn_lookup_handle>
		if (!conn) {
    98d6:	9a03      	ldr	r2, [sp, #12]
    98d8:	4682      	mov	sl, r0
    98da:	b9a0      	cbnz	r0, 9906 <bt_recv_prio+0x18e>
			BT_ERR("No connection for handle %u", handle);
    98dc:	f8d9 1000 	ldr.w	r1, [r9]
    98e0:	0749      	lsls	r1, r1, #29
    98e2:	d00c      	beq.n	98fe <bt_recv_prio+0x186>
    98e4:	2101      	movs	r1, #1
    98e6:	f361 0702 	bfi	r7, r1, #0, #3
    98ea:	9b02      	ldr	r3, [sp, #8]
    98ec:	4937      	ldr	r1, [pc, #220]	; (99cc <bt_recv_prio+0x254>)
    98ee:	f360 07c5 	bfi	r7, r0, #3, #3
    98f2:	f363 178f 	bfi	r7, r3, #6, #10
    98f6:	463b      	mov	r3, r7
    98f8:	4835      	ldr	r0, [pc, #212]	; (99d0 <bt_recv_prio+0x258>)
    98fa:	f7f8 fc0b 	bl	2114 <log_2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    98fe:	f38b 8811 	msr	BASEPRI, fp
	for (i = 0; i < evt->num_handles; i++) {
    9902:	3601      	adds	r6, #1
    9904:	e7d2      	b.n	98ac <bt_recv_prio+0x134>
    9906:	f38b 8811 	msr	BASEPRI, fp
			k_fifo_put(&conn->tx_notify, node);
    990a:	f100 0b1c 	add.w	fp, r0, #28
		while (count--) {
    990e:	b1dd      	cbz	r5, 9948 <bt_recv_prio+0x1d0>
	__asm__ volatile(
    9910:	f04f 0220 	mov.w	r2, #32
    9914:	f3ef 8011 	mrs	r0, BASEPRI
    9918:	f382 8811 	msr	BASEPRI, r2
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    991c:	f8da 1014 	ldr.w	r1, [sl, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    9920:	b9b1      	cbnz	r1, 9950 <bt_recv_prio+0x1d8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9922:	f380 8811 	msr	BASEPRI, r0
				BT_ERR("packets count mismatch");
    9926:	f8d9 2000 	ldr.w	r2, [r9]
    992a:	0752      	lsls	r2, r2, #29
    992c:	d00c      	beq.n	9948 <bt_recv_prio+0x1d0>
    992e:	2201      	movs	r2, #1
    9930:	f362 0802 	bfi	r8, r2, #0, #3
    9934:	9b02      	ldr	r3, [sp, #8]
    9936:	4827      	ldr	r0, [pc, #156]	; (99d4 <bt_recv_prio+0x25c>)
    9938:	f361 08c5 	bfi	r8, r1, #3, #3
    993c:	f363 188f 	bfi	r8, r3, #6, #10
    9940:	4642      	mov	r2, r8
    9942:	4922      	ldr	r1, [pc, #136]	; (99cc <bt_recv_prio+0x254>)
    9944:	f7f8 fbd2 	bl	20ec <log_1>
		bt_conn_unref(conn);
    9948:	4650      	mov	r0, sl
    994a:	f001 fc69 	bl	b220 <bt_conn_unref>
    994e:	e7d8      	b.n	9902 <bt_recv_prio+0x18a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9950:	f8da 2018 	ldr.w	r2, [sl, #24]
	return node->next;
    9954:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    9956:	f8ca 3014 	str.w	r3, [sl, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    995a:	4291      	cmp	r1, r2
	list->tail = node;
    995c:	bf08      	it	eq
    995e:	f8ca 3018 	streq.w	r3, [sl, #24]
    9962:	f380 8811 	msr	BASEPRI, r0
			k_fifo_put(&conn->tx_notify, node);
    9966:	4658      	mov	r0, fp
    9968:	f024 f968 	bl	2dc3c <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    996c:	4650      	mov	r0, sl
    996e:	f000 ff91 	bl	a894 <bt_conn_get_pkts>
    9972:	f024 fc82 	bl	2e27a <_impl_k_sem_give>
    9976:	1e6a      	subs	r2, r5, #1
    9978:	b295      	uxth	r5, r2
    997a:	e7c8      	b.n	990e <bt_recv_prio+0x196>
		net_buf_unref(buf);
    997c:	4620      	mov	r0, r4
    997e:	f015 fc69 	bl	1f254 <net_buf_unref>
		BT_ASSERT(0);
    9982:	4b0a      	ldr	r3, [pc, #40]	; (99ac <bt_recv_prio+0x234>)
    9984:	681b      	ldr	r3, [r3, #0]
    9986:	075b      	lsls	r3, r3, #29
    9988:	f43f af14 	beq.w	97b4 <bt_recv_prio+0x3c>
    998c:	4908      	ldr	r1, [pc, #32]	; (99b0 <bt_recv_prio+0x238>)
    998e:	4b09      	ldr	r3, [pc, #36]	; (99b4 <bt_recv_prio+0x23c>)
    9990:	4811      	ldr	r0, [pc, #68]	; (99d8 <bt_recv_prio+0x260>)
    9992:	f04f 0200 	mov.w	r2, #0
    9996:	1a5b      	subs	r3, r3, r1
    9998:	f365 0202 	bfi	r2, r5, #0, #3
    999c:	f36f 02c5 	bfc	r2, #3, #3
    99a0:	08db      	lsrs	r3, r3, #3
    99a2:	f363 128f 	bfi	r2, r3, #6, #10
    99a6:	4905      	ldr	r1, [pc, #20]	; (99bc <bt_recv_prio+0x244>)
    99a8:	e702      	b.n	97b0 <bt_recv_prio+0x38>
    99aa:	bf00      	nop
    99ac:	2000e238 	.word	0x2000e238
    99b0:	0002ef38 	.word	0x0002ef38
    99b4:	0002efb0 	.word	0x0002efb0
    99b8:	0003139a 	.word	0x0003139a
    99bc:	00030de7 	.word	0x00030de7
    99c0:	000313d2 	.word	0x000313d2
    99c4:	2000d820 	.word	0x2000d820
    99c8:	00031400 	.word	0x00031400
    99cc:	00030c25 	.word	0x00030c25
    99d0:	00031432 	.word	0x00031432
    99d4:	00031452 	.word	0x00031452
    99d8:	0003146d 	.word	0x0003146d

000099dc <bt_hci_driver_register>:
	if (bt_dev.drv) {
    99dc:	4a08      	ldr	r2, [pc, #32]	; (9a00 <bt_hci_driver_register+0x24>)
    99de:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    99e2:	b93b      	cbnz	r3, 99f4 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    99e4:	68c1      	ldr	r1, [r0, #12]
    99e6:	b141      	cbz	r1, 99fa <bt_hci_driver_register+0x1e>
    99e8:	6901      	ldr	r1, [r0, #16]
    99ea:	b131      	cbz	r1, 99fa <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    99ec:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    99f0:	4618      	mov	r0, r3
    99f2:	4770      	bx	lr
		return -EALREADY;
    99f4:	f06f 0044 	mvn.w	r0, #68	; 0x44
    99f8:	4770      	bx	lr
		return -EINVAL;
    99fa:	f06f 0015 	mvn.w	r0, #21
}
    99fe:	4770      	bx	lr
    9a00:	2000d778 	.word	0x2000d778

00009a04 <bt_get_name>:
}
    9a04:	4800      	ldr	r0, [pc, #0]	; (9a08 <bt_get_name+0x4>)
    9a06:	4770      	bx	lr
    9a08:	000315f0 	.word	0x000315f0

00009a0c <bt_id_create>:
{
    9a0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9a0e:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9a10:	4606      	mov	r6, r0
    9a12:	b930      	cbnz	r0, 9a22 <bt_id_create+0x16>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    9a14:	2c00      	cmp	r4, #0
    9a16:	d034      	beq.n	9a82 <bt_id_create+0x76>
			return -EINVAL;
    9a18:	f06f 0415 	mvn.w	r4, #21
}
    9a1c:	4620      	mov	r0, r4
    9a1e:	b002      	add	sp, #8
    9a20:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9a22:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    9a24:	2207      	movs	r2, #7
    9a26:	4669      	mov	r1, sp
    9a28:	9300      	str	r3, [sp, #0]
    9a2a:	f8cd 3003 	str.w	r3, [sp, #3]
    9a2e:	f7fd f904 	bl	6c3a <memcmp>
    9a32:	2800      	cmp	r0, #0
    9a34:	d0ee      	beq.n	9a14 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    9a36:	7833      	ldrb	r3, [r6, #0]
    9a38:	2b01      	cmp	r3, #1
    9a3a:	d104      	bne.n	9a46 <bt_id_create+0x3a>
    9a3c:	79b3      	ldrb	r3, [r6, #6]
    9a3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9a42:	2bc0      	cmp	r3, #192	; 0xc0
    9a44:	d015      	beq.n	9a72 <bt_id_create+0x66>
			BT_ERR("Only static random identity address supported");
    9a46:	4b1c      	ldr	r3, [pc, #112]	; (9ab8 <bt_id_create+0xac>)
    9a48:	681b      	ldr	r3, [r3, #0]
    9a4a:	075b      	lsls	r3, r3, #29
    9a4c:	d0e4      	beq.n	9a18 <bt_id_create+0xc>
    9a4e:	2301      	movs	r3, #1
    9a50:	f04f 0200 	mov.w	r2, #0
    9a54:	f363 0202 	bfi	r2, r3, #0, #3
    9a58:	4918      	ldr	r1, [pc, #96]	; (9abc <bt_id_create+0xb0>)
    9a5a:	4b19      	ldr	r3, [pc, #100]	; (9ac0 <bt_id_create+0xb4>)
    9a5c:	4819      	ldr	r0, [pc, #100]	; (9ac4 <bt_id_create+0xb8>)
    9a5e:	1a5b      	subs	r3, r3, r1
    9a60:	08db      	lsrs	r3, r3, #3
    9a62:	f36f 02c5 	bfc	r2, #3, #3
    9a66:	f363 128f 	bfi	r2, r3, #6, #10
    9a6a:	4917      	ldr	r1, [pc, #92]	; (9ac8 <bt_id_create+0xbc>)
    9a6c:	f7f8 fb3e 	bl	20ec <log_1>
    9a70:	e7d2      	b.n	9a18 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
    9a72:	4630      	mov	r0, r6
    9a74:	f7fe f81c 	bl	7ab0 <id_find>
    9a78:	2800      	cmp	r0, #0
    9a7a:	dbcb      	blt.n	9a14 <bt_id_create+0x8>
			return -EALREADY;
    9a7c:	f06f 0444 	mvn.w	r4, #68	; 0x44
    9a80:	e7cc      	b.n	9a1c <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    9a82:	4b12      	ldr	r3, [pc, #72]	; (9acc <bt_id_create+0xc0>)
    9a84:	79dd      	ldrb	r5, [r3, #7]
    9a86:	2d01      	cmp	r5, #1
    9a88:	d013      	beq.n	9ab2 <bt_id_create+0xa6>
	new_id = bt_dev.id_count++;
    9a8a:	1c6a      	adds	r2, r5, #1
    9a8c:	71da      	strb	r2, [r3, #7]
    9a8e:	462c      	mov	r4, r5
	if (new_id == BT_ID_DEFAULT &&
    9a90:	b955      	cbnz	r5, 9aa8 <bt_id_create+0x9c>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9a92:	2101      	movs	r1, #1
    9a94:	f103 0070 	add.w	r0, r3, #112	; 0x70
    9a98:	f7fe f824 	bl	7ae4 <atomic_test_bit>
	if (new_id == BT_ID_DEFAULT &&
    9a9c:	b920      	cbnz	r0, 9aa8 <bt_id_create+0x9c>
    9a9e:	2108      	movs	r1, #8
    9aa0:	f103 0070 	add.w	r0, r3, #112	; 0x70
    9aa4:	f7fd fef7 	bl	7896 <atomic_or>
	id_create(new_id, addr, irk);
    9aa8:	4631      	mov	r1, r6
    9aaa:	4628      	mov	r0, r5
    9aac:	f7fe fc84 	bl	83b8 <id_create.isra.30>
	return new_id;
    9ab0:	e7b4      	b.n	9a1c <bt_id_create+0x10>
		return -ENOMEM;
    9ab2:	f06f 040b 	mvn.w	r4, #11
    9ab6:	e7b1      	b.n	9a1c <bt_id_create+0x10>
    9ab8:	2000e238 	.word	0x2000e238
    9abc:	0002ef38 	.word	0x0002ef38
    9ac0:	0002efb0 	.word	0x0002efb0
    9ac4:	00031024 	.word	0x00031024
    9ac8:	00030e05 	.word	0x00030e05
    9acc:	2000d778 	.word	0x2000d778

00009ad0 <bt_setup_id_addr>:
{
    9ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.id_count) {
    9ad4:	4d48      	ldr	r5, [pc, #288]	; (9bf8 <bt_setup_id_addr+0x128>)
    9ad6:	79ef      	ldrb	r7, [r5, #7]
{
    9ad8:	b085      	sub	sp, #20
    9ada:	462e      	mov	r6, r5
	if (!bt_dev.id_count) {
    9adc:	b967      	cbnz	r7, 9af8 <bt_setup_id_addr+0x28>
	if (!(bt_dev.vs_commands[1] & BIT(0))) {
    9ade:	f895 4062 	ldrb.w	r4, [r5, #98]	; 0x62
    9ae2:	f014 0401 	ands.w	r4, r4, #1
    9ae6:	d11f      	bne.n	9b28 <bt_setup_id_addr+0x58>
		BT_WARN("Read Static Addresses command not available");
    9ae8:	4b44      	ldr	r3, [pc, #272]	; (9bfc <bt_setup_id_addr+0x12c>)
    9aea:	681b      	ldr	r3, [r3, #0]
    9aec:	f003 0307 	and.w	r3, r3, #7
    9af0:	2b01      	cmp	r3, #1
    9af2:	d806      	bhi.n	9b02 <bt_setup_id_addr+0x32>
		bt_dev.id_count = bt_read_static_addr(addrs);
    9af4:	2300      	movs	r3, #0
    9af6:	71f3      	strb	r3, [r6, #7]
	return bt_id_create(NULL, NULL);
    9af8:	2100      	movs	r1, #0
    9afa:	4608      	mov	r0, r1
    9afc:	f7ff ff86 	bl	9a0c <bt_id_create>
    9b00:	e064      	b.n	9bcc <bt_setup_id_addr+0xfc>
		BT_WARN("Read Static Addresses command not available");
    9b02:	2302      	movs	r3, #2
    9b04:	f04f 0200 	mov.w	r2, #0
    9b08:	f363 0202 	bfi	r2, r3, #0, #3
    9b0c:	493c      	ldr	r1, [pc, #240]	; (9c00 <bt_setup_id_addr+0x130>)
    9b0e:	4b3d      	ldr	r3, [pc, #244]	; (9c04 <bt_setup_id_addr+0x134>)
    9b10:	483d      	ldr	r0, [pc, #244]	; (9c08 <bt_setup_id_addr+0x138>)
    9b12:	1a5b      	subs	r3, r3, r1
    9b14:	08db      	lsrs	r3, r3, #3
    9b16:	f364 02c5 	bfi	r2, r4, #3, #3
    9b1a:	f363 128f 	bfi	r2, r3, #6, #10
    9b1e:	493b      	ldr	r1, [pc, #236]	; (9c0c <bt_setup_id_addr+0x13c>)
    9b20:	f7f8 fae4 	bl	20ec <log_1>
		bt_dev.id_count = bt_read_static_addr(addrs);
    9b24:	71ec      	strb	r4, [r5, #7]
    9b26:	e7e7      	b.n	9af8 <bt_setup_id_addr+0x28>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    9b28:	aa01      	add	r2, sp, #4
    9b2a:	4639      	mov	r1, r7
    9b2c:	f64f 4009 	movw	r0, #64521	; 0xfc09
    9b30:	f7fe f836 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    9b34:	4604      	mov	r4, r0
    9b36:	b1c0      	cbz	r0, 9b6a <bt_setup_id_addr+0x9a>
		BT_WARN("Failed to read static addresses");
    9b38:	4b30      	ldr	r3, [pc, #192]	; (9bfc <bt_setup_id_addr+0x12c>)
    9b3a:	681b      	ldr	r3, [r3, #0]
    9b3c:	f003 0307 	and.w	r3, r3, #7
    9b40:	2b01      	cmp	r3, #1
    9b42:	d9d7      	bls.n	9af4 <bt_setup_id_addr+0x24>
    9b44:	2302      	movs	r3, #2
    9b46:	f04f 0200 	mov.w	r2, #0
    9b4a:	f363 0202 	bfi	r2, r3, #0, #3
    9b4e:	492c      	ldr	r1, [pc, #176]	; (9c00 <bt_setup_id_addr+0x130>)
    9b50:	4b2c      	ldr	r3, [pc, #176]	; (9c04 <bt_setup_id_addr+0x134>)
    9b52:	482f      	ldr	r0, [pc, #188]	; (9c10 <bt_setup_id_addr+0x140>)
    9b54:	1a5b      	subs	r3, r3, r1
    9b56:	08db      	lsrs	r3, r3, #3
    9b58:	f367 02c5 	bfi	r2, r7, #3, #3
    9b5c:	f363 128f 	bfi	r2, r3, #6, #10
    9b60:	492a      	ldr	r1, [pc, #168]	; (9c0c <bt_setup_id_addr+0x13c>)
    9b62:	f7f8 fac3 	bl	20ec <log_1>
		bt_dev.id_count = bt_read_static_addr(addrs);
    9b66:	71ef      	strb	r7, [r5, #7]
    9b68:	e7c6      	b.n	9af8 <bt_setup_id_addr+0x28>
	rp = (void *)rsp->data;
    9b6a:	9b01      	ldr	r3, [sp, #4]
    9b6c:	6899      	ldr	r1, [r3, #8]
	cnt = min(rp->num_addrs, CONFIG_BT_ID_MAX);
    9b6e:	784d      	ldrb	r5, [r1, #1]
    9b70:	1c2f      	adds	r7, r5, #0
    9b72:	bf18      	it	ne
    9b74:	2701      	movne	r7, #1
	for (i = 0; i < cnt; i++) {
    9b76:	4603      	mov	r3, r0
		addr[i].type = BT_ADDR_LE_RANDOM;
    9b78:	f04f 0901 	mov.w	r9, #1
		bt_addr_copy(&addr[i].a, &rp->a[i].bdaddr);
    9b7c:	f101 0802 	add.w	r8, r1, #2
	for (i = 0; i < cnt; i++) {
    9b80:	429f      	cmp	r7, r3
    9b82:	dc26      	bgt.n	9bd2 <bt_setup_id_addr+0x102>
	net_buf_unref(rsp);
    9b84:	9801      	ldr	r0, [sp, #4]
    9b86:	f015 fb65 	bl	1f254 <net_buf_unref>
	if (!cnt) {
    9b8a:	b9b5      	cbnz	r5, 9bba <bt_setup_id_addr+0xea>
		BT_WARN("No static addresses stored in controller");
    9b8c:	4b1b      	ldr	r3, [pc, #108]	; (9bfc <bt_setup_id_addr+0x12c>)
    9b8e:	681b      	ldr	r3, [r3, #0]
    9b90:	f003 0307 	and.w	r3, r3, #7
    9b94:	2b01      	cmp	r3, #1
    9b96:	d910      	bls.n	9bba <bt_setup_id_addr+0xea>
    9b98:	2302      	movs	r3, #2
    9b9a:	f04f 0200 	mov.w	r2, #0
    9b9e:	f363 0202 	bfi	r2, r3, #0, #3
    9ba2:	4917      	ldr	r1, [pc, #92]	; (9c00 <bt_setup_id_addr+0x130>)
    9ba4:	4b17      	ldr	r3, [pc, #92]	; (9c04 <bt_setup_id_addr+0x134>)
    9ba6:	481b      	ldr	r0, [pc, #108]	; (9c14 <bt_setup_id_addr+0x144>)
    9ba8:	1a5b      	subs	r3, r3, r1
    9baa:	f365 02c5 	bfi	r2, r5, #3, #3
    9bae:	08db      	lsrs	r3, r3, #3
    9bb0:	f363 128f 	bfi	r2, r3, #6, #10
    9bb4:	4915      	ldr	r1, [pc, #84]	; (9c0c <bt_setup_id_addr+0x13c>)
    9bb6:	f7f8 fa99 	bl	20ec <log_1>
		bt_dev.id_count = bt_read_static_addr(addrs);
    9bba:	71f7      	strb	r7, [r6, #7]
		if (bt_dev.id_count) {
    9bbc:	2d00      	cmp	r5, #0
    9bbe:	d09b      	beq.n	9af8 <bt_setup_id_addr+0x28>
			for (i = 0; i < bt_dev.id_count; i++) {
    9bc0:	79f3      	ldrb	r3, [r6, #7]
    9bc2:	42a3      	cmp	r3, r4
    9bc4:	dc0f      	bgt.n	9be6 <bt_setup_id_addr+0x116>
			return set_random_address(&bt_dev.id_addr[0].a);
    9bc6:	4814      	ldr	r0, [pc, #80]	; (9c18 <bt_setup_id_addr+0x148>)
    9bc8:	f7fe f8ce 	bl	7d68 <set_random_address>
}
    9bcc:	b005      	add	sp, #20
    9bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(dst, src, sizeof(*dst));
    9bd2:	2206      	movs	r2, #6
    9bd4:	4641      	mov	r1, r8
    9bd6:	f10d 0009 	add.w	r0, sp, #9
		addr[i].type = BT_ADDR_LE_RANDOM;
    9bda:	f88d 9008 	strb.w	r9, [sp, #8]
    9bde:	f7fd f853 	bl	6c88 <memcpy>
	for (i = 0; i < cnt; i++) {
    9be2:	2301      	movs	r3, #1
    9be4:	e7cc      	b.n	9b80 <bt_setup_id_addr+0xb0>
				id_create(i, &addrs[i], NULL);
    9be6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9bea:	ab02      	add	r3, sp, #8
    9bec:	b2e0      	uxtb	r0, r4
    9bee:	4419      	add	r1, r3
    9bf0:	f7fe fbe2 	bl	83b8 <id_create.isra.30>
			for (i = 0; i < bt_dev.id_count; i++) {
    9bf4:	3401      	adds	r4, #1
    9bf6:	e7e3      	b.n	9bc0 <bt_setup_id_addr+0xf0>
    9bf8:	2000d778 	.word	0x2000d778
    9bfc:	2000e238 	.word	0x2000e238
    9c00:	0002ef38 	.word	0x0002ef38
    9c04:	0002efb0 	.word	0x0002efb0
    9c08:	00031484 	.word	0x00031484
    9c0c:	00030e12 	.word	0x00030e12
    9c10:	000314b4 	.word	0x000314b4
    9c14:	000314d8 	.word	0x000314d8
    9c18:	2000d779 	.word	0x2000d779
    9c1c:	00000000 	.word	0x00000000

00009c20 <bt_init>:
{
    9c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9c24:	4d60      	ldr	r5, [pc, #384]	; (9da8 <bt_init+0x188>)
    9c26:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    9c2a:	6899      	ldr	r1, [r3, #8]
    9c2c:	f011 0101 	ands.w	r1, r1, #1
{
    9c30:	b08e      	sub	sp, #56	; 0x38
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9c32:	d124      	bne.n	9c7e <bt_init+0x5e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    9c34:	aa08      	add	r2, sp, #32
    9c36:	f640 4003 	movw	r0, #3075	; 0xc03
    9c3a:	f7fd ffb1 	bl	7ba0 <bt_hci_cmd_send_sync>
		if (err) {
    9c3e:	4604      	mov	r4, r0
    9c40:	2800      	cmp	r0, #0
    9c42:	f040 809a 	bne.w	9d7a <bt_init+0x15a>
		hci_reset_complete(rsp);
    9c46:	9b08      	ldr	r3, [sp, #32]
	u8_t status = buf->data[0];
    9c48:	689b      	ldr	r3, [r3, #8]
	if (status) {
    9c4a:	781b      	ldrb	r3, [r3, #0]
    9c4c:	b9a3      	cbnz	r3, 9c78 <bt_init+0x58>
	scan_dev_found_cb = NULL;
    9c4e:	4a57      	ldr	r2, [pc, #348]	; (9dac <bt_init+0x18c>)
    9c50:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9c52:	462b      	mov	r3, r5
    9c54:	f3bf 8f5b 	dmb	ish
    9c58:	f853 2f70 	ldr.w	r2, [r3, #112]!
    9c5c:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    9c60:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9c64:	f3bf 8f5b 	dmb	ish
    9c68:	e853 1f00 	ldrex	r1, [r3]
    9c6c:	e843 2000 	strex	r0, r2, [r3]
    9c70:	2800      	cmp	r0, #0
    9c72:	d1f9      	bne.n	9c68 <bt_init+0x48>
    9c74:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    9c78:	9808      	ldr	r0, [sp, #32]
    9c7a:	f015 faeb 	bl	1f254 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    9c7e:	aa08      	add	r2, sp, #32
    9c80:	2100      	movs	r1, #0
    9c82:	f241 0003 	movw	r0, #4099	; 0x1003
    9c86:	f7fd ff8b 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    9c8a:	4604      	mov	r4, r0
    9c8c:	2800      	cmp	r0, #0
    9c8e:	d174      	bne.n	9d7a <bt_init+0x15a>
	read_local_features_complete(rsp);
    9c90:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    9c92:	4847      	ldr	r0, [pc, #284]	; (9db0 <bt_init+0x190>)
    9c94:	6899      	ldr	r1, [r3, #8]
    9c96:	2208      	movs	r2, #8
    9c98:	3101      	adds	r1, #1
    9c9a:	f7fc fff5 	bl	6c88 <memcpy>
	net_buf_unref(rsp);
    9c9e:	9808      	ldr	r0, [sp, #32]
    9ca0:	f015 fad8 	bl	1f254 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    9ca4:	4621      	mov	r1, r4
    9ca6:	aa08      	add	r2, sp, #32
    9ca8:	f241 0001 	movw	r0, #4097	; 0x1001
    9cac:	f7fd ff78 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    9cb0:	4604      	mov	r4, r0
    9cb2:	2800      	cmp	r0, #0
    9cb4:	d161      	bne.n	9d7a <bt_init+0x15a>
	read_local_ver_complete(rsp);
    9cb6:	9808      	ldr	r0, [sp, #32]
    9cb8:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    9cba:	785a      	ldrb	r2, [r3, #1]
    9cbc:	742a      	strb	r2, [r5, #16]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    9cbe:	78d9      	ldrb	r1, [r3, #3]
    9cc0:	789a      	ldrb	r2, [r3, #2]
    9cc2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9cc6:	826a      	strh	r2, [r5, #18]
	bt_dev.lmp_version = rp->lmp_version;
    9cc8:	791a      	ldrb	r2, [r3, #4]
    9cca:	746a      	strb	r2, [r5, #17]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    9ccc:	7a19      	ldrb	r1, [r3, #8]
    9cce:	79da      	ldrb	r2, [r3, #7]
    9cd0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9cd4:	82aa      	strh	r2, [r5, #20]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    9cd6:	795a      	ldrb	r2, [r3, #5]
    9cd8:	799b      	ldrb	r3, [r3, #6]
    9cda:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    9cde:	82eb      	strh	r3, [r5, #22]
	net_buf_unref(rsp);
    9ce0:	f015 fab8 	bl	1f254 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    9ce4:	2103      	movs	r1, #3
    9ce6:	4833      	ldr	r0, [pc, #204]	; (9db4 <bt_init+0x194>)
    9ce8:	f7fd fefc 	bl	7ae4 <atomic_test_bit>
    9cec:	4601      	mov	r1, r0
    9cee:	bb48      	cbnz	r0, 9d44 <bt_init+0x124>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    9cf0:	aa08      	add	r2, sp, #32
    9cf2:	f241 0009 	movw	r0, #4105	; 0x1009
    9cf6:	f7fd ff53 	bl	7ba0 <bt_hci_cmd_send_sync>
		if (err) {
    9cfa:	4604      	mov	r4, r0
    9cfc:	2800      	cmp	r0, #0
    9cfe:	d13c      	bne.n	9d7a <bt_init+0x15a>
		read_bdaddr_complete(rsp);
    9d00:	9b08      	ldr	r3, [sp, #32]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    9d02:	9004      	str	r0, [sp, #16]
    9d04:	689e      	ldr	r6, [r3, #8]
    9d06:	f8ad 0014 	strh.w	r0, [sp, #20]
    9d0a:	3601      	adds	r6, #1
	return memcmp(a, b, sizeof(*a));
    9d0c:	2206      	movs	r2, #6
    9d0e:	a904      	add	r1, sp, #16
    9d10:	4630      	mov	r0, r6
    9d12:	f7fc ff92 	bl	6c3a <memcmp>
    9d16:	b190      	cbz	r0, 9d3e <bt_init+0x11e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    9d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9d1c:	2206      	movs	r2, #6
    9d1e:	a906      	add	r1, sp, #24
    9d20:	4630      	mov	r0, r6
    9d22:	9306      	str	r3, [sp, #24]
    9d24:	f8ad 301c 	strh.w	r3, [sp, #28]
    9d28:	f7fc ff87 	bl	6c3a <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    9d2c:	b138      	cbz	r0, 9d3e <bt_init+0x11e>
	memcpy(dst, src, sizeof(*dst));
    9d2e:	2206      	movs	r2, #6
    9d30:	4631      	mov	r1, r6
    9d32:	4821      	ldr	r0, [pc, #132]	; (9db8 <bt_init+0x198>)
    9d34:	f7fc ffa8 	bl	6c88 <memcpy>
	bt_dev.id_count = 1;
    9d38:	2301      	movs	r3, #1
	bt_dev.id_addr[0].type = BT_ADDR_LE_PUBLIC;
    9d3a:	702c      	strb	r4, [r5, #0]
	bt_dev.id_count = 1;
    9d3c:	71eb      	strb	r3, [r5, #7]
		net_buf_unref(rsp);
    9d3e:	9808      	ldr	r0, [sp, #32]
    9d40:	f015 fa88 	bl	1f254 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    9d44:	aa08      	add	r2, sp, #32
    9d46:	2100      	movs	r1, #0
    9d48:	f241 0002 	movw	r0, #4098	; 0x1002
    9d4c:	f7fd ff28 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    9d50:	4604      	mov	r4, r0
    9d52:	b990      	cbnz	r0, 9d7a <bt_init+0x15a>
	read_supported_commands_complete(rsp);
    9d54:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.supported_commands, rp->commands,
    9d56:	4819      	ldr	r0, [pc, #100]	; (9dbc <bt_init+0x19c>)
    9d58:	6899      	ldr	r1, [r3, #8]
    9d5a:	2240      	movs	r2, #64	; 0x40
    9d5c:	3101      	adds	r1, #1
    9d5e:	f7fc ff93 	bl	6c88 <memcpy>
	net_buf_unref(rsp);
    9d62:	9808      	ldr	r0, [sp, #32]
    9d64:	f015 fa76 	bl	1f254 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    9d68:	7f2b      	ldrb	r3, [r5, #28]
    9d6a:	065e      	lsls	r6, r3, #25
    9d6c:	d432      	bmi.n	9dd4 <bt_init+0x1b4>
		BT_ERR("Non-LE capable controller detected!");
    9d6e:	4b14      	ldr	r3, [pc, #80]	; (9dc0 <bt_init+0x1a0>)
    9d70:	681b      	ldr	r3, [r3, #0]
    9d72:	075d      	lsls	r5, r3, #29
    9d74:	d105      	bne.n	9d82 <bt_init+0x162>
		return -ENODEV;
    9d76:	f06f 0412 	mvn.w	r4, #18
}
    9d7a:	4620      	mov	r0, r4
    9d7c:	b00e      	add	sp, #56	; 0x38
    9d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Non-LE capable controller detected!");
    9d82:	2301      	movs	r3, #1
    9d84:	f04f 0200 	mov.w	r2, #0
    9d88:	f363 0202 	bfi	r2, r3, #0, #3
    9d8c:	490d      	ldr	r1, [pc, #52]	; (9dc4 <bt_init+0x1a4>)
    9d8e:	4b0e      	ldr	r3, [pc, #56]	; (9dc8 <bt_init+0x1a8>)
    9d90:	480e      	ldr	r0, [pc, #56]	; (9dcc <bt_init+0x1ac>)
    9d92:	1a5b      	subs	r3, r3, r1
    9d94:	f364 02c5 	bfi	r2, r4, #3, #3
    9d98:	08db      	lsrs	r3, r3, #3
    9d9a:	f363 128f 	bfi	r2, r3, #6, #10
    9d9e:	490c      	ldr	r1, [pc, #48]	; (9dd0 <bt_init+0x1b0>)
    9da0:	f7f8 f9a4 	bl	20ec <log_1>
    9da4:	e7e7      	b.n	9d76 <bt_init+0x156>
    9da6:	bf00      	nop
    9da8:	2000d778 	.word	0x2000d778
    9dac:	20000b48 	.word	0x20000b48
    9db0:	2000d790 	.word	0x2000d790
    9db4:	2000d7e8 	.word	0x2000d7e8
    9db8:	2000d779 	.word	0x2000d779
    9dbc:	2000d798 	.word	0x2000d798
    9dc0:	2000e238 	.word	0x2000e238
    9dc4:	0002ef38 	.word	0x0002ef38
    9dc8:	0002efb0 	.word	0x0002efb0
    9dcc:	000310b0 	.word	0x000310b0
    9dd0:	00030db1 	.word	0x00030db1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    9dd4:	4621      	mov	r1, r4
    9dd6:	aa08      	add	r2, sp, #32
    9dd8:	f242 0003 	movw	r0, #8195	; 0x2003
    9ddc:	f7fd fee0 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    9de0:	4604      	mov	r4, r0
    9de2:	2800      	cmp	r0, #0
    9de4:	d1c9      	bne.n	9d7a <bt_init+0x15a>
	read_le_features_complete(rsp);
    9de6:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9de8:	48a9      	ldr	r0, [pc, #676]	; (a090 <bt_init+0x470>)
    9dea:	6899      	ldr	r1, [r3, #8]
    9dec:	2208      	movs	r2, #8
    9dee:	3101      	adds	r1, #1
    9df0:	f7fc ff4a 	bl	6c88 <memcpy>
	net_buf_unref(rsp);
    9df4:	9808      	ldr	r0, [sp, #32]
    9df6:	f015 fa2d 	bl	1f254 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    9dfa:	4621      	mov	r1, r4
    9dfc:	aa08      	add	r2, sp, #32
    9dfe:	f242 0002 	movw	r0, #8194	; 0x2002
    9e02:	f7fd fecd 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    9e06:	4604      	mov	r4, r0
    9e08:	2800      	cmp	r0, #0
    9e0a:	d1b6      	bne.n	9d7a <bt_init+0x15a>
	le_read_buffer_size_complete(rsp);
    9e0c:	9b08      	ldr	r3, [sp, #32]
    9e0e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    9e10:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9e14:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
    9e18:	b291      	uxth	r1, r2
	if (!bt_dev.le.mtu) {
    9e1a:	b139      	cbz	r1, 9e2c <bt_init+0x20c>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    9e1c:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    9e1e:	489d      	ldr	r0, [pc, #628]	; (a094 <bt_init+0x474>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    9e20:	2a03      	cmp	r2, #3
    9e22:	bf28      	it	cs
    9e24:	2203      	movcs	r2, #3
    9e26:	4611      	mov	r1, r2
    9e28:	f024 fa1e 	bl	2e268 <_impl_k_sem_init>
	net_buf_unref(rsp);
    9e2c:	9808      	ldr	r0, [sp, #32]
    9e2e:	f015 fa11 	bl	1f254 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9e32:	7f2c      	ldrb	r4, [r5, #28]
    9e34:	f014 0420 	ands.w	r4, r4, #32
    9e38:	f000 80d9 	beq.w	9fee <bt_init+0x3ce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    9e3c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    9e40:	071c      	lsls	r4, r3, #28
    9e42:	d511      	bpl.n	9e68 <bt_init+0x248>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    9e44:	aa08      	add	r2, sp, #32
    9e46:	2100      	movs	r1, #0
    9e48:	f242 001c 	movw	r0, #8220	; 0x201c
    9e4c:	f7fd fea8 	bl	7ba0 <bt_hci_cmd_send_sync>
		if (err) {
    9e50:	4604      	mov	r4, r0
    9e52:	2800      	cmp	r0, #0
    9e54:	d191      	bne.n	9d7a <bt_init+0x15a>
		le_read_supp_states_complete(rsp);
    9e56:	9808      	ldr	r0, [sp, #32]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    9e58:	6883      	ldr	r3, [r0, #8]
    9e5a:	f853 2f01 	ldr.w	r2, [r3, #1]!
    9e5e:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    9e60:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    9e64:	f015 f9f6 	bl	1f254 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    9e68:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    9e6c:	0698      	lsls	r0, r3, #26
    9e6e:	f100 80da 	bmi.w	a026 <bt_init+0x406>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    9e72:	2108      	movs	r1, #8
    9e74:	f242 0001 	movw	r0, #8193	; 0x2001
    9e78:	f7fd fe62 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    9e7c:	4604      	mov	r4, r0
    9e7e:	2800      	cmp	r0, #0
    9e80:	f000 80bc 	beq.w	9ffc <bt_init+0x3dc>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    9e84:	2108      	movs	r1, #8
    9e86:	4408      	add	r0, r1
    9e88:	f015 fa42 	bl	1f310 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9e8c:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    9e90:	f895 6079 	ldrb.w	r6, [r5, #121]	; 0x79
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9e94:	0799      	lsls	r1, r3, #30
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    9e96:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    9e98:	bf4c      	ite	mi
    9e9a:	202f      	movmi	r0, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    9e9c:	200f      	movpl	r0, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    9e9e:	069f      	lsls	r7, r3, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    9ea0:	bf48      	it	mi
    9ea2:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    9ea6:	f016 0f09 	tst.w	r6, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    9eaa:	bf18      	it	ne
    9eac:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9eb0:	07de      	lsls	r6, r3, #31
	if ((BT_CMD_TEST(bt_dev.supported_commands, 34, 1)) &&
    9eb2:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
    9eb6:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    9eba:	bf48      	it	mi
    9ebc:	f040 0010 	orrmi.w	r0, r0, #16
	if ((BT_CMD_TEST(bt_dev.supported_commands, 34, 1)) &&
    9ec0:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    9ec2:	bf08      	it	eq
    9ec4:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    9ec8:	2100      	movs	r1, #0
	sys_put_le64(mask, cp_mask->events);
    9eca:	f7fd fe29 	bl	7b20 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    9ece:	4621      	mov	r1, r4
    9ed0:	2200      	movs	r2, #0
    9ed2:	f242 0001 	movw	r0, #8193	; 0x2001
    9ed6:	f7fd fe63 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    9eda:	4604      	mov	r4, r0
    9edc:	2800      	cmp	r0, #0
    9ede:	f47f af4c 	bne.w	9d7a <bt_init+0x15a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9ee2:	7f2b      	ldrb	r3, [r5, #28]
    9ee4:	0698      	lsls	r0, r3, #26
    9ee6:	d421      	bmi.n	9f2c <bt_init+0x30c>
	if (bt_dev.le.mtu) {
    9ee8:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    9eec:	b9f1      	cbnz	r1, 9f2c <bt_init+0x30c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    9eee:	aa08      	add	r2, sp, #32
    9ef0:	f241 0005 	movw	r0, #4101	; 0x1005
    9ef4:	f7fd fe54 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    9ef8:	4604      	mov	r4, r0
    9efa:	2800      	cmp	r0, #0
    9efc:	f47f af3d 	bne.w	9d7a <bt_init+0x15a>
	if (bt_dev.le.mtu) {
    9f00:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    9f04:	b97b      	cbnz	r3, 9f26 <bt_init+0x306>
	read_buffer_size_complete(rsp);
    9f06:	9b08      	ldr	r3, [sp, #32]
    9f08:	4862      	ldr	r0, [pc, #392]	; (a094 <bt_init+0x474>)
    9f0a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    9f0c:	7899      	ldrb	r1, [r3, #2]
    9f0e:	785a      	ldrb	r2, [r3, #1]
    9f10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9f14:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    9f18:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    9f1a:	2a03      	cmp	r2, #3
    9f1c:	bf28      	it	cs
    9f1e:	2203      	movcs	r2, #3
    9f20:	4611      	mov	r1, r2
    9f22:	f024 f9a1 	bl	2e268 <_impl_k_sem_init>
	net_buf_unref(rsp);
    9f26:	9808      	ldr	r0, [sp, #32]
    9f28:	f015 f994 	bl	1f254 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    9f2c:	2108      	movs	r1, #8
    9f2e:	f640 4001 	movw	r0, #3073	; 0xc01
    9f32:	f7fd fe05 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    9f36:	4604      	mov	r4, r0
    9f38:	2800      	cmp	r0, #0
    9f3a:	d05f      	beq.n	9ffc <bt_init+0x3dc>
	ev = net_buf_add(buf, sizeof(*ev));
    9f3c:	2108      	movs	r1, #8
    9f3e:	4408      	add	r0, r1
    9f40:	f015 f9e6 	bl	1f310 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9f44:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    9f48:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
    9f4a:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9f4c:	f140 8097 	bpl.w	a07e <bt_init+0x45e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    9f50:	a14d      	add	r1, pc, #308	; (adr r1, a088 <bt_init+0x468>)
    9f52:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    9f56:	f7fd fde3 	bl	7b20 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    9f5a:	4621      	mov	r1, r4
    9f5c:	2200      	movs	r2, #0
    9f5e:	f640 4001 	movw	r0, #3073	; 0xc01
    9f62:	f7fd fe1d 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    9f66:	4604      	mov	r4, r0
    9f68:	2800      	cmp	r0, #0
    9f6a:	f47f af06 	bne.w	9d7a <bt_init+0x15a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    9f6e:	4601      	mov	r1, r0
    9f70:	aa03      	add	r2, sp, #12
    9f72:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9f76:	f7fd fe13 	bl	7ba0 <bt_hci_cmd_send_sync>
    9f7a:	4e47      	ldr	r6, [pc, #284]	; (a098 <bt_init+0x478>)
	if (err) {
    9f7c:	2800      	cmp	r0, #0
    9f7e:	f000 809b 	beq.w	a0b8 <bt_init+0x498>
		BT_WARN("Vendor HCI extensions not available");
    9f82:	6833      	ldr	r3, [r6, #0]
    9f84:	f003 0307 	and.w	r3, r3, #7
    9f88:	2b01      	cmp	r3, #1
    9f8a:	d910      	bls.n	9fae <bt_init+0x38e>
    9f8c:	2302      	movs	r3, #2
    9f8e:	f04f 0200 	mov.w	r2, #0
    9f92:	f363 0202 	bfi	r2, r3, #0, #3
    9f96:	4941      	ldr	r1, [pc, #260]	; (a09c <bt_init+0x47c>)
    9f98:	4b41      	ldr	r3, [pc, #260]	; (a0a0 <bt_init+0x480>)
    9f9a:	4842      	ldr	r0, [pc, #264]	; (a0a4 <bt_init+0x484>)
    9f9c:	1a5b      	subs	r3, r3, r1
    9f9e:	f364 02c5 	bfi	r2, r4, #3, #3
    9fa2:	08db      	lsrs	r3, r3, #3
    9fa4:	4940      	ldr	r1, [pc, #256]	; (a0a8 <bt_init+0x488>)
    9fa6:	f363 128f 	bfi	r2, r3, #6, #10
		BT_WARN("Failed to read supported vendor commands");
    9faa:	f7f8 f89f 	bl	20ec <log_1>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    9fae:	79ef      	ldrb	r7, [r5, #7]
    9fb0:	2f00      	cmp	r7, #0
    9fb2:	f040 8147 	bne.w	a244 <bt_init+0x624>
		err = bt_setup_id_addr();
    9fb6:	f7ff fd8b 	bl	9ad0 <bt_setup_id_addr>
		if (err) {
    9fba:	4604      	mov	r4, r0
    9fbc:	2800      	cmp	r0, #0
    9fbe:	f000 813f 	beq.w	a240 <bt_init+0x620>
			BT_ERR("Unable to set identity address");
    9fc2:	6833      	ldr	r3, [r6, #0]
    9fc4:	075b      	lsls	r3, r3, #29
    9fc6:	f43f aed8 	beq.w	9d7a <bt_init+0x15a>
    9fca:	2301      	movs	r3, #1
    9fcc:	f04f 0200 	mov.w	r2, #0
    9fd0:	f363 0202 	bfi	r2, r3, #0, #3
    9fd4:	4931      	ldr	r1, [pc, #196]	; (a09c <bt_init+0x47c>)
    9fd6:	4b32      	ldr	r3, [pc, #200]	; (a0a0 <bt_init+0x480>)
    9fd8:	4834      	ldr	r0, [pc, #208]	; (a0ac <bt_init+0x48c>)
    9fda:	1a5b      	subs	r3, r3, r1
    9fdc:	f367 02c5 	bfi	r2, r7, #3, #3
    9fe0:	08db      	lsrs	r3, r3, #3
    9fe2:	f363 128f 	bfi	r2, r3, #6, #10
    9fe6:	4932      	ldr	r1, [pc, #200]	; (a0b0 <bt_init+0x490>)
    9fe8:	f7f8 f880 	bl	20ec <log_1>
    9fec:	e6c5      	b.n	9d7a <bt_init+0x15a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    9fee:	2102      	movs	r1, #2
    9ff0:	f640 406d 	movw	r0, #3181	; 0xc6d
    9ff4:	f7fd fda4 	bl	7b40 <bt_hci_cmd_create>
		if (!buf) {
    9ff8:	4606      	mov	r6, r0
    9ffa:	b910      	cbnz	r0, a002 <bt_init+0x3e2>
		return -ENOBUFS;
    9ffc:	f06f 0436 	mvn.w	r4, #54	; 0x36
    a000:	e6bb      	b.n	9d7a <bt_init+0x15a>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    a002:	2102      	movs	r1, #2
    a004:	3008      	adds	r0, #8
    a006:	f015 f983 	bl	1f310 <net_buf_simple_add>
		cp_le->le = 0x01;
    a00a:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    a00c:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    a00e:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    a010:	4622      	mov	r2, r4
    a012:	4631      	mov	r1, r6
    a014:	f640 406d 	movw	r0, #3181	; 0xc6d
    a018:	f7fd fdc2 	bl	7ba0 <bt_hci_cmd_send_sync>
		if (err) {
    a01c:	4604      	mov	r4, r0
    a01e:	2800      	cmp	r0, #0
    a020:	f43f af0c 	beq.w	9e3c <bt_init+0x21c>
    a024:	e6a9      	b.n	9d7a <bt_init+0x15a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    a026:	aa08      	add	r2, sp, #32
    a028:	2100      	movs	r1, #0
    a02a:	f242 002f 	movw	r0, #8239	; 0x202f
    a02e:	f7fd fdb7 	bl	7ba0 <bt_hci_cmd_send_sync>
		if (err) {
    a032:	4604      	mov	r4, r0
    a034:	2800      	cmp	r0, #0
    a036:	f47f aea0 	bne.w	9d7a <bt_init+0x15a>
		rp = (void *)rsp->data;
    a03a:	9808      	ldr	r0, [sp, #32]
    a03c:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    a03e:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    a042:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    a046:	f015 f905 	bl	1f254 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    a04a:	2104      	movs	r1, #4
    a04c:	f242 0024 	movw	r0, #8228	; 0x2024
    a050:	f7fd fd76 	bl	7b40 <bt_hci_cmd_create>
		if (!buf) {
    a054:	4606      	mov	r6, r0
    a056:	2800      	cmp	r0, #0
    a058:	d0d0      	beq.n	9ffc <bt_init+0x3dc>
		cp = net_buf_add(buf, sizeof(*cp));
    a05a:	2104      	movs	r1, #4
    a05c:	3008      	adds	r0, #8
    a05e:	f015 f957 	bl	1f310 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    a062:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    a064:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    a068:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    a06a:	4631      	mov	r1, r6
    a06c:	f242 0024 	movw	r0, #8228	; 0x2024
    a070:	f7fd fd96 	bl	7ba0 <bt_hci_cmd_send_sync>
		if (err) {
    a074:	4604      	mov	r4, r0
    a076:	2800      	cmp	r0, #0
    a078:	f43f aefb 	beq.w	9e72 <bt_init+0x252>
    a07c:	e67d      	b.n	9d7a <bt_init+0x15a>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    a07e:	480d      	ldr	r0, [pc, #52]	; (a0b4 <bt_init+0x494>)
    a080:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    a084:	e767      	b.n	9f56 <bt_init+0x336>
    a086:	bf00      	nop
    a088:	02008890 	.word	0x02008890
    a08c:	20008000 	.word	0x20008000
    a090:	2000d7f0 	.word	0x2000d7f0
    a094:	2000d804 	.word	0x2000d804
    a098:	2000e238 	.word	0x2000e238
    a09c:	0002ef38 	.word	0x0002ef38
    a0a0:	0002efb0 	.word	0x0002efb0
    a0a4:	000310d8 	.word	0x000310d8
    a0a8:	00030dca 	.word	0x00030dca
    a0ac:	000311c4 	.word	0x000311c4
    a0b0:	00030dd6 	.word	0x00030dd6
    a0b4:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
    a0b8:	9b03      	ldr	r3, [sp, #12]
    a0ba:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    a0bc:	6833      	ldr	r3, [r6, #0]
    a0be:	f003 0307 	and.w	r3, r3, #7
    a0c2:	2b02      	cmp	r3, #2
    a0c4:	d91a      	bls.n	a0fc <bt_init+0x4dc>
    a0c6:	2303      	movs	r3, #3
    a0c8:	f04f 0100 	mov.w	r1, #0
    a0cc:	4a68      	ldr	r2, [pc, #416]	; (a270 <bt_init+0x650>)
    a0ce:	f363 0102 	bfi	r1, r3, #0, #3
    a0d2:	4b68      	ldr	r3, [pc, #416]	; (a274 <bt_init+0x654>)
    a0d4:	1a9b      	subs	r3, r3, r2
    a0d6:	f360 01c5 	bfi	r1, r0, #3, #3
    a0da:	08db      	lsrs	r3, r3, #3
    a0dc:	f363 118f 	bfi	r1, r3, #6, #10
    a0e0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    a0e4:	4864      	ldr	r0, [pc, #400]	; (a278 <bt_init+0x658>)
    a0e6:	f8ad 1000 	strh.w	r1, [sp]
	if (platform < ARRAY_SIZE(plat_str)) {
    a0ea:	2b03      	cmp	r3, #3
		return plat_str[platform];
    a0ec:	bf96      	itet	ls
    a0ee:	4a63      	ldrls	r2, [pc, #396]	; (a27c <bt_init+0x65c>)
	return "unknown";
    a0f0:	4a63      	ldrhi	r2, [pc, #396]	; (a280 <bt_init+0x660>)
		return plat_str[platform];
    a0f2:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    a0f6:	4963      	ldr	r1, [pc, #396]	; (a284 <bt_init+0x664>)
    a0f8:	f7f8 f824 	bl	2144 <log_3>
	BT_INFO("HW Variant: %s (0x%04x)",
    a0fc:	6833      	ldr	r3, [r6, #0]
    a0fe:	f003 0307 	and.w	r3, r3, #7
    a102:	2b02      	cmp	r3, #2
    a104:	d91d      	bls.n	a142 <bt_init+0x522>
    a106:	2303      	movs	r3, #3
    a108:	f04f 0100 	mov.w	r1, #0
    a10c:	f363 0102 	bfi	r1, r3, #0, #3
    a110:	4a57      	ldr	r2, [pc, #348]	; (a270 <bt_init+0x650>)
    a112:	4b58      	ldr	r3, [pc, #352]	; (a274 <bt_init+0x654>)
    a114:	1a9b      	subs	r3, r3, r2
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    a116:	f8b4 2001 	ldrh.w	r2, [r4, #1]
    a11a:	08db      	lsrs	r3, r3, #3
	BT_INFO("HW Variant: %s (0x%04x)",
    a11c:	f36f 01c5 	bfc	r1, #3, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    a120:	2a02      	cmp	r2, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    a122:	f363 118f 	bfi	r1, r3, #6, #10
    a126:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    a12a:	d155      	bne.n	a1d8 <bt_init+0x5b8>
	if (variant < ARRAY_SIZE(nordic_str)) {
    a12c:	2b02      	cmp	r3, #2
    a12e:	d853      	bhi.n	a1d8 <bt_init+0x5b8>
		return nordic_str[variant];
    a130:	4a55      	ldr	r2, [pc, #340]	; (a288 <bt_init+0x668>)
    a132:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    a136:	f8ad 1000 	strh.w	r1, [sp]
    a13a:	4854      	ldr	r0, [pc, #336]	; (a28c <bt_init+0x66c>)
    a13c:	4951      	ldr	r1, [pc, #324]	; (a284 <bt_init+0x664>)
    a13e:	f7f8 f801 	bl	2144 <log_3>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    a142:	6833      	ldr	r3, [r6, #0]
    a144:	f003 0307 	and.w	r3, r3, #7
    a148:	2b02      	cmp	r3, #2
    a14a:	d924      	bls.n	a196 <bt_init+0x576>
    a14c:	2203      	movs	r2, #3
    a14e:	f04f 0300 	mov.w	r3, #0
    a152:	4947      	ldr	r1, [pc, #284]	; (a270 <bt_init+0x650>)
    a154:	484e      	ldr	r0, [pc, #312]	; (a290 <bt_init+0x670>)
    a156:	f362 0302 	bfi	r3, r2, #0, #3
    a15a:	4a46      	ldr	r2, [pc, #280]	; (a274 <bt_init+0x654>)
    a15c:	1a52      	subs	r2, r2, r1
    a15e:	08d2      	lsrs	r2, r2, #3
    a160:	f36f 03c5 	bfc	r3, #3, #3
    a164:	f362 138f 	bfi	r3, r2, #6, #10
    a168:	4a46      	ldr	r2, [pc, #280]	; (a284 <bt_init+0x664>)
    a16a:	9208      	str	r2, [sp, #32]
    a16c:	7962      	ldrb	r2, [r4, #5]
	if (variant < ARRAY_SIZE(var_str)) {
    a16e:	2a03      	cmp	r2, #3
		return var_str[variant];
    a170:	bf96      	itet	ls
    a172:	4948      	ldrls	r1, [pc, #288]	; (a294 <bt_init+0x674>)
	return "unknown";
    a174:	4942      	ldrhi	r1, [pc, #264]	; (a280 <bt_init+0x660>)
		return var_str[variant];
    a176:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    a17a:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
    a17e:	79a2      	ldrb	r2, [r4, #6]
    a180:	920b      	str	r2, [sp, #44]	; 0x2c
    a182:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    a186:	920c      	str	r2, [sp, #48]	; 0x30
    a188:	f8d4 2009 	ldr.w	r2, [r4, #9]
    a18c:	920d      	str	r2, [sp, #52]	; 0x34
    a18e:	a908      	add	r1, sp, #32
    a190:	2206      	movs	r2, #6
    a192:	f7f7 fff2 	bl	217a <log_n>
	net_buf_unref(rsp);
    a196:	9803      	ldr	r0, [sp, #12]
    a198:	f015 f85c 	bl	1f254 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    a19c:	aa03      	add	r2, sp, #12
    a19e:	2100      	movs	r1, #0
    a1a0:	f64f 4002 	movw	r0, #64514	; 0xfc02
    a1a4:	f7fd fcfc 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    a1a8:	4604      	mov	r4, r0
    a1aa:	b1b8      	cbz	r0, a1dc <bt_init+0x5bc>
		BT_WARN("Failed to read supported vendor features");
    a1ac:	6833      	ldr	r3, [r6, #0]
    a1ae:	f003 0307 	and.w	r3, r3, #7
    a1b2:	2b01      	cmp	r3, #1
    a1b4:	f67f aefb 	bls.w	9fae <bt_init+0x38e>
    a1b8:	2302      	movs	r3, #2
    a1ba:	f04f 0200 	mov.w	r2, #0
    a1be:	f363 0202 	bfi	r2, r3, #0, #3
    a1c2:	492b      	ldr	r1, [pc, #172]	; (a270 <bt_init+0x650>)
    a1c4:	4b2b      	ldr	r3, [pc, #172]	; (a274 <bt_init+0x654>)
    a1c6:	4834      	ldr	r0, [pc, #208]	; (a298 <bt_init+0x678>)
    a1c8:	1a5b      	subs	r3, r3, r1
    a1ca:	f36f 02c5 	bfc	r2, #3, #3
    a1ce:	08db      	lsrs	r3, r3, #3
    a1d0:	f363 128f 	bfi	r2, r3, #6, #10
    a1d4:	492b      	ldr	r1, [pc, #172]	; (a284 <bt_init+0x664>)
    a1d6:	e6e8      	b.n	9faa <bt_init+0x38a>
		return "unknown";
    a1d8:	4a29      	ldr	r2, [pc, #164]	; (a280 <bt_init+0x660>)
    a1da:	e7ac      	b.n	a136 <bt_init+0x516>
	rp.cmds = (void *)rsp->data;
    a1dc:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    a1de:	482f      	ldr	r0, [pc, #188]	; (a29c <bt_init+0x67c>)
    a1e0:	6899      	ldr	r1, [r3, #8]
    a1e2:	2202      	movs	r2, #2
    a1e4:	3101      	adds	r1, #1
    a1e6:	f7fc fd4f 	bl	6c88 <memcpy>
	net_buf_unref(rsp);
    a1ea:	9803      	ldr	r0, [sp, #12]
    a1ec:	f015 f832 	bl	1f254 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    a1f0:	aa03      	add	r2, sp, #12
    a1f2:	4621      	mov	r1, r4
    a1f4:	f64f 4003 	movw	r0, #64515	; 0xfc03
    a1f8:	f7fd fcd2 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    a1fc:	b1a8      	cbz	r0, a22a <bt_init+0x60a>
		BT_WARN("Failed to read supported vendor commands");
    a1fe:	6833      	ldr	r3, [r6, #0]
    a200:	f003 0307 	and.w	r3, r3, #7
    a204:	2b01      	cmp	r3, #1
    a206:	f67f aed2 	bls.w	9fae <bt_init+0x38e>
    a20a:	2302      	movs	r3, #2
    a20c:	f04f 0200 	mov.w	r2, #0
    a210:	f363 0202 	bfi	r2, r3, #0, #3
    a214:	4916      	ldr	r1, [pc, #88]	; (a270 <bt_init+0x650>)
    a216:	4b17      	ldr	r3, [pc, #92]	; (a274 <bt_init+0x654>)
    a218:	4821      	ldr	r0, [pc, #132]	; (a2a0 <bt_init+0x680>)
    a21a:	1a5b      	subs	r3, r3, r1
    a21c:	f364 02c5 	bfi	r2, r4, #3, #3
    a220:	08db      	lsrs	r3, r3, #3
    a222:	f363 128f 	bfi	r2, r3, #6, #10
    a226:	4917      	ldr	r1, [pc, #92]	; (a284 <bt_init+0x664>)
    a228:	e6bf      	b.n	9faa <bt_init+0x38a>
	rp.feat = (void *)rsp->data;
    a22a:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    a22c:	481d      	ldr	r0, [pc, #116]	; (a2a4 <bt_init+0x684>)
    a22e:	6899      	ldr	r1, [r3, #8]
    a230:	2201      	movs	r2, #1
    a232:	4411      	add	r1, r2
    a234:	f7fc fd28 	bl	6c88 <memcpy>
	net_buf_unref(rsp);
    a238:	9803      	ldr	r0, [sp, #12]
    a23a:	f015 f80b 	bl	1f254 <net_buf_unref>
    a23e:	e6b6      	b.n	9fae <bt_init+0x38e>
		bt_dev_show_info();
    a240:	f7fe f8e6 	bl	8410 <bt_dev_show_info>
		err = bt_conn_init();
    a244:	f001 fa1e 	bl	b684 <bt_conn_init>
		if (err) {
    a248:	4604      	mov	r4, r0
    a24a:	2800      	cmp	r0, #0
    a24c:	f47f ad95 	bne.w	9d7a <bt_init+0x15a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a250:	2102      	movs	r1, #2
    a252:	4815      	ldr	r0, [pc, #84]	; (a2a8 <bt_init+0x688>)
    a254:	f7fd fb1f 	bl	7896 <atomic_or>
		bt_le_scan_update(false);
    a258:	4620      	mov	r0, r4
    a25a:	f7fe fa27 	bl	86ac <bt_le_scan_update>
	if (bt_dev.id_count > 0) {
    a25e:	79eb      	ldrb	r3, [r5, #7]
    a260:	2b00      	cmp	r3, #0
    a262:	f43f ad8a 	beq.w	9d7a <bt_init+0x15a>
    a266:	2104      	movs	r1, #4
    a268:	480f      	ldr	r0, [pc, #60]	; (a2a8 <bt_init+0x688>)
    a26a:	f7fd fb14 	bl	7896 <atomic_or>
    a26e:	e584      	b.n	9d7a <bt_init+0x15a>
    a270:	0002ef38 	.word	0x0002ef38
    a274:	0002efb0 	.word	0x0002efb0
    a278:	00031100 	.word	0x00031100
    a27c:	0003164c 	.word	0x0003164c
    a280:	000317c4 	.word	0x000317c4
    a284:	00030dca 	.word	0x00030dca
    a288:	00031640 	.word	0x00031640
    a28c:	0003111d 	.word	0x0003111d
    a290:	00031139 	.word	0x00031139
    a294:	000317b4 	.word	0x000317b4
    a298:	0003116a 	.word	0x0003116a
    a29c:	2000d7d9 	.word	0x2000d7d9
    a2a0:	00031197 	.word	0x00031197
    a2a4:	2000d7d8 	.word	0x2000d7d8
    a2a8:	2000d7e8 	.word	0x2000d7e8

0000a2ac <init_work>:
{
    a2ac:	b510      	push	{r4, lr}
	err = bt_init();
    a2ae:	f7ff fcb7 	bl	9c20 <bt_init>
	if (ready_cb) {
    a2b2:	4b03      	ldr	r3, [pc, #12]	; (a2c0 <init_work+0x14>)
    a2b4:	681b      	ldr	r3, [r3, #0]
    a2b6:	b113      	cbz	r3, a2be <init_work+0x12>
}
    a2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    a2bc:	4718      	bx	r3
}
    a2be:	bd10      	pop	{r4, pc}
    a2c0:	20000b44 	.word	0x20000b44

0000a2c4 <bt_enable>:
{
    a2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.drv) {
    a2c6:	4e36      	ldr	r6, [pc, #216]	; (a3a0 <bt_enable+0xdc>)
    a2c8:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
{
    a2cc:	b087      	sub	sp, #28
    a2ce:	4607      	mov	r7, r0
	if (!bt_dev.drv) {
    a2d0:	b9bb      	cbnz	r3, a302 <bt_enable+0x3e>
		BT_ERR("No HCI driver registered");
    a2d2:	4a34      	ldr	r2, [pc, #208]	; (a3a4 <bt_enable+0xe0>)
    a2d4:	6812      	ldr	r2, [r2, #0]
    a2d6:	0751      	lsls	r1, r2, #29
    a2d8:	d010      	beq.n	a2fc <bt_enable+0x38>
    a2da:	2101      	movs	r1, #1
    a2dc:	f04f 0200 	mov.w	r2, #0
    a2e0:	f361 0202 	bfi	r2, r1, #0, #3
    a2e4:	f363 02c5 	bfi	r2, r3, #3, #3
    a2e8:	492f      	ldr	r1, [pc, #188]	; (a3a8 <bt_enable+0xe4>)
    a2ea:	4b30      	ldr	r3, [pc, #192]	; (a3ac <bt_enable+0xe8>)
    a2ec:	4830      	ldr	r0, [pc, #192]	; (a3b0 <bt_enable+0xec>)
    a2ee:	1a5b      	subs	r3, r3, r1
    a2f0:	08db      	lsrs	r3, r3, #3
    a2f2:	f363 128f 	bfi	r2, r3, #6, #10
    a2f6:	492f      	ldr	r1, [pc, #188]	; (a3b4 <bt_enable+0xf0>)
    a2f8:	f7f7 fef8 	bl	20ec <log_1>
		return -ENODEV;
    a2fc:	f06f 0412 	mvn.w	r4, #18
    a300:	e034      	b.n	a36c <bt_enable+0xa8>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    a302:	2101      	movs	r1, #1
    a304:	f106 0070 	add.w	r0, r6, #112	; 0x70
    a308:	f7fd fac5 	bl	7896 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    a30c:	f010 0501 	ands.w	r5, r0, #1
    a310:	d142      	bne.n	a398 <bt_enable+0xd4>
	ready_cb = cb;
    a312:	4b29      	ldr	r3, [pc, #164]	; (a3b8 <bt_enable+0xf4>)
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    a314:	4929      	ldr	r1, [pc, #164]	; (a3bc <bt_enable+0xf8>)
    a316:	601f      	str	r7, [r3, #0]
    a318:	f06f 0308 	mvn.w	r3, #8
    a31c:	e9cd 5302 	strd	r5, r3, [sp, #8]
    a320:	f44f 7220 	mov.w	r2, #640	; 0x280
    a324:	4b26      	ldr	r3, [pc, #152]	; (a3c0 <bt_enable+0xfc>)
    a326:	4827      	ldr	r0, [pc, #156]	; (a3c4 <bt_enable+0x100>)
    a328:	e9cd 5504 	strd	r5, r5, [sp, #16]
    a32c:	e9cd 5500 	strd	r5, r5, [sp]
    a330:	f024 f874 	bl	2e41c <_impl_k_thread_create>
	err = bt_dev.drv->open();
    a334:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
    a338:	68db      	ldr	r3, [r3, #12]
    a33a:	4798      	blx	r3
	if (err) {
    a33c:	4604      	mov	r4, r0
    a33e:	b1c0      	cbz	r0, a372 <bt_enable+0xae>
		BT_ERR("HCI driver open failed (%d)", err);
    a340:	4b18      	ldr	r3, [pc, #96]	; (a3a4 <bt_enable+0xe0>)
    a342:	681b      	ldr	r3, [r3, #0]
    a344:	075a      	lsls	r2, r3, #29
    a346:	d011      	beq.n	a36c <bt_enable+0xa8>
    a348:	2201      	movs	r2, #1
    a34a:	f04f 0300 	mov.w	r3, #0
    a34e:	f362 0302 	bfi	r3, r2, #0, #3
    a352:	4915      	ldr	r1, [pc, #84]	; (a3a8 <bt_enable+0xe4>)
    a354:	4a15      	ldr	r2, [pc, #84]	; (a3ac <bt_enable+0xe8>)
    a356:	1a52      	subs	r2, r2, r1
    a358:	08d2      	lsrs	r2, r2, #3
    a35a:	f365 03c5 	bfi	r3, r5, #3, #3
    a35e:	f362 138f 	bfi	r3, r2, #6, #10
    a362:	4914      	ldr	r1, [pc, #80]	; (a3b4 <bt_enable+0xf0>)
    a364:	4602      	mov	r2, r0
    a366:	4818      	ldr	r0, [pc, #96]	; (a3c8 <bt_enable+0x104>)
    a368:	f7f7 fed4 	bl	2114 <log_2>
}
    a36c:	4620      	mov	r0, r4
    a36e:	b007      	add	sp, #28
    a370:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!cb) {
    a372:	b927      	cbnz	r7, a37e <bt_enable+0xba>
}
    a374:	b007      	add	sp, #28
    a376:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return bt_init();
    a37a:	f7ff bc51 	b.w	9c20 <bt_init>
    a37e:	2101      	movs	r1, #1
    a380:	f106 006c 	add.w	r0, r6, #108	; 0x6c
    a384:	f7fd fa87 	bl	7896 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    a388:	07c3      	lsls	r3, r0, #31
    a38a:	d4ef      	bmi.n	a36c <bt_enable+0xa8>
		k_queue_append(&work_q->queue, work);
    a38c:	f106 0164 	add.w	r1, r6, #100	; 0x64
    a390:	480e      	ldr	r0, [pc, #56]	; (a3cc <bt_enable+0x108>)
    a392:	f023 fc53 	bl	2dc3c <k_queue_append>
    a396:	e7e9      	b.n	a36c <bt_enable+0xa8>
		return -EALREADY;
    a398:	f06f 0444 	mvn.w	r4, #68	; 0x44
    a39c:	e7e6      	b.n	a36c <bt_enable+0xa8>
    a39e:	bf00      	nop
    a3a0:	2000d778 	.word	0x2000d778
    a3a4:	2000e238 	.word	0x2000e238
    a3a8:	0002ef38 	.word	0x0002ef38
    a3ac:	0002efb0 	.word	0x0002efb0
    a3b0:	00030ece 	.word	0x00030ece
    a3b4:	00030df4 	.word	0x00030df4
    a3b8:	20000b44 	.word	0x20000b44
    a3bc:	20005100 	.word	0x20005100
    a3c0:	000089f9 	.word	0x000089f9
    a3c4:	20000b4c 	.word	0x20000b4c
    a3c8:	00030eeb 	.word	0x00030eeb
    a3cc:	200037b0 	.word	0x200037b0

0000a3d0 <bt_addr_le_is_bonded>:
{
    a3d0:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
    a3d2:	f006 ff45 	bl	11260 <bt_keys_find_addr>
		return keys && keys->keys;
    a3d6:	b118      	cbz	r0, a3e0 <bt_addr_le_is_bonded+0x10>
    a3d8:	8940      	ldrh	r0, [r0, #10]
    a3da:	3000      	adds	r0, #0
    a3dc:	bf18      	it	ne
    a3de:	2001      	movne	r0, #1
}
    a3e0:	bd08      	pop	{r3, pc}
	...

0000a3e4 <bt_le_adv_start_internal>:

int bt_le_adv_start_internal(const struct bt_le_adv_param *param,
			     const struct bt_data *ad, size_t ad_len,
			     const struct bt_data *sd, size_t sd_len,
			     const bt_addr_le_t *peer)
{
    a3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (param->id >= bt_dev.id_count ||
    a3e8:	4e73      	ldr	r6, [pc, #460]	; (a5b8 <bt_le_adv_start_internal+0x1d4>)
{
    a3ea:	4604      	mov	r4, r0
    a3ec:	4698      	mov	r8, r3
	if (param->id >= bt_dev.id_count ||
    a3ee:	7800      	ldrb	r0, [r0, #0]
    a3f0:	79f3      	ldrb	r3, [r6, #7]
{
    a3f2:	b088      	sub	sp, #32
	if (param->id >= bt_dev.id_count ||
    a3f4:	4283      	cmp	r3, r0
{
    a3f6:	460d      	mov	r5, r1
    a3f8:	4692      	mov	sl, r2
    a3fa:	9f11      	ldr	r7, [sp, #68]	; 0x44
	if (param->id >= bt_dev.id_count ||
    a3fc:	d805      	bhi.n	a40a <bt_le_adv_start_internal+0x26>
	struct net_buf *buf;
	bool dir_adv = (peer != NULL);
	int err = 0;

	if (!valid_adv_param(param, dir_adv)) {
		return -EINVAL;
    a3fe:	f06f 0515 	mvn.w	r5, #21
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
		atomic_set_bit(bt_dev.flags, BT_DEV_ADVERTISING_CONNECTABLE);
	}

	return 0;
}
    a402:	4628      	mov	r0, r5
    a404:	b008      	add	sp, #32
    a406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    a40a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a40e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    a410:	2207      	movs	r2, #7
    a412:	a902      	add	r1, sp, #8
    a414:	4430      	add	r0, r6
    a416:	9302      	str	r3, [sp, #8]
    a418:	f8cd 300b 	str.w	r3, [sp, #11]
    a41c:	f7fc fc0d 	bl	6c3a <memcmp>
	if (param->id >= bt_dev.id_count ||
    a420:	2800      	cmp	r0, #0
    a422:	d0ec      	beq.n	a3fe <bt_le_adv_start_internal+0x1a>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    a424:	7863      	ldrb	r3, [r4, #1]
    a426:	07d8      	lsls	r0, r3, #31
    a428:	d405      	bmi.n	a436 <bt_le_adv_start_internal+0x52>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    a42a:	7c32      	ldrb	r2, [r6, #16]
    a42c:	2a08      	cmp	r2, #8
    a42e:	d802      	bhi.n	a436 <bt_le_adv_start_internal+0x52>
    a430:	8862      	ldrh	r2, [r4, #2]
    a432:	2a9f      	cmp	r2, #159	; 0x9f
    a434:	d9e3      	bls.n	a3fe <bt_le_adv_start_internal+0x1a>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) || !dir_adv) {
    a436:	06d9      	lsls	r1, r3, #27
    a438:	d400      	bmi.n	a43c <bt_le_adv_start_internal+0x58>
    a43a:	b947      	cbnz	r7, a44e <bt_le_adv_start_internal+0x6a>
		if (param->interval_min > param->interval_max ||
    a43c:	8862      	ldrh	r2, [r4, #2]
    a43e:	88a3      	ldrh	r3, [r4, #4]
    a440:	429a      	cmp	r2, r3
    a442:	d8dc      	bhi.n	a3fe <bt_le_adv_start_internal+0x1a>
    a444:	2a1f      	cmp	r2, #31
    a446:	d9da      	bls.n	a3fe <bt_le_adv_start_internal+0x1a>
		    param->interval_min < 0x0020 ||
    a448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    a44c:	d8d7      	bhi.n	a3fe <bt_le_adv_start_internal+0x1a>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    a44e:	2106      	movs	r1, #6
    a450:	485a      	ldr	r0, [pc, #360]	; (a5bc <bt_le_adv_start_internal+0x1d8>)
    a452:	f7fd fb47 	bl	7ae4 <atomic_test_bit>
    a456:	4681      	mov	r9, r0
    a458:	2800      	cmp	r0, #0
    a45a:	f040 80a7 	bne.w	a5ac <bt_le_adv_start_internal+0x1c8>
	if (!dir_adv) {
    a45e:	b377      	cbz	r7, a4be <bt_le_adv_start_internal+0xda>
	(void)memset(&set_param, 0, sizeof(set_param));
    a460:	220f      	movs	r2, #15
    a462:	2100      	movs	r1, #0
    a464:	a804      	add	r0, sp, #16
    a466:	f7fc fc3c 	bl	6ce2 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    a46a:	8863      	ldrh	r3, [r4, #2]
	bt_dev.adv_id = param->id;
    a46c:	7825      	ldrb	r5, [r4, #0]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    a46e:	f8ad 3010 	strh.w	r3, [sp, #16]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    a472:	88a3      	ldrh	r3, [r4, #4]
	bt_dev.adv_id = param->id;
    a474:	7235      	strb	r5, [r6, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    a476:	f8ad 3012 	strh.w	r3, [sp, #18]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    a47a:	7863      	ldrb	r3, [r4, #1]
	set_param.channel_map  = 0x07;
    a47c:	2007      	movs	r0, #7
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    a47e:	07da      	lsls	r2, r3, #31
	set_param.channel_map  = 0x07;
    a480:	f88d 001d 	strb.w	r0, [sp, #29]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    a484:	d42c      	bmi.n	a4e0 <bt_le_adv_start_internal+0xfc>
		if (param->options & BT_LE_ADV_OPT_USE_IDENTITY) {
    a486:	075f      	lsls	r7, r3, #29
    a488:	f140 8087 	bpl.w	a59a <bt_le_adv_start_internal+0x1b6>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    a48c:	00ef      	lsls	r7, r5, #3
    a48e:	1b7b      	subs	r3, r7, r5
    a490:	5cf3      	ldrb	r3, [r6, r3]
    a492:	2b01      	cmp	r3, #1
    a494:	d105      	bne.n	a4a2 <bt_le_adv_start_internal+0xbe>
				err = set_random_address(&id_addr->a);
    a496:	fb10 3005 	smlabb	r0, r0, r5, r3
    a49a:	4430      	add	r0, r6
    a49c:	f7fd fc64 	bl	7d68 <set_random_address>
    a4a0:	4681      	mov	r9, r0
			set_param.own_addr_type = id_addr->type;
    a4a2:	1b7d      	subs	r5, r7, r5
    a4a4:	5d73      	ldrb	r3, [r6, r5]
    a4a6:	f88d 3015 	strb.w	r3, [sp, #21]
    a4aa:	464d      	mov	r5, r9
		if (err) {
    a4ac:	2d00      	cmp	r5, #0
    a4ae:	d1a8      	bne.n	a402 <bt_le_adv_start_internal+0x1e>
		if (sd) {
    a4b0:	f1b8 0f00 	cmp.w	r8, #0
    a4b4:	d078      	beq.n	a5a8 <bt_le_adv_start_internal+0x1c4>
			set_param.type = BT_LE_ADV_SCAN_IND;
    a4b6:	2302      	movs	r3, #2
			set_param.type = BT_LE_ADV_NONCONN_IND;
    a4b8:	f88d 3014 	strb.w	r3, [sp, #20]
    a4bc:	e033      	b.n	a526 <bt_le_adv_start_internal+0x142>
				    param->options & BT_LE_ADV_OPT_CONNECTABLE,
    a4be:	7863      	ldrb	r3, [r4, #1]
		err = le_adv_update(ad, ad_len, sd, sd_len,
    a4c0:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    a4c4:	f003 0301 	and.w	r3, r3, #1
    a4c8:	9201      	str	r2, [sp, #4]
    a4ca:	9300      	str	r3, [sp, #0]
    a4cc:	4628      	mov	r0, r5
    a4ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a4d0:	4642      	mov	r2, r8
    a4d2:	4651      	mov	r1, sl
    a4d4:	f7fd fd00 	bl	7ed8 <le_adv_update>
		if (err) {
    a4d8:	4605      	mov	r5, r0
    a4da:	2800      	cmp	r0, #0
    a4dc:	d0c0      	beq.n	a460 <bt_le_adv_start_internal+0x7c>
    a4de:	e790      	b.n	a402 <bt_le_adv_start_internal+0x1e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    a4e0:	ea4f 08c5 	mov.w	r8, r5, lsl #3
    a4e4:	eba8 0305 	sub.w	r3, r8, r5
    a4e8:	5cf3      	ldrb	r3, [r6, r3]
    a4ea:	2b01      	cmp	r3, #1
    a4ec:	d104      	bne.n	a4f8 <bt_le_adv_start_internal+0x114>
				set_random_address(&id_addr->a);
    a4ee:	fb10 3005 	smlabb	r0, r0, r5, r3
    a4f2:	4430      	add	r0, r6
    a4f4:	f7fd fc38 	bl	7d68 <set_random_address>
			set_param.own_addr_type = id_addr->type;
    a4f8:	eba8 0505 	sub.w	r5, r8, r5
    a4fc:	5d73      	ldrb	r3, [r6, r5]
    a4fe:	f88d 3015 	strb.w	r3, [sp, #21]
		if (dir_adv) {
    a502:	2f00      	cmp	r7, #0
    a504:	d046      	beq.n	a594 <bt_le_adv_start_internal+0x1b0>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
    a506:	7863      	ldrb	r3, [r4, #1]
    a508:	06db      	lsls	r3, r3, #27
				set_param.type = BT_LE_ADV_DIRECT_IND_LOW_DUTY;
    a50a:	bf4c      	ite	mi
    a50c:	2304      	movmi	r3, #4
				set_param.type = BT_LE_ADV_DIRECT_IND;
    a50e:	2301      	movpl	r3, #1
    a510:	f88d 3014 	strb.w	r3, [sp, #20]
			set_param.direct_addr = *peer;
    a514:	683b      	ldr	r3, [r7, #0]
    a516:	f8cd 3016 	str.w	r3, [sp, #22]
    a51a:	88bb      	ldrh	r3, [r7, #4]
    a51c:	f8ad 301a 	strh.w	r3, [sp, #26]
    a520:	79bb      	ldrb	r3, [r7, #6]
    a522:	f88d 301c 	strb.w	r3, [sp, #28]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    a526:	210f      	movs	r1, #15
    a528:	f242 0006 	movw	r0, #8198	; 0x2006
    a52c:	f7fd fb08 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    a530:	4605      	mov	r5, r0
    a532:	2800      	cmp	r0, #0
    a534:	d03d      	beq.n	a5b2 <bt_le_adv_start_internal+0x1ce>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    a536:	220f      	movs	r2, #15
    a538:	a904      	add	r1, sp, #16
    a53a:	3008      	adds	r0, #8
    a53c:	f014 feee 	bl	1f31c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    a540:	4629      	mov	r1, r5
    a542:	2200      	movs	r2, #0
    a544:	f242 0006 	movw	r0, #8198	; 0x2006
    a548:	f7fd fb2a 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    a54c:	4605      	mov	r5, r0
    a54e:	2800      	cmp	r0, #0
    a550:	f47f af57 	bne.w	a402 <bt_le_adv_start_internal+0x1e>
	err = set_advertise_enable(true);
    a554:	2001      	movs	r0, #1
    a556:	f7fd fbdd 	bl	7d14 <set_advertise_enable>
	if (err) {
    a55a:	4605      	mov	r5, r0
    a55c:	2800      	cmp	r0, #0
    a55e:	f47f af50 	bne.w	a402 <bt_le_adv_start_internal+0x1e>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    a562:	7863      	ldrb	r3, [r4, #1]
    a564:	0799      	lsls	r1, r3, #30
    a566:	d404      	bmi.n	a572 <bt_le_adv_start_internal+0x18e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a568:	f44f 7100 	mov.w	r1, #512	; 0x200
    a56c:	4813      	ldr	r0, [pc, #76]	; (a5bc <bt_le_adv_start_internal+0x1d8>)
    a56e:	f7fd f992 	bl	7896 <atomic_or>
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
    a572:	7863      	ldrb	r3, [r4, #1]
    a574:	071a      	lsls	r2, r3, #28
    a576:	d503      	bpl.n	a580 <bt_le_adv_start_internal+0x19c>
    a578:	2180      	movs	r1, #128	; 0x80
    a57a:	4810      	ldr	r0, [pc, #64]	; (a5bc <bt_le_adv_start_internal+0x1d8>)
    a57c:	f7fd f98b 	bl	7896 <atomic_or>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    a580:	7863      	ldrb	r3, [r4, #1]
    a582:	07db      	lsls	r3, r3, #31
    a584:	f57f af3d 	bpl.w	a402 <bt_le_adv_start_internal+0x1e>
    a588:	f44f 7180 	mov.w	r1, #256	; 0x100
    a58c:	480b      	ldr	r0, [pc, #44]	; (a5bc <bt_le_adv_start_internal+0x1d8>)
    a58e:	f7fd f982 	bl	7896 <atomic_or>
    a592:	e736      	b.n	a402 <bt_le_adv_start_internal+0x1e>
			set_param.type = BT_LE_ADV_IND;
    a594:	f88d 7014 	strb.w	r7, [sp, #20]
    a598:	e7c5      	b.n	a526 <bt_le_adv_start_internal+0x142>
			err = le_set_private_addr(param->id);
    a59a:	f7fd fc13 	bl	7dc4 <le_set_private_addr.isra.26>
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    a59e:	2301      	movs	r3, #1
			err = le_set_private_addr(param->id);
    a5a0:	4605      	mov	r5, r0
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    a5a2:	f88d 3015 	strb.w	r3, [sp, #21]
    a5a6:	e781      	b.n	a4ac <bt_le_adv_start_internal+0xc8>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    a5a8:	2303      	movs	r3, #3
    a5aa:	e785      	b.n	a4b8 <bt_le_adv_start_internal+0xd4>
		return -EALREADY;
    a5ac:	f06f 0544 	mvn.w	r5, #68	; 0x44
    a5b0:	e727      	b.n	a402 <bt_le_adv_start_internal+0x1e>
		return -ENOBUFS;
    a5b2:	f06f 0536 	mvn.w	r5, #54	; 0x36
    a5b6:	e724      	b.n	a402 <bt_le_adv_start_internal+0x1e>
    a5b8:	2000d778 	.word	0x2000d778
    a5bc:	2000d7e8 	.word	0x2000d7e8

0000a5c0 <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    a5c0:	b513      	push	{r0, r1, r4, lr}
	if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
    a5c2:	7844      	ldrb	r4, [r0, #1]
    a5c4:	f014 0410 	ands.w	r4, r4, #16
    a5c8:	d106      	bne.n	a5d8 <bt_le_adv_start+0x18>
		return -EINVAL;
	}

	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
    a5ca:	9401      	str	r4, [sp, #4]
    a5cc:	9c04      	ldr	r4, [sp, #16]
    a5ce:	9400      	str	r4, [sp, #0]
    a5d0:	f7ff ff08 	bl	a3e4 <bt_le_adv_start_internal>
}
    a5d4:	b002      	add	sp, #8
    a5d6:	bd10      	pop	{r4, pc}
		return -EINVAL;
    a5d8:	f06f 0015 	mvn.w	r0, #21
    a5dc:	e7fa      	b.n	a5d4 <bt_le_adv_start+0x14>
	...

0000a5e0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    a5e0:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a5e2:	f46f 7100 	mvn.w	r1, #512	; 0x200
    a5e6:	4810      	ldr	r0, [pc, #64]	; (a628 <bt_le_adv_stop+0x48>)
    a5e8:	f7fd f964 	bl	78b4 <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    a5ec:	2106      	movs	r1, #6
    a5ee:	480e      	ldr	r0, [pc, #56]	; (a628 <bt_le_adv_stop+0x48>)
    a5f0:	f7fd fa78 	bl	7ae4 <atomic_test_bit>
    a5f4:	b910      	cbnz	r0, a5fc <bt_le_adv_stop+0x1c>
		return 0;
    a5f6:	2400      	movs	r4, #0
			le_set_private_addr(bt_dev.adv_id);
		}
	}

	return 0;
}
    a5f8:	4620      	mov	r0, r4
    a5fa:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    a5fc:	2000      	movs	r0, #0
    a5fe:	f7fd fb89 	bl	7d14 <set_advertise_enable>
	if (err) {
    a602:	4604      	mov	r4, r0
    a604:	2800      	cmp	r0, #0
    a606:	d1f7      	bne.n	a5f8 <bt_le_adv_stop+0x18>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    a608:	210a      	movs	r1, #10
    a60a:	4807      	ldr	r0, [pc, #28]	; (a628 <bt_le_adv_stop+0x48>)
    a60c:	f7fd fa6a 	bl	7ae4 <atomic_test_bit>
    a610:	2800      	cmp	r0, #0
    a612:	d0f0      	beq.n	a5f6 <bt_le_adv_stop+0x16>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    a614:	210c      	movs	r1, #12
    a616:	4804      	ldr	r0, [pc, #16]	; (a628 <bt_le_adv_stop+0x48>)
    a618:	f7fd fa64 	bl	7ae4 <atomic_test_bit>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    a61c:	2800      	cmp	r0, #0
    a61e:	d0ea      	beq.n	a5f6 <bt_le_adv_stop+0x16>
			le_set_private_addr(bt_dev.adv_id);
    a620:	f7fd fbd0 	bl	7dc4 <le_set_private_addr.isra.26>
    a624:	e7e8      	b.n	a5f8 <bt_le_adv_stop+0x18>
    a626:	bf00      	nop
    a628:	2000d7e8 	.word	0x2000d7e8

0000a62c <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    a62c:	b538      	push	{r3, r4, r5, lr}
    a62e:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    a630:	4805      	ldr	r0, [pc, #20]	; (a648 <bt_buf_get_rx+0x1c>)
    a632:	f014 fddf 	bl	1f1f4 <net_buf_alloc_fixed>
#endif

	if (buf) {
    a636:	4604      	mov	r4, r0
    a638:	b120      	cbz	r0, a644 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    a63a:	2100      	movs	r1, #0
    a63c:	3008      	adds	r0, #8
    a63e:	f014 fdf8 	bl	1f232 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    a642:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    a644:	4620      	mov	r0, r4
    a646:	bd38      	pop	{r3, r4, r5, pc}
    a648:	2000e4d4 	.word	0x2000e4d4

0000a64c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    a64c:	b510      	push	{r4, lr}
    a64e:	4601      	mov	r1, r0
	__asm__ volatile(
    a650:	f04f 0320 	mov.w	r3, #32
    a654:	f3ef 8011 	mrs	r0, BASEPRI
    a658:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    a65c:	4a0b      	ldr	r2, [pc, #44]	; (a68c <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    a65e:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    a660:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    a664:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a668:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    a66c:	b924      	cbnz	r4, a678 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    a66e:	2001      	movs	r0, #1
}
    a670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    a674:	f7ff bfda 	b.w	a62c <bt_buf_get_rx>
    a678:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    a67a:	f104 0008 	add.w	r0, r4, #8
    a67e:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    a680:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    a682:	4619      	mov	r1, r3
    a684:	f014 fdd5 	bl	1f232 <net_buf_simple_reserve>
}
    a688:	4620      	mov	r0, r4
    a68a:	bd10      	pop	{r4, pc}
    a68c:	2000d778 	.word	0x2000d778

0000a690 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    a690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    a694:	4c33      	ldr	r4, [pc, #204]	; (a764 <bt_pub_key_gen+0xd4>)
    a696:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    a69a:	f003 0306 	and.w	r3, r3, #6
    a69e:	2b06      	cmp	r3, #6
{
    a6a0:	4606      	mov	r6, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    a6a2:	d019      	beq.n	a6d8 <bt_pub_key_gen+0x48>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    a6a4:	4b30      	ldr	r3, [pc, #192]	; (a768 <bt_pub_key_gen+0xd8>)
    a6a6:	681b      	ldr	r3, [r3, #0]
    a6a8:	f003 0307 	and.w	r3, r3, #7
    a6ac:	2b01      	cmp	r3, #1
    a6ae:	d910      	bls.n	a6d2 <bt_pub_key_gen+0x42>
    a6b0:	2302      	movs	r3, #2
    a6b2:	f04f 0200 	mov.w	r2, #0
    a6b6:	f363 0202 	bfi	r2, r3, #0, #3
    a6ba:	492c      	ldr	r1, [pc, #176]	; (a76c <bt_pub_key_gen+0xdc>)
    a6bc:	4b2c      	ldr	r3, [pc, #176]	; (a770 <bt_pub_key_gen+0xe0>)
    a6be:	482d      	ldr	r0, [pc, #180]	; (a774 <bt_pub_key_gen+0xe4>)
    a6c0:	1a5b      	subs	r3, r3, r1
    a6c2:	f36f 02c5 	bfc	r2, #3, #3
    a6c6:	08db      	lsrs	r3, r3, #3
    a6c8:	f363 128f 	bfi	r2, r3, #6, #10
    a6cc:	492a      	ldr	r1, [pc, #168]	; (a778 <bt_pub_key_gen+0xe8>)
    a6ce:	f7f7 fd0d 	bl	20ec <log_1>
		return -ENOTSUP;
    a6d2:	f06f 0422 	mvn.w	r4, #34	; 0x22
    a6d6:	e00d      	b.n	a6f4 <bt_pub_key_gen+0x64>
	}

	new_cb->_next = pub_key_cb;
    a6d8:	4d28      	ldr	r5, [pc, #160]	; (a77c <bt_pub_key_gen+0xec>)
    a6da:	682b      	ldr	r3, [r5, #0]
    a6dc:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    a6de:	6028      	str	r0, [r5, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    a6e0:	2120      	movs	r1, #32
    a6e2:	f104 0070 	add.w	r0, r4, #112	; 0x70
    a6e6:	f7fd f8d6 	bl	7896 <atomic_or>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a6ea:	f010 0820 	ands.w	r8, r0, #32
    a6ee:	462f      	mov	r7, r5
    a6f0:	d003      	beq.n	a6fa <bt_pub_key_gen+0x6a>
		return 0;
    a6f2:	2400      	movs	r4, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    a6f4:	4620      	mov	r0, r4
    a6f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a6fa:	f06f 0110 	mvn.w	r1, #16
    a6fe:	f104 0070 	add.w	r0, r4, #112	; 0x70
    a702:	f7fd f8d7 	bl	78b4 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    a706:	4642      	mov	r2, r8
    a708:	4641      	mov	r1, r8
    a70a:	f242 0025 	movw	r0, #8229	; 0x2025
    a70e:	f7fd fa47 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    a712:	4604      	mov	r4, r0
    a714:	b1e0      	cbz	r0, a750 <bt_pub_key_gen+0xc0>
		BT_ERR("Sending LE P256 Public Key command failed");
    a716:	4b14      	ldr	r3, [pc, #80]	; (a768 <bt_pub_key_gen+0xd8>)
    a718:	681b      	ldr	r3, [r3, #0]
    a71a:	075b      	lsls	r3, r3, #29
    a71c:	d010      	beq.n	a740 <bt_pub_key_gen+0xb0>
    a71e:	2301      	movs	r3, #1
    a720:	f04f 0200 	mov.w	r2, #0
    a724:	f363 0202 	bfi	r2, r3, #0, #3
    a728:	4910      	ldr	r1, [pc, #64]	; (a76c <bt_pub_key_gen+0xdc>)
    a72a:	4b11      	ldr	r3, [pc, #68]	; (a770 <bt_pub_key_gen+0xe0>)
    a72c:	4814      	ldr	r0, [pc, #80]	; (a780 <bt_pub_key_gen+0xf0>)
    a72e:	1a5b      	subs	r3, r3, r1
    a730:	f368 02c5 	bfi	r2, r8, #3, #3
    a734:	08db      	lsrs	r3, r3, #3
    a736:	f363 128f 	bfi	r2, r3, #6, #10
    a73a:	490f      	ldr	r1, [pc, #60]	; (a778 <bt_pub_key_gen+0xe8>)
    a73c:	f7f7 fcd6 	bl	20ec <log_1>
    a740:	f06f 0120 	mvn.w	r1, #32
    a744:	480f      	ldr	r0, [pc, #60]	; (a784 <bt_pub_key_gen+0xf4>)
    a746:	f7fd f8b5 	bl	78b4 <atomic_and>
		pub_key_cb = NULL;
    a74a:	2300      	movs	r3, #0
    a74c:	603b      	str	r3, [r7, #0]
		return err;
    a74e:	e7d1      	b.n	a6f4 <bt_pub_key_gen+0x64>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    a750:	682c      	ldr	r4, [r5, #0]
    a752:	2c00      	cmp	r4, #0
    a754:	d0cd      	beq.n	a6f2 <bt_pub_key_gen+0x62>
		if (cb != new_cb) {
    a756:	42b4      	cmp	r4, r6
    a758:	d002      	beq.n	a760 <bt_pub_key_gen+0xd0>
			cb->func(NULL);
    a75a:	6823      	ldr	r3, [r4, #0]
    a75c:	2000      	movs	r0, #0
    a75e:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    a760:	6864      	ldr	r4, [r4, #4]
    a762:	e7f6      	b.n	a752 <bt_pub_key_gen+0xc2>
    a764:	2000d778 	.word	0x2000d778
    a768:	2000e238 	.word	0x2000e238
    a76c:	0002ef38 	.word	0x0002ef38
    a770:	0002efb0 	.word	0x0002efb0
    a774:	000311e7 	.word	0x000311e7
    a778:	00030e26 	.word	0x00030e26
    a77c:	20000b40 	.word	0x20000b40
    a780:	0003120a 	.word	0x0003120a
    a784:	2000d7e8 	.word	0x2000d7e8

0000a788 <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a78a:	4c1a      	ldr	r4, [pc, #104]	; (a7f4 <bt_dh_key_gen+0x6c>)
    a78c:	6822      	ldr	r2, [r4, #0]
{
    a78e:	4607      	mov	r7, r0
    a790:	460b      	mov	r3, r1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a792:	b112      	cbz	r2, a79a <bt_dh_key_gen+0x12>
		return -EBUSY;
    a794:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    a798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a79a:	2105      	movs	r1, #5
    a79c:	4816      	ldr	r0, [pc, #88]	; (a7f8 <bt_dh_key_gen+0x70>)
    a79e:	f7fd f9a1 	bl	7ae4 <atomic_test_bit>
    a7a2:	4606      	mov	r6, r0
    a7a4:	2800      	cmp	r0, #0
    a7a6:	d1f5      	bne.n	a794 <bt_dh_key_gen+0xc>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    a7a8:	2104      	movs	r1, #4
    a7aa:	4813      	ldr	r0, [pc, #76]	; (a7f8 <bt_dh_key_gen+0x70>)
    a7ac:	f7fd f99a 	bl	7ae4 <atomic_test_bit>
    a7b0:	b1e8      	cbz	r0, a7ee <bt_dh_key_gen+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    a7b2:	2140      	movs	r1, #64	; 0x40
    a7b4:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    a7b8:	6023      	str	r3, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    a7ba:	f7fd f9c1 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    a7be:	4605      	mov	r5, r0
    a7c0:	b918      	cbnz	r0, a7ca <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    a7c2:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    a7c4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    a7c8:	e7e6      	b.n	a798 <bt_dh_key_gen+0x10>
	cp = net_buf_add(buf, sizeof(*cp));
    a7ca:	2140      	movs	r1, #64	; 0x40
    a7cc:	3008      	adds	r0, #8
    a7ce:	f014 fd9f 	bl	1f310 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    a7d2:	2240      	movs	r2, #64	; 0x40
    a7d4:	4639      	mov	r1, r7
    a7d6:	f7fc fa57 	bl	6c88 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    a7da:	4632      	mov	r2, r6
    a7dc:	4629      	mov	r1, r5
    a7de:	f242 0026 	movw	r0, #8230	; 0x2026
    a7e2:	f7fd f9dd 	bl	7ba0 <bt_hci_cmd_send_sync>
	if (err) {
    a7e6:	2800      	cmp	r0, #0
    a7e8:	d0d6      	beq.n	a798 <bt_dh_key_gen+0x10>
		dh_key_cb = NULL;
    a7ea:	6026      	str	r6, [r4, #0]
		return err;
    a7ec:	e7d4      	b.n	a798 <bt_dh_key_gen+0x10>
		return -EADDRNOTAVAIL;
    a7ee:	f06f 0030 	mvn.w	r0, #48	; 0x30
    a7f2:	e7d1      	b.n	a798 <bt_dh_key_gen+0x10>
    a7f4:	20000afc 	.word	0x20000afc
    a7f8:	2000d7e8 	.word	0x2000d7e8

0000a7fc <bt_le_oob_get_local>:
	return 0;
}
#endif /* CONFIG_BT_BREDR */

int bt_le_oob_get_local(u8_t id, struct bt_le_oob *oob)
{
    a7fc:	b510      	push	{r4, lr}
    a7fe:	460b      	mov	r3, r1
	if (id >= CONFIG_BT_ID_MAX) {
    a800:	4604      	mov	r4, r0
    a802:	b928      	cbnz	r0, a810 <bt_le_oob_get_local+0x14>
			return err;
		}

		bt_addr_le_copy(&oob->addr, &bt_dev.random_addr);
	} else {
		bt_addr_le_copy(&oob->addr, &bt_dev.id_addr[id]);
    a804:	4618      	mov	r0, r3
    a806:	4904      	ldr	r1, [pc, #16]	; (a818 <bt_le_oob_get_local+0x1c>)
    a808:	f7fd f842 	bl	7890 <bt_addr_le_copy>
	}

	return 0;
    a80c:	4620      	mov	r0, r4
}
    a80e:	bd10      	pop	{r4, pc}
		return -EINVAL;
    a810:	f06f 0015 	mvn.w	r0, #21
    a814:	e7fb      	b.n	a80e <bt_le_oob_get_local+0x12>
    a816:	bf00      	nop
    a818:	2000d778 	.word	0x2000d778

0000a81c <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    a81c:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    a81e:	4b06      	ldr	r3, [pc, #24]	; (a838 <notify_connected+0x1c>)
    a820:	681c      	ldr	r4, [r3, #0]
{
    a822:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    a824:	b904      	cbnz	r4, a828 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    a826:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    a828:	6823      	ldr	r3, [r4, #0]
    a82a:	b113      	cbz	r3, a832 <notify_connected+0x16>
			cb->connected(conn, conn->err);
    a82c:	7b29      	ldrb	r1, [r5, #12]
    a82e:	4628      	mov	r0, r5
    a830:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a832:	69a4      	ldr	r4, [r4, #24]
    a834:	e7f6      	b.n	a824 <notify_connected+0x8>
    a836:	bf00      	nop
    a838:	20000bb8 	.word	0x20000bb8

0000a83c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a83c:	f3bf 8f5b 	dmb	ish
    a840:	6800      	ldr	r0, [r0, #0]
    a842:	f3bf 8f5b 	dmb	ish
}
    a846:	4770      	bx	lr

0000a848 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    a848:	89c3      	ldrh	r3, [r0, #14]
{
    a84a:	b510      	push	{r4, lr}
    a84c:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    a84e:	b12b      	cbz	r3, a85c <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    a850:	6900      	ldr	r0, [r0, #16]
    a852:	f014 fcff 	bl	1f254 <net_buf_unref>
	conn->rx = NULL;
    a856:	2300      	movs	r3, #0
    a858:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    a85a:	81e3      	strh	r3, [r4, #14]
}
    a85c:	bd10      	pop	{r4, pc}

0000a85e <atomic_dec>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    a85e:	f3bf 8f5b 	dmb	ish
    a862:	e850 3f00 	ldrex	r3, [r0]
    a866:	1e5a      	subs	r2, r3, #1
    a868:	e840 2100 	strex	r1, r2, [r0]
    a86c:	2900      	cmp	r1, #0
    a86e:	d1f8      	bne.n	a862 <atomic_dec+0x4>
    a870:	f3bf 8f5b 	dmb	ish
}
    a874:	4618      	mov	r0, r3
    a876:	4770      	bx	lr

0000a878 <atomic_inc>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    a878:	f3bf 8f5b 	dmb	ish
    a87c:	e850 3f00 	ldrex	r3, [r0]
    a880:	1c5a      	adds	r2, r3, #1
    a882:	e840 2100 	strex	r1, r2, [r0]
    a886:	2900      	cmp	r1, #0
    a888:	d1f8      	bne.n	a87c <atomic_inc+0x4>
    a88a:	f3bf 8f5b 	dmb	ish
}
    a88e:	4618      	mov	r0, r3
    a890:	4770      	bx	lr
	...

0000a894 <bt_conn_get_pkts>:
}
    a894:	4800      	ldr	r0, [pc, #0]	; (a898 <bt_conn_get_pkts+0x4>)
    a896:	4770      	bx	lr
    a898:	2000d804 	.word	0x2000d804

0000a89c <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    a89c:	4b08      	ldr	r3, [pc, #32]	; (a8c0 <notify_le_param_updated+0x24>)
{
    a89e:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    a8a0:	681c      	ldr	r4, [r3, #0]
{
    a8a2:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    a8a4:	b904      	cbnz	r4, a8a8 <notify_le_param_updated+0xc>
}
    a8a6:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    a8a8:	68e6      	ldr	r6, [r4, #12]
    a8aa:	b13e      	cbz	r6, a8bc <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    a8ac:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    a8b0:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    a8b4:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    a8b8:	4628      	mov	r0, r5
    a8ba:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    a8bc:	69a4      	ldr	r4, [r4, #24]
    a8be:	e7f1      	b.n	a8a4 <notify_le_param_updated+0x8>
    a8c0:	20000bb8 	.word	0x20000bb8

0000a8c4 <le_param_req>:
{
    a8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a8c6:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    a8c8:	4608      	mov	r0, r1
{
    a8ca:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    a8cc:	f7fd fb4e 	bl	7f6c <bt_le_conn_params_valid>
    a8d0:	4605      	mov	r5, r0
    a8d2:	b910      	cbnz	r0, a8da <le_param_req+0x16>
		return false;
    a8d4:	2500      	movs	r5, #0
}
    a8d6:	4628      	mov	r0, r5
    a8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    a8da:	4b09      	ldr	r3, [pc, #36]	; (a900 <le_param_req+0x3c>)
    a8dc:	681c      	ldr	r4, [r3, #0]
    a8de:	2c00      	cmp	r4, #0
    a8e0:	d0f9      	beq.n	a8d6 <le_param_req+0x12>
		if (!cb->le_param_req) {
    a8e2:	68a3      	ldr	r3, [r4, #8]
    a8e4:	b90b      	cbnz	r3, a8ea <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    a8e6:	69a4      	ldr	r4, [r4, #24]
    a8e8:	e7f9      	b.n	a8de <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    a8ea:	4631      	mov	r1, r6
    a8ec:	4638      	mov	r0, r7
    a8ee:	4798      	blx	r3
    a8f0:	2800      	cmp	r0, #0
    a8f2:	d0ef      	beq.n	a8d4 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    a8f4:	4630      	mov	r0, r6
    a8f6:	f7fd fb39 	bl	7f6c <bt_le_conn_params_valid>
    a8fa:	2800      	cmp	r0, #0
    a8fc:	d1f3      	bne.n	a8e6 <le_param_req+0x22>
    a8fe:	e7e9      	b.n	a8d4 <le_param_req+0x10>
    a900:	20000bb8 	.word	0x20000bb8

0000a904 <bt_conn_identity_resolved>:
{
    a904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    a906:	78c3      	ldrb	r3, [r0, #3]
{
    a908:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    a90a:	b93b      	cbnz	r3, a91c <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    a90c:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    a910:	4b08      	ldr	r3, [pc, #32]	; (a934 <bt_conn_identity_resolved+0x30>)
    a912:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    a914:	f104 0748 	add.w	r7, r4, #72	; 0x48
	for (cb = callback_list; cb; cb = cb->_next) {
    a918:	b91d      	cbnz	r5, a922 <bt_conn_identity_resolved+0x1e>
}
    a91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    a91c:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    a920:	e7f6      	b.n	a910 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    a922:	692b      	ldr	r3, [r5, #16]
    a924:	b11b      	cbz	r3, a92e <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    a926:	463a      	mov	r2, r7
    a928:	4631      	mov	r1, r6
    a92a:	4620      	mov	r0, r4
    a92c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a92e:	69ad      	ldr	r5, [r5, #24]
    a930:	e7f2      	b.n	a918 <bt_conn_identity_resolved+0x14>
    a932:	bf00      	nop
    a934:	20000bb8 	.word	0x20000bb8

0000a938 <bt_conn_le_start_encryption>:
{
    a938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a93c:	4682      	mov	sl, r0
    a93e:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    a940:	f242 0019 	movw	r0, #8217	; 0x2019
    a944:	211c      	movs	r1, #28
{
    a946:	4690      	mov	r8, r2
    a948:	461f      	mov	r7, r3
    a94a:	9d08      	ldr	r5, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    a94c:	f7fd f8f8 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    a950:	4606      	mov	r6, r0
    a952:	b340      	cbz	r0, a9a6 <bt_conn_le_start_encryption+0x6e>
	cp = net_buf_add(buf, sizeof(*cp));
    a954:	211c      	movs	r1, #28
    a956:	3008      	adds	r0, #8
    a958:	f014 fcda 	bl	1f310 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    a95c:	f8ba 3000 	ldrh.w	r3, [sl]
	cp = net_buf_add(buf, sizeof(*cp));
    a960:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
    a962:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
    a964:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
    a968:	4649      	mov	r1, r9
    a96a:	f7fc f98d 	bl	6c88 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
    a96e:	2202      	movs	r2, #2
    a970:	4641      	mov	r1, r8
    a972:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
    a976:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
    a978:	f7fc f986 	bl	6c88 <memcpy>
	memcpy(cp->ltk, ltk, len);
    a97c:	462a      	mov	r2, r5
    a97e:	4639      	mov	r1, r7
    a980:	4620      	mov	r0, r4
    a982:	f7fc f981 	bl	6c88 <memcpy>
	if (len < sizeof(cp->ltk)) {
    a986:	2d0f      	cmp	r5, #15
    a988:	d805      	bhi.n	a996 <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    a98a:	f1c5 0210 	rsb	r2, r5, #16
    a98e:	2100      	movs	r1, #0
    a990:	1960      	adds	r0, r4, r5
    a992:	f7fc f9a6 	bl	6ce2 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    a996:	4631      	mov	r1, r6
    a998:	2200      	movs	r2, #0
    a99a:	f242 0019 	movw	r0, #8217	; 0x2019
}
    a99e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    a9a2:	f7fd b8fd 	b.w	7ba0 <bt_hci_cmd_send_sync>
}
    a9a6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    a9aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000a9b0 <bt_conn_security_changed>:
{
    a9b0:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    a9b2:	4b06      	ldr	r3, [pc, #24]	; (a9cc <bt_conn_security_changed+0x1c>)
    a9b4:	681c      	ldr	r4, [r3, #0]
{
    a9b6:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    a9b8:	b904      	cbnz	r4, a9bc <bt_conn_security_changed+0xc>
}
    a9ba:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->security_changed) {
    a9bc:	6963      	ldr	r3, [r4, #20]
    a9be:	b113      	cbz	r3, a9c6 <bt_conn_security_changed+0x16>
			cb->security_changed(conn, conn->sec_level);
    a9c0:	7a69      	ldrb	r1, [r5, #9]
    a9c2:	4628      	mov	r0, r5
    a9c4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a9c6:	69a4      	ldr	r4, [r4, #24]
    a9c8:	e7f6      	b.n	a9b8 <bt_conn_security_changed+0x8>
    a9ca:	bf00      	nop
    a9cc:	20000bb8 	.word	0x20000bb8

0000a9d0 <bt_conn_security>:
{
    a9d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    a9d2:	7b45      	ldrb	r5, [r0, #13]
    a9d4:	2d04      	cmp	r5, #4
{
    a9d6:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    a9d8:	d144      	bne.n	aa64 <bt_conn_security+0x94>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    a9da:	7a43      	ldrb	r3, [r0, #9]
    a9dc:	428b      	cmp	r3, r1
    a9de:	d302      	bcc.n	a9e6 <bt_conn_security+0x16>
		return 0;
    a9e0:	2000      	movs	r0, #0
}
    a9e2:	b002      	add	sp, #8
    a9e4:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    a9e6:	7a83      	ldrb	r3, [r0, #10]
    a9e8:	428b      	cmp	r3, r1
    a9ea:	d2f9      	bcs.n	a9e0 <bt_conn_security+0x10>
	switch (conn->role) {
    a9ec:	78c3      	ldrb	r3, [r0, #3]
	conn->required_sec_level = sec;
    a9ee:	7281      	strb	r1, [r0, #10]
	switch (conn->role) {
    a9f0:	b123      	cbz	r3, a9fc <bt_conn_security+0x2c>
    a9f2:	2b01      	cmp	r3, #1
    a9f4:	d033      	beq.n	aa5e <bt_conn_security+0x8e>
		return -EINVAL;
    a9f6:	f06f 0015 	mvn.w	r0, #21
    a9fa:	e01b      	b.n	aa34 <bt_conn_security+0x64>
		if (!conn->le.keys) {
    a9fc:	6f03      	ldr	r3, [r0, #112]	; 0x70
    a9fe:	2b00      	cmp	r3, #0
    aa00:	d133      	bne.n	aa6a <bt_conn_security+0x9a>
						     conn->id, &conn->le.dst);
    aa02:	f100 0648 	add.w	r6, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    aa06:	7a01      	ldrb	r1, [r0, #8]
    aa08:	4632      	mov	r2, r6
    aa0a:	2020      	movs	r0, #32
    aa0c:	f006 fbc6 	bl	1119c <bt_keys_find>
    aa10:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    aa12:	bb50      	cbnz	r0, aa6a <bt_conn_security+0x9a>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    aa14:	4632      	mov	r2, r6
    aa16:	7a21      	ldrb	r1, [r4, #8]
    aa18:	4628      	mov	r0, r5
    aa1a:	f006 fbbf 	bl	1119c <bt_keys_find>
    aa1e:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys ||
    aa20:	b118      	cbz	r0, aa2a <bt_conn_security+0x5a>
    aa22:	8943      	ldrh	r3, [r0, #10]
    aa24:	f003 0324 	and.w	r3, r3, #36	; 0x24
    aa28:	b93b      	cbnz	r3, aa3a <bt_conn_security+0x6a>
			return bt_smp_send_pairing_req(conn);
    aa2a:	4620      	mov	r0, r4
    aa2c:	f006 f8fa 	bl	10c24 <bt_smp_send_pairing_req>
	if (err) {
    aa30:	2800      	cmp	r0, #0
    aa32:	d0d5      	beq.n	a9e0 <bt_conn_security+0x10>
		conn->required_sec_level = conn->sec_level;
    aa34:	7a63      	ldrb	r3, [r4, #9]
    aa36:	72a3      	strb	r3, [r4, #10]
    aa38:	e7d3      	b.n	a9e2 <bt_conn_security+0x12>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    aa3a:	7aa3      	ldrb	r3, [r4, #10]
    aa3c:	2b02      	cmp	r3, #2
    aa3e:	d902      	bls.n	aa46 <bt_conn_security+0x76>
    aa40:	7a43      	ldrb	r3, [r0, #9]
    aa42:	07db      	lsls	r3, r3, #31
    aa44:	d5f1      	bpl.n	aa2a <bt_conn_security+0x5a>
		return bt_conn_le_start_encryption(conn,
    aa46:	7a03      	ldrb	r3, [r0, #8]
    aa48:	9300      	str	r3, [sp, #0]
    aa4a:	f100 0214 	add.w	r2, r0, #20
    aa4e:	f100 0316 	add.w	r3, r0, #22
    aa52:	f100 010c 	add.w	r1, r0, #12
    aa56:	4620      	mov	r0, r4
    aa58:	f7ff ff6e 	bl	a938 <bt_conn_le_start_encryption>
    aa5c:	e7e8      	b.n	aa30 <bt_conn_security+0x60>
		return bt_smp_send_security_req(conn);
    aa5e:	f006 f893 	bl	10b88 <bt_smp_send_security_req>
    aa62:	e7e5      	b.n	aa30 <bt_conn_security+0x60>
		return -ENOTCONN;
    aa64:	f06f 0038 	mvn.w	r0, #56	; 0x38
    aa68:	e7bb      	b.n	a9e2 <bt_conn_security+0x12>
		if (!conn->le.keys ||
    aa6a:	6f20      	ldr	r0, [r4, #112]	; 0x70
    aa6c:	e7d9      	b.n	aa22 <bt_conn_security+0x52>
	...

0000aa70 <bt_conn_cb_register>:
	cb->_next = callback_list;
    aa70:	4b02      	ldr	r3, [pc, #8]	; (aa7c <bt_conn_cb_register+0xc>)
    aa72:	681a      	ldr	r2, [r3, #0]
    aa74:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    aa76:	6018      	str	r0, [r3, #0]
}
    aa78:	4770      	bx	lr
    aa7a:	bf00      	nop
    aa7c:	20000bb8 	.word	0x20000bb8

0000aa80 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    aa80:	2a01      	cmp	r2, #1
{
    aa82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    aa84:	4604      	mov	r4, r0
    aa86:	460d      	mov	r5, r1
    aa88:	4616      	mov	r6, r2
	switch (flags) {
    aa8a:	d028      	beq.n	aade <bt_conn_recv+0x5e>
    aa8c:	2a02      	cmp	r2, #2
    aa8e:	f040 80a5 	bne.w	abdc <bt_conn_recv+0x15c>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    aa92:	688b      	ldr	r3, [r1, #8]
    aa94:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    aa96:	89c3      	ldrh	r3, [r0, #14]
    aa98:	b1bb      	cbz	r3, aaca <bt_conn_recv+0x4a>
			BT_ERR("Unexpected first L2CAP frame");
    aa9a:	4b5f      	ldr	r3, [pc, #380]	; (ac18 <bt_conn_recv+0x198>)
    aa9c:	681b      	ldr	r3, [r3, #0]
    aa9e:	0759      	lsls	r1, r3, #29
    aaa0:	d010      	beq.n	aac4 <bt_conn_recv+0x44>
    aaa2:	2301      	movs	r3, #1
    aaa4:	f04f 0200 	mov.w	r2, #0
    aaa8:	f363 0202 	bfi	r2, r3, #0, #3
    aaac:	495b      	ldr	r1, [pc, #364]	; (ac1c <bt_conn_recv+0x19c>)
    aaae:	4b5c      	ldr	r3, [pc, #368]	; (ac20 <bt_conn_recv+0x1a0>)
    aab0:	485c      	ldr	r0, [pc, #368]	; (ac24 <bt_conn_recv+0x1a4>)
    aab2:	1a5b      	subs	r3, r3, r1
    aab4:	f36f 02c5 	bfc	r2, #3, #3
    aab8:	08db      	lsrs	r3, r3, #3
    aaba:	f363 128f 	bfi	r2, r3, #6, #10
    aabe:	495a      	ldr	r1, [pc, #360]	; (ac28 <bt_conn_recv+0x1a8>)
    aac0:	f7f7 fb14 	bl	20ec <log_1>
			bt_conn_reset_rx_state(conn);
    aac4:	4620      	mov	r0, r4
    aac6:	f7ff febf 	bl	a848 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    aaca:	89ab      	ldrh	r3, [r5, #12]
    aacc:	1af3      	subs	r3, r6, r3
    aace:	3304      	adds	r3, #4
    aad0:	b29b      	uxth	r3, r3
    aad2:	81e3      	strh	r3, [r4, #14]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    aad4:	2b00      	cmp	r3, #0
    aad6:	d063      	beq.n	aba0 <bt_conn_recv+0x120>
			conn->rx = buf;
    aad8:	6125      	str	r5, [r4, #16]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    aada:	b003      	add	sp, #12
    aadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!conn->rx_len) {
    aade:	89c3      	ldrh	r3, [r0, #14]
    aae0:	b9e3      	cbnz	r3, ab1c <bt_conn_recv+0x9c>
			BT_ERR("Unexpected L2CAP continuation");
    aae2:	4a4d      	ldr	r2, [pc, #308]	; (ac18 <bt_conn_recv+0x198>)
    aae4:	6812      	ldr	r2, [r2, #0]
    aae6:	0752      	lsls	r2, r2, #29
    aae8:	d00f      	beq.n	ab0a <bt_conn_recv+0x8a>
    aaea:	f04f 0200 	mov.w	r2, #0
    aaee:	f366 0202 	bfi	r2, r6, #0, #3
    aaf2:	f363 02c5 	bfi	r2, r3, #3, #3
    aaf6:	4949      	ldr	r1, [pc, #292]	; (ac1c <bt_conn_recv+0x19c>)
    aaf8:	4b49      	ldr	r3, [pc, #292]	; (ac20 <bt_conn_recv+0x1a0>)
    aafa:	484c      	ldr	r0, [pc, #304]	; (ac2c <bt_conn_recv+0x1ac>)
    aafc:	1a5b      	subs	r3, r3, r1
    aafe:	08db      	lsrs	r3, r3, #3
    ab00:	4949      	ldr	r1, [pc, #292]	; (ac28 <bt_conn_recv+0x1a8>)
    ab02:	f363 128f 	bfi	r2, r3, #6, #10
    ab06:	f7f7 faf1 	bl	20ec <log_1>
			bt_conn_reset_rx_state(conn);
    ab0a:	4620      	mov	r0, r4
    ab0c:	f7ff fe9c 	bl	a848 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
    ab10:	4628      	mov	r0, r5
}
    ab12:	b003      	add	sp, #12
    ab14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    ab18:	f014 bb9c 	b.w	1f254 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    ab1c:	898f      	ldrh	r7, [r1, #12]
    ab1e:	42bb      	cmp	r3, r7
    ab20:	d212      	bcs.n	ab48 <bt_conn_recv+0xc8>
			BT_ERR("L2CAP data overflow");
    ab22:	4b3d      	ldr	r3, [pc, #244]	; (ac18 <bt_conn_recv+0x198>)
    ab24:	681b      	ldr	r3, [r3, #0]
    ab26:	075b      	lsls	r3, r3, #29
    ab28:	d0ef      	beq.n	ab0a <bt_conn_recv+0x8a>
    ab2a:	493c      	ldr	r1, [pc, #240]	; (ac1c <bt_conn_recv+0x19c>)
    ab2c:	4b3c      	ldr	r3, [pc, #240]	; (ac20 <bt_conn_recv+0x1a0>)
    ab2e:	4840      	ldr	r0, [pc, #256]	; (ac30 <bt_conn_recv+0x1b0>)
    ab30:	f04f 0200 	mov.w	r2, #0
    ab34:	1a5b      	subs	r3, r3, r1
    ab36:	f366 0202 	bfi	r2, r6, #0, #3
    ab3a:	f36f 02c5 	bfc	r2, #3, #3
    ab3e:	08db      	lsrs	r3, r3, #3
    ab40:	f363 128f 	bfi	r2, r3, #6, #10
    ab44:	4938      	ldr	r1, [pc, #224]	; (ac28 <bt_conn_recv+0x1a8>)
    ab46:	e7de      	b.n	ab06 <bt_conn_recv+0x86>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    ab48:	6900      	ldr	r0, [r0, #16]
    ab4a:	3008      	adds	r0, #8
    ab4c:	f014 fc4c 	bl	1f3e8 <net_buf_simple_tailroom>
    ab50:	4287      	cmp	r7, r0
    ab52:	d912      	bls.n	ab7a <bt_conn_recv+0xfa>
			BT_ERR("Not enough buffer space for L2CAP data");
    ab54:	4b30      	ldr	r3, [pc, #192]	; (ac18 <bt_conn_recv+0x198>)
    ab56:	681b      	ldr	r3, [r3, #0]
    ab58:	075f      	lsls	r7, r3, #29
    ab5a:	d0d6      	beq.n	ab0a <bt_conn_recv+0x8a>
    ab5c:	492f      	ldr	r1, [pc, #188]	; (ac1c <bt_conn_recv+0x19c>)
    ab5e:	4b30      	ldr	r3, [pc, #192]	; (ac20 <bt_conn_recv+0x1a0>)
    ab60:	4834      	ldr	r0, [pc, #208]	; (ac34 <bt_conn_recv+0x1b4>)
    ab62:	f04f 0200 	mov.w	r2, #0
    ab66:	1a5b      	subs	r3, r3, r1
    ab68:	f366 0202 	bfi	r2, r6, #0, #3
    ab6c:	f36f 02c5 	bfc	r2, #3, #3
    ab70:	08db      	lsrs	r3, r3, #3
    ab72:	f363 128f 	bfi	r2, r3, #6, #10
    ab76:	492c      	ldr	r1, [pc, #176]	; (ac28 <bt_conn_recv+0x1a8>)
    ab78:	e7c5      	b.n	ab06 <bt_conn_recv+0x86>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    ab7a:	6920      	ldr	r0, [r4, #16]
    ab7c:	89aa      	ldrh	r2, [r5, #12]
    ab7e:	68a9      	ldr	r1, [r5, #8]
    ab80:	3008      	adds	r0, #8
    ab82:	f014 fbcb 	bl	1f31c <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    ab86:	89e3      	ldrh	r3, [r4, #14]
    ab88:	89aa      	ldrh	r2, [r5, #12]
    ab8a:	1a9b      	subs	r3, r3, r2
    ab8c:	81e3      	strh	r3, [r4, #14]
		net_buf_unref(buf);
    ab8e:	4628      	mov	r0, r5
    ab90:	f014 fb60 	bl	1f254 <net_buf_unref>
		if (conn->rx_len) {
    ab94:	89e3      	ldrh	r3, [r4, #14]
    ab96:	2b00      	cmp	r3, #0
    ab98:	d19f      	bne.n	aada <bt_conn_recv+0x5a>
		buf = conn->rx;
    ab9a:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0;
    ab9c:	81e3      	strh	r3, [r4, #14]
		conn->rx = NULL;
    ab9e:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    aba0:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    aba2:	881a      	ldrh	r2, [r3, #0]
    aba4:	89ab      	ldrh	r3, [r5, #12]
    aba6:	1d11      	adds	r1, r2, #4
    aba8:	4299      	cmp	r1, r3
    abaa:	d02d      	beq.n	ac08 <bt_conn_recv+0x188>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    abac:	491a      	ldr	r1, [pc, #104]	; (ac18 <bt_conn_recv+0x198>)
    abae:	6809      	ldr	r1, [r1, #0]
    abb0:	0749      	lsls	r1, r1, #29
    abb2:	d0ad      	beq.n	ab10 <bt_conn_recv+0x90>
    abb4:	2101      	movs	r1, #1
    abb6:	f04f 0000 	mov.w	r0, #0
    abba:	f361 0002 	bfi	r0, r1, #0, #3
    abbe:	4c17      	ldr	r4, [pc, #92]	; (ac1c <bt_conn_recv+0x19c>)
    abc0:	4917      	ldr	r1, [pc, #92]	; (ac20 <bt_conn_recv+0x1a0>)
    abc2:	1b09      	subs	r1, r1, r4
    abc4:	08c9      	lsrs	r1, r1, #3
    abc6:	f36f 00c5 	bfc	r0, #3, #3
    abca:	f361 108f 	bfi	r0, r1, #6, #10
    abce:	f8ad 0000 	strh.w	r0, [sp]
    abd2:	4915      	ldr	r1, [pc, #84]	; (ac28 <bt_conn_recv+0x1a8>)
    abd4:	4818      	ldr	r0, [pc, #96]	; (ac38 <bt_conn_recv+0x1b8>)
    abd6:	f7f7 fab5 	bl	2144 <log_3>
    abda:	e799      	b.n	ab10 <bt_conn_recv+0x90>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    abdc:	4b0e      	ldr	r3, [pc, #56]	; (ac18 <bt_conn_recv+0x198>)
    abde:	681b      	ldr	r3, [r3, #0]
    abe0:	0758      	lsls	r0, r3, #29
    abe2:	d092      	beq.n	ab0a <bt_conn_recv+0x8a>
    abe4:	2101      	movs	r1, #1
    abe6:	f04f 0300 	mov.w	r3, #0
    abea:	f361 0302 	bfi	r3, r1, #0, #3
    abee:	480b      	ldr	r0, [pc, #44]	; (ac1c <bt_conn_recv+0x19c>)
    abf0:	490b      	ldr	r1, [pc, #44]	; (ac20 <bt_conn_recv+0x1a0>)
    abf2:	1a09      	subs	r1, r1, r0
    abf4:	08c9      	lsrs	r1, r1, #3
    abf6:	f36f 03c5 	bfc	r3, #3, #3
    abfa:	f361 138f 	bfi	r3, r1, #6, #10
    abfe:	480f      	ldr	r0, [pc, #60]	; (ac3c <bt_conn_recv+0x1bc>)
    ac00:	4909      	ldr	r1, [pc, #36]	; (ac28 <bt_conn_recv+0x1a8>)
    ac02:	f7f7 fa87 	bl	2114 <log_2>
    ac06:	e780      	b.n	ab0a <bt_conn_recv+0x8a>
	bt_l2cap_recv(conn, buf);
    ac08:	4629      	mov	r1, r5
    ac0a:	4620      	mov	r0, r4
}
    ac0c:	b003      	add	sp, #12
    ac0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_l2cap_recv(conn, buf);
    ac12:	f001 ba91 	b.w	c138 <bt_l2cap_recv>
    ac16:	bf00      	nop
    ac18:	2000e204 	.word	0x2000e204
    ac1c:	0002ef38 	.word	0x0002ef38
    ac20:	0002ef48 	.word	0x0002ef48
    ac24:	00031818 	.word	0x00031818
    ac28:	000317cc 	.word	0x000317cc
    ac2c:	00031839 	.word	0x00031839
    ac30:	0003185b 	.word	0x0003185b
    ac34:	00031873 	.word	0x00031873
    ac38:	000318c0 	.word	0x000318c0
    ac3c:	0003189e 	.word	0x0003189e

0000ac40 <bt_conn_send_cb>:
int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	if (conn->state != BT_CONN_CONNECTED) {
    ac40:	7b43      	ldrb	r3, [r0, #13]
    ac42:	2b04      	cmp	r3, #4
{
    ac44:	b510      	push	{r4, lr}
    ac46:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    ac48:	d01a      	beq.n	ac80 <bt_conn_send_cb+0x40>
		BT_ERR("not connected!");
    ac4a:	4b10      	ldr	r3, [pc, #64]	; (ac8c <bt_conn_send_cb+0x4c>)
    ac4c:	681b      	ldr	r3, [r3, #0]
    ac4e:	075b      	lsls	r3, r3, #29
    ac50:	d010      	beq.n	ac74 <bt_conn_send_cb+0x34>
    ac52:	2301      	movs	r3, #1
    ac54:	f04f 0200 	mov.w	r2, #0
    ac58:	f363 0202 	bfi	r2, r3, #0, #3
    ac5c:	490c      	ldr	r1, [pc, #48]	; (ac90 <bt_conn_send_cb+0x50>)
    ac5e:	4b0d      	ldr	r3, [pc, #52]	; (ac94 <bt_conn_send_cb+0x54>)
    ac60:	480d      	ldr	r0, [pc, #52]	; (ac98 <bt_conn_send_cb+0x58>)
    ac62:	1a5b      	subs	r3, r3, r1
    ac64:	f36f 02c5 	bfc	r2, #3, #3
    ac68:	08db      	lsrs	r3, r3, #3
    ac6a:	f363 128f 	bfi	r2, r3, #6, #10
    ac6e:	490b      	ldr	r1, [pc, #44]	; (ac9c <bt_conn_send_cb+0x5c>)
    ac70:	f7f7 fa3c 	bl	20ec <log_1>
		net_buf_unref(buf);
    ac74:	4620      	mov	r0, r4
    ac76:	f014 faed 	bl	1f254 <net_buf_unref>
		return -ENOTCONN;
    ac7a:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    ac7e:	bd10      	pop	{r4, pc}
	net_buf_put(&conn->tx_queue, buf);
    ac80:	302c      	adds	r0, #44	; 0x2c
	conn_tx(buf)->cb = cb;
    ac82:	614a      	str	r2, [r1, #20]
	net_buf_put(&conn->tx_queue, buf);
    ac84:	f014 fad9 	bl	1f23a <net_buf_put>
	return 0;
    ac88:	2000      	movs	r0, #0
    ac8a:	e7f8      	b.n	ac7e <bt_conn_send_cb+0x3e>
    ac8c:	2000e204 	.word	0x2000e204
    ac90:	0002ef38 	.word	0x0002ef38
    ac94:	0002ef48 	.word	0x0002ef48
    ac98:	000318e0 	.word	0x000318e0
    ac9c:	000317d9 	.word	0x000317d9

0000aca0 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    aca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
Z_GENLIST_PREPEND(slist, snode)
    aca4:	4d0d      	ldr	r5, [pc, #52]	; (acdc <bt_conn_notify_tx+0x3c>)
    aca6:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    aca8:	f100 071c 	add.w	r7, r0, #28
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    acac:	f04f 0800 	mov.w	r8, #0
    acb0:	2100      	movs	r1, #0
    acb2:	4638      	mov	r0, r7
    acb4:	f022 ffe6 	bl	2dc84 <_impl_k_queue_get>
    acb8:	4604      	mov	r4, r0
    acba:	b908      	cbnz	r0, acc0 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    acbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    acc0:	6863      	ldr	r3, [r4, #4]
    acc2:	b10b      	cbz	r3, acc8 <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    acc4:	4630      	mov	r0, r6
    acc6:	4798      	blx	r3
    acc8:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    acca:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    accc:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    acce:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    acd2:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    acd4:	2b00      	cmp	r3, #0
    acd6:	d1eb      	bne.n	acb0 <bt_conn_notify_tx+0x10>
	list->tail = node;
    acd8:	606c      	str	r4, [r5, #4]
    acda:	e7e7      	b.n	acac <bt_conn_notify_tx+0xc>
    acdc:	20000c68 	.word	0x20000c68

0000ace0 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    ace0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ace4:	4605      	mov	r5, r0
    ace6:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    ace8:	4849      	ldr	r0, [pc, #292]	; (ae10 <send_frag+0x130>)
    acea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    acee:	4698      	mov	r8, r3
    acf0:	4614      	mov	r4, r2
    acf2:	f023 fae9 	bl	2e2c8 <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    acf6:	4b47      	ldr	r3, [pc, #284]	; (ae14 <send_frag+0x134>)
    acf8:	f103 0044 	add.w	r0, r3, #68	; 0x44
    acfc:	f7ff fd9e 	bl	a83c <atomic_get>
    ad00:	b130      	cbz	r0, ad10 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    ad02:	7b5a      	ldrb	r2, [r3, #13]
    ad04:	3a04      	subs	r2, #4
    ad06:	2a01      	cmp	r2, #1
    ad08:	d802      	bhi.n	ad10 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    ad0a:	4618      	mov	r0, r3
    ad0c:	f7ff ffc8 	bl	aca0 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    ad10:	7b69      	ldrb	r1, [r5, #13]
    ad12:	2904      	cmp	r1, #4
    ad14:	d15e      	bne.n	add4 <send_frag+0xf4>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    ad16:	f107 0008 	add.w	r0, r7, #8
    ad1a:	f014 fb30 	bl	1f37e <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    ad1e:	89bb      	ldrh	r3, [r7, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    ad20:	882a      	ldrh	r2, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ad22:	4e3d      	ldr	r6, [pc, #244]	; (ae18 <send_frag+0x138>)
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    ad24:	3b04      	subs	r3, #4
    ad26:	8043      	strh	r3, [r0, #2]
    ad28:	6871      	ldr	r1, [r6, #4]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    ad2a:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    ad2e:	2302      	movs	r3, #2
    ad30:	6834      	ldr	r4, [r6, #0]
    ad32:	8002      	strh	r2, [r0, #0]

	cb = conn_tx(buf)->cb;
    ad34:	697a      	ldr	r2, [r7, #20]
    ad36:	753b      	strb	r3, [r7, #20]
	return node->next;
    ad38:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    ad3a:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ad3c:	428c      	cmp	r4, r1
	list->tail = node;
    ad3e:	bf08      	it	eq
    ad40:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    ad42:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    ad44:	f04f 0320 	mov.w	r3, #32
    ad48:	f3ef 8211 	mrs	r2, BASEPRI
    ad4c:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    ad50:	2300      	movs	r3, #0
    ad52:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    ad54:	69ab      	ldr	r3, [r5, #24]
    ad56:	2b00      	cmp	r3, #0
    ad58:	d14a      	bne.n	adf0 <send_frag+0x110>
	list->head = node;
    ad5a:	e9c5 4405 	strd	r4, r4, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ad5e:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    ad62:	4638      	mov	r0, r7
    ad64:	f7fd fbfe 	bl	8564 <bt_send>
	if (err) {
    ad68:	4602      	mov	r2, r0
    ad6a:	2800      	cmp	r0, #0
    ad6c:	d04c      	beq.n	ae08 <send_frag+0x128>
		BT_ERR("Unable to send to driver (err %d)", err);
    ad6e:	4b2b      	ldr	r3, [pc, #172]	; (ae1c <send_frag+0x13c>)
    ad70:	681b      	ldr	r3, [r3, #0]
    ad72:	075b      	lsls	r3, r3, #29
    ad74:	d010      	beq.n	ad98 <send_frag+0xb8>
    ad76:	2101      	movs	r1, #1
    ad78:	f04f 0300 	mov.w	r3, #0
    ad7c:	f361 0302 	bfi	r3, r1, #0, #3
    ad80:	4827      	ldr	r0, [pc, #156]	; (ae20 <send_frag+0x140>)
    ad82:	4928      	ldr	r1, [pc, #160]	; (ae24 <send_frag+0x144>)
    ad84:	1a09      	subs	r1, r1, r0
    ad86:	08c9      	lsrs	r1, r1, #3
    ad88:	f36f 03c5 	bfc	r3, #3, #3
    ad8c:	f361 138f 	bfi	r3, r1, #6, #10
    ad90:	4825      	ldr	r0, [pc, #148]	; (ae28 <send_frag+0x148>)
    ad92:	4926      	ldr	r1, [pc, #152]	; (ae2c <send_frag+0x14c>)
    ad94:	f7f7 f9be 	bl	2114 <log_2>
	__asm__ volatile(
    ad98:	f04f 0320 	mov.w	r3, #32
    ad9c:	f3ef 8011 	mrs	r0, BASEPRI
    ada0:	f383 8811 	msr	BASEPRI, r3
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ada4:	696b      	ldr	r3, [r5, #20]
    ada6:	2200      	movs	r2, #0
    ada8:	b153      	cbz	r3, adc0 <send_frag+0xe0>
    adaa:	429c      	cmp	r4, r3
    adac:	6819      	ldr	r1, [r3, #0]
    adae:	d128      	bne.n	ae02 <send_frag+0x122>
Z_GENLIST_REMOVE(slist, snode)
    adb0:	bb0a      	cbnz	r2, adf6 <send_frag+0x116>
    adb2:	69ab      	ldr	r3, [r5, #24]
	list->head = node;
    adb4:	6169      	str	r1, [r5, #20]
Z_GENLIST_REMOVE(slist, snode)
    adb6:	429c      	cmp	r4, r3
    adb8:	d100      	bne.n	adbc <send_frag+0xdc>
	list->tail = node;
    adba:	61a9      	str	r1, [r5, #24]
	parent->next = child;
    adbc:	2300      	movs	r3, #0
    adbe:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    adc0:	f380 8811 	msr	BASEPRI, r0
	tx->cb = NULL;
    adc4:	2300      	movs	r3, #0
    adc6:	6063      	str	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    adc8:	6833      	ldr	r3, [r6, #0]
	parent->next = child;
    adca:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    adcc:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    adce:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    add0:	b903      	cbnz	r3, add4 <send_frag+0xf4>
	list->tail = node;
    add2:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    add4:	480e      	ldr	r0, [pc, #56]	; (ae10 <send_frag+0x130>)
    add6:	f023 fa50 	bl	2e27a <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    adda:	f1b8 0f00 	cmp.w	r8, #0
    adde:	d004      	beq.n	adea <send_frag+0x10a>
		net_buf_unref(buf);
    ade0:	4638      	mov	r0, r7
    ade2:	f014 fa37 	bl	1f254 <net_buf_unref>
	}
	return false;
    ade6:	f04f 0800 	mov.w	r8, #0
}
    adea:	4640      	mov	r0, r8
    adec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	parent->next = child;
    adf0:	601c      	str	r4, [r3, #0]
	list->tail = node;
    adf2:	61ac      	str	r4, [r5, #24]
    adf4:	e7b3      	b.n	ad5e <send_frag+0x7e>
	parent->next = child;
    adf6:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    adf8:	69ab      	ldr	r3, [r5, #24]
    adfa:	429c      	cmp	r4, r3
	list->tail = node;
    adfc:	bf08      	it	eq
    adfe:	61aa      	streq	r2, [r5, #24]
    ae00:	e7dc      	b.n	adbc <send_frag+0xdc>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ae02:	461a      	mov	r2, r3
    ae04:	460b      	mov	r3, r1
    ae06:	e7cf      	b.n	ada8 <send_frag+0xc8>
	return true;
    ae08:	f04f 0801 	mov.w	r8, #1
    ae0c:	e7ed      	b.n	adea <send_frag+0x10a>
    ae0e:	bf00      	nop
    ae10:	2000d804 	.word	0x2000d804
    ae14:	20000bd4 	.word	0x20000bd4
    ae18:	20000c68 	.word	0x20000c68
    ae1c:	2000e204 	.word	0x2000e204
    ae20:	0002ef38 	.word	0x0002ef38
    ae24:	0002ef48 	.word	0x0002ef48
    ae28:	00030f0b 	.word	0x00030f0b
    ae2c:	000317e9 	.word	0x000317e9

0000ae30 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    ae30:	b538      	push	{r3, r4, r5, lr}
    ae32:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    ae34:	f100 052c 	add.w	r5, r0, #44	; 0x2c
    ae38:	2100      	movs	r1, #0
    ae3a:	4628      	mov	r0, r5
    ae3c:	f014 f9e0 	bl	1f200 <net_buf_get>
    ae40:	b958      	cbnz	r0, ae5a <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
    ae42:	4620      	mov	r0, r4
    ae44:	f7ff ff2c 	bl	aca0 <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
    ae48:	4620      	mov	r0, r4
    ae4a:	f7ff fcfd 	bl	a848 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    ae4e:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    ae52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
    ae56:	f7ff bd02 	b.w	a85e <atomic_dec>
		net_buf_unref(buf);
    ae5a:	f014 f9fb 	bl	1f254 <net_buf_unref>
    ae5e:	e7eb      	b.n	ae38 <conn_cleanup+0x8>

0000ae60 <bt_conn_prepare_events>:
{
    ae60:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
    ae62:	4b1f      	ldr	r3, [pc, #124]	; (aee0 <bt_conn_prepare_events+0x80>)
    ae64:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    ae66:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    ae68:	609a      	str	r2, [r3, #8]
{
    ae6a:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    ae6c:	f023 ff0a 	bl	2ec84 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    ae70:	4b1c      	ldr	r3, [pc, #112]	; (aee4 <bt_conn_prepare_events+0x84>)
    ae72:	f103 0044 	add.w	r0, r3, #68	; 0x44
    ae76:	f7ff fce1 	bl	a83c <atomic_get>
    ae7a:	4619      	mov	r1, r3
    ae7c:	b908      	cbnz	r0, ae82 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    ae7e:	2001      	movs	r0, #1
}
    ae80:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    ae82:	7b5a      	ldrb	r2, [r3, #13]
    ae84:	b99a      	cbnz	r2, aeae <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ae86:	f3bf 8f5b 	dmb	ish
    ae8a:	1d1a      	adds	r2, r3, #4
    ae8c:	e852 0f00 	ldrex	r0, [r2]
    ae90:	f020 0540 	bic.w	r5, r0, #64	; 0x40
    ae94:	e842 5c00 	strex	ip, r5, [r2]
    ae98:	f1bc 0f00 	cmp.w	ip, #0
    ae9c:	d1f6      	bne.n	ae8c <bt_conn_prepare_events+0x2c>
    ae9e:	f3bf 8f5b 	dmb	ish
    aea2:	0642      	lsls	r2, r0, #25
    aea4:	d503      	bpl.n	aeae <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    aea6:	4618      	mov	r0, r3
    aea8:	f7ff ffc2 	bl	ae30 <conn_cleanup>
    aeac:	e7e7      	b.n	ae7e <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    aeae:	7b4d      	ldrb	r5, [r1, #13]
    aeb0:	2d04      	cmp	r5, #4
    aeb2:	d1e4      	bne.n	ae7e <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    aeb4:	4b0c      	ldr	r3, [pc, #48]	; (aee8 <bt_conn_prepare_events+0x88>)
    aeb6:	2200      	movs	r2, #0
    aeb8:	4629      	mov	r1, r5
    aeba:	f104 0014 	add.w	r0, r4, #20
    aebe:	f023 fee1 	bl	2ec84 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    aec2:	2301      	movs	r3, #1
    aec4:	f884 3020 	strb.w	r3, [r4, #32]
		k_poll_event_init(&events[ev_count],
    aec8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    aecc:	4b07      	ldr	r3, [pc, #28]	; (aeec <bt_conn_prepare_events+0x8c>)
    aece:	2200      	movs	r2, #0
    aed0:	4629      	mov	r1, r5
    aed2:	f023 fed7 	bl	2ec84 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    aed6:	2302      	movs	r3, #2
    aed8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    aedc:	2003      	movs	r0, #3
	return ev_count;
    aede:	e7cf      	b.n	ae80 <bt_conn_prepare_events+0x20>
    aee0:	2000d8a0 	.word	0x2000d8a0
    aee4:	20000bd4 	.word	0x20000bd4
    aee8:	20000bf0 	.word	0x20000bf0
    aeec:	20000c00 	.word	0x20000c00

0000aef0 <bt_conn_add_le>:
{
    aef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    aef4:	4c16      	ldr	r4, [pc, #88]	; (af50 <bt_conn_add_le+0x60>)
    aef6:	f104 0744 	add.w	r7, r4, #68	; 0x44
{
    aefa:	4680      	mov	r8, r0
		if (!atomic_get(&conns[i].ref)) {
    aefc:	4638      	mov	r0, r7
    aefe:	f7ff fc9d 	bl	a83c <atomic_get>
    af02:	4605      	mov	r5, r0
    af04:	b110      	cbz	r0, af0c <bt_conn_add_le+0x1c>
		return NULL;
    af06:	2000      	movs	r0, #0
}
    af08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(conn, 0, sizeof(*conn));
    af0c:	4601      	mov	r1, r0
    af0e:	2294      	movs	r2, #148	; 0x94
    af10:	4620      	mov	r0, r4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    af12:	2601      	movs	r6, #1
    af14:	f7fb fee5 	bl	6ce2 <memset>
    af18:	f3bf 8f5b 	dmb	ish
    af1c:	e857 3f00 	ldrex	r3, [r7]
    af20:	e847 6200 	strex	r2, r6, [r7]
    af24:	2a00      	cmp	r2, #0
    af26:	d1f9      	bne.n	af1c <bt_conn_add_le+0x2c>
    af28:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    af2c:	2207      	movs	r2, #7
    af2e:	4641      	mov	r1, r8
    af30:	f104 0048 	add.w	r0, r4, #72	; 0x48
    af34:	f7fb fea8 	bl	6c88 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    af38:	4b06      	ldr	r3, [pc, #24]	; (af54 <bt_conn_add_le+0x64>)
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    af3a:	4907      	ldr	r1, [pc, #28]	; (af58 <bt_conn_add_le+0x68>)
	conn->sec_level = BT_SECURITY_LOW;
    af3c:	7266      	strb	r6, [r4, #9]
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    af3e:	f104 0074 	add.w	r0, r4, #116	; 0x74
	conn->required_sec_level = BT_SECURITY_LOW;
    af42:	72a6      	strb	r6, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
    af44:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    af46:	6623      	str	r3, [r4, #96]	; 0x60
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    af48:	f023 fb88 	bl	2e65c <k_delayed_work_init>
			conn = &conns[i];
    af4c:	4620      	mov	r0, r4
	return conn;
    af4e:	e7db      	b.n	af08 <bt_conn_add_le+0x18>
    af50:	20000bd4 	.word	0x20000bd4
    af54:	00280018 	.word	0x00280018
    af58:	0000b455 	.word	0x0000b455

0000af5c <bt_conn_set_state>:
{
    af5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
    af60:	7b45      	ldrb	r5, [r0, #13]
    af62:	42a9      	cmp	r1, r5
{
    af64:	4604      	mov	r4, r0
    af66:	460e      	mov	r6, r1
	if (conn->state == state) {
    af68:	d119      	bne.n	af9e <bt_conn_set_state+0x42>
		BT_WARN("no transition");
    af6a:	4b69      	ldr	r3, [pc, #420]	; (b110 <bt_conn_set_state+0x1b4>)
    af6c:	681b      	ldr	r3, [r3, #0]
    af6e:	f003 0307 	and.w	r3, r3, #7
    af72:	2b01      	cmp	r3, #1
    af74:	f240 80a4 	bls.w	b0c0 <bt_conn_set_state+0x164>
    af78:	2302      	movs	r3, #2
    af7a:	f04f 0200 	mov.w	r2, #0
    af7e:	f363 0202 	bfi	r2, r3, #0, #3
    af82:	4964      	ldr	r1, [pc, #400]	; (b114 <bt_conn_set_state+0x1b8>)
    af84:	4b64      	ldr	r3, [pc, #400]	; (b118 <bt_conn_set_state+0x1bc>)
    af86:	4865      	ldr	r0, [pc, #404]	; (b11c <bt_conn_set_state+0x1c0>)
    af88:	1a5b      	subs	r3, r3, r1
    af8a:	f36f 02c5 	bfc	r2, #3, #3
    af8e:	08db      	lsrs	r3, r3, #3
    af90:	f363 128f 	bfi	r2, r3, #6, #10
    af94:	4962      	ldr	r1, [pc, #392]	; (b120 <bt_conn_set_state+0x1c4>)
}
    af96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no transition");
    af9a:	f7f7 b8a7 	b.w	20ec <log_1>
	conn->state = state;
    af9e:	7361      	strb	r1, [r4, #13]
	switch (old_state) {
    afa0:	b155      	cbz	r5, afb8 <bt_conn_set_state+0x5c>
    afa2:	2d03      	cmp	r5, #3
    afa4:	d00c      	beq.n	afc0 <bt_conn_set_state+0x64>
	switch (conn->state) {
    afa6:	7b63      	ldrb	r3, [r4, #13]
    afa8:	2b05      	cmp	r3, #5
    afaa:	f200 8097 	bhi.w	b0dc <bt_conn_set_state+0x180>
    afae:	e8df f003 	tbb	[pc, r3]
    afb2:	8728      	.short	0x8728
    afb4:	870e8987 	.word	0x870e8987
	atomic_inc(&conn->ref);
    afb8:	3044      	adds	r0, #68	; 0x44
    afba:	f7ff fc5d 	bl	a878 <atomic_inc>
    afbe:	e7f2      	b.n	afa6 <bt_conn_set_state+0x4a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    afc0:	7883      	ldrb	r3, [r0, #2]
    afc2:	2b00      	cmp	r3, #0
    afc4:	d1ef      	bne.n	afa6 <bt_conn_set_state+0x4a>
			k_delayed_work_cancel(&conn->le.update_work);
    afc6:	3074      	adds	r0, #116	; 0x74
    afc8:	f023 fb51 	bl	2e66e <k_delayed_work_cancel>
    afcc:	e7eb      	b.n	afa6 <bt_conn_set_state+0x4a>
		if (conn->type == BT_CONN_TYPE_SCO) {
    afce:	78a3      	ldrb	r3, [r4, #2]
    afd0:	2b02      	cmp	r3, #2
    afd2:	d075      	beq.n	b0c0 <bt_conn_set_state+0x164>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    afd4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    afd8:	f022 fe28 	bl	2dc2c <_impl_k_queue_init>
    afdc:	f104 001c 	add.w	r0, r4, #28
    afe0:	f022 fe24 	bl	2dc2c <_impl_k_queue_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result)
    afe4:	2100      	movs	r1, #0
    afe6:	484f      	ldr	r0, [pc, #316]	; (b124 <bt_conn_set_state+0x1c8>)
    afe8:	f023 fefe 	bl	2ede8 <_impl_k_poll_signal>
	list->head = NULL;
    afec:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    afee:	4620      	mov	r0, r4
	list->tail = NULL;
    aff0:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
    aff4:	f000 fedc 	bl	bdb0 <bt_l2cap_connected>
		notify_connected(conn);
    aff8:	4620      	mov	r0, r4
}
    affa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify_connected(conn);
    affe:	f7ff bc0d 	b.w	a81c <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    b002:	78a3      	ldrb	r3, [r4, #2]
    b004:	2b02      	cmp	r3, #2
    b006:	d105      	bne.n	b014 <bt_conn_set_state+0xb8>
	atomic_dec(&conn->ref);
    b008:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    b00c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	atomic_dec(&conn->ref);
    b010:	f7ff bc25 	b.w	a85e <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    b014:	1f2b      	subs	r3, r5, #4
    b016:	2b01      	cmp	r3, #1
    b018:	d844      	bhi.n	b0a4 <bt_conn_set_state+0x148>
			bt_l2cap_disconnected(conn);
    b01a:	4620      	mov	r0, r4
    b01c:	f000 fcd8 	bl	b9d0 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    b020:	4b41      	ldr	r3, [pc, #260]	; (b128 <bt_conn_set_state+0x1cc>)
    b022:	681d      	ldr	r5, [r3, #0]
    b024:	bb25      	cbnz	r5, b070 <bt_conn_set_state+0x114>
Z_GENLIST_PREPEND(slist, snode)
    b026:	4e41      	ldr	r6, [pc, #260]	; (b12c <bt_conn_set_state+0x1d0>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    b028:	4f41      	ldr	r7, [pc, #260]	; (b130 <bt_conn_set_state+0x1d4>)
	__asm__ volatile(
    b02a:	f04f 0320 	mov.w	r3, #32
    b02e:	f3ef 8211 	mrs	r2, BASEPRI
    b032:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(slist)
    b036:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
    b038:	bb0b      	cbnz	r3, b07e <bt_conn_set_state+0x122>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b03a:	f382 8811 	msr	BASEPRI, r2
			if (conn->type == BT_CONN_TYPE_LE) {
    b03e:	78a3      	ldrb	r3, [r4, #2]
    b040:	b91b      	cbnz	r3, b04a <bt_conn_set_state+0xee>
				k_delayed_work_cancel(&conn->le.update_work);
    b042:	f104 0074 	add.w	r0, r4, #116	; 0x74
    b046:	f023 fb12 	bl	2e66e <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b04a:	f3bf 8f5b 	dmb	ish
    b04e:	3404      	adds	r4, #4
    b050:	e854 3f00 	ldrex	r3, [r4]
    b054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b058:	e844 3200 	strex	r2, r3, [r4]
    b05c:	2a00      	cmp	r2, #0
    b05e:	d1f7      	bne.n	b050 <bt_conn_set_state+0xf4>
    b060:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result)
    b064:	2100      	movs	r1, #0
    b066:	482f      	ldr	r0, [pc, #188]	; (b124 <bt_conn_set_state+0x1c8>)
}
    b068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b06c:	f023 bebc 	b.w	2ede8 <_impl_k_poll_signal>
		if (cb->disconnected) {
    b070:	686b      	ldr	r3, [r5, #4]
    b072:	b113      	cbz	r3, b07a <bt_conn_set_state+0x11e>
			cb->disconnected(conn, conn->err);
    b074:	7b21      	ldrb	r1, [r4, #12]
    b076:	4620      	mov	r0, r4
    b078:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b07a:	69ad      	ldr	r5, [r5, #24]
    b07c:	e7d2      	b.n	b024 <bt_conn_set_state+0xc8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b07e:	69a0      	ldr	r0, [r4, #24]
	return node->next;
    b080:	6819      	ldr	r1, [r3, #0]
	list->head = node;
    b082:	6161      	str	r1, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b084:	4283      	cmp	r3, r0
	list->tail = node;
    b086:	bf08      	it	eq
    b088:	61a1      	streq	r1, [r4, #24]
    b08a:	f382 8811 	msr	BASEPRI, r2
Z_GENLIST_PREPEND(slist, snode)
    b08e:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    b090:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    b092:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    b094:	605d      	str	r5, [r3, #4]
	list->head = node;
    b096:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    b098:	b902      	cbnz	r2, b09c <bt_conn_set_state+0x140>
	list->tail = node;
    b09a:	6073      	str	r3, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    b09c:	4638      	mov	r0, r7
    b09e:	f023 f8ec 	bl	2e27a <_impl_k_sem_give>
    b0a2:	e7c2      	b.n	b02a <bt_conn_set_state+0xce>
		} else if (old_state == BT_CONN_CONNECT) {
    b0a4:	2d03      	cmp	r5, #3
    b0a6:	d103      	bne.n	b0b0 <bt_conn_set_state+0x154>
			notify_connected(conn);
    b0a8:	4620      	mov	r0, r4
    b0aa:	f7ff fbb7 	bl	a81c <notify_connected>
    b0ae:	e7ab      	b.n	b008 <bt_conn_set_state+0xac>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    b0b0:	2d01      	cmp	r5, #1
    b0b2:	d103      	bne.n	b0bc <bt_conn_set_state+0x160>
			if (conn->err) {
    b0b4:	7b23      	ldrb	r3, [r4, #12]
    b0b6:	2b00      	cmp	r3, #0
    b0b8:	d0a6      	beq.n	b008 <bt_conn_set_state+0xac>
    b0ba:	e7f5      	b.n	b0a8 <bt_conn_set_state+0x14c>
		} else if (old_state == BT_CONN_CONNECT_DIR_ADV) {
    b0bc:	2d02      	cmp	r5, #2
    b0be:	d0f9      	beq.n	b0b4 <bt_conn_set_state+0x158>
}
    b0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b0c4:	78a3      	ldrb	r3, [r4, #2]
    b0c6:	2b00      	cmp	r3, #0
    b0c8:	d1fa      	bne.n	b0c0 <bt_conn_set_state+0x164>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b0ca:	f104 0174 	add.w	r1, r4, #116	; 0x74
    b0ce:	f640 32b8 	movw	r2, #3000	; 0xbb8
    b0d2:	4818      	ldr	r0, [pc, #96]	; (b134 <bt_conn_set_state+0x1d8>)
}
    b0d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b0d8:	f023 bb18 	b.w	2e70c <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    b0dc:	4b0c      	ldr	r3, [pc, #48]	; (b110 <bt_conn_set_state+0x1b4>)
    b0de:	681b      	ldr	r3, [r3, #0]
    b0e0:	f003 0307 	and.w	r3, r3, #7
    b0e4:	2b01      	cmp	r3, #1
    b0e6:	d9eb      	bls.n	b0c0 <bt_conn_set_state+0x164>
    b0e8:	2202      	movs	r2, #2
    b0ea:	f04f 0300 	mov.w	r3, #0
    b0ee:	f362 0302 	bfi	r3, r2, #0, #3
    b0f2:	4809      	ldr	r0, [pc, #36]	; (b118 <bt_conn_set_state+0x1bc>)
    b0f4:	4a07      	ldr	r2, [pc, #28]	; (b114 <bt_conn_set_state+0x1b8>)
    b0f6:	490a      	ldr	r1, [pc, #40]	; (b120 <bt_conn_set_state+0x1c4>)
    b0f8:	1a80      	subs	r0, r0, r2
    b0fa:	08c0      	lsrs	r0, r0, #3
    b0fc:	f36f 03c5 	bfc	r3, #3, #3
    b100:	f360 138f 	bfi	r3, r0, #6, #10
    b104:	4632      	mov	r2, r6
    b106:	480c      	ldr	r0, [pc, #48]	; (b138 <bt_conn_set_state+0x1dc>)
}
    b108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no valid (%u) state was set", state);
    b10c:	f7f7 b802 	b.w	2114 <log_2>
    b110:	2000e204 	.word	0x2000e204
    b114:	0002ef38 	.word	0x0002ef38
    b118:	0002ef48 	.word	0x0002ef48
    b11c:	000318f3 	.word	0x000318f3
    b120:	00031806 	.word	0x00031806
    b124:	2000d8a0 	.word	0x2000d8a0
    b128:	20000bb8 	.word	0x20000bb8
    b12c:	20000c68 	.word	0x20000c68
    b130:	2000d804 	.word	0x2000d804
    b134:	200037b0 	.word	0x200037b0
    b138:	00031905 	.word	0x00031905

0000b13c <bt_conn_lookup_handle>:
{
    b13c:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    b13e:	4c0b      	ldr	r4, [pc, #44]	; (b16c <bt_conn_lookup_handle+0x30>)
{
    b140:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    b142:	f104 0044 	add.w	r0, r4, #68	; 0x44
    b146:	f7ff fb79 	bl	a83c <atomic_get>
    b14a:	b158      	cbz	r0, b164 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    b14c:	7b63      	ldrb	r3, [r4, #13]
    b14e:	3b04      	subs	r3, #4
    b150:	2b01      	cmp	r3, #1
    b152:	d808      	bhi.n	b166 <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    b154:	8823      	ldrh	r3, [r4, #0]
    b156:	4293      	cmp	r3, r2
    b158:	d105      	bne.n	b166 <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    b15a:	f104 0044 	add.w	r0, r4, #68	; 0x44
    b15e:	f7ff fb8b 	bl	a878 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    b162:	4620      	mov	r0, r4
}
    b164:	bd10      	pop	{r4, pc}
	return NULL;
    b166:	2000      	movs	r0, #0
    b168:	e7fc      	b.n	b164 <bt_conn_lookup_handle+0x28>
    b16a:	bf00      	nop
    b16c:	20000bd4 	.word	0x20000bd4

0000b170 <bt_conn_addr_le_cmp>:
{
    b170:	b538      	push	{r3, r4, r5, lr}
    b172:	460d      	mov	r5, r1
    b174:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    b176:	f100 0148 	add.w	r1, r0, #72	; 0x48
    b17a:	2207      	movs	r2, #7
    b17c:	4628      	mov	r0, r5
    b17e:	f7fb fd5c 	bl	6c3a <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    b182:	b160      	cbz	r0, b19e <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    b184:	78e3      	ldrb	r3, [r4, #3]
    b186:	2207      	movs	r2, #7
    b188:	b933      	cbnz	r3, b198 <bt_conn_addr_le_cmp+0x28>
    b18a:	f104 0156 	add.w	r1, r4, #86	; 0x56
    b18e:	4628      	mov	r0, r5
}
    b190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b194:	f7fb bd51 	b.w	6c3a <memcmp>
    b198:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    b19c:	e7f7      	b.n	b18e <bt_conn_addr_le_cmp+0x1e>
    b19e:	bd38      	pop	{r3, r4, r5, pc}

0000b1a0 <bt_conn_lookup_addr_le>:
{
    b1a0:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    b1a2:	4c0d      	ldr	r4, [pc, #52]	; (b1d8 <bt_conn_lookup_addr_le+0x38>)
{
    b1a4:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    b1a6:	f104 0044 	add.w	r0, r4, #68	; 0x44
    b1aa:	f7ff fb47 	bl	a83c <atomic_get>
    b1ae:	b908      	cbnz	r0, b1b4 <bt_conn_lookup_addr_le+0x14>
	return NULL;
    b1b0:	2000      	movs	r0, #0
}
    b1b2:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    b1b4:	78a2      	ldrb	r2, [r4, #2]
    b1b6:	2a00      	cmp	r2, #0
    b1b8:	d1fa      	bne.n	b1b0 <bt_conn_lookup_addr_le+0x10>
		if (conns[i].id == id &&
    b1ba:	7a22      	ldrb	r2, [r4, #8]
    b1bc:	429a      	cmp	r2, r3
    b1be:	d1f7      	bne.n	b1b0 <bt_conn_lookup_addr_le+0x10>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    b1c0:	4620      	mov	r0, r4
    b1c2:	f7ff ffd5 	bl	b170 <bt_conn_addr_le_cmp>
		if (conns[i].id == id &&
    b1c6:	2800      	cmp	r0, #0
    b1c8:	d1f2      	bne.n	b1b0 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    b1ca:	f104 0044 	add.w	r0, r4, #68	; 0x44
    b1ce:	f7ff fb53 	bl	a878 <atomic_inc>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    b1d2:	4620      	mov	r0, r4
			return bt_conn_ref(&conns[i]);
    b1d4:	e7ed      	b.n	b1b2 <bt_conn_lookup_addr_le+0x12>
    b1d6:	bf00      	nop
    b1d8:	20000bd4 	.word	0x20000bd4

0000b1dc <bt_conn_lookup_state_le>:
{
    b1dc:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    b1de:	4c0e      	ldr	r4, [pc, #56]	; (b218 <bt_conn_lookup_state_le+0x3c>)
{
    b1e0:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    b1e2:	f104 0044 	add.w	r0, r4, #68	; 0x44
{
    b1e6:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    b1e8:	f7ff fb28 	bl	a83c <atomic_get>
    b1ec:	b908      	cbnz	r0, b1f2 <bt_conn_lookup_state_le+0x16>
	return NULL;
    b1ee:	2000      	movs	r0, #0
}
    b1f0:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    b1f2:	78a2      	ldrb	r2, [r4, #2]
    b1f4:	2a00      	cmp	r2, #0
    b1f6:	d1fa      	bne.n	b1ee <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    b1f8:	b93b      	cbnz	r3, b20a <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    b1fa:	7b63      	ldrb	r3, [r4, #13]
    b1fc:	42ab      	cmp	r3, r5
    b1fe:	d1f6      	bne.n	b1ee <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    b200:	4806      	ldr	r0, [pc, #24]	; (b21c <bt_conn_lookup_state_le+0x40>)
    b202:	f7ff fb39 	bl	a878 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    b206:	4804      	ldr	r0, [pc, #16]	; (b218 <bt_conn_lookup_state_le+0x3c>)
    b208:	e7f2      	b.n	b1f0 <bt_conn_lookup_state_le+0x14>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    b20a:	4619      	mov	r1, r3
    b20c:	4620      	mov	r0, r4
    b20e:	f7ff ffaf 	bl	b170 <bt_conn_addr_le_cmp>
    b212:	2800      	cmp	r0, #0
    b214:	d0f1      	beq.n	b1fa <bt_conn_lookup_state_le+0x1e>
    b216:	e7ea      	b.n	b1ee <bt_conn_lookup_state_le+0x12>
    b218:	20000bd4 	.word	0x20000bd4
    b21c:	20000c18 	.word	0x20000c18

0000b220 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    b220:	3044      	adds	r0, #68	; 0x44
    b222:	f7ff bb1c 	b.w	a85e <atomic_dec>

0000b226 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
    b226:	b510      	push	{r4, lr}
	info->type = conn->type;
    b228:	7883      	ldrb	r3, [r0, #2]
    b22a:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    b22c:	78c4      	ldrb	r4, [r0, #3]
    b22e:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
    b230:	7a02      	ldrb	r2, [r0, #8]
    b232:	708a      	strb	r2, [r1, #2]

	switch (conn->type) {
    b234:	b9a3      	cbnz	r3, b260 <bt_conn_get_info+0x3a>
    b236:	f100 0256 	add.w	r2, r0, #86	; 0x56
    b23a:	f100 034f 	add.w	r3, r0, #79	; 0x4f
	case BT_CONN_TYPE_LE:
		if (conn->role == BT_HCI_ROLE_MASTER) {
    b23e:	b964      	cbnz	r4, b25a <bt_conn_get_info+0x34>
			info->le.src = &conn->le.init_addr;
			info->le.dst = &conn->le.resp_addr;
    b240:	e9c1 3201 	strd	r3, r2, [r1, #4]
		} else {
			info->le.src = &conn->le.resp_addr;
			info->le.dst = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
    b244:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    b248:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    b24a:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    b24e:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    b250:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    b254:	820b      	strh	r3, [r1, #16]
		return 0;
    b256:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
    b258:	bd10      	pop	{r4, pc}
			info->le.dst = &conn->le.init_addr;
    b25a:	e9c1 2301 	strd	r2, r3, [r1, #4]
    b25e:	e7f1      	b.n	b244 <bt_conn_get_info+0x1e>
	return -EINVAL;
    b260:	f06f 0015 	mvn.w	r0, #21
    b264:	e7f8      	b.n	b258 <bt_conn_get_info+0x32>
	...

0000b268 <bt_le_set_auto_conn>:
	return conn;
}

int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    b268:	b570      	push	{r4, r5, r6, lr}
    b26a:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    b26c:	460d      	mov	r5, r1
    b26e:	2900      	cmp	r1, #0
    b270:	d140      	bne.n	b2f4 <bt_le_set_auto_conn+0x8c>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    b272:	4631      	mov	r1, r6
    b274:	2000      	movs	r0, #0
    b276:	f7ff ff93 	bl	b1a0 <bt_conn_lookup_addr_le>
	if (!conn) {
    b27a:	4604      	mov	r4, r0
    b27c:	b928      	cbnz	r0, b28a <bt_le_set_auto_conn+0x22>
		conn = bt_conn_add_le(addr);
    b27e:	4630      	mov	r0, r6
    b280:	f7ff fe36 	bl	aef0 <bt_conn_add_le>
		if (!conn) {
    b284:	4604      	mov	r4, r0
    b286:	2800      	cmp	r0, #0
    b288:	d055      	beq.n	b336 <bt_le_set_auto_conn+0xce>
    b28a:	1d23      	adds	r3, r4, #4
    b28c:	f104 0644 	add.w	r6, r4, #68	; 0x44
			return -ENOMEM;
		}
	}

	if (param) {
    b290:	2d00      	cmp	r5, #0
    b292:	d037      	beq.n	b304 <bt_le_set_auto_conn+0x9c>
		/* Only default identity is supported */
		conn->id = BT_ID_DEFAULT;
    b294:	2200      	movs	r2, #0
    b296:	7222      	strb	r2, [r4, #8]
	conn->le.interval_max = param->interval_max;
    b298:	886a      	ldrh	r2, [r5, #2]
    b29a:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	conn->le.latency = param->latency;
    b29e:	88aa      	ldrh	r2, [r5, #4]
    b2a0:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
	conn->le.timeout = param->timeout;
    b2a4:	88ea      	ldrh	r2, [r5, #6]
    b2a6:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
    b2aa:	f3bf 8f5b 	dmb	ish
    b2ae:	e853 2f00 	ldrex	r2, [r3]
    b2b2:	f042 0101 	orr.w	r1, r2, #1
    b2b6:	e843 1000 	strex	r0, r1, [r3]
    b2ba:	2800      	cmp	r0, #0
    b2bc:	d1f7      	bne.n	b2ae <bt_le_set_auto_conn+0x46>
    b2be:	f3bf 8f5b 	dmb	ish

		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    b2c2:	07d1      	lsls	r1, r2, #31
    b2c4:	d402      	bmi.n	b2cc <bt_le_set_auto_conn+0x64>
	atomic_inc(&conn->ref);
    b2c6:	4630      	mov	r0, r6
    b2c8:	f7ff fad6 	bl	a878 <atomic_inc>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    b2cc:	7b63      	ldrb	r3, [r4, #13]
    b2ce:	b963      	cbnz	r3, b2ea <bt_le_set_auto_conn+0x82>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b2d0:	481a      	ldr	r0, [pc, #104]	; (b33c <bt_le_set_auto_conn+0xd4>)
    b2d2:	f7ff fab3 	bl	a83c <atomic_get>
    b2d6:	0783      	lsls	r3, r0, #30
    b2d8:	d507      	bpl.n	b2ea <bt_le_set_auto_conn+0x82>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    b2da:	b11d      	cbz	r5, b2e4 <bt_le_set_auto_conn+0x7c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    b2dc:	2101      	movs	r1, #1
    b2de:	4620      	mov	r0, r4
    b2e0:	f7ff fe3c 	bl	af5c <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    b2e4:	2000      	movs	r0, #0
    b2e6:	f7fd f9e1 	bl	86ac <bt_le_scan_update>
	atomic_dec(&conn->ref);
    b2ea:	4630      	mov	r0, r6
    b2ec:	f7ff fab7 	bl	a85e <atomic_dec>
	}

	bt_conn_unref(conn);

	return 0;
    b2f0:	2000      	movs	r0, #0
    b2f2:	e006      	b.n	b302 <bt_le_set_auto_conn+0x9a>
	if (param && !bt_le_conn_params_valid(param)) {
    b2f4:	4608      	mov	r0, r1
    b2f6:	f7fc fe39 	bl	7f6c <bt_le_conn_params_valid>
    b2fa:	2800      	cmp	r0, #0
    b2fc:	d1b9      	bne.n	b272 <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    b2fe:	f06f 0015 	mvn.w	r0, #21
}
    b302:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b304:	f3bf 8f5b 	dmb	ish
    b308:	e853 2f00 	ldrex	r2, [r3]
    b30c:	f022 0101 	bic.w	r1, r2, #1
    b310:	e843 1000 	strex	r0, r1, [r3]
    b314:	2800      	cmp	r0, #0
    b316:	d1f7      	bne.n	b308 <bt_le_set_auto_conn+0xa0>
    b318:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    b31c:	07d2      	lsls	r2, r2, #31
    b31e:	d5d5      	bpl.n	b2cc <bt_le_set_auto_conn+0x64>
	atomic_dec(&conn->ref);
    b320:	4630      	mov	r0, r6
    b322:	f7ff fa9c 	bl	a85e <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    b326:	7b63      	ldrb	r3, [r4, #13]
    b328:	2b01      	cmp	r3, #1
    b32a:	d1cf      	bne.n	b2cc <bt_le_set_auto_conn+0x64>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b32c:	4629      	mov	r1, r5
    b32e:	4620      	mov	r0, r4
    b330:	f7ff fe14 	bl	af5c <bt_conn_set_state>
    b334:	e7ca      	b.n	b2cc <bt_le_set_auto_conn+0x64>
			return -ENOMEM;
    b336:	f06f 000b 	mvn.w	r0, #11
    b33a:	e7e2      	b.n	b302 <bt_le_set_auto_conn+0x9a>
    b33c:	2000d7e8 	.word	0x2000d7e8

0000b340 <bt_conn_disconnect>:
{
    b340:	b570      	push	{r4, r5, r6, lr}
    b342:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b344:	7881      	ldrb	r1, [r0, #2]
{
    b346:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b348:	b911      	cbnz	r1, b350 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    b34a:	3048      	adds	r0, #72	; 0x48
    b34c:	f7ff ff8c 	bl	b268 <bt_le_set_auto_conn>
	switch (conn->state) {
    b350:	7b63      	ldrb	r3, [r4, #13]
    b352:	3b01      	subs	r3, #1
    b354:	2b04      	cmp	r3, #4
    b356:	d804      	bhi.n	b362 <bt_conn_disconnect+0x22>
    b358:	e8df f003 	tbb	[pc, r3]
    b35c:	251a1107 	.word	0x251a1107
    b360:	0f          	.byte	0x0f
    b361:	00          	.byte	0x00
		return -ENOTCONN;
    b362:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    b366:	4628      	mov	r0, r5
    b368:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b36a:	4620      	mov	r0, r4
		conn->err = reason;
    b36c:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b36e:	2100      	movs	r1, #0
    b370:	f7ff fdf4 	bl	af5c <bt_conn_set_state>
			bt_le_scan_update(false);
    b374:	2000      	movs	r0, #0
    b376:	f7fd f999 	bl	86ac <bt_le_scan_update>
		return 0;
    b37a:	2500      	movs	r5, #0
    b37c:	e7f3      	b.n	b366 <bt_conn_disconnect+0x26>
		conn->err = reason;
    b37e:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b380:	4620      	mov	r0, r4
    b382:	2100      	movs	r1, #0
    b384:	f7ff fdea 	bl	af5c <bt_conn_set_state>
}
    b388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_le_adv_stop();
    b38c:	f7ff b928 	b.w	a5e0 <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->le.update_work);
    b390:	f104 0074 	add.w	r0, r4, #116	; 0x74
    b394:	f023 f96b 	bl	2e66e <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    b398:	2100      	movs	r1, #0
    b39a:	f242 000e 	movw	r0, #8206	; 0x200e
}
    b39e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    b3a2:	f7fd b8e7 	b.w	8574 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    b3a6:	2103      	movs	r1, #3
    b3a8:	f240 4006 	movw	r0, #1030	; 0x406
    b3ac:	f7fc fbc8 	bl	7b40 <bt_hci_cmd_create>
	if (!buf) {
    b3b0:	4605      	mov	r5, r0
    b3b2:	b198      	cbz	r0, b3dc <bt_conn_disconnect+0x9c>
	disconn = net_buf_add(buf, sizeof(*disconn));
    b3b4:	2103      	movs	r1, #3
    b3b6:	3008      	adds	r0, #8
    b3b8:	f013 ffaa 	bl	1f310 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    b3bc:	8823      	ldrh	r3, [r4, #0]
    b3be:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    b3c0:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    b3c2:	4629      	mov	r1, r5
    b3c4:	f240 4006 	movw	r0, #1030	; 0x406
    b3c8:	f7fd f8d4 	bl	8574 <bt_hci_cmd_send>
	if (err) {
    b3cc:	4605      	mov	r5, r0
    b3ce:	2800      	cmp	r0, #0
    b3d0:	d1c9      	bne.n	b366 <bt_conn_disconnect+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    b3d2:	2105      	movs	r1, #5
    b3d4:	4620      	mov	r0, r4
    b3d6:	f7ff fdc1 	bl	af5c <bt_conn_set_state>
    b3da:	e7c4      	b.n	b366 <bt_conn_disconnect+0x26>
		return -ENOBUFS;
    b3dc:	f06f 0536 	mvn.w	r5, #54	; 0x36
    b3e0:	e7c1      	b.n	b366 <bt_conn_disconnect+0x26>

0000b3e2 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    b3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3e4:	4607      	mov	r7, r0
    b3e6:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    b3e8:	f242 0013 	movw	r0, #8211	; 0x2013
    b3ec:	210e      	movs	r1, #14
    b3ee:	f7fc fba7 	bl	7b40 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    b3f2:	4606      	mov	r6, r0
    b3f4:	b1c8      	cbz	r0, b42a <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    b3f6:	210e      	movs	r1, #14
    b3f8:	3008      	adds	r0, #8
    b3fa:	f013 ff89 	bl	1f310 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
    b3fe:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    b400:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
    b402:	220e      	movs	r2, #14
    b404:	f7fb fc6d 	bl	6ce2 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    b408:	883b      	ldrh	r3, [r7, #0]
    b40a:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    b40c:	882b      	ldrh	r3, [r5, #0]
    b40e:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    b410:	886b      	ldrh	r3, [r5, #2]
    b412:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    b414:	88ab      	ldrh	r3, [r5, #4]
    b416:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    b418:	88eb      	ldrh	r3, [r5, #6]
    b41a:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    b41c:	4631      	mov	r1, r6
    b41e:	f242 0013 	movw	r0, #8211	; 0x2013
}
    b422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    b426:	f7fd b8a5 	b.w	8574 <bt_hci_cmd_send>
}
    b42a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    b42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b430 <send_conn_le_param_update>:
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b430:	4b07      	ldr	r3, [pc, #28]	; (b450 <send_conn_le_param_update+0x20>)
    b432:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    b436:	079a      	lsls	r2, r3, #30
    b438:	d503      	bpl.n	b442 <send_conn_le_param_update+0x12>
    b43a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
    b43e:	079b      	lsls	r3, r3, #30
    b440:	d401      	bmi.n	b446 <send_conn_le_param_update+0x16>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    b442:	78c3      	ldrb	r3, [r0, #3]
    b444:	b90b      	cbnz	r3, b44a <send_conn_le_param_update+0x1a>
		return bt_conn_le_conn_update(conn, param);
    b446:	f7ff bfcc 	b.w	b3e2 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    b44a:	f000 bd25 	b.w	be98 <bt_l2cap_update_conn_param>
    b44e:	bf00      	nop
    b450:	2000d778 	.word	0x2000d778

0000b454 <conn_le_update_timeout>:
{
    b454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b456:	f810 1c71 	ldrb.w	r1, [r0, #-113]
    b45a:	b929      	cbnz	r1, b468 <conn_le_update_timeout+0x14>
		bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL, NULL);
    b45c:	f242 000e 	movw	r0, #8206	; 0x200e
    b460:	f7fd f888 	bl	8574 <bt_hci_cmd_send>
}
    b464:	b004      	add	sp, #16
    b466:	bd10      	pop	{r4, pc}
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    b468:	f1a0 0274 	sub.w	r2, r0, #116	; 0x74
	if (atomic_test_and_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET)) {
    b46c:	f1a0 0470 	sub.w	r4, r0, #112	; 0x70
    b470:	f3bf 8f5b 	dmb	ish
    b474:	e854 3f00 	ldrex	r3, [r4]
    b478:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
    b47c:	e844 1c00 	strex	ip, r1, [r4]
    b480:	f1bc 0f00 	cmp.w	ip, #0
    b484:	d1f6      	bne.n	b474 <conn_le_update_timeout+0x20>
    b486:	f3bf 8f5b 	dmb	ish
    b48a:	055b      	lsls	r3, r3, #21
    b48c:	d520      	bpl.n	b4d0 <conn_le_update_timeout+0x7c>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    b48e:	f830 3c14 	ldrh.w	r3, [r0, #-20]
    b492:	f8ad 3000 	strh.w	r3, [sp]
    b496:	f830 3c12 	ldrh.w	r3, [r0, #-18]
    b49a:	f8ad 3002 	strh.w	r3, [sp, #2]
    b49e:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    b4a2:	f8ad 3004 	strh.w	r3, [sp, #4]
    b4a6:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    b4aa:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    b4ae:	4669      	mov	r1, sp
		send_conn_le_param_update(conn, param);
    b4b0:	4610      	mov	r0, r2
    b4b2:	f7ff ffbd 	bl	b430 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b4b6:	f3bf 8f5b 	dmb	ish
    b4ba:	e854 3f00 	ldrex	r3, [r4]
    b4be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b4c2:	e844 3200 	strex	r2, r3, [r4]
    b4c6:	2a00      	cmp	r2, #0
    b4c8:	d1f7      	bne.n	b4ba <conn_le_update_timeout+0x66>
    b4ca:	f3bf 8f5b 	dmb	ish
    b4ce:	e7c9      	b.n	b464 <conn_le_update_timeout+0x10>
		param = BT_LE_CONN_PARAM(CONFIG_BT_PERIPHERAL_PREF_MIN_INT,
    b4d0:	4903      	ldr	r1, [pc, #12]	; (b4e0 <conn_le_update_timeout+0x8c>)
    b4d2:	6808      	ldr	r0, [r1, #0]
    b4d4:	6849      	ldr	r1, [r1, #4]
    b4d6:	ab02      	add	r3, sp, #8
    b4d8:	c303      	stmia	r3!, {r0, r1}
		send_conn_le_param_update(conn, param);
    b4da:	a902      	add	r1, sp, #8
    b4dc:	e7e8      	b.n	b4b0 <conn_le_update_timeout+0x5c>
    b4de:	bf00      	nop
    b4e0:	0002f18c 	.word	0x0002f18c

0000b4e4 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    b4e4:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    b4e6:	4b08      	ldr	r3, [pc, #32]	; (b508 <bt_conn_create_pdu+0x24>)
{
    b4e8:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    b4ea:	2800      	cmp	r0, #0
    b4ec:	bf08      	it	eq
    b4ee:	4618      	moveq	r0, r3
    b4f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b4f4:	f013 fe7e 	bl	1f1f4 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    b4f8:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    b4fa:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    b4fc:	3008      	adds	r0, #8
    b4fe:	f013 fe98 	bl	1f232 <net_buf_simple_reserve>

	return buf;
}
    b502:	4620      	mov	r0, r4
    b504:	bd38      	pop	{r3, r4, r5, pc}
    b506:	bf00      	nop
    b508:	2000e474 	.word	0x2000e474

0000b50c <create_frag.isra.9>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    b50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b510:	4606      	mov	r6, r0
    b512:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    b514:	4816      	ldr	r0, [pc, #88]	; (b570 <create_frag.isra.9+0x64>)
    b516:	2100      	movs	r1, #0
    b518:	f7ff ffe4 	bl	b4e4 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    b51c:	7833      	ldrb	r3, [r6, #0]
    b51e:	2b04      	cmp	r3, #4
	frag = bt_conn_create_pdu(&frag_pool, 0);
    b520:	4605      	mov	r5, r0
    b522:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    b526:	d005      	beq.n	b534 <create_frag.isra.9+0x28>
		net_buf_unref(frag);
    b528:	f013 fe94 	bl	1f254 <net_buf_unref>
		return NULL;
    b52c:	4635      	mov	r5, r6
}
    b52e:	4628      	mov	r0, r5
    b530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    b534:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    b536:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    b53a:	4e0e      	ldr	r6, [pc, #56]	; (b574 <create_frag.isra.9+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    b53c:	4638      	mov	r0, r7
    b53e:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    b542:	f013 ff51 	bl	1f3e8 <net_buf_simple_tailroom>
    b546:	4580      	cmp	r8, r0
    b548:	d20c      	bcs.n	b564 <create_frag.isra.9+0x58>
	return bt_dev.le.mtu;
    b54a:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    b54e:	f854 1f08 	ldr.w	r1, [r4, #8]!
    b552:	4632      	mov	r2, r6
    b554:	4638      	mov	r0, r7
    b556:	f013 fee1 	bl	1f31c <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    b55a:	4631      	mov	r1, r6
    b55c:	4620      	mov	r0, r4
    b55e:	f013 ff27 	bl	1f3b0 <net_buf_simple_pull>
    b562:	e7e4      	b.n	b52e <create_frag.isra.9+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    b564:	4638      	mov	r0, r7
    b566:	f013 ff3f 	bl	1f3e8 <net_buf_simple_tailroom>
    b56a:	b286      	uxth	r6, r0
    b56c:	e7ef      	b.n	b54e <create_frag.isra.9+0x42>
    b56e:	bf00      	nop
    b570:	2000e494 	.word	0x2000e494
    b574:	2000d778 	.word	0x2000d778

0000b578 <bt_conn_process_tx>:
{
    b578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    b57a:	7b43      	ldrb	r3, [r0, #13]
{
    b57c:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    b57e:	b993      	cbnz	r3, b5a6 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b580:	f3bf 8f5b 	dmb	ish
    b584:	1d03      	adds	r3, r0, #4
    b586:	e853 2f00 	ldrex	r2, [r3]
    b58a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    b58e:	e843 1400 	strex	r4, r1, [r3]
    b592:	2c00      	cmp	r4, #0
    b594:	d1f7      	bne.n	b586 <bt_conn_process_tx+0xe>
    b596:	f3bf 8f5b 	dmb	ish
    b59a:	0652      	lsls	r2, r2, #25
    b59c:	d503      	bpl.n	b5a6 <bt_conn_process_tx+0x2e>
}
    b59e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    b5a2:	f7ff bc45 	b.w	ae30 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    b5a6:	2100      	movs	r1, #0
    b5a8:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    b5ac:	f013 fe28 	bl	1f200 <net_buf_get>
	BT_ASSERT(buf);
    b5b0:	4604      	mov	r4, r0
    b5b2:	b9d0      	cbnz	r0, b5ea <bt_conn_process_tx+0x72>
    b5b4:	4b27      	ldr	r3, [pc, #156]	; (b654 <bt_conn_process_tx+0xdc>)
    b5b6:	681b      	ldr	r3, [r3, #0]
    b5b8:	075b      	lsls	r3, r3, #29
    b5ba:	d010      	beq.n	b5de <bt_conn_process_tx+0x66>
    b5bc:	2301      	movs	r3, #1
    b5be:	f04f 0200 	mov.w	r2, #0
    b5c2:	f363 0202 	bfi	r2, r3, #0, #3
    b5c6:	4924      	ldr	r1, [pc, #144]	; (b658 <bt_conn_process_tx+0xe0>)
    b5c8:	4b24      	ldr	r3, [pc, #144]	; (b65c <bt_conn_process_tx+0xe4>)
    b5ca:	1a5b      	subs	r3, r3, r1
    b5cc:	f360 02c5 	bfi	r2, r0, #3, #3
    b5d0:	08db      	lsrs	r3, r3, #3
    b5d2:	f363 128f 	bfi	r2, r3, #6, #10
    b5d6:	4922      	ldr	r1, [pc, #136]	; (b660 <bt_conn_process_tx+0xe8>)
    b5d8:	4822      	ldr	r0, [pc, #136]	; (b664 <bt_conn_process_tx+0xec>)
    b5da:	f7f6 fd87 	bl	20ec <log_1>
    b5de:	4040      	eors	r0, r0
    b5e0:	f380 8811 	msr	BASEPRI, r0
    b5e4:	f04f 0004 	mov.w	r0, #4
    b5e8:	df02      	svc	2
	return bt_dev.le.mtu;
    b5ea:	4e1f      	ldr	r6, [pc, #124]	; (b668 <bt_conn_process_tx+0xf0>)
	if (buf->len <= conn_mtu(conn)) {
    b5ec:	8981      	ldrh	r1, [r0, #12]
    b5ee:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    b5f2:	4291      	cmp	r1, r2
    b5f4:	d807      	bhi.n	b606 <bt_conn_process_tx+0x8e>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    b5f6:	2300      	movs	r3, #0
    b5f8:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    b5fa:	4621      	mov	r1, r4
    b5fc:	4628      	mov	r0, r5
    b5fe:	f7ff fb6f 	bl	ace0 <send_frag>
	if (!send_buf(conn, buf)) {
    b602:	b140      	cbz	r0, b616 <bt_conn_process_tx+0x9e>
}
    b604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b606:	f105 070d 	add.w	r7, r5, #13
	frag = create_frag(conn, buf);
    b60a:	4601      	mov	r1, r0
    b60c:	4638      	mov	r0, r7
    b60e:	f7ff ff7d 	bl	b50c <create_frag.isra.9>
	if (!frag) {
    b612:	4601      	mov	r1, r0
    b614:	b920      	cbnz	r0, b620 <bt_conn_process_tx+0xa8>
		net_buf_unref(buf);
    b616:	4620      	mov	r0, r4
}
    b618:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    b61c:	f013 be1a 	b.w	1f254 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    b620:	2301      	movs	r3, #1
    b622:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    b624:	4628      	mov	r0, r5
    b626:	f7ff fb5b 	bl	ace0 <send_frag>
    b62a:	2800      	cmp	r0, #0
    b62c:	d0f3      	beq.n	b616 <bt_conn_process_tx+0x9e>
	while (buf->len > conn_mtu(conn)) {
    b62e:	89a2      	ldrh	r2, [r4, #12]
    b630:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    b634:	429a      	cmp	r2, r3
    b636:	d802      	bhi.n	b63e <bt_conn_process_tx+0xc6>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    b638:	2300      	movs	r3, #0
    b63a:	2201      	movs	r2, #1
    b63c:	e7dd      	b.n	b5fa <bt_conn_process_tx+0x82>
		frag = create_frag(conn, buf);
    b63e:	4621      	mov	r1, r4
    b640:	4638      	mov	r0, r7
    b642:	f7ff ff63 	bl	b50c <create_frag.isra.9>
		if (!frag) {
    b646:	4601      	mov	r1, r0
    b648:	2800      	cmp	r0, #0
    b64a:	d0e4      	beq.n	b616 <bt_conn_process_tx+0x9e>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    b64c:	2301      	movs	r3, #1
    b64e:	461a      	mov	r2, r3
    b650:	e7e8      	b.n	b624 <bt_conn_process_tx+0xac>
    b652:	bf00      	nop
    b654:	2000e204 	.word	0x2000e204
    b658:	0002ef38 	.word	0x0002ef38
    b65c:	0002ef48 	.word	0x0002ef48
    b660:	000317f3 	.word	0x000317f3
    b664:	00031593 	.word	0x00031593
    b668:	2000d778 	.word	0x2000d778

0000b66c <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    b66c:	4b03      	ldr	r3, [pc, #12]	; (b67c <bt_conn_get_id+0x10>)
    b66e:	1ac0      	subs	r0, r0, r3
    b670:	4b03      	ldr	r3, [pc, #12]	; (b680 <bt_conn_get_id+0x14>)
    b672:	1080      	asrs	r0, r0, #2
    b674:	4358      	muls	r0, r3
}
    b676:	b2c0      	uxtb	r0, r0
    b678:	4770      	bx	lr
    b67a:	bf00      	nop
    b67c:	20000bd4 	.word	0x20000bd4
    b680:	914c1bad 	.word	0x914c1bad

0000b684 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    b684:	4a15      	ldr	r2, [pc, #84]	; (b6dc <bt_conn_init+0x58>)
	parent->next = child;
    b686:	4b16      	ldr	r3, [pc, #88]	; (b6e0 <bt_conn_init+0x5c>)
    b688:	6850      	ldr	r0, [r2, #4]
    b68a:	6811      	ldr	r1, [r2, #0]
    b68c:	b510      	push	{r4, lr}
    b68e:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    b690:	bb10      	cbnz	r0, b6d8 <bt_conn_init+0x54>
    b692:	2401      	movs	r4, #1
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    b694:	4618      	mov	r0, r3
	parent->next = child;
    b696:	4913      	ldr	r1, [pc, #76]	; (b6e4 <bt_conn_init+0x60>)
    b698:	6119      	str	r1, [r3, #16]
    b69a:	3108      	adds	r1, #8
    b69c:	609b      	str	r3, [r3, #8]
    b69e:	6011      	str	r1, [r2, #0]
    b6a0:	b104      	cbz	r4, b6a4 <bt_conn_init+0x20>
    b6a2:	6050      	str	r0, [r2, #4]
	}

	bt_att_init();
    b6a4:	f002 fc0c 	bl	dec0 <bt_att_init>

	err = bt_smp_init();
    b6a8:	f005 fd24 	bl	110f4 <bt_smp_init>
	if (err) {
    b6ac:	4604      	mov	r4, r0
    b6ae:	b988      	cbnz	r0, b6d4 <bt_conn_init+0x50>
		return err;
	}

	bt_l2cap_init();
    b6b0:	f000 fc12 	bl	bed8 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    b6b4:	4b0c      	ldr	r3, [pc, #48]	; (b6e8 <bt_conn_init+0x64>)
    b6b6:	f103 0044 	add.w	r0, r3, #68	; 0x44
    b6ba:	f7ff f8bf 	bl	a83c <atomic_get>
    b6be:	b148      	cbz	r0, b6d4 <bt_conn_init+0x50>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b6c0:	1d18      	adds	r0, r3, #4
    b6c2:	f7ff f8bb 	bl	a83c <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    b6c6:	07c2      	lsls	r2, r0, #31
    b6c8:	d504      	bpl.n	b6d4 <bt_conn_init+0x50>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    b6ca:	721c      	strb	r4, [r3, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    b6cc:	2101      	movs	r1, #1
    b6ce:	4618      	mov	r0, r3
    b6d0:	f7ff fc44 	bl	af5c <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    b6d4:	4620      	mov	r0, r4
    b6d6:	bd10      	pop	{r4, pc}
Z_GENLIST_PREPEND(slist, snode)
    b6d8:	2400      	movs	r4, #0
    b6da:	e7dc      	b.n	b696 <bt_conn_init+0x12>
    b6dc:	20000c68 	.word	0x20000c68
    b6e0:	20000bbc 	.word	0x20000bbc
    b6e4:	20000bc4 	.word	0x20000bc4
    b6e8:	20000bd4 	.word	0x20000bd4

0000b6ec <sys_slist_append>:
	parent->next = child;
    b6ec:	2300      	movs	r3, #0
    b6ee:	600b      	str	r3, [r1, #0]
Z_GENLIST_APPEND(slist, snode)
    b6f0:	6843      	ldr	r3, [r0, #4]
    b6f2:	b913      	cbnz	r3, b6fa <sys_slist_append+0xe>
	list->head = node;
    b6f4:	e9c0 1100 	strd	r1, r1, [r0]
    b6f8:	4770      	bx	lr
	parent->next = child;
    b6fa:	6019      	str	r1, [r3, #0]
	list->tail = node;
    b6fc:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
    b6fe:	4770      	bx	lr

0000b700 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
    b700:	6813      	ldr	r3, [r2, #0]
    b702:	b939      	cbnz	r1, b714 <sys_slist_remove+0x14>
    b704:	6841      	ldr	r1, [r0, #4]
	list->head = node;
    b706:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    b708:	428a      	cmp	r2, r1
    b70a:	d100      	bne.n	b70e <sys_slist_remove+0xe>
	list->tail = node;
    b70c:	6043      	str	r3, [r0, #4]
	parent->next = child;
    b70e:	2300      	movs	r3, #0
    b710:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    b712:	4770      	bx	lr
	parent->next = child;
    b714:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    b716:	6843      	ldr	r3, [r0, #4]
    b718:	429a      	cmp	r2, r3
	list->tail = node;
    b71a:	bf08      	it	eq
    b71c:	6041      	streq	r1, [r0, #4]
    b71e:	e7f6      	b.n	b70e <sys_slist_remove+0xe>

0000b720 <net_buf_frags_len>:
{
    b720:	4603      	mov	r3, r0
	size_t bytes = 0;
    b722:	2000      	movs	r0, #0
	while (buf) {
    b724:	b903      	cbnz	r3, b728 <net_buf_frags_len+0x8>
	}

	return bytes;
}
    b726:	4770      	bx	lr
		bytes += buf->len;
    b728:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
    b72a:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    b72c:	4410      	add	r0, r2
    b72e:	e7f9      	b.n	b724 <net_buf_frags_len+0x4>

0000b730 <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    b730:	4b04      	ldr	r3, [pc, #16]	; (b744 <get_ident+0x14>)
    b732:	781a      	ldrb	r2, [r3, #0]
    b734:	3201      	adds	r2, #1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    b736:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    b73a:	bf08      	it	eq
    b73c:	2201      	moveq	r2, #1
    b73e:	701a      	strb	r2, [r3, #0]
	}

	return ident;
}
    b740:	7818      	ldrb	r0, [r3, #0]
    b742:	4770      	bx	lr
    b744:	20000d04 	.word	0x20000d04

0000b748 <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    b748:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    b74a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
{
    b74c:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    b74e:	b164      	cbz	r4, b76a <__l2cap_lookup_ident+0x22>
    b750:	3c08      	subs	r4, #8
    b752:	2100      	movs	r1, #0
    b754:	b14c      	cbz	r4, b76a <__l2cap_lookup_ident+0x22>
		if (chan->ident == ident) {
    b756:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    b75a:	42ab      	cmp	r3, r5
    b75c:	d107      	bne.n	b76e <__l2cap_lookup_ident+0x26>
			if (remove) {
    b75e:	b122      	cbz	r2, b76a <__l2cap_lookup_ident+0x22>
				sys_slist_remove(&conn->channels, prev,
    b760:	f104 0208 	add.w	r2, r4, #8
    b764:	303c      	adds	r0, #60	; 0x3c
    b766:	f7ff ffcb 	bl	b700 <sys_slist_remove>

		prev = &chan->node;
	}

	return NULL;
}
    b76a:	4620      	mov	r0, r4
    b76c:	bd38      	pop	{r3, r4, r5, pc}
	return node->next;
    b76e:	68a3      	ldr	r3, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    b770:	b123      	cbz	r3, b77c <__l2cap_lookup_ident+0x34>
		prev = &chan->node;
    b772:	f104 0108 	add.w	r1, r4, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    b776:	f1a3 0408 	sub.w	r4, r3, #8
    b77a:	e7eb      	b.n	b754 <__l2cap_lookup_ident+0xc>
	return NULL;
    b77c:	461c      	mov	r4, r3
    b77e:	e7f4      	b.n	b76a <__l2cap_lookup_ident+0x22>

0000b780 <l2cap_server_lookup_psm>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    b780:	4b05      	ldr	r3, [pc, #20]	; (b798 <l2cap_server_lookup_psm+0x18>)
{
    b782:	4602      	mov	r2, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    b784:	6818      	ldr	r0, [r3, #0]
    b786:	b108      	cbz	r0, b78c <l2cap_server_lookup_psm+0xc>
    b788:	3808      	subs	r0, #8
    b78a:	b900      	cbnz	r0, b78e <l2cap_server_lookup_psm+0xe>
			return server;
		}
	}

	return NULL;
}
    b78c:	4770      	bx	lr
		if (server->psm == psm) {
    b78e:	8803      	ldrh	r3, [r0, #0]
    b790:	4293      	cmp	r3, r2
    b792:	d0fb      	beq.n	b78c <l2cap_server_lookup_psm+0xc>
    b794:	6880      	ldr	r0, [r0, #8]
    b796:	e7f6      	b.n	b786 <l2cap_server_lookup_psm+0x6>
    b798:	20000d10 	.word	0x20000d10

0000b79c <l2cap_remove_tx_cid>:
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
}

static struct bt_l2cap_le_chan *l2cap_remove_tx_cid(struct bt_conn *conn,
						    u16_t cid)
{
    b79c:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    b79e:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    b7a2:	2b3f      	cmp	r3, #63	; 0x3f
    b7a4:	d815      	bhi.n	b7d2 <l2cap_remove_tx_cid+0x36>
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    b7a6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    b7a8:	b15c      	cbz	r4, b7c2 <l2cap_remove_tx_cid+0x26>
    b7aa:	3c08      	subs	r4, #8
    b7ac:	2300      	movs	r3, #0
    b7ae:	b144      	cbz	r4, b7c2 <l2cap_remove_tx_cid+0x26>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    b7b0:	8f25      	ldrh	r5, [r4, #56]	; 0x38
    b7b2:	428d      	cmp	r5, r1
    b7b4:	f104 0208 	add.w	r2, r4, #8
    b7b8:	d105      	bne.n	b7c6 <l2cap_remove_tx_cid+0x2a>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    b7ba:	4619      	mov	r1, r3
    b7bc:	303c      	adds	r0, #60	; 0x3c
    b7be:	f7ff ff9f 	bl	b700 <sys_slist_remove>

		prev = &chan->node;
	}

	return NULL;
}
    b7c2:	4620      	mov	r0, r4
    b7c4:	bd38      	pop	{r3, r4, r5, pc}
    b7c6:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    b7c8:	2c00      	cmp	r4, #0
    b7ca:	d0fa      	beq.n	b7c2 <l2cap_remove_tx_cid+0x26>
    b7cc:	3c08      	subs	r4, #8
    b7ce:	4613      	mov	r3, r2
    b7d0:	e7ed      	b.n	b7ae <l2cap_remove_tx_cid+0x12>
		return NULL;
    b7d2:	2400      	movs	r4, #0
    b7d4:	e7f5      	b.n	b7c2 <l2cap_remove_tx_cid+0x26>

0000b7d6 <l2cap_alloc_frag>:
static struct net_buf *l2cap_alloc_frag(s32_t timeout, void *user_data)
{
	struct bt_l2cap_le_chan *chan = user_data;
	struct net_buf *frag = NULL;

	frag = chan->chan.ops->alloc_buf(&chan->chan);
    b7d6:	684b      	ldr	r3, [r1, #4]
    b7d8:	4608      	mov	r0, r1
    b7da:	68db      	ldr	r3, [r3, #12]
    b7dc:	4718      	bx	r3

0000b7de <l2cap_connected>:

static void l2cap_connected(struct bt_l2cap_chan *chan)
{
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}
    b7de:	4770      	bx	lr

0000b7e0 <l2cap_chan_destroy>:
{
    b7e0:	b570      	push	{r4, r5, r6, lr}
    b7e2:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    b7e4:	3010      	adds	r0, #16
    b7e6:	f022 ff42 	bl	2e66e <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    b7ea:	f104 0678 	add.w	r6, r4, #120	; 0x78
    b7ee:	2100      	movs	r1, #0
    b7f0:	4630      	mov	r0, r6
    b7f2:	f013 fd05 	bl	1f200 <net_buf_get>
    b7f6:	4605      	mov	r5, r0
    b7f8:	b948      	cbnz	r0, b80e <l2cap_chan_destroy+0x2e>
	if (ch->_sdu) {
    b7fa:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    b7fe:	b128      	cbz	r0, b80c <l2cap_chan_destroy+0x2c>
		net_buf_unref(ch->_sdu);
    b800:	f013 fd28 	bl	1f254 <net_buf_unref>
		ch->_sdu = NULL;
    b804:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
		ch->_sdu_len = 0;
    b808:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
}
    b80c:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    b80e:	f013 fd21 	bl	1f254 <net_buf_unref>
    b812:	e7ec      	b.n	b7ee <l2cap_chan_destroy+0xe>

0000b814 <l2cap_chan_rx_init>:
	if (!chan->rx.mtu) {
    b814:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
    b816:	b913      	cbnz	r3, b81e <l2cap_chan_rx_init+0xa>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    b818:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
    b81c:	8743      	strh	r3, [r0, #58]	; 0x3a
	if (!chan->rx.init_credits) {
    b81e:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    b820:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
    b822:	b94a      	cbnz	r2, b838 <l2cap_chan_rx_init+0x24>
		if (chan->chan.ops->alloc_buf) {
    b824:	6842      	ldr	r2, [r0, #4]
    b826:	68d2      	ldr	r2, [r2, #12]
    b828:	b19a      	cbz	r2, b852 <l2cap_chan_rx_init+0x3e>
			chan->rx.init_credits = (chan->rx.mtu +
    b82a:	f203 12f7 	addw	r2, r3, #503	; 0x1f7
						 (L2CAP_MAX_LE_MPS - 1)) /
    b82e:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    b832:	fb92 f2f1 	sdiv	r2, r2, r1
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    b836:	87c2      	strh	r2, [r0, #62]	; 0x3e
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    b838:	3302      	adds	r3, #2
    b83a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
    b83e:	bfa8      	it	ge
    b840:	f44f 73fc 	movge.w	r3, #504	; 0x1f8
    b844:	8783      	strh	r3, [r0, #60]	; 0x3c
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    b846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b84a:	2100      	movs	r1, #0
    b84c:	3040      	adds	r0, #64	; 0x40
    b84e:	f022 bd0b 	b.w	2e268 <_impl_k_sem_init>
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    b852:	2213      	movs	r2, #19
    b854:	e7ef      	b.n	b836 <l2cap_chan_rx_init+0x22>

0000b856 <l2cap_chan_tx_init>:
{
    b856:	b510      	push	{r4, lr}
	(void)memset(&chan->tx, 0, sizeof(chan->tx));
    b858:	2220      	movs	r2, #32
{
    b85a:	4604      	mov	r4, r0
	(void)memset(&chan->tx, 0, sizeof(chan->tx));
    b85c:	2100      	movs	r1, #0
    b85e:	3058      	adds	r0, #88	; 0x58
    b860:	f7fb fa3f 	bl	6ce2 <memset>
    b864:	f104 0060 	add.w	r0, r4, #96	; 0x60
    b868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b86c:	2100      	movs	r1, #0
    b86e:	f022 fcfb 	bl	2e268 <_impl_k_sem_init>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    b872:	f104 0078 	add.w	r0, r4, #120	; 0x78
}
    b876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b87a:	f022 b9d7 	b.w	2dc2c <_impl_k_queue_init>
	...

0000b880 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    b880:	b510      	push	{r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    b882:	4c10      	ldr	r4, [pc, #64]	; (b8c4 <l2cap_accept+0x44>)
{
    b884:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
    b886:	6820      	ldr	r0, [r4, #0]
    b888:	b918      	cbnz	r0, b892 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    b88a:	4a0f      	ldr	r2, [pc, #60]	; (b8c8 <l2cap_accept+0x48>)
    b88c:	6062      	str	r2, [r4, #4]
		*chan = &l2cap->chan.chan;
    b88e:	600c      	str	r4, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    b890:	bd10      	pop	{r4, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    b892:	4b0e      	ldr	r3, [pc, #56]	; (b8cc <l2cap_accept+0x4c>)
    b894:	681b      	ldr	r3, [r3, #0]
    b896:	075b      	lsls	r3, r3, #29
    b898:	d010      	beq.n	b8bc <l2cap_accept+0x3c>
    b89a:	2101      	movs	r1, #1
    b89c:	f04f 0300 	mov.w	r3, #0
    b8a0:	f361 0302 	bfi	r3, r1, #0, #3
    b8a4:	480a      	ldr	r0, [pc, #40]	; (b8d0 <l2cap_accept+0x50>)
    b8a6:	490b      	ldr	r1, [pc, #44]	; (b8d4 <l2cap_accept+0x54>)
    b8a8:	1a09      	subs	r1, r1, r0
    b8aa:	08c9      	lsrs	r1, r1, #3
    b8ac:	f36f 03c5 	bfc	r3, #3, #3
    b8b0:	f361 138f 	bfi	r3, r1, #6, #10
    b8b4:	4808      	ldr	r0, [pc, #32]	; (b8d8 <l2cap_accept+0x58>)
    b8b6:	4909      	ldr	r1, [pc, #36]	; (b8dc <l2cap_accept+0x5c>)
    b8b8:	f7f6 fc2c 	bl	2114 <log_2>
	return -ENOMEM;
    b8bc:	f06f 000b 	mvn.w	r0, #11
    b8c0:	e7e6      	b.n	b890 <l2cap_accept+0x10>
    b8c2:	bf00      	nop
    b8c4:	20000c70 	.word	0x20000c70
    b8c8:	2000d8bc 	.word	0x2000d8bc
    b8cc:	2000e240 	.word	0x2000e240
    b8d0:	0002ef38 	.word	0x0002ef38
    b8d4:	0002efc0 	.word	0x0002efc0
    b8d8:	00031b66 	.word	0x00031b66
    b8dc:	00031a5d 	.word	0x00031a5d

0000b8e0 <l2cap_create_le_sig_pdu.isra.10>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    b8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8e2:	4607      	mov	r7, r0
    b8e4:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    b8e6:	2000      	movs	r0, #0
    b8e8:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    b8ea:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    b8ec:	f7ff fdfa 	bl	b4e4 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    b8f0:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    b8f2:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    b8f4:	3008      	adds	r0, #8
    b8f6:	f013 fd0b 	bl	1f310 <net_buf_simple_add>
	hdr->code = code;
    b8fa:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    b8fc:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    b8fe:	8045      	strh	r5, [r0, #2]
}
    b900:	4620      	mov	r0, r4
    b902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b904 <l2cap_disconnected>:
    b904:	4770      	bx	lr
	...

0000b908 <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    b908:	f100 0108 	add.w	r1, r0, #8
    b90c:	4801      	ldr	r0, [pc, #4]	; (b914 <bt_l2cap_le_fixed_chan_register+0xc>)
    b90e:	f7ff beed 	b.w	b6ec <sys_slist_append>
    b912:	bf00      	nop
    b914:	20000d08 	.word	0x20000d08

0000b918 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    b918:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    b91a:	b410      	push	{r4}
    b91c:	460c      	mov	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    b91e:	b113      	cbz	r3, b926 <bt_l2cap_chan_remove+0xe>
    b920:	3b08      	subs	r3, #8
    b922:	2100      	movs	r1, #0
    b924:	b90b      	cbnz	r3, b92a <bt_l2cap_chan_remove+0x12>
}
    b926:	bc10      	pop	{r4}
    b928:	4770      	bx	lr
		if (chan == ch) {
    b92a:	42a3      	cmp	r3, r4
    b92c:	f103 0208 	add.w	r2, r3, #8
    b930:	d103      	bne.n	b93a <bt_l2cap_chan_remove+0x22>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    b932:	303c      	adds	r0, #60	; 0x3c
}
    b934:	bc10      	pop	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
    b936:	f7ff bee3 	b.w	b700 <sys_slist_remove>
    b93a:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    b93c:	2b00      	cmp	r3, #0
    b93e:	d0f2      	beq.n	b926 <bt_l2cap_chan_remove+0xe>
    b940:	3b08      	subs	r3, #8
    b942:	4611      	mov	r1, r2
    b944:	e7ee      	b.n	b924 <bt_l2cap_chan_remove+0xc>

0000b946 <bt_l2cap_chan_del>:
	if (!chan->conn) {
    b946:	6803      	ldr	r3, [r0, #0]
{
    b948:	b510      	push	{r4, lr}
    b94a:	4604      	mov	r4, r0
	if (!chan->conn) {
    b94c:	b12b      	cbz	r3, b95a <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    b94e:	6843      	ldr	r3, [r0, #4]
    b950:	685b      	ldr	r3, [r3, #4]
    b952:	b103      	cbz	r3, b956 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    b954:	4798      	blx	r3
	chan->conn = NULL;
    b956:	2300      	movs	r3, #0
    b958:	6023      	str	r3, [r4, #0]
	chan->state = state;
    b95a:	2300      	movs	r3, #0
    b95c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	chan->psm = 0;
    b960:	8663      	strh	r3, [r4, #50]	; 0x32
	if (chan->destroy) {
    b962:	68e3      	ldr	r3, [r4, #12]
    b964:	b11b      	cbz	r3, b96e <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    b966:	4620      	mov	r0, r4
}
    b968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    b96c:	4718      	bx	r3
}
    b96e:	bd10      	pop	{r4, pc}

0000b970 <l2cap_rtx_timeout>:
{
    b970:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    b972:	4b12      	ldr	r3, [pc, #72]	; (b9bc <l2cap_rtx_timeout+0x4c>)
    b974:	681b      	ldr	r3, [r3, #0]
    b976:	f013 0f07 	tst.w	r3, #7
{
    b97a:	4605      	mov	r5, r0
    b97c:	f1a0 0410 	sub.w	r4, r0, #16
	BT_ERR("chan %p timeout", chan);
    b980:	d011      	beq.n	b9a6 <l2cap_rtx_timeout+0x36>
    b982:	2201      	movs	r2, #1
    b984:	f04f 0300 	mov.w	r3, #0
    b988:	f362 0302 	bfi	r3, r2, #0, #3
    b98c:	490c      	ldr	r1, [pc, #48]	; (b9c0 <l2cap_rtx_timeout+0x50>)
    b98e:	4a0d      	ldr	r2, [pc, #52]	; (b9c4 <l2cap_rtx_timeout+0x54>)
    b990:	480d      	ldr	r0, [pc, #52]	; (b9c8 <l2cap_rtx_timeout+0x58>)
    b992:	1a52      	subs	r2, r2, r1
    b994:	08d2      	lsrs	r2, r2, #3
    b996:	f36f 03c5 	bfc	r3, #3, #3
    b99a:	f362 138f 	bfi	r3, r2, #6, #10
    b99e:	490b      	ldr	r1, [pc, #44]	; (b9cc <l2cap_rtx_timeout+0x5c>)
    b9a0:	4622      	mov	r2, r4
    b9a2:	f7f6 fbb7 	bl	2114 <log_2>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    b9a6:	f855 0c10 	ldr.w	r0, [r5, #-16]
    b9aa:	4621      	mov	r1, r4
    b9ac:	f7ff ffb4 	bl	b918 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    b9b0:	4620      	mov	r0, r4
}
    b9b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    b9b6:	f7ff bfc6 	b.w	b946 <bt_l2cap_chan_del>
    b9ba:	bf00      	nop
    b9bc:	2000e240 	.word	0x2000e240
    b9c0:	0002ef38 	.word	0x0002ef38
    b9c4:	0002efc0 	.word	0x0002efc0
    b9c8:	00031de5 	.word	0x00031de5
    b9cc:	0003195d 	.word	0x0003195d

0000b9d0 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    b9d0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    b9d2:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    b9d4:	b193      	cbz	r3, b9fc <bt_l2cap_disconnected+0x2c>
    b9d6:	f1b3 0008 	subs.w	r0, r3, #8
    b9da:	d00f      	beq.n	b9fc <bt_l2cap_disconnected+0x2c>
    b9dc:	681c      	ldr	r4, [r3, #0]
    b9de:	b14c      	cbz	r4, b9f4 <bt_l2cap_disconnected+0x24>
    b9e0:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    b9e2:	f7ff ffb0 	bl	b946 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    b9e6:	b14c      	cbz	r4, b9fc <bt_l2cap_disconnected+0x2c>
    b9e8:	68a3      	ldr	r3, [r4, #8]
    b9ea:	b103      	cbz	r3, b9ee <bt_l2cap_disconnected+0x1e>
    b9ec:	3b08      	subs	r3, #8
{
    b9ee:	4620      	mov	r0, r4
    b9f0:	461c      	mov	r4, r3
    b9f2:	e7f6      	b.n	b9e2 <bt_l2cap_disconnected+0x12>
}
    b9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    b9f8:	f7ff bfa5 	b.w	b946 <bt_l2cap_chan_del>
}
    b9fc:	bd10      	pop	{r4, pc}

0000b9fe <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    b9fe:	3104      	adds	r1, #4
    ba00:	f7ff bd70 	b.w	b4e4 <bt_conn_create_pdu>

0000ba04 <bt_l2cap_send_cb>:
{
    ba04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba06:	4614      	mov	r4, r2
    ba08:	4605      	mov	r5, r0
    ba0a:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    ba0c:	f102 0008 	add.w	r0, r2, #8
    ba10:	2104      	movs	r1, #4
{
    ba12:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    ba14:	f013 fcb3 	bl	1f37e <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    ba18:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    ba1a:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    ba1c:	3904      	subs	r1, #4
    ba1e:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    ba20:	4632      	mov	r2, r6
    ba22:	4621      	mov	r1, r4
    ba24:	4628      	mov	r0, r5
}
    ba26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    ba2a:	f7ff b909 	b.w	ac40 <bt_conn_send_cb>
	...

0000ba30 <l2cap_le_conn_req>:
{
    ba30:	b538      	push	{r3, r4, r5, lr}
    ba32:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    ba34:	f7ff fe7c 	bl	b730 <get_ident>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    ba38:	220a      	movs	r2, #10
	ch->chan.ident = get_ident();
    ba3a:	4601      	mov	r1, r0
    ba3c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    ba40:	2014      	movs	r0, #20
    ba42:	f7ff ff4d 	bl	b8e0 <l2cap_create_le_sig_pdu.isra.10>
	req = net_buf_add(buf, sizeof(*req));
    ba46:	210a      	movs	r1, #10
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    ba48:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    ba4a:	3008      	adds	r0, #8
    ba4c:	f013 fc60 	bl	1f310 <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    ba50:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    ba52:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    ba54:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    ba56:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    ba58:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    ba5a:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    ba5c:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    ba5e:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    ba60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    ba62:	8103      	strh	r3, [r0, #8]
    ba64:	f104 0110 	add.w	r1, r4, #16
    ba68:	f649 4240 	movw	r2, #40000	; 0x9c40
    ba6c:	4805      	ldr	r0, [pc, #20]	; (ba84 <l2cap_le_conn_req+0x54>)
    ba6e:	f022 fe4d 	bl	2e70c <k_delayed_work_submit_to_queue>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    ba72:	6820      	ldr	r0, [r4, #0]
    ba74:	2300      	movs	r3, #0
    ba76:	462a      	mov	r2, r5
    ba78:	2105      	movs	r1, #5
    ba7a:	f7ff ffc3 	bl	ba04 <bt_l2cap_send_cb>
}
    ba7e:	2000      	movs	r0, #0
    ba80:	bd38      	pop	{r3, r4, r5, pc}
    ba82:	bf00      	nop
    ba84:	200037b0 	.word	0x200037b0

0000ba88 <bt_l2cap_encrypt_change>:
{
    ba88:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    ba8a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
{
    ba8c:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    ba8e:	b10c      	cbz	r4, ba94 <bt_l2cap_encrypt_change+0xc>
    ba90:	3c08      	subs	r4, #8
    ba92:	b904      	cbnz	r4, ba96 <bt_l2cap_encrypt_change+0xe>
}
    ba94:	bd38      	pop	{r3, r4, r5, pc}
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    ba96:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    ba9a:	2b01      	cmp	r3, #1
    ba9c:	d10a      	bne.n	bab4 <bt_l2cap_encrypt_change+0x2c>
    ba9e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    baa2:	b93b      	cbnz	r3, bab4 <bt_l2cap_encrypt_change+0x2c>
	if (status) {
    baa4:	b175      	cbz	r5, bac4 <bt_l2cap_encrypt_change+0x3c>
		bt_l2cap_chan_remove(chan->conn, chan);
    baa6:	6820      	ldr	r0, [r4, #0]
    baa8:	4621      	mov	r1, r4
    baaa:	f7ff ff35 	bl	b918 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    baae:	4620      	mov	r0, r4
    bab0:	f7ff ff49 	bl	b946 <bt_l2cap_chan_del>
		if (chan->ops->encrypt_change) {
    bab4:	6863      	ldr	r3, [r4, #4]
    bab6:	689b      	ldr	r3, [r3, #8]
    bab8:	b113      	cbz	r3, bac0 <bt_l2cap_encrypt_change+0x38>
			chan->ops->encrypt_change(chan, hci_status);
    baba:	4629      	mov	r1, r5
    babc:	4620      	mov	r0, r4
    babe:	4798      	blx	r3
    bac0:	68a4      	ldr	r4, [r4, #8]
    bac2:	e7e4      	b.n	ba8e <bt_l2cap_encrypt_change+0x6>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    bac4:	4620      	mov	r0, r4
    bac6:	f7ff ffb3 	bl	ba30 <l2cap_le_conn_req>
    baca:	e7f3      	b.n	bab4 <bt_l2cap_encrypt_change+0x2c>

0000bacc <l2cap_send_reject>:
{
    bacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bad0:	f89d 7020 	ldrb.w	r7, [sp, #32]
    bad4:	4691      	mov	r9, r2
    bad6:	4680      	mov	r8, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    bad8:	1cba      	adds	r2, r7, #2
    bada:	2001      	movs	r0, #1
{
    badc:	461e      	mov	r6, r3
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    bade:	f7ff feff 	bl	b8e0 <l2cap_create_le_sig_pdu.isra.10>
	rej = net_buf_add(buf, sizeof(*rej));
    bae2:	f100 0508 	add.w	r5, r0, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    bae6:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    bae8:	2102      	movs	r1, #2
    baea:	4628      	mov	r0, r5
    baec:	f013 fc10 	bl	1f310 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    baf0:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    baf4:	b126      	cbz	r6, bb00 <l2cap_send_reject+0x34>
		net_buf_add_mem(buf, data, data_len);
    baf6:	463a      	mov	r2, r7
    baf8:	4631      	mov	r1, r6
    bafa:	4628      	mov	r0, r5
    bafc:	f013 fc0e 	bl	1f31c <net_buf_simple_add_mem>
    bb00:	4622      	mov	r2, r4
    bb02:	4640      	mov	r0, r8
    bb04:	2300      	movs	r3, #0
    bb06:	2105      	movs	r1, #5
}
    bb08:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb0c:	f7ff bf7a 	b.w	ba04 <bt_l2cap_send_cb>

0000bb10 <l2cap_chan_le_send>:
{
    bb10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb14:	4607      	mov	r7, r0
    bb16:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    bb18:	3060      	adds	r0, #96	; 0x60
    bb1a:	2100      	movs	r1, #0
    bb1c:	4616      	mov	r6, r2
    bb1e:	f022 fbd3 	bl	2e2c8 <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    bb22:	2800      	cmp	r0, #0
    bb24:	d169      	bne.n	bbfa <l2cap_chan_le_send+0xea>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    bb26:	89a3      	ldrh	r3, [r4, #12]
    bb28:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
    bb2c:	4433      	add	r3, r6
    bb2e:	4293      	cmp	r3, r2
    bb30:	f104 0908 	add.w	r9, r4, #8
    bb34:	d820      	bhi.n	bb78 <l2cap_chan_le_send+0x68>
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    bb36:	4648      	mov	r0, r9
    bb38:	f013 fc52 	bl	1f3e0 <net_buf_simple_headroom>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    bb3c:	f106 0308 	add.w	r3, r6, #8
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    bb40:	b29b      	uxth	r3, r3
    bb42:	4298      	cmp	r0, r3
    bb44:	d318      	bcc.n	bb78 <l2cap_chan_le_send+0x68>
    bb46:	6823      	ldr	r3, [r4, #0]
    bb48:	b9b3      	cbnz	r3, bb78 <l2cap_chan_le_send+0x68>
		if (sdu_hdr_len) {
    bb4a:	b136      	cbz	r6, bb5a <l2cap_chan_le_send+0x4a>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    bb4c:	4620      	mov	r0, r4
    bb4e:	f7ff fde7 	bl	b720 <net_buf_frags_len>
    bb52:	b281      	uxth	r1, r0
    bb54:	4648      	mov	r0, r9
    bb56:	f013 fc1a 	bl	1f38e <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    bb5a:	4620      	mov	r0, r4
    bb5c:	f013 fba8 	bl	1f2b0 <net_buf_ref>
    bb60:	4605      	mov	r5, r0
	if (!ch->chan.conn) {
    bb62:	6838      	ldr	r0, [r7, #0]
    bb64:	2800      	cmp	r0, #0
    bb66:	d13f      	bne.n	bbe8 <l2cap_chan_le_send+0xd8>
		net_buf_unref(buf);
    bb68:	4628      	mov	r0, r5
    bb6a:	f013 fb73 	bl	1f254 <net_buf_unref>
		return -ECONNRESET;
    bb6e:	f06f 0635 	mvn.w	r6, #53	; 0x35
}
    bb72:	4630      	mov	r0, r6
    bb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    bb78:	79a0      	ldrb	r0, [r4, #6]
    bb7a:	f013 faa7 	bl	1f0cc <net_buf_pool_get>
	seg = net_buf_alloc(pool, K_NO_WAIT);
    bb7e:	2100      	movs	r1, #0
    bb80:	f013 fb38 	bl	1f1f4 <net_buf_alloc_fixed>
	if (seg) {
    bb84:	4605      	mov	r5, r0
    bb86:	b340      	cbz	r0, bbda <l2cap_chan_le_send+0xca>
		net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    bb88:	2108      	movs	r1, #8
    bb8a:	4408      	add	r0, r1
    bb8c:	f013 fb51 	bl	1f232 <net_buf_simple_reserve>
    bb90:	f105 0808 	add.w	r8, r5, #8
	if (sdu_hdr_len) {
    bb94:	b136      	cbz	r6, bba4 <l2cap_chan_le_send+0x94>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    bb96:	4620      	mov	r0, r4
    bb98:	f7ff fdc2 	bl	b720 <net_buf_frags_len>
    bb9c:	b281      	uxth	r1, r0
    bb9e:	4640      	mov	r0, r8
    bba0:	f013 fbcd 	bl	1f33e <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    bba4:	4640      	mov	r0, r8
    bba6:	f013 fc1f 	bl	1f3e8 <net_buf_simple_tailroom>
    bbaa:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
    bbae:	1b89      	subs	r1, r1, r6
    bbb0:	4288      	cmp	r0, r1
    bbb2:	d217      	bcs.n	bbe4 <l2cap_chan_le_send+0xd4>
    bbb4:	4640      	mov	r0, r8
    bbb6:	f013 fc17 	bl	1f3e8 <net_buf_simple_tailroom>
    bbba:	b280      	uxth	r0, r0
	len = min(buf->len, len);
    bbbc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
	net_buf_add_mem(seg, buf->data, len);
    bbc0:	68a1      	ldr	r1, [r4, #8]
    bbc2:	4582      	cmp	sl, r0
    bbc4:	bf28      	it	cs
    bbc6:	4682      	movcs	sl, r0
    bbc8:	4652      	mov	r2, sl
    bbca:	4640      	mov	r0, r8
    bbcc:	f013 fba6 	bl	1f31c <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    bbd0:	4651      	mov	r1, sl
    bbd2:	4648      	mov	r0, r9
    bbd4:	f013 fbec 	bl	1f3b0 <net_buf_simple_pull>
    bbd8:	e7c3      	b.n	bb62 <l2cap_chan_le_send+0x52>
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    bbda:	2104      	movs	r1, #4
    bbdc:	f7ff fc82 	bl	b4e4 <bt_conn_create_pdu>
    bbe0:	4605      	mov	r5, r0
    bbe2:	e7d5      	b.n	bb90 <l2cap_chan_le_send+0x80>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    bbe4:	b288      	uxth	r0, r1
    bbe6:	e7e9      	b.n	bbbc <l2cap_chan_le_send+0xac>
	len = buf->len - sdu_hdr_len;
    bbe8:	89ab      	ldrh	r3, [r5, #12]
    bbea:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
    bbee:	1b9e      	subs	r6, r3, r6
    bbf0:	462a      	mov	r2, r5
    bbf2:	2300      	movs	r3, #0
    bbf4:	f7ff ff06 	bl	ba04 <bt_l2cap_send_cb>
    bbf8:	e7bb      	b.n	bb72 <l2cap_chan_le_send+0x62>
		return -EAGAIN;
    bbfa:	f06f 060a 	mvn.w	r6, #10
    bbfe:	e7b8      	b.n	bb72 <l2cap_chan_le_send+0x62>

0000bc00 <l2cap_chan_le_send_sdu>:
{
    bc00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	total_len = net_buf_frags_len(*buf) + sent;
    bc04:	680c      	ldr	r4, [r1, #0]
{
    bc06:	9201      	str	r2, [sp, #4]
    bc08:	4606      	mov	r6, r0
	total_len = net_buf_frags_len(*buf) + sent;
    bc0a:	4620      	mov	r0, r4
{
    bc0c:	460f      	mov	r7, r1
	total_len = net_buf_frags_len(*buf) + sent;
    bc0e:	f7ff fd87 	bl	b720 <net_buf_frags_len>
    bc12:	9b01      	ldr	r3, [sp, #4]
	if (total_len > ch->tx.mtu) {
    bc14:	f8b6 205a 	ldrh.w	r2, [r6, #90]	; 0x5a
	total_len = net_buf_frags_len(*buf) + sent;
    bc18:	eb03 0800 	add.w	r8, r3, r0
	if (total_len > ch->tx.mtu) {
    bc1c:	4542      	cmp	r2, r8
    bc1e:	db36      	blt.n	bc8e <l2cap_chan_le_send_sdu+0x8e>
	if (!frag->len && frag->frags) {
    bc20:	89a2      	ldrh	r2, [r4, #12]
    bc22:	b91a      	cbnz	r2, bc2c <l2cap_chan_le_send_sdu+0x2c>
    bc24:	6822      	ldr	r2, [r4, #0]
    bc26:	2a00      	cmp	r2, #0
    bc28:	bf18      	it	ne
    bc2a:	4614      	movne	r4, r2
	if (!sent) {
    bc2c:	b9b3      	cbnz	r3, bc5c <l2cap_chan_le_send_sdu+0x5c>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    bc2e:	2202      	movs	r2, #2
    bc30:	4621      	mov	r1, r4
    bc32:	4630      	mov	r0, r6
    bc34:	f7ff ff6c 	bl	bb10 <l2cap_chan_le_send>
		if (ret < 0) {
    bc38:	1e05      	subs	r5, r0, #0
    bc3a:	da0e      	bge.n	bc5a <l2cap_chan_le_send_sdu+0x5a>
			if (ret == -EAGAIN) {
    bc3c:	f115 0f0b 	cmn.w	r5, #11
    bc40:	d106      	bne.n	bc50 <l2cap_chan_le_send_sdu+0x50>
				memcpy(net_buf_user_data(frag), &sent,
    bc42:	2204      	movs	r2, #4
    bc44:	eb0d 0102 	add.w	r1, sp, r2
    bc48:	f104 0014 	add.w	r0, r4, #20
    bc4c:	f7fb f81c 	bl	6c88 <memcpy>
			*buf = frag;
    bc50:	603c      	str	r4, [r7, #0]
}
    bc52:	4628      	mov	r0, r5
    bc54:	b002      	add	sp, #8
    bc56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sent = ret;
    bc5a:	9501      	str	r5, [sp, #4]
	if (!frag->len && frag->frags) {
    bc5c:	2500      	movs	r5, #0
	for (ret = 0; sent < total_len; sent += ret) {
    bc5e:	9b01      	ldr	r3, [sp, #4]
    bc60:	4543      	cmp	r3, r8
    bc62:	db03      	blt.n	bc6c <l2cap_chan_le_send_sdu+0x6c>
	net_buf_unref(frag);
    bc64:	4620      	mov	r0, r4
    bc66:	f013 faf5 	bl	1f254 <net_buf_unref>
	return ret;
    bc6a:	e7f2      	b.n	bc52 <l2cap_chan_le_send_sdu+0x52>
		if (!frag->len) {
    bc6c:	89a0      	ldrh	r0, [r4, #12]
    bc6e:	b918      	cbnz	r0, bc78 <l2cap_chan_le_send_sdu+0x78>
			frag = net_buf_frag_del(NULL, frag);
    bc70:	4621      	mov	r1, r4
    bc72:	f013 fb41 	bl	1f2f8 <net_buf_frag_del>
    bc76:	4604      	mov	r4, r0
		ret = l2cap_chan_le_send(ch, frag, 0);
    bc78:	2200      	movs	r2, #0
    bc7a:	4621      	mov	r1, r4
    bc7c:	4630      	mov	r0, r6
    bc7e:	f7ff ff47 	bl	bb10 <l2cap_chan_le_send>
		if (ret < 0) {
    bc82:	1e05      	subs	r5, r0, #0
    bc84:	dbda      	blt.n	bc3c <l2cap_chan_le_send_sdu+0x3c>
	for (ret = 0; sent < total_len; sent += ret) {
    bc86:	9b01      	ldr	r3, [sp, #4]
    bc88:	442b      	add	r3, r5
    bc8a:	9301      	str	r3, [sp, #4]
    bc8c:	e7e7      	b.n	bc5e <l2cap_chan_le_send_sdu+0x5e>
		return -EMSGSIZE;
    bc8e:	f06f 0523 	mvn.w	r5, #35	; 0x23
    bc92:	e7de      	b.n	bc52 <l2cap_chan_le_send_sdu+0x52>

0000bc94 <l2cap_chan_send_credits.isra.13>:
static void l2cap_chan_send_credits(struct bt_l2cap_le_chan *chan,
    bc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc98:	8fc6      	ldrh	r6, [r0, #62]	; 0x3e
    bc9a:	428e      	cmp	r6, r1
    bc9c:	bf28      	it	cs
    bc9e:	460e      	movcs	r6, r1
    bca0:	4605      	mov	r5, r0
	if (credits > chan->rx.init_credits) {
    bca2:	4634      	mov	r4, r6
	while (credits--) {
    bca4:	f64f 77ff 	movw	r7, #65535	; 0xffff
		k_sem_give(&chan->rx.credits);
    bca8:	f100 0840 	add.w	r8, r0, #64	; 0x40
	while (credits--) {
    bcac:	3c01      	subs	r4, #1
    bcae:	b2a4      	uxth	r4, r4
    bcb0:	42bc      	cmp	r4, r7
    bcb2:	d116      	bne.n	bce2 <l2cap_chan_send_credits.isra.13+0x4e>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    bcb4:	f7ff fd3c 	bl	b730 <get_ident>
    bcb8:	2204      	movs	r2, #4
    bcba:	4601      	mov	r1, r0
    bcbc:	2016      	movs	r0, #22
    bcbe:	f7ff fe0f 	bl	b8e0 <l2cap_create_le_sig_pdu.isra.10>
	ev = net_buf_add(buf, sizeof(*ev));
    bcc2:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    bcc4:	4604      	mov	r4, r0
	ev = net_buf_add(buf, sizeof(*ev));
    bcc6:	3008      	adds	r0, #8
    bcc8:	f013 fb22 	bl	1f310 <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    bccc:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
    bcce:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    bcd0:	8046      	strh	r6, [r0, #2]
    bcd2:	4622      	mov	r2, r4
    bcd4:	6828      	ldr	r0, [r5, #0]
    bcd6:	2300      	movs	r3, #0
    bcd8:	2105      	movs	r1, #5
}
    bcda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bcde:	f7ff be91 	b.w	ba04 <bt_l2cap_send_cb>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    bce2:	4640      	mov	r0, r8
    bce4:	f022 fac9 	bl	2e27a <_impl_k_sem_give>
    bce8:	e7e0      	b.n	bcac <l2cap_chan_send_credits.isra.13+0x18>

0000bcea <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    bcea:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    bcec:	b108      	cbz	r0, bcf2 <bt_l2cap_le_lookup_tx_cid+0x8>
    bcee:	3808      	subs	r0, #8
    bcf0:	b900      	cbnz	r0, bcf4 <bt_l2cap_le_lookup_tx_cid+0xa>
}
    bcf2:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    bcf4:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    bcf8:	428b      	cmp	r3, r1
    bcfa:	d0fa      	beq.n	bcf2 <bt_l2cap_le_lookup_tx_cid+0x8>
    bcfc:	6880      	ldr	r0, [r0, #8]
    bcfe:	e7f5      	b.n	bcec <bt_l2cap_le_lookup_tx_cid+0x2>

0000bd00 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    bd00:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    bd02:	b108      	cbz	r0, bd08 <bt_l2cap_le_lookup_rx_cid+0x8>
    bd04:	3808      	subs	r0, #8
    bd06:	b900      	cbnz	r0, bd0a <bt_l2cap_le_lookup_rx_cid+0xa>
}
    bd08:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    bd0a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    bd0c:	428b      	cmp	r3, r1
    bd0e:	d0fb      	beq.n	bd08 <bt_l2cap_le_lookup_rx_cid+0x8>
    bd10:	6880      	ldr	r0, [r0, #8]
    bd12:	e7f6      	b.n	bd02 <bt_l2cap_le_lookup_rx_cid+0x2>

0000bd14 <l2cap_chan_add>:
{
    bd14:	b570      	push	{r4, r5, r6, lr}
    bd16:	4605      	mov	r5, r0
    bd18:	4616      	mov	r6, r2
	if (ch && ch->rx.cid > 0) {
    bd1a:	460c      	mov	r4, r1
    bd1c:	b109      	cbz	r1, bd22 <l2cap_chan_add+0xe>
    bd1e:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
    bd20:	b93b      	cbnz	r3, bd32 <l2cap_chan_add+0x1e>
    bd22:	2240      	movs	r2, #64	; 0x40
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    bd24:	b1dc      	cbz	r4, bd5e <l2cap_chan_add+0x4a>
    bd26:	4611      	mov	r1, r2
    bd28:	4628      	mov	r0, r5
    bd2a:	f7ff ffe9 	bl	bd00 <bt_l2cap_le_lookup_rx_cid>
    bd2e:	b9b0      	cbnz	r0, bd5e <l2cap_chan_add+0x4a>
			ch->rx.cid = cid;
    bd30:	8722      	strh	r2, [r4, #56]	; 0x38
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    bd32:	4919      	ldr	r1, [pc, #100]	; (bd98 <l2cap_chan_add+0x84>)
    bd34:	f104 0010 	add.w	r0, r4, #16
    bd38:	f022 fc90 	bl	2e65c <k_delayed_work_init>
	sys_slist_append(&conn->channels, &chan->node);
    bd3c:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    bd40:	f104 0108 	add.w	r1, r4, #8
    bd44:	f7ff fcd2 	bl	b6ec <sys_slist_append>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    bd48:	8f23      	ldrh	r3, [r4, #56]	; 0x38
	chan->conn = conn;
    bd4a:	6025      	str	r5, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    bd4c:	3b40      	subs	r3, #64	; 0x40
    bd4e:	2b3f      	cmp	r3, #63	; 0x3f
	chan->destroy = destroy;
    bd50:	60e6      	str	r6, [r4, #12]
    bd52:	f04f 0001 	mov.w	r0, #1
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    bd56:	d81d      	bhi.n	bd94 <l2cap_chan_add+0x80>
	chan->state = state;
    bd58:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    bd5c:	e01a      	b.n	bd94 <l2cap_chan_add+0x80>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    bd5e:	3201      	adds	r2, #1
    bd60:	b292      	uxth	r2, r2
    bd62:	2a80      	cmp	r2, #128	; 0x80
    bd64:	d1de      	bne.n	bd24 <l2cap_chan_add+0x10>
		BT_ERR("Unable to allocate L2CAP CID");
    bd66:	4b0d      	ldr	r3, [pc, #52]	; (bd9c <l2cap_chan_add+0x88>)
    bd68:	6818      	ldr	r0, [r3, #0]
    bd6a:	f010 0007 	ands.w	r0, r0, #7
    bd6e:	d011      	beq.n	bd94 <l2cap_chan_add+0x80>
    bd70:	2301      	movs	r3, #1
    bd72:	f04f 0200 	mov.w	r2, #0
    bd76:	f363 0202 	bfi	r2, r3, #0, #3
    bd7a:	4909      	ldr	r1, [pc, #36]	; (bda0 <l2cap_chan_add+0x8c>)
    bd7c:	4b09      	ldr	r3, [pc, #36]	; (bda4 <l2cap_chan_add+0x90>)
    bd7e:	480a      	ldr	r0, [pc, #40]	; (bda8 <l2cap_chan_add+0x94>)
    bd80:	1a5b      	subs	r3, r3, r1
    bd82:	08db      	lsrs	r3, r3, #3
    bd84:	f36f 02c5 	bfc	r2, #3, #3
    bd88:	f363 128f 	bfi	r2, r3, #6, #10
    bd8c:	4907      	ldr	r1, [pc, #28]	; (bdac <l2cap_chan_add+0x98>)
    bd8e:	f7f6 f9ad 	bl	20ec <log_1>
    bd92:	2000      	movs	r0, #0
}
    bd94:	bd70      	pop	{r4, r5, r6, pc}
    bd96:	bf00      	nop
    bd98:	0000b971 	.word	0x0000b971
    bd9c:	2000e240 	.word	0x2000e240
    bda0:	0002ef38 	.word	0x0002ef38
    bda4:	0002efc0 	.word	0x0002efc0
    bda8:	00031b91 	.word	0x00031b91
    bdac:	0003196f 	.word	0x0003196f

0000bdb0 <bt_l2cap_connected>:
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    bdb0:	4b10      	ldr	r3, [pc, #64]	; (bdf4 <bt_l2cap_connected+0x44>)
{
    bdb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    bdb4:	681c      	ldr	r4, [r3, #0]
{
    bdb6:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    bdb8:	b10c      	cbz	r4, bdbe <bt_l2cap_connected+0xe>
    bdba:	3c08      	subs	r4, #8
    bdbc:	b90c      	cbnz	r4, bdc2 <bt_l2cap_connected+0x12>
}
    bdbe:	b003      	add	sp, #12
    bdc0:	bd30      	pop	{r4, r5, pc}
		if (fchan->accept(conn, &chan) < 0) {
    bdc2:	6863      	ldr	r3, [r4, #4]
    bdc4:	a901      	add	r1, sp, #4
    bdc6:	4628      	mov	r0, r5
    bdc8:	4798      	blx	r3
    bdca:	2800      	cmp	r0, #0
    bdcc:	db0f      	blt.n	bdee <bt_l2cap_connected+0x3e>
		ch = BT_L2CAP_LE_CHAN(chan);
    bdce:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    bdd0:	8823      	ldrh	r3, [r4, #0]
    bdd2:	870b      	strh	r3, [r1, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    bdd4:	f8a1 3058 	strh.w	r3, [r1, #88]	; 0x58
		if (!l2cap_chan_add(conn, chan, NULL)) {
    bdd8:	2200      	movs	r2, #0
    bdda:	4628      	mov	r0, r5
    bddc:	f7ff ff9a 	bl	bd14 <l2cap_chan_add>
    bde0:	2800      	cmp	r0, #0
    bde2:	d0ec      	beq.n	bdbe <bt_l2cap_connected+0xe>
		if (chan->ops->connected) {
    bde4:	9801      	ldr	r0, [sp, #4]
    bde6:	6843      	ldr	r3, [r0, #4]
    bde8:	681b      	ldr	r3, [r3, #0]
    bdea:	b103      	cbz	r3, bdee <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
    bdec:	4798      	blx	r3
    bdee:	68a4      	ldr	r4, [r4, #8]
    bdf0:	e7e2      	b.n	bdb8 <bt_l2cap_connected+0x8>
    bdf2:	bf00      	nop
    bdf4:	20000d08 	.word	0x20000d08

0000bdf8 <bt_l2cap_server_register>:
	if (!server->accept) {
    bdf8:	6843      	ldr	r3, [r0, #4]
{
    bdfa:	b510      	push	{r4, lr}
    bdfc:	4601      	mov	r1, r0
	if (!server->accept) {
    bdfe:	b913      	cbnz	r3, be06 <bt_l2cap_server_register+0xe>
		return -EINVAL;
    be00:	f06f 0015 	mvn.w	r0, #21
}
    be04:	bd10      	pop	{r4, pc}
	if (server->psm) {
    be06:	8800      	ldrh	r0, [r0, #0]
    be08:	b140      	cbz	r0, be1c <bt_l2cap_server_register+0x24>
		if (server->psm < L2CAP_LE_PSM_FIXED_START ||
    be0a:	1e43      	subs	r3, r0, #1
    be0c:	2bfe      	cmp	r3, #254	; 0xfe
    be0e:	d8f7      	bhi.n	be00 <bt_l2cap_server_register+0x8>
		if (l2cap_server_lookup_psm(server->psm)) {
    be10:	f7ff fcb6 	bl	b780 <l2cap_server_lookup_psm>
    be14:	b338      	cbz	r0, be66 <bt_l2cap_server_register+0x6e>
			return -EADDRINUSE;
    be16:	f06f 002f 	mvn.w	r0, #47	; 0x2f
    be1a:	e7f3      	b.n	be04 <bt_l2cap_server_register+0xc>
		for (psm = L2CAP_LE_PSM_DYN_START;
    be1c:	2480      	movs	r4, #128	; 0x80
			if (!l2cap_server_lookup_psm(psm)) {
    be1e:	4620      	mov	r0, r4
    be20:	f7ff fcae 	bl	b780 <l2cap_server_lookup_psm>
    be24:	b1f0      	cbz	r0, be64 <bt_l2cap_server_register+0x6c>
		     psm <= L2CAP_LE_PSM_DYN_END; psm++) {
    be26:	3401      	adds	r4, #1
    be28:	b2a4      	uxth	r4, r4
		for (psm = L2CAP_LE_PSM_DYN_START;
    be2a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    be2e:	d1f6      	bne.n	be1e <bt_l2cap_server_register+0x26>
			BT_WARN("No free dynamic PSMs available");
    be30:	4b13      	ldr	r3, [pc, #76]	; (be80 <bt_l2cap_server_register+0x88>)
    be32:	681b      	ldr	r3, [r3, #0]
    be34:	f003 0307 	and.w	r3, r3, #7
    be38:	2b01      	cmp	r3, #1
    be3a:	d910      	bls.n	be5e <bt_l2cap_server_register+0x66>
    be3c:	2302      	movs	r3, #2
    be3e:	f04f 0200 	mov.w	r2, #0
    be42:	f363 0202 	bfi	r2, r3, #0, #3
    be46:	490f      	ldr	r1, [pc, #60]	; (be84 <bt_l2cap_server_register+0x8c>)
    be48:	4b0f      	ldr	r3, [pc, #60]	; (be88 <bt_l2cap_server_register+0x90>)
    be4a:	4810      	ldr	r0, [pc, #64]	; (be8c <bt_l2cap_server_register+0x94>)
    be4c:	1a5b      	subs	r3, r3, r1
    be4e:	f36f 02c5 	bfc	r2, #3, #3
    be52:	08db      	lsrs	r3, r3, #3
    be54:	f363 128f 	bfi	r2, r3, #6, #10
    be58:	490d      	ldr	r1, [pc, #52]	; (be90 <bt_l2cap_server_register+0x98>)
    be5a:	f7f6 f947 	bl	20ec <log_1>
			return -EADDRNOTAVAIL;
    be5e:	f06f 0030 	mvn.w	r0, #48	; 0x30
    be62:	e7cf      	b.n	be04 <bt_l2cap_server_register+0xc>
		server->psm = psm;
    be64:	800c      	strh	r4, [r1, #0]
	if (server->sec_level > BT_SECURITY_FIPS) {
    be66:	788b      	ldrb	r3, [r1, #2]
    be68:	2b04      	cmp	r3, #4
    be6a:	d8c9      	bhi.n	be00 <bt_l2cap_server_register+0x8>
	} else if (server->sec_level < BT_SECURITY_LOW) {
    be6c:	b90b      	cbnz	r3, be72 <bt_l2cap_server_register+0x7a>
		server->sec_level = BT_SECURITY_LOW;
    be6e:	2301      	movs	r3, #1
    be70:	708b      	strb	r3, [r1, #2]
	sys_slist_append(&servers, &server->node);
    be72:	4808      	ldr	r0, [pc, #32]	; (be94 <bt_l2cap_server_register+0x9c>)
    be74:	3108      	adds	r1, #8
    be76:	f7ff fc39 	bl	b6ec <sys_slist_append>
	return 0;
    be7a:	2000      	movs	r0, #0
    be7c:	e7c2      	b.n	be04 <bt_l2cap_server_register+0xc>
    be7e:	bf00      	nop
    be80:	2000e240 	.word	0x2000e240
    be84:	0002ef38 	.word	0x0002ef38
    be88:	0002efc0 	.word	0x0002efc0
    be8c:	00031b43 	.word	0x00031b43
    be90:	000319a9 	.word	0x000319a9
    be94:	20000d10 	.word	0x20000d10

0000be98 <bt_l2cap_update_conn_param>:
{
    be98:	b570      	push	{r4, r5, r6, lr}
    be9a:	460c      	mov	r4, r1
    be9c:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    be9e:	f7ff fc47 	bl	b730 <get_ident>
    bea2:	2208      	movs	r2, #8
    bea4:	4601      	mov	r1, r0
    bea6:	2012      	movs	r0, #18
    bea8:	f7ff fd1a 	bl	b8e0 <l2cap_create_le_sig_pdu.isra.10>
	req = net_buf_add(buf, sizeof(*req));
    beac:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    beae:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    beb0:	4408      	add	r0, r1
    beb2:	f013 fa2d 	bl	1f310 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    beb6:	8823      	ldrh	r3, [r4, #0]
    beb8:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    beba:	8863      	ldrh	r3, [r4, #2]
    bebc:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    bebe:	88a3      	ldrh	r3, [r4, #4]
    bec0:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    bec2:	88e3      	ldrh	r3, [r4, #6]
    bec4:	80c3      	strh	r3, [r0, #6]
    bec6:	462a      	mov	r2, r5
    bec8:	4630      	mov	r0, r6
    beca:	2300      	movs	r3, #0
    becc:	2105      	movs	r1, #5
    bece:	f7ff fd99 	bl	ba04 <bt_l2cap_send_cb>
}
    bed2:	2000      	movs	r0, #0
    bed4:	bd70      	pop	{r4, r5, r6, pc}
	...

0000bed8 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    bed8:	4801      	ldr	r0, [pc, #4]	; (bee0 <bt_l2cap_init+0x8>)
    beda:	f7ff bd15 	b.w	b908 <bt_l2cap_le_fixed_chan_register>
    bede:	bf00      	nop
    bee0:	2000d8b0 	.word	0x2000d8b0

0000bee4 <bt_l2cap_chan_connect>:
	return l2cap_le_conn_req(ch);
}

int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
    bee4:	b570      	push	{r4, r5, r6, lr}
    bee6:	460c      	mov	r4, r1
    bee8:	4616      	mov	r6, r2
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    beea:	4605      	mov	r5, r0
    beec:	b318      	cbz	r0, bf36 <bt_l2cap_chan_connect+0x52>
    beee:	7b43      	ldrb	r3, [r0, #13]
    bef0:	2b04      	cmp	r3, #4
    bef2:	d120      	bne.n	bf36 <bt_l2cap_chan_connect+0x52>
		return -ENOTCONN;
	}

	if (!chan) {
    bef4:	b911      	cbnz	r1, befc <bt_l2cap_chan_connect+0x18>
		return -EINVAL;
    bef6:	f06f 0015 	mvn.w	r0, #21
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
		chan->required_sec_level = BT_SECURITY_LOW;
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
}
    befa:	bd70      	pop	{r4, r5, r6, pc}
	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    befc:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
    bf00:	2b04      	cmp	r3, #4
    bf02:	d8f8      	bhi.n	bef6 <bt_l2cap_chan_connect+0x12>
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    bf04:	b913      	cbnz	r3, bf0c <bt_l2cap_chan_connect+0x28>
		chan->required_sec_level = BT_SECURITY_LOW;
    bf06:	2301      	movs	r3, #1
    bf08:	f881 3035 	strb.w	r3, [r1, #53]	; 0x35
	if (psm < L2CAP_LE_PSM_FIXED_START || psm > L2CAP_LE_PSM_DYN_END) {
    bf0c:	1e73      	subs	r3, r6, #1
    bf0e:	2bfe      	cmp	r3, #254	; 0xfe
    bf10:	d8f1      	bhi.n	bef6 <bt_l2cap_chan_connect+0x12>
	l2cap_chan_tx_init(ch);
    bf12:	4620      	mov	r0, r4
    bf14:	f7ff fc9f 	bl	b856 <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    bf18:	4620      	mov	r0, r4
    bf1a:	f7ff fc7b 	bl	b814 <l2cap_chan_rx_init>
	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    bf1e:	4a09      	ldr	r2, [pc, #36]	; (bf44 <bt_l2cap_chan_connect+0x60>)
    bf20:	4621      	mov	r1, r4
    bf22:	4628      	mov	r0, r5
    bf24:	f7ff fef6 	bl	bd14 <l2cap_chan_add>
    bf28:	b140      	cbz	r0, bf3c <bt_l2cap_chan_connect+0x58>
	ch->chan.psm = psm;
    bf2a:	8666      	strh	r6, [r4, #50]	; 0x32
	return l2cap_le_conn_req(ch);
    bf2c:	4620      	mov	r0, r4
}
    bf2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return l2cap_le_conn_req(ch);
    bf32:	f7ff bd7d 	b.w	ba30 <l2cap_le_conn_req>
		return -ENOTCONN;
    bf36:	f06f 0038 	mvn.w	r0, #56	; 0x38
    bf3a:	e7de      	b.n	befa <bt_l2cap_chan_connect+0x16>
		return -ENOMEM;
    bf3c:	f06f 000b 	mvn.w	r0, #11
    bf40:	e7db      	b.n	befa <bt_l2cap_chan_connect+0x16>
    bf42:	bf00      	nop
    bf44:	0000b7e1 	.word	0x0000b7e1

0000bf48 <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    bf48:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    bf4a:	6803      	ldr	r3, [r0, #0]
{
    bf4c:	4604      	mov	r4, r0
	if (!conn) {
    bf4e:	b323      	cbz	r3, bf9a <bt_l2cap_chan_disconnect+0x52>
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    bf50:	f7ff fbee 	bl	b730 <get_ident>

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    bf54:	2204      	movs	r2, #4
	ch->chan.ident = get_ident();
    bf56:	4601      	mov	r1, r0
    bf58:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    bf5c:	2006      	movs	r0, #6
    bf5e:	f7ff fcbf 	bl	b8e0 <l2cap_create_le_sig_pdu.isra.10>
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    bf62:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    bf64:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    bf66:	3008      	adds	r0, #8
    bf68:	f013 f9d2 	bl	1f310 <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    bf6c:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
    bf70:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    bf72:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    bf74:	8043      	strh	r3, [r0, #2]
    bf76:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    bf7a:	f104 0110 	add.w	r1, r4, #16
    bf7e:	4808      	ldr	r0, [pc, #32]	; (bfa0 <bt_l2cap_chan_disconnect+0x58>)
    bf80:	f022 fbc4 	bl	2e70c <k_delayed_work_submit_to_queue>
    bf84:	2300      	movs	r3, #0
    bf86:	6820      	ldr	r0, [r4, #0]
    bf88:	462a      	mov	r2, r5
    bf8a:	2105      	movs	r1, #5
    bf8c:	f7ff fd3a 	bl	ba04 <bt_l2cap_send_cb>
	chan->state = state;
    bf90:	2304      	movs	r3, #4
    bf92:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);

	return 0;
    bf96:	2000      	movs	r0, #0
}
    bf98:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    bf9a:	f06f 0038 	mvn.w	r0, #56	; 0x38
    bf9e:	e7fb      	b.n	bf98 <bt_l2cap_chan_disconnect+0x50>
    bfa0:	200037b0 	.word	0x200037b0

0000bfa4 <l2cap_chan_le_recv_seg>:
{
    bfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfa6:	460e      	mov	r6, r1
	len = net_buf_frags_len(chan->_sdu);
    bfa8:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
{
    bfac:	b085      	sub	sp, #20
	u16_t seg = 0;
    bfae:	2300      	movs	r3, #0
{
    bfb0:	4604      	mov	r4, r0
	len = net_buf_frags_len(chan->_sdu);
    bfb2:	4608      	mov	r0, r1
	u16_t seg = 0;
    bfb4:	f8ad 300e 	strh.w	r3, [sp, #14]
	len = net_buf_frags_len(chan->_sdu);
    bfb8:	f7ff fbb2 	bl	b720 <net_buf_frags_len>
	if (len) {
    bfbc:	b283      	uxth	r3, r0
	len = net_buf_frags_len(chan->_sdu);
    bfbe:	4605      	mov	r5, r0
	if (len) {
    bfc0:	b12b      	cbz	r3, bfce <l2cap_chan_le_recv_seg+0x2a>
		memcpy(&seg, net_buf_user_data(chan->_sdu), sizeof(seg));
    bfc2:	2202      	movs	r2, #2
    bfc4:	3114      	adds	r1, #20
    bfc6:	f10d 000e 	add.w	r0, sp, #14
    bfca:	f7fa fe5d 	bl	6c88 <memcpy>
	if (len + buf->len > chan->_sdu_len) {
    bfce:	89b3      	ldrh	r3, [r6, #12]
    bfd0:	fa13 f585 	uxtah	r5, r3, r5
    bfd4:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
    bfd8:	429d      	cmp	r5, r3
    bfda:	dd19      	ble.n	c010 <l2cap_chan_le_recv_seg+0x6c>
		BT_ERR("SDU length mismatch");
    bfdc:	4b4d      	ldr	r3, [pc, #308]	; (c114 <l2cap_chan_le_recv_seg+0x170>)
    bfde:	681b      	ldr	r3, [r3, #0]
    bfe0:	0759      	lsls	r1, r3, #29
    bfe2:	d010      	beq.n	c006 <l2cap_chan_le_recv_seg+0x62>
    bfe4:	2301      	movs	r3, #1
    bfe6:	f04f 0200 	mov.w	r2, #0
    bfea:	f363 0202 	bfi	r2, r3, #0, #3
    bfee:	494a      	ldr	r1, [pc, #296]	; (c118 <l2cap_chan_le_recv_seg+0x174>)
    bff0:	4b4a      	ldr	r3, [pc, #296]	; (c11c <l2cap_chan_le_recv_seg+0x178>)
    bff2:	484b      	ldr	r0, [pc, #300]	; (c120 <l2cap_chan_le_recv_seg+0x17c>)
    bff4:	1a5b      	subs	r3, r3, r1
    bff6:	f36f 02c5 	bfc	r2, #3, #3
    bffa:	08db      	lsrs	r3, r3, #3
    bffc:	4949      	ldr	r1, [pc, #292]	; (c124 <l2cap_chan_le_recv_seg+0x180>)
    bffe:	f363 128f 	bfi	r2, r3, #6, #10
    c002:	f7f6 f873 	bl	20ec <log_1>
		bt_l2cap_chan_disconnect(&chan->chan);
    c006:	4620      	mov	r0, r4
    c008:	f7ff ff9e 	bl	bf48 <bt_l2cap_chan_disconnect>
}
    c00c:	b005      	add	sp, #20
    c00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	seg++;
    c010:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	return (void *)buf->user_data;
    c014:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c018:	a904      	add	r1, sp, #16
    c01a:	3301      	adds	r3, #1
    c01c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(net_buf_user_data(chan->_sdu), &seg, sizeof(seg));
    c020:	2202      	movs	r2, #2
    c022:	3014      	adds	r0, #20
    c024:	f7fa fe30 	bl	6c88 <memcpy>
	len = net_buf_append_bytes(chan->_sdu, buf->len, buf->data, K_NO_WAIT,
    c028:	4b3f      	ldr	r3, [pc, #252]	; (c128 <l2cap_chan_le_recv_seg+0x184>)
    c02a:	89b1      	ldrh	r1, [r6, #12]
    c02c:	9300      	str	r3, [sp, #0]
    c02e:	9401      	str	r4, [sp, #4]
    c030:	2300      	movs	r3, #0
    c032:	68b2      	ldr	r2, [r6, #8]
    c034:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c038:	f013 f9de 	bl	1f3f8 <net_buf_append_bytes>
	if (len != buf->len) {
    c03c:	89b3      	ldrh	r3, [r6, #12]
    c03e:	b280      	uxth	r0, r0
    c040:	4283      	cmp	r3, r0
    c042:	d013      	beq.n	c06c <l2cap_chan_le_recv_seg+0xc8>
		BT_ERR("Unable to store SDU");
    c044:	4b33      	ldr	r3, [pc, #204]	; (c114 <l2cap_chan_le_recv_seg+0x170>)
    c046:	681b      	ldr	r3, [r3, #0]
    c048:	075a      	lsls	r2, r3, #29
    c04a:	d0dc      	beq.n	c006 <l2cap_chan_le_recv_seg+0x62>
    c04c:	2301      	movs	r3, #1
    c04e:	f04f 0200 	mov.w	r2, #0
    c052:	f363 0202 	bfi	r2, r3, #0, #3
    c056:	4930      	ldr	r1, [pc, #192]	; (c118 <l2cap_chan_le_recv_seg+0x174>)
    c058:	4b30      	ldr	r3, [pc, #192]	; (c11c <l2cap_chan_le_recv_seg+0x178>)
    c05a:	4834      	ldr	r0, [pc, #208]	; (c12c <l2cap_chan_le_recv_seg+0x188>)
    c05c:	1a5b      	subs	r3, r3, r1
    c05e:	f36f 02c5 	bfc	r2, #3, #3
    c062:	08db      	lsrs	r3, r3, #3
    c064:	f363 128f 	bfi	r2, r3, #6, #10
    c068:	492e      	ldr	r1, [pc, #184]	; (c124 <l2cap_chan_le_recv_seg+0x180>)
    c06a:	e7ca      	b.n	c002 <l2cap_chan_le_recv_seg+0x5e>
	if (net_buf_frags_len(chan->_sdu) < chan->_sdu_len) {
    c06c:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    c070:	4638      	mov	r0, r7
    c072:	f7ff fb55 	bl	b720 <net_buf_frags_len>
    c076:	f8b4 5090 	ldrh.w	r5, [r4, #144]	; 0x90
    c07a:	42a8      	cmp	r0, r5
    c07c:	d218      	bcs.n	c0b0 <l2cap_chan_le_recv_seg+0x10c>
		if (!k_sem_count_get(&chan->rx.credits) &&
    c07e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    c080:	2b00      	cmp	r3, #0
    c082:	d1c3      	bne.n	c00c <l2cap_chan_le_recv_seg+0x68>
    c084:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    c086:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c08a:	429a      	cmp	r2, r3
    c08c:	d1be      	bne.n	c00c <l2cap_chan_le_recv_seg+0x68>
	credits = ((chan->_sdu_len - net_buf_frags_len(buf)) +
    c08e:	4630      	mov	r0, r6
    c090:	f7ff fb46 	bl	b720 <net_buf_frags_len>
    c094:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    c096:	440d      	add	r5, r1
    c098:	3d01      	subs	r5, #1
    c09a:	1a28      	subs	r0, r5, r0
		   (chan->rx.mps - 1)) / chan->rx.mps;
    c09c:	fbb0 f1f1 	udiv	r1, r0, r1
	if (credits <= 0) {
    c0a0:	b20b      	sxth	r3, r1
    c0a2:	2b00      	cmp	r3, #0
    c0a4:	ddb2      	ble.n	c00c <l2cap_chan_le_recv_seg+0x68>
	l2cap_chan_send_credits(chan, buf, credits);
    c0a6:	b289      	uxth	r1, r1
    c0a8:	4620      	mov	r0, r4
    c0aa:	f7ff fdf3 	bl	bc94 <l2cap_chan_send_credits.isra.13>
    c0ae:	e7ad      	b.n	c00c <l2cap_chan_le_recv_seg+0x68>
	err = chan->chan.ops->recv(&chan->chan, buf);
    c0b0:	6863      	ldr	r3, [r4, #4]
	l2cap_chan_le_recv_sdu(chan, buf, seg);
    c0b2:	f8bd 600e 	ldrh.w	r6, [sp, #14]
	err = chan->chan.ops->recv(&chan->chan, buf);
    c0b6:	691b      	ldr	r3, [r3, #16]
	chan->_sdu = NULL;
    c0b8:	2500      	movs	r5, #0
    c0ba:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
	chan->_sdu_len = 0;
    c0be:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
	err = chan->chan.ops->recv(&chan->chan, buf);
    c0c2:	4639      	mov	r1, r7
    c0c4:	4620      	mov	r0, r4
    c0c6:	4798      	blx	r3
	if (err < 0) {
    c0c8:	1e02      	subs	r2, r0, #0
    c0ca:	da1e      	bge.n	c10a <l2cap_chan_le_recv_seg+0x166>
		if (err != -EINPROGRESS) {
    c0cc:	f112 0f44 	cmn.w	r2, #68	; 0x44
    c0d0:	d09c      	beq.n	c00c <l2cap_chan_le_recv_seg+0x68>
			BT_ERR("err %d", err);
    c0d2:	4b10      	ldr	r3, [pc, #64]	; (c114 <l2cap_chan_le_recv_seg+0x170>)
    c0d4:	681b      	ldr	r3, [r3, #0]
    c0d6:	075b      	lsls	r3, r3, #29
    c0d8:	d010      	beq.n	c0fc <l2cap_chan_le_recv_seg+0x158>
    c0da:	2101      	movs	r1, #1
    c0dc:	f04f 0300 	mov.w	r3, #0
    c0e0:	f361 0302 	bfi	r3, r1, #0, #3
    c0e4:	480c      	ldr	r0, [pc, #48]	; (c118 <l2cap_chan_le_recv_seg+0x174>)
    c0e6:	490d      	ldr	r1, [pc, #52]	; (c11c <l2cap_chan_le_recv_seg+0x178>)
    c0e8:	1a09      	subs	r1, r1, r0
    c0ea:	08c9      	lsrs	r1, r1, #3
    c0ec:	f365 03c5 	bfi	r3, r5, #3, #3
    c0f0:	f361 138f 	bfi	r3, r1, #6, #10
    c0f4:	480e      	ldr	r0, [pc, #56]	; (c130 <l2cap_chan_le_recv_seg+0x18c>)
    c0f6:	490f      	ldr	r1, [pc, #60]	; (c134 <l2cap_chan_le_recv_seg+0x190>)
    c0f8:	f7f6 f80c 	bl	2114 <log_2>
			bt_l2cap_chan_disconnect(&chan->chan);
    c0fc:	4620      	mov	r0, r4
    c0fe:	f7ff ff23 	bl	bf48 <bt_l2cap_chan_disconnect>
	net_buf_unref(buf);
    c102:	4638      	mov	r0, r7
    c104:	f013 f8a6 	bl	1f254 <net_buf_unref>
    c108:	e780      	b.n	c00c <l2cap_chan_le_recv_seg+0x68>
	l2cap_chan_send_credits(chan, buf, seg);
    c10a:	4631      	mov	r1, r6
    c10c:	4620      	mov	r0, r4
    c10e:	f7ff fdc1 	bl	bc94 <l2cap_chan_send_credits.isra.13>
    c112:	e7f6      	b.n	c102 <l2cap_chan_le_recv_seg+0x15e>
    c114:	2000e240 	.word	0x2000e240
    c118:	0002ef38 	.word	0x0002ef38
    c11c:	0002efc0 	.word	0x0002efc0
    c120:	00031bb2 	.word	0x00031bb2
    c124:	00031a25 	.word	0x00031a25
    c128:	0000b7d7 	.word	0x0000b7d7
    c12c:	00031bca 	.word	0x00031bca
    c130:	00031be2 	.word	0x00031be2
    c134:	00031a0e 	.word	0x00031a0e

0000c138 <bt_l2cap_recv>:
{
    c138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    c13a:	898b      	ldrh	r3, [r1, #12]
    c13c:	2b03      	cmp	r3, #3
{
    c13e:	4604      	mov	r4, r0
    c140:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    c142:	d819      	bhi.n	c178 <bt_l2cap_recv+0x40>
		BT_ERR("Too small L2CAP PDU received");
    c144:	4b67      	ldr	r3, [pc, #412]	; (c2e4 <bt_l2cap_recv+0x1ac>)
    c146:	681b      	ldr	r3, [r3, #0]
    c148:	075c      	lsls	r4, r3, #29
    c14a:	d010      	beq.n	c16e <bt_l2cap_recv+0x36>
    c14c:	2301      	movs	r3, #1
    c14e:	f04f 0200 	mov.w	r2, #0
    c152:	f363 0202 	bfi	r2, r3, #0, #3
    c156:	4964      	ldr	r1, [pc, #400]	; (c2e8 <bt_l2cap_recv+0x1b0>)
    c158:	4b64      	ldr	r3, [pc, #400]	; (c2ec <bt_l2cap_recv+0x1b4>)
    c15a:	4865      	ldr	r0, [pc, #404]	; (c2f0 <bt_l2cap_recv+0x1b8>)
    c15c:	1a5b      	subs	r3, r3, r1
    c15e:	f36f 02c5 	bfc	r2, #3, #3
    c162:	08db      	lsrs	r3, r3, #3
    c164:	f363 128f 	bfi	r2, r3, #6, #10
    c168:	4962      	ldr	r1, [pc, #392]	; (c2f4 <bt_l2cap_recv+0x1bc>)
    c16a:	f7f5 ffbf 	bl	20ec <log_1>
		net_buf_unref(buf);
    c16e:	4628      	mov	r0, r5
}
    c170:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    c174:	f013 b86e 	b.w	1f254 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    c178:	460e      	mov	r6, r1
	net_buf_pull(buf, sizeof(*hdr));
    c17a:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    c17c:	f856 3f08 	ldr.w	r3, [r6, #8]!
    c180:	885f      	ldrh	r7, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    c182:	4630      	mov	r0, r6
    c184:	f013 f914 	bl	1f3b0 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    c188:	4620      	mov	r0, r4
    c18a:	4639      	mov	r1, r7
    c18c:	f7ff fdb8 	bl	bd00 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    c190:	4604      	mov	r4, r0
    c192:	b9c0      	cbnz	r0, c1c6 <bt_l2cap_recv+0x8e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    c194:	4b53      	ldr	r3, [pc, #332]	; (c2e4 <bt_l2cap_recv+0x1ac>)
    c196:	681b      	ldr	r3, [r3, #0]
    c198:	f003 0307 	and.w	r3, r3, #7
    c19c:	2b01      	cmp	r3, #1
    c19e:	d9e6      	bls.n	c16e <bt_l2cap_recv+0x36>
    c1a0:	2202      	movs	r2, #2
    c1a2:	f04f 0300 	mov.w	r3, #0
    c1a6:	f362 0302 	bfi	r3, r2, #0, #3
    c1aa:	494f      	ldr	r1, [pc, #316]	; (c2e8 <bt_l2cap_recv+0x1b0>)
    c1ac:	4a4f      	ldr	r2, [pc, #316]	; (c2ec <bt_l2cap_recv+0x1b4>)
    c1ae:	1a52      	subs	r2, r2, r1
    c1b0:	f360 03c5 	bfi	r3, r0, #3, #3
    c1b4:	08d2      	lsrs	r2, r2, #3
    c1b6:	f362 138f 	bfi	r3, r2, #6, #10
    c1ba:	494e      	ldr	r1, [pc, #312]	; (c2f4 <bt_l2cap_recv+0x1bc>)
    c1bc:	484e      	ldr	r0, [pc, #312]	; (c2f8 <bt_l2cap_recv+0x1c0>)
    c1be:	463a      	mov	r2, r7
    c1c0:	f7f5 ffa8 	bl	2114 <log_2>
    c1c4:	e7d3      	b.n	c16e <bt_l2cap_recv+0x36>
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    c1c6:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    c1c8:	3b40      	subs	r3, #64	; 0x40
    c1ca:	2b3f      	cmp	r3, #63	; 0x3f
    c1cc:	f200 8085 	bhi.w	c2da <bt_l2cap_recv+0x1a2>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    c1d0:	2100      	movs	r1, #0
    c1d2:	3040      	adds	r0, #64	; 0x40
    c1d4:	f022 f878 	bl	2e2c8 <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    c1d8:	b1c0      	cbz	r0, c20c <bt_l2cap_recv+0xd4>
		BT_ERR("No credits to receive packet");
    c1da:	4b42      	ldr	r3, [pc, #264]	; (c2e4 <bt_l2cap_recv+0x1ac>)
    c1dc:	681b      	ldr	r3, [r3, #0]
    c1de:	0758      	lsls	r0, r3, #29
    c1e0:	d010      	beq.n	c204 <bt_l2cap_recv+0xcc>
    c1e2:	2301      	movs	r3, #1
    c1e4:	f04f 0200 	mov.w	r2, #0
    c1e8:	f363 0202 	bfi	r2, r3, #0, #3
    c1ec:	493e      	ldr	r1, [pc, #248]	; (c2e8 <bt_l2cap_recv+0x1b0>)
    c1ee:	4b3f      	ldr	r3, [pc, #252]	; (c2ec <bt_l2cap_recv+0x1b4>)
    c1f0:	4842      	ldr	r0, [pc, #264]	; (c2fc <bt_l2cap_recv+0x1c4>)
    c1f2:	1a5b      	subs	r3, r3, r1
    c1f4:	f36f 02c5 	bfc	r2, #3, #3
    c1f8:	08db      	lsrs	r3, r3, #3
    c1fa:	4941      	ldr	r1, [pc, #260]	; (c300 <bt_l2cap_recv+0x1c8>)
    c1fc:	f363 128f 	bfi	r2, r3, #6, #10
			BT_ERR("Unable to allocate buffer for SDU");
    c200:	f7f5 ff74 	bl	20ec <log_1>
			bt_l2cap_chan_disconnect(&chan->chan);
    c204:	4620      	mov	r0, r4
    c206:	f7ff fe9f 	bl	bf48 <bt_l2cap_chan_disconnect>
    c20a:	e7b0      	b.n	c16e <bt_l2cap_recv+0x36>
	if (chan->_sdu) {
    c20c:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    c210:	b127      	cbz	r7, c21c <bt_l2cap_recv+0xe4>
		l2cap_chan_le_recv_seg(chan, buf);
    c212:	4629      	mov	r1, r5
    c214:	4620      	mov	r0, r4
    c216:	f7ff fec5 	bl	bfa4 <l2cap_chan_le_recv_seg>
    c21a:	e7a8      	b.n	c16e <bt_l2cap_recv+0x36>
	sdu_len = net_buf_pull_le16(buf);
    c21c:	4630      	mov	r0, r6
    c21e:	f013 f8d7 	bl	1f3d0 <net_buf_simple_pull_le16>
	if (sdu_len > chan->rx.mtu) {
    c222:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    c224:	4283      	cmp	r3, r0
	sdu_len = net_buf_pull_le16(buf);
    c226:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    c228:	d213      	bcs.n	c252 <bt_l2cap_recv+0x11a>
		BT_ERR("Invalid SDU length");
    c22a:	4b2e      	ldr	r3, [pc, #184]	; (c2e4 <bt_l2cap_recv+0x1ac>)
    c22c:	681b      	ldr	r3, [r3, #0]
    c22e:	0759      	lsls	r1, r3, #29
    c230:	d0e8      	beq.n	c204 <bt_l2cap_recv+0xcc>
    c232:	2301      	movs	r3, #1
    c234:	f04f 0200 	mov.w	r2, #0
    c238:	f363 0202 	bfi	r2, r3, #0, #3
    c23c:	492a      	ldr	r1, [pc, #168]	; (c2e8 <bt_l2cap_recv+0x1b0>)
    c23e:	4b2b      	ldr	r3, [pc, #172]	; (c2ec <bt_l2cap_recv+0x1b4>)
    c240:	4830      	ldr	r0, [pc, #192]	; (c304 <bt_l2cap_recv+0x1cc>)
    c242:	1a5b      	subs	r3, r3, r1
    c244:	f367 02c5 	bfi	r2, r7, #3, #3
    c248:	08db      	lsrs	r3, r3, #3
    c24a:	f363 128f 	bfi	r2, r3, #6, #10
    c24e:	492c      	ldr	r1, [pc, #176]	; (c300 <bt_l2cap_recv+0x1c8>)
    c250:	e7d6      	b.n	c200 <bt_l2cap_recv+0xc8>
	if (chan->chan.ops->alloc_buf) {
    c252:	6863      	ldr	r3, [r4, #4]
    c254:	68da      	ldr	r2, [r3, #12]
    c256:	b1da      	cbz	r2, c290 <bt_l2cap_recv+0x158>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    c258:	4620      	mov	r0, r4
    c25a:	4790      	blx	r2
    c25c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
		if (!chan->_sdu) {
    c260:	b998      	cbnz	r0, c28a <bt_l2cap_recv+0x152>
			BT_ERR("Unable to allocate buffer for SDU");
    c262:	4b20      	ldr	r3, [pc, #128]	; (c2e4 <bt_l2cap_recv+0x1ac>)
    c264:	681b      	ldr	r3, [r3, #0]
    c266:	075a      	lsls	r2, r3, #29
    c268:	d0cc      	beq.n	c204 <bt_l2cap_recv+0xcc>
    c26a:	2301      	movs	r3, #1
    c26c:	f04f 0200 	mov.w	r2, #0
    c270:	f363 0202 	bfi	r2, r3, #0, #3
    c274:	491c      	ldr	r1, [pc, #112]	; (c2e8 <bt_l2cap_recv+0x1b0>)
    c276:	4b1d      	ldr	r3, [pc, #116]	; (c2ec <bt_l2cap_recv+0x1b4>)
    c278:	1a5b      	subs	r3, r3, r1
    c27a:	f360 02c5 	bfi	r2, r0, #3, #3
    c27e:	08db      	lsrs	r3, r3, #3
    c280:	f363 128f 	bfi	r2, r3, #6, #10
    c284:	491e      	ldr	r1, [pc, #120]	; (c300 <bt_l2cap_recv+0x1c8>)
    c286:	4820      	ldr	r0, [pc, #128]	; (c308 <bt_l2cap_recv+0x1d0>)
    c288:	e7ba      	b.n	c200 <bt_l2cap_recv+0xc8>
		chan->_sdu_len = sdu_len;
    c28a:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
    c28e:	e7c0      	b.n	c212 <bt_l2cap_recv+0xda>
	err = chan->chan.ops->recv(&chan->chan, buf);
    c290:	691b      	ldr	r3, [r3, #16]
    c292:	4629      	mov	r1, r5
    c294:	4620      	mov	r0, r4
    c296:	4798      	blx	r3
	if (err) {
    c298:	4602      	mov	r2, r0
    c29a:	b1c8      	cbz	r0, c2d0 <bt_l2cap_recv+0x198>
		if (err != -EINPROGRESS) {
    c29c:	f110 0f44 	cmn.w	r0, #68	; 0x44
    c2a0:	f43f af65 	beq.w	c16e <bt_l2cap_recv+0x36>
			BT_ERR("err %d", err);
    c2a4:	4b0f      	ldr	r3, [pc, #60]	; (c2e4 <bt_l2cap_recv+0x1ac>)
    c2a6:	681b      	ldr	r3, [r3, #0]
    c2a8:	075b      	lsls	r3, r3, #29
    c2aa:	d0ab      	beq.n	c204 <bt_l2cap_recv+0xcc>
    c2ac:	2101      	movs	r1, #1
    c2ae:	f04f 0300 	mov.w	r3, #0
    c2b2:	f361 0302 	bfi	r3, r1, #0, #3
    c2b6:	480c      	ldr	r0, [pc, #48]	; (c2e8 <bt_l2cap_recv+0x1b0>)
    c2b8:	490c      	ldr	r1, [pc, #48]	; (c2ec <bt_l2cap_recv+0x1b4>)
    c2ba:	1a09      	subs	r1, r1, r0
    c2bc:	08c9      	lsrs	r1, r1, #3
    c2be:	f36f 03c5 	bfc	r3, #3, #3
    c2c2:	f361 138f 	bfi	r3, r1, #6, #10
    c2c6:	4811      	ldr	r0, [pc, #68]	; (c30c <bt_l2cap_recv+0x1d4>)
    c2c8:	490d      	ldr	r1, [pc, #52]	; (c300 <bt_l2cap_recv+0x1c8>)
    c2ca:	f7f5 ff23 	bl	2114 <log_2>
    c2ce:	e799      	b.n	c204 <bt_l2cap_recv+0xcc>
	l2cap_chan_send_credits(chan, buf, 1);
    c2d0:	2101      	movs	r1, #1
    c2d2:	4620      	mov	r0, r4
    c2d4:	f7ff fcde 	bl	bc94 <l2cap_chan_send_credits.isra.13>
    c2d8:	e749      	b.n	c16e <bt_l2cap_recv+0x36>
	chan->ops->recv(chan, buf);
    c2da:	6843      	ldr	r3, [r0, #4]
    c2dc:	4629      	mov	r1, r5
    c2de:	691b      	ldr	r3, [r3, #16]
    c2e0:	4798      	blx	r3
    c2e2:	e744      	b.n	c16e <bt_l2cap_recv+0x36>
    c2e4:	2000e240 	.word	0x2000e240
    c2e8:	0002ef38 	.word	0x0002ef38
    c2ec:	0002efc0 	.word	0x0002efc0
    c2f0:	00031a9b 	.word	0x00031a9b
    c2f4:	00031a4f 	.word	0x00031a4f
    c2f8:	00031abc 	.word	0x00031abc
    c2fc:	00031ae5 	.word	0x00031ae5
    c300:	00031a3c 	.word	0x00031a3c
    c304:	00031b06 	.word	0x00031b06
    c308:	00031b1d 	.word	0x00031b1d
    c30c:	00031be2 	.word	0x00031be2

0000c310 <l2cap_recv>:
{
    c310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
    c314:	898b      	ldrh	r3, [r1, #12]
    c316:	2b03      	cmp	r3, #3
{
    c318:	b087      	sub	sp, #28
    c31a:	4606      	mov	r6, r0
    c31c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    c31e:	d815      	bhi.n	c34c <l2cap_recv+0x3c>
		BT_ERR("Too small L2CAP signaling PDU");
    c320:	4baa      	ldr	r3, [pc, #680]	; (c5cc <l2cap_recv+0x2bc>)
    c322:	681b      	ldr	r3, [r3, #0]
    c324:	075f      	lsls	r7, r3, #29
    c326:	d033      	beq.n	c390 <l2cap_recv+0x80>
    c328:	2301      	movs	r3, #1
    c32a:	f04f 0200 	mov.w	r2, #0
    c32e:	f363 0202 	bfi	r2, r3, #0, #3
    c332:	49a7      	ldr	r1, [pc, #668]	; (c5d0 <l2cap_recv+0x2c0>)
    c334:	4ba7      	ldr	r3, [pc, #668]	; (c5d4 <l2cap_recv+0x2c4>)
    c336:	48a8      	ldr	r0, [pc, #672]	; (c5d8 <l2cap_recv+0x2c8>)
    c338:	1a5b      	subs	r3, r3, r1
    c33a:	f36f 02c5 	bfc	r2, #3, #3
    c33e:	08db      	lsrs	r3, r3, #3
    c340:	49a6      	ldr	r1, [pc, #664]	; (c5dc <l2cap_recv+0x2cc>)
    c342:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Too small LE Credits packet size");
    c346:	f7f5 fed1 	bl	20ec <log_1>
    c34a:	e021      	b.n	c390 <l2cap_recv+0x80>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    c34c:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    c34e:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    c350:	f850 7f08 	ldr.w	r7, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    c354:	887c      	ldrh	r4, [r7, #2]
	net_buf_pull(buf, sizeof(*hdr));
    c356:	f013 f82b 	bl	1f3b0 <net_buf_simple_pull>
	if (buf->len != len) {
    c35a:	89aa      	ldrh	r2, [r5, #12]
    c35c:	4294      	cmp	r4, r2
    c35e:	d01b      	beq.n	c398 <l2cap_recv+0x88>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    c360:	4b9a      	ldr	r3, [pc, #616]	; (c5cc <l2cap_recv+0x2bc>)
    c362:	681b      	ldr	r3, [r3, #0]
    c364:	075e      	lsls	r6, r3, #29
    c366:	d013      	beq.n	c390 <l2cap_recv+0x80>
    c368:	2301      	movs	r3, #1
    c36a:	f04f 0000 	mov.w	r0, #0
    c36e:	f363 0002 	bfi	r0, r3, #0, #3
    c372:	4998      	ldr	r1, [pc, #608]	; (c5d4 <l2cap_recv+0x2c4>)
    c374:	4b96      	ldr	r3, [pc, #600]	; (c5d0 <l2cap_recv+0x2c0>)
    c376:	1ac9      	subs	r1, r1, r3
    c378:	08c9      	lsrs	r1, r1, #3
    c37a:	f36f 00c5 	bfc	r0, #3, #3
    c37e:	f361 108f 	bfi	r0, r1, #6, #10
    c382:	f8ad 0000 	strh.w	r0, [sp]
    c386:	4623      	mov	r3, r4
    c388:	4994      	ldr	r1, [pc, #592]	; (c5dc <l2cap_recv+0x2cc>)
    c38a:	4895      	ldr	r0, [pc, #596]	; (c5e0 <l2cap_recv+0x2d0>)
    c38c:	f7f5 feda 	bl	2144 <log_3>
}
    c390:	2000      	movs	r0, #0
    c392:	b007      	add	sp, #28
    c394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!hdr->ident) {
    c398:	787c      	ldrb	r4, [r7, #1]
    c39a:	b99c      	cbnz	r4, c3c4 <l2cap_recv+0xb4>
		BT_ERR("Invalid ident value in L2CAP PDU");
    c39c:	4b8b      	ldr	r3, [pc, #556]	; (c5cc <l2cap_recv+0x2bc>)
    c39e:	681b      	ldr	r3, [r3, #0]
    c3a0:	075d      	lsls	r5, r3, #29
    c3a2:	d0f5      	beq.n	c390 <l2cap_recv+0x80>
    c3a4:	2301      	movs	r3, #1
    c3a6:	f04f 0200 	mov.w	r2, #0
    c3aa:	f363 0202 	bfi	r2, r3, #0, #3
    c3ae:	4988      	ldr	r1, [pc, #544]	; (c5d0 <l2cap_recv+0x2c0>)
    c3b0:	4b88      	ldr	r3, [pc, #544]	; (c5d4 <l2cap_recv+0x2c4>)
    c3b2:	488c      	ldr	r0, [pc, #560]	; (c5e4 <l2cap_recv+0x2d4>)
    c3b4:	1a5b      	subs	r3, r3, r1
    c3b6:	f364 02c5 	bfi	r2, r4, #3, #3
    c3ba:	08db      	lsrs	r3, r3, #3
    c3bc:	f363 128f 	bfi	r2, r3, #6, #10
    c3c0:	4986      	ldr	r1, [pc, #536]	; (c5dc <l2cap_recv+0x2cc>)
    c3c2:	e7c0      	b.n	c346 <l2cap_recv+0x36>
	switch (hdr->code) {
    c3c4:	7838      	ldrb	r0, [r7, #0]
    c3c6:	1e43      	subs	r3, r0, #1
    c3c8:	2b15      	cmp	r3, #21
    c3ca:	f200 8319 	bhi.w	ca00 <l2cap_recv+0x6f0>
    c3ce:	e8df f013 	tbh	[pc, r3, lsl #1]
    c3d2:	0311      	.short	0x0311
    c3d4:	03170317 	.word	0x03170317
    c3d8:	03170317 	.word	0x03170317
    c3dc:	025b0213 	.word	0x025b0213
    c3e0:	03170317 	.word	0x03170317
    c3e4:	03170317 	.word	0x03170317
    c3e8:	03170317 	.word	0x03170317
    c3ec:	03170317 	.word	0x03170317
    c3f0:	03170317 	.word	0x03170317
    c3f4:	0016002c 	.word	0x0016002c
    c3f8:	0175008b 	.word	0x0175008b
    c3fc:	027a      	.short	0x027a
	if (buf->len < sizeof(*rsp)) {
    c3fe:	2a01      	cmp	r2, #1
    c400:	d8c6      	bhi.n	c390 <l2cap_recv+0x80>
		BT_ERR("Too small LE conn param rsp");
    c402:	4b72      	ldr	r3, [pc, #456]	; (c5cc <l2cap_recv+0x2bc>)
    c404:	681b      	ldr	r3, [r3, #0]
    c406:	0758      	lsls	r0, r3, #29
    c408:	d0c2      	beq.n	c390 <l2cap_recv+0x80>
    c40a:	2301      	movs	r3, #1
    c40c:	f04f 0200 	mov.w	r2, #0
    c410:	f363 0202 	bfi	r2, r3, #0, #3
    c414:	496e      	ldr	r1, [pc, #440]	; (c5d0 <l2cap_recv+0x2c0>)
    c416:	4b6f      	ldr	r3, [pc, #444]	; (c5d4 <l2cap_recv+0x2c4>)
    c418:	4873      	ldr	r0, [pc, #460]	; (c5e8 <l2cap_recv+0x2d8>)
    c41a:	1a5b      	subs	r3, r3, r1
    c41c:	f36f 02c5 	bfc	r2, #3, #3
    c420:	08db      	lsrs	r3, r3, #3
    c422:	f363 128f 	bfi	r2, r3, #6, #10
    c426:	4971      	ldr	r1, [pc, #452]	; (c5ec <l2cap_recv+0x2dc>)
    c428:	e78d      	b.n	c346 <l2cap_recv+0x36>
	if (buf->len < sizeof(*req)) {
    c42a:	2a07      	cmp	r2, #7
    c42c:	d813      	bhi.n	c456 <l2cap_recv+0x146>
		BT_ERR("Too small LE conn update param req");
    c42e:	4b67      	ldr	r3, [pc, #412]	; (c5cc <l2cap_recv+0x2bc>)
    c430:	681b      	ldr	r3, [r3, #0]
    c432:	0759      	lsls	r1, r3, #29
    c434:	d0ac      	beq.n	c390 <l2cap_recv+0x80>
    c436:	2301      	movs	r3, #1
    c438:	f04f 0200 	mov.w	r2, #0
    c43c:	f363 0202 	bfi	r2, r3, #0, #3
    c440:	4963      	ldr	r1, [pc, #396]	; (c5d0 <l2cap_recv+0x2c0>)
    c442:	4b64      	ldr	r3, [pc, #400]	; (c5d4 <l2cap_recv+0x2c4>)
    c444:	486a      	ldr	r0, [pc, #424]	; (c5f0 <l2cap_recv+0x2e0>)
    c446:	1a5b      	subs	r3, r3, r1
    c448:	f36f 02c5 	bfc	r2, #3, #3
    c44c:	08db      	lsrs	r3, r3, #3
    c44e:	f363 128f 	bfi	r2, r3, #6, #10
    c452:	4968      	ldr	r1, [pc, #416]	; (c5f4 <l2cap_recv+0x2e4>)
    c454:	e777      	b.n	c346 <l2cap_recv+0x36>
		le_conn_param_update_req(l2cap, hdr->ident, buf);
    c456:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    c458:	78f7      	ldrb	r7, [r6, #3]
    c45a:	b13f      	cbz	r7, c46c <l2cap_recv+0x15c>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    c45c:	2300      	movs	r3, #0
    c45e:	9300      	str	r3, [sp, #0]
    c460:	461a      	mov	r2, r3
    c462:	4621      	mov	r1, r4
    c464:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
    c466:	f7ff fb31 	bl	bacc <l2cap_send_reject>
		break;
    c46a:	e791      	b.n	c390 <l2cap_recv+0x80>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    c46c:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    c46e:	7859      	ldrb	r1, [r3, #1]
    c470:	781a      	ldrb	r2, [r3, #0]
    c472:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c476:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    c47a:	78d9      	ldrb	r1, [r3, #3]
    c47c:	789a      	ldrb	r2, [r3, #2]
    c47e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c482:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    c486:	7959      	ldrb	r1, [r3, #5]
    c488:	791a      	ldrb	r2, [r3, #4]
    c48a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c48e:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    c492:	799a      	ldrb	r2, [r3, #6]
    c494:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    c496:	4621      	mov	r1, r4
	param.timeout = sys_le16_to_cpu(req->timeout);
    c498:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    c49c:	2013      	movs	r0, #19
    c49e:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    c4a0:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    c4a4:	f7ff fa1c 	bl	b8e0 <l2cap_create_le_sig_pdu.isra.10>
	accepted = le_param_req(conn, &param);
    c4a8:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    c4aa:	4605      	mov	r5, r0
	accepted = le_param_req(conn, &param);
    c4ac:	4630      	mov	r0, r6
    c4ae:	f7fe fa09 	bl	a8c4 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    c4b2:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    c4b4:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    c4b6:	f105 0008 	add.w	r0, r5, #8
    c4ba:	f012 ff29 	bl	1f310 <net_buf_simple_add>
	if (accepted) {
    c4be:	b17c      	cbz	r4, c4e0 <l2cap_recv+0x1d0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    c4c0:	7007      	strb	r7, [r0, #0]
    c4c2:	7047      	strb	r7, [r0, #1]
    c4c4:	2300      	movs	r3, #0
    c4c6:	462a      	mov	r2, r5
    c4c8:	2105      	movs	r1, #5
    c4ca:	4630      	mov	r0, r6
    c4cc:	f7ff fa9a 	bl	ba04 <bt_l2cap_send_cb>
	if (accepted) {
    c4d0:	2c00      	cmp	r4, #0
    c4d2:	f43f af5d 	beq.w	c390 <l2cap_recv+0x80>
		bt_conn_le_conn_update(conn, &param);
    c4d6:	a904      	add	r1, sp, #16
    c4d8:	4630      	mov	r0, r6
    c4da:	f7fe ff82 	bl	b3e2 <bt_conn_le_conn_update>
    c4de:	e757      	b.n	c390 <l2cap_recv+0x80>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    c4e0:	2301      	movs	r3, #1
    c4e2:	7003      	strb	r3, [r0, #0]
    c4e4:	7044      	strb	r4, [r0, #1]
    c4e6:	e7ed      	b.n	c4c4 <l2cap_recv+0x1b4>
	if (buf->len < sizeof(*req)) {
    c4e8:	2a09      	cmp	r2, #9
    c4ea:	d814      	bhi.n	c516 <l2cap_recv+0x206>
		BT_ERR("Too small LE conn req packet size");
    c4ec:	4b37      	ldr	r3, [pc, #220]	; (c5cc <l2cap_recv+0x2bc>)
    c4ee:	681b      	ldr	r3, [r3, #0]
    c4f0:	075a      	lsls	r2, r3, #29
    c4f2:	f43f af4d 	beq.w	c390 <l2cap_recv+0x80>
    c4f6:	2301      	movs	r3, #1
    c4f8:	f04f 0200 	mov.w	r2, #0
    c4fc:	f363 0202 	bfi	r2, r3, #0, #3
    c500:	4933      	ldr	r1, [pc, #204]	; (c5d0 <l2cap_recv+0x2c0>)
    c502:	4b34      	ldr	r3, [pc, #208]	; (c5d4 <l2cap_recv+0x2c4>)
    c504:	1a5b      	subs	r3, r3, r1
    c506:	f36f 02c5 	bfc	r2, #3, #3
    c50a:	08db      	lsrs	r3, r3, #3
    c50c:	493a      	ldr	r1, [pc, #232]	; (c5f8 <l2cap_recv+0x2e8>)
    c50e:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Too small LE conn req packet size");
    c512:	483a      	ldr	r0, [pc, #232]	; (c5fc <l2cap_recv+0x2ec>)
    c514:	e717      	b.n	c346 <l2cap_recv+0x36>
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    c516:	68aa      	ldr	r2, [r5, #8]
	mtu = sys_le16_to_cpu(req->mtu);
    c518:	f8b2 9004 	ldrh.w	r9, [r2, #4]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    c51c:	f1b9 0f16 	cmp.w	r9, #22
    c520:	d904      	bls.n	c52c <l2cap_recv+0x21c>
	mps = sys_le16_to_cpu(req->mps);
    c522:	f8b2 a006 	ldrh.w	sl, [r2, #6]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    c526:	f1ba 0f16 	cmp.w	sl, #22
    c52a:	d814      	bhi.n	c556 <l2cap_recv+0x246>
		BT_ERR("Invalid LE-Conn Req params");
    c52c:	4b27      	ldr	r3, [pc, #156]	; (c5cc <l2cap_recv+0x2bc>)
    c52e:	681b      	ldr	r3, [r3, #0]
    c530:	075b      	lsls	r3, r3, #29
    c532:	f43f af2d 	beq.w	c390 <l2cap_recv+0x80>
    c536:	2301      	movs	r3, #1
    c538:	f04f 0200 	mov.w	r2, #0
    c53c:	f363 0202 	bfi	r2, r3, #0, #3
    c540:	4923      	ldr	r1, [pc, #140]	; (c5d0 <l2cap_recv+0x2c0>)
    c542:	4b24      	ldr	r3, [pc, #144]	; (c5d4 <l2cap_recv+0x2c4>)
    c544:	482e      	ldr	r0, [pc, #184]	; (c600 <l2cap_recv+0x2f0>)
    c546:	1a5b      	subs	r3, r3, r1
    c548:	f36f 02c5 	bfc	r2, #3, #3
    c54c:	08db      	lsrs	r3, r3, #3
    c54e:	f363 128f 	bfi	r2, r3, #6, #10
    c552:	4929      	ldr	r1, [pc, #164]	; (c5f8 <l2cap_recv+0x2e8>)
    c554:	e6f7      	b.n	c346 <l2cap_recv+0x36>
	credits = sys_le16_to_cpu(req->credits);
    c556:	8913      	ldrh	r3, [r2, #8]
	scid = sys_le16_to_cpu(req->scid);
    c558:	f8b2 b002 	ldrh.w	fp, [r2, #2]
		le_conn_req(l2cap, hdr->ident, buf);
    c55c:	6835      	ldr	r5, [r6, #0]
	psm = sys_le16_to_cpu(req->psm);
    c55e:	8816      	ldrh	r6, [r2, #0]
	credits = sys_le16_to_cpu(req->credits);
    c560:	f8ad 300c 	strh.w	r3, [sp, #12]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    c564:	220a      	movs	r2, #10
    c566:	4621      	mov	r1, r4
    c568:	2015      	movs	r0, #21
	credits = sys_le16_to_cpu(req->credits);
    c56a:	b29f      	uxth	r7, r3
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    c56c:	f7ff f9b8 	bl	b8e0 <l2cap_create_le_sig_pdu.isra.10>
	rsp = net_buf_add(buf, sizeof(*rsp));
    c570:	210a      	movs	r1, #10
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    c572:	9002      	str	r0, [sp, #8]
	rsp = net_buf_add(buf, sizeof(*rsp));
    c574:	3008      	adds	r0, #8
    c576:	f012 fecb 	bl	1f310 <net_buf_simple_add>
	(void)memset(rsp, 0, sizeof(*rsp));
    c57a:	220a      	movs	r2, #10
    c57c:	2100      	movs	r1, #0
	rsp = net_buf_add(buf, sizeof(*rsp));
    c57e:	4604      	mov	r4, r0
	(void)memset(rsp, 0, sizeof(*rsp));
    c580:	f7fa fbaf 	bl	6ce2 <memset>
	server = l2cap_server_lookup_psm(psm);
    c584:	4630      	mov	r0, r6
    c586:	f7ff f8fb 	bl	b780 <l2cap_server_lookup_psm>
	scid = sys_le16_to_cpu(req->scid);
    c58a:	fa1f f88b 	uxth.w	r8, fp
	if (!server) {
    c58e:	4606      	mov	r6, r0
    c590:	b940      	cbnz	r0, c5a4 <l2cap_recv+0x294>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_PSM_NOT_SUPP);
    c592:	2302      	movs	r3, #2
    c594:	9a02      	ldr	r2, [sp, #8]
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_NO_RESOURCES);
    c596:	8123      	strh	r3, [r4, #8]
    c598:	2105      	movs	r1, #5
    c59a:	2300      	movs	r3, #0
    c59c:	4628      	mov	r0, r5
    c59e:	f7ff fa31 	bl	ba04 <bt_l2cap_send_cb>
    c5a2:	e6f5      	b.n	c390 <l2cap_recv+0x80>
	if (conn->sec_level < server->sec_level) {
    c5a4:	7a69      	ldrb	r1, [r5, #9]
    c5a6:	7882      	ldrb	r2, [r0, #2]
    c5a8:	4291      	cmp	r1, r2
    c5aa:	d201      	bcs.n	c5b0 <l2cap_recv+0x2a0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_AUTHENTICATION);
    c5ac:	2305      	movs	r3, #5
    c5ae:	e7f1      	b.n	c594 <l2cap_recv+0x284>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    c5b0:	f1a8 0240 	sub.w	r2, r8, #64	; 0x40
    c5b4:	2a3f      	cmp	r2, #63	; 0x3f
    c5b6:	d901      	bls.n	c5bc <l2cap_recv+0x2ac>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_INVALID_SCID);
    c5b8:	2309      	movs	r3, #9
    c5ba:	e7eb      	b.n	c594 <l2cap_recv+0x284>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    c5bc:	4641      	mov	r1, r8
    c5be:	4628      	mov	r0, r5
    c5c0:	f7ff fb93 	bl	bcea <bt_l2cap_le_lookup_tx_cid>
    c5c4:	9004      	str	r0, [sp, #16]
	if (chan) {
    c5c6:	b1e8      	cbz	r0, c604 <l2cap_recv+0x2f4>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_SCID_IN_USE);
    c5c8:	230a      	movs	r3, #10
    c5ca:	e7e3      	b.n	c594 <l2cap_recv+0x284>
    c5cc:	2000e240 	.word	0x2000e240
    c5d0:	0002ef38 	.word	0x0002ef38
    c5d4:	0002efc0 	.word	0x0002efc0
    c5d8:	00031bed 	.word	0x00031bed
    c5dc:	00031a03 	.word	0x00031a03
    c5e0:	00031c0f 	.word	0x00031c0f
    c5e4:	00031c34 	.word	0x00031c34
    c5e8:	00031c59 	.word	0x00031c59
    c5ec:	0003197e 	.word	0x0003197e
    c5f0:	00031c79 	.word	0x00031c79
    c5f4:	00031990 	.word	0x00031990
    c5f8:	000319c2 	.word	0x000319c2
    c5fc:	00031ca0 	.word	0x00031ca0
    c600:	00031cc6 	.word	0x00031cc6
	err = server->accept(conn, &chan);
    c604:	6873      	ldr	r3, [r6, #4]
    c606:	a904      	add	r1, sp, #16
    c608:	4628      	mov	r0, r5
    c60a:	4798      	blx	r3
	if (err < 0) {
    c60c:	2800      	cmp	r0, #0
    c60e:	da05      	bge.n	c61c <l2cap_recv+0x30c>
    c610:	300d      	adds	r0, #13
    c612:	bf2a      	itet	cs
    c614:	4bb7      	ldrcs	r3, [pc, #732]	; (c8f4 <l2cap_recv+0x5e4>)
	switch (err) {
    c616:	230b      	movcc	r3, #11
    c618:	5c1b      	ldrbcs	r3, [r3, r0]
    c61a:	e7bb      	b.n	c594 <l2cap_recv+0x284>
	chan->required_sec_level = server->sec_level;
    c61c:	9904      	ldr	r1, [sp, #16]
    c61e:	78b3      	ldrb	r3, [r6, #2]
    c620:	f881 3035 	strb.w	r3, [r1, #53]	; 0x35
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    c624:	4ab4      	ldr	r2, [pc, #720]	; (c8f8 <l2cap_recv+0x5e8>)
    c626:	4628      	mov	r0, r5
    c628:	f7ff fb74 	bl	bd14 <l2cap_chan_add>
    c62c:	2800      	cmp	r0, #0
    c62e:	d043      	beq.n	c6b8 <l2cap_recv+0x3a8>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    c630:	f8dd 8010 	ldr.w	r8, [sp, #16]
		l2cap_chan_tx_init(ch);
    c634:	4640      	mov	r0, r8
    c636:	f7ff f90e 	bl	b856 <l2cap_chan_tx_init>
		ch->tx.init_credits = credits;
    c63a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		ch->tx.mps = mps;
    c63e:	f8a8 a05c 	strh.w	sl, [r8, #92]	; 0x5c
		ch->tx.mtu = mtu;
    c642:	f8a8 905a 	strh.w	r9, [r8, #90]	; 0x5a
		ch->tx.cid = scid;
    c646:	f8a8 b058 	strh.w	fp, [r8, #88]	; 0x58
		ch->tx.init_credits = credits;
    c64a:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
	while (credits--) {
    c64e:	f64f 79ff 	movw	r9, #65535	; 0xffff
		k_sem_give(&chan->tx.credits);
    c652:	f108 0a60 	add.w	sl, r8, #96	; 0x60
	while (credits--) {
    c656:	3f01      	subs	r7, #1
    c658:	b2bf      	uxth	r7, r7
    c65a:	454f      	cmp	r7, r9
    c65c:	d124      	bne.n	c6a8 <l2cap_recv+0x398>
		l2cap_chan_rx_init(ch);
    c65e:	4640      	mov	r0, r8
    c660:	f7ff f8d8 	bl	b814 <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    c664:	f8b8 703e 	ldrh.w	r7, [r8, #62]	; 0x3e
	while (credits--) {
    c668:	f64f 79ff 	movw	r9, #65535	; 0xffff
		k_sem_give(&chan->rx.credits);
    c66c:	f108 0a40 	add.w	sl, r8, #64	; 0x40
	while (credits--) {
    c670:	3f01      	subs	r7, #1
    c672:	b2bf      	uxth	r7, r7
    c674:	454f      	cmp	r7, r9
    c676:	d11b      	bne.n	c6b0 <l2cap_recv+0x3a0>
		chan->psm = server->psm;
    c678:	9804      	ldr	r0, [sp, #16]
    c67a:	8832      	ldrh	r2, [r6, #0]
    c67c:	8642      	strh	r2, [r0, #50]	; 0x32
	chan->state = state;
    c67e:	2203      	movs	r2, #3
    c680:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
		if (chan->ops->connected) {
    c684:	6842      	ldr	r2, [r0, #4]
    c686:	6812      	ldr	r2, [r2, #0]
    c688:	b102      	cbz	r2, c68c <l2cap_recv+0x37c>
			chan->ops->connected(chan);
    c68a:	4790      	blx	r2
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    c68c:	f8b8 2038 	ldrh.w	r2, [r8, #56]	; 0x38
    c690:	8022      	strh	r2, [r4, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    c692:	f8b8 203c 	ldrh.w	r2, [r8, #60]	; 0x3c
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    c696:	f8b8 303e 	ldrh.w	r3, [r8, #62]	; 0x3e
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    c69a:	80a2      	strh	r2, [r4, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    c69c:	f8b8 203a 	ldrh.w	r2, [r8, #58]	; 0x3a
    c6a0:	8062      	strh	r2, [r4, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    c6a2:	80e3      	strh	r3, [r4, #6]
		rsp->result = BT_L2CAP_LE_SUCCESS;
    c6a4:	2300      	movs	r3, #0
    c6a6:	e775      	b.n	c594 <l2cap_recv+0x284>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    c6a8:	4650      	mov	r0, sl
    c6aa:	f021 fde6 	bl	2e27a <_impl_k_sem_give>
    c6ae:	e7d2      	b.n	c656 <l2cap_recv+0x346>
    c6b0:	4650      	mov	r0, sl
    c6b2:	f021 fde2 	bl	2e27a <_impl_k_sem_give>
    c6b6:	e7db      	b.n	c670 <l2cap_recv+0x360>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_NO_RESOURCES);
    c6b8:	2304      	movs	r3, #4
    c6ba:	e76b      	b.n	c594 <l2cap_recv+0x284>
	if (buf->len < sizeof(*rsp)) {
    c6bc:	2a09      	cmp	r2, #9
    c6be:	d814      	bhi.n	c6ea <l2cap_recv+0x3da>
		BT_ERR("Too small LE conn rsp packet size");
    c6c0:	4b8e      	ldr	r3, [pc, #568]	; (c8fc <l2cap_recv+0x5ec>)
    c6c2:	681b      	ldr	r3, [r3, #0]
    c6c4:	075f      	lsls	r7, r3, #29
    c6c6:	f43f ae63 	beq.w	c390 <l2cap_recv+0x80>
    c6ca:	2301      	movs	r3, #1
    c6cc:	f04f 0200 	mov.w	r2, #0
    c6d0:	f363 0202 	bfi	r2, r3, #0, #3
    c6d4:	498a      	ldr	r1, [pc, #552]	; (c900 <l2cap_recv+0x5f0>)
    c6d6:	4b8b      	ldr	r3, [pc, #556]	; (c904 <l2cap_recv+0x5f4>)
    c6d8:	488b      	ldr	r0, [pc, #556]	; (c908 <l2cap_recv+0x5f8>)
    c6da:	1a5b      	subs	r3, r3, r1
    c6dc:	f36f 02c5 	bfc	r2, #3, #3
    c6e0:	08db      	lsrs	r3, r3, #3
    c6e2:	f363 128f 	bfi	r2, r3, #6, #10
    c6e6:	4989      	ldr	r1, [pc, #548]	; (c90c <l2cap_recv+0x5fc>)
    c6e8:	e62d      	b.n	c346 <l2cap_recv+0x36>
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    c6ea:	68ab      	ldr	r3, [r5, #8]
		le_conn_rsp(l2cap, hdr->ident, buf);
    c6ec:	f8d6 8000 	ldr.w	r8, [r6]
	result = sys_le16_to_cpu(rsp->result);
    c6f0:	891f      	ldrh	r7, [r3, #8]
	dcid = sys_le16_to_cpu(rsp->dcid);
    c6f2:	f8b3 b000 	ldrh.w	fp, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    c6f6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    c6fa:	f8b3 9004 	ldrh.w	r9, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    c6fe:	88de      	ldrh	r6, [r3, #6]
	if (result == BT_L2CAP_LE_SUCCESS ||
    c700:	f027 0308 	bic.w	r3, r7, #8
    c704:	b2a1      	uxth	r1, r4
    c706:	b10b      	cbz	r3, c70c <l2cap_recv+0x3fc>
    c708:	2f05      	cmp	r7, #5
    c70a:	d11d      	bne.n	c748 <l2cap_recv+0x438>
		chan = l2cap_lookup_ident(conn, ident);
    c70c:	2200      	movs	r2, #0
		chan = l2cap_remove_ident(conn, ident);
    c70e:	4640      	mov	r0, r8
    c710:	f7ff f81a 	bl	b748 <__l2cap_lookup_ident>
    c714:	4605      	mov	r5, r0
	if (!chan) {
    c716:	b9c8      	cbnz	r0, c74c <l2cap_recv+0x43c>
		BT_ERR("Cannot find channel for ident %u", ident);
    c718:	4b78      	ldr	r3, [pc, #480]	; (c8fc <l2cap_recv+0x5ec>)
    c71a:	681b      	ldr	r3, [r3, #0]
    c71c:	075e      	lsls	r6, r3, #29
    c71e:	f43f ae37 	beq.w	c390 <l2cap_recv+0x80>
    c722:	2201      	movs	r2, #1
    c724:	f04f 0300 	mov.w	r3, #0
    c728:	f362 0302 	bfi	r3, r2, #0, #3
    c72c:	4974      	ldr	r1, [pc, #464]	; (c900 <l2cap_recv+0x5f0>)
    c72e:	4a75      	ldr	r2, [pc, #468]	; (c904 <l2cap_recv+0x5f4>)
    c730:	1a52      	subs	r2, r2, r1
    c732:	f360 03c5 	bfi	r3, r0, #3, #3
    c736:	08d2      	lsrs	r2, r2, #3
    c738:	f362 138f 	bfi	r3, r2, #6, #10
    c73c:	4973      	ldr	r1, [pc, #460]	; (c90c <l2cap_recv+0x5fc>)
    c73e:	4874      	ldr	r0, [pc, #464]	; (c910 <l2cap_recv+0x600>)
    c740:	4622      	mov	r2, r4
    c742:	f7f5 fce7 	bl	2114 <log_2>
    c746:	e623      	b.n	c390 <l2cap_recv+0x80>
		chan = l2cap_remove_ident(conn, ident);
    c748:	2201      	movs	r2, #1
    c74a:	e7e0      	b.n	c70e <l2cap_recv+0x3fe>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    c74c:	3010      	adds	r0, #16
    c74e:	f021 ff8e 	bl	2e66e <k_delayed_work_cancel>
	chan->chan.ident = 0;
    c752:	2300      	movs	r3, #0
	switch (result) {
    c754:	2f05      	cmp	r7, #5
	chan->chan.ident = 0;
    c756:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	switch (result) {
    c75a:	d041      	beq.n	c7e0 <l2cap_recv+0x4d0>
    c75c:	2f08      	cmp	r7, #8
    c75e:	d028      	beq.n	c7b2 <l2cap_recv+0x4a2>
    c760:	2f00      	cmp	r7, #0
    c762:	d139      	bne.n	c7d8 <l2cap_recv+0x4c8>
	chan->state = state;
    c764:	2303      	movs	r3, #3
    c766:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
		if (chan->chan.ops->connected) {
    c76a:	686b      	ldr	r3, [r5, #4]
		chan->tx.cid = dcid;
    c76c:	f8a5 b058 	strh.w	fp, [r5, #88]	; 0x58
		if (chan->chan.ops->connected) {
    c770:	681b      	ldr	r3, [r3, #0]
		chan->tx.mtu = mtu;
    c772:	f8a5 a05a 	strh.w	sl, [r5, #90]	; 0x5a
		chan->tx.mps = mps;
    c776:	f8a5 905c 	strh.w	r9, [r5, #92]	; 0x5c
		if (chan->chan.ops->connected) {
    c77a:	b10b      	cbz	r3, c780 <l2cap_recv+0x470>
			chan->chan.ops->connected(&chan->chan);
    c77c:	4628      	mov	r0, r5
    c77e:	4798      	blx	r3
	while (credits--) {
    c780:	f64f 74ff 	movw	r4, #65535	; 0xffff
		k_sem_give(&chan->tx.credits);
    c784:	f105 0760 	add.w	r7, r5, #96	; 0x60
	while (credits--) {
    c788:	3e01      	subs	r6, #1
    c78a:	b2b6      	uxth	r6, r6
    c78c:	42a6      	cmp	r6, r4
    c78e:	d10c      	bne.n	c7aa <l2cap_recv+0x49a>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    c790:	8fec      	ldrh	r4, [r5, #62]	; 0x3e
	while (credits--) {
    c792:	f64f 76ff 	movw	r6, #65535	; 0xffff
		k_sem_give(&chan->rx.credits);
    c796:	3540      	adds	r5, #64	; 0x40
	while (credits--) {
    c798:	3c01      	subs	r4, #1
    c79a:	b2a4      	uxth	r4, r4
    c79c:	42b4      	cmp	r4, r6
    c79e:	f43f adf7 	beq.w	c390 <l2cap_recv+0x80>
    c7a2:	4628      	mov	r0, r5
    c7a4:	f021 fd69 	bl	2e27a <_impl_k_sem_give>
    c7a8:	e7f6      	b.n	c798 <l2cap_recv+0x488>
    c7aa:	4638      	mov	r0, r7
    c7ac:	f021 fd65 	bl	2e27a <_impl_k_sem_give>
    c7b0:	e7ea      	b.n	c788 <l2cap_recv+0x478>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    c7b2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    c7b6:	2b01      	cmp	r3, #1
    c7b8:	d80a      	bhi.n	c7d0 <l2cap_recv+0x4c0>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    c7ba:	2302      	movs	r3, #2
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    c7bc:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    c7c0:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
    c7c4:	6828      	ldr	r0, [r5, #0]
    c7c6:	f7fe f903 	bl	a9d0 <bt_conn_security>
		if (l2cap_change_security(chan, result) == 0) {
    c7ca:	2800      	cmp	r0, #0
    c7cc:	f43f ade0 	beq.w	c390 <l2cap_recv+0x80>
		bt_l2cap_chan_remove(conn, &chan->chan);
    c7d0:	4629      	mov	r1, r5
    c7d2:	4640      	mov	r0, r8
    c7d4:	f7ff f8a0 	bl	b918 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(&chan->chan);
    c7d8:	4628      	mov	r0, r5
	bt_l2cap_chan_del(&chan->chan);
    c7da:	f7ff f8b4 	bl	b946 <bt_l2cap_chan_del>
    c7de:	e5d7      	b.n	c390 <l2cap_recv+0x80>
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    c7e0:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    c7e4:	2b01      	cmp	r3, #1
    c7e6:	d9e8      	bls.n	c7ba <l2cap_recv+0x4aa>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    c7e8:	2b02      	cmp	r3, #2
    c7ea:	d101      	bne.n	c7f0 <l2cap_recv+0x4e0>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    c7ec:	2303      	movs	r3, #3
    c7ee:	e7e5      	b.n	c7bc <l2cap_recv+0x4ac>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    c7f0:	2b03      	cmp	r3, #3
    c7f2:	d1ed      	bne.n	c7d0 <l2cap_recv+0x4c0>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    c7f4:	2304      	movs	r3, #4
    c7f6:	e7e1      	b.n	c7bc <l2cap_recv+0x4ac>
	if (buf->len < sizeof(*req)) {
    c7f8:	2a03      	cmp	r2, #3
    c7fa:	d813      	bhi.n	c824 <l2cap_recv+0x514>
		BT_ERR("Too small LE conn req packet size");
    c7fc:	4b3f      	ldr	r3, [pc, #252]	; (c8fc <l2cap_recv+0x5ec>)
    c7fe:	681b      	ldr	r3, [r3, #0]
    c800:	075c      	lsls	r4, r3, #29
    c802:	f43f adc5 	beq.w	c390 <l2cap_recv+0x80>
    c806:	2301      	movs	r3, #1
    c808:	f04f 0200 	mov.w	r2, #0
    c80c:	f363 0202 	bfi	r2, r3, #0, #3
    c810:	493b      	ldr	r1, [pc, #236]	; (c900 <l2cap_recv+0x5f0>)
    c812:	4b3c      	ldr	r3, [pc, #240]	; (c904 <l2cap_recv+0x5f4>)
    c814:	1a5b      	subs	r3, r3, r1
    c816:	f36f 02c5 	bfc	r2, #3, #3
    c81a:	08db      	lsrs	r3, r3, #3
    c81c:	f363 128f 	bfi	r2, r3, #6, #10
    c820:	493c      	ldr	r1, [pc, #240]	; (c914 <l2cap_recv+0x604>)
    c822:	e676      	b.n	c512 <l2cap_recv+0x202>
		le_disconn_req(l2cap, hdr->ident, buf);
    c824:	6837      	ldr	r7, [r6, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    c826:	68ad      	ldr	r5, [r5, #8]
	chan = l2cap_remove_tx_cid(conn, scid);
    c828:	4638      	mov	r0, r7
    c82a:	8869      	ldrh	r1, [r5, #2]
    c82c:	f7fe ffb6 	bl	b79c <l2cap_remove_tx_cid>
	if (!chan) {
    c830:	4606      	mov	r6, r0
    c832:	b990      	cbnz	r0, c85a <l2cap_recv+0x54a>
		data.scid = req->scid;
    c834:	78ea      	ldrb	r2, [r5, #3]
    c836:	78ab      	ldrb	r3, [r5, #2]
    c838:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c83c:	f8ad 3010 	strh.w	r3, [sp, #16]
		data.dcid = req->dcid;
    c840:	786a      	ldrb	r2, [r5, #1]
    c842:	782b      	ldrb	r3, [r5, #0]
    c844:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c848:	f8ad 3012 	strh.w	r3, [sp, #18]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    c84c:	2304      	movs	r3, #4
    c84e:	9300      	str	r3, [sp, #0]
    c850:	2202      	movs	r2, #2
    c852:	ab04      	add	r3, sp, #16
    c854:	4621      	mov	r1, r4
    c856:	4638      	mov	r0, r7
    c858:	e605      	b.n	c466 <l2cap_recv+0x156>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    c85a:	2204      	movs	r2, #4
    c85c:	4621      	mov	r1, r4
    c85e:	2007      	movs	r0, #7
    c860:	f7ff f83e 	bl	b8e0 <l2cap_create_le_sig_pdu.isra.10>
	rsp = net_buf_add(buf, sizeof(*rsp));
    c864:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    c866:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    c868:	3008      	adds	r0, #8
    c86a:	f012 fd51 	bl	1f310 <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    c86e:	8f33      	ldrh	r3, [r6, #56]	; 0x38
    c870:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    c872:	f8b6 3058 	ldrh.w	r3, [r6, #88]	; 0x58
    c876:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    c878:	4630      	mov	r0, r6
    c87a:	f7ff f864 	bl	b946 <bt_l2cap_chan_del>
    c87e:	2300      	movs	r3, #0
    c880:	4622      	mov	r2, r4
    c882:	2105      	movs	r1, #5
    c884:	4638      	mov	r0, r7
    c886:	e68a      	b.n	c59e <l2cap_recv+0x28e>
	if (buf->len < sizeof(*rsp)) {
    c888:	2a03      	cmp	r2, #3
    c88a:	d814      	bhi.n	c8b6 <l2cap_recv+0x5a6>
		BT_ERR("Too small LE disconn rsp packet size");
    c88c:	4b1b      	ldr	r3, [pc, #108]	; (c8fc <l2cap_recv+0x5ec>)
    c88e:	681b      	ldr	r3, [r3, #0]
    c890:	0758      	lsls	r0, r3, #29
    c892:	f43f ad7d 	beq.w	c390 <l2cap_recv+0x80>
    c896:	2301      	movs	r3, #1
    c898:	f04f 0200 	mov.w	r2, #0
    c89c:	f363 0202 	bfi	r2, r3, #0, #3
    c8a0:	4917      	ldr	r1, [pc, #92]	; (c900 <l2cap_recv+0x5f0>)
    c8a2:	4b18      	ldr	r3, [pc, #96]	; (c904 <l2cap_recv+0x5f4>)
    c8a4:	481c      	ldr	r0, [pc, #112]	; (c918 <l2cap_recv+0x608>)
    c8a6:	1a5b      	subs	r3, r3, r1
    c8a8:	f36f 02c5 	bfc	r2, #3, #3
    c8ac:	08db      	lsrs	r3, r3, #3
    c8ae:	f363 128f 	bfi	r2, r3, #6, #10
    c8b2:	491a      	ldr	r1, [pc, #104]	; (c91c <l2cap_recv+0x60c>)
    c8b4:	e547      	b.n	c346 <l2cap_recv+0x36>
	dcid = sys_le16_to_cpu(rsp->dcid);
    c8b6:	68ab      	ldr	r3, [r5, #8]
	chan = l2cap_remove_tx_cid(conn, dcid);
    c8b8:	6830      	ldr	r0, [r6, #0]
    c8ba:	8819      	ldrh	r1, [r3, #0]
    c8bc:	f7fe ff6e 	bl	b79c <l2cap_remove_tx_cid>
	if (!chan) {
    c8c0:	2800      	cmp	r0, #0
    c8c2:	d18a      	bne.n	c7da <l2cap_recv+0x4ca>
    c8c4:	e564      	b.n	c390 <l2cap_recv+0x80>
	if (buf->len < sizeof(*ev)) {
    c8c6:	2a03      	cmp	r2, #3
    c8c8:	d82e      	bhi.n	c928 <l2cap_recv+0x618>
		BT_ERR("Too small LE Credits packet size");
    c8ca:	4b0c      	ldr	r3, [pc, #48]	; (c8fc <l2cap_recv+0x5ec>)
    c8cc:	681b      	ldr	r3, [r3, #0]
    c8ce:	0759      	lsls	r1, r3, #29
    c8d0:	f43f ad5e 	beq.w	c390 <l2cap_recv+0x80>
    c8d4:	2301      	movs	r3, #1
    c8d6:	f04f 0200 	mov.w	r2, #0
    c8da:	f363 0202 	bfi	r2, r3, #0, #3
    c8de:	4908      	ldr	r1, [pc, #32]	; (c900 <l2cap_recv+0x5f0>)
    c8e0:	4b08      	ldr	r3, [pc, #32]	; (c904 <l2cap_recv+0x5f4>)
    c8e2:	480f      	ldr	r0, [pc, #60]	; (c920 <l2cap_recv+0x610>)
    c8e4:	1a5b      	subs	r3, r3, r1
    c8e6:	f36f 02c5 	bfc	r2, #3, #3
    c8ea:	08db      	lsrs	r3, r3, #3
    c8ec:	f363 128f 	bfi	r2, r3, #6, #10
    c8f0:	490c      	ldr	r1, [pc, #48]	; (c924 <l2cap_recv+0x614>)
    c8f2:	e528      	b.n	c346 <l2cap_recv+0x36>
    c8f4:	00031950 	.word	0x00031950
    c8f8:	0000b7e1 	.word	0x0000b7e1
    c8fc:	2000e240 	.word	0x2000e240
    c900:	0002ef38 	.word	0x0002ef38
    c904:	0002efc0 	.word	0x0002efc0
    c908:	00031ce5 	.word	0x00031ce5
    c90c:	000319dd 	.word	0x000319dd
    c910:	00031d0b 	.word	0x00031d0b
    c914:	000319ce 	.word	0x000319ce
    c918:	00031d30 	.word	0x00031d30
    c91c:	000319e9 	.word	0x000319e9
    c920:	00031d59 	.word	0x00031d59
    c924:	000319f8 	.word	0x000319f8
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    c928:	68aa      	ldr	r2, [r5, #8]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    c92a:	6830      	ldr	r0, [r6, #0]
    c92c:	8811      	ldrh	r1, [r2, #0]
    c92e:	f7ff f9dc 	bl	bcea <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    c932:	4604      	mov	r4, r0
    c934:	b9a0      	cbnz	r0, c960 <l2cap_recv+0x650>
		BT_ERR("Unable to find channel of LE Credits packet");
    c936:	4b41      	ldr	r3, [pc, #260]	; (ca3c <l2cap_recv+0x72c>)
    c938:	681b      	ldr	r3, [r3, #0]
    c93a:	075a      	lsls	r2, r3, #29
    c93c:	f43f ad28 	beq.w	c390 <l2cap_recv+0x80>
    c940:	2301      	movs	r3, #1
    c942:	f04f 0200 	mov.w	r2, #0
    c946:	f363 0202 	bfi	r2, r3, #0, #3
    c94a:	493d      	ldr	r1, [pc, #244]	; (ca40 <l2cap_recv+0x730>)
    c94c:	4b3d      	ldr	r3, [pc, #244]	; (ca44 <l2cap_recv+0x734>)
    c94e:	1a5b      	subs	r3, r3, r1
    c950:	f360 02c5 	bfi	r2, r0, #3, #3
    c954:	08db      	lsrs	r3, r3, #3
    c956:	f363 128f 	bfi	r2, r3, #6, #10
    c95a:	493b      	ldr	r1, [pc, #236]	; (ca48 <l2cap_recv+0x738>)
    c95c:	483b      	ldr	r0, [pc, #236]	; (ca4c <l2cap_recv+0x73c>)
    c95e:	e4f2      	b.n	c346 <l2cap_recv+0x36>
	credits = sys_le16_to_cpu(ev->credits);
    c960:	8855      	ldrh	r5, [r2, #2]
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    c962:	6e83      	ldr	r3, [r0, #104]	; 0x68
    c964:	442b      	add	r3, r5
    c966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c96a:	d221      	bcs.n	c9b0 <l2cap_recv+0x6a0>
	while (credits--) {
    c96c:	f64f 76ff 	movw	r6, #65535	; 0xffff
		k_sem_give(&chan->tx.credits);
    c970:	f100 0760 	add.w	r7, r0, #96	; 0x60
	while (credits--) {
    c974:	3d01      	subs	r5, #1
    c976:	b2ad      	uxth	r5, r5
    c978:	42b5      	cmp	r5, r6
    c97a:	d132      	bne.n	c9e2 <l2cap_recv+0x6d2>
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    c97c:	f104 0578 	add.w	r5, r4, #120	; 0x78
		ch->tx_buf = NULL;
    c980:	2600      	movs	r6, #0
	if (ch->tx_buf) {
    c982:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    c986:	b381      	cbz	r1, c9ea <l2cap_recv+0x6da>
		ch->tx_buf = NULL;
    c988:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    c98c:	9104      	str	r1, [sp, #16]
    c98e:	2900      	cmp	r1, #0
    c990:	f43f acfe 	beq.w	c390 <l2cap_recv+0x80>
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    c994:	694a      	ldr	r2, [r1, #20]
    c996:	4620      	mov	r0, r4
    c998:	a904      	add	r1, sp, #16
    c99a:	f7ff f931 	bl	bc00 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    c99e:	2800      	cmp	r0, #0
    c9a0:	daef      	bge.n	c982 <l2cap_recv+0x672>
			if (sent == -EAGAIN) {
    c9a2:	300b      	adds	r0, #11
    c9a4:	f47f acf4 	bne.w	c390 <l2cap_recv+0x80>
				ch->tx_buf = buf;
    c9a8:	9b04      	ldr	r3, [sp, #16]
    c9aa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    c9ae:	e4ef      	b.n	c390 <l2cap_recv+0x80>
		BT_ERR("Credits overflow");
    c9b0:	4b22      	ldr	r3, [pc, #136]	; (ca3c <l2cap_recv+0x72c>)
    c9b2:	681b      	ldr	r3, [r3, #0]
    c9b4:	075b      	lsls	r3, r3, #29
    c9b6:	d010      	beq.n	c9da <l2cap_recv+0x6ca>
    c9b8:	2301      	movs	r3, #1
    c9ba:	f04f 0200 	mov.w	r2, #0
    c9be:	f363 0202 	bfi	r2, r3, #0, #3
    c9c2:	491f      	ldr	r1, [pc, #124]	; (ca40 <l2cap_recv+0x730>)
    c9c4:	4b1f      	ldr	r3, [pc, #124]	; (ca44 <l2cap_recv+0x734>)
    c9c6:	4822      	ldr	r0, [pc, #136]	; (ca50 <l2cap_recv+0x740>)
    c9c8:	1a5b      	subs	r3, r3, r1
    c9ca:	f36f 02c5 	bfc	r2, #3, #3
    c9ce:	08db      	lsrs	r3, r3, #3
    c9d0:	f363 128f 	bfi	r2, r3, #6, #10
    c9d4:	491c      	ldr	r1, [pc, #112]	; (ca48 <l2cap_recv+0x738>)
    c9d6:	f7f5 fb89 	bl	20ec <log_1>
		bt_l2cap_chan_disconnect(chan);
    c9da:	4620      	mov	r0, r4
    c9dc:	f7ff fab4 	bl	bf48 <bt_l2cap_chan_disconnect>
    c9e0:	e4d6      	b.n	c390 <l2cap_recv+0x80>
    c9e2:	4638      	mov	r0, r7
    c9e4:	f021 fc49 	bl	2e27a <_impl_k_sem_give>
    c9e8:	e7c4      	b.n	c974 <l2cap_recv+0x664>
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    c9ea:	4628      	mov	r0, r5
    c9ec:	f012 fc08 	bl	1f200 <net_buf_get>
    c9f0:	4601      	mov	r1, r0
    c9f2:	e7cb      	b.n	c98c <l2cap_recv+0x67c>
	chan = l2cap_remove_ident(conn, ident);
    c9f4:	2201      	movs	r2, #1
    c9f6:	4621      	mov	r1, r4
    c9f8:	6830      	ldr	r0, [r6, #0]
    c9fa:	f7fe fea5 	bl	b748 <__l2cap_lookup_ident>
    c9fe:	e75f      	b.n	c8c0 <l2cap_recv+0x5b0>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    ca00:	4b0e      	ldr	r3, [pc, #56]	; (ca3c <l2cap_recv+0x72c>)
    ca02:	681b      	ldr	r3, [r3, #0]
    ca04:	f003 0307 	and.w	r3, r3, #7
    ca08:	2b01      	cmp	r3, #1
    ca0a:	d911      	bls.n	ca30 <l2cap_recv+0x720>
    ca0c:	2202      	movs	r2, #2
    ca0e:	f04f 0300 	mov.w	r3, #0
    ca12:	f362 0302 	bfi	r3, r2, #0, #3
    ca16:	490b      	ldr	r1, [pc, #44]	; (ca44 <l2cap_recv+0x734>)
    ca18:	4a09      	ldr	r2, [pc, #36]	; (ca40 <l2cap_recv+0x730>)
    ca1a:	1a89      	subs	r1, r1, r2
    ca1c:	08c9      	lsrs	r1, r1, #3
    ca1e:	f36f 03c5 	bfc	r3, #3, #3
    ca22:	f361 138f 	bfi	r3, r1, #6, #10
    ca26:	4602      	mov	r2, r0
    ca28:	490a      	ldr	r1, [pc, #40]	; (ca54 <l2cap_recv+0x744>)
    ca2a:	480b      	ldr	r0, [pc, #44]	; (ca58 <l2cap_recv+0x748>)
    ca2c:	f7f5 fb72 	bl	2114 <log_2>
		l2cap_send_reject(chan->conn, hdr->ident,
    ca30:	2300      	movs	r3, #0
    ca32:	7879      	ldrb	r1, [r7, #1]
    ca34:	9300      	str	r3, [sp, #0]
    ca36:	461a      	mov	r2, r3
    ca38:	6830      	ldr	r0, [r6, #0]
    ca3a:	e514      	b.n	c466 <l2cap_recv+0x156>
    ca3c:	2000e240 	.word	0x2000e240
    ca40:	0002ef38 	.word	0x0002ef38
    ca44:	0002efc0 	.word	0x0002efc0
    ca48:	000319f8 	.word	0x000319f8
    ca4c:	00031d7e 	.word	0x00031d7e
    ca50:	00031dae 	.word	0x00031dae
    ca54:	00031a03 	.word	0x00031a03
    ca58:	00031dc3 	.word	0x00031dc3

0000ca5c <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    ca5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ca5e:	4605      	mov	r5, r0
    ca60:	9101      	str	r1, [sp, #4]
	int err;

	if (!buf) {
    ca62:	b371      	cbz	r1, cac2 <bt_l2cap_chan_send+0x66>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    ca64:	6803      	ldr	r3, [r0, #0]
    ca66:	b37b      	cbz	r3, cac8 <bt_l2cap_chan_send+0x6c>
    ca68:	7b5b      	ldrb	r3, [r3, #13]
    ca6a:	2b04      	cmp	r3, #4
    ca6c:	d12c      	bne.n	cac8 <bt_l2cap_chan_send+0x6c>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    ca6e:	2200      	movs	r2, #0
    ca70:	a901      	add	r1, sp, #4
    ca72:	f7ff f8c5 	bl	bc00 <l2cap_chan_le_send_sdu>
	if (err < 0) {
    ca76:	1e04      	subs	r4, r0, #0
    ca78:	da09      	bge.n	ca8e <bt_l2cap_chan_send+0x32>
		if (err == -EAGAIN) {
    ca7a:	f114 0f0b 	cmn.w	r4, #11
    ca7e:	d109      	bne.n	ca94 <bt_l2cap_chan_send+0x38>
			/* Queue buffer to be sent later */
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    ca80:	9901      	ldr	r1, [sp, #4]
    ca82:	f105 0078 	add.w	r0, r5, #120	; 0x78
    ca86:	f012 fbd8 	bl	1f23a <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    ca8a:	9b01      	ldr	r3, [sp, #4]
    ca8c:	695c      	ldr	r4, [r3, #20]
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    ca8e:	4620      	mov	r0, r4
    ca90:	b003      	add	sp, #12
    ca92:	bd30      	pop	{r4, r5, pc}
		BT_ERR("failed to send message %d", err);
    ca94:	4b0e      	ldr	r3, [pc, #56]	; (cad0 <bt_l2cap_chan_send+0x74>)
    ca96:	681b      	ldr	r3, [r3, #0]
    ca98:	075b      	lsls	r3, r3, #29
    ca9a:	d0f8      	beq.n	ca8e <bt_l2cap_chan_send+0x32>
    ca9c:	2201      	movs	r2, #1
    ca9e:	f04f 0300 	mov.w	r3, #0
    caa2:	f362 0302 	bfi	r3, r2, #0, #3
    caa6:	490b      	ldr	r1, [pc, #44]	; (cad4 <bt_l2cap_chan_send+0x78>)
    caa8:	4a0b      	ldr	r2, [pc, #44]	; (cad8 <bt_l2cap_chan_send+0x7c>)
    caaa:	480c      	ldr	r0, [pc, #48]	; (cadc <bt_l2cap_chan_send+0x80>)
    caac:	1a52      	subs	r2, r2, r1
    caae:	08d2      	lsrs	r2, r2, #3
    cab0:	f36f 03c5 	bfc	r3, #3, #3
    cab4:	f362 138f 	bfi	r3, r2, #6, #10
    cab8:	4909      	ldr	r1, [pc, #36]	; (cae0 <bt_l2cap_chan_send+0x84>)
    caba:	4622      	mov	r2, r4
    cabc:	f7f5 fb2a 	bl	2114 <log_2>
    cac0:	e7e5      	b.n	ca8e <bt_l2cap_chan_send+0x32>
		return -EINVAL;
    cac2:	f06f 0415 	mvn.w	r4, #21
    cac6:	e7e2      	b.n	ca8e <bt_l2cap_chan_send+0x32>
		return -ENOTCONN;
    cac8:	f06f 0438 	mvn.w	r4, #56	; 0x38
    cacc:	e7df      	b.n	ca8e <bt_l2cap_chan_send+0x32>
    cace:	bf00      	nop
    cad0:	2000e240 	.word	0x2000e240
    cad4:	0002ef38 	.word	0x0002ef38
    cad8:	0002efc0 	.word	0x0002efc0
    cadc:	00031a7d 	.word	0x00031a7d
    cae0:	00031a6a 	.word	0x00031a6a

0000cae4 <att_prepare_write_req>:

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    cae4:	2006      	movs	r0, #6
    cae6:	4770      	bx	lr

0000cae8 <att_op_get_type>:
		att_signed_write_cmd },
#endif /* CONFIG_BT_SIGNING */
};

static att_type_t att_op_get_type(u8_t op)
{
    cae8:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    caea:	4a0a      	ldr	r2, [pc, #40]	; (cb14 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    caec:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    caee:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    caf2:	4284      	cmp	r4, r0
    caf4:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    caf8:	d102      	bne.n	cb00 <att_op_get_type+0x18>
			return handlers[i].type;
    cafa:	440a      	add	r2, r1
    cafc:	7890      	ldrb	r0, [r2, #2]
	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
}
    cafe:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    cb00:	3301      	adds	r3, #1
    cb02:	2b1c      	cmp	r3, #28
    cb04:	d1f3      	bne.n	caee <att_op_get_type+0x6>
	return ATT_UNKNOWN;
    cb06:	f010 0f40 	tst.w	r0, #64	; 0x40
    cb0a:	bf14      	ite	ne
    cb0c:	2000      	movne	r0, #0
    cb0e:	2006      	moveq	r0, #6
    cb10:	e7f5      	b.n	cafe <att_op_get_type+0x16>
    cb12:	bf00      	nop
    cb14:	00032048 	.word	0x00032048

0000cb18 <att_req_destroy>:
{
    cb18:	b510      	push	{r4, lr}
    cb1a:	4604      	mov	r4, r0
	if (req->buf) {
    cb1c:	6900      	ldr	r0, [r0, #16]
    cb1e:	b108      	cbz	r0, cb24 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    cb20:	f012 fb98 	bl	1f254 <net_buf_unref>
	if (req->destroy) {
    cb24:	68a3      	ldr	r3, [r4, #8]
    cb26:	b10b      	cbz	r3, cb2c <att_req_destroy+0x14>
		req->destroy(req);
    cb28:	4620      	mov	r0, r4
    cb2a:	4798      	blx	r3
	(void)memset(req, 0, sizeof(*req));
    cb2c:	4620      	mov	r0, r4
    cb2e:	2218      	movs	r2, #24
    cb30:	2100      	movs	r1, #0
}
    cb32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(req, 0, sizeof(*req));
    cb36:	f7fa b8d4 	b.w	6ce2 <memset>

0000cb3a <att_notify>:
{
    cb3a:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    cb3c:	f101 0008 	add.w	r0, r1, #8
    cb40:	f012 fc46 	bl	1f3d0 <net_buf_simple_pull_le16>
}
    cb44:	2000      	movs	r0, #0
    cb46:	bd08      	pop	{r3, pc}

0000cb48 <read_group_cb>:
{
    cb48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    cb4c:	680c      	ldr	r4, [r1, #0]
{
    cb4e:	4606      	mov	r6, r0
    cb50:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    cb52:	f04f 0800 	mov.w	r8, #0
    cb56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    cb5a:	a902      	add	r1, sp, #8
    cb5c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    cb5e:	6827      	ldr	r7, [r4, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    cb60:	f88d 8008 	strb.w	r8, [sp, #8]
    cb64:	f8ad 300a 	strh.w	r3, [sp, #10]
    cb68:	f7fa fe4c 	bl	7804 <bt_uuid_cmp>
    cb6c:	b198      	cbz	r0, cb96 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    cb6e:	f642 0301 	movw	r3, #10241	; 0x2801
    cb72:	a903      	add	r1, sp, #12
    cb74:	6830      	ldr	r0, [r6, #0]
    cb76:	f88d 800c 	strb.w	r8, [sp, #12]
    cb7a:	f8ad 300e 	strh.w	r3, [sp, #14]
    cb7e:	f7fa fe41 	bl	7804 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    cb82:	b140      	cbz	r0, cb96 <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    cb84:	692b      	ldr	r3, [r5, #16]
    cb86:	b123      	cbz	r3, cb92 <read_group_cb+0x4a>
    cb88:	8a32      	ldrh	r2, [r6, #16]
    cb8a:	8859      	ldrh	r1, [r3, #2]
    cb8c:	4291      	cmp	r1, r2
    cb8e:	d200      	bcs.n	cb92 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    cb90:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    cb92:	2001      	movs	r0, #1
    cb94:	e012      	b.n	cbbc <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    cb96:	6869      	ldr	r1, [r5, #4]
    cb98:	6830      	ldr	r0, [r6, #0]
    cb9a:	f7fa fe33 	bl	7804 <bt_uuid_cmp>
    cb9e:	b110      	cbz	r0, cba6 <read_group_cb+0x5e>
		data->group = NULL;
    cba0:	2300      	movs	r3, #0
    cba2:	612b      	str	r3, [r5, #16]
    cba4:	e7f5      	b.n	cb92 <read_group_cb+0x4a>
	if (data->rsp->len &&
    cba6:	68eb      	ldr	r3, [r5, #12]
    cba8:	68a8      	ldr	r0, [r5, #8]
    cbaa:	781a      	ldrb	r2, [r3, #0]
    cbac:	b14a      	cbz	r2, cbc2 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    cbae:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    cbb2:	8981      	ldrh	r1, [r0, #12]
    cbb4:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    cbb6:	4293      	cmp	r3, r2
    cbb8:	da03      	bge.n	cbc2 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    cbba:	2000      	movs	r0, #0
}
    cbbc:	b004      	add	sp, #16
    cbbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    cbc2:	2104      	movs	r1, #4
    cbc4:	3008      	adds	r0, #8
    cbc6:	f012 fba3 	bl	1f310 <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    cbca:	68a9      	ldr	r1, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    cbcc:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    cbce:	898a      	ldrh	r2, [r1, #12]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    cbd0:	6128      	str	r0, [r5, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    cbd2:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    cbd4:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    cbd6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    cbda:	6889      	ldr	r1, [r1, #8]
    cbdc:	2400      	movs	r4, #0
    cbde:	1a9b      	subs	r3, r3, r2
    cbe0:	9400      	str	r4, [sp, #0]
    cbe2:	440a      	add	r2, r1
    cbe4:	f8d6 8004 	ldr.w	r8, [r6, #4]
    cbe8:	4631      	mov	r1, r6
    cbea:	b29b      	uxth	r3, r3
    cbec:	4638      	mov	r0, r7
    cbee:	47c0      	blx	r8
	if (read < 0) {
    cbf0:	1e01      	subs	r1, r0, #0
    cbf2:	dbe2      	blt.n	cbba <read_group_cb+0x72>
	if (!data->rsp->len) {
    cbf4:	68ee      	ldr	r6, [r5, #12]
    cbf6:	68ab      	ldr	r3, [r5, #8]
    cbf8:	7830      	ldrb	r0, [r6, #0]
    cbfa:	1d0a      	adds	r2, r1, #4
    cbfc:	b928      	cbnz	r0, cc0a <read_group_cb+0xc2>
		data->rsp->len = read + sizeof(*data->group);
    cbfe:	7032      	strb	r2, [r6, #0]
	net_buf_add(data->buf, read);
    cc00:	f103 0008 	add.w	r0, r3, #8
    cc04:	f012 fb84 	bl	1f310 <net_buf_simple_add>
    cc08:	e7c3      	b.n	cb92 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    cc0a:	4290      	cmp	r0, r2
    cc0c:	d0f8      	beq.n	cc00 <read_group_cb+0xb8>
		data->buf->len -= sizeof(*data->group);
    cc0e:	899a      	ldrh	r2, [r3, #12]
    cc10:	3a04      	subs	r2, #4
    cc12:	819a      	strh	r2, [r3, #12]
    cc14:	e7d1      	b.n	cbba <read_group_cb+0x72>

0000cc16 <find_info_cb>:
	if (!data->rsp) {
    cc16:	688b      	ldr	r3, [r1, #8]
{
    cc18:	b570      	push	{r4, r5, r6, lr}
    cc1a:	4605      	mov	r5, r0
    cc1c:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    cc1e:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    cc20:	b963      	cbnz	r3, cc3c <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    cc22:	6848      	ldr	r0, [r1, #4]
    cc24:	2101      	movs	r1, #1
    cc26:	3008      	adds	r0, #8
    cc28:	f012 fb72 	bl	1f310 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    cc2c:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    cc2e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    cc30:	781b      	ldrb	r3, [r3, #0]
    cc32:	2b00      	cmp	r3, #0
    cc34:	bf0c      	ite	eq
    cc36:	2301      	moveq	r3, #1
    cc38:	2302      	movne	r3, #2
    cc3a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    cc3c:	68a3      	ldr	r3, [r4, #8]
    cc3e:	781b      	ldrb	r3, [r3, #0]
    cc40:	2b01      	cmp	r3, #1
    cc42:	d003      	beq.n	cc4c <find_info_cb+0x36>
    cc44:	2b02      	cmp	r3, #2
    cc46:	d01a      	beq.n	cc7e <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    cc48:	2000      	movs	r0, #0
    cc4a:	e017      	b.n	cc7c <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    cc4c:	682b      	ldr	r3, [r5, #0]
    cc4e:	781b      	ldrb	r3, [r3, #0]
    cc50:	2b00      	cmp	r3, #0
    cc52:	d1f9      	bne.n	cc48 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    cc54:	6860      	ldr	r0, [r4, #4]
    cc56:	2104      	movs	r1, #4
    cc58:	3008      	adds	r0, #8
    cc5a:	f012 fb59 	bl	1f310 <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    cc5e:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    cc60:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    cc62:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    cc64:	682b      	ldr	r3, [r5, #0]
    cc66:	885b      	ldrh	r3, [r3, #2]
    cc68:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    cc6a:	6863      	ldr	r3, [r4, #4]
    cc6c:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    cc70:	899b      	ldrh	r3, [r3, #12]
    cc72:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    cc74:	2804      	cmp	r0, #4
    cc76:	bf94      	ite	ls
    cc78:	2000      	movls	r0, #0
    cc7a:	2001      	movhi	r0, #1
}
    cc7c:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    cc7e:	682b      	ldr	r3, [r5, #0]
    cc80:	781b      	ldrb	r3, [r3, #0]
    cc82:	2b02      	cmp	r3, #2
    cc84:	d1e0      	bne.n	cc48 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    cc86:	6860      	ldr	r0, [r4, #4]
    cc88:	2112      	movs	r1, #18
    cc8a:	3008      	adds	r0, #8
    cc8c:	f012 fb40 	bl	1f310 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    cc90:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    cc92:	8a2b      	ldrh	r3, [r5, #16]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    cc94:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    cc96:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    cc98:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    cc9c:	3101      	adds	r1, #1
    cc9e:	f7f9 fff3 	bl	6c88 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    cca2:	6863      	ldr	r3, [r4, #4]
    cca4:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    cca8:	899b      	ldrh	r3, [r3, #12]
    ccaa:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    ccac:	2812      	cmp	r0, #18
    ccae:	e7e2      	b.n	cc76 <find_info_cb+0x60>

0000ccb0 <find_type_cb>:
{
    ccb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    ccb4:	680e      	ldr	r6, [r1, #0]
{
    ccb6:	b088      	sub	sp, #32
    ccb8:	4605      	mov	r5, r0
    ccba:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    ccbc:	2700      	movs	r7, #0
    ccbe:	f642 0301 	movw	r3, #10241	; 0x2801
    ccc2:	a902      	add	r1, sp, #8
    ccc4:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    ccc6:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    ccca:	f88d 7008 	strb.w	r7, [sp, #8]
    ccce:	f8ad 300a 	strh.w	r3, [sp, #10]
    ccd2:	f7fa fd97 	bl	7804 <bt_uuid_cmp>
    ccd6:	b928      	cbnz	r0, cce4 <find_type_cb+0x34>
		data->group = NULL;
    ccd8:	2300      	movs	r3, #0
    ccda:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    ccdc:	2001      	movs	r0, #1
}
    ccde:	b008      	add	sp, #32
    cce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    cce4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    cce8:	a903      	add	r1, sp, #12
    ccea:	6828      	ldr	r0, [r5, #0]
    ccec:	f88d 700c 	strb.w	r7, [sp, #12]
    ccf0:	f8ad 300e 	strh.w	r3, [sp, #14]
    ccf4:	f7fa fd86 	bl	7804 <bt_uuid_cmp>
    ccf8:	b140      	cbz	r0, cd0c <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    ccfa:	68a3      	ldr	r3, [r4, #8]
    ccfc:	2b00      	cmp	r3, #0
    ccfe:	d0ed      	beq.n	ccdc <find_type_cb+0x2c>
    cd00:	8a2a      	ldrh	r2, [r5, #16]
    cd02:	8859      	ldrh	r1, [r3, #2]
    cd04:	4291      	cmp	r1, r2
    cd06:	d2e9      	bcs.n	ccdc <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    cd08:	805a      	strh	r2, [r3, #2]
    cd0a:	e7e7      	b.n	ccdc <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    cd0c:	6862      	ldr	r2, [r4, #4]
    cd0e:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    cd12:	8992      	ldrh	r2, [r2, #12]
    cd14:	1a9b      	subs	r3, r3, r2
    cd16:	2b03      	cmp	r3, #3
    cd18:	d9e1      	bls.n	ccde <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    cd1a:	2310      	movs	r3, #16
    cd1c:	9000      	str	r0, [sp, #0]
    cd1e:	686e      	ldr	r6, [r5, #4]
    cd20:	eb0d 0203 	add.w	r2, sp, r3
    cd24:	4629      	mov	r1, r5
    cd26:	4640      	mov	r0, r8
    cd28:	47b0      	blx	r6
	if (read < 0) {
    cd2a:	2800      	cmp	r0, #0
    cd2c:	dbd4      	blt.n	ccd8 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    cd2e:	7c22      	ldrb	r2, [r4, #16]
    cd30:	4282      	cmp	r2, r0
    cd32:	d1d1      	bne.n	ccd8 <find_type_cb+0x28>
    cd34:	a904      	add	r1, sp, #16
    cd36:	68e0      	ldr	r0, [r4, #12]
    cd38:	f7f9 ff7f 	bl	6c3a <memcmp>
    cd3c:	2800      	cmp	r0, #0
    cd3e:	d1cb      	bne.n	ccd8 <find_type_cb+0x28>
	data->err = 0x00;
    cd40:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    cd42:	6860      	ldr	r0, [r4, #4]
    cd44:	2104      	movs	r1, #4
    cd46:	3008      	adds	r0, #8
    cd48:	f012 fae2 	bl	1f310 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    cd4c:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    cd4e:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    cd50:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    cd52:	8043      	strh	r3, [r0, #2]
    cd54:	e7c2      	b.n	ccdc <find_type_cb+0x2c>
	...

0000cd58 <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    cd58:	b510      	push	{r4, lr}

#if CONFIG_BT_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    cd5a:	2317      	movs	r3, #23
{
    cd5c:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    cd5e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    cd62:	8743      	strh	r3, [r0, #58]	; 0x3a

	k_delayed_work_init(&att->timeout_work, att_timeout);
    cd64:	4905      	ldr	r1, [pc, #20]	; (cd7c <bt_att_connected+0x24>)
    cd66:	30a4      	adds	r0, #164	; 0xa4
    cd68:	f021 fc78 	bl	2e65c <k_delayed_work_init>
	list->head = NULL;
    cd6c:	2300      	movs	r3, #0
	list->tail = NULL;
    cd6e:	e9c4 3327 	strd	r3, r3, [r4, #156]	; 0x9c
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
    cd72:	6820      	ldr	r0, [r4, #0]
}
    cd74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    cd78:	f001 be24 	b.w	e9c4 <bt_gatt_connected>
    cd7c:	0000d3a1 	.word	0x0000d3a1

0000cd80 <check_perm>:
{
    cd80:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
    cd82:	07d4      	lsls	r4, r2, #31
    cd84:	7c8b      	ldrb	r3, [r1, #18]
    cd86:	d504      	bpl.n	cd92 <check_perm+0x12>
    cd88:	f013 0f15 	tst.w	r3, #21
    cd8c:	d018      	beq.n	cdc0 <check_perm+0x40>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    cd8e:	684c      	ldr	r4, [r1, #4]
    cd90:	b1b4      	cbz	r4, cdc0 <check_perm+0x40>
	if ((mask & BT_GATT_PERM_WRITE) &&
    cd92:	0794      	lsls	r4, r2, #30
    cd94:	d504      	bpl.n	cda0 <check_perm+0x20>
    cd96:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    cd9a:	d013      	beq.n	cdc4 <check_perm+0x44>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    cd9c:	6889      	ldr	r1, [r1, #8]
    cd9e:	b189      	cbz	r1, cdc4 <check_perm+0x44>
	mask &= attr->perm;
    cda0:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    cda2:	f012 0f30 	tst.w	r2, #48	; 0x30
    cda6:	d002      	beq.n	cdae <check_perm+0x2e>
		if (conn->sec_level < BT_SECURITY_HIGH) {
    cda8:	7a43      	ldrb	r3, [r0, #9]
    cdaa:	2b02      	cmp	r3, #2
    cdac:	d90c      	bls.n	cdc8 <check_perm+0x48>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    cdae:	f012 020c 	ands.w	r2, r2, #12
    cdb2:	d00b      	beq.n	cdcc <check_perm+0x4c>
		if (!conn->encrypt) {
    cdb4:	7ac3      	ldrb	r3, [r0, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    cdb6:	2b00      	cmp	r3, #0
    cdb8:	bf14      	ite	ne
    cdba:	2000      	movne	r0, #0
    cdbc:	200f      	moveq	r0, #15
}
    cdbe:	bd10      	pop	{r4, pc}
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    cdc0:	2002      	movs	r0, #2
    cdc2:	e7fc      	b.n	cdbe <check_perm+0x3e>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    cdc4:	2003      	movs	r0, #3
    cdc6:	e7fa      	b.n	cdbe <check_perm+0x3e>
			return BT_ATT_ERR_AUTHENTICATION;
    cdc8:	2005      	movs	r0, #5
    cdca:	e7f8      	b.n	cdbe <check_perm+0x3e>
	return 0;
    cdcc:	4610      	mov	r0, r2
    cdce:	e7f6      	b.n	cdbe <check_perm+0x3e>

0000cdd0 <read_type_cb>:
{
    cdd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    cdd4:	680f      	ldr	r7, [r1, #0]
{
    cdd6:	4605      	mov	r5, r0
    cdd8:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    cdda:	6800      	ldr	r0, [r0, #0]
    cddc:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    cdde:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    cde2:	f7fa fd0f 	bl	7804 <bt_uuid_cmp>
    cde6:	4680      	mov	r8, r0
    cde8:	2800      	cmp	r0, #0
    cdea:	d14c      	bne.n	ce86 <read_type_cb+0xb6>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    cdec:	2215      	movs	r2, #21
    cdee:	4629      	mov	r1, r5
    cdf0:	4648      	mov	r0, r9
    cdf2:	f7ff ffc5 	bl	cd80 <check_perm>
    cdf6:	4604      	mov	r4, r0
    cdf8:	7530      	strb	r0, [r6, #20]
	if (data->err) {
    cdfa:	b148      	cbz	r0, ce10 <read_type_cb+0x40>
		if (data->rsp->len) {
    cdfc:	68f3      	ldr	r3, [r6, #12]
    cdfe:	781c      	ldrb	r4, [r3, #0]
    ce00:	b114      	cbz	r4, ce08 <read_type_cb+0x38>
			data->err = 0x00;
    ce02:	f886 8014 	strb.w	r8, [r6, #20]
		return BT_GATT_ITER_STOP;
    ce06:	4644      	mov	r4, r8
}
    ce08:	4620      	mov	r0, r4
    ce0a:	b003      	add	sp, #12
    ce0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    ce10:	68b0      	ldr	r0, [r6, #8]
    ce12:	2102      	movs	r1, #2
    ce14:	3008      	adds	r0, #8
    ce16:	f012 fa7b 	bl	1f310 <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    ce1a:	68b1      	ldr	r1, [r6, #8]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    ce1c:	8a2b      	ldrh	r3, [r5, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    ce1e:	898a      	ldrh	r2, [r1, #12]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    ce20:	6130      	str	r0, [r6, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    ce22:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    ce24:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    ce28:	6889      	ldr	r1, [r1, #8]
    ce2a:	9400      	str	r4, [sp, #0]
    ce2c:	1a9b      	subs	r3, r3, r2
    ce2e:	f8d5 8004 	ldr.w	r8, [r5, #4]
    ce32:	440a      	add	r2, r1
    ce34:	b29b      	uxth	r3, r3
    ce36:	4629      	mov	r1, r5
    ce38:	4648      	mov	r0, r9
    ce3a:	47c0      	blx	r8
	if (read < 0) {
    ce3c:	1e01      	subs	r1, r0, #0
    ce3e:	da07      	bge.n	ce50 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    ce40:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
    ce44:	bf26      	itte	cs
    ce46:	4249      	negcs	r1, r1
    ce48:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    ce4a:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
    ce4c:	7531      	strb	r1, [r6, #20]
		return BT_GATT_ITER_STOP;
    ce4e:	e7db      	b.n	ce08 <read_type_cb+0x38>
	if (!data->rsp->len) {
    ce50:	68f5      	ldr	r5, [r6, #12]
    ce52:	68b0      	ldr	r0, [r6, #8]
    ce54:	782a      	ldrb	r2, [r5, #0]
    ce56:	1c8b      	adds	r3, r1, #2
    ce58:	b97a      	cbnz	r2, ce7a <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    ce5a:	702b      	strb	r3, [r5, #0]
	net_buf_add(data->buf, read);
    ce5c:	3008      	adds	r0, #8
    ce5e:	f012 fa57 	bl	1f310 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    ce62:	68b3      	ldr	r3, [r6, #8]
    ce64:	f8b7 405a 	ldrh.w	r4, [r7, #90]	; 0x5a
    ce68:	899b      	ldrh	r3, [r3, #12]
    ce6a:	1ae4      	subs	r4, r4, r3
    ce6c:	68f3      	ldr	r3, [r6, #12]
    ce6e:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    ce70:	429c      	cmp	r4, r3
    ce72:	bfd4      	ite	le
    ce74:	2400      	movle	r4, #0
    ce76:	2401      	movgt	r4, #1
    ce78:	e7c6      	b.n	ce08 <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    ce7a:	429a      	cmp	r2, r3
    ce7c:	d0ee      	beq.n	ce5c <read_type_cb+0x8c>
		data->buf->len -= sizeof(*data->item);
    ce7e:	8983      	ldrh	r3, [r0, #12]
    ce80:	3b02      	subs	r3, #2
    ce82:	8183      	strh	r3, [r0, #12]
		return BT_GATT_ITER_STOP;
    ce84:	e7c0      	b.n	ce08 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    ce86:	2401      	movs	r4, #1
    ce88:	e7be      	b.n	ce08 <read_type_cb+0x38>
	...

0000ce8c <att_cb.isra.6>:
static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    ce8c:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    ce8e:	7800      	ldrb	r0, [r0, #0]
    ce90:	f7ff fe2a 	bl	cae8 <att_op_get_type>
    ce94:	3801      	subs	r0, #1
    ce96:	b2c0      	uxtb	r0, r0
    ce98:	2804      	cmp	r0, #4
    ce9a:	bf96      	itet	ls
    ce9c:	4b02      	ldrls	r3, [pc, #8]	; (cea8 <att_cb.isra.6+0x1c>)
    ce9e:	4803      	ldrhi	r0, [pc, #12]	; (ceac <att_cb.isra.6+0x20>)
    cea0:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}
    cea4:	bd08      	pop	{r3, pc}
    cea6:	bf00      	nop
    cea8:	00031e04 	.word	0x00031e04
    ceac:	0000d05d 	.word	0x0000d05d

0000ceb0 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    ceb0:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    ceb2:	4d16      	ldr	r5, [pc, #88]	; (cf0c <bt_att_accept+0x5c>)
    ceb4:	682c      	ldr	r4, [r5, #0]
{
    ceb6:	4602      	mov	r2, r0
    ceb8:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    ceba:	b97c      	cbnz	r4, cedc <bt_att_accept+0x2c>
			continue;
		}

		(void)memset(att, 0, sizeof(*att));
    cebc:	22dc      	movs	r2, #220	; 0xdc
    cebe:	4621      	mov	r1, r4
    cec0:	4628      	mov	r0, r5
    cec2:	f7f9 ff0e 	bl	6ce2 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    cec6:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    cec8:	4b11      	ldr	r3, [pc, #68]	; (cf10 <bt_att_accept+0x60>)
    ceca:	606b      	str	r3, [r5, #4]
    cecc:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    ced0:	4611      	mov	r1, r2
    ced2:	f021 f9c9 	bl	2e268 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    ced6:	6035      	str	r5, [r6, #0]

		return 0;
    ced8:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    ceda:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    cedc:	4b0d      	ldr	r3, [pc, #52]	; (cf14 <bt_att_accept+0x64>)
    cede:	681b      	ldr	r3, [r3, #0]
    cee0:	075b      	lsls	r3, r3, #29
    cee2:	d010      	beq.n	cf06 <bt_att_accept+0x56>
    cee4:	2101      	movs	r1, #1
    cee6:	f04f 0300 	mov.w	r3, #0
    ceea:	f361 0302 	bfi	r3, r1, #0, #3
    ceee:	480a      	ldr	r0, [pc, #40]	; (cf18 <bt_att_accept+0x68>)
    cef0:	490a      	ldr	r1, [pc, #40]	; (cf1c <bt_att_accept+0x6c>)
    cef2:	1a09      	subs	r1, r1, r0
    cef4:	08c9      	lsrs	r1, r1, #3
    cef6:	f36f 03c5 	bfc	r3, #3, #3
    cefa:	f361 138f 	bfi	r3, r1, #6, #10
    cefe:	4808      	ldr	r0, [pc, #32]	; (cf20 <bt_att_accept+0x70>)
    cf00:	4908      	ldr	r1, [pc, #32]	; (cf24 <bt_att_accept+0x74>)
    cf02:	f7f5 f907 	bl	2114 <log_2>
	return -ENOMEM;
    cf06:	f06f 000b 	mvn.w	r0, #11
    cf0a:	e7e6      	b.n	ceda <bt_att_accept+0x2a>
    cf0c:	20000d18 	.word	0x20000d18
    cf10:	2000d8dc 	.word	0x2000d8dc
    cf14:	2000e200 	.word	0x2000e200
    cf18:	0002ef38 	.word	0x0002ef38
    cf1c:	0002ef40 	.word	0x0002ef40
    cf20:	00031f52 	.word	0x00031f52
    cf24:	00031e65 	.word	0x00031e65

0000cf28 <uuid_create>:
	switch (buf->len) {
    cf28:	898a      	ldrh	r2, [r1, #12]
    cf2a:	2a02      	cmp	r2, #2
{
    cf2c:	b510      	push	{r4, lr}
    cf2e:	4604      	mov	r4, r0
	switch (buf->len) {
    cf30:	d003      	beq.n	cf3a <uuid_create+0x12>
    cf32:	2a10      	cmp	r2, #16
    cf34:	d00a      	beq.n	cf4c <uuid_create+0x24>
	return false;
    cf36:	2000      	movs	r0, #0
    cf38:	e007      	b.n	cf4a <uuid_create+0x22>
		uuid->type = BT_UUID_TYPE_16;
    cf3a:	2300      	movs	r3, #0
    cf3c:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    cf3e:	f101 0008 	add.w	r0, r1, #8
    cf42:	f012 fa45 	bl	1f3d0 <net_buf_simple_pull_le16>
    cf46:	8060      	strh	r0, [r4, #2]
		return true;
    cf48:	2001      	movs	r0, #1
}
    cf4a:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    cf4c:	2302      	movs	r3, #2
    cf4e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    cf52:	6889      	ldr	r1, [r1, #8]
    cf54:	f7f9 fe98 	bl	6c88 <memcpy>
    cf58:	e7f6      	b.n	cf48 <uuid_create+0x20>
	...

0000cf5c <att_req_sent>:
{
    cf5c:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    cf5e:	2104      	movs	r1, #4
    cf60:	f7fe fec3 	bl	bcea <bt_l2cap_le_lookup_tx_cid>
    cf64:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    cf66:	30c4      	adds	r0, #196	; 0xc4
    cf68:	f021 f987 	bl	2e27a <_impl_k_sem_give>
	if (att->req) {
    cf6c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    cf70:	b143      	cbz	r3, cf84 <att_req_sent+0x28>
    cf72:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    cf76:	f247 5230 	movw	r2, #30000	; 0x7530
    cf7a:	4803      	ldr	r0, [pc, #12]	; (cf88 <att_req_sent+0x2c>)
}
    cf7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cf80:	f021 bbc4 	b.w	2e70c <k_delayed_work_submit_to_queue>
    cf84:	bd10      	pop	{r4, pc}
    cf86:	bf00      	nop
    cf88:	200037b0 	.word	0x200037b0

0000cf8c <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    cf8c:	7b41      	ldrb	r1, [r0, #13]
    cf8e:	2904      	cmp	r1, #4
{
    cf90:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    cf92:	d019      	beq.n	cfc8 <att_chan_get+0x3c>
		BT_WARN("Not connected");
    cf94:	4b29      	ldr	r3, [pc, #164]	; (d03c <att_chan_get+0xb0>)
    cf96:	681b      	ldr	r3, [r3, #0]
    cf98:	f003 0307 	and.w	r3, r3, #7
    cf9c:	2b01      	cmp	r3, #1
    cf9e:	d801      	bhi.n	cfa4 <att_chan_get+0x18>
		return NULL;
    cfa0:	2400      	movs	r4, #0
    cfa2:	e02a      	b.n	cffa <att_chan_get+0x6e>
		BT_WARN("Not connected");
    cfa4:	2302      	movs	r3, #2
    cfa6:	f04f 0200 	mov.w	r2, #0
    cfaa:	f363 0202 	bfi	r2, r3, #0, #3
    cfae:	4924      	ldr	r1, [pc, #144]	; (d040 <att_chan_get+0xb4>)
    cfb0:	4b24      	ldr	r3, [pc, #144]	; (d044 <att_chan_get+0xb8>)
    cfb2:	4825      	ldr	r0, [pc, #148]	; (d048 <att_chan_get+0xbc>)
    cfb4:	1a5b      	subs	r3, r3, r1
    cfb6:	f36f 02c5 	bfc	r2, #3, #3
    cfba:	08db      	lsrs	r3, r3, #3
    cfbc:	4923      	ldr	r1, [pc, #140]	; (d04c <att_chan_get+0xc0>)
    cfbe:	f363 128f 	bfi	r2, r3, #6, #10
		BT_WARN("ATT context flagged as disconnected");
    cfc2:	f7f5 f893 	bl	20ec <log_1>
    cfc6:	e7eb      	b.n	cfa0 <att_chan_get+0x14>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    cfc8:	f7fe fe9a 	bl	bd00 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    cfcc:	4604      	mov	r4, r0
    cfce:	b9b0      	cbnz	r0, cffe <att_chan_get+0x72>
		BT_ERR("Unable to find ATT channel");
    cfd0:	4b1a      	ldr	r3, [pc, #104]	; (d03c <att_chan_get+0xb0>)
    cfd2:	681b      	ldr	r3, [r3, #0]
    cfd4:	075a      	lsls	r2, r3, #29
    cfd6:	d0e3      	beq.n	cfa0 <att_chan_get+0x14>
    cfd8:	2301      	movs	r3, #1
    cfda:	f04f 0200 	mov.w	r2, #0
    cfde:	f363 0202 	bfi	r2, r3, #0, #3
    cfe2:	4917      	ldr	r1, [pc, #92]	; (d040 <att_chan_get+0xb4>)
    cfe4:	4b17      	ldr	r3, [pc, #92]	; (d044 <att_chan_get+0xb8>)
    cfe6:	1a5b      	subs	r3, r3, r1
    cfe8:	f360 02c5 	bfi	r2, r0, #3, #3
    cfec:	08db      	lsrs	r3, r3, #3
    cfee:	f363 128f 	bfi	r2, r3, #6, #10
    cff2:	4916      	ldr	r1, [pc, #88]	; (d04c <att_chan_get+0xc0>)
    cff4:	4816      	ldr	r0, [pc, #88]	; (d050 <att_chan_get+0xc4>)
    cff6:	f7f5 f879 	bl	20ec <log_1>
}
    cffa:	4620      	mov	r0, r4
    cffc:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cffe:	f3bf 8f5b 	dmb	ish
    d002:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    d006:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    d00a:	075b      	lsls	r3, r3, #29
    d00c:	d5f5      	bpl.n	cffa <att_chan_get+0x6e>
		BT_WARN("ATT context flagged as disconnected");
    d00e:	4b0b      	ldr	r3, [pc, #44]	; (d03c <att_chan_get+0xb0>)
    d010:	681b      	ldr	r3, [r3, #0]
    d012:	f003 0307 	and.w	r3, r3, #7
    d016:	2b01      	cmp	r3, #1
    d018:	d9c2      	bls.n	cfa0 <att_chan_get+0x14>
    d01a:	2302      	movs	r3, #2
    d01c:	f04f 0200 	mov.w	r2, #0
    d020:	f363 0202 	bfi	r2, r3, #0, #3
    d024:	4906      	ldr	r1, [pc, #24]	; (d040 <att_chan_get+0xb4>)
    d026:	4b07      	ldr	r3, [pc, #28]	; (d044 <att_chan_get+0xb8>)
    d028:	480a      	ldr	r0, [pc, #40]	; (d054 <att_chan_get+0xc8>)
    d02a:	1a5b      	subs	r3, r3, r1
    d02c:	f36f 02c5 	bfc	r2, #3, #3
    d030:	08db      	lsrs	r3, r3, #3
    d032:	f363 128f 	bfi	r2, r3, #6, #10
    d036:	4905      	ldr	r1, [pc, #20]	; (d04c <att_chan_get+0xc0>)
    d038:	e7c3      	b.n	cfc2 <att_chan_get+0x36>
    d03a:	bf00      	nop
    d03c:	2000e200 	.word	0x2000e200
    d040:	0002ef38 	.word	0x0002ef38
    d044:	0002ef40 	.word	0x0002ef40
    d048:	00031ea4 	.word	0x00031ea4
    d04c:	00031e24 	.word	0x00031e24
    d050:	00031eb6 	.word	0x00031eb6
    d054:	00031ed5 	.word	0x00031ed5

0000d058 <att_exec_write_req>:
    d058:	2006      	movs	r0, #6
    d05a:	4770      	bx	lr

0000d05c <att_pdu_sent>:
{
    d05c:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    d05e:	2104      	movs	r1, #4
    d060:	f7fe fe43 	bl	bcea <bt_l2cap_le_lookup_tx_cid>
}
    d064:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d068:	30c4      	adds	r0, #196	; 0xc4
    d06a:	f021 b906 	b.w	2e27a <_impl_k_sem_give>

0000d06e <att_rsp_sent>:
{
    d06e:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    d070:	2104      	movs	r1, #4
    d072:	f7fe fe3a 	bl	bcea <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d076:	f3bf 8f5b 	dmb	ish
    d07a:	f100 0394 	add.w	r3, r0, #148	; 0x94
    d07e:	e853 2f00 	ldrex	r2, [r3]
    d082:	f022 0201 	bic.w	r2, r2, #1
    d086:	e843 2100 	strex	r1, r2, [r3]
    d08a:	2900      	cmp	r1, #0
    d08c:	d1f7      	bne.n	d07e <att_rsp_sent+0x10>
    d08e:	f3bf 8f5b 	dmb	ish
    d092:	30c4      	adds	r0, #196	; 0xc4
}
    d094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d098:	f021 b8ef 	b.w	2e27a <_impl_k_sem_give>

0000d09c <att_cfm_sent>:
{
    d09c:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    d09e:	2104      	movs	r1, #4
    d0a0:	f7fe fe23 	bl	bcea <bt_l2cap_le_lookup_tx_cid>
    d0a4:	f3bf 8f5b 	dmb	ish
    d0a8:	f100 0394 	add.w	r3, r0, #148	; 0x94
    d0ac:	e853 2f00 	ldrex	r2, [r3]
    d0b0:	f022 0202 	bic.w	r2, r2, #2
    d0b4:	e843 2100 	strex	r1, r2, [r3]
    d0b8:	2900      	cmp	r1, #0
    d0ba:	d1f7      	bne.n	d0ac <att_cfm_sent+0x10>
    d0bc:	f3bf 8f5b 	dmb	ish
    d0c0:	30c4      	adds	r0, #196	; 0xc4
}
    d0c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d0c6:	f021 b8d8 	b.w	2e27a <_impl_k_sem_give>

0000d0ca <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    d0ca:	6803      	ldr	r3, [r0, #0]
    d0cc:	7b5b      	ldrb	r3, [r3, #13]
    d0ce:	2b04      	cmp	r3, #4
    d0d0:	d10a      	bne.n	d0e8 <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d0d2:	f3bf 8f5b 	dmb	ish
    d0d6:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    d0da:	f3bf 8f5b 	dmb	ish
    d0de:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    d0e2:	f000 0001 	and.w	r0, r0, #1
    d0e6:	4770      	bx	lr
    d0e8:	2001      	movs	r0, #1
}
    d0ea:	4770      	bx	lr

0000d0ec <att_send_req>:
{
    d0ec:	b570      	push	{r4, r5, r6, lr}
    d0ee:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    d0f0:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
	att->req = req;
    d0f4:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    d0f8:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    d0fa:	4630      	mov	r0, r6
    d0fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d100:	f021 f8e2 	bl	2e2c8 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    d104:	4628      	mov	r0, r5
    d106:	f7ff ffe0 	bl	d0ca <att_is_connected>
    d10a:	b9e0      	cbnz	r0, d146 <att_send_req+0x5a>
		BT_WARN("Disconnected");
    d10c:	4b1a      	ldr	r3, [pc, #104]	; (d178 <att_send_req+0x8c>)
    d10e:	681b      	ldr	r3, [r3, #0]
    d110:	f003 0307 	and.w	r3, r3, #7
    d114:	2b01      	cmp	r3, #1
    d116:	d910      	bls.n	d13a <att_send_req+0x4e>
    d118:	2302      	movs	r3, #2
    d11a:	f04f 0200 	mov.w	r2, #0
    d11e:	f363 0202 	bfi	r2, r3, #0, #3
    d122:	4916      	ldr	r1, [pc, #88]	; (d17c <att_send_req+0x90>)
    d124:	4b16      	ldr	r3, [pc, #88]	; (d180 <att_send_req+0x94>)
    d126:	1a5b      	subs	r3, r3, r1
    d128:	f360 02c5 	bfi	r2, r0, #3, #3
    d12c:	08db      	lsrs	r3, r3, #3
    d12e:	f363 128f 	bfi	r2, r3, #6, #10
    d132:	4914      	ldr	r1, [pc, #80]	; (d184 <att_send_req+0x98>)
    d134:	4814      	ldr	r0, [pc, #80]	; (d188 <att_send_req+0x9c>)
    d136:	f7f4 ffd9 	bl	20ec <log_1>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    d13a:	4630      	mov	r0, r6
    d13c:	f021 f89d 	bl	2e27a <_impl_k_sem_give>
		return -ENOTCONN;
    d140:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    d144:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    d146:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    d148:	f106 0008 	add.w	r0, r6, #8
    d14c:	f012 f948 	bl	1f3e0 <net_buf_simple_headroom>
	state->len = buf->len;
    d150:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    d152:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    d154:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    d156:	6920      	ldr	r0, [r4, #16]
    d158:	682d      	ldr	r5, [r5, #0]
    d15a:	f012 f8a9 	bl	1f2b0 <net_buf_ref>
    d15e:	6923      	ldr	r3, [r4, #16]
    d160:	4606      	mov	r6, r0
    d162:	6898      	ldr	r0, [r3, #8]
    d164:	f7ff fe92 	bl	ce8c <att_cb.isra.6>
    d168:	4632      	mov	r2, r6
    d16a:	4603      	mov	r3, r0
    d16c:	2104      	movs	r1, #4
    d16e:	4628      	mov	r0, r5
    d170:	f7fe fc48 	bl	ba04 <bt_l2cap_send_cb>
	return 0;
    d174:	2000      	movs	r0, #0
    d176:	e7e5      	b.n	d144 <att_send_req+0x58>
    d178:	2000e200 	.word	0x2000e200
    d17c:	0002ef38 	.word	0x0002ef38
    d180:	0002ef40 	.word	0x0002ef40
    d184:	00031e73 	.word	0x00031e73
    d188:	00031f18 	.word	0x00031f18

0000d18c <att_handle_rsp>:
{
    d18c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    d190:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    d192:	30a4      	adds	r0, #164	; 0xa4
{
    d194:	461e      	mov	r6, r3
    d196:	460f      	mov	r7, r1
    d198:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    d19a:	f021 fa68 	bl	2e66e <k_delayed_work_cancel>
	if (!att->req) {
    d19e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    d1a2:	bb4b      	cbnz	r3, d1f8 <att_handle_rsp+0x6c>
		BT_WARN("No pending ATT request");
    d1a4:	4a23      	ldr	r2, [pc, #140]	; (d234 <att_handle_rsp+0xa8>)
    d1a6:	6812      	ldr	r2, [r2, #0]
    d1a8:	f002 0207 	and.w	r2, r2, #7
    d1ac:	2a01      	cmp	r2, #1
    d1ae:	d910      	bls.n	d1d2 <att_handle_rsp+0x46>
    d1b0:	2102      	movs	r1, #2
    d1b2:	f04f 0200 	mov.w	r2, #0
    d1b6:	f361 0202 	bfi	r2, r1, #0, #3
    d1ba:	f363 02c5 	bfi	r2, r3, #3, #3
    d1be:	491e      	ldr	r1, [pc, #120]	; (d238 <att_handle_rsp+0xac>)
    d1c0:	4b1e      	ldr	r3, [pc, #120]	; (d23c <att_handle_rsp+0xb0>)
    d1c2:	481f      	ldr	r0, [pc, #124]	; (d240 <att_handle_rsp+0xb4>)
    d1c4:	1a5b      	subs	r3, r3, r1
    d1c6:	08db      	lsrs	r3, r3, #3
    d1c8:	f363 128f 	bfi	r2, r3, #6, #10
    d1cc:	491d      	ldr	r1, [pc, #116]	; (d244 <att_handle_rsp+0xb8>)
    d1ce:	f7f4 ff8d 	bl	20ec <log_1>
Z_GENLIST_IS_EMPTY(slist)
    d1d2:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode)
    d1d6:	b159      	cbz	r1, d1f0 <att_handle_rsp+0x64>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d1d8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    d1dc:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    d1de:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d1e2:	4291      	cmp	r1, r2
	list->tail = node;
    d1e4:	bf08      	it	eq
    d1e6:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    d1ea:	4620      	mov	r0, r4
    d1ec:	f7ff ff7e 	bl	d0ec <att_send_req>
}
    d1f0:	2000      	movs	r0, #0
    d1f2:	b003      	add	sp, #12
    d1f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    d1f8:	6918      	ldr	r0, [r3, #16]
    d1fa:	b128      	cbz	r0, d208 <att_handle_rsp+0x7c>
		net_buf_unref(att->req->buf);
    d1fc:	f012 f82a 	bl	1f254 <net_buf_unref>
		att->req->buf = NULL;
    d200:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    d204:	2200      	movs	r2, #0
    d206:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    d208:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    d20c:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    d20e:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    d212:	2500      	movs	r5, #0
    d214:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    d216:	463a      	mov	r2, r7
    d218:	9300      	str	r3, [sp, #0]
    d21a:	4631      	mov	r1, r6
    d21c:	4643      	mov	r3, r8
    d21e:	47c8      	blx	r9
	if (!att->req->func) {
    d220:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d224:	6843      	ldr	r3, [r0, #4]
    d226:	b90b      	cbnz	r3, d22c <att_handle_rsp+0xa0>
		att_req_destroy(att->req);
    d228:	f7ff fc76 	bl	cb18 <att_req_destroy>
	att->req = NULL;
    d22c:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    d230:	e7cf      	b.n	d1d2 <att_handle_rsp+0x46>
    d232:	bf00      	nop
    d234:	2000e200 	.word	0x2000e200
    d238:	0002ef38 	.word	0x0002ef38
    d23c:	0002ef40 	.word	0x0002ef40
    d240:	00031efd 	.word	0x00031efd
    d244:	00031e80 	.word	0x00031e80

0000d248 <att_handle_find_info_rsp>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    d248:	898a      	ldrh	r2, [r1, #12]
    d24a:	6889      	ldr	r1, [r1, #8]
    d24c:	2300      	movs	r3, #0
    d24e:	f7ff bf9d 	b.w	d18c <att_handle_rsp>

0000d252 <att_handle_find_type_rsp>:
    d252:	f7ff bff9 	b.w	d248 <att_handle_find_info_rsp>

0000d256 <att_handle_read_type_rsp>:
    d256:	f7ff bff7 	b.w	d248 <att_handle_find_info_rsp>

0000d25a <att_handle_read_rsp>:
    d25a:	f7ff bff5 	b.w	d248 <att_handle_find_info_rsp>

0000d25e <att_handle_read_blob_rsp>:
    d25e:	f7ff bff3 	b.w	d248 <att_handle_find_info_rsp>

0000d262 <att_handle_read_mult_rsp>:
    d262:	f7ff bff1 	b.w	d248 <att_handle_find_info_rsp>

0000d266 <att_handle_read_group_rsp>:
    d266:	f7ff bfef 	b.w	d248 <att_handle_find_info_rsp>

0000d26a <att_handle_write_rsp>:
    d26a:	f7ff bfed 	b.w	d248 <att_handle_find_info_rsp>

0000d26e <att_handle_prepare_write_rsp>:
    d26e:	f7ff bfeb 	b.w	d248 <att_handle_find_info_rsp>

0000d272 <att_handle_exec_write_rsp>:
    d272:	f7ff bfe9 	b.w	d248 <att_handle_find_info_rsp>

0000d276 <att_confirm>:
    d276:	f7ff bfe7 	b.w	d248 <att_handle_find_info_rsp>

0000d27a <att_mtu_rsp>:
{
    d27a:	b410      	push	{r4}
    d27c:	460a      	mov	r2, r1
	if (!att) {
    d27e:	b190      	cbz	r0, d2a6 <att_mtu_rsp+0x2c>
	rsp = (void *)buf->data;
    d280:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    d282:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    d284:	2b16      	cmp	r3, #22
    d286:	d805      	bhi.n	d294 <att_mtu_rsp+0x1a>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    d288:	2200      	movs	r2, #0
    d28a:	2304      	movs	r3, #4
    d28c:	4611      	mov	r1, r2
}
    d28e:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    d290:	f7ff bf7c 	b.w	d18c <att_handle_rsp>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    d294:	2b41      	cmp	r3, #65	; 0x41
    d296:	bf28      	it	cs
    d298:	2341      	movcs	r3, #65	; 0x41
    d29a:	8743      	strh	r3, [r0, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    d29c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	return att_handle_rsp(att, rsp, buf->len, 0);
    d2a0:	8992      	ldrh	r2, [r2, #12]
    d2a2:	2300      	movs	r3, #0
    d2a4:	e7f3      	b.n	d28e <att_mtu_rsp+0x14>
}
    d2a6:	bc10      	pop	{r4}
    d2a8:	4770      	bx	lr

0000d2aa <att_error_rsp>:
{
    d2aa:	b570      	push	{r4, r5, r6, lr}
    d2ac:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    d2ae:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    d2b0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    d2b4:	b332      	cbz	r2, d304 <att_error_rsp+0x5a>
	if (att->req->buf) {
    d2b6:	6913      	ldr	r3, [r2, #16]
    d2b8:	b12b      	cbz	r3, d2c6 <att_error_rsp+0x1c>
	buf->data = buf->__buf + state->offset;
    d2ba:	8995      	ldrh	r5, [r2, #12]
    d2bc:	6919      	ldr	r1, [r3, #16]
    d2be:	4429      	add	r1, r5
    d2c0:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    d2c2:	89d1      	ldrh	r1, [r2, #14]
    d2c4:	8199      	strh	r1, [r3, #12]
	if (att->req->retrying) {
    d2c6:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    d2c8:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    d2ca:	b9e3      	cbnz	r3, d306 <att_error_rsp+0x5c>
	switch (err) {
    d2cc:	2d05      	cmp	r5, #5
	if (!att_change_security(att->chan.chan.conn, err)) {
    d2ce:	6820      	ldr	r0, [r4, #0]
	switch (err) {
    d2d0:	d006      	beq.n	d2e0 <att_error_rsp+0x36>
    d2d2:	2d0f      	cmp	r5, #15
    d2d4:	d117      	bne.n	d306 <att_error_rsp+0x5c>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    d2d6:	7a43      	ldrb	r3, [r0, #9]
    d2d8:	2b01      	cmp	r3, #1
    d2da:	d814      	bhi.n	d306 <att_error_rsp+0x5c>
		sec = BT_SECURITY_MEDIUM;
    d2dc:	2102      	movs	r1, #2
    d2de:	e007      	b.n	d2f0 <att_error_rsp+0x46>
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    d2e0:	7a43      	ldrb	r3, [r0, #9]
    d2e2:	2b01      	cmp	r3, #1
    d2e4:	d9fa      	bls.n	d2dc <att_error_rsp+0x32>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    d2e6:	2b02      	cmp	r3, #2
    d2e8:	d00a      	beq.n	d300 <att_error_rsp+0x56>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    d2ea:	2b03      	cmp	r3, #3
    d2ec:	d10b      	bne.n	d306 <att_error_rsp+0x5c>
			sec = BT_SECURITY_FIPS;
    d2ee:	2104      	movs	r1, #4
	return bt_conn_security(conn, sec);
    d2f0:	f7fd fb6e 	bl	a9d0 <bt_conn_security>
	if (!att_change_security(att->chan.chan.conn, err)) {
    d2f4:	b938      	cbnz	r0, d306 <att_error_rsp+0x5c>
		att->req->retrying = true;
    d2f6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    d2fa:	2201      	movs	r2, #1
    d2fc:	751a      	strb	r2, [r3, #20]
}
    d2fe:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_HIGH;
    d300:	2103      	movs	r1, #3
    d302:	e7f5      	b.n	d2f0 <att_error_rsp+0x46>
		err = BT_ATT_ERR_UNLIKELY;
    d304:	250e      	movs	r5, #14
	return att_handle_rsp(att, NULL, 0, err);
    d306:	2200      	movs	r2, #0
    d308:	462b      	mov	r3, r5
    d30a:	4620      	mov	r0, r4
    d30c:	4611      	mov	r1, r2
}
    d30e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(att, NULL, 0, err);
    d312:	f7ff bf3b 	b.w	d18c <att_handle_rsp>

0000d316 <att_reset>:
{
    d316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d318:	f100 0394 	add.w	r3, r0, #148	; 0x94
    d31c:	4604      	mov	r4, r0
    d31e:	f3bf 8f5b 	dmb	ish
    d322:	e853 2f00 	ldrex	r2, [r3]
    d326:	f042 0204 	orr.w	r2, r2, #4
    d32a:	e843 2100 	strex	r1, r2, [r3]
    d32e:	2900      	cmp	r1, #0
    d330:	d1f7      	bne.n	d322 <att_reset+0xc>
    d332:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    d336:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    d33a:	4628      	mov	r0, r5
    d33c:	f020 ff9d 	bl	2e27a <_impl_k_sem_give>
    d340:	4628      	mov	r0, r5
    d342:	f020 ff9a 	bl	2e27a <_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    d346:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
    d34a:	b17d      	cbz	r5, d36c <att_reset+0x56>
	return node->next;
    d34c:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
    d34e:	686f      	ldr	r7, [r5, #4]
    d350:	b12f      	cbz	r7, d35e <att_reset+0x48>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    d352:	2300      	movs	r3, #0
    d354:	9500      	str	r5, [sp, #0]
    d356:	461a      	mov	r2, r3
    d358:	210e      	movs	r1, #14
    d35a:	4618      	mov	r0, r3
    d35c:	47b8      	blx	r7
		att_req_destroy(req);
    d35e:	4628      	mov	r0, r5
    d360:	f7ff fbda 	bl	cb18 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    d364:	b116      	cbz	r6, d36c <att_reset+0x56>
    d366:	4635      	mov	r5, r6
    d368:	6836      	ldr	r6, [r6, #0]
    d36a:	e7f0      	b.n	d34e <att_reset+0x38>
	if (!att->req) {
    d36c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	list->head = NULL;
    d370:	2200      	movs	r2, #0
	list->tail = NULL;
    d372:	e9c4 2227 	strd	r2, r2, [r4, #156]	; 0x9c
    d376:	b13b      	cbz	r3, d388 <att_reset+0x72>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    d378:	230e      	movs	r3, #14
    d37a:	4611      	mov	r1, r2
    d37c:	4620      	mov	r0, r4
}
    d37e:	b003      	add	sp, #12
    d380:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    d384:	f7ff bf02 	b.w	d18c <att_handle_rsp>
}
    d388:	b003      	add	sp, #12
    d38a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d38c <bt_att_disconnected>:
{
    d38c:	b510      	push	{r4, lr}
    d38e:	4604      	mov	r4, r0
	att_reset(att);
    d390:	f7ff ffc1 	bl	d316 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    d394:	6820      	ldr	r0, [r4, #0]
}
    d396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    d39a:	f001 bb1d 	b.w	e9d8 <bt_gatt_disconnected>
	...

0000d3a0 <att_timeout>:
{
    d3a0:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("ATT Timeout");
    d3a2:	4b11      	ldr	r3, [pc, #68]	; (d3e8 <att_timeout+0x48>)
    d3a4:	681b      	ldr	r3, [r3, #0]
    d3a6:	075b      	lsls	r3, r3, #29
{
    d3a8:	4604      	mov	r4, r0
	struct bt_att *att = CONTAINER_OF(work, struct bt_att, timeout_work);
    d3aa:	f1a0 05a4 	sub.w	r5, r0, #164	; 0xa4
	BT_ERR("ATT Timeout");
    d3ae:	d010      	beq.n	d3d2 <att_timeout+0x32>
    d3b0:	2301      	movs	r3, #1
    d3b2:	f04f 0200 	mov.w	r2, #0
    d3b6:	f363 0202 	bfi	r2, r3, #0, #3
    d3ba:	490c      	ldr	r1, [pc, #48]	; (d3ec <att_timeout+0x4c>)
    d3bc:	4b0c      	ldr	r3, [pc, #48]	; (d3f0 <att_timeout+0x50>)
    d3be:	480d      	ldr	r0, [pc, #52]	; (d3f4 <att_timeout+0x54>)
    d3c0:	1a5b      	subs	r3, r3, r1
    d3c2:	f36f 02c5 	bfc	r2, #3, #3
    d3c6:	08db      	lsrs	r3, r3, #3
    d3c8:	f363 128f 	bfi	r2, r3, #6, #10
    d3cc:	490a      	ldr	r1, [pc, #40]	; (d3f8 <att_timeout+0x58>)
    d3ce:	f7f4 fe8d 	bl	20ec <log_1>
	att_reset(att);
    d3d2:	4628      	mov	r0, r5
    d3d4:	f7ff ff9f 	bl	d316 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    d3d8:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    d3dc:	f001 fafc 	bl	e9d8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    d3e0:	2300      	movs	r3, #0
    d3e2:	f844 3ca4 	str.w	r3, [r4, #-164]
}
    d3e6:	bd38      	pop	{r3, r4, r5, pc}
    d3e8:	2000e200 	.word	0x2000e200
    d3ec:	0002ef38 	.word	0x0002ef38
    d3f0:	0002ef40 	.word	0x0002ef40
    d3f4:	00031f42 	.word	0x00031f42
    d3f8:	00031e43 	.word	0x00031e43

0000d3fc <bt_att_encrypt_change>:
{
    d3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d400:	4604      	mov	r4, r0
	if (hci_status) {
    d402:	460e      	mov	r6, r1
    d404:	b131      	cbz	r1, d414 <bt_att_encrypt_change+0x18>
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    d406:	2200      	movs	r2, #0
    d408:	2305      	movs	r3, #5
    d40a:	4611      	mov	r1, r2
}
    d40c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    d410:	f7ff bebc 	b.w	d18c <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    d414:	6807      	ldr	r7, [r0, #0]
	if (conn->sec_level == BT_SECURITY_LOW) {
    d416:	7a7b      	ldrb	r3, [r7, #9]
    d418:	2b01      	cmp	r3, #1
    d41a:	d03b      	beq.n	d494 <bt_att_encrypt_change+0x98>
	if (!att->req || !att->req->retrying) {
    d41c:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    d420:	2b00      	cmp	r3, #0
    d422:	d037      	beq.n	d494 <bt_att_encrypt_change+0x98>
    d424:	7d1b      	ldrb	r3, [r3, #20]
    d426:	b3ab      	cbz	r3, d494 <bt_att_encrypt_change+0x98>
	k_sem_take(&att->tx_sem, K_FOREVER);
    d428:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    d42c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d430:	4628      	mov	r0, r5
    d432:	f020 ff49 	bl	2e2c8 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    d436:	4620      	mov	r0, r4
    d438:	f7ff fe47 	bl	d0ca <att_is_connected>
    d43c:	b9d8      	cbnz	r0, d476 <bt_att_encrypt_change+0x7a>
		BT_WARN("Disconnected");
    d43e:	4b16      	ldr	r3, [pc, #88]	; (d498 <bt_att_encrypt_change+0x9c>)
    d440:	681b      	ldr	r3, [r3, #0]
    d442:	f003 0307 	and.w	r3, r3, #7
    d446:	2b01      	cmp	r3, #1
    d448:	d910      	bls.n	d46c <bt_att_encrypt_change+0x70>
    d44a:	2302      	movs	r3, #2
    d44c:	f04f 0200 	mov.w	r2, #0
    d450:	f363 0202 	bfi	r2, r3, #0, #3
    d454:	4911      	ldr	r1, [pc, #68]	; (d49c <bt_att_encrypt_change+0xa0>)
    d456:	4b12      	ldr	r3, [pc, #72]	; (d4a0 <bt_att_encrypt_change+0xa4>)
    d458:	1a5b      	subs	r3, r3, r1
    d45a:	f360 02c5 	bfi	r2, r0, #3, #3
    d45e:	08db      	lsrs	r3, r3, #3
    d460:	f363 128f 	bfi	r2, r3, #6, #10
    d464:	490f      	ldr	r1, [pc, #60]	; (d4a4 <bt_att_encrypt_change+0xa8>)
    d466:	4810      	ldr	r0, [pc, #64]	; (d4a8 <bt_att_encrypt_change+0xac>)
    d468:	f7f4 fe40 	bl	20ec <log_1>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    d46c:	4628      	mov	r0, r5
}
    d46e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d472:	f020 bf02 	b.w	2e27a <_impl_k_sem_give>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    d476:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    d47a:	691d      	ldr	r5, [r3, #16]
    d47c:	68a8      	ldr	r0, [r5, #8]
    d47e:	f7ff fd05 	bl	ce8c <att_cb.isra.6>
    d482:	462a      	mov	r2, r5
    d484:	4603      	mov	r3, r0
    d486:	2104      	movs	r1, #4
    d488:	4638      	mov	r0, r7
    d48a:	f7fe fabb 	bl	ba04 <bt_l2cap_send_cb>
	att->req->buf = NULL;
    d48e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    d492:	611e      	str	r6, [r3, #16]
}
    d494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d498:	2000e200 	.word	0x2000e200
    d49c:	0002ef38 	.word	0x0002ef38
    d4a0:	0002ef40 	.word	0x0002ef40
    d4a4:	00031e4f 	.word	0x00031e4f
    d4a8:	00031f18 	.word	0x00031f18

0000d4ac <write_cb>:
{
    d4ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    d4b0:	680f      	ldr	r7, [r1, #0]
{
    d4b2:	460c      	mov	r4, r1
    d4b4:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    d4b6:	4601      	mov	r1, r0
    d4b8:	222a      	movs	r2, #42	; 0x2a
    d4ba:	4638      	mov	r0, r7
    d4bc:	f7ff fc60 	bl	cd80 <check_perm>
    d4c0:	4605      	mov	r5, r0
    d4c2:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    d4c4:	b9e0      	cbnz	r0, d500 <write_cb+0x54>
	write = attr->write(data->conn, attr, data->value, data->len,
    d4c6:	8a62      	ldrh	r2, [r4, #18]
    d4c8:	9001      	str	r0, [sp, #4]
    d4ca:	9200      	str	r2, [sp, #0]
    d4cc:	7c23      	ldrb	r3, [r4, #16]
    d4ce:	f8d6 8008 	ldr.w	r8, [r6, #8]
    d4d2:	68e2      	ldr	r2, [r4, #12]
    d4d4:	4631      	mov	r1, r6
    d4d6:	4638      	mov	r0, r7
    d4d8:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    d4da:	2800      	cmp	r0, #0
    d4dc:	db02      	blt.n	d4e4 <write_cb+0x38>
    d4de:	7c23      	ldrb	r3, [r4, #16]
    d4e0:	4298      	cmp	r0, r3
    d4e2:	d00a      	beq.n	d4fa <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
    d4e4:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    d4e8:	bf26      	itte	cs
    d4ea:	4240      	negcs	r0, r0
    d4ec:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    d4ee:	200e      	movcc	r0, #14
		data->err = err_to_att(write);
    d4f0:	7520      	strb	r0, [r4, #20]
}
    d4f2:	4628      	mov	r0, r5
    d4f4:	b002      	add	sp, #8
    d4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    d4fa:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    d4fc:	2501      	movs	r5, #1
    d4fe:	e7f8      	b.n	d4f2 <write_cb+0x46>
		return BT_GATT_ITER_STOP;
    d500:	2500      	movs	r5, #0
    d502:	e7f6      	b.n	d4f2 <write_cb+0x46>

0000d504 <read_cb>:
{
    d504:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    d508:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    d50a:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    d50c:	f8d1 9000 	ldr.w	r9, [r1]
{
    d510:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    d512:	3008      	adds	r0, #8
    d514:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    d516:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    d51a:	f011 fef9 	bl	1f310 <net_buf_simple_add>
	data->err = 0x00;
    d51e:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    d520:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    d522:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    d524:	2215      	movs	r2, #21
    d526:	4631      	mov	r1, r6
    d528:	4640      	mov	r0, r8
    d52a:	f7ff fc29 	bl	cd80 <check_perm>
    d52e:	4605      	mov	r5, r0
    d530:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    d532:	bb00      	cbnz	r0, d576 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    d534:	68a1      	ldr	r1, [r4, #8]
    d536:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    d53a:	898a      	ldrh	r2, [r1, #12]
    d53c:	6889      	ldr	r1, [r1, #8]
    d53e:	88a0      	ldrh	r0, [r4, #4]
    d540:	9000      	str	r0, [sp, #0]
    d542:	1a9b      	subs	r3, r3, r2
    d544:	6877      	ldr	r7, [r6, #4]
    d546:	440a      	add	r2, r1
    d548:	b29b      	uxth	r3, r3
    d54a:	4631      	mov	r1, r6
    d54c:	4640      	mov	r0, r8
    d54e:	47b8      	blx	r7
	if (read < 0) {
    d550:	1e01      	subs	r1, r0, #0
    d552:	da0a      	bge.n	d56a <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    d554:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
    d558:	bf26      	itte	cs
    d55a:	4249      	negcs	r1, r1
    d55c:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    d55e:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
    d560:	7421      	strb	r1, [r4, #16]
}
    d562:	4628      	mov	r0, r5
    d564:	b003      	add	sp, #12
    d566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    d56a:	68a0      	ldr	r0, [r4, #8]
    d56c:	3008      	adds	r0, #8
    d56e:	f011 fecf 	bl	1f310 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    d572:	2501      	movs	r5, #1
    d574:	e7f5      	b.n	d562 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    d576:	463d      	mov	r5, r7
    d578:	e7f3      	b.n	d562 <read_cb+0x5e>
	...

0000d57c <bt_att_create_pdu>:
{
    d57c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d57e:	460d      	mov	r5, r1
    d580:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    d582:	f7ff fd03 	bl	cf8c <att_chan_get>
	if (!att) {
    d586:	b1e8      	cbz	r0, d5c4 <bt_att_create_pdu+0x48>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    d588:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    d58c:	1c63      	adds	r3, r4, #1
    d58e:	4293      	cmp	r3, r2
    d590:	d91a      	bls.n	d5c8 <bt_att_create_pdu+0x4c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    d592:	4914      	ldr	r1, [pc, #80]	; (d5e4 <bt_att_create_pdu+0x68>)
    d594:	6809      	ldr	r1, [r1, #0]
    d596:	f001 0107 	and.w	r1, r1, #7
    d59a:	2901      	cmp	r1, #1
    d59c:	d912      	bls.n	d5c4 <bt_att_create_pdu+0x48>
    d59e:	2102      	movs	r1, #2
    d5a0:	f04f 0000 	mov.w	r0, #0
    d5a4:	f361 0002 	bfi	r0, r1, #0, #3
    d5a8:	4c0f      	ldr	r4, [pc, #60]	; (d5e8 <bt_att_create_pdu+0x6c>)
    d5aa:	4910      	ldr	r1, [pc, #64]	; (d5ec <bt_att_create_pdu+0x70>)
    d5ac:	1b09      	subs	r1, r1, r4
    d5ae:	08c9      	lsrs	r1, r1, #3
    d5b0:	f36f 00c5 	bfc	r0, #3, #3
    d5b4:	f361 108f 	bfi	r0, r1, #6, #10
    d5b8:	f8ad 0000 	strh.w	r0, [sp]
    d5bc:	490c      	ldr	r1, [pc, #48]	; (d5f0 <bt_att_create_pdu+0x74>)
    d5be:	480d      	ldr	r0, [pc, #52]	; (d5f4 <bt_att_create_pdu+0x78>)
    d5c0:	f7f4 fdc0 	bl	2144 <log_3>
		return NULL;
    d5c4:	2400      	movs	r4, #0
    d5c6:	e009      	b.n	d5dc <bt_att_create_pdu+0x60>
	buf = bt_l2cap_create_pdu(NULL, 0);
    d5c8:	2100      	movs	r1, #0
    d5ca:	4608      	mov	r0, r1
    d5cc:	f7fe fa17 	bl	b9fe <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    d5d0:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    d5d2:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    d5d4:	3008      	adds	r0, #8
    d5d6:	f011 fe9b 	bl	1f310 <net_buf_simple_add>
	hdr->code = op;
    d5da:	7005      	strb	r5, [r0, #0]
}
    d5dc:	4620      	mov	r0, r4
    d5de:	b003      	add	sp, #12
    d5e0:	bd30      	pop	{r4, r5, pc}
    d5e2:	bf00      	nop
    d5e4:	2000e200 	.word	0x2000e200
    d5e8:	0002ef38 	.word	0x0002ef38
    d5ec:	0002ef40 	.word	0x0002ef40
    d5f0:	00031e31 	.word	0x00031e31
    d5f4:	00031f7b 	.word	0x00031f7b

0000d5f8 <att_indicate>:
{
    d5f8:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    d5fa:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    d5fc:	f101 0008 	add.w	r0, r1, #8
    d600:	f011 fee6 	bl	1f3d0 <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    d604:	2200      	movs	r2, #0
    d606:	211e      	movs	r1, #30
    d608:	4620      	mov	r0, r4
    d60a:	f7ff ffb7 	bl	d57c <bt_att_create_pdu>
	if (!buf) {
    d60e:	4602      	mov	r2, r0
    d610:	b120      	cbz	r0, d61c <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    d612:	4b03      	ldr	r3, [pc, #12]	; (d620 <att_indicate+0x28>)
    d614:	2104      	movs	r1, #4
    d616:	4620      	mov	r0, r4
    d618:	f7fe f9f4 	bl	ba04 <bt_l2cap_send_cb>
}
    d61c:	2000      	movs	r0, #0
    d61e:	bd10      	pop	{r4, pc}
    d620:	0000d09d 	.word	0x0000d09d

0000d624 <att_mtu_req>:
	mtu_client = sys_le16_to_cpu(req->mtu);
    d624:	688b      	ldr	r3, [r1, #8]
{
    d626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    d62a:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    d62c:	2d16      	cmp	r5, #22
{
    d62e:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    d630:	d91f      	bls.n	d672 <att_mtu_req+0x4e>
	struct bt_conn *conn = att->chan.chan.conn;
    d632:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    d636:	2202      	movs	r2, #2
    d638:	2103      	movs	r1, #3
    d63a:	4640      	mov	r0, r8
    d63c:	f7ff ff9e 	bl	d57c <bt_att_create_pdu>
	if (!pdu) {
    d640:	4607      	mov	r7, r0
    d642:	b1c0      	cbz	r0, d676 <att_mtu_req+0x52>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    d644:	2102      	movs	r1, #2
    d646:	3008      	adds	r0, #8
    d648:	f011 fe62 	bl	1f310 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    d64c:	2400      	movs	r4, #0
    d64e:	2341      	movs	r3, #65	; 0x41
    d650:	7003      	strb	r3, [r0, #0]
    d652:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    d654:	4b09      	ldr	r3, [pc, #36]	; (d67c <att_mtu_req+0x58>)
    d656:	4640      	mov	r0, r8
    d658:	463a      	mov	r2, r7
    d65a:	2104      	movs	r1, #4
    d65c:	f7fe f9d2 	bl	ba04 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    d660:	2d41      	cmp	r5, #65	; 0x41
    d662:	bf28      	it	cs
    d664:	2541      	movcs	r5, #65	; 0x41
    d666:	8775      	strh	r5, [r6, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    d668:	f8a6 505a 	strh.w	r5, [r6, #90]	; 0x5a
	return 0;
    d66c:	4620      	mov	r0, r4
}
    d66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    d672:	2004      	movs	r0, #4
    d674:	e7fb      	b.n	d66e <att_mtu_req+0x4a>
		return BT_ATT_ERR_UNLIKELY;
    d676:	200e      	movs	r0, #14
    d678:	e7f9      	b.n	d66e <att_mtu_req+0x4a>
    d67a:	bf00      	nop
    d67c:	0000d06f 	.word	0x0000d06f

0000d680 <send_err_rsp.part.12>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    d680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d684:	4688      	mov	r8, r1
    d686:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    d688:	2101      	movs	r1, #1
    d68a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    d68c:	4605      	mov	r5, r0
    d68e:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    d690:	f7ff ff74 	bl	d57c <bt_att_create_pdu>
	if (!buf) {
    d694:	4604      	mov	r4, r0
    d696:	b180      	cbz	r0, d6ba <send_err_rsp.part.12+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    d698:	2104      	movs	r1, #4
    d69a:	3008      	adds	r0, #8
    d69c:	f011 fe38 	bl	1f310 <net_buf_simple_add>
	rsp->request = req;
    d6a0:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    d6a4:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    d6a6:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    d6aa:	4622      	mov	r2, r4
    d6ac:	4628      	mov	r0, r5
    d6ae:	4b04      	ldr	r3, [pc, #16]	; (d6c0 <send_err_rsp.part.12+0x40>)
    d6b0:	2104      	movs	r1, #4
}
    d6b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    d6b6:	f7fe b9a5 	b.w	ba04 <bt_l2cap_send_cb>
}
    d6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d6be:	bf00      	nop
    d6c0:	0000d06f 	.word	0x0000d06f

0000d6c4 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    d6c4:	898b      	ldrh	r3, [r1, #12]
{
    d6c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d6c8:	4604      	mov	r4, r0
    d6ca:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    d6cc:	b9bb      	cbnz	r3, d6fe <bt_att_recv+0x3a>
		BT_ERR("Too small ATT PDU received");
    d6ce:	4a6d      	ldr	r2, [pc, #436]	; (d884 <bt_att_recv+0x1c0>)
    d6d0:	6812      	ldr	r2, [r2, #0]
    d6d2:	0750      	lsls	r0, r2, #29
    d6d4:	d010      	beq.n	d6f8 <bt_att_recv+0x34>
    d6d6:	2101      	movs	r1, #1
    d6d8:	f04f 0200 	mov.w	r2, #0
    d6dc:	f361 0202 	bfi	r2, r1, #0, #3
    d6e0:	f363 02c5 	bfi	r2, r3, #3, #3
    d6e4:	4968      	ldr	r1, [pc, #416]	; (d888 <bt_att_recv+0x1c4>)
    d6e6:	4b69      	ldr	r3, [pc, #420]	; (d88c <bt_att_recv+0x1c8>)
    d6e8:	4869      	ldr	r0, [pc, #420]	; (d890 <bt_att_recv+0x1cc>)
    d6ea:	1a5b      	subs	r3, r3, r1
    d6ec:	08db      	lsrs	r3, r3, #3
    d6ee:	4969      	ldr	r1, [pc, #420]	; (d894 <bt_att_recv+0x1d0>)
    d6f0:	f363 128f 	bfi	r2, r3, #6, #10
			BT_WARN("Ignoring unexpected indication");
    d6f4:	f7f4 fcfa 	bl	20ec <log_1>
}
    d6f8:	2000      	movs	r0, #0
    d6fa:	b003      	add	sp, #12
    d6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    d6fe:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    d700:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    d702:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    d706:	f011 fe53 	bl	1f3b0 <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    d70a:	4963      	ldr	r1, [pc, #396]	; (d898 <bt_att_recv+0x1d4>)
    d70c:	782a      	ldrb	r2, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    d70e:	2300      	movs	r3, #0
    d710:	4608      	mov	r0, r1
		if (hdr->code == handlers[i].op) {
    d712:	f811 6033 	ldrb.w	r6, [r1, r3, lsl #3]
    d716:	4296      	cmp	r6, r2
    d718:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    d71c:	d12a      	bne.n	d774 <bt_att_recv+0xb0>
		if (handler->type == ATT_REQUEST &&
    d71e:	4461      	add	r1, ip
    d720:	788e      	ldrb	r6, [r1, #2]
    d722:	2e01      	cmp	r6, #1
    d724:	d14f      	bne.n	d7c6 <bt_att_recv+0x102>
    d726:	f3bf 8f5b 	dmb	ish
    d72a:	f104 0294 	add.w	r2, r4, #148	; 0x94
    d72e:	e852 3f00 	ldrex	r3, [r2]
    d732:	f043 0101 	orr.w	r1, r3, #1
    d736:	e842 1e00 	strex	lr, r1, [r2]
    d73a:	f1be 0f00 	cmp.w	lr, #0
    d73e:	d1f6      	bne.n	d72e <bt_att_recv+0x6a>
    d740:	f3bf 8f5b 	dmb	ish
    d744:	07d9      	lsls	r1, r3, #31
    d746:	d568      	bpl.n	d81a <bt_att_recv+0x156>
			BT_WARN("Ignoring unexpected request");
    d748:	4b4e      	ldr	r3, [pc, #312]	; (d884 <bt_att_recv+0x1c0>)
    d74a:	681b      	ldr	r3, [r3, #0]
    d74c:	f003 0307 	and.w	r3, r3, #7
    d750:	2b01      	cmp	r3, #1
    d752:	d9d1      	bls.n	d6f8 <bt_att_recv+0x34>
    d754:	2302      	movs	r3, #2
    d756:	f04f 0200 	mov.w	r2, #0
    d75a:	f363 0202 	bfi	r2, r3, #0, #3
    d75e:	494a      	ldr	r1, [pc, #296]	; (d888 <bt_att_recv+0x1c4>)
    d760:	4b4a      	ldr	r3, [pc, #296]	; (d88c <bt_att_recv+0x1c8>)
    d762:	484e      	ldr	r0, [pc, #312]	; (d89c <bt_att_recv+0x1d8>)
    d764:	1a5b      	subs	r3, r3, r1
    d766:	f36f 02c5 	bfc	r2, #3, #3
    d76a:	08db      	lsrs	r3, r3, #3
    d76c:	f363 128f 	bfi	r2, r3, #6, #10
    d770:	4948      	ldr	r1, [pc, #288]	; (d894 <bt_att_recv+0x1d0>)
    d772:	e7bf      	b.n	d6f4 <bt_att_recv+0x30>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    d774:	3301      	adds	r3, #1
    d776:	2b1c      	cmp	r3, #28
    d778:	d1cb      	bne.n	d712 <bt_att_recv+0x4e>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    d77a:	4b42      	ldr	r3, [pc, #264]	; (d884 <bt_att_recv+0x1c0>)
    d77c:	681b      	ldr	r3, [r3, #0]
    d77e:	f003 0307 	and.w	r3, r3, #7
    d782:	2b01      	cmp	r3, #1
    d784:	d910      	bls.n	d7a8 <bt_att_recv+0xe4>
    d786:	2102      	movs	r1, #2
    d788:	f04f 0300 	mov.w	r3, #0
    d78c:	f361 0302 	bfi	r3, r1, #0, #3
    d790:	483d      	ldr	r0, [pc, #244]	; (d888 <bt_att_recv+0x1c4>)
    d792:	493e      	ldr	r1, [pc, #248]	; (d88c <bt_att_recv+0x1c8>)
    d794:	1a09      	subs	r1, r1, r0
    d796:	08c9      	lsrs	r1, r1, #3
    d798:	f36f 03c5 	bfc	r3, #3, #3
    d79c:	f361 138f 	bfi	r3, r1, #6, #10
    d7a0:	483f      	ldr	r0, [pc, #252]	; (d8a0 <bt_att_recv+0x1dc>)
    d7a2:	493c      	ldr	r1, [pc, #240]	; (d894 <bt_att_recv+0x1d0>)
    d7a4:	f7f4 fcb6 	bl	2114 <log_2>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    d7a8:	782d      	ldrb	r5, [r5, #0]
    d7aa:	4628      	mov	r0, r5
    d7ac:	f7ff f99c 	bl	cae8 <att_op_get_type>
    d7b0:	2800      	cmp	r0, #0
    d7b2:	d0a1      	beq.n	d6f8 <bt_att_recv+0x34>
	if (!req) {
    d7b4:	2d00      	cmp	r5, #0
    d7b6:	d09f      	beq.n	d6f8 <bt_att_recv+0x34>
    d7b8:	2306      	movs	r3, #6
    d7ba:	2200      	movs	r2, #0
    d7bc:	4629      	mov	r1, r5
    d7be:	6820      	ldr	r0, [r4, #0]
    d7c0:	f7ff ff5e 	bl	d680 <send_err_rsp.part.12>
    d7c4:	e798      	b.n	d6f8 <bt_att_recv+0x34>
		} else if (handler->type == ATT_INDICATION &&
    d7c6:	2e05      	cmp	r6, #5
    d7c8:	d127      	bne.n	d81a <bt_att_recv+0x156>
    d7ca:	f3bf 8f5b 	dmb	ish
    d7ce:	f104 0294 	add.w	r2, r4, #148	; 0x94
    d7d2:	e852 3f00 	ldrex	r3, [r2]
    d7d6:	f043 0102 	orr.w	r1, r3, #2
    d7da:	e842 1e00 	strex	lr, r1, [r2]
    d7de:	f1be 0f00 	cmp.w	lr, #0
    d7e2:	d1f6      	bne.n	d7d2 <bt_att_recv+0x10e>
    d7e4:	f3bf 8f5b 	dmb	ish
    d7e8:	079a      	lsls	r2, r3, #30
    d7ea:	d516      	bpl.n	d81a <bt_att_recv+0x156>
			BT_WARN("Ignoring unexpected indication");
    d7ec:	4b25      	ldr	r3, [pc, #148]	; (d884 <bt_att_recv+0x1c0>)
    d7ee:	681b      	ldr	r3, [r3, #0]
    d7f0:	f003 0307 	and.w	r3, r3, #7
    d7f4:	2b01      	cmp	r3, #1
    d7f6:	f67f af7f 	bls.w	d6f8 <bt_att_recv+0x34>
    d7fa:	2302      	movs	r3, #2
    d7fc:	f04f 0200 	mov.w	r2, #0
    d800:	f363 0202 	bfi	r2, r3, #0, #3
    d804:	4920      	ldr	r1, [pc, #128]	; (d888 <bt_att_recv+0x1c4>)
    d806:	4b21      	ldr	r3, [pc, #132]	; (d88c <bt_att_recv+0x1c8>)
    d808:	4826      	ldr	r0, [pc, #152]	; (d8a4 <bt_att_recv+0x1e0>)
    d80a:	1a5b      	subs	r3, r3, r1
    d80c:	f36f 02c5 	bfc	r2, #3, #3
    d810:	08db      	lsrs	r3, r3, #3
    d812:	f363 128f 	bfi	r2, r3, #6, #10
    d816:	491f      	ldr	r1, [pc, #124]	; (d894 <bt_att_recv+0x1d0>)
    d818:	e76c      	b.n	d6f4 <bt_att_recv+0x30>
	if (buf->len < handler->expect_len) {
    d81a:	eb00 030c 	add.w	r3, r0, ip
    d81e:	89ba      	ldrh	r2, [r7, #12]
    d820:	7859      	ldrb	r1, [r3, #1]
    d822:	4291      	cmp	r1, r2
    d824:	d91c      	bls.n	d860 <bt_att_recv+0x19c>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    d826:	4b17      	ldr	r3, [pc, #92]	; (d884 <bt_att_recv+0x1c0>)
    d828:	681b      	ldr	r3, [r3, #0]
    d82a:	075b      	lsls	r3, r3, #29
    d82c:	d013      	beq.n	d856 <bt_att_recv+0x192>
    d82e:	2301      	movs	r3, #1
    d830:	f04f 0100 	mov.w	r1, #0
    d834:	f363 0102 	bfi	r1, r3, #0, #3
    d838:	4813      	ldr	r0, [pc, #76]	; (d888 <bt_att_recv+0x1c4>)
    d83a:	4b14      	ldr	r3, [pc, #80]	; (d88c <bt_att_recv+0x1c8>)
    d83c:	1a1b      	subs	r3, r3, r0
    d83e:	08db      	lsrs	r3, r3, #3
    d840:	f36f 01c5 	bfc	r1, #3, #3
    d844:	f363 118f 	bfi	r1, r3, #6, #10
    d848:	4817      	ldr	r0, [pc, #92]	; (d8a8 <bt_att_recv+0x1e4>)
    d84a:	782b      	ldrb	r3, [r5, #0]
    d84c:	f8ad 1000 	strh.w	r1, [sp]
    d850:	4910      	ldr	r1, [pc, #64]	; (d894 <bt_att_recv+0x1d0>)
    d852:	f7f4 fc77 	bl	2144 <log_3>
	if (handler->type == ATT_REQUEST && err) {
    d856:	2e01      	cmp	r6, #1
    d858:	f47f af4e 	bne.w	d6f8 <bt_att_recv+0x34>
    d85c:	2304      	movs	r3, #4
    d85e:	e00a      	b.n	d876 <bt_att_recv+0x1b2>
		err = handler->func(att, buf);
    d860:	685b      	ldr	r3, [r3, #4]
    d862:	4639      	mov	r1, r7
    d864:	4620      	mov	r0, r4
    d866:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    d868:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    d86a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    d86c:	f47f af44 	bne.w	d6f8 <bt_att_recv+0x34>
    d870:	2800      	cmp	r0, #0
    d872:	f43f af41 	beq.w	d6f8 <bt_att_recv+0x34>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    d876:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    d878:	2900      	cmp	r1, #0
    d87a:	f43f af3d 	beq.w	d6f8 <bt_att_recv+0x34>
    d87e:	2200      	movs	r2, #0
    d880:	e79d      	b.n	d7be <bt_att_recv+0xfa>
    d882:	bf00      	nop
    d884:	2000e200 	.word	0x2000e200
    d888:	0002ef38 	.word	0x0002ef38
    d88c:	0002ef40 	.word	0x0002ef40
    d890:	00031fa4 	.word	0x00031fa4
    d894:	00031e18 	.word	0x00031e18
    d898:	00032048 	.word	0x00032048
    d89c:	00031fdf 	.word	0x00031fdf
    d8a0:	00031fc3 	.word	0x00031fc3
    d8a4:	00031fff 	.word	0x00031fff
    d8a8:	00032022 	.word	0x00032022

0000d8ac <att_read_group_req>:
{
    d8ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    d8b0:	898b      	ldrh	r3, [r1, #12]
    d8b2:	2b06      	cmp	r3, #6
{
    d8b4:	b08d      	sub	sp, #52	; 0x34
    d8b6:	4681      	mov	r9, r0
    d8b8:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    d8ba:	d001      	beq.n	d8c0 <att_read_group_req+0x14>
    d8bc:	2b14      	cmp	r3, #20
    d8be:	d16e      	bne.n	d99e <att_read_group_req+0xf2>
	req = (void *)buf->data;
    d8c0:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    d8c2:	2104      	movs	r1, #4
	req = (void *)buf->data;
    d8c4:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    d8c8:	f8d9 8000 	ldr.w	r8, [r9]
	start_handle = sys_le16_to_cpu(req->start_handle);
    d8cc:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    d8ce:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    d8d0:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    d8d2:	f011 fd6d 	bl	1f3b0 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    d8d6:	4621      	mov	r1, r4
    d8d8:	4638      	mov	r0, r7
    d8da:	f7ff fb25 	bl	cf28 <uuid_create>
    d8de:	2800      	cmp	r0, #0
    d8e0:	d05f      	beq.n	d9a2 <att_read_group_req+0xf6>
	if (!start || !end) {
    d8e2:	2d00      	cmp	r5, #0
    d8e4:	d036      	beq.n	d954 <att_read_group_req+0xa8>
    d8e6:	2400      	movs	r4, #0
    d8e8:	b39e      	cbz	r6, d952 <att_read_group_req+0xa6>
	if (start > end) {
    d8ea:	42b5      	cmp	r5, r6
    d8ec:	d832      	bhi.n	d954 <att_read_group_req+0xa8>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    d8ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    d8f2:	4669      	mov	r1, sp
    d8f4:	4638      	mov	r0, r7
    d8f6:	f88d 4000 	strb.w	r4, [sp]
    d8fa:	f8ad 3002 	strh.w	r3, [sp, #2]
    d8fe:	f7f9 ff81 	bl	7804 <bt_uuid_cmp>
    d902:	bb90      	cbnz	r0, d96a <att_read_group_req+0xbe>
	struct bt_conn *conn = att->chan.chan.conn;
    d904:	f8d9 8000 	ldr.w	r8, [r9]
	(void)memset(&data, 0, sizeof(data));
    d908:	2214      	movs	r2, #20
    d90a:	2100      	movs	r1, #0
    d90c:	a807      	add	r0, sp, #28
    d90e:	f7f9 f9e8 	bl	6ce2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    d912:	2201      	movs	r2, #1
    d914:	2111      	movs	r1, #17
    d916:	4640      	mov	r0, r8
    d918:	f7ff fe30 	bl	d57c <bt_att_create_pdu>
    d91c:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    d91e:	2800      	cmp	r0, #0
    d920:	d03f      	beq.n	d9a2 <att_read_group_req+0xf6>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d922:	2101      	movs	r1, #1
    d924:	3008      	adds	r0, #8
	data.uuid = uuid;
    d926:	e9cd 9707 	strd	r9, r7, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d92a:	f011 fcf1 	bl	1f310 <net_buf_simple_add>
	data.rsp->len = 0;
    d92e:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d930:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    d932:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    d934:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    d936:	4a1c      	ldr	r2, [pc, #112]	; (d9a8 <att_read_group_req+0xfc>)
	data.group = NULL;
    d938:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    d93a:	4631      	mov	r1, r6
    d93c:	4628      	mov	r0, r5
    d93e:	f000 ff4d 	bl	e7dc <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    d942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d944:	781c      	ldrb	r4, [r3, #0]
    d946:	bb1c      	cbnz	r4, d990 <att_read_group_req+0xe4>
		net_buf_unref(data.buf);
    d948:	9809      	ldr	r0, [sp, #36]	; 0x24
    d94a:	f011 fc83 	bl	1f254 <net_buf_unref>
    d94e:	230a      	movs	r3, #10
    d950:	e018      	b.n	d984 <att_read_group_req+0xd8>
			*err = 0;
    d952:	4635      	mov	r5, r6
    d954:	2301      	movs	r3, #1
    d956:	462a      	mov	r2, r5
    d958:	2110      	movs	r1, #16
    d95a:	4640      	mov	r0, r8
    d95c:	f7ff fe90 	bl	d680 <send_err_rsp.part.12>
		return 0;
    d960:	2400      	movs	r4, #0
}
    d962:	4620      	mov	r0, r4
    d964:	b00d      	add	sp, #52	; 0x34
    d966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    d96a:	f642 0301 	movw	r3, #10241	; 0x2801
    d96e:	a901      	add	r1, sp, #4
    d970:	4638      	mov	r0, r7
    d972:	f88d 4004 	strb.w	r4, [sp, #4]
    d976:	f8ad 3006 	strh.w	r3, [sp, #6]
    d97a:	f7f9 ff43 	bl	7804 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    d97e:	2800      	cmp	r0, #0
    d980:	d0c0      	beq.n	d904 <att_read_group_req+0x58>
    d982:	2310      	movs	r3, #16
    d984:	462a      	mov	r2, r5
    d986:	2110      	movs	r1, #16
    d988:	4640      	mov	r0, r8
    d98a:	f7ff fe79 	bl	d680 <send_err_rsp.part.12>
    d98e:	e7e8      	b.n	d962 <att_read_group_req+0xb6>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    d990:	4b06      	ldr	r3, [pc, #24]	; (d9ac <att_read_group_req+0x100>)
    d992:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d994:	2104      	movs	r1, #4
    d996:	4640      	mov	r0, r8
    d998:	f7fe f834 	bl	ba04 <bt_l2cap_send_cb>
    d99c:	e7e0      	b.n	d960 <att_read_group_req+0xb4>
		return BT_ATT_ERR_INVALID_PDU;
    d99e:	2404      	movs	r4, #4
    d9a0:	e7df      	b.n	d962 <att_read_group_req+0xb6>
		return BT_ATT_ERR_UNLIKELY;
    d9a2:	240e      	movs	r4, #14
    d9a4:	e7dd      	b.n	d962 <att_read_group_req+0xb6>
    d9a6:	bf00      	nop
    d9a8:	0000cb49 	.word	0x0000cb49
    d9ac:	0000d06f 	.word	0x0000d06f

0000d9b0 <att_read_mult_req>:
{
    d9b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    d9b4:	6804      	ldr	r4, [r0, #0]
{
    d9b6:	b087      	sub	sp, #28
	(void)memset(&data, 0, sizeof(data));
    d9b8:	2214      	movs	r2, #20
{
    d9ba:	4606      	mov	r6, r0
    d9bc:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    d9be:	a801      	add	r0, sp, #4
    d9c0:	2100      	movs	r1, #0
    d9c2:	f7f9 f98e 	bl	6ce2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    d9c6:	2200      	movs	r2, #0
    d9c8:	210f      	movs	r1, #15
    d9ca:	4620      	mov	r0, r4
    d9cc:	f7ff fdd6 	bl	d57c <bt_att_create_pdu>
    d9d0:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    d9d2:	b368      	cbz	r0, da30 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d9d4:	f8df 9060 	ldr.w	r9, [pc, #96]	; da38 <att_read_mult_req+0x88>
	data.att = att;
    d9d8:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    d9da:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    d9de:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    d9e2:	89ab      	ldrh	r3, [r5, #12]
    d9e4:	2b01      	cmp	r3, #1
    d9e6:	d806      	bhi.n	d9f6 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    d9e8:	4b12      	ldr	r3, [pc, #72]	; (da34 <att_read_mult_req+0x84>)
    d9ea:	9a03      	ldr	r2, [sp, #12]
    d9ec:	2104      	movs	r1, #4
    d9ee:	4620      	mov	r0, r4
    d9f0:	f7fe f808 	bl	ba04 <bt_l2cap_send_cb>
    d9f4:	e018      	b.n	da28 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    d9f6:	4638      	mov	r0, r7
    d9f8:	f011 fcea 	bl	1f3d0 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d9fc:	ab01      	add	r3, sp, #4
    d9fe:	464a      	mov	r2, r9
    da00:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    da02:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    da04:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    da08:	f000 fee8 	bl	e7dc <bt_gatt_foreach_attr>
		if (data.err) {
    da0c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    da10:	2b00      	cmp	r3, #0
    da12:	d0e6      	beq.n	d9e2 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    da14:	9803      	ldr	r0, [sp, #12]
    da16:	f011 fc1d 	bl	1f254 <net_buf_unref>
    da1a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    da1e:	4632      	mov	r2, r6
    da20:	210e      	movs	r1, #14
    da22:	4620      	mov	r0, r4
    da24:	f7ff fe2c 	bl	d680 <send_err_rsp.part.12>
	return 0;
    da28:	2000      	movs	r0, #0
}
    da2a:	b007      	add	sp, #28
    da2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    da30:	200e      	movs	r0, #14
    da32:	e7fa      	b.n	da2a <att_read_mult_req+0x7a>
    da34:	0000d06f 	.word	0x0000d06f
    da38:	0000d505 	.word	0x0000d505

0000da3c <att_read_rsp>:
{
    da3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da40:	4604      	mov	r4, r0
    da42:	b086      	sub	sp, #24
    da44:	460f      	mov	r7, r1
    da46:	4690      	mov	r8, r2
	if (!handle) {
    da48:	461d      	mov	r5, r3
    da4a:	b39b      	cbz	r3, dab4 <att_read_rsp+0x78>
	struct bt_conn *conn = att->chan.chan.conn;
    da4c:	6806      	ldr	r6, [r0, #0]
	(void)memset(&data, 0, sizeof(data));
    da4e:	2214      	movs	r2, #20
    da50:	2100      	movs	r1, #0
    da52:	a801      	add	r0, sp, #4
    da54:	f7f9 f945 	bl	6ce2 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    da58:	2200      	movs	r2, #0
    da5a:	4641      	mov	r1, r8
    da5c:	4630      	mov	r0, r6
    da5e:	f7ff fd8d 	bl	d57c <bt_att_create_pdu>
    da62:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    da64:	b340      	cbz	r0, dab8 <att_read_rsp+0x7c>
	data.offset = offset;
    da66:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    da6a:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    da6e:	2301      	movs	r3, #1
    da70:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    da74:	4a11      	ldr	r2, [pc, #68]	; (dabc <att_read_rsp+0x80>)
	data.att = att;
    da76:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    da78:	ab01      	add	r3, sp, #4
    da7a:	4629      	mov	r1, r5
    da7c:	4628      	mov	r0, r5
    da7e:	f000 fead 	bl	e7dc <bt_gatt_foreach_attr>
	if (data.err) {
    da82:	f89d 4014 	ldrb.w	r4, [sp, #20]
    da86:	b174      	cbz	r4, daa6 <att_read_rsp+0x6a>
		net_buf_unref(data.buf);
    da88:	9803      	ldr	r0, [sp, #12]
    da8a:	f011 fbe3 	bl	1f254 <net_buf_unref>
    da8e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    da92:	462a      	mov	r2, r5
    da94:	4639      	mov	r1, r7
    da96:	4630      	mov	r0, r6
    da98:	f7ff fdf2 	bl	d680 <send_err_rsp.part.12>
		return 0;
    da9c:	2400      	movs	r4, #0
}
    da9e:	4620      	mov	r0, r4
    daa0:	b006      	add	sp, #24
    daa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    daa6:	4b06      	ldr	r3, [pc, #24]	; (dac0 <att_read_rsp+0x84>)
    daa8:	9a03      	ldr	r2, [sp, #12]
    daaa:	2104      	movs	r1, #4
    daac:	4630      	mov	r0, r6
    daae:	f7fd ffa9 	bl	ba04 <bt_l2cap_send_cb>
	return 0;
    dab2:	e7f4      	b.n	da9e <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    dab4:	2401      	movs	r4, #1
    dab6:	e7f2      	b.n	da9e <att_read_rsp+0x62>
		return BT_ATT_ERR_UNLIKELY;
    dab8:	240e      	movs	r4, #14
    daba:	e7f0      	b.n	da9e <att_read_rsp+0x62>
    dabc:	0000d505 	.word	0x0000d505
    dac0:	0000d06f 	.word	0x0000d06f

0000dac4 <att_read_blob_req>:
{
    dac4:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    dac6:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    dac8:	8813      	ldrh	r3, [r2, #0]
    daca:	8852      	ldrh	r2, [r2, #2]
    dacc:	9200      	str	r2, [sp, #0]
    dace:	210c      	movs	r1, #12
    dad0:	220d      	movs	r2, #13
    dad2:	f7ff ffb3 	bl	da3c <att_read_rsp>
}
    dad6:	b003      	add	sp, #12
    dad8:	f85d fb04 	ldr.w	pc, [sp], #4

0000dadc <att_read_req>:
{
    dadc:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    dade:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    dae0:	2200      	movs	r2, #0
    dae2:	881b      	ldrh	r3, [r3, #0]
    dae4:	9200      	str	r2, [sp, #0]
    dae6:	210a      	movs	r1, #10
    dae8:	220b      	movs	r2, #11
    daea:	f7ff ffa7 	bl	da3c <att_read_rsp>
}
    daee:	b003      	add	sp, #12
    daf0:	f85d fb04 	ldr.w	pc, [sp], #4

0000daf4 <att_read_type_req>:
{
    daf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    daf8:	898b      	ldrh	r3, [r1, #12]
    dafa:	2b06      	cmp	r3, #6
{
    dafc:	b08d      	sub	sp, #52	; 0x34
    dafe:	4607      	mov	r7, r0
    db00:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    db02:	d001      	beq.n	db08 <att_read_type_req+0x14>
    db04:	2b14      	cmp	r3, #20
    db06:	d155      	bne.n	dbb4 <att_read_type_req+0xc0>
	req = (void *)buf->data;
    db08:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    db0a:	2104      	movs	r1, #4
	req = (void *)buf->data;
    db0c:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    db10:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    db14:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    db16:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    db18:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    db1c:	f011 fc48 	bl	1f3b0 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    db20:	4631      	mov	r1, r6
    db22:	4640      	mov	r0, r8
    db24:	f7ff fa00 	bl	cf28 <uuid_create>
    db28:	b188      	cbz	r0, db4e <att_read_type_req+0x5a>
	if (!start || !end) {
    db2a:	b19d      	cbz	r5, db54 <att_read_type_req+0x60>
    db2c:	b18c      	cbz	r4, db52 <att_read_type_req+0x5e>
	if (start > end) {
    db2e:	42a5      	cmp	r5, r4
    db30:	d810      	bhi.n	db54 <att_read_type_req+0x60>
	(void)memset(&data, 0, sizeof(data));
    db32:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    db34:	683e      	ldr	r6, [r7, #0]
	(void)memset(&data, 0, sizeof(data));
    db36:	2100      	movs	r1, #0
    db38:	eb0d 0002 	add.w	r0, sp, r2
    db3c:	f7f9 f8d1 	bl	6ce2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    db40:	2201      	movs	r2, #1
    db42:	2109      	movs	r1, #9
    db44:	4630      	mov	r0, r6
    db46:	f7ff fd19 	bl	d57c <bt_att_create_pdu>
    db4a:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    db4c:	b968      	cbnz	r0, db6a <att_read_type_req+0x76>
		return BT_ATT_ERR_UNLIKELY;
    db4e:	240e      	movs	r4, #14
    db50:	e007      	b.n	db62 <att_read_type_req+0x6e>
			*err = 0;
    db52:	4625      	mov	r5, r4
    db54:	2301      	movs	r3, #1
    db56:	462a      	mov	r2, r5
    db58:	2108      	movs	r1, #8
    db5a:	4648      	mov	r0, r9
    db5c:	f7ff fd90 	bl	d680 <send_err_rsp.part.12>
		return 0;
    db60:	2400      	movs	r4, #0
}
    db62:	4620      	mov	r0, r4
    db64:	b00d      	add	sp, #52	; 0x34
    db66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    db6a:	2101      	movs	r1, #1
    db6c:	3008      	adds	r0, #8
	data.uuid = uuid;
    db6e:	e9cd 7806 	strd	r7, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    db72:	f011 fbcd 	bl	1f310 <net_buf_simple_add>
	data.rsp->len = 0;
    db76:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    db78:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    db7a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    db7c:	4621      	mov	r1, r4
	data.rsp->len = 0;
    db7e:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    db80:	4a0d      	ldr	r2, [pc, #52]	; (dbb8 <att_read_type_req+0xc4>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    db82:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    db86:	4628      	mov	r0, r5
    db88:	ab06      	add	r3, sp, #24
    db8a:	f000 fe27 	bl	e7dc <bt_gatt_foreach_attr>
	if (data.err) {
    db8e:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    db92:	b144      	cbz	r4, dba6 <att_read_type_req+0xb2>
		net_buf_unref(data.buf);
    db94:	9808      	ldr	r0, [sp, #32]
    db96:	f011 fb5d 	bl	1f254 <net_buf_unref>
    db9a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    db9e:	462a      	mov	r2, r5
    dba0:	2108      	movs	r1, #8
    dba2:	4630      	mov	r0, r6
    dba4:	e7da      	b.n	db5c <att_read_type_req+0x68>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    dba6:	4b05      	ldr	r3, [pc, #20]	; (dbbc <att_read_type_req+0xc8>)
    dba8:	9a08      	ldr	r2, [sp, #32]
    dbaa:	2104      	movs	r1, #4
    dbac:	4630      	mov	r0, r6
    dbae:	f7fd ff29 	bl	ba04 <bt_l2cap_send_cb>
    dbb2:	e7d6      	b.n	db62 <att_read_type_req+0x6e>
		return BT_ATT_ERR_INVALID_PDU;
    dbb4:	2404      	movs	r4, #4
    dbb6:	e7d4      	b.n	db62 <att_read_type_req+0x6e>
    dbb8:	0000cdd1 	.word	0x0000cdd1
    dbbc:	0000d06f 	.word	0x0000d06f

0000dbc0 <att_find_type_req>:
{
    dbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    dbc4:	f8d0 b000 	ldr.w	fp, [r0]
{
    dbc8:	4681      	mov	r9, r0
	req = (void *)buf->data;
    dbca:	4608      	mov	r0, r1
{
    dbcc:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    dbce:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    dbd2:	4688      	mov	r8, r1
	value = net_buf_pull(buf, sizeof(*req));
    dbd4:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    dbd6:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    dbd8:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    dbda:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    dbdc:	f011 fbe8 	bl	1f3b0 <net_buf_simple_pull>
    dbe0:	4682      	mov	sl, r0
	if (!start || !end) {
    dbe2:	b1dd      	cbz	r5, dc1c <att_find_type_req+0x5c>
    dbe4:	2400      	movs	r4, #0
    dbe6:	b1c7      	cbz	r7, dc1a <att_find_type_req+0x5a>
	if (start > end) {
    dbe8:	42bd      	cmp	r5, r7
    dbea:	d817      	bhi.n	dc1c <att_find_type_req+0x5c>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    dbec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    dbf0:	a902      	add	r1, sp, #8
    dbf2:	a801      	add	r0, sp, #4
    dbf4:	f8ad 6006 	strh.w	r6, [sp, #6]
    dbf8:	f88d 4004 	strb.w	r4, [sp, #4]
    dbfc:	f88d 4008 	strb.w	r4, [sp, #8]
    dc00:	f8ad 300a 	strh.w	r3, [sp, #10]
    dc04:	f7f9 fdfe 	bl	7804 <bt_uuid_cmp>
    dc08:	4606      	mov	r6, r0
    dc0a:	b190      	cbz	r0, dc32 <att_find_type_req+0x72>
    dc0c:	230a      	movs	r3, #10
    dc0e:	462a      	mov	r2, r5
    dc10:	2106      	movs	r1, #6
    dc12:	4658      	mov	r0, fp
    dc14:	f7ff fd34 	bl	d680 <send_err_rsp.part.12>
		return 0;
    dc18:	e007      	b.n	dc2a <att_find_type_req+0x6a>
			*err = 0;
    dc1a:	463d      	mov	r5, r7
    dc1c:	2301      	movs	r3, #1
    dc1e:	462a      	mov	r2, r5
    dc20:	2106      	movs	r1, #6
    dc22:	4658      	mov	r0, fp
    dc24:	f7ff fd2c 	bl	d680 <send_err_rsp.part.12>
		return 0;
    dc28:	2400      	movs	r4, #0
}
    dc2a:	4620      	mov	r0, r4
    dc2c:	b009      	add	sp, #36	; 0x24
    dc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				 buf->len);
    dc32:	f8b8 400c 	ldrh.w	r4, [r8, #12]
	struct bt_conn *conn = att->chan.chan.conn;
    dc36:	f8d9 8000 	ldr.w	r8, [r9]
	(void)memset(&data, 0, sizeof(data));
    dc3a:	4601      	mov	r1, r0
    dc3c:	2214      	movs	r2, #20
    dc3e:	a803      	add	r0, sp, #12
    dc40:	f7f9 f84f 	bl	6ce2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    dc44:	4632      	mov	r2, r6
    dc46:	2107      	movs	r1, #7
    dc48:	4640      	mov	r0, r8
    dc4a:	f7ff fc97 	bl	d57c <bt_att_create_pdu>
    dc4e:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    dc50:	b308      	cbz	r0, dc96 <att_find_type_req+0xd6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    dc52:	230a      	movs	r3, #10
    dc54:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    dc58:	4a10      	ldr	r2, [pc, #64]	; (dc9c <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    dc5a:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    dc5e:	ab03      	add	r3, sp, #12
    dc60:	4639      	mov	r1, r7
    dc62:	4628      	mov	r0, r5
	data.att = att;
    dc64:	f8cd 900c 	str.w	r9, [sp, #12]
	data.value = value;
    dc68:	e9cd 6a05 	strd	r6, sl, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    dc6c:	f000 fdb6 	bl	e7dc <bt_gatt_foreach_attr>
	if (data.err) {
    dc70:	f89d 401d 	ldrb.w	r4, [sp, #29]
    dc74:	b144      	cbz	r4, dc88 <att_find_type_req+0xc8>
		net_buf_unref(data.buf);
    dc76:	9804      	ldr	r0, [sp, #16]
    dc78:	f011 faec 	bl	1f254 <net_buf_unref>
    dc7c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    dc80:	462a      	mov	r2, r5
    dc82:	2106      	movs	r1, #6
    dc84:	4640      	mov	r0, r8
    dc86:	e7cd      	b.n	dc24 <att_find_type_req+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    dc88:	4b05      	ldr	r3, [pc, #20]	; (dca0 <att_find_type_req+0xe0>)
    dc8a:	9a04      	ldr	r2, [sp, #16]
    dc8c:	2104      	movs	r1, #4
    dc8e:	4640      	mov	r0, r8
    dc90:	f7fd feb8 	bl	ba04 <bt_l2cap_send_cb>
    dc94:	e7c9      	b.n	dc2a <att_find_type_req+0x6a>
		return BT_ATT_ERR_UNLIKELY;
    dc96:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    dc98:	e7c7      	b.n	dc2a <att_find_type_req+0x6a>
    dc9a:	bf00      	nop
    dc9c:	0000ccb1 	.word	0x0000ccb1
    dca0:	0000d06f 	.word	0x0000d06f

0000dca4 <att_find_info_req>:
{
    dca4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    dca6:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    dca8:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    dcaa:	881d      	ldrh	r5, [r3, #0]
{
    dcac:	b085      	sub	sp, #20
    dcae:	4607      	mov	r7, r0
	if (!start || !end) {
    dcb0:	b195      	cbz	r5, dcd8 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    dcb2:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    dcb4:	b17c      	cbz	r4, dcd6 <att_find_info_req+0x32>
	if (start > end) {
    dcb6:	42a5      	cmp	r5, r4
    dcb8:	d80e      	bhi.n	dcd8 <att_find_info_req+0x34>
	(void)memset(&data, 0, sizeof(data));
    dcba:	2210      	movs	r2, #16
    dcbc:	2100      	movs	r1, #0
    dcbe:	4668      	mov	r0, sp
    dcc0:	f7f9 f80f 	bl	6ce2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    dcc4:	2200      	movs	r2, #0
    dcc6:	2105      	movs	r1, #5
    dcc8:	4630      	mov	r0, r6
    dcca:	f7ff fc57 	bl	d57c <bt_att_create_pdu>
    dcce:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    dcd0:	b958      	cbnz	r0, dcea <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    dcd2:	200e      	movs	r0, #14
	return att_find_info_rsp(att, start_handle, end_handle);
    dcd4:	e007      	b.n	dce6 <att_find_info_req+0x42>
			*err = 0;
    dcd6:	4625      	mov	r5, r4
    dcd8:	2301      	movs	r3, #1
    dcda:	462a      	mov	r2, r5
    dcdc:	2104      	movs	r1, #4
    dcde:	4630      	mov	r0, r6
    dce0:	f7ff fcce 	bl	d680 <send_err_rsp.part.12>
	return 0;
    dce4:	2000      	movs	r0, #0
}
    dce6:	b005      	add	sp, #20
    dce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    dcea:	4621      	mov	r1, r4
    dcec:	466b      	mov	r3, sp
    dcee:	4a09      	ldr	r2, [pc, #36]	; (dd14 <att_find_info_req+0x70>)
	data.att = att;
    dcf0:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    dcf2:	4628      	mov	r0, r5
    dcf4:	f000 fd72 	bl	e7dc <bt_gatt_foreach_attr>
	if (!data.rsp) {
    dcf8:	9c02      	ldr	r4, [sp, #8]
    dcfa:	b924      	cbnz	r4, dd06 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    dcfc:	9801      	ldr	r0, [sp, #4]
    dcfe:	f011 faa9 	bl	1f254 <net_buf_unref>
    dd02:	230a      	movs	r3, #10
    dd04:	e7e9      	b.n	dcda <att_find_info_req+0x36>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    dd06:	4b04      	ldr	r3, [pc, #16]	; (dd18 <att_find_info_req+0x74>)
    dd08:	9a01      	ldr	r2, [sp, #4]
    dd0a:	2104      	movs	r1, #4
    dd0c:	4630      	mov	r0, r6
    dd0e:	f7fd fe79 	bl	ba04 <bt_l2cap_send_cb>
    dd12:	e7e7      	b.n	dce4 <att_find_info_req+0x40>
    dd14:	0000cc17 	.word	0x0000cc17
    dd18:	0000d06f 	.word	0x0000d06f

0000dd1c <att_write_rsp.part.13.constprop.19>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    dd1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dd20:	b087      	sub	sp, #28
    dd22:	4690      	mov	r8, r2
    dd24:	4605      	mov	r5, r0
    dd26:	460e      	mov	r6, r1
	(void)memset(&data, 0, sizeof(data));
    dd28:	2218      	movs	r2, #24
    dd2a:	2100      	movs	r1, #0
    dd2c:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    dd2e:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
    dd30:	f7f8 ffd7 	bl	6ce2 <memset>
	if (rsp) {
    dd34:	f1b8 0f00 	cmp.w	r8, #0
    dd38:	d120      	bne.n	dd7c <att_write_rsp.part.13.constprop.19+0x60>
	data.value = value;
    dd3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dd3c:	9303      	str	r3, [sp, #12]
	data.len = len;
    dd3e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    dd42:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    dd46:	2301      	movs	r3, #1
    dd48:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    dd4c:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    dd50:	466b      	mov	r3, sp
    dd52:	4a1a      	ldr	r2, [pc, #104]	; (ddbc <att_write_rsp.part.13.constprop.19+0xa0>)
	data.conn = conn;
    dd54:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    dd56:	4639      	mov	r1, r7
    dd58:	4638      	mov	r0, r7
	data.op = op;
    dd5a:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    dd5e:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    dd62:	f000 fd3b 	bl	e7dc <bt_gatt_foreach_attr>
	if (data.err) {
    dd66:	f89d 4014 	ldrb.w	r4, [sp, #20]
    dd6a:	b98c      	cbnz	r4, dd90 <att_write_rsp.part.13.constprop.19+0x74>
	if (data.buf) {
    dd6c:	9a01      	ldr	r2, [sp, #4]
    dd6e:	b192      	cbz	r2, dd96 <att_write_rsp.part.13.constprop.19+0x7a>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    dd70:	4b13      	ldr	r3, [pc, #76]	; (ddc0 <att_write_rsp.part.13.constprop.19+0xa4>)
    dd72:	2104      	movs	r1, #4
    dd74:	4628      	mov	r0, r5
    dd76:	f7fd fe45 	bl	ba04 <bt_l2cap_send_cb>
    dd7a:	e00d      	b.n	dd98 <att_write_rsp.part.13.constprop.19+0x7c>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    dd7c:	2200      	movs	r2, #0
    dd7e:	4641      	mov	r1, r8
    dd80:	4628      	mov	r0, r5
    dd82:	f7ff fbfb 	bl	d57c <bt_att_create_pdu>
    dd86:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    dd88:	2800      	cmp	r0, #0
    dd8a:	d1d6      	bne.n	dd3a <att_write_rsp.part.13.constprop.19+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    dd8c:	240e      	movs	r4, #14
    dd8e:	e003      	b.n	dd98 <att_write_rsp.part.13.constprop.19+0x7c>
		if (rsp) {
    dd90:	f1b8 0f00 	cmp.w	r8, #0
    dd94:	d104      	bne.n	dda0 <att_write_rsp.part.13.constprop.19+0x84>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    dd96:	2400      	movs	r4, #0
}
    dd98:	4620      	mov	r0, r4
    dd9a:	b007      	add	sp, #28
    dd9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			net_buf_unref(data.buf);
    dda0:	9801      	ldr	r0, [sp, #4]
    dda2:	f011 fa57 	bl	1f254 <net_buf_unref>
	if (!req) {
    dda6:	2e00      	cmp	r6, #0
    dda8:	d0f5      	beq.n	dd96 <att_write_rsp.part.13.constprop.19+0x7a>
    ddaa:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ddae:	463a      	mov	r2, r7
    ddb0:	4631      	mov	r1, r6
    ddb2:	4628      	mov	r0, r5
    ddb4:	f7ff fc64 	bl	d680 <send_err_rsp.part.12>
    ddb8:	e7ed      	b.n	dd96 <att_write_rsp.part.13.constprop.19+0x7a>
    ddba:	bf00      	nop
    ddbc:	0000d4ad 	.word	0x0000d4ad
    ddc0:	0000d06f 	.word	0x0000d06f

0000ddc4 <att_signed_write_cmd>:
{
    ddc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    ddc8:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    ddca:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    ddcc:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    ddd0:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    ddd2:	4620      	mov	r0, r4
    ddd4:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    ddd6:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    ddda:	f011 fad0 	bl	1f37e <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    ddde:	4629      	mov	r1, r5
    dde0:	4630      	mov	r0, r6
    dde2:	f003 f823 	bl	10e2c <bt_smp_sign_verify>
	if (err) {
    dde6:	4607      	mov	r7, r0
    dde8:	b1c8      	cbz	r0, de1e <att_signed_write_cmd+0x5a>
		BT_ERR("Error verifying data");
    ddea:	4b1a      	ldr	r3, [pc, #104]	; (de54 <att_signed_write_cmd+0x90>)
    ddec:	6818      	ldr	r0, [r3, #0]
    ddee:	f010 0007 	ands.w	r0, r0, #7
    ddf2:	d011      	beq.n	de18 <att_signed_write_cmd+0x54>
    ddf4:	2301      	movs	r3, #1
    ddf6:	f04f 0200 	mov.w	r2, #0
    ddfa:	f363 0202 	bfi	r2, r3, #0, #3
    ddfe:	4916      	ldr	r1, [pc, #88]	; (de58 <att_signed_write_cmd+0x94>)
    de00:	4b16      	ldr	r3, [pc, #88]	; (de5c <att_signed_write_cmd+0x98>)
    de02:	4817      	ldr	r0, [pc, #92]	; (de60 <att_signed_write_cmd+0x9c>)
    de04:	1a5b      	subs	r3, r3, r1
    de06:	08db      	lsrs	r3, r3, #3
    de08:	f36f 02c5 	bfc	r2, #3, #3
    de0c:	f363 128f 	bfi	r2, r3, #6, #10
    de10:	4914      	ldr	r1, [pc, #80]	; (de64 <att_signed_write_cmd+0xa0>)
    de12:	f7f4 f96b 	bl	20ec <log_1>
    de16:	2000      	movs	r0, #0
}
    de18:	b002      	add	sp, #8
    de1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    de1e:	2101      	movs	r1, #1
    de20:	4620      	mov	r0, r4
    de22:	f011 fac5 	bl	1f3b0 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    de26:	2102      	movs	r1, #2
    de28:	4620      	mov	r0, r4
    de2a:	f011 fac1 	bl	1f3b0 <net_buf_simple_pull>
	if (!handle) {
    de2e:	f1b8 0f00 	cmp.w	r8, #0
    de32:	d00c      	beq.n	de4e <att_signed_write_cmd+0x8a>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    de34:	7b2b      	ldrb	r3, [r5, #12]
    de36:	3b0c      	subs	r3, #12
    de38:	b2db      	uxtb	r3, r3
    de3a:	9301      	str	r3, [sp, #4]
    de3c:	68ab      	ldr	r3, [r5, #8]
    de3e:	9300      	str	r3, [sp, #0]
    de40:	463a      	mov	r2, r7
    de42:	4643      	mov	r3, r8
    de44:	4639      	mov	r1, r7
    de46:	4630      	mov	r0, r6
    de48:	f7ff ff68 	bl	dd1c <att_write_rsp.part.13.constprop.19>
    de4c:	e7e4      	b.n	de18 <att_signed_write_cmd+0x54>
		return BT_ATT_ERR_INVALID_HANDLE;
    de4e:	2001      	movs	r0, #1
    de50:	e7e2      	b.n	de18 <att_signed_write_cmd+0x54>
    de52:	bf00      	nop
    de54:	2000e200 	.word	0x2000e200
    de58:	0002ef38 	.word	0x0002ef38
    de5c:	0002ef40 	.word	0x0002ef40
    de60:	00031f29 	.word	0x00031f29
    de64:	00031e8f 	.word	0x00031e8f

0000de68 <att_write_cmd>:
{
    de68:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    de6a:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    de6c:	f101 0008 	add.w	r0, r1, #8
{
    de70:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    de72:	f011 faad 	bl	1f3d0 <net_buf_simple_pull_le16>
	if (!handle) {
    de76:	4603      	mov	r3, r0
    de78:	b150      	cbz	r0, de90 <att_write_cmd+0x28>
    de7a:	7b22      	ldrb	r2, [r4, #12]
    de7c:	9201      	str	r2, [sp, #4]
    de7e:	68a2      	ldr	r2, [r4, #8]
    de80:	9200      	str	r2, [sp, #0]
    de82:	2200      	movs	r2, #0
    de84:	4611      	mov	r1, r2
    de86:	4628      	mov	r0, r5
    de88:	f7ff ff48 	bl	dd1c <att_write_rsp.part.13.constprop.19>
}
    de8c:	b003      	add	sp, #12
    de8e:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    de90:	2001      	movs	r0, #1
    de92:	e7fb      	b.n	de8c <att_write_cmd+0x24>

0000de94 <att_write_req>:
{
    de94:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    de96:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    de98:	f101 0008 	add.w	r0, r1, #8
{
    de9c:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    de9e:	f011 fa97 	bl	1f3d0 <net_buf_simple_pull_le16>
	if (!handle) {
    dea2:	4603      	mov	r3, r0
    dea4:	b150      	cbz	r0, debc <att_write_req+0x28>
    dea6:	7b22      	ldrb	r2, [r4, #12]
    dea8:	9201      	str	r2, [sp, #4]
    deaa:	68a2      	ldr	r2, [r4, #8]
    deac:	9200      	str	r2, [sp, #0]
    deae:	2112      	movs	r1, #18
    deb0:	2213      	movs	r2, #19
    deb2:	4628      	mov	r0, r5
    deb4:	f7ff ff32 	bl	dd1c <att_write_rsp.part.13.constprop.19>
}
    deb8:	b003      	add	sp, #12
    deba:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    debc:	2001      	movs	r0, #1
    debe:	e7fb      	b.n	deb8 <att_write_req+0x24>

0000dec0 <bt_att_init>:

void bt_att_init(void)
{
    dec0:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    dec2:	4803      	ldr	r0, [pc, #12]	; (ded0 <bt_att_init+0x10>)
    dec4:	f7fd fd20 	bl	b908 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    dec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    decc:	f000 bc2a 	b.w	e724 <bt_gatt_init>
    ded0:	2000d8d0 	.word	0x2000d8d0

0000ded4 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    ded4:	b510      	push	{r4, lr}
    ded6:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    ded8:	b1c8      	cbz	r0, df0e <bt_att_req_send+0x3a>
    deda:	b1c1      	cbz	r1, df0e <bt_att_req_send+0x3a>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    dedc:	f7ff f856 	bl	cf8c <att_chan_get>
	if (!att) {
    dee0:	4603      	mov	r3, r0
    dee2:	b1b8      	cbz	r0, df14 <bt_att_req_send+0x40>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    dee4:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    dee8:	b162      	cbz	r2, df04 <bt_att_req_send+0x30>
	parent->next = child;
    deea:	2000      	movs	r0, #0
    deec:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    deee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    def2:	b91a      	cbnz	r2, defc <bt_att_req_send+0x28>
	list->head = node;
    def4:	e9c3 4427 	strd	r4, r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    def8:	4610      	mov	r0, r2
	}

	return att_send_req(att, req);
}
    defa:	bd10      	pop	{r4, pc}
	parent->next = child;
    defc:	6014      	str	r4, [r2, #0]
	list->tail = node;
    defe:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    df02:	e7fa      	b.n	defa <bt_att_req_send+0x26>
	return att_send_req(att, req);
    df04:	4621      	mov	r1, r4
}
    df06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    df0a:	f7ff b8ef 	b.w	d0ec <att_send_req>
		return -EINVAL;
    df0e:	f06f 0015 	mvn.w	r0, #21
    df12:	e7f2      	b.n	defa <bt_att_req_send+0x26>
		return -ENOTCONN;
    df14:	f06f 0038 	mvn.w	r0, #56	; 0x38
    df18:	e7ef      	b.n	defa <bt_att_req_send+0x26>

0000df1a <sc_ccc_cfg_changed>:

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
	BT_DBG("value 0x%04x", value);
}
    df1a:	4770      	bx	lr

0000df1c <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    df1c:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    df1e:	2000      	movs	r0, #0
    df20:	4770      	bx	lr

0000df22 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    df22:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    df24:	2300      	movs	r3, #0
    df26:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    df28:	461a      	mov	r2, r3
    df2a:	42aa      	cmp	r2, r5
    df2c:	d108      	bne.n	df40 <gatt_ccc_changed+0x1e>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    df2e:	890a      	ldrh	r2, [r1, #8]
    df30:	429a      	cmp	r2, r3
    df32:	d00e      	beq.n	df52 <gatt_ccc_changed+0x30>
		ccc->value = value;
		if (ccc->cfg_changed) {
    df34:	68ca      	ldr	r2, [r1, #12]
		ccc->value = value;
    df36:	810b      	strh	r3, [r1, #8]
		if (ccc->cfg_changed) {
    df38:	b15a      	cbz	r2, df52 <gatt_ccc_changed+0x30>
			ccc->cfg_changed(attr, value);
    df3a:	4619      	mov	r1, r3
		}
	}
}
    df3c:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
    df3e:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    df40:	680c      	ldr	r4, [r1, #0]
    df42:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    df46:	3201      	adds	r2, #1
    df48:	8924      	ldrh	r4, [r4, #8]
    df4a:	42a3      	cmp	r3, r4
    df4c:	bf38      	it	cc
    df4e:	4623      	movcc	r3, r4
    df50:	e7eb      	b.n	df2a <gatt_ccc_changed+0x8>
}
    df52:	bc30      	pop	{r4, r5}
    df54:	4770      	bx	lr

0000df56 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    df56:	b410      	push	{r4}
    df58:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    df5a:	69dc      	ldr	r4, [r3, #28]
    df5c:	460a      	mov	r2, r1
    df5e:	6999      	ldr	r1, [r3, #24]
    df60:	4623      	mov	r3, r4
}
    df62:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    df64:	4718      	bx	r3
	...

0000df68 <gatt_notify>:
{
    df68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    df6c:	468a      	mov	sl, r1
    df6e:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    df70:	211b      	movs	r1, #27
    df72:	1c9a      	adds	r2, r3, #2
{
    df74:	4680      	mov	r8, r0
    df76:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    df78:	f7ff fb00 	bl	d57c <bt_att_create_pdu>
	if (!buf) {
    df7c:	4604      	mov	r4, r0
    df7e:	b9c8      	cbnz	r0, dfb4 <gatt_notify+0x4c>
		BT_WARN("No buffer available to send notification");
    df80:	4b1a      	ldr	r3, [pc, #104]	; (dfec <gatt_notify+0x84>)
    df82:	681b      	ldr	r3, [r3, #0]
    df84:	f003 0307 	and.w	r3, r3, #7
    df88:	2b01      	cmp	r3, #1
    df8a:	d910      	bls.n	dfae <gatt_notify+0x46>
    df8c:	2302      	movs	r3, #2
    df8e:	f04f 0200 	mov.w	r2, #0
    df92:	f363 0202 	bfi	r2, r3, #0, #3
    df96:	4916      	ldr	r1, [pc, #88]	; (dff0 <gatt_notify+0x88>)
    df98:	4b16      	ldr	r3, [pc, #88]	; (dff4 <gatt_notify+0x8c>)
    df9a:	1a5b      	subs	r3, r3, r1
    df9c:	f360 02c5 	bfi	r2, r0, #3, #3
    dfa0:	08db      	lsrs	r3, r3, #3
    dfa2:	f363 128f 	bfi	r2, r3, #6, #10
    dfa6:	4914      	ldr	r1, [pc, #80]	; (dff8 <gatt_notify+0x90>)
    dfa8:	4814      	ldr	r0, [pc, #80]	; (dffc <gatt_notify+0x94>)
    dfaa:	f7f4 f89f 	bl	20ec <log_1>
		return -ENOMEM;
    dfae:	f06f 000b 	mvn.w	r0, #11
    dfb2:	e018      	b.n	dfe6 <gatt_notify+0x7e>
	nfy = net_buf_add(buf, sizeof(*nfy));
    dfb4:	f100 0708 	add.w	r7, r0, #8
    dfb8:	2102      	movs	r1, #2
    dfba:	4638      	mov	r0, r7
    dfbc:	f011 f9a8 	bl	1f310 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    dfc0:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    dfc2:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    dfc4:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    dfc8:	4638      	mov	r0, r7
    dfca:	f011 f9a1 	bl	1f310 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    dfce:	4632      	mov	r2, r6
    dfd0:	4649      	mov	r1, r9
    dfd2:	4628      	mov	r0, r5
    dfd4:	f7f8 fe58 	bl	6c88 <memcpy>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb);
    dfd8:	4640      	mov	r0, r8
    dfda:	9b08      	ldr	r3, [sp, #32]
    dfdc:	4622      	mov	r2, r4
    dfde:	2104      	movs	r1, #4
    dfe0:	f7fd fd10 	bl	ba04 <bt_l2cap_send_cb>
	return 0;
    dfe4:	2000      	movs	r0, #0
}
    dfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dfea:	bf00      	nop
    dfec:	2000e234 	.word	0x2000e234
    dff0:	0002ef38 	.word	0x0002ef38
    dff4:	0002efa8 	.word	0x0002efa8
    dff8:	0003212f 	.word	0x0003212f
    dffc:	00032220 	.word	0x00032220

0000e000 <gatt_register>:
Z_GENLIST_IS_EMPTY(slist)
    e000:	4923      	ldr	r1, [pc, #140]	; (e090 <gatt_register+0x90>)
	if (sys_slist_is_empty(&db)) {
    e002:	680b      	ldr	r3, [r1, #0]
{
    e004:	b570      	push	{r4, r5, r6, lr}
	u16_t count = svc->attr_count;
    e006:	e9d0 4500 	ldrd	r4, r5, [r0]
	if (sys_slist_is_empty(&db)) {
    e00a:	b14b      	cbz	r3, e020 <gatt_register+0x20>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    e00c:	684b      	ldr	r3, [r1, #4]
    e00e:	2b00      	cmp	r3, #0
    e010:	d03c      	beq.n	e08c <gatt_register+0x8c>
	handle = last->attrs[last->attr_count - 1].handle;
    e012:	e953 3202 	ldrd	r3, r2, [r3, #-8]
    e016:	2614      	movs	r6, #20
    e018:	fb06 3302 	mla	r3, r6, r2, r3
    e01c:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    e020:	b2ad      	uxth	r5, r5
    e022:	2214      	movs	r2, #20
    e024:	fb02 4505 	mla	r5, r2, r5, r4
	for (; attrs && count; attrs++, count--) {
    e028:	b10c      	cbz	r4, e02e <gatt_register+0x2e>
    e02a:	42ac      	cmp	r4, r5
    e02c:	d108      	bne.n	e040 <gatt_register+0x40>
	parent->next = child;
    e02e:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    e030:	f100 0208 	add.w	r2, r0, #8
    e034:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
    e036:	6848      	ldr	r0, [r1, #4]
    e038:	bb20      	cbnz	r0, e084 <gatt_register+0x84>
	list->head = node;
    e03a:	e9c1 2200 	strd	r2, r2, [r1]
}
    e03e:	bd70      	pop	{r4, r5, r6, pc}
		if (!attrs->handle) {
    e040:	8a22      	ldrh	r2, [r4, #16]
    e042:	b92a      	cbnz	r2, e050 <gatt_register+0x50>
			attrs->handle = ++handle;
    e044:	3301      	adds	r3, #1
    e046:	b29a      	uxth	r2, r3
    e048:	8222      	strh	r2, [r4, #16]
	for (; attrs && count; attrs++, count--) {
    e04a:	3414      	adds	r4, #20
    e04c:	4613      	mov	r3, r2
    e04e:	e7eb      	b.n	e028 <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    e050:	429a      	cmp	r2, r3
    e052:	d8fa      	bhi.n	e04a <gatt_register+0x4a>
			BT_ERR("Unable to register handle 0x%04x",
    e054:	4b0f      	ldr	r3, [pc, #60]	; (e094 <gatt_register+0x94>)
    e056:	681b      	ldr	r3, [r3, #0]
    e058:	075b      	lsls	r3, r3, #29
    e05a:	d010      	beq.n	e07e <gatt_register+0x7e>
    e05c:	2101      	movs	r1, #1
    e05e:	f04f 0300 	mov.w	r3, #0
    e062:	f361 0302 	bfi	r3, r1, #0, #3
    e066:	480c      	ldr	r0, [pc, #48]	; (e098 <gatt_register+0x98>)
    e068:	490c      	ldr	r1, [pc, #48]	; (e09c <gatt_register+0x9c>)
    e06a:	1a09      	subs	r1, r1, r0
    e06c:	08c9      	lsrs	r1, r1, #3
    e06e:	f36f 03c5 	bfc	r3, #3, #3
    e072:	f361 138f 	bfi	r3, r1, #6, #10
    e076:	480a      	ldr	r0, [pc, #40]	; (e0a0 <gatt_register+0xa0>)
    e078:	490a      	ldr	r1, [pc, #40]	; (e0a4 <gatt_register+0xa4>)
    e07a:	f7f4 f84b 	bl	2114 <log_2>
			return -EINVAL;
    e07e:	f06f 0015 	mvn.w	r0, #21
    e082:	e7dc      	b.n	e03e <gatt_register+0x3e>
	parent->next = child;
    e084:	6002      	str	r2, [r0, #0]
	list->tail = node;
    e086:	604a      	str	r2, [r1, #4]
	return 0;
    e088:	4618      	mov	r0, r3
    e08a:	e7d8      	b.n	e03e <gatt_register+0x3e>
	handle = last->attrs[last->attr_count - 1].handle;
    e08c:	681b      	ldr	r3, [r3, #0]
    e08e:	deff      	udf	#255	; 0xff
    e090:	20000df4 	.word	0x20000df4
    e094:	2000e234 	.word	0x2000e234
    e098:	0002ef38 	.word	0x0002ef38
    e09c:	0002efa8 	.word	0x0002efa8
    e0a0:	0003224d 	.word	0x0003224d
    e0a4:	00032153 	.word	0x00032153

0000e0a8 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    e0a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;
	u16_t value_handle = params->attr->handle;
    e0ac:	698b      	ldr	r3, [r1, #24]
{
    e0ae:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    e0b0:	8a1e      	ldrh	r6, [r3, #16]

	/* Check if attribute is a characteristic then adjust the handle */
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    e0b2:	6818      	ldr	r0, [r3, #0]
    e0b4:	2300      	movs	r3, #0
{
    e0b6:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    e0b8:	f88d 3004 	strb.w	r3, [sp, #4]
    e0bc:	a901      	add	r1, sp, #4
    e0be:	f642 0303 	movw	r3, #10243	; 0x2803
    e0c2:	f8ad 3006 	strh.w	r3, [sp, #6]
    e0c6:	f7f9 fb9d 	bl	7804 <bt_uuid_cmp>
    e0ca:	b930      	cbnz	r0, e0da <gatt_indicate+0x32>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    e0cc:	69a3      	ldr	r3, [r4, #24]

		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    e0ce:	68db      	ldr	r3, [r3, #12]
    e0d0:	791b      	ldrb	r3, [r3, #4]
    e0d2:	069a      	lsls	r2, r3, #26
    e0d4:	d55d      	bpl.n	e192 <gatt_indicate+0xea>
			return -EINVAL;
		}

		value_handle += 1;
    e0d6:	3601      	adds	r6, #1
    e0d8:	b2b6      	uxth	r6, r6
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    e0da:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    e0dc:	211d      	movs	r1, #29
    e0de:	3202      	adds	r2, #2
    e0e0:	4648      	mov	r0, r9
    e0e2:	f7ff fa4b 	bl	d57c <bt_att_create_pdu>
	if (!buf) {
    e0e6:	4605      	mov	r5, r0
    e0e8:	b9c8      	cbnz	r0, e11e <gatt_indicate+0x76>
		BT_WARN("No buffer available to send indication");
    e0ea:	4b2b      	ldr	r3, [pc, #172]	; (e198 <gatt_indicate+0xf0>)
    e0ec:	681b      	ldr	r3, [r3, #0]
    e0ee:	f003 0307 	and.w	r3, r3, #7
    e0f2:	2b01      	cmp	r3, #1
    e0f4:	d910      	bls.n	e118 <gatt_indicate+0x70>
    e0f6:	2302      	movs	r3, #2
    e0f8:	f04f 0200 	mov.w	r2, #0
    e0fc:	f363 0202 	bfi	r2, r3, #0, #3
    e100:	4926      	ldr	r1, [pc, #152]	; (e19c <gatt_indicate+0xf4>)
    e102:	4b27      	ldr	r3, [pc, #156]	; (e1a0 <gatt_indicate+0xf8>)
    e104:	1a5b      	subs	r3, r3, r1
    e106:	f360 02c5 	bfi	r2, r0, #3, #3
    e10a:	08db      	lsrs	r3, r3, #3
    e10c:	f363 128f 	bfi	r2, r3, #6, #10
    e110:	4924      	ldr	r1, [pc, #144]	; (e1a4 <gatt_indicate+0xfc>)
    e112:	4825      	ldr	r0, [pc, #148]	; (e1a8 <gatt_indicate+0x100>)
    e114:	f7f3 ffea 	bl	20ec <log_1>
		return -ENOMEM;
    e118:	f06f 040b 	mvn.w	r4, #11
    e11c:	e035      	b.n	e18a <gatt_indicate+0xe2>
	}

	BT_DBG("conn %p handle 0x%04x", conn, value_handle);

	ind = net_buf_add(buf, sizeof(*ind));
    e11e:	f100 0708 	add.w	r7, r0, #8
    e122:	2102      	movs	r1, #2
    e124:	4638      	mov	r0, r7
    e126:	f011 f8f3 	bl	1f310 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    e12a:	4680      	mov	r8, r0

	net_buf_add(buf, params->len);
    e12c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	ind->handle = sys_cpu_to_le16(value_handle);
    e12e:	f828 6b02 	strh.w	r6, [r8], #2
	net_buf_add(buf, params->len);
    e132:	4638      	mov	r0, r7
    e134:	f011 f8ec 	bl	1f310 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    e138:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    e13a:	6a21      	ldr	r1, [r4, #32]
    e13c:	4640      	mov	r0, r8
    e13e:	f7f8 fda3 	bl	6c88 <memcpy>
		req->destroy = destroy;
    e142:	2600      	movs	r6, #0
		req->func = func;
    e144:	4b19      	ldr	r3, [pc, #100]	; (e1ac <gatt_indicate+0x104>)
		req->buf = buf;
    e146:	6125      	str	r5, [r4, #16]
		req->func = func;
    e148:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    e14a:	60a6      	str	r6, [r4, #8]
		err = bt_att_req_send(conn, req);
    e14c:	4621      	mov	r1, r4
    e14e:	4648      	mov	r0, r9
    e150:	f7ff fec0 	bl	ded4 <bt_att_req_send>
	if (err) {
    e154:	4604      	mov	r4, r0
    e156:	b1c0      	cbz	r0, e18a <gatt_indicate+0xe2>
		BT_ERR("Error sending ATT PDU: %d", err);
    e158:	4b0f      	ldr	r3, [pc, #60]	; (e198 <gatt_indicate+0xf0>)
    e15a:	681b      	ldr	r3, [r3, #0]
    e15c:	075b      	lsls	r3, r3, #29
    e15e:	d011      	beq.n	e184 <gatt_indicate+0xdc>
    e160:	2201      	movs	r2, #1
    e162:	f04f 0300 	mov.w	r3, #0
    e166:	f362 0302 	bfi	r3, r2, #0, #3
    e16a:	490c      	ldr	r1, [pc, #48]	; (e19c <gatt_indicate+0xf4>)
    e16c:	4a0c      	ldr	r2, [pc, #48]	; (e1a0 <gatt_indicate+0xf8>)
    e16e:	1a52      	subs	r2, r2, r1
    e170:	08d2      	lsrs	r2, r2, #3
    e172:	f366 03c5 	bfi	r3, r6, #3, #3
    e176:	f362 138f 	bfi	r3, r2, #6, #10
    e17a:	490d      	ldr	r1, [pc, #52]	; (e1b0 <gatt_indicate+0x108>)
    e17c:	4602      	mov	r2, r0
    e17e:	480d      	ldr	r0, [pc, #52]	; (e1b4 <gatt_indicate+0x10c>)
    e180:	f7f3 ffc8 	bl	2114 <log_2>
		net_buf_unref(buf);
    e184:	4628      	mov	r0, r5
    e186:	f011 f865 	bl	1f254 <net_buf_unref>

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    e18a:	4620      	mov	r0, r4
    e18c:	b003      	add	sp, #12
    e18e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    e192:	f06f 0415 	mvn.w	r4, #21
    e196:	e7f8      	b.n	e18a <gatt_indicate+0xe2>
    e198:	2000e234 	.word	0x2000e234
    e19c:	0002ef38 	.word	0x0002ef38
    e1a0:	0002efa8 	.word	0x0002efa8
    e1a4:	00032145 	.word	0x00032145
    e1a8:	000321d7 	.word	0x000321d7
    e1ac:	0000df57 	.word	0x0000df57
    e1b0:	0003213b 	.word	0x0003213b
    e1b4:	00032202 	.word	0x00032202

0000e1b8 <sc_indicate.constprop.15>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    e1b8:	b510      	push	{r4, lr}
    e1ba:	4b16      	ldr	r3, [pc, #88]	; (e214 <sc_indicate.constprop.15+0x5c>)
    e1bc:	f3bf 8f5b 	dmb	ish
    e1c0:	f103 024c 	add.w	r2, r3, #76	; 0x4c
    e1c4:	e852 4f00 	ldrex	r4, [r2]
    e1c8:	f044 0c01 	orr.w	ip, r4, #1
    e1cc:	e842 ce00 	strex	lr, ip, [r2]
    e1d0:	f1be 0f00 	cmp.w	lr, #0
    e1d4:	d1f6      	bne.n	e1c4 <sc_indicate.constprop.15+0xc>
    e1d6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    e1da:	07e2      	lsls	r2, r4, #31
    e1dc:	d402      	bmi.n	e1e4 <sc_indicate.constprop.15+0x2c>
		sc->start = start;
    e1de:	8518      	strh	r0, [r3, #40]	; 0x28
		*end = new_end;
    e1e0:	8559      	strh	r1, [r3, #42]	; 0x2a
    e1e2:	e009      	b.n	e1f8 <sc_indicate.constprop.15+0x40>
	if (new_start >= *start && new_end <= *end) {
    e1e4:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
    e1e6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    e1e8:	4284      	cmp	r4, r0
    e1ea:	d802      	bhi.n	e1f2 <sc_indicate.constprop.15+0x3a>
    e1ec:	4291      	cmp	r1, r2
    e1ee:	d8f7      	bhi.n	e1e0 <sc_indicate.constprop.15+0x28>
}
    e1f0:	bd10      	pop	{r4, pc}
	if (*end < new_end) {
    e1f2:	4291      	cmp	r1, r2
		*start = new_start;
    e1f4:	8518      	strh	r0, [r3, #40]	; 0x28
	if (*end < new_end) {
    e1f6:	d8f3      	bhi.n	e1e0 <sc_indicate.constprop.15+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e1f8:	f3bf 8f5b 	dmb	ish
    e1fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e1fe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    e202:	079b      	lsls	r3, r3, #30
    e204:	d4f4      	bmi.n	e1f0 <sc_indicate.constprop.15+0x38>
    e206:	220a      	movs	r2, #10
    e208:	4903      	ldr	r1, [pc, #12]	; (e218 <sc_indicate.constprop.15+0x60>)
    e20a:	4804      	ldr	r0, [pc, #16]	; (e21c <sc_indicate.constprop.15+0x64>)
}
    e20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e210:	f020 ba7c 	b.w	2e70c <k_delayed_work_submit_to_queue>
    e214:	20000dfc 	.word	0x20000dfc
    e218:	20000e28 	.word	0x20000e28
    e21c:	200037b0 	.word	0x200037b0

0000e220 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    e220:	6882      	ldr	r2, [r0, #8]
    e222:	4b19      	ldr	r3, [pc, #100]	; (e288 <connected_cb+0x68>)
    e224:	429a      	cmp	r2, r3
{
    e226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e22a:	4607      	mov	r7, r0
    e22c:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    e22e:	d126      	bne.n	e27e <connected_cb+0x5e>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    e230:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    e232:	2600      	movs	r6, #0
    e234:	686b      	ldr	r3, [r5, #4]
    e236:	429e      	cmp	r6, r3
    e238:	d221      	bcs.n	e27e <connected_cb+0x5e>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    e23a:	6829      	ldr	r1, [r5, #0]
    e23c:	ea4f 1806 	mov.w	r8, r6, lsl #4
    e240:	4441      	add	r1, r8
    e242:	3101      	adds	r1, #1
    e244:	4620      	mov	r0, r4
    e246:	f7fc ff93 	bl	b170 <bt_conn_addr_le_cmp>
    e24a:	b9d8      	cbnz	r0, e284 <connected_cb+0x64>
			continue;
		}

		if (ccc->cfg[i].value) {
    e24c:	682b      	ldr	r3, [r5, #0]
    e24e:	4443      	add	r3, r8
    e250:	891b      	ldrh	r3, [r3, #8]
    e252:	b1bb      	cbz	r3, e284 <connected_cb+0x64>
			gatt_ccc_changed(attr, ccc);
    e254:	4629      	mov	r1, r5
    e256:	4638      	mov	r0, r7
    e258:	f7ff fe63 	bl	df22 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    e25c:	682c      	ldr	r4, [r5, #0]
    e25e:	4b0b      	ldr	r3, [pc, #44]	; (e28c <connected_cb+0x6c>)
    e260:	429c      	cmp	r4, r3
    e262:	d10c      	bne.n	e27e <connected_cb+0x5e>
				sc_restore(&ccc->cfg[i]);
    e264:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    e266:	89a0      	ldrh	r0, [r4, #12]
    e268:	89e1      	ldrh	r1, [r4, #14]
    e26a:	b900      	cbnz	r0, e26e <connected_cb+0x4e>
    e26c:	b139      	cbz	r1, e27e <connected_cb+0x5e>
	sc_indicate(&gatt_sc, data->start, data->end);
    e26e:	f7ff ffa3 	bl	e1b8 <sc_indicate.constprop.15>
	(void)memset(cfg->data, 0, sizeof(cfg->data));
    e272:	2204      	movs	r2, #4
    e274:	2100      	movs	r1, #0
    e276:	f104 000c 	add.w	r0, r4, #12
    e27a:	f7f8 fd32 	bl	6ce2 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    e27e:	2001      	movs	r0, #1
    e280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    e284:	3601      	adds	r6, #1
    e286:	e7d5      	b.n	e234 <connected_cb+0x14>
    e288:	0000e441 	.word	0x0000e441
    e28c:	20000e50 	.word	0x20000e50

0000e290 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e290:	490d      	ldr	r1, [pc, #52]	; (e2c8 <sc_indicate_rsp+0x38>)
    e292:	f3bf 8f5b 	dmb	ish
    e296:	f101 034c 	add.w	r3, r1, #76	; 0x4c
    e29a:	e853 2f00 	ldrex	r2, [r3]
    e29e:	f022 0202 	bic.w	r2, r2, #2
    e2a2:	e843 2000 	strex	r0, r2, [r3]
    e2a6:	2800      	cmp	r0, #0
    e2a8:	d1f7      	bne.n	e29a <sc_indicate_rsp+0xa>
    e2aa:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e2ae:	f3bf 8f5b 	dmb	ish
    e2b2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    e2b4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    e2b8:	07db      	lsls	r3, r3, #31
    e2ba:	d504      	bpl.n	e2c6 <sc_indicate_rsp+0x36>
    e2bc:	2200      	movs	r2, #0
    e2be:	312c      	adds	r1, #44	; 0x2c
    e2c0:	4802      	ldr	r0, [pc, #8]	; (e2cc <sc_indicate_rsp+0x3c>)
    e2c2:	f020 ba23 	b.w	2e70c <k_delayed_work_submit_to_queue>
}
    e2c6:	4770      	bx	lr
    e2c8:	20000dfc 	.word	0x20000dfc
    e2cc:	200037b0 	.word	0x200037b0

0000e2d0 <read_appearance>:
{
    e2d0:	b513      	push	{r0, r1, r4, lr}
    e2d2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    e2d6:	4610      	mov	r0, r2
	if (offset > value_len) {
    e2d8:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    e2da:	f04f 0200 	mov.w	r2, #0
    e2de:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    e2e2:	d80d      	bhi.n	e300 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    e2e4:	f1c1 0402 	rsb	r4, r1, #2
    e2e8:	429c      	cmp	r4, r3
    e2ea:	bfa8      	it	ge
    e2ec:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    e2ee:	f10d 0306 	add.w	r3, sp, #6
    e2f2:	4622      	mov	r2, r4
    e2f4:	4419      	add	r1, r3
    e2f6:	f7f8 fcc7 	bl	6c88 <memcpy>
}
    e2fa:	4620      	mov	r0, r4
    e2fc:	b002      	add	sp, #8
    e2fe:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e300:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    e304:	e7f9      	b.n	e2fa <read_appearance+0x2a>
	...

0000e308 <read_ppcp>:
{
    e308:	b513      	push	{r0, r1, r4, lr}
    e30a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
    e30e:	4c0b      	ldr	r4, [pc, #44]	; (e33c <read_ppcp+0x34>)
{
    e310:	4610      	mov	r0, r2
	if (offset > value_len) {
    e312:	2908      	cmp	r1, #8
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
    e314:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    e318:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    e31c:	d80b      	bhi.n	e336 <read_ppcp+0x2e>
	len = min(buf_len, value_len - offset);
    e31e:	f1c1 0408 	rsb	r4, r1, #8
    e322:	429c      	cmp	r4, r3
    e324:	bfa8      	it	ge
    e326:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    e328:	4622      	mov	r2, r4
    e32a:	4469      	add	r1, sp
    e32c:	f7f8 fcac 	bl	6c88 <memcpy>
}
    e330:	4620      	mov	r0, r4
    e332:	b002      	add	sp, #8
    e334:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e336:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    e33a:	e7f9      	b.n	e330 <read_ppcp+0x28>
    e33c:	00280018 	.word	0x00280018

0000e340 <read_name>:
{
    e340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e344:	4698      	mov	r8, r3
    e346:	4616      	mov	r6, r2
    e348:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	const char *name = bt_get_name();
    e34c:	f7fb fb5a 	bl	9a04 <bt_get_name>
    e350:	4607      	mov	r7, r0
				 strlen(name));
    e352:	f7f8 fc43 	bl	6bdc <strlen>
	if (offset > value_len) {
    e356:	b283      	uxth	r3, r0
    e358:	42ab      	cmp	r3, r5
    e35a:	d30d      	bcc.n	e378 <read_name+0x38>
	len = min(buf_len, value_len - offset);
    e35c:	1b5c      	subs	r4, r3, r5
    e35e:	4544      	cmp	r4, r8
    e360:	4623      	mov	r3, r4
    e362:	bfa8      	it	ge
    e364:	4643      	movge	r3, r8
    e366:	b29c      	uxth	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    e368:	4622      	mov	r2, r4
    e36a:	1979      	adds	r1, r7, r5
    e36c:	4630      	mov	r0, r6
    e36e:	f7f8 fc8b 	bl	6c88 <memcpy>
}
    e372:	4620      	mov	r0, r4
    e374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e378:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
    e37c:	e7f9      	b.n	e372 <read_name+0x32>

0000e37e <bt_gatt_attr_read_ccc>:
{
    e37e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    e382:	68ce      	ldr	r6, [r1, #12]
{
    e384:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    e388:	4604      	mov	r4, r0
    e38a:	4690      	mov	r8, r2
    e38c:	4699      	mov	r9, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    e38e:	2500      	movs	r5, #0
    e390:	6873      	ldr	r3, [r6, #4]
    e392:	42ab      	cmp	r3, r5
    e394:	d90f      	bls.n	e3b6 <bt_gatt_attr_read_ccc+0x38>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    e396:	6831      	ldr	r1, [r6, #0]
    e398:	ea4f 1a05 	mov.w	sl, r5, lsl #4
    e39c:	4451      	add	r1, sl
    e39e:	3101      	adds	r1, #1
    e3a0:	4620      	mov	r0, r4
    e3a2:	f7fc fee5 	bl	b170 <bt_conn_addr_le_cmp>
    e3a6:	b108      	cbz	r0, e3ac <bt_gatt_attr_read_ccc+0x2e>
	for (i = 0; i < ccc->cfg_len; i++) {
    e3a8:	3501      	adds	r5, #1
    e3aa:	e7f1      	b.n	e390 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    e3ac:	6832      	ldr	r2, [r6, #0]
    e3ae:	4452      	add	r2, sl
    e3b0:	8913      	ldrh	r3, [r2, #8]
    e3b2:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    e3b6:	6873      	ldr	r3, [r6, #4]
    e3b8:	42ab      	cmp	r3, r5
		value = 0x0000;
    e3ba:	bf04      	itt	eq
    e3bc:	2300      	moveq	r3, #0
    e3be:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    e3c2:	2f02      	cmp	r7, #2
    e3c4:	d80f      	bhi.n	e3e6 <bt_gatt_attr_read_ccc+0x68>
	len = min(buf_len, value_len - offset);
    e3c6:	f1c7 0402 	rsb	r4, r7, #2
    e3ca:	454c      	cmp	r4, r9
    e3cc:	bfa8      	it	ge
    e3ce:	464c      	movge	r4, r9
	memcpy(buf, (u8_t *)value + offset, len);
    e3d0:	f10d 0306 	add.w	r3, sp, #6
    e3d4:	4622      	mov	r2, r4
    e3d6:	19d9      	adds	r1, r3, r7
    e3d8:	4640      	mov	r0, r8
    e3da:	f7f8 fc55 	bl	6c88 <memcpy>
}
    e3de:	4620      	mov	r0, r4
    e3e0:	b002      	add	sp, #8
    e3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e3e6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    e3ea:	e7f8      	b.n	e3de <bt_gatt_attr_read_ccc+0x60>

0000e3ec <bt_gatt_attr_read_service>:
{
    e3ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    e3ee:	68c9      	ldr	r1, [r1, #12]
{
    e3f0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    e3f4:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    e3f6:	780a      	ldrb	r2, [r1, #0]
    e3f8:	b992      	cbnz	r2, e420 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    e3fa:	884a      	ldrh	r2, [r1, #2]
    e3fc:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    e400:	2d02      	cmp	r5, #2
    e402:	d819      	bhi.n	e438 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    e404:	f1c5 0402 	rsb	r4, r5, #2
    e408:	429c      	cmp	r4, r3
    e40a:	bfa8      	it	ge
    e40c:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    e40e:	f10d 0306 	add.w	r3, sp, #6
    e412:	4622      	mov	r2, r4
    e414:	1959      	adds	r1, r3, r5
    e416:	f7f8 fc37 	bl	6c88 <memcpy>
}
    e41a:	4620      	mov	r0, r4
    e41c:	b003      	add	sp, #12
    e41e:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    e420:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    e422:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    e426:	d807      	bhi.n	e438 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    e428:	f1c5 0410 	rsb	r4, r5, #16
    e42c:	429c      	cmp	r4, r3
    e42e:	bfa8      	it	ge
    e430:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    e432:	4622      	mov	r2, r4
    e434:	4429      	add	r1, r5
    e436:	e7ee      	b.n	e416 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e438:	f06f 0406 	mvn.w	r4, #6
    e43c:	e7ed      	b.n	e41a <bt_gatt_attr_read_service+0x2e>
	...

0000e440 <bt_gatt_attr_write_ccc>:
{
    e440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e444:	b085      	sub	sp, #20
    e446:	4688      	mov	r8, r1
    e448:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
    e44c:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    e450:	2902      	cmp	r1, #2
{
    e452:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    e454:	d871      	bhi.n	e53a <bt_gatt_attr_write_ccc+0xfa>
	if (offset + len > sizeof(u16_t)) {
    e456:	4419      	add	r1, r3
    e458:	2902      	cmp	r1, #2
    e45a:	461f      	mov	r7, r3
    e45c:	dc70      	bgt.n	e540 <bt_gatt_attr_write_ccc+0x100>
	return ((u16_t)src[1] << 8) | src[0];
    e45e:	7853      	ldrb	r3, [r2, #1]
    e460:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    e462:	2400      	movs	r4, #0
    e464:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    e468:	686b      	ldr	r3, [r5, #4]
    e46a:	42a3      	cmp	r3, r4
    e46c:	d907      	bls.n	e47e <bt_gatt_attr_write_ccc+0x3e>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    e46e:	6829      	ldr	r1, [r5, #0]
    e470:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    e474:	3101      	adds	r1, #1
    e476:	4648      	mov	r0, r9
    e478:	f7fc fe7a 	bl	b170 <bt_conn_addr_le_cmp>
    e47c:	b9c8      	cbnz	r0, e4b2 <bt_gatt_attr_write_ccc+0x72>
	if (i == ccc->cfg_len) {
    e47e:	686b      	ldr	r3, [r5, #4]
    e480:	42a3      	cmp	r3, r4
    e482:	d13d      	bne.n	e500 <bt_gatt_attr_write_ccc+0xc0>
		if (!value) {
    e484:	2e00      	cmp	r6, #0
    e486:	d054      	beq.n	e532 <bt_gatt_attr_write_ccc+0xf2>
		for (i = 0; i < ccc->cfg_len; i++) {
    e488:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    e48a:	46a3      	mov	fp, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    e48c:	686b      	ldr	r3, [r5, #4]
    e48e:	42a3      	cmp	r3, r4
    e490:	d919      	bls.n	e4c6 <bt_gatt_attr_write_ccc+0x86>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    e492:	6828      	ldr	r0, [r5, #0]
    e494:	f8cd b000 	str.w	fp, [sp]
    e498:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    e49c:	4450      	add	r0, sl
    e49e:	2207      	movs	r2, #7
    e4a0:	4669      	mov	r1, sp
    e4a2:	3001      	adds	r0, #1
    e4a4:	f8cd b003 	str.w	fp, [sp, #3]
    e4a8:	f7f8 fbc7 	bl	6c3a <memcmp>
    e4ac:	b118      	cbz	r0, e4b6 <bt_gatt_attr_write_ccc+0x76>
		for (i = 0; i < ccc->cfg_len; i++) {
    e4ae:	3401      	adds	r4, #1
    e4b0:	e7ec      	b.n	e48c <bt_gatt_attr_write_ccc+0x4c>
	for (i = 0; i < ccc->cfg_len; i++) {
    e4b2:	3401      	adds	r4, #1
    e4b4:	e7d8      	b.n	e468 <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    e4b6:	6828      	ldr	r0, [r5, #0]
    e4b8:	4450      	add	r0, sl
	memcpy(dst, src, sizeof(*dst));
    e4ba:	2207      	movs	r2, #7
    e4bc:	f109 0148 	add.w	r1, r9, #72	; 0x48
    e4c0:	3001      	adds	r0, #1
    e4c2:	f7f8 fbe1 	bl	6c88 <memcpy>
		if (i == ccc->cfg_len) {
    e4c6:	686b      	ldr	r3, [r5, #4]
    e4c8:	42a3      	cmp	r3, r4
    e4ca:	d119      	bne.n	e500 <bt_gatt_attr_write_ccc+0xc0>
			BT_WARN("No space to store CCC cfg");
    e4cc:	4b1e      	ldr	r3, [pc, #120]	; (e548 <bt_gatt_attr_write_ccc+0x108>)
    e4ce:	681b      	ldr	r3, [r3, #0]
    e4d0:	f003 0307 	and.w	r3, r3, #7
    e4d4:	2b01      	cmp	r3, #1
    e4d6:	d910      	bls.n	e4fa <bt_gatt_attr_write_ccc+0xba>
    e4d8:	2302      	movs	r3, #2
    e4da:	f04f 0200 	mov.w	r2, #0
    e4de:	f363 0202 	bfi	r2, r3, #0, #3
    e4e2:	491a      	ldr	r1, [pc, #104]	; (e54c <bt_gatt_attr_write_ccc+0x10c>)
    e4e4:	4b1a      	ldr	r3, [pc, #104]	; (e550 <bt_gatt_attr_write_ccc+0x110>)
    e4e6:	481b      	ldr	r0, [pc, #108]	; (e554 <bt_gatt_attr_write_ccc+0x114>)
    e4e8:	1a5b      	subs	r3, r3, r1
    e4ea:	f36f 02c5 	bfc	r2, #3, #3
    e4ee:	08db      	lsrs	r3, r3, #3
    e4f0:	f363 128f 	bfi	r2, r3, #6, #10
    e4f4:	4918      	ldr	r1, [pc, #96]	; (e558 <bt_gatt_attr_write_ccc+0x118>)
    e4f6:	f7f3 fdf9 	bl	20ec <log_1>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    e4fa:	f06f 0710 	mvn.w	r7, #16
    e4fe:	e018      	b.n	e532 <bt_gatt_attr_write_ccc+0xf2>
	ccc->cfg[i].value = value;
    e500:	682b      	ldr	r3, [r5, #0]
    e502:	0124      	lsls	r4, r4, #4
    e504:	4423      	add	r3, r4
    e506:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    e508:	892b      	ldrh	r3, [r5, #8]
    e50a:	42b3      	cmp	r3, r6
    e50c:	d003      	beq.n	e516 <bt_gatt_attr_write_ccc+0xd6>
		gatt_ccc_changed(attr, ccc);
    e50e:	4629      	mov	r1, r5
    e510:	4640      	mov	r0, r8
    e512:	f7ff fd06 	bl	df22 <gatt_ccc_changed>
	if (!value) {
    e516:	b966      	cbnz	r6, e532 <bt_gatt_attr_write_ccc+0xf2>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    e518:	6828      	ldr	r0, [r5, #0]
    e51a:	9602      	str	r6, [sp, #8]
    e51c:	4420      	add	r0, r4
    e51e:	2207      	movs	r2, #7
    e520:	a902      	add	r1, sp, #8
    e522:	3001      	adds	r0, #1
    e524:	f8cd 600b 	str.w	r6, [sp, #11]
    e528:	f7f8 fbae 	bl	6c88 <memcpy>
		ccc->cfg[i].value = 0;
    e52c:	682b      	ldr	r3, [r5, #0]
    e52e:	441c      	add	r4, r3
    e530:	8126      	strh	r6, [r4, #8]
}
    e532:	4638      	mov	r0, r7
    e534:	b005      	add	sp, #20
    e536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e53a:	f06f 0706 	mvn.w	r7, #6
    e53e:	e7f8      	b.n	e532 <bt_gatt_attr_write_ccc+0xf2>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    e540:	f06f 070c 	mvn.w	r7, #12
    e544:	e7f5      	b.n	e532 <bt_gatt_attr_write_ccc+0xf2>
    e546:	bf00      	nop
    e548:	2000e234 	.word	0x2000e234
    e54c:	0002ef38 	.word	0x0002ef38
    e550:	0002efa8 	.word	0x0002efa8
    e554:	000321b9 	.word	0x000321b9
    e558:	00032178 	.word	0x00032178

0000e55c <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    e55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    e560:	6882      	ldr	r2, [r0, #8]
    e562:	4b2f      	ldr	r3, [pc, #188]	; (e620 <disconnected_cb+0xc4>)
    e564:	429a      	cmp	r2, r3
{
    e566:	b085      	sub	sp, #20
    e568:	4681      	mov	r9, r0
    e56a:	460e      	mov	r6, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    e56c:	d14b      	bne.n	e606 <disconnected_cb+0xaa>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    e56e:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    e570:	8923      	ldrh	r3, [r4, #8]
    e572:	2b00      	cmp	r3, #0
    e574:	d047      	beq.n	e606 <disconnected_cb+0xaa>
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    e576:	2500      	movs	r5, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e578:	f101 0b48 	add.w	fp, r1, #72	; 0x48
	for (i = 0; i < ccc->cfg_len; i++) {
    e57c:	6863      	ldr	r3, [r4, #4]
    e57e:	429d      	cmp	r5, r3
    e580:	d30c      	bcc.n	e59c <disconnected_cb+0x40>
			}
		}
	}

	/* Reset value while disconnected */
	(void)memset(&ccc->value, 0, sizeof(ccc->value));
    e582:	2202      	movs	r2, #2
    e584:	2100      	movs	r1, #0
    e586:	f104 0008 	add.w	r0, r4, #8
    e58a:	f7f8 fbaa 	bl	6ce2 <memset>
	if (ccc->cfg_changed) {
    e58e:	68e3      	ldr	r3, [r4, #12]
    e590:	2b00      	cmp	r3, #0
    e592:	d038      	beq.n	e606 <disconnected_cb+0xaa>
		ccc->cfg_changed(attr, ccc->value);
    e594:	8921      	ldrh	r1, [r4, #8]
    e596:	4648      	mov	r0, r9
    e598:	4798      	blx	r3
    e59a:	e034      	b.n	e606 <disconnected_cb+0xaa>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    e59c:	6823      	ldr	r3, [r4, #0]
    e59e:	ea4f 1805 	mov.w	r8, r5, lsl #4
    e5a2:	eb03 0a08 	add.w	sl, r3, r8
		if (!cfg->value) {
    e5a6:	f8ba 2008 	ldrh.w	r2, [sl, #8]
    e5aa:	b162      	cbz	r2, e5c6 <disconnected_cb+0x6a>
		if (conn->id != cfg->id ||
    e5ac:	7a31      	ldrb	r1, [r6, #8]
    e5ae:	f813 2008 	ldrb.w	r2, [r3, r8]
    e5b2:	4291      	cmp	r1, r2
    e5b4:	f10a 0701 	add.w	r7, sl, #1
    e5b8:	d007      	beq.n	e5ca <disconnected_cb+0x6e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    e5ba:	4639      	mov	r1, r7
    e5bc:	f813 0008 	ldrb.w	r0, [r3, r8]
    e5c0:	f7fc fdee 	bl	b1a0 <bt_conn_lookup_addr_le>
			if (tmp) {
    e5c4:	b9d0      	cbnz	r0, e5fc <disconnected_cb+0xa0>
	for (i = 0; i < ccc->cfg_len; i++) {
    e5c6:	3501      	adds	r5, #1
    e5c8:	e7d8      	b.n	e57c <disconnected_cb+0x20>
		    bt_conn_addr_le_cmp(conn, &cfg->peer)) {
    e5ca:	4639      	mov	r1, r7
    e5cc:	4630      	mov	r0, r6
    e5ce:	9301      	str	r3, [sp, #4]
    e5d0:	f7fc fdce 	bl	b170 <bt_conn_addr_le_cmp>
		if (conn->id != cfg->id ||
    e5d4:	9b01      	ldr	r3, [sp, #4]
    e5d6:	2800      	cmp	r0, #0
    e5d8:	d1ef      	bne.n	e5ba <disconnected_cb+0x5e>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e5da:	4659      	mov	r1, fp
    e5dc:	7a30      	ldrb	r0, [r6, #8]
    e5de:	f7fb fef7 	bl	a3d0 <bt_addr_le_is_bonded>
    e5e2:	4680      	mov	r8, r0
    e5e4:	b9b0      	cbnz	r0, e614 <disconnected_cb+0xb8>
				bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    e5e6:	9002      	str	r0, [sp, #8]
    e5e8:	2207      	movs	r2, #7
    e5ea:	f8cd 000b 	str.w	r0, [sp, #11]
    e5ee:	a902      	add	r1, sp, #8
    e5f0:	4638      	mov	r0, r7
    e5f2:	f7f8 fb49 	bl	6c88 <memcpy>
				cfg->value = 0;
    e5f6:	f8aa 8008 	strh.w	r8, [sl, #8]
    e5fa:	e7e4      	b.n	e5c6 <disconnected_cb+0x6a>
				if (tmp->state == BT_CONN_CONNECTED) {
    e5fc:	7b43      	ldrb	r3, [r0, #13]
    e5fe:	2b04      	cmp	r3, #4
    e600:	d105      	bne.n	e60e <disconnected_cb+0xb2>
					bt_conn_unref(tmp);
    e602:	f7fc fe0d 	bl	b220 <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    e606:	2001      	movs	r0, #1
    e608:	b005      	add	sp, #20
    e60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				bt_conn_unref(tmp);
    e60e:	f7fc fe07 	bl	b220 <bt_conn_unref>
    e612:	e7d8      	b.n	e5c6 <disconnected_cb+0x6a>
    e614:	2207      	movs	r2, #7
    e616:	4659      	mov	r1, fp
    e618:	4638      	mov	r0, r7
    e61a:	f7f8 fb35 	bl	6c88 <memcpy>
    e61e:	e7d2      	b.n	e5c6 <disconnected_cb+0x6a>
    e620:	0000e441 	.word	0x0000e441

0000e624 <notify_cb>:
{
    e624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    e628:	4605      	mov	r5, r0
    e62a:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    e62c:	2600      	movs	r6, #0
    e62e:	f642 1302 	movw	r3, #10498	; 0x2902
    e632:	a902      	add	r1, sp, #8
    e634:	6800      	ldr	r0, [r0, #0]
    e636:	f88d 6008 	strb.w	r6, [sp, #8]
    e63a:	f8ad 300a 	strh.w	r3, [sp, #10]
    e63e:	f7f9 f8e1 	bl	7804 <bt_uuid_cmp>
    e642:	b178      	cbz	r0, e664 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    e644:	f642 0303 	movw	r3, #10243	; 0x2803
    e648:	6828      	ldr	r0, [r5, #0]
    e64a:	f88d 600c 	strb.w	r6, [sp, #12]
    e64e:	a903      	add	r1, sp, #12
    e650:	f8ad 300e 	strh.w	r3, [sp, #14]
    e654:	f7f9 f8d6 	bl	7804 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    e658:	1b80      	subs	r0, r0, r6
    e65a:	bf18      	it	ne
    e65c:	2001      	movne	r0, #1
}
    e65e:	b004      	add	sp, #16
    e660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    e664:	68aa      	ldr	r2, [r5, #8]
    e666:	4b2d      	ldr	r3, [pc, #180]	; (e71c <notify_cb+0xf8>)
    e668:	429a      	cmp	r2, r3
    e66a:	d001      	beq.n	e670 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    e66c:	2001      	movs	r0, #1
    e66e:	e7f6      	b.n	e65e <notify_cb+0x3a>
	ccc = attr->user_data;
    e670:	68ef      	ldr	r7, [r5, #12]
			if (ccc->cfg == sc_ccc_cfg) {
    e672:	f8df 90ac 	ldr.w	r9, [pc, #172]	; e720 <notify_cb+0xfc>
	for (i = 0; i < ccc->cfg_len; i++) {
    e676:	4606      	mov	r6, r0
    e678:	4680      	mov	r8, r0
    e67a:	687b      	ldr	r3, [r7, #4]
    e67c:	429e      	cmp	r6, r3
    e67e:	d2f5      	bcs.n	e66c <notify_cb+0x48>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    e680:	683a      	ldr	r2, [r7, #0]
		if (cfg->value != data->type) {
    e682:	88a1      	ldrh	r1, [r4, #4]
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    e684:	0133      	lsls	r3, r6, #4
    e686:	18d5      	adds	r5, r2, r3
		if (cfg->value != data->type) {
    e688:	8928      	ldrh	r0, [r5, #8]
    e68a:	4288      	cmp	r0, r1
    e68c:	d116      	bne.n	e6bc <notify_cb+0x98>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    e68e:	1c69      	adds	r1, r5, #1
    e690:	5cd0      	ldrb	r0, [r2, r3]
    e692:	f7fc fd85 	bl	b1a0 <bt_conn_lookup_addr_le>
		if (!conn) {
    e696:	4682      	mov	sl, r0
    e698:	bb00      	cbnz	r0, e6dc <notify_cb+0xb8>
			if (ccc->cfg == sc_ccc_cfg) {
    e69a:	683b      	ldr	r3, [r7, #0]
    e69c:	454b      	cmp	r3, r9
    e69e:	d10d      	bne.n	e6bc <notify_cb+0x98>
				sc_save(cfg, data->params);
    e6a0:	69a3      	ldr	r3, [r4, #24]
	memcpy(&data, params->data, params->len);
    e6a2:	a803      	add	r0, sp, #12
    e6a4:	6a19      	ldr	r1, [r3, #32]
    e6a6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    e6a8:	f7f8 faee 	bl	6c88 <memcpy>
	if (!stored->start && !stored->end) {
    e6ac:	89a9      	ldrh	r1, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    e6ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	if (!stored->start && !stored->end) {
    e6b2:	b929      	cbnz	r1, e6c0 <notify_cb+0x9c>
    e6b4:	89ea      	ldrh	r2, [r5, #14]
    e6b6:	b93a      	cbnz	r2, e6c8 <notify_cb+0xa4>
		*stored = data;
    e6b8:	9803      	ldr	r0, [sp, #12]
    e6ba:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    e6bc:	3601      	adds	r6, #1
    e6be:	e7dc      	b.n	e67a <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    e6c0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	if (new_start >= *start && new_end <= *end) {
    e6c4:	428a      	cmp	r2, r1
    e6c6:	d307      	bcc.n	e6d8 <notify_cb+0xb4>
    e6c8:	89ea      	ldrh	r2, [r5, #14]
    e6ca:	429a      	cmp	r2, r3
    e6cc:	d2f6      	bcs.n	e6bc <notify_cb+0x98>
	if (*end < new_end) {
    e6ce:	89ea      	ldrh	r2, [r5, #14]
    e6d0:	429a      	cmp	r2, r3
    e6d2:	d2f3      	bcs.n	e6bc <notify_cb+0x98>
		*end = new_end;
    e6d4:	81eb      	strh	r3, [r5, #14]
    e6d6:	e7f1      	b.n	e6bc <notify_cb+0x98>
		*start = new_start;
    e6d8:	81aa      	strh	r2, [r5, #12]
    e6da:	e7f8      	b.n	e6ce <notify_cb+0xaa>
		if (conn->state != BT_CONN_CONNECTED) {
    e6dc:	7b43      	ldrb	r3, [r0, #13]
    e6de:	2b04      	cmp	r3, #4
    e6e0:	d002      	beq.n	e6e8 <notify_cb+0xc4>
			bt_conn_unref(conn);
    e6e2:	f7fc fd9d 	bl	b220 <bt_conn_unref>
    e6e6:	e7e9      	b.n	e6bc <notify_cb+0x98>
		if (data->type == BT_GATT_CCC_INDICATE) {
    e6e8:	88a3      	ldrh	r3, [r4, #4]
    e6ea:	2b02      	cmp	r3, #2
    e6ec:	d10b      	bne.n	e706 <notify_cb+0xe2>
			err = gatt_indicate(conn, data->params);
    e6ee:	69a1      	ldr	r1, [r4, #24]
    e6f0:	f7ff fcda 	bl	e0a8 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    e6f4:	4605      	mov	r5, r0
		bt_conn_unref(conn);
    e6f6:	4650      	mov	r0, sl
    e6f8:	f7fc fd92 	bl	b220 <bt_conn_unref>
		if (err < 0) {
    e6fc:	2d00      	cmp	r5, #0
    e6fe:	db0b      	blt.n	e718 <notify_cb+0xf4>
		data->err = 0;
    e700:	f8c4 8000 	str.w	r8, [r4]
    e704:	e7da      	b.n	e6bc <notify_cb+0x98>
			err = gatt_notify(conn, data->attr->handle,
    e706:	68a2      	ldr	r2, [r4, #8]
    e708:	8aa3      	ldrh	r3, [r4, #20]
    e70a:	8a11      	ldrh	r1, [r2, #16]
    e70c:	68e2      	ldr	r2, [r4, #12]
    e70e:	9200      	str	r2, [sp, #0]
    e710:	6922      	ldr	r2, [r4, #16]
    e712:	f7ff fc29 	bl	df68 <gatt_notify>
    e716:	e7ed      	b.n	e6f4 <notify_cb+0xd0>
			return BT_GATT_ITER_STOP;
    e718:	2000      	movs	r0, #0
    e71a:	e7a0      	b.n	e65e <notify_cb+0x3a>
    e71c:	0000e441 	.word	0x0000e441
    e720:	20000e50 	.word	0x20000e50

0000e724 <bt_gatt_init>:
{
    e724:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    e726:	4b0e      	ldr	r3, [pc, #56]	; (e760 <bt_gatt_init+0x3c>)
    e728:	f3bf 8f5b 	dmb	ish
    e72c:	2201      	movs	r2, #1
    e72e:	e853 1f00 	ldrex	r1, [r3]
    e732:	2900      	cmp	r1, #0
    e734:	d103      	bne.n	e73e <bt_gatt_init+0x1a>
    e736:	e843 2000 	strex	r0, r2, [r3]
    e73a:	2800      	cmp	r0, #0
    e73c:	d1f7      	bne.n	e72e <bt_gatt_init+0xa>
    e73e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    e742:	d10b      	bne.n	e75c <bt_gatt_init+0x38>
	gatt_register(&gap_svc);
    e744:	4807      	ldr	r0, [pc, #28]	; (e764 <bt_gatt_init+0x40>)
    e746:	f7ff fc5b 	bl	e000 <gatt_register>
	gatt_register(&gatt_svc);
    e74a:	4807      	ldr	r0, [pc, #28]	; (e768 <bt_gatt_init+0x44>)
    e74c:	f7ff fc58 	bl	e000 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    e750:	4906      	ldr	r1, [pc, #24]	; (e76c <bt_gatt_init+0x48>)
    e752:	4807      	ldr	r0, [pc, #28]	; (e770 <bt_gatt_init+0x4c>)
}
    e754:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    e758:	f01f bf80 	b.w	2e65c <k_delayed_work_init>
}
    e75c:	bd08      	pop	{r3, pc}
    e75e:	bf00      	nop
    e760:	20000e4c 	.word	0x20000e4c
    e764:	2000d9f0 	.word	0x2000d9f0
    e768:	2000da4c 	.word	0x2000da4c
    e76c:	0000e861 	.word	0x0000e861
    e770:	20000e28 	.word	0x20000e28

0000e774 <bt_gatt_service_register>:
{
    e774:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e776:	4604      	mov	r4, r0
	bt_gatt_init();
    e778:	f7ff ffd4 	bl	e724 <bt_gatt_init>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    e77c:	6823      	ldr	r3, [r4, #0]
    e77e:	2500      	movs	r5, #0
    e780:	6818      	ldr	r0, [r3, #0]
    e782:	f88d 5000 	strb.w	r5, [sp]
    e786:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    e78a:	4669      	mov	r1, sp
    e78c:	f8ad 3002 	strh.w	r3, [sp, #2]
    e790:	f7f9 f838 	bl	7804 <bt_uuid_cmp>
    e794:	b918      	cbnz	r0, e79e <bt_gatt_service_register+0x2a>
		return -EALREADY;
    e796:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
    e79a:	b003      	add	sp, #12
    e79c:	bd30      	pop	{r4, r5, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    e79e:	6823      	ldr	r3, [r4, #0]
    e7a0:	a901      	add	r1, sp, #4
    e7a2:	6818      	ldr	r0, [r3, #0]
    e7a4:	f88d 5004 	strb.w	r5, [sp, #4]
    e7a8:	f641 0301 	movw	r3, #6145	; 0x1801
    e7ac:	f8ad 3006 	strh.w	r3, [sp, #6]
    e7b0:	f7f9 f828 	bl	7804 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    e7b4:	2800      	cmp	r0, #0
    e7b6:	d0ee      	beq.n	e796 <bt_gatt_service_register+0x22>
	err = gatt_register(svc);
    e7b8:	4620      	mov	r0, r4
    e7ba:	f7ff fc21 	bl	e000 <gatt_register>
	if (err < 0) {
    e7be:	2800      	cmp	r0, #0
    e7c0:	dbeb      	blt.n	e79a <bt_gatt_service_register+0x26>
		    svc->attrs[svc->attr_count - 1].handle);
    e7c2:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    e7c6:	2114      	movs	r1, #20
    e7c8:	fb01 2303 	mla	r3, r1, r3, r2
    e7cc:	8a10      	ldrh	r0, [r2, #16]
    e7ce:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    e7d2:	f7ff fcf1 	bl	e1b8 <sc_indicate.constprop.15>
	return 0;
    e7d6:	4628      	mov	r0, r5
    e7d8:	e7df      	b.n	e79a <bt_gatt_service_register+0x26>
	...

0000e7dc <bt_gatt_foreach_attr>:
{
    e7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e7e0:	4698      	mov	r8, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    e7e2:	4b12      	ldr	r3, [pc, #72]	; (e82c <bt_gatt_foreach_attr+0x50>)
    e7e4:	681c      	ldr	r4, [r3, #0]
{
    e7e6:	4605      	mov	r5, r0
    e7e8:	460e      	mov	r6, r1
    e7ea:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    e7ec:	b1dc      	cbz	r4, e826 <bt_gatt_foreach_attr+0x4a>
    e7ee:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    e7f0:	f04f 0914 	mov.w	r9, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    e7f4:	b1bc      	cbz	r4, e826 <bt_gatt_foreach_attr+0x4a>
		for (i = 0; i < svc->attr_count; i++) {
    e7f6:	f04f 0a00 	mov.w	sl, #0
    e7fa:	e007      	b.n	e80c <bt_gatt_foreach_attr+0x30>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    e7fc:	6820      	ldr	r0, [r4, #0]
    e7fe:	fb09 000a 	mla	r0, r9, sl, r0
			if (attr->handle < start_handle ||
    e802:	8a01      	ldrh	r1, [r0, #16]
    e804:	42a9      	cmp	r1, r5
    e806:	d208      	bcs.n	e81a <bt_gatt_foreach_attr+0x3e>
		for (i = 0; i < svc->attr_count; i++) {
    e808:	f10a 0a01 	add.w	sl, sl, #1
    e80c:	6863      	ldr	r3, [r4, #4]
    e80e:	4553      	cmp	r3, sl
    e810:	d8f4      	bhi.n	e7fc <bt_gatt_foreach_attr+0x20>
	return node->next;
    e812:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    e814:	b13c      	cbz	r4, e826 <bt_gatt_foreach_attr+0x4a>
    e816:	3c08      	subs	r4, #8
    e818:	e7ec      	b.n	e7f4 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    e81a:	42b1      	cmp	r1, r6
    e81c:	d8f4      	bhi.n	e808 <bt_gatt_foreach_attr+0x2c>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    e81e:	4641      	mov	r1, r8
    e820:	47b8      	blx	r7
    e822:	2800      	cmp	r0, #0
    e824:	d1f0      	bne.n	e808 <bt_gatt_foreach_attr+0x2c>
}
    e826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e82a:	bf00      	nop
    e82c:	20000df4 	.word	0x20000df4

0000e830 <bt_gatt_indicate.part.10>:
int bt_gatt_indicate(struct bt_conn *conn,
    e830:	b500      	push	{lr}
    e832:	b089      	sub	sp, #36	; 0x24
	nfy.err = -ENOTCONN;
    e834:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    e838:	9007      	str	r0, [sp, #28]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    e83a:	6980      	ldr	r0, [r0, #24]
	nfy.err = -ENOTCONN;
    e83c:	9301      	str	r3, [sp, #4]
	nfy.type = BT_GATT_CCC_INDICATE;
    e83e:	2302      	movs	r3, #2
    e840:	f8ad 3008 	strh.w	r3, [sp, #8]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    e844:	4a05      	ldr	r2, [pc, #20]	; (e85c <bt_gatt_indicate.part.10+0x2c>)
    e846:	8a00      	ldrh	r0, [r0, #16]
    e848:	ab01      	add	r3, sp, #4
    e84a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e84e:	f7ff ffc5 	bl	e7dc <bt_gatt_foreach_attr>
}
    e852:	9801      	ldr	r0, [sp, #4]
    e854:	b009      	add	sp, #36	; 0x24
    e856:	f85d fb04 	ldr.w	pc, [sp], #4
    e85a:	bf00      	nop
    e85c:	0000e625 	.word	0x0000e625

0000e860 <sc_process>:
{
    e860:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    e862:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    e866:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    e86a:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    e86c:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    e870:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    e874:	382c      	subs	r0, #44	; 0x2c
    e876:	f103 0420 	add.w	r4, r3, #32
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e87a:	f3bf 8f5b 	dmb	ish
    e87e:	e854 2f00 	ldrex	r2, [r4]
    e882:	f022 0201 	bic.w	r2, r2, #1
    e886:	e844 2100 	strex	r1, r2, [r4]
    e88a:	2900      	cmp	r1, #0
    e88c:	d1f7      	bne.n	e87e <sc_process+0x1e>
    e88e:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    e892:	2200      	movs	r2, #0
    e894:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    e898:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    e89c:	4a0e      	ldr	r2, [pc, #56]	; (e8d8 <sc_process+0x78>)
    e89e:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    e8a2:	4a0e      	ldr	r2, [pc, #56]	; (e8dc <sc_process+0x7c>)
    e8a4:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    e8a8:	aa01      	add	r2, sp, #4
    e8aa:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    e8ae:	2204      	movs	r2, #4
    e8b0:	f823 2c08 	strh.w	r2, [r3, #-8]
    e8b4:	f7ff ffbc 	bl	e830 <bt_gatt_indicate.part.10>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    e8b8:	b958      	cbnz	r0, e8d2 <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e8ba:	f3bf 8f5b 	dmb	ish
    e8be:	e854 3f00 	ldrex	r3, [r4]
    e8c2:	f043 0302 	orr.w	r3, r3, #2
    e8c6:	e844 3200 	strex	r2, r3, [r4]
    e8ca:	2a00      	cmp	r2, #0
    e8cc:	d1f7      	bne.n	e8be <sc_process+0x5e>
    e8ce:	f3bf 8f5b 	dmb	ish
}
    e8d2:	b002      	add	sp, #8
    e8d4:	bd10      	pop	{r4, pc}
    e8d6:	bf00      	nop
    e8d8:	2000da24 	.word	0x2000da24
    e8dc:	0000e291 	.word	0x0000e291

0000e8e0 <bt_gatt_attr_next>:
{
    e8e0:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    e8e2:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    e8e4:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    e8e6:	3101      	adds	r1, #1
    e8e8:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    e8ea:	2200      	movs	r2, #0
    e8ec:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    e8f0:	4608      	mov	r0, r1
    e8f2:	4a03      	ldr	r2, [pc, #12]	; (e900 <bt_gatt_attr_next+0x20>)
    e8f4:	f7ff ff72 	bl	e7dc <bt_gatt_foreach_attr>
}
    e8f8:	9801      	ldr	r0, [sp, #4]
    e8fa:	b003      	add	sp, #12
    e8fc:	f85d fb04 	ldr.w	pc, [sp], #4
    e900:	0000df1d 	.word	0x0000df1d

0000e904 <bt_gatt_attr_read_chrc>:
{
    e904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    e908:	68cf      	ldr	r7, [r1, #12]
{
    e90a:	b086      	sub	sp, #24
    e90c:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    e90e:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    e910:	793b      	ldrb	r3, [r7, #4]
{
    e912:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	pdu.properties = chrc->properties;
    e916:	f88d 3004 	strb.w	r3, [sp, #4]
{
    e91a:	4688      	mov	r8, r1
    e91c:	4616      	mov	r6, r2
	next = bt_gatt_attr_next(attr);
    e91e:	f7ff ffdf 	bl	e8e0 <bt_gatt_attr_next>
	if (!next) {
    e922:	2800      	cmp	r0, #0
    e924:	d135      	bne.n	e992 <bt_gatt_attr_read_chrc+0x8e>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    e926:	4b22      	ldr	r3, [pc, #136]	; (e9b0 <bt_gatt_attr_read_chrc+0xac>)
    e928:	681b      	ldr	r3, [r3, #0]
    e92a:	f003 0307 	and.w	r3, r3, #7
    e92e:	2b01      	cmp	r3, #1
    e930:	d912      	bls.n	e958 <bt_gatt_attr_read_chrc+0x54>
    e932:	2202      	movs	r2, #2
    e934:	f04f 0300 	mov.w	r3, #0
    e938:	f362 0302 	bfi	r3, r2, #0, #3
    e93c:	491d      	ldr	r1, [pc, #116]	; (e9b4 <bt_gatt_attr_read_chrc+0xb0>)
    e93e:	4a1e      	ldr	r2, [pc, #120]	; (e9b8 <bt_gatt_attr_read_chrc+0xb4>)
    e940:	1a52      	subs	r2, r2, r1
    e942:	f360 03c5 	bfi	r3, r0, #3, #3
    e946:	08d2      	lsrs	r2, r2, #3
    e948:	f362 138f 	bfi	r3, r2, #6, #10
    e94c:	491b      	ldr	r1, [pc, #108]	; (e9bc <bt_gatt_attr_read_chrc+0xb8>)
    e94e:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    e952:	481b      	ldr	r0, [pc, #108]	; (e9c0 <bt_gatt_attr_read_chrc+0xbc>)
    e954:	f7f3 fbde 	bl	2114 <log_2>
		pdu.value_handle = 0x0000;
    e958:	2300      	movs	r3, #0
    e95a:	f88d 3005 	strb.w	r3, [sp, #5]
    e95e:	f88d 3006 	strb.w	r3, [sp, #6]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    e962:	6839      	ldr	r1, [r7, #0]
    e964:	780b      	ldrb	r3, [r1, #0]
    e966:	b9c3      	cbnz	r3, e99a <bt_gatt_attr_read_chrc+0x96>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    e968:	884b      	ldrh	r3, [r1, #2]
    e96a:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2;
    e96e:	2305      	movs	r3, #5
	if (offset > value_len) {
    e970:	42ab      	cmp	r3, r5
    e972:	d31a      	bcc.n	e9aa <bt_gatt_attr_read_chrc+0xa6>
	len = min(buf_len, value_len - offset);
    e974:	1b5b      	subs	r3, r3, r5
    e976:	42a3      	cmp	r3, r4
    e978:	bfa8      	it	ge
    e97a:	4623      	movge	r3, r4
    e97c:	b29c      	uxth	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    e97e:	ab01      	add	r3, sp, #4
    e980:	4622      	mov	r2, r4
    e982:	1959      	adds	r1, r3, r5
    e984:	4630      	mov	r0, r6
    e986:	f7f8 f97f 	bl	6c88 <memcpy>
}
    e98a:	4620      	mov	r0, r4
    e98c:	b006      	add	sp, #24
    e98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    e992:	8a03      	ldrh	r3, [r0, #16]
    e994:	f8ad 3005 	strh.w	r3, [sp, #5]
    e998:	e7e3      	b.n	e962 <bt_gatt_attr_read_chrc+0x5e>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    e99a:	2210      	movs	r2, #16
    e99c:	3101      	adds	r1, #1
    e99e:	f10d 0007 	add.w	r0, sp, #7
    e9a2:	f7f8 f971 	bl	6c88 <memcpy>
		value_len += 16;
    e9a6:	2313      	movs	r3, #19
    e9a8:	e7e2      	b.n	e970 <bt_gatt_attr_read_chrc+0x6c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e9aa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    e9ae:	e7ec      	b.n	e98a <bt_gatt_attr_read_chrc+0x86>
    e9b0:	2000e234 	.word	0x2000e234
    e9b4:	0002ef38 	.word	0x0002ef38
    e9b8:	0002efa8 	.word	0x0002efa8
    e9bc:	00032161 	.word	0x00032161
    e9c0:	0003218f 	.word	0x0003218f

0000e9c4 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    e9c4:	4603      	mov	r3, r0
    e9c6:	4a03      	ldr	r2, [pc, #12]	; (e9d4 <bt_gatt_connected+0x10>)
    e9c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e9cc:	2001      	movs	r0, #1
    e9ce:	f7ff bf05 	b.w	e7dc <bt_gatt_foreach_attr>
    e9d2:	bf00      	nop
    e9d4:	0000e221 	.word	0x0000e221

0000e9d8 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    e9d8:	4603      	mov	r3, r0
    e9da:	4a03      	ldr	r2, [pc, #12]	; (e9e8 <bt_gatt_disconnected+0x10>)
    e9dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e9e0:	2001      	movs	r0, #1
    e9e2:	f7ff befb 	b.w	e7dc <bt_gatt_foreach_attr>
    e9e6:	bf00      	nop
    e9e8:	0000e55d 	.word	0x0000e55d

0000e9ec <sys_memcpy_swap>:
 * @param dst A valid pointer on a memory area where to copy the data in
 * @param src A valid pointer on a memory area where to copy the data from
 * @param length Size of both dst and src memory areas
 */
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
    e9ec:	b510      	push	{r4, lr}

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
    e9ee:	1e53      	subs	r3, r2, #1
    e9f0:	4419      	add	r1, r3
    e9f2:	3801      	subs	r0, #1
    e9f4:	460b      	mov	r3, r1

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
    e9f6:	f813 4901 	ldrb.w	r4, [r3], #-1
    e9fa:	f800 4f01 	strb.w	r4, [r0, #1]!
	for (; length > 0; length--) {
    e9fe:	189c      	adds	r4, r3, r2
    ea00:	42a1      	cmp	r1, r4
    ea02:	d1f8      	bne.n	e9f6 <sys_memcpy_swap+0xa>
	}
}
    ea04:	bd10      	pop	{r4, pc}

0000ea06 <sys_mem_swap>:
 *
 * @param buf A valid pointer on a memory area to swap
 * @param length Size of buf memory area
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
    ea06:	b510      	push	{r4, lr}
    ea08:	1843      	adds	r3, r0, r1
    ea0a:	eb00 0151 	add.w	r1, r0, r1, lsr #1
	size_t i;

	for (i = 0; i < (length/2); i++) {
    ea0e:	4288      	cmp	r0, r1
    ea10:	d100      	bne.n	ea14 <sys_mem_swap+0xe>
		u8_t tmp = ((u8_t *)buf)[i];

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
		((u8_t *)buf)[length - 1 - i] = tmp;
	}
}
    ea12:	bd10      	pop	{r4, pc}
		u8_t tmp = ((u8_t *)buf)[i];
    ea14:	7802      	ldrb	r2, [r0, #0]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ea16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    ea1a:	f800 4b01 	strb.w	r4, [r0], #1
		((u8_t *)buf)[length - 1 - i] = tmp;
    ea1e:	701a      	strb	r2, [r3, #0]
    ea20:	e7f5      	b.n	ea0e <sys_mem_swap+0x8>
	...

0000ea24 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    ea24:	4b10      	ldr	r3, [pc, #64]	; (ea68 <get_io_capa+0x44>)
    ea26:	681b      	ldr	r3, [r3, #0]
    ea28:	b1ab      	cbz	r3, ea56 <get_io_capa+0x32>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    ea2a:	681a      	ldr	r2, [r3, #0]
    ea2c:	b132      	cbz	r2, ea3c <get_io_capa+0x18>
    ea2e:	6859      	ldr	r1, [r3, #4]
    ea30:	b121      	cbz	r1, ea3c <get_io_capa+0x18>
    ea32:	6899      	ldr	r1, [r3, #8]
    ea34:	b989      	cbnz	r1, ea5a <get_io_capa+0x36>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    ea36:	490d      	ldr	r1, [pc, #52]	; (ea6c <get_io_capa+0x48>)
    ea38:	7809      	ldrb	r1, [r1, #0]
    ea3a:	b171      	cbz	r1, ea5a <get_io_capa+0x36>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    ea3c:	490b      	ldr	r1, [pc, #44]	; (ea6c <get_io_capa+0x48>)
    ea3e:	7809      	ldrb	r1, [r1, #0]
    ea40:	b111      	cbz	r1, ea48 <get_io_capa+0x24>
    ea42:	b10a      	cbz	r2, ea48 <get_io_capa+0x24>
    ea44:	6899      	ldr	r1, [r3, #8]
    ea46:	b951      	cbnz	r1, ea5e <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    ea48:	685b      	ldr	r3, [r3, #4]
    ea4a:	b953      	cbnz	r3, ea62 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    ea4c:	2a00      	cmp	r2, #0
    ea4e:	bf0c      	ite	eq
    ea50:	2003      	moveq	r0, #3
    ea52:	2000      	movne	r0, #0
    ea54:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    ea56:	2003      	movs	r0, #3
    ea58:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    ea5a:	2004      	movs	r0, #4
    ea5c:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    ea5e:	2001      	movs	r0, #1
    ea60:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    ea62:	2002      	movs	r0, #2
	}
}
    ea64:	4770      	bx	lr
    ea66:	bf00      	nop
    ea68:	20003670 	.word	0x20003670
    ea6c:	20001045 	.word	0x20001045

0000ea70 <get_auth>:
	bondable = enable;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    ea70:	4b0c      	ldr	r3, [pc, #48]	; (eaa4 <get_auth+0x34>)
    ea72:	781b      	ldrb	r3, [r3, #0]
{
    ea74:	b510      	push	{r4, lr}
	if (sc_supported) {
    ea76:	b17b      	cbz	r3, ea98 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    ea78:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    ea7c:	f7ff ffd2 	bl	ea24 <get_io_capa>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
	}

	if (bondable) {
    ea80:	4b09      	ldr	r3, [pc, #36]	; (eaa8 <get_auth+0x38>)
    ea82:	781b      	ldrb	r3, [r3, #0]
	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    ea84:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    ea86:	bf0c      	ite	eq
    ea88:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    ea8c:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    ea90:	b12b      	cbz	r3, ea9e <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    ea92:	f044 0001 	orr.w	r0, r4, #1
	} else {
		auth &= ~BT_SMP_AUTH_BONDING;
	}

	return auth;
}
    ea96:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    ea98:	f000 0407 	and.w	r4, r0, #7
    ea9c:	e7ee      	b.n	ea7c <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    ea9e:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    eaa2:	e7f8      	b.n	ea96 <get_auth+0x26>
    eaa4:	20001045 	.word	0x20001045
    eaa8:	2000da58 	.word	0x2000da58

0000eaac <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    eaac:	f3bf 8f5b 	dmb	ish
    eab0:	6800      	ldr	r0, [r0, #0]
    eab2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    eab6:	4108      	asrs	r0, r1
}
    eab8:	f000 0001 	and.w	r0, r0, #1
    eabc:	4770      	bx	lr

0000eabe <bt_smp_aes_cmac>:
{
    eabe:	b570      	push	{r4, r5, r6, lr}
    eac0:	b0c2      	sub	sp, #264	; 0x108
    eac2:	460d      	mov	r5, r1
    eac4:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    eac6:	4601      	mov	r1, r0
    eac8:	aa16      	add	r2, sp, #88	; 0x58
    eaca:	4668      	mov	r0, sp
{
    eacc:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    eace:	f7f2 feec 	bl	18aa <tc_cmac_setup>
    ead2:	b918      	cbnz	r0, eadc <bt_smp_aes_cmac+0x1e>
		return -EIO;
    ead4:	f06f 0004 	mvn.w	r0, #4
}
    ead8:	b042      	add	sp, #264	; 0x108
    eada:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    eadc:	4632      	mov	r2, r6
    eade:	4629      	mov	r1, r5
    eae0:	4668      	mov	r0, sp
    eae2:	f7f2 ff0d 	bl	1900 <tc_cmac_update>
    eae6:	2800      	cmp	r0, #0
    eae8:	d0f4      	beq.n	ead4 <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    eaea:	4669      	mov	r1, sp
    eaec:	4620      	mov	r0, r4
    eaee:	f7f2 ff6c 	bl	19ca <tc_cmac_final>
    eaf2:	2800      	cmp	r0, #0
    eaf4:	d0ee      	beq.n	ead4 <bt_smp_aes_cmac+0x16>
	return 0;
    eaf6:	2000      	movs	r0, #0
    eaf8:	e7ee      	b.n	ead8 <bt_smp_aes_cmac+0x1a>
	...

0000eafc <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const u8_t *key, u8_t *msg, u16_t len)
{
    eafc:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t *m = msg;
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    eafe:	188f      	adds	r7, r1, r2
{
    eb00:	b08b      	sub	sp, #44	; 0x2c
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
    eb02:	1d14      	adds	r4, r2, #4
{
    eb04:	460d      	mov	r5, r1
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    eb06:	683b      	ldr	r3, [r7, #0]
    eb08:	9301      	str	r3, [sp, #4]
{
    eb0a:	4606      	mov	r6, r0
	sys_mem_swap(m, len + sizeof(cnt));
    eb0c:	4621      	mov	r1, r4
    eb0e:	4628      	mov	r0, r5
    eb10:	f7ff ff79 	bl	ea06 <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
    eb14:	4631      	mov	r1, r6
    eb16:	2210      	movs	r2, #16
    eb18:	a802      	add	r0, sp, #8
    eb1a:	f7ff ff67 	bl	e9ec <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    eb1e:	ab06      	add	r3, sp, #24
    eb20:	4622      	mov	r2, r4
    eb22:	4629      	mov	r1, r5
    eb24:	a802      	add	r0, sp, #8
    eb26:	f7ff ffca 	bl	eabe <bt_smp_aes_cmac>
	if (err) {
    eb2a:	4606      	mov	r6, r0
    eb2c:	b1b8      	cbz	r0, eb5e <smp_sign_buf+0x62>
		BT_ERR("Data signing failed");
    eb2e:	4b16      	ldr	r3, [pc, #88]	; (eb88 <smp_sign_buf+0x8c>)
    eb30:	681b      	ldr	r3, [r3, #0]
    eb32:	075b      	lsls	r3, r3, #29
    eb34:	d010      	beq.n	eb58 <smp_sign_buf+0x5c>
    eb36:	2301      	movs	r3, #1
    eb38:	f04f 0200 	mov.w	r2, #0
    eb3c:	f363 0202 	bfi	r2, r3, #0, #3
    eb40:	4912      	ldr	r1, [pc, #72]	; (eb8c <smp_sign_buf+0x90>)
    eb42:	4b13      	ldr	r3, [pc, #76]	; (eb90 <smp_sign_buf+0x94>)
    eb44:	4813      	ldr	r0, [pc, #76]	; (eb94 <smp_sign_buf+0x98>)
    eb46:	1a5b      	subs	r3, r3, r1
    eb48:	f36f 02c5 	bfc	r2, #3, #3
    eb4c:	08db      	lsrs	r3, r3, #3
    eb4e:	f363 128f 	bfi	r2, r3, #6, #10
    eb52:	4911      	ldr	r1, [pc, #68]	; (eb98 <smp_sign_buf+0x9c>)
    eb54:	f7f3 faca 	bl	20ec <log_1>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
    eb58:	4630      	mov	r0, r6
    eb5a:	b00b      	add	sp, #44	; 0x2c
    eb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
    eb5e:	a806      	add	r0, sp, #24
    eb60:	2110      	movs	r1, #16
    eb62:	f7ff ff50 	bl	ea06 <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    eb66:	2204      	movs	r2, #4
    eb68:	eb0d 0102 	add.w	r1, sp, r2
    eb6c:	a807      	add	r0, sp, #28
    eb6e:	f7f8 f88b 	bl	6c88 <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
    eb72:	4621      	mov	r1, r4
    eb74:	4628      	mov	r0, r5
    eb76:	f7ff ff46 	bl	ea06 <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
    eb7a:	220c      	movs	r2, #12
    eb7c:	a907      	add	r1, sp, #28
    eb7e:	4638      	mov	r0, r7
    eb80:	f7f8 f882 	bl	6c88 <memcpy>
	return 0;
    eb84:	e7e8      	b.n	eb58 <smp_sign_buf+0x5c>
    eb86:	bf00      	nop
    eb88:	2000e248 	.word	0x2000e248
    eb8c:	0002ef38 	.word	0x0002ef38
    eb90:	0002efd0 	.word	0x0002efd0
    eb94:	0003280b 	.word	0x0003280b
    eb98:	00032394 	.word	0x00032394

0000eb9c <smp_f4>:
{
    eb9c:	b570      	push	{r4, r5, r6, lr}
    eb9e:	b096      	sub	sp, #88	; 0x58
    eba0:	4614      	mov	r4, r2
    eba2:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
    eba4:	2220      	movs	r2, #32
    eba6:	4601      	mov	r1, r0
    eba8:	a805      	add	r0, sp, #20
{
    ebaa:	461d      	mov	r5, r3
	sys_memcpy_swap(m, u, 32);
    ebac:	f7ff ff1e 	bl	e9ec <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    ebb0:	2220      	movs	r2, #32
    ebb2:	4631      	mov	r1, r6
    ebb4:	a80d      	add	r0, sp, #52	; 0x34
    ebb6:	f7ff ff19 	bl	e9ec <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    ebba:	4621      	mov	r1, r4
    ebbc:	2210      	movs	r2, #16
    ebbe:	a801      	add	r0, sp, #4
	m[64] = z;
    ebc0:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
    ebc4:	f7ff ff12 	bl	e9ec <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    ebc8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ebca:	2241      	movs	r2, #65	; 0x41
    ebcc:	a905      	add	r1, sp, #20
    ebce:	a801      	add	r0, sp, #4
    ebd0:	f7ff ff75 	bl	eabe <bt_smp_aes_cmac>
	if (err) {
    ebd4:	4604      	mov	r4, r0
    ebd6:	b918      	cbnz	r0, ebe0 <smp_f4+0x44>
	sys_mem_swap(res, 16);
    ebd8:	2110      	movs	r1, #16
    ebda:	981a      	ldr	r0, [sp, #104]	; 0x68
    ebdc:	f7ff ff13 	bl	ea06 <sys_mem_swap>
}
    ebe0:	4620      	mov	r0, r4
    ebe2:	b016      	add	sp, #88	; 0x58
    ebe4:	bd70      	pop	{r4, r5, r6, pc}
	...

0000ebe8 <sc_smp_check_confirm>:
{
    ebe8:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
    ebea:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
{
    ebee:	b087      	sub	sp, #28
    ebf0:	4604      	mov	r4, r0
	switch (smp->method) {
    ebf2:	2b03      	cmp	r3, #3
    ebf4:	d825      	bhi.n	ec42 <sc_smp_check_confirm+0x5a>
    ebf6:	e8df f003 	tbb	[pc, r3]
    ebfa:	0222      	.short	0x0222
    ebfc:	2202      	.short	0x2202
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    ebfe:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
    ec02:	f8d0 316c 	ldr.w	r3, [r0, #364]	; 0x16c
    ec06:	40d3      	lsrs	r3, r2
    ec08:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    ec0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ec10:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    ec12:	ad02      	add	r5, sp, #8
    ec14:	9500      	str	r5, [sp, #0]
    ec16:	f104 02cb 	add.w	r2, r4, #203	; 0xcb
    ec1a:	490b      	ldr	r1, [pc, #44]	; (ec48 <sc_smp_check_confirm+0x60>)
    ec1c:	f104 00eb 	add.w	r0, r4, #235	; 0xeb
    ec20:	f7ff ffbc 	bl	eb9c <smp_f4>
    ec24:	b968      	cbnz	r0, ec42 <sc_smp_check_confirm+0x5a>
	if (memcmp(smp->pcnf, cfm, 16)) {
    ec26:	2210      	movs	r2, #16
    ec28:	4629      	mov	r1, r5
    ec2a:	f104 00ab 	add.w	r0, r4, #171	; 0xab
    ec2e:	f7f8 f804 	bl	6c3a <memcmp>
    ec32:	2800      	cmp	r0, #0
	return 0;
    ec34:	bf14      	ite	ne
    ec36:	2004      	movne	r0, #4
    ec38:	2000      	moveq	r0, #0
}
    ec3a:	b007      	add	sp, #28
    ec3c:	bd30      	pop	{r4, r5, pc}
		r = 0;
    ec3e:	2300      	movs	r3, #0
    ec40:	e7e7      	b.n	ec12 <sc_smp_check_confirm+0x2a>
		return BT_SMP_ERR_UNSPECIFIED;
    ec42:	2008      	movs	r0, #8
    ec44:	e7f9      	b.n	ec3a <sc_smp_check_confirm+0x52>
    ec46:	bf00      	nop
    ec48:	20001005 	.word	0x20001005

0000ec4c <smp_f5>:
{
    ec4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec50:	b09a      	sub	sp, #104	; 0x68
    ec52:	4604      	mov	r4, r0
    ec54:	4688      	mov	r8, r1
    ec56:	4617      	mov	r7, r2
	u8_t m[53] = { 0x00, /* counter */
    ec58:	2100      	movs	r1, #0
    ec5a:	2235      	movs	r2, #53	; 0x35
    ec5c:	a80c      	add	r0, sp, #48	; 0x30
{
    ec5e:	461d      	mov	r5, r3
	u8_t m[53] = { 0x00, /* counter */
    ec60:	f7f8 f83f 	bl	6ce2 <memset>
    ec64:	2362      	movs	r3, #98	; 0x62
    ec66:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    ec6a:	2374      	movs	r3, #116	; 0x74
    ec6c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    ec70:	236c      	movs	r3, #108	; 0x6c
	sys_memcpy_swap(ws, w, 32);
    ec72:	4621      	mov	r1, r4
	u8_t m[53] = { 0x00, /* counter */
    ec74:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	sys_memcpy_swap(ws, w, 32);
    ec78:	2220      	movs	r2, #32
	u8_t m[53] = { 0x00, /* counter */
    ec7a:	2365      	movs	r3, #101	; 0x65
	sys_memcpy_swap(ws, w, 32);
    ec7c:	a804      	add	r0, sp, #16
	u8_t m[53] = { 0x00, /* counter */
    ec7e:	2601      	movs	r6, #1
    ec80:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    ec84:	f88d 6063 	strb.w	r6, [sp, #99]	; 0x63
	sys_memcpy_swap(ws, w, 32);
    ec88:	f7ff feb0 	bl	e9ec <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    ec8c:	466b      	mov	r3, sp
    ec8e:	2220      	movs	r2, #32
    ec90:	a904      	add	r1, sp, #16
    ec92:	4822      	ldr	r0, [pc, #136]	; (ed1c <smp_f5+0xd0>)
    ec94:	f7ff ff13 	bl	eabe <bt_smp_aes_cmac>
	if (err) {
    ec98:	4604      	mov	r4, r0
    ec9a:	2800      	cmp	r0, #0
    ec9c:	d139      	bne.n	ed12 <smp_f5+0xc6>
	sys_memcpy_swap(m + 5, n1, 16);
    ec9e:	2210      	movs	r2, #16
    eca0:	4641      	mov	r1, r8
    eca2:	f10d 0035 	add.w	r0, sp, #53	; 0x35
    eca6:	f7ff fea1 	bl	e9ec <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    ecaa:	2210      	movs	r2, #16
    ecac:	4639      	mov	r1, r7
    ecae:	f10d 0045 	add.w	r0, sp, #69	; 0x45
    ecb2:	f7ff fe9b 	bl	e9ec <sys_memcpy_swap>
	m[37] = a1->type;
    ecb6:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    ecb8:	2206      	movs	r2, #6
	m[37] = a1->type;
    ecba:	f811 3b01 	ldrb.w	r3, [r1], #1
    ecbe:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    ecc2:	f10d 0056 	add.w	r0, sp, #86	; 0x56
    ecc6:	f7ff fe91 	bl	e9ec <sys_memcpy_swap>
	m[44] = a2->type;
    ecca:	9920      	ldr	r1, [sp, #128]	; 0x80
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    eccc:	2206      	movs	r2, #6
	m[44] = a2->type;
    ecce:	f811 3b01 	ldrb.w	r3, [r1], #1
    ecd2:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    ecd6:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
    ecda:	f7ff fe87 	bl	e9ec <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    ecde:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ece0:	2235      	movs	r2, #53	; 0x35
    ece2:	a90c      	add	r1, sp, #48	; 0x30
    ece4:	4668      	mov	r0, sp
    ece6:	f7ff feea 	bl	eabe <bt_smp_aes_cmac>
	if (err) {
    ecea:	4604      	mov	r4, r0
    ecec:	b988      	cbnz	r0, ed12 <smp_f5+0xc6>
	sys_mem_swap(mackey, 16);
    ecee:	2110      	movs	r1, #16
    ecf0:	9821      	ldr	r0, [sp, #132]	; 0x84
    ecf2:	f7ff fe88 	bl	ea06 <sys_mem_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    ecf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
	m[0] = 0x01;
    ecf8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    ecfc:	2235      	movs	r2, #53	; 0x35
    ecfe:	a90c      	add	r1, sp, #48	; 0x30
    ed00:	4668      	mov	r0, sp
    ed02:	f7ff fedc 	bl	eabe <bt_smp_aes_cmac>
	if (err) {
    ed06:	4604      	mov	r4, r0
    ed08:	b918      	cbnz	r0, ed12 <smp_f5+0xc6>
	sys_mem_swap(ltk, 16);
    ed0a:	2110      	movs	r1, #16
    ed0c:	9822      	ldr	r0, [sp, #136]	; 0x88
    ed0e:	f7ff fe7a 	bl	ea06 <sys_mem_swap>
}
    ed12:	4620      	mov	r0, r4
    ed14:	b01a      	add	sp, #104	; 0x68
    ed16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed1a:	bf00      	nop
    ed1c:	000326ad 	.word	0x000326ad

0000ed20 <smp_f6>:
{
    ed20:	b570      	push	{r4, r5, r6, lr}
    ed22:	b096      	sub	sp, #88	; 0x58
    ed24:	4605      	mov	r5, r0
    ed26:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
    ed28:	a805      	add	r0, sp, #20
    ed2a:	2210      	movs	r2, #16
{
    ed2c:	461c      	mov	r4, r3
	sys_memcpy_swap(m, n1, 16);
    ed2e:	f7ff fe5d 	bl	e9ec <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
    ed32:	2210      	movs	r2, #16
    ed34:	4631      	mov	r1, r6
    ed36:	a809      	add	r0, sp, #36	; 0x24
    ed38:	f7ff fe58 	bl	e9ec <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
    ed3c:	4621      	mov	r1, r4
    ed3e:	2210      	movs	r2, #16
    ed40:	a80d      	add	r0, sp, #52	; 0x34
    ed42:	f7ff fe53 	bl	e9ec <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
    ed46:	2203      	movs	r2, #3
    ed48:	991a      	ldr	r1, [sp, #104]	; 0x68
    ed4a:	a811      	add	r0, sp, #68	; 0x44
    ed4c:	f7ff fe4e 	bl	e9ec <sys_memcpy_swap>
	m[51] = a1->type;
    ed50:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    ed52:	f814 3b01 	ldrb.w	r3, [r4], #1
    ed56:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
    ed5a:	4621      	mov	r1, r4
    ed5c:	2206      	movs	r2, #6
    ed5e:	a812      	add	r0, sp, #72	; 0x48
    ed60:	f7f7 ff92 	bl	6c88 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
    ed64:	4621      	mov	r1, r4
    ed66:	2206      	movs	r2, #6
    ed68:	a812      	add	r0, sp, #72	; 0x48
    ed6a:	f7ff fe3f 	bl	e9ec <sys_memcpy_swap>
	m[58] = a2->type;
    ed6e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    ed70:	f814 3b01 	ldrb.w	r3, [r4], #1
    ed74:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
    ed78:	4621      	mov	r1, r4
    ed7a:	2206      	movs	r2, #6
    ed7c:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    ed80:	f7f7 ff82 	bl	6c88 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
    ed84:	4621      	mov	r1, r4
    ed86:	2206      	movs	r2, #6
    ed88:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    ed8c:	f7ff fe2e 	bl	e9ec <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
    ed90:	2210      	movs	r2, #16
    ed92:	4629      	mov	r1, r5
    ed94:	a801      	add	r0, sp, #4
    ed96:	f7ff fe29 	bl	e9ec <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    ed9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ed9c:	2241      	movs	r2, #65	; 0x41
    ed9e:	a905      	add	r1, sp, #20
    eda0:	a801      	add	r0, sp, #4
    eda2:	f7ff fe8c 	bl	eabe <bt_smp_aes_cmac>
	if (err) {
    eda6:	4604      	mov	r4, r0
    eda8:	b918      	cbnz	r0, edb2 <smp_f6+0x92>
	sys_mem_swap(check, 16);
    edaa:	2110      	movs	r1, #16
    edac:	981d      	ldr	r0, [sp, #116]	; 0x74
    edae:	f7ff fe2a 	bl	ea06 <sys_mem_swap>
}
    edb2:	4620      	mov	r0, r4
    edb4:	b016      	add	sp, #88	; 0x58
    edb6:	bd70      	pop	{r4, r5, r6, pc}

0000edb8 <smp_g2>:
{
    edb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    edba:	b099      	sub	sp, #100	; 0x64
    edbc:	4615      	mov	r5, r2
    edbe:	460f      	mov	r7, r1
	sys_memcpy_swap(m, u, 32);
    edc0:	2220      	movs	r2, #32
    edc2:	4601      	mov	r1, r0
    edc4:	a804      	add	r0, sp, #16
{
    edc6:	461e      	mov	r6, r3
    edc8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
    edca:	f7ff fe0f 	bl	e9ec <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    edce:	2220      	movs	r2, #32
    edd0:	4639      	mov	r1, r7
    edd2:	a80c      	add	r0, sp, #48	; 0x30
    edd4:	f7ff fe0a 	bl	e9ec <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    edd8:	2210      	movs	r2, #16
    edda:	4631      	mov	r1, r6
    eddc:	a814      	add	r0, sp, #80	; 0x50
    edde:	f7ff fe05 	bl	e9ec <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    ede2:	4629      	mov	r1, r5
    ede4:	2210      	movs	r2, #16
    ede6:	4668      	mov	r0, sp
    ede8:	f7ff fe00 	bl	e9ec <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    edec:	466b      	mov	r3, sp
    edee:	2250      	movs	r2, #80	; 0x50
    edf0:	a904      	add	r1, sp, #16
    edf2:	4618      	mov	r0, r3
    edf4:	f7ff fe63 	bl	eabe <bt_smp_aes_cmac>
	if (err) {
    edf8:	4605      	mov	r5, r0
    edfa:	b960      	cbnz	r0, ee16 <smp_g2+0x5e>
	memcpy(passkey, xs + 12, 4);
    edfc:	2204      	movs	r2, #4
    edfe:	a903      	add	r1, sp, #12
    ee00:	4620      	mov	r0, r4
    ee02:	f7f7 ff41 	bl	6c88 <memcpy>
    ee06:	6823      	ldr	r3, [r4, #0]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    ee08:	4904      	ldr	r1, [pc, #16]	; (ee1c <smp_g2+0x64>)
    ee0a:	ba1b      	rev	r3, r3
    ee0c:	fbb3 f2f1 	udiv	r2, r3, r1
    ee10:	fb01 3312 	mls	r3, r1, r2, r3
    ee14:	6023      	str	r3, [r4, #0]
}
    ee16:	4628      	mov	r0, r5
    ee18:	b019      	add	sp, #100	; 0x64
    ee1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee1c:	000f4240 	.word	0x000f4240

0000ee20 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
    ee20:	2301      	movs	r3, #1
    ee22:	fa03 f101 	lsl.w	r1, r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ee26:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ee28:	f3bf 8f5b 	dmb	ish
    ee2c:	e850 3f00 	ldrex	r3, [r0]
    ee30:	400b      	ands	r3, r1
    ee32:	e840 3200 	strex	r2, r3, [r0]
    ee36:	2a00      	cmp	r2, #0
    ee38:	d1f8      	bne.n	ee2c <atomic_clear_bit+0xc>
    ee3a:	f3bf 8f5b 	dmb	ish
}
    ee3e:	4770      	bx	lr

0000ee40 <bt_smp_disconnected>:
{
    ee40:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
    ee42:	6803      	ldr	r3, [r0, #0]
    ee44:	6f1c      	ldr	r4, [r3, #112]	; 0x70
{
    ee46:	4605      	mov	r5, r0
	k_delayed_work_cancel(&smp->work);
    ee48:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    ee4c:	f01f fc0f 	bl	2e66e <k_delayed_work_cancel>
	if (keys) {
    ee50:	b13c      	cbz	r4, ee62 <bt_smp_disconnected+0x22>
		if (!keys->keys || (keys->flags & BT_KEYS_DEBUG)) {
    ee52:	8963      	ldrh	r3, [r4, #10]
    ee54:	b113      	cbz	r3, ee5c <bt_smp_disconnected+0x1c>
    ee56:	7a63      	ldrb	r3, [r4, #9]
    ee58:	079b      	lsls	r3, r3, #30
    ee5a:	d502      	bpl.n	ee62 <bt_smp_disconnected+0x22>
			bt_keys_clear(keys);
    ee5c:	4620      	mov	r0, r4
    ee5e:	f002 fa13 	bl	11288 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
    ee62:	4628      	mov	r0, r5
    ee64:	f44f 72ca 	mov.w	r2, #404	; 0x194
    ee68:	2100      	movs	r1, #0
}
    ee6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
    ee6e:	f7f7 bf38 	b.w	6ce2 <memset>
	...

0000ee74 <legacy_get_pair_method>:
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    ee74:	2904      	cmp	r1, #4
{
    ee76:	b538      	push	{r3, r4, r5, lr}
    ee78:	4605      	mov	r5, r0
    ee7a:	460c      	mov	r4, r1
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    ee7c:	d817      	bhi.n	eeae <legacy_get_pair_method+0x3a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    ee7e:	f890 00a0 	ldrb.w	r0, [r0, #160]	; 0xa0
    ee82:	f895 30a7 	ldrb.w	r3, [r5, #167]	; 0xa7
    ee86:	4318      	orrs	r0, r3
    ee88:	f010 0004 	ands.w	r0, r0, #4
    ee8c:	d00e      	beq.n	eeac <legacy_get_pair_method+0x38>
	method = gen_method_legacy[remote_io][get_io_capa()];
    ee8e:	f7ff fdc9 	bl	ea24 <get_io_capa>
    ee92:	4908      	ldr	r1, [pc, #32]	; (eeb4 <legacy_get_pair_method+0x40>)
    ee94:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    ee98:	440c      	add	r4, r1
    ee9a:	5c20      	ldrb	r0, [r4, r0]
	if (method == PASSKEY_ROLE) {
    ee9c:	2804      	cmp	r0, #4
    ee9e:	d105      	bne.n	eeac <legacy_get_pair_method+0x38>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    eea0:	682b      	ldr	r3, [r5, #0]
    eea2:	78db      	ldrb	r3, [r3, #3]
    eea4:	2b00      	cmp	r3, #0
			method = PASSKEY_INPUT;
    eea6:	bf0c      	ite	eq
    eea8:	2002      	moveq	r0, #2
    eeaa:	2001      	movne	r0, #1
}
    eeac:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    eeae:	2000      	movs	r0, #0
    eeb0:	e7fc      	b.n	eeac <legacy_get_pair_method+0x38>
    eeb2:	bf00      	nop
    eeb4:	000325b8 	.word	0x000325b8

0000eeb8 <sec_level_reachable.isra.3>:
	switch (conn->required_sec_level) {
    eeb8:	3801      	subs	r0, #1
static bool sec_level_reachable(struct bt_conn *conn)
    eeba:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    eebc:	2803      	cmp	r0, #3
    eebe:	d803      	bhi.n	eec8 <sec_level_reachable.isra.3+0x10>
    eec0:	e8df f000 	tbb	[pc, r0]
    eec4:	0a041414 	.word	0x0a041414
		return false;
    eec8:	2000      	movs	r0, #0
}
    eeca:	bd08      	pop	{r3, pc}
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    eecc:	f7ff fdaa 	bl	ea24 <get_io_capa>
    eed0:	3803      	subs	r0, #3
    eed2:	bf18      	it	ne
    eed4:	2001      	movne	r0, #1
    eed6:	e7f8      	b.n	eeca <sec_level_reachable.isra.3+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    eed8:	f7ff fda4 	bl	ea24 <get_io_capa>
    eedc:	2803      	cmp	r0, #3
    eede:	bf1a      	itte	ne
    eee0:	4b03      	ldrne	r3, [pc, #12]	; (eef0 <sec_level_reachable.isra.3+0x38>)
    eee2:	7818      	ldrbne	r0, [r3, #0]
    eee4:	2000      	moveq	r0, #0
    eee6:	f000 0001 	and.w	r0, r0, #1
    eeea:	e7ee      	b.n	eeca <sec_level_reachable.isra.3+0x12>
		return true;
    eeec:	2001      	movs	r0, #1
    eeee:	e7ec      	b.n	eeca <sec_level_reachable.isra.3+0x12>
    eef0:	20001045 	.word	0x20001045

0000eef4 <smp_chan_get>:
{
    eef4:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    eef6:	2106      	movs	r1, #6
    eef8:	f7fc ff02 	bl	bd00 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    eefc:	4604      	mov	r4, r0
    eefe:	b9a0      	cbnz	r0, ef2a <smp_chan_get+0x36>
		BT_ERR("Unable to find SMP channel");
    ef00:	4b0b      	ldr	r3, [pc, #44]	; (ef30 <smp_chan_get+0x3c>)
    ef02:	681b      	ldr	r3, [r3, #0]
    ef04:	075b      	lsls	r3, r3, #29
    ef06:	d010      	beq.n	ef2a <smp_chan_get+0x36>
    ef08:	2301      	movs	r3, #1
    ef0a:	f04f 0200 	mov.w	r2, #0
    ef0e:	f363 0202 	bfi	r2, r3, #0, #3
    ef12:	4908      	ldr	r1, [pc, #32]	; (ef34 <smp_chan_get+0x40>)
    ef14:	4b08      	ldr	r3, [pc, #32]	; (ef38 <smp_chan_get+0x44>)
    ef16:	1a5b      	subs	r3, r3, r1
    ef18:	f360 02c5 	bfi	r2, r0, #3, #3
    ef1c:	08db      	lsrs	r3, r3, #3
    ef1e:	f363 128f 	bfi	r2, r3, #6, #10
    ef22:	4906      	ldr	r1, [pc, #24]	; (ef3c <smp_chan_get+0x48>)
    ef24:	4806      	ldr	r0, [pc, #24]	; (ef40 <smp_chan_get+0x4c>)
    ef26:	f7f3 f8e1 	bl	20ec <log_1>
}
    ef2a:	4620      	mov	r0, r4
    ef2c:	bd10      	pop	{r4, pc}
    ef2e:	bf00      	nop
    ef30:	2000e248 	.word	0x2000e248
    ef34:	0002ef38 	.word	0x0002ef38
    ef38:	0002efd0 	.word	0x0002efd0
    ef3c:	000322fe 	.word	0x000322fe
    ef40:	000326fd 	.word	0x000326fd

0000ef44 <smp_create_pdu.isra.6>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    ef44:	2100      	movs	r1, #0
static struct net_buf *smp_create_pdu(struct bt_conn *conn, u8_t op,
    ef46:	b538      	push	{r3, r4, r5, lr}
    ef48:	4605      	mov	r5, r0
	buf = bt_l2cap_create_pdu(NULL, 0);
    ef4a:	4608      	mov	r0, r1
    ef4c:	f7fc fd57 	bl	b9fe <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    ef50:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    ef52:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    ef54:	3008      	adds	r0, #8
    ef56:	f010 f9db 	bl	1f310 <net_buf_simple_add>
	hdr->code = op;
    ef5a:	7005      	strb	r5, [r0, #0]
}
    ef5c:	4620      	mov	r0, r4
    ef5e:	bd38      	pop	{r3, r4, r5, pc}

0000ef60 <bt_smp_accept>:

	return true;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    ef60:	b510      	push	{r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    ef62:	4c10      	ldr	r4, [pc, #64]	; (efa4 <bt_smp_accept+0x44>)
{
    ef64:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
    ef66:	6820      	ldr	r0, [r4, #0]
    ef68:	b918      	cbnz	r0, ef72 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    ef6a:	4a0f      	ldr	r2, [pc, #60]	; (efa8 <bt_smp_accept+0x48>)
    ef6c:	6062      	str	r2, [r4, #4]

		*chan = &smp->chan.chan;
    ef6e:	600c      	str	r4, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    ef70:	bd10      	pop	{r4, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    ef72:	4b0e      	ldr	r3, [pc, #56]	; (efac <bt_smp_accept+0x4c>)
    ef74:	681b      	ldr	r3, [r3, #0]
    ef76:	075b      	lsls	r3, r3, #29
    ef78:	d010      	beq.n	ef9c <bt_smp_accept+0x3c>
    ef7a:	2101      	movs	r1, #1
    ef7c:	f04f 0300 	mov.w	r3, #0
    ef80:	f361 0302 	bfi	r3, r1, #0, #3
    ef84:	480a      	ldr	r0, [pc, #40]	; (efb0 <bt_smp_accept+0x50>)
    ef86:	490b      	ldr	r1, [pc, #44]	; (efb4 <bt_smp_accept+0x54>)
    ef88:	1a09      	subs	r1, r1, r0
    ef8a:	08c9      	lsrs	r1, r1, #3
    ef8c:	f36f 03c5 	bfc	r3, #3, #3
    ef90:	f361 138f 	bfi	r3, r1, #6, #10
    ef94:	4808      	ldr	r0, [pc, #32]	; (efb8 <bt_smp_accept+0x58>)
    ef96:	4909      	ldr	r1, [pc, #36]	; (efbc <bt_smp_accept+0x5c>)
    ef98:	f7f3 f8bc 	bl	2114 <log_2>
	return -ENOMEM;
    ef9c:	f06f 000b 	mvn.w	r0, #11
    efa0:	e7e6      	b.n	ef70 <bt_smp_accept+0x10>
    efa2:	bf00      	nop
    efa4:	20000e70 	.word	0x20000e70
    efa8:	2000da68 	.word	0x2000da68
    efac:	2000e248 	.word	0x2000e248
    efb0:	0002ef38 	.word	0x0002ef38
    efb4:	0002efd0 	.word	0x0002efd0
    efb8:	000323d5 	.word	0x000323d5
    efbc:	000323c7 	.word	0x000323c7

0000efc0 <smp_send>:
{
    efc0:	b510      	push	{r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    efc2:	4613      	mov	r3, r2
{
    efc4:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    efc6:	460a      	mov	r2, r1
    efc8:	6800      	ldr	r0, [r0, #0]
    efca:	2106      	movs	r1, #6
    efcc:	f7fc fd1a 	bl	ba04 <bt_l2cap_send_cb>
    efd0:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    efd4:	f247 5230 	movw	r2, #30000	; 0x7530
    efd8:	4802      	ldr	r0, [pc, #8]	; (efe4 <smp_send+0x24>)
}
    efda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efde:	f01f bb95 	b.w	2e70c <k_delayed_work_submit_to_queue>
    efe2:	bf00      	nop
    efe4:	200037b0 	.word	0x200037b0

0000efe8 <sc_smp_send_dhkey_check>:
{
    efe8:	b570      	push	{r4, r5, r6, lr}
    efea:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    efec:	200d      	movs	r0, #13
{
    efee:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    eff0:	f7ff ffa8 	bl	ef44 <smp_create_pdu.isra.6>
	if (!buf) {
    eff4:	4604      	mov	r4, r0
    eff6:	b170      	cbz	r0, f016 <sc_smp_send_dhkey_check+0x2e>
	req = net_buf_add(buf, sizeof(*req));
    eff8:	2110      	movs	r1, #16
    effa:	3008      	adds	r0, #8
    effc:	f010 f988 	bl	1f310 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    f000:	2210      	movs	r2, #16
    f002:	4631      	mov	r1, r6
    f004:	f7f7 fe40 	bl	6c88 <memcpy>
	smp_send(smp, buf, NULL);
    f008:	4628      	mov	r0, r5
    f00a:	2200      	movs	r2, #0
    f00c:	4621      	mov	r1, r4
    f00e:	f7ff ffd7 	bl	efc0 <smp_send>
	return 0;
    f012:	2000      	movs	r0, #0
}
    f014:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    f016:	2008      	movs	r0, #8
    f018:	e7fc      	b.n	f014 <sc_smp_send_dhkey_check+0x2c>
	...

0000f01c <sc_send_public_key>:
{
    f01c:	b570      	push	{r4, r5, r6, lr}
    f01e:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    f020:	200c      	movs	r0, #12
    f022:	f7ff ff8f 	bl	ef44 <smp_create_pdu.isra.6>
	if (!req_buf) {
    f026:	4604      	mov	r4, r0
    f028:	b1a0      	cbz	r0, f054 <sc_send_public_key+0x38>
	req = net_buf_add(req_buf, sizeof(*req));
    f02a:	2140      	movs	r1, #64	; 0x40
    f02c:	3008      	adds	r0, #8
    f02e:	f010 f96f 	bl	1f310 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    f032:	2220      	movs	r2, #32
    f034:	4908      	ldr	r1, [pc, #32]	; (f058 <sc_send_public_key+0x3c>)
	req = net_buf_add(req_buf, sizeof(*req));
    f036:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    f038:	f7f7 fe26 	bl	6c88 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    f03c:	2220      	movs	r2, #32
    f03e:	4907      	ldr	r1, [pc, #28]	; (f05c <sc_send_public_key+0x40>)
    f040:	18b0      	adds	r0, r6, r2
    f042:	f7f7 fe21 	bl	6c88 <memcpy>
	smp_send(smp, req_buf, NULL);
    f046:	4628      	mov	r0, r5
    f048:	2200      	movs	r2, #0
    f04a:	4621      	mov	r1, r4
    f04c:	f7ff ffb8 	bl	efc0 <smp_send>
	return 0;
    f050:	2000      	movs	r0, #0
}
    f052:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    f054:	2008      	movs	r0, #8
    f056:	e7fc      	b.n	f052 <sc_send_public_key+0x36>
    f058:	20001005 	.word	0x20001005
    f05c:	20001025 	.word	0x20001025

0000f060 <send_pairing_rsp>:
{
    f060:	b538      	push	{r3, r4, r5, lr}
    f062:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    f064:	2002      	movs	r0, #2
    f066:	f7ff ff6d 	bl	ef44 <smp_create_pdu.isra.6>
	if (!rsp_buf) {
    f06a:	4604      	mov	r4, r0
    f06c:	b178      	cbz	r0, f08e <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    f06e:	2106      	movs	r1, #6
    f070:	3008      	adds	r0, #8
    f072:	f010 f94d 	bl	1f310 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    f076:	2206      	movs	r2, #6
    f078:	f105 01a5 	add.w	r1, r5, #165	; 0xa5
    f07c:	f7f7 fe04 	bl	6c88 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    f080:	4628      	mov	r0, r5
    f082:	2200      	movs	r2, #0
    f084:	4621      	mov	r1, r4
    f086:	f7ff ff9b 	bl	efc0 <smp_send>
	return 0;
    f08a:	2000      	movs	r0, #0
}
    f08c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    f08e:	2008      	movs	r0, #8
    f090:	e7fc      	b.n	f08c <send_pairing_rsp+0x2c>

0000f092 <smp_send_pairing_random>:
{
    f092:	b538      	push	{r3, r4, r5, lr}
    f094:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    f096:	2004      	movs	r0, #4
    f098:	f7ff ff54 	bl	ef44 <smp_create_pdu.isra.6>
	if (!rsp_buf) {
    f09c:	4604      	mov	r4, r0
    f09e:	b178      	cbz	r0, f0c0 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
    f0a0:	2110      	movs	r1, #16
    f0a2:	3008      	adds	r0, #8
    f0a4:	f010 f934 	bl	1f310 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    f0a8:	2210      	movs	r2, #16
    f0aa:	f105 01bb 	add.w	r1, r5, #187	; 0xbb
    f0ae:	f7f7 fdeb 	bl	6c88 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    f0b2:	4628      	mov	r0, r5
    f0b4:	2200      	movs	r2, #0
    f0b6:	4621      	mov	r1, r4
    f0b8:	f7ff ff82 	bl	efc0 <smp_send>
	return 0;
    f0bc:	2000      	movs	r0, #0
}
    f0be:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    f0c0:	2008      	movs	r0, #8
    f0c2:	e7fc      	b.n	f0be <smp_send_pairing_random+0x2c>

0000f0c4 <smp_send_pairing_confirm>:
{
    f0c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    f0c6:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
{
    f0ca:	4605      	mov	r5, r0
	switch (smp->method) {
    f0cc:	2b03      	cmp	r3, #3
    f0ce:	d824      	bhi.n	f11a <smp_send_pairing_confirm+0x56>
    f0d0:	e8df f003 	tbb	[pc, r3]
    f0d4:	25020225 	.word	0x25020225
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f0d8:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
    f0dc:	f8d0 416c 	ldr.w	r4, [r0, #364]	; 0x16c
    f0e0:	40dc      	lsrs	r4, r3
    f0e2:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    f0e6:	f064 047f 	orn	r4, r4, #127	; 0x7f
    f0ea:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    f0ec:	2003      	movs	r0, #3
    f0ee:	f7ff ff29 	bl	ef44 <smp_create_pdu.isra.6>
	if (!buf) {
    f0f2:	4606      	mov	r6, r0
    f0f4:	b188      	cbz	r0, f11a <smp_send_pairing_confirm+0x56>
	req = net_buf_add(buf, sizeof(*req));
    f0f6:	2110      	movs	r1, #16
    f0f8:	3008      	adds	r0, #8
    f0fa:	f010 f909 	bl	1f310 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    f0fe:	4623      	mov	r3, r4
    f100:	9000      	str	r0, [sp, #0]
    f102:	f105 02bb 	add.w	r2, r5, #187	; 0xbb
    f106:	f105 01eb 	add.w	r1, r5, #235	; 0xeb
    f10a:	480c      	ldr	r0, [pc, #48]	; (f13c <smp_send_pairing_confirm+0x78>)
    f10c:	f7ff fd46 	bl	eb9c <smp_f4>
    f110:	4604      	mov	r4, r0
    f112:	b130      	cbz	r0, f122 <smp_send_pairing_confirm+0x5e>
		net_buf_unref(buf);
    f114:	4630      	mov	r0, r6
    f116:	f010 f89d 	bl	1f254 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    f11a:	2008      	movs	r0, #8
    f11c:	e00c      	b.n	f138 <smp_send_pairing_confirm+0x74>
		r = 0;
    f11e:	2400      	movs	r4, #0
    f120:	e7e4      	b.n	f0ec <smp_send_pairing_confirm+0x28>
	smp_send(smp, buf, NULL);
    f122:	4602      	mov	r2, r0
    f124:	4631      	mov	r1, r6
    f126:	4628      	mov	r0, r5
    f128:	f7ff ff4a 	bl	efc0 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    f12c:	f105 0098 	add.w	r0, r5, #152	; 0x98
    f130:	4621      	mov	r1, r4
    f132:	f7ff fe75 	bl	ee20 <atomic_clear_bit>
	return 0;
    f136:	4620      	mov	r0, r4
}
    f138:	b002      	add	sp, #8
    f13a:	bd70      	pop	{r4, r5, r6, pc}
    f13c:	20001005 	.word	0x20001005

0000f140 <bt_smp_distribute_keys>:
{
    f140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f144:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    f146:	6800      	ldr	r0, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    f148:	6f06      	ldr	r6, [r0, #112]	; 0x70
{
    f14a:	b088      	sub	sp, #32
	if (!keys) {
    f14c:	b9f6      	cbnz	r6, f18c <bt_smp_distribute_keys+0x4c>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    f14e:	4b7c      	ldr	r3, [pc, #496]	; (f340 <bt_smp_distribute_keys+0x200>)
    f150:	681b      	ldr	r3, [r3, #0]
    f152:	075f      	lsls	r7, r3, #29
    f154:	d017      	beq.n	f186 <bt_smp_distribute_keys+0x46>
    f156:	2301      	movs	r3, #1
    f158:	f04f 0400 	mov.w	r4, #0
    f15c:	f363 0402 	bfi	r4, r3, #0, #3
    f160:	4a78      	ldr	r2, [pc, #480]	; (f344 <bt_smp_distribute_keys+0x204>)
    f162:	4b79      	ldr	r3, [pc, #484]	; (f348 <bt_smp_distribute_keys+0x208>)
    f164:	1ad2      	subs	r2, r2, r3
    f166:	08d2      	lsrs	r2, r2, #3
    f168:	f366 04c5 	bfi	r4, r6, #3, #3
    f16c:	3048      	adds	r0, #72	; 0x48
    f16e:	f362 148f 	bfi	r4, r2, #6, #10
    f172:	f7f8 fa83 	bl	767c <bt_addr_le_str_real>
    f176:	f7f3 f94b 	bl	2410 <log_strdup>
    f17a:	4623      	mov	r3, r4
    f17c:	4602      	mov	r2, r0
    f17e:	4973      	ldr	r1, [pc, #460]	; (f34c <bt_smp_distribute_keys+0x20c>)
    f180:	4873      	ldr	r0, [pc, #460]	; (f350 <bt_smp_distribute_keys+0x210>)
    f182:	f7f2 ffc7 	bl	2114 <log_2>
}
    f186:	b008      	add	sp, #32
    f188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f18c:	f104 0798 	add.w	r7, r4, #152	; 0x98
    f190:	2105      	movs	r1, #5
    f192:	4638      	mov	r0, r7
    f194:	f7ff fc8a 	bl	eaac <atomic_test_bit>
    f198:	4681      	mov	r9, r0
    f19a:	bb70      	cbnz	r0, f1fa <bt_smp_distribute_keys+0xba>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    f19c:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    f1a0:	07dd      	lsls	r5, r3, #31
    f1a2:	d52a      	bpl.n	f1fa <bt_smp_distribute_keys+0xba>
	struct bt_keys *keys = conn->le.keys;
    f1a4:	6823      	ldr	r3, [r4, #0]
		bt_rand(key, sizeof(key));
    f1a6:	2110      	movs	r1, #16
    f1a8:	eb0d 0001 	add.w	r0, sp, r1
	struct bt_keys *keys = conn->le.keys;
    f1ac:	6f1d      	ldr	r5, [r3, #112]	; 0x70
		bt_rand(key, sizeof(key));
    f1ae:	f00d fe0b 	bl	1cdc8 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    f1b2:	2108      	movs	r1, #8
    f1b4:	eb0d 0001 	add.w	r0, sp, r1
    f1b8:	f00d fe06 	bl	1cdc8 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    f1bc:	2102      	movs	r1, #2
    f1be:	a801      	add	r0, sp, #4
    f1c0:	f00d fe02 	bl	1cdc8 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    f1c4:	2006      	movs	r0, #6
    f1c6:	f7ff febd 	bl	ef44 <smp_create_pdu.isra.6>
		if (!buf) {
    f1ca:	4680      	mov	r8, r0
    f1cc:	2800      	cmp	r0, #0
    f1ce:	d134      	bne.n	f23a <bt_smp_distribute_keys+0xfa>
			BT_ERR("Unable to allocate Encrypt Info buffer");
    f1d0:	4b5b      	ldr	r3, [pc, #364]	; (f340 <bt_smp_distribute_keys+0x200>)
    f1d2:	681b      	ldr	r3, [r3, #0]
    f1d4:	0758      	lsls	r0, r3, #29
    f1d6:	d010      	beq.n	f1fa <bt_smp_distribute_keys+0xba>
    f1d8:	2301      	movs	r3, #1
    f1da:	f04f 0200 	mov.w	r2, #0
    f1de:	f363 0202 	bfi	r2, r3, #0, #3
    f1e2:	4959      	ldr	r1, [pc, #356]	; (f348 <bt_smp_distribute_keys+0x208>)
    f1e4:	4b57      	ldr	r3, [pc, #348]	; (f344 <bt_smp_distribute_keys+0x204>)
    f1e6:	485b      	ldr	r0, [pc, #364]	; (f354 <bt_smp_distribute_keys+0x214>)
    f1e8:	1a5b      	subs	r3, r3, r1
    f1ea:	f368 02c5 	bfi	r2, r8, #3, #3
    f1ee:	08db      	lsrs	r3, r3, #3
    f1f0:	4959      	ldr	r1, [pc, #356]	; (f358 <bt_smp_distribute_keys+0x218>)
    f1f2:	f363 128f 	bfi	r2, r3, #6, #10
			BT_ERR("Unable to allocate Master Ident buffer");
    f1f6:	f7f2 ff79 	bl	20ec <log_1>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    f1fa:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    f1fe:	075a      	lsls	r2, r3, #29
    f200:	d5c1      	bpl.n	f186 <bt_smp_distribute_keys+0x46>
		buf = smp_create_pdu(conn, BT_SMP_CMD_SIGNING_INFO,
    f202:	200a      	movs	r0, #10
    f204:	f7ff fe9e 	bl	ef44 <smp_create_pdu.isra.6>
		if (!buf) {
    f208:	4605      	mov	r5, r0
    f20a:	2800      	cmp	r0, #0
    f20c:	d179      	bne.n	f302 <bt_smp_distribute_keys+0x1c2>
			BT_ERR("Unable to allocate Signing Info buffer");
    f20e:	4b4c      	ldr	r3, [pc, #304]	; (f340 <bt_smp_distribute_keys+0x200>)
    f210:	681b      	ldr	r3, [r3, #0]
    f212:	075b      	lsls	r3, r3, #29
    f214:	d0b7      	beq.n	f186 <bt_smp_distribute_keys+0x46>
    f216:	2301      	movs	r3, #1
    f218:	f04f 0200 	mov.w	r2, #0
    f21c:	f363 0202 	bfi	r2, r3, #0, #3
    f220:	4949      	ldr	r1, [pc, #292]	; (f348 <bt_smp_distribute_keys+0x208>)
    f222:	4b48      	ldr	r3, [pc, #288]	; (f344 <bt_smp_distribute_keys+0x204>)
    f224:	1a5b      	subs	r3, r3, r1
    f226:	f360 02c5 	bfi	r2, r0, #3, #3
    f22a:	08db      	lsrs	r3, r3, #3
    f22c:	f363 128f 	bfi	r2, r3, #6, #10
    f230:	4946      	ldr	r1, [pc, #280]	; (f34c <bt_smp_distribute_keys+0x20c>)
    f232:	484a      	ldr	r0, [pc, #296]	; (f35c <bt_smp_distribute_keys+0x21c>)
    f234:	f7f2 ff5a 	bl	20ec <log_1>
    f238:	e7a5      	b.n	f186 <bt_smp_distribute_keys+0x46>
		info = net_buf_add(buf, sizeof(*info));
    f23a:	2110      	movs	r1, #16
    f23c:	3008      	adds	r0, #8
    f23e:	f010 f867 	bl	1f310 <net_buf_simple_add>
		memcpy(info->ltk, key, keys->enc_size);
    f242:	7a2a      	ldrb	r2, [r5, #8]
    f244:	a904      	add	r1, sp, #16
		info = net_buf_add(buf, sizeof(*info));
    f246:	4682      	mov	sl, r0
		memcpy(info->ltk, key, keys->enc_size);
    f248:	f7f7 fd1e 	bl	6c88 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    f24c:	7a28      	ldrb	r0, [r5, #8]
    f24e:	280f      	cmp	r0, #15
    f250:	d805      	bhi.n	f25e <bt_smp_distribute_keys+0x11e>
			(void)memset(info->ltk + keys->enc_size, 0,
    f252:	f1c0 0210 	rsb	r2, r0, #16
    f256:	4649      	mov	r1, r9
    f258:	4450      	add	r0, sl
    f25a:	f7f7 fd42 	bl	6ce2 <memset>
		smp_send(smp, buf, NULL);
    f25e:	4641      	mov	r1, r8
    f260:	2200      	movs	r2, #0
    f262:	4620      	mov	r0, r4
    f264:	f7ff feac 	bl	efc0 <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    f268:	2007      	movs	r0, #7
    f26a:	f7ff fe6b 	bl	ef44 <smp_create_pdu.isra.6>
		if (!buf) {
    f26e:	4680      	mov	r8, r0
    f270:	b998      	cbnz	r0, f29a <bt_smp_distribute_keys+0x15a>
			BT_ERR("Unable to allocate Master Ident buffer");
    f272:	4b33      	ldr	r3, [pc, #204]	; (f340 <bt_smp_distribute_keys+0x200>)
    f274:	681b      	ldr	r3, [r3, #0]
    f276:	0759      	lsls	r1, r3, #29
    f278:	d0bf      	beq.n	f1fa <bt_smp_distribute_keys+0xba>
    f27a:	2301      	movs	r3, #1
    f27c:	f04f 0200 	mov.w	r2, #0
    f280:	f363 0202 	bfi	r2, r3, #0, #3
    f284:	4930      	ldr	r1, [pc, #192]	; (f348 <bt_smp_distribute_keys+0x208>)
    f286:	4b2f      	ldr	r3, [pc, #188]	; (f344 <bt_smp_distribute_keys+0x204>)
    f288:	1a5b      	subs	r3, r3, r1
    f28a:	f360 02c5 	bfi	r2, r0, #3, #3
    f28e:	08db      	lsrs	r3, r3, #3
    f290:	f363 128f 	bfi	r2, r3, #6, #10
    f294:	4930      	ldr	r1, [pc, #192]	; (f358 <bt_smp_distribute_keys+0x218>)
    f296:	4832      	ldr	r0, [pc, #200]	; (f360 <bt_smp_distribute_keys+0x220>)
    f298:	e7ad      	b.n	f1f6 <bt_smp_distribute_keys+0xb6>
		ident = net_buf_add(buf, sizeof(*ident));
    f29a:	210a      	movs	r1, #10
    f29c:	3008      	adds	r0, #8
    f29e:	f010 f837 	bl	1f310 <net_buf_simple_add>
		memcpy(ident->rand, rand, sizeof(ident->rand));
    f2a2:	2208      	movs	r2, #8
    f2a4:	eb0d 0102 	add.w	r1, sp, r2
		ident = net_buf_add(buf, sizeof(*ident));
    f2a8:	4681      	mov	r9, r0
		memcpy(ident->rand, rand, sizeof(ident->rand));
    f2aa:	3002      	adds	r0, #2
    f2ac:	f7f7 fcec 	bl	6c88 <memcpy>
		memcpy(ident->ediv, ediv, sizeof(ident->ediv));
    f2b0:	2202      	movs	r2, #2
    f2b2:	a901      	add	r1, sp, #4
    f2b4:	4648      	mov	r0, r9
    f2b6:	f7f7 fce7 	bl	6c88 <memcpy>
		smp_send(smp, buf, ident_sent);
    f2ba:	4641      	mov	r1, r8
    f2bc:	4620      	mov	r0, r4
    f2be:	4a29      	ldr	r2, [pc, #164]	; (f364 <bt_smp_distribute_keys+0x224>)
    f2c0:	f7ff fe7e 	bl	efc0 <smp_send>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f2c4:	210b      	movs	r1, #11
    f2c6:	4638      	mov	r0, r7
    f2c8:	f7ff fbf0 	bl	eaac <atomic_test_bit>
    f2cc:	2800      	cmp	r0, #0
    f2ce:	d094      	beq.n	f1fa <bt_smp_distribute_keys+0xba>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    f2d0:	4628      	mov	r0, r5
    f2d2:	2101      	movs	r1, #1
    f2d4:	f001 ffd4 	bl	11280 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    f2d8:	2210      	movs	r2, #16
    f2da:	eb0d 0102 	add.w	r1, sp, r2
    f2de:	f105 006e 	add.w	r0, r5, #110	; 0x6e
    f2e2:	f7f7 fcd1 	bl	6c88 <memcpy>
			memcpy(keys->slave_ltk.rand, rand, sizeof(rand));
    f2e6:	2208      	movs	r2, #8
    f2e8:	eb0d 0102 	add.w	r1, sp, r2
    f2ec:	f105 0064 	add.w	r0, r5, #100	; 0x64
    f2f0:	f7f7 fcca 	bl	6c88 <memcpy>
			memcpy(keys->slave_ltk.ediv, ediv,
    f2f4:	2202      	movs	r2, #2
    f2f6:	a901      	add	r1, sp, #4
    f2f8:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    f2fc:	f7f7 fcc4 	bl	6c88 <memcpy>
    f300:	e77b      	b.n	f1fa <bt_smp_distribute_keys+0xba>
		info = net_buf_add(buf, sizeof(*info));
    f302:	2110      	movs	r1, #16
    f304:	3008      	adds	r0, #8
    f306:	f010 f803 	bl	1f310 <net_buf_simple_add>
		bt_rand(info->csrk, sizeof(info->csrk));
    f30a:	2110      	movs	r1, #16
		info = net_buf_add(buf, sizeof(*info));
    f30c:	4680      	mov	r8, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    f30e:	f00d fd5b 	bl	1cdc8 <bt_rand>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f312:	210b      	movs	r1, #11
    f314:	4638      	mov	r0, r7
    f316:	f7ff fbc9 	bl	eaac <atomic_test_bit>
    f31a:	b158      	cbz	r0, f334 <bt_smp_distribute_keys+0x1f4>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    f31c:	2108      	movs	r1, #8
    f31e:	4630      	mov	r0, r6
    f320:	f001 ffae 	bl	11280 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    f324:	2210      	movs	r2, #16
    f326:	4641      	mov	r1, r8
    f328:	f106 003c 	add.w	r0, r6, #60	; 0x3c
    f32c:	f7f7 fcac 	bl	6c88 <memcpy>
			keys->local_csrk.cnt = 0;
    f330:	2300      	movs	r3, #0
    f332:	64f3      	str	r3, [r6, #76]	; 0x4c
		smp_send(smp, buf, sign_info_sent);
    f334:	4a0c      	ldr	r2, [pc, #48]	; (f368 <bt_smp_distribute_keys+0x228>)
    f336:	4629      	mov	r1, r5
    f338:	4620      	mov	r0, r4
    f33a:	f7ff fe41 	bl	efc0 <smp_send>
    f33e:	e722      	b.n	f186 <bt_smp_distribute_keys+0x46>
    f340:	2000e248 	.word	0x2000e248
    f344:	0002efd0 	.word	0x0002efd0
    f348:	0002ef38 	.word	0x0002ef38
    f34c:	0003229d 	.word	0x0003229d
    f350:	000323fe 	.word	0x000323fe
    f354:	00032417 	.word	0x00032417
    f358:	00032286 	.word	0x00032286
    f35c:	0003246d 	.word	0x0003246d
    f360:	00032442 	.word	0x00032442
    f364:	00010175 	.word	0x00010175
    f368:	0001008f 	.word	0x0001008f

0000f36c <atomic_test_and_clear_bit>:
{
    f36c:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    f36e:	2301      	movs	r3, #1
    f370:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f374:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f376:	f3bf 8f5b 	dmb	ish
    f37a:	e850 3f00 	ldrex	r3, [r0]
    f37e:	ea03 0c02 	and.w	ip, r3, r2
    f382:	e840 ce00 	strex	lr, ip, [r0]
    f386:	f1be 0f00 	cmp.w	lr, #0
    f38a:	d1f6      	bne.n	f37a <atomic_test_and_clear_bit+0xe>
    f38c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
    f390:	420b      	tst	r3, r1
}
    f392:	bf14      	ite	ne
    f394:	2001      	movne	r0, #1
    f396:	2000      	moveq	r0, #0
    f398:	f85d fb04 	ldr.w	pc, [sp], #4

0000f39c <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
    f39c:	2301      	movs	r3, #1
    f39e:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f3a2:	f3bf 8f5b 	dmb	ish
    f3a6:	e850 3f00 	ldrex	r3, [r0]
    f3aa:	430b      	orrs	r3, r1
    f3ac:	e840 3200 	strex	r2, r3, [r0]
    f3b0:	2a00      	cmp	r2, #0
    f3b2:	d1f8      	bne.n	f3a6 <atomic_set_bit+0xa>
    f3b4:	f3bf 8f5b 	dmb	ish
}
    f3b8:	4770      	bx	lr

0000f3ba <_smp_init>:
{
    f3ba:	b538      	push	{r3, r4, r5, lr}
	(void)memset((u8_t *)smp + sizeof(smp->chan), 0,
    f3bc:	f100 0594 	add.w	r5, r0, #148	; 0x94
{
    f3c0:	4604      	mov	r4, r0
	(void)memset((u8_t *)smp + sizeof(smp->chan), 0,
    f3c2:	22e0      	movs	r2, #224	; 0xe0
    f3c4:	2100      	movs	r1, #0
    f3c6:	4628      	mov	r0, r5
    f3c8:	f7f7 fc8b 	bl	6ce2 <memset>
	if (bt_rand(smp->prnd, 16)) {
    f3cc:	f104 00bb 	add.w	r0, r4, #187	; 0xbb
    f3d0:	2110      	movs	r1, #16
    f3d2:	f00d fcf9 	bl	1cdc8 <bt_rand>
    f3d6:	4604      	mov	r4, r0
    f3d8:	b928      	cbnz	r0, f3e6 <_smp_init+0x2c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    f3da:	2105      	movs	r1, #5
    f3dc:	4628      	mov	r0, r5
    f3de:	f7ff ffdd 	bl	f39c <atomic_set_bit>
}
    f3e2:	4620      	mov	r0, r4
    f3e4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    f3e6:	2408      	movs	r4, #8
    f3e8:	e7fb      	b.n	f3e2 <_smp_init+0x28>
	...

0000f3ec <display_passkey>:
{
    f3ec:	b570      	push	{r4, r5, r6, lr}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    f3ee:	2104      	movs	r1, #4
{
    f3f0:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    f3f2:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
    f3f6:	f00d fce7 	bl	1cdc8 <bt_rand>
    f3fa:	4605      	mov	r5, r0
    f3fc:	b9e0      	cbnz	r0, f438 <display_passkey+0x4c>
	if (bt_auth && bt_auth->passkey_display) {
    f3fe:	4e0f      	ldr	r6, [pc, #60]	; (f43c <display_passkey+0x50>)
		smp->passkey %= 1000000;
    f400:	f8d4 116c 	ldr.w	r1, [r4, #364]	; 0x16c
    f404:	4a0e      	ldr	r2, [pc, #56]	; (f440 <display_passkey+0x54>)
	smp->passkey_round = 0;
    f406:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
	if (bt_auth && bt_auth->passkey_display) {
    f40a:	6830      	ldr	r0, [r6, #0]
		smp->passkey %= 1000000;
    f40c:	fbb1 f3f2 	udiv	r3, r1, r2
    f410:	fb02 1313 	mls	r3, r2, r3, r1
    f414:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
	if (bt_auth && bt_auth->passkey_display) {
    f418:	b168      	cbz	r0, f436 <display_passkey+0x4a>
    f41a:	6800      	ldr	r0, [r0, #0]
    f41c:	b158      	cbz	r0, f436 <display_passkey+0x4a>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    f41e:	210a      	movs	r1, #10
    f420:	f104 0098 	add.w	r0, r4, #152	; 0x98
    f424:	f7ff ffba 	bl	f39c <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    f428:	6833      	ldr	r3, [r6, #0]
    f42a:	6820      	ldr	r0, [r4, #0]
    f42c:	681b      	ldr	r3, [r3, #0]
    f42e:	f8d4 116c 	ldr.w	r1, [r4, #364]	; 0x16c
    f432:	4798      	blx	r3
    f434:	4628      	mov	r0, r5
}
    f436:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    f438:	2008      	movs	r0, #8
    f43a:	e7fc      	b.n	f436 <display_passkey+0x4a>
    f43c:	20003670 	.word	0x20003670
    f440:	000f4240 	.word	0x000f4240

0000f444 <compute_and_send_master_dhcheck>:
{
    f444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f448:	4604      	mov	r4, r0
    f44a:	b08c      	sub	sp, #48	; 0x30
	(void)memset(r, 0, sizeof(r));
    f44c:	2210      	movs	r2, #16
    f44e:	2100      	movs	r1, #0
    f450:	a808      	add	r0, sp, #32
    f452:	f7f7 fc46 	bl	6ce2 <memset>
	switch (smp->method) {
    f456:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    f45a:	2b03      	cmp	r3, #3
    f45c:	d81f      	bhi.n	f49e <compute_and_send_master_dhcheck+0x5a>
    f45e:	e8df f003 	tbb	[pc, r3]
    f462:	0208      	.short	0x0208
    f464:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    f466:	2204      	movs	r2, #4
    f468:	f504 71b6 	add.w	r1, r4, #364	; 0x16c
    f46c:	a808      	add	r0, sp, #32
    f46e:	f7f7 fc0b 	bl	6c88 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    f472:	6823      	ldr	r3, [r4, #0]
		   smp->tk)) {
    f474:	f104 02db 	add.w	r2, r4, #219	; 0xdb
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    f478:	f204 155b 	addw	r5, r4, #347	; 0x15b
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    f47c:	f104 07bb 	add.w	r7, r4, #187	; 0xbb
    f480:	f104 08cb 	add.w	r8, r4, #203	; 0xcb
    f484:	e9cd 5201 	strd	r5, r2, [sp, #4]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    f488:	f103 0256 	add.w	r2, r3, #86	; 0x56
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    f48c:	9200      	str	r2, [sp, #0]
    f48e:	334f      	adds	r3, #79	; 0x4f
    f490:	4642      	mov	r2, r8
    f492:	4639      	mov	r1, r7
    f494:	f204 102b 	addw	r0, r4, #299	; 0x12b
    f498:	f7ff fbd8 	bl	ec4c <smp_f5>
    f49c:	b108      	cbz	r0, f4a2 <compute_and_send_master_dhcheck+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    f49e:	2008      	movs	r0, #8
    f4a0:	e01d      	b.n	f4de <compute_and_send_master_dhcheck+0x9a>
		   &smp->chan.chan.conn->le.init_addr,
    f4a2:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    f4a4:	ae04      	add	r6, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
    f4a6:	f852 3b9e 	ldr.w	r3, [r2], #158
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    f4aa:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    f4ac:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr,
    f4b0:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    f4b2:	e9cd 2300 	strd	r2, r3, [sp]
    f4b6:	9102      	str	r1, [sp, #8]
    f4b8:	4628      	mov	r0, r5
    f4ba:	ab08      	add	r3, sp, #32
    f4bc:	4642      	mov	r2, r8
    f4be:	4639      	mov	r1, r7
    f4c0:	f7ff fc2e 	bl	ed20 <smp_f6>
    f4c4:	4605      	mov	r5, r0
    f4c6:	2800      	cmp	r0, #0
    f4c8:	d1e9      	bne.n	f49e <compute_and_send_master_dhcheck+0x5a>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    f4ca:	210d      	movs	r1, #13
    f4cc:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f4d0:	f7ff ff64 	bl	f39c <atomic_set_bit>
	sc_smp_send_dhkey_check(smp, e);
    f4d4:	4631      	mov	r1, r6
    f4d6:	4620      	mov	r0, r4
    f4d8:	f7ff fd86 	bl	efe8 <sc_smp_send_dhkey_check>
	return 0;
    f4dc:	4628      	mov	r0, r5
}
    f4de:	b00c      	add	sp, #48	; 0x30
    f4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f4e4 <compute_and_check_and_send_slave_dhcheck>:
{
    f4e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f4e8:	4604      	mov	r4, r0
    f4ea:	b091      	sub	sp, #68	; 0x44
	(void)memset(r, 0, sizeof(r));
    f4ec:	2210      	movs	r2, #16
    f4ee:	2100      	movs	r1, #0
    f4f0:	a80c      	add	r0, sp, #48	; 0x30
    f4f2:	f7f7 fbf6 	bl	6ce2 <memset>
	switch (smp->method) {
    f4f6:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    f4fa:	2b03      	cmp	r3, #3
    f4fc:	d81f      	bhi.n	f53e <compute_and_check_and_send_slave_dhcheck+0x5a>
    f4fe:	e8df f003 	tbb	[pc, r3]
    f502:	0208      	.short	0x0208
    f504:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    f506:	2204      	movs	r2, #4
    f508:	f504 71b6 	add.w	r1, r4, #364	; 0x16c
    f50c:	a80c      	add	r0, sp, #48	; 0x30
    f50e:	f7f7 fbbb 	bl	6c88 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    f512:	6823      	ldr	r3, [r4, #0]
		   smp->tk)) {
    f514:	f104 02db 	add.w	r2, r4, #219	; 0xdb
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    f518:	f204 155b 	addw	r5, r4, #347	; 0x15b
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    f51c:	f104 06cb 	add.w	r6, r4, #203	; 0xcb
    f520:	f104 08bb 	add.w	r8, r4, #187	; 0xbb
    f524:	e9cd 5201 	strd	r5, r2, [sp, #4]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    f528:	f103 0256 	add.w	r2, r3, #86	; 0x56
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    f52c:	9200      	str	r2, [sp, #0]
    f52e:	334f      	adds	r3, #79	; 0x4f
    f530:	4642      	mov	r2, r8
    f532:	4631      	mov	r1, r6
    f534:	f204 102b 	addw	r0, r4, #299	; 0x12b
    f538:	f7ff fb88 	bl	ec4c <smp_f5>
    f53c:	b108      	cbz	r0, f542 <compute_and_check_and_send_slave_dhcheck+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    f53e:	2008      	movs	r0, #8
    f540:	e039      	b.n	f5b6 <compute_and_check_and_send_slave_dhcheck+0xd2>
		   &smp->chan.chan.conn->le.resp_addr,
    f542:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    f544:	af08      	add	r7, sp, #32
		   &smp->chan.chan.conn->le.resp_addr,
    f546:	f852 3ba5 	ldr.w	r3, [r2], #165
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    f54a:	9703      	str	r7, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    f54c:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr,
    f550:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    f552:	e9cd 2300 	strd	r2, r3, [sp]
    f556:	9102      	str	r1, [sp, #8]
    f558:	ab0c      	add	r3, sp, #48	; 0x30
    f55a:	4632      	mov	r2, r6
    f55c:	4641      	mov	r1, r8
    f55e:	4628      	mov	r0, r5
    f560:	f7ff fbde 	bl	ed20 <smp_f6>
    f564:	2800      	cmp	r0, #0
    f566:	d1ea      	bne.n	f53e <compute_and_check_and_send_slave_dhcheck+0x5a>
		   &smp->chan.chan.conn->le.init_addr,
    f568:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    f56a:	f10d 0910 	add.w	r9, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
    f56e:	f852 3b9e 	ldr.w	r3, [r2], #158
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    f572:	f8cd 900c 	str.w	r9, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    f576:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr,
    f57a:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    f57c:	e9cd 2300 	strd	r2, r3, [sp]
    f580:	9102      	str	r1, [sp, #8]
    f582:	ab0c      	add	r3, sp, #48	; 0x30
    f584:	4642      	mov	r2, r8
    f586:	4631      	mov	r1, r6
    f588:	4628      	mov	r0, r5
    f58a:	f7ff fbc9 	bl	ed20 <smp_f6>
    f58e:	2800      	cmp	r0, #0
    f590:	d1d5      	bne.n	f53e <compute_and_check_and_send_slave_dhcheck+0x5a>
	if (memcmp(smp->e, re, 16)) {
    f592:	2210      	movs	r2, #16
    f594:	4649      	mov	r1, r9
    f596:	f204 104b 	addw	r0, r4, #331	; 0x14b
    f59a:	f7f7 fb4e 	bl	6c3a <memcmp>
    f59e:	4605      	mov	r5, r0
    f5a0:	b960      	cbnz	r0, f5bc <compute_and_check_and_send_slave_dhcheck+0xd8>
	sc_smp_send_dhkey_check(smp, e);
    f5a2:	4639      	mov	r1, r7
    f5a4:	4620      	mov	r0, r4
    f5a6:	f7ff fd1f 	bl	efe8 <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    f5aa:	f104 0098 	add.w	r0, r4, #152	; 0x98
    f5ae:	2101      	movs	r1, #1
    f5b0:	f7ff fef4 	bl	f39c <atomic_set_bit>
	return 0;
    f5b4:	4628      	mov	r0, r5
}
    f5b6:	b011      	add	sp, #68	; 0x44
    f5b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    f5bc:	200b      	movs	r0, #11
    f5be:	e7fa      	b.n	f5b6 <compute_and_check_and_send_slave_dhcheck+0xd2>

0000f5c0 <smp_dhkey_check>:
{
    f5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f5c2:	6803      	ldr	r3, [r0, #0]
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    f5c4:	688f      	ldr	r7, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f5c6:	78dd      	ldrb	r5, [r3, #3]
{
    f5c8:	b091      	sub	sp, #68	; 0x44
    f5ca:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f5cc:	2d00      	cmp	r5, #0
    f5ce:	d156      	bne.n	f67e <smp_dhkey_check+0xbe>
		(void)memset(r, 0, sizeof(r));
    f5d0:	2210      	movs	r2, #16
    f5d2:	4629      	mov	r1, r5
    f5d4:	a80c      	add	r0, sp, #48	; 0x30
    f5d6:	f7f7 fb84 	bl	6ce2 <memset>
		switch (smp->method) {
    f5da:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    f5de:	2b03      	cmp	r3, #3
    f5e0:	d81e      	bhi.n	f620 <smp_dhkey_check+0x60>
    f5e2:	e8df f003 	tbb	[pc, r3]
    f5e6:	0208      	.short	0x0208
    f5e8:	0802      	.short	0x0802
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    f5ea:	2204      	movs	r2, #4
    f5ec:	f504 71b6 	add.w	r1, r4, #364	; 0x16c
    f5f0:	a80c      	add	r0, sp, #48	; 0x30
    f5f2:	f7f7 fb49 	bl	6c88 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
    f5f6:	4622      	mov	r2, r4
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    f5f8:	ae08      	add	r6, sp, #32
			   &smp->chan.chan.conn->le.resp_addr,
    f5fa:	f852 3bbb 	ldr.w	r3, [r2], #187
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    f5fe:	9603      	str	r6, [sp, #12]
			   &smp->chan.chan.conn->le.init_addr, e)) {
    f600:	f103 014f 	add.w	r1, r3, #79	; 0x4f
			   &smp->chan.chan.conn->le.resp_addr,
    f604:	3356      	adds	r3, #86	; 0x56
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    f606:	9301      	str	r3, [sp, #4]
    f608:	f104 03a5 	add.w	r3, r4, #165	; 0xa5
    f60c:	9102      	str	r1, [sp, #8]
    f60e:	9300      	str	r3, [sp, #0]
    f610:	f104 01cb 	add.w	r1, r4, #203	; 0xcb
    f614:	ab0c      	add	r3, sp, #48	; 0x30
    f616:	f204 105b 	addw	r0, r4, #347	; 0x15b
    f61a:	f7ff fb81 	bl	ed20 <smp_f6>
    f61e:	b118      	cbz	r0, f628 <smp_dhkey_check+0x68>
			return BT_SMP_ERR_UNSPECIFIED;
    f620:	2508      	movs	r5, #8
}
    f622:	4628      	mov	r0, r5
    f624:	b011      	add	sp, #68	; 0x44
    f626:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (memcmp(e, req->e, 16)) {
    f628:	4639      	mov	r1, r7
    f62a:	2210      	movs	r2, #16
    f62c:	4630      	mov	r0, r6
    f62e:	f7f7 fb04 	bl	6c3a <memcmp>
    f632:	4607      	mov	r7, r0
    f634:	bb08      	cbnz	r0, f67a <smp_dhkey_check+0xba>
	return min(req->max_key_size, rsp->max_key_size);
    f636:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
    f63a:	f894 60a8 	ldrb.w	r6, [r4, #168]	; 0xa8
		(void)memset(ediv, 0, sizeof(ediv));
    f63e:	4601      	mov	r1, r0
	return min(req->max_key_size, rsp->max_key_size);
    f640:	429e      	cmp	r6, r3
		(void)memset(ediv, 0, sizeof(ediv));
    f642:	f04f 0202 	mov.w	r2, #2
    f646:	a805      	add	r0, sp, #20
	return min(req->max_key_size, rsp->max_key_size);
    f648:	bf28      	it	cs
    f64a:	461e      	movcs	r6, r3
		(void)memset(ediv, 0, sizeof(ediv));
    f64c:	f7f7 fb49 	bl	6ce2 <memset>
		(void)memset(rand, 0, sizeof(rand));
    f650:	2208      	movs	r2, #8
    f652:	4639      	mov	r1, r7
    f654:	a806      	add	r0, sp, #24
    f656:	f7f7 fb44 	bl	6ce2 <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
    f65a:	9600      	str	r6, [sp, #0]
    f65c:	f104 03db 	add.w	r3, r4, #219	; 0xdb
    f660:	aa05      	add	r2, sp, #20
    f662:	a906      	add	r1, sp, #24
    f664:	6820      	ldr	r0, [r4, #0]
    f666:	f7fb f967 	bl	a938 <bt_conn_le_start_encryption>
    f66a:	2800      	cmp	r0, #0
    f66c:	dbd8      	blt.n	f620 <smp_dhkey_check+0x60>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    f66e:	2101      	movs	r1, #1
    f670:	f104 0098 	add.w	r0, r4, #152	; 0x98
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f674:	f7ff fe92 	bl	f39c <atomic_set_bit>
			return 0;
    f678:	e7d3      	b.n	f622 <smp_dhkey_check+0x62>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    f67a:	250b      	movs	r5, #11
    f67c:	e7d1      	b.n	f622 <smp_dhkey_check+0x62>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    f67e:	2d01      	cmp	r5, #1
    f680:	d115      	bne.n	f6ae <smp_dhkey_check+0xee>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f682:	f100 0698 	add.w	r6, r0, #152	; 0x98
    f686:	210e      	movs	r1, #14
    f688:	4630      	mov	r0, r6
    f68a:	f7ff fbc9 	bl	ee20 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
    f68e:	2210      	movs	r2, #16
    f690:	4639      	mov	r1, r7
    f692:	f204 104b 	addw	r0, r4, #331	; 0x14b
    f696:	f7f7 faf7 	bl	6c88 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    f69a:	2107      	movs	r1, #7
    f69c:	4630      	mov	r0, r6
    f69e:	f7ff fa05 	bl	eaac <atomic_test_bit>
    f6a2:	4605      	mov	r5, r0
    f6a4:	b128      	cbz	r0, f6b2 <smp_dhkey_check+0xf2>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f6a6:	2108      	movs	r1, #8
    f6a8:	4630      	mov	r0, r6
    f6aa:	f7ff fe77 	bl	f39c <atomic_set_bit>
	return 0;
    f6ae:	2500      	movs	r5, #0
    f6b0:	e7b7      	b.n	f622 <smp_dhkey_check+0x62>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    f6b2:	2109      	movs	r1, #9
    f6b4:	4630      	mov	r0, r6
    f6b6:	f7ff f9f9 	bl	eaac <atomic_test_bit>
    f6ba:	b110      	cbz	r0, f6c2 <smp_dhkey_check+0x102>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f6bc:	2108      	movs	r1, #8
    f6be:	4630      	mov	r0, r6
    f6c0:	e7d8      	b.n	f674 <smp_dhkey_check+0xb4>
		return compute_and_check_and_send_slave_dhcheck(smp);
    f6c2:	4620      	mov	r0, r4
    f6c4:	f7ff ff0e 	bl	f4e4 <compute_and_check_and_send_slave_dhcheck>
    f6c8:	4605      	mov	r5, r0
    f6ca:	e7aa      	b.n	f622 <smp_dhkey_check+0x62>

0000f6cc <smp_ident_info>:
{
    f6cc:	b570      	push	{r4, r5, r6, lr}
    f6ce:	460b      	mov	r3, r1
    f6d0:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f6d2:	210b      	movs	r1, #11
    f6d4:	3098      	adds	r0, #152	; 0x98
    f6d6:	f7ff f9e9 	bl	eaac <atomic_test_bit>
    f6da:	b360      	cbz	r0, f736 <smp_ident_info+0x6a>
		struct bt_smp_ident_info *req = (void *)buf->data;
    f6dc:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    f6de:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    f6e0:	f103 0548 	add.w	r5, r3, #72	; 0x48
    f6e4:	462a      	mov	r2, r5
    f6e6:	7a19      	ldrb	r1, [r3, #8]
    f6e8:	2002      	movs	r0, #2
    f6ea:	f001 fd6f 	bl	111cc <bt_keys_get_type>
		if (!keys) {
    f6ee:	b9e8      	cbnz	r0, f72c <smp_ident_info+0x60>
			BT_ERR("Unable to get keys for %s",
    f6f0:	4b14      	ldr	r3, [pc, #80]	; (f744 <smp_ident_info+0x78>)
    f6f2:	681b      	ldr	r3, [r3, #0]
    f6f4:	075b      	lsls	r3, r3, #29
    f6f6:	d017      	beq.n	f728 <smp_ident_info+0x5c>
    f6f8:	2301      	movs	r3, #1
    f6fa:	f04f 0400 	mov.w	r4, #0
    f6fe:	f363 0402 	bfi	r4, r3, #0, #3
    f702:	4a11      	ldr	r2, [pc, #68]	; (f748 <smp_ident_info+0x7c>)
    f704:	4b11      	ldr	r3, [pc, #68]	; (f74c <smp_ident_info+0x80>)
    f706:	1ad2      	subs	r2, r2, r3
    f708:	08d2      	lsrs	r2, r2, #3
    f70a:	f360 04c5 	bfi	r4, r0, #3, #3
    f70e:	4628      	mov	r0, r5
    f710:	f362 148f 	bfi	r4, r2, #6, #10
    f714:	f7f7 ffb2 	bl	767c <bt_addr_le_str_real>
    f718:	f7f2 fe7a 	bl	2410 <log_strdup>
    f71c:	4623      	mov	r3, r4
    f71e:	4602      	mov	r2, r0
    f720:	490b      	ldr	r1, [pc, #44]	; (f750 <smp_ident_info+0x84>)
    f722:	480c      	ldr	r0, [pc, #48]	; (f754 <smp_ident_info+0x88>)
    f724:	f7f2 fcf6 	bl	2114 <log_2>
			return BT_SMP_ERR_UNSPECIFIED;
    f728:	2008      	movs	r0, #8
    f72a:	e00a      	b.n	f742 <smp_ident_info+0x76>
		memcpy(keys->irk.val, req->irk, 16);
    f72c:	2210      	movs	r2, #16
    f72e:	4631      	mov	r1, r6
    f730:	3026      	adds	r0, #38	; 0x26
    f732:	f7f7 faa9 	bl	6c88 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    f736:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f73a:	2109      	movs	r1, #9
    f73c:	f7ff fe2e 	bl	f39c <atomic_set_bit>
	return 0;
    f740:	2000      	movs	r0, #0
}
    f742:	bd70      	pop	{r4, r5, r6, pc}
    f744:	2000e248 	.word	0x2000e248
    f748:	0002efd0 	.word	0x0002efd0
    f74c:	0002ef38 	.word	0x0002ef38
    f750:	0003231e 	.word	0x0003231e
    f754:	0003273b 	.word	0x0003273b

0000f758 <smp_encrypt_info>:
{
    f758:	b570      	push	{r4, r5, r6, lr}
    f75a:	460b      	mov	r3, r1
    f75c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f75e:	210b      	movs	r1, #11
    f760:	3098      	adds	r0, #152	; 0x98
    f762:	f7ff f9a3 	bl	eaac <atomic_test_bit>
    f766:	b360      	cbz	r0, f7c2 <smp_encrypt_info+0x6a>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    f768:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    f76a:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    f76c:	f103 0548 	add.w	r5, r3, #72	; 0x48
    f770:	462a      	mov	r2, r5
    f772:	7a19      	ldrb	r1, [r3, #8]
    f774:	2004      	movs	r0, #4
    f776:	f001 fd29 	bl	111cc <bt_keys_get_type>
		if (!keys) {
    f77a:	b9e8      	cbnz	r0, f7b8 <smp_encrypt_info+0x60>
			BT_ERR("Unable to get keys for %s",
    f77c:	4b14      	ldr	r3, [pc, #80]	; (f7d0 <smp_encrypt_info+0x78>)
    f77e:	681b      	ldr	r3, [r3, #0]
    f780:	075b      	lsls	r3, r3, #29
    f782:	d017      	beq.n	f7b4 <smp_encrypt_info+0x5c>
    f784:	2301      	movs	r3, #1
    f786:	f04f 0400 	mov.w	r4, #0
    f78a:	f363 0402 	bfi	r4, r3, #0, #3
    f78e:	4a11      	ldr	r2, [pc, #68]	; (f7d4 <smp_encrypt_info+0x7c>)
    f790:	4b11      	ldr	r3, [pc, #68]	; (f7d8 <smp_encrypt_info+0x80>)
    f792:	1ad2      	subs	r2, r2, r3
    f794:	08d2      	lsrs	r2, r2, #3
    f796:	f360 04c5 	bfi	r4, r0, #3, #3
    f79a:	4628      	mov	r0, r5
    f79c:	f362 148f 	bfi	r4, r2, #6, #10
    f7a0:	f7f7 ff6c 	bl	767c <bt_addr_le_str_real>
    f7a4:	f7f2 fe34 	bl	2410 <log_strdup>
    f7a8:	4623      	mov	r3, r4
    f7aa:	4602      	mov	r2, r0
    f7ac:	490b      	ldr	r1, [pc, #44]	; (f7dc <smp_encrypt_info+0x84>)
    f7ae:	480c      	ldr	r0, [pc, #48]	; (f7e0 <smp_encrypt_info+0x88>)
    f7b0:	f7f2 fcb0 	bl	2114 <log_2>
			return BT_SMP_ERR_UNSPECIFIED;
    f7b4:	2008      	movs	r0, #8
    f7b6:	e00a      	b.n	f7ce <smp_encrypt_info+0x76>
		memcpy(keys->ltk.val, req->ltk, 16);
    f7b8:	2210      	movs	r2, #16
    f7ba:	4631      	mov	r1, r6
    f7bc:	3016      	adds	r0, #22
    f7be:	f7f7 fa63 	bl	6c88 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    f7c2:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f7c6:	2107      	movs	r1, #7
    f7c8:	f7ff fde8 	bl	f39c <atomic_set_bit>
	return 0;
    f7cc:	2000      	movs	r0, #0
}
    f7ce:	bd70      	pop	{r4, r5, r6, pc}
    f7d0:	2000e248 	.word	0x2000e248
    f7d4:	0002efd0 	.word	0x0002efd0
    f7d8:	0002ef38 	.word	0x0002ef38
    f7dc:	000322dc 	.word	0x000322dc
    f7e0:	0003273b 	.word	0x0003273b

0000f7e4 <legacy_request_tk>:
{
    f7e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    f7e6:	6805      	ldr	r5, [r0, #0]
{
    f7e8:	4604      	mov	r4, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    f7ea:	f105 0148 	add.w	r1, r5, #72	; 0x48
    f7ee:	7a28      	ldrb	r0, [r5, #8]
    f7f0:	f001 fd36 	bl	11260 <bt_keys_find_addr>
    f7f4:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    f7f8:	b1e8      	cbz	r0, f836 <legacy_request_tk+0x52>
    f7fa:	7a43      	ldrb	r3, [r0, #9]
    f7fc:	07d8      	lsls	r0, r3, #31
    f7fe:	d51a      	bpl.n	f836 <legacy_request_tk+0x52>
    f800:	b9ca      	cbnz	r2, f836 <legacy_request_tk+0x52>
		BT_ERR("JustWorks failed, authenticated keys present");
    f802:	4b36      	ldr	r3, [pc, #216]	; (f8dc <legacy_request_tk+0xf8>)
    f804:	681b      	ldr	r3, [r3, #0]
    f806:	0759      	lsls	r1, r3, #29
    f808:	d102      	bne.n	f810 <legacy_request_tk+0x2c>
		return BT_SMP_ERR_UNSPECIFIED;
    f80a:	2008      	movs	r0, #8
}
    f80c:	b002      	add	sp, #8
    f80e:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("JustWorks failed, authenticated keys present");
    f810:	2301      	movs	r3, #1
    f812:	f04f 0100 	mov.w	r1, #0
    f816:	f363 0102 	bfi	r1, r3, #0, #3
    f81a:	f362 01c5 	bfi	r1, r2, #3, #3
    f81e:	4b30      	ldr	r3, [pc, #192]	; (f8e0 <legacy_request_tk+0xfc>)
    f820:	4a30      	ldr	r2, [pc, #192]	; (f8e4 <legacy_request_tk+0x100>)
    f822:	4831      	ldr	r0, [pc, #196]	; (f8e8 <legacy_request_tk+0x104>)
    f824:	1a9b      	subs	r3, r3, r2
    f826:	08db      	lsrs	r3, r3, #3
    f828:	f363 118f 	bfi	r1, r3, #6, #10
    f82c:	460a      	mov	r2, r1
    f82e:	492f      	ldr	r1, [pc, #188]	; (f8ec <legacy_request_tk+0x108>)
    f830:	f7f2 fc5c 	bl	20ec <log_1>
    f834:	e7e9      	b.n	f80a <legacy_request_tk+0x26>
	switch (smp->method) {
    f836:	2a01      	cmp	r2, #1
    f838:	d02e      	beq.n	f898 <legacy_request_tk+0xb4>
    f83a:	d32b      	bcc.n	f894 <legacy_request_tk+0xb0>
    f83c:	2a02      	cmp	r2, #2
    f83e:	d136      	bne.n	f8ae <legacy_request_tk+0xca>
			if (bt_rand(&passkey, sizeof(passkey))) {
    f840:	2104      	movs	r1, #4
    f842:	eb0d 0001 	add.w	r0, sp, r1
    f846:	f00d fabf 	bl	1cdc8 <bt_rand>
    f84a:	2800      	cmp	r0, #0
    f84c:	d1dd      	bne.n	f80a <legacy_request_tk+0x26>
			passkey %= 1000000;
    f84e:	9901      	ldr	r1, [sp, #4]
    f850:	4a27      	ldr	r2, [pc, #156]	; (f8f0 <legacy_request_tk+0x10c>)
		if (bt_auth && bt_auth->passkey_display) {
    f852:	4e28      	ldr	r6, [pc, #160]	; (f8f4 <legacy_request_tk+0x110>)
			passkey %= 1000000;
    f854:	fbb1 f3f2 	udiv	r3, r1, r2
    f858:	fb02 1313 	mls	r3, r2, r3, r1
    f85c:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    f85e:	6833      	ldr	r3, [r6, #0]
    f860:	b15b      	cbz	r3, f87a <legacy_request_tk+0x96>
    f862:	681b      	ldr	r3, [r3, #0]
    f864:	b14b      	cbz	r3, f87a <legacy_request_tk+0x96>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    f866:	210a      	movs	r1, #10
    f868:	f104 0098 	add.w	r0, r4, #152	; 0x98
    f86c:	f7ff fd96 	bl	f39c <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    f870:	6833      	ldr	r3, [r6, #0]
    f872:	9901      	ldr	r1, [sp, #4]
    f874:	681b      	ldr	r3, [r3, #0]
    f876:	4628      	mov	r0, r5
    f878:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    f87a:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    f87c:	f884 30db 	strb.w	r3, [r4, #219]	; 0xdb
	dst[1] = val >> 8;
    f880:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    f884:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    f886:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
	dst[1] = val >> 8;
    f88a:	0a1b      	lsrs	r3, r3, #8
    f88c:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
    f890:	f884 30de 	strb.w	r3, [r4, #222]	; 0xde
	return 0;
    f894:	2000      	movs	r0, #0
    f896:	e7b9      	b.n	f80c <legacy_request_tk+0x28>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f898:	f104 0098 	add.w	r0, r4, #152	; 0x98
    f89c:	2109      	movs	r1, #9
    f89e:	f7ff fd7d 	bl	f39c <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    f8a2:	4b14      	ldr	r3, [pc, #80]	; (f8f4 <legacy_request_tk+0x110>)
    f8a4:	681b      	ldr	r3, [r3, #0]
    f8a6:	4628      	mov	r0, r5
    f8a8:	685b      	ldr	r3, [r3, #4]
    f8aa:	4798      	blx	r3
    f8ac:	e7f2      	b.n	f894 <legacy_request_tk+0xb0>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f8ae:	4b0b      	ldr	r3, [pc, #44]	; (f8dc <legacy_request_tk+0xf8>)
    f8b0:	681b      	ldr	r3, [r3, #0]
    f8b2:	075b      	lsls	r3, r3, #29
    f8b4:	d0a9      	beq.n	f80a <legacy_request_tk+0x26>
    f8b6:	2101      	movs	r1, #1
    f8b8:	f04f 0300 	mov.w	r3, #0
    f8bc:	f361 0302 	bfi	r3, r1, #0, #3
    f8c0:	4808      	ldr	r0, [pc, #32]	; (f8e4 <legacy_request_tk+0x100>)
    f8c2:	4907      	ldr	r1, [pc, #28]	; (f8e0 <legacy_request_tk+0xfc>)
    f8c4:	1a09      	subs	r1, r1, r0
    f8c6:	08c9      	lsrs	r1, r1, #3
    f8c8:	f36f 03c5 	bfc	r3, #3, #3
    f8cc:	f361 138f 	bfi	r3, r1, #6, #10
    f8d0:	4809      	ldr	r0, [pc, #36]	; (f8f8 <legacy_request_tk+0x114>)
    f8d2:	4906      	ldr	r1, [pc, #24]	; (f8ec <legacy_request_tk+0x108>)
    f8d4:	f7f2 fc1e 	bl	2114 <log_2>
    f8d8:	e797      	b.n	f80a <legacy_request_tk+0x26>
    f8da:	bf00      	nop
    f8dc:	2000e248 	.word	0x2000e248
    f8e0:	0002efd0 	.word	0x0002efd0
    f8e4:	0002ef38 	.word	0x0002ef38
    f8e8:	0003265c 	.word	0x0003265c
    f8ec:	000322b4 	.word	0x000322b4
    f8f0:	000f4240 	.word	0x000f4240
    f8f4:	20003670 	.word	0x20003670
    f8f8:	0003268d 	.word	0x0003268d

0000f8fc <smp_pairing_req>:
{
    f8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    f900:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    f902:	78fb      	ldrb	r3, [r7, #3]
    f904:	3b07      	subs	r3, #7
    f906:	2b09      	cmp	r3, #9
{
    f908:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    f90a:	d903      	bls.n	f914 <smp_pairing_req+0x18>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    f90c:	2506      	movs	r5, #6
}
    f90e:	4628      	mov	r0, r5
    f910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    f914:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    f916:	210d      	movs	r1, #13
	struct bt_conn *conn = smp->chan.chan.conn;
    f918:	f856 8b98 	ldr.w	r8, [r6], #152
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    f91c:	4630      	mov	r0, r6
    f91e:	f7ff f8c5 	bl	eaac <atomic_test_bit>
    f922:	b928      	cbnz	r0, f930 <smp_pairing_req+0x34>
		int ret = _smp_init(smp);
    f924:	4620      	mov	r0, r4
    f926:	f7ff fd48 	bl	f3ba <_smp_init>
		if (ret) {
    f92a:	b108      	cbz	r0, f930 <smp_pairing_req+0x34>
			return ret;
    f92c:	b2c5      	uxtb	r5, r0
    f92e:	e7ee      	b.n	f90e <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    f930:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    f932:	2206      	movs	r2, #6
    f934:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    f936:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
	memcpy(smp->preq + 1, req, sizeof(*req));
    f93a:	f104 009e 	add.w	r0, r4, #158	; 0x9e
    f93e:	f7f7 f9a3 	bl	6c88 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    f942:	2302      	movs	r3, #2
    f944:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
	rsp->auth_req = get_auth(req->auth_req);
    f948:	78b8      	ldrb	r0, [r7, #2]
    f94a:	f7ff f891 	bl	ea70 <get_auth>
    f94e:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
    f952:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
    f954:	f7ff f866 	bl	ea24 <get_io_capa>
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    f958:	2300      	movs	r3, #0
    f95a:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    f95e:	2310      	movs	r3, #16
	rsp->io_capability = get_io_capa();
    f960:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    f964:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    f968:	793b      	ldrb	r3, [r7, #4]
    f96a:	f003 0307 	and.w	r3, r3, #7
    f96e:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    f972:	797b      	ldrb	r3, [r7, #5]
    f974:	f003 0305 	and.w	r3, r3, #5
    f978:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    f97c:	072b      	lsls	r3, r5, #28
    f97e:	d512      	bpl.n	f9a6 <smp_pairing_req+0xaa>
    f980:	78bb      	ldrb	r3, [r7, #2]
    f982:	071d      	lsls	r5, r3, #28
    f984:	d50f      	bpl.n	f9a6 <smp_pairing_req+0xaa>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    f986:	2105      	movs	r1, #5
    f988:	4630      	mov	r0, r6
    f98a:	f7ff fd07 	bl	f39c <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    f98e:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    f992:	f003 0306 	and.w	r3, r3, #6
    f996:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
		rsp->resp_key_dist &= SEND_KEYS_SC;
    f99a:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
    f99e:	f003 0304 	and.w	r3, r3, #4
    f9a2:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    f9a6:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
    f9aa:	0698      	lsls	r0, r3, #26
    f9ac:	d506      	bpl.n	f9bc <smp_pairing_req+0xc0>
    f9ae:	78bb      	ldrb	r3, [r7, #2]
    f9b0:	0699      	lsls	r1, r3, #26
    f9b2:	d503      	bpl.n	f9bc <smp_pairing_req+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    f9b4:	2112      	movs	r1, #18
    f9b6:	4630      	mov	r0, r6
    f9b8:	f7ff fcf0 	bl	f39c <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    f9bc:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
    f9c0:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	smp->remote_dist = rsp->init_key_dist;
    f9c4:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    f9c8:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    f9cc:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
    f9d0:	07da      	lsls	r2, r3, #31
    f9d2:	d506      	bpl.n	f9e2 <smp_pairing_req+0xe6>
    f9d4:	78bb      	ldrb	r3, [r7, #2]
    f9d6:	07db      	lsls	r3, r3, #31
    f9d8:	d503      	bpl.n	f9e2 <smp_pairing_req+0xe6>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    f9da:	210b      	movs	r1, #11
    f9dc:	4630      	mov	r0, r6
    f9de:	f7ff fcdd 	bl	f39c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    f9e2:	2103      	movs	r1, #3
    f9e4:	4630      	mov	r0, r6
    f9e6:	f7ff fcd9 	bl	f39c <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f9ea:	2105      	movs	r1, #5
    f9ec:	f7ff f85e 	bl	eaac <atomic_test_bit>
    f9f0:	783f      	ldrb	r7, [r7, #0]
    f9f2:	bb58      	cbnz	r0, fa4c <smp_pairing_req+0x150>
	smp->method = legacy_get_pair_method(smp, remote_io);
    f9f4:	4639      	mov	r1, r7
    f9f6:	4620      	mov	r0, r4
    f9f8:	f7ff fa3c 	bl	ee74 <legacy_get_pair_method>
    f9fc:	4605      	mov	r5, r0
    f9fe:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    fa02:	b990      	cbnz	r0, fa2a <smp_pairing_req+0x12e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    fa04:	210d      	movs	r1, #13
    fa06:	4630      	mov	r0, r6
    fa08:	f7ff f850 	bl	eaac <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    fa0c:	b968      	cbnz	r0, fa2a <smp_pairing_req+0x12e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    fa0e:	4f2f      	ldr	r7, [pc, #188]	; (facc <smp_pairing_req+0x1d0>)
    fa10:	683b      	ldr	r3, [r7, #0]
    fa12:	b153      	cbz	r3, fa2a <smp_pairing_req+0x12e>
	    bt_auth && bt_auth->pairing_confirm) {
    fa14:	691b      	ldr	r3, [r3, #16]
    fa16:	b143      	cbz	r3, fa2a <smp_pairing_req+0x12e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    fa18:	4630      	mov	r0, r6
    fa1a:	2109      	movs	r1, #9
    fa1c:	f7ff fcbe 	bl	f39c <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    fa20:	683b      	ldr	r3, [r7, #0]
    fa22:	6820      	ldr	r0, [r4, #0]
    fa24:	691b      	ldr	r3, [r3, #16]
    fa26:	4798      	blx	r3
		return 0;
    fa28:	e771      	b.n	f90e <smp_pairing_req+0x12>
	ret = send_pairing_rsp(smp);
    fa2a:	4620      	mov	r0, r4
    fa2c:	f7ff fb18 	bl	f060 <send_pairing_rsp>
	if (ret) {
    fa30:	4605      	mov	r5, r0
    fa32:	2800      	cmp	r0, #0
    fa34:	f47f af6b 	bne.w	f90e <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    fa38:	f104 0094 	add.w	r0, r4, #148	; 0x94
    fa3c:	2103      	movs	r1, #3
    fa3e:	f7ff fcad 	bl	f39c <atomic_set_bit>
	return legacy_request_tk(smp);
    fa42:	4620      	mov	r0, r4
}
    fa44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return legacy_request_tk(smp);
    fa48:	f7ff becc 	b.w	f7e4 <legacy_request_tk>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    fa4c:	2f04      	cmp	r7, #4
    fa4e:	d829      	bhi.n	faa4 <smp_pairing_req+0x1a8>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    fa50:	f894 50a0 	ldrb.w	r5, [r4, #160]	; 0xa0
    fa54:	f894 00a7 	ldrb.w	r0, [r4, #167]	; 0xa7
    fa58:	4305      	orrs	r5, r0
    fa5a:	f015 0504 	ands.w	r5, r5, #4
    fa5e:	d006      	beq.n	fa6e <smp_pairing_req+0x172>
	return gen_method_sc[remote_io][get_io_capa()];
    fa60:	f7fe ffe0 	bl	ea24 <get_io_capa>
    fa64:	491a      	ldr	r1, [pc, #104]	; (fad0 <smp_pairing_req+0x1d4>)
    fa66:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    fa6a:	440f      	add	r7, r1
    fa6c:	5c3d      	ldrb	r5, [r7, r0]
	smp->method = get_pair_method(smp, req->io_capability);
    fa6e:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    fa72:	f898 300a 	ldrb.w	r3, [r8, #10]
    fa76:	2b04      	cmp	r3, #4
    fa78:	d116      	bne.n	faa8 <smp_pairing_req+0x1ac>
	     conn->required_sec_level == BT_SECURITY_FIPS) &&
    fa7a:	b32d      	cbz	r5, fac8 <smp_pairing_req+0x1cc>
	return min(req->max_key_size, rsp->max_key_size);
    fa7c:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
    fa80:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
	     conn->required_sec_level == BT_SECURITY_FIPS) &&
    fa84:	4293      	cmp	r3, r2
    fa86:	bf28      	it	cs
    fa88:	4613      	movcs	r3, r2
    fa8a:	2b10      	cmp	r3, #16
    fa8c:	f47f af3e 	bne.w	f90c <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    fa90:	f104 0094 	add.w	r0, r4, #148	; 0x94
    fa94:	210c      	movs	r1, #12
    fa96:	f7ff fc81 	bl	f39c <atomic_set_bit>
	return send_pairing_rsp(smp);
    fa9a:	4620      	mov	r0, r4
}
    fa9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
    faa0:	f7ff bade 	b.w	f060 <send_pairing_rsp>
		return JUST_WORKS;
    faa4:	2500      	movs	r5, #0
    faa6:	e7e2      	b.n	fa6e <smp_pairing_req+0x172>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    faa8:	2d00      	cmp	r5, #0
    faaa:	d1f1      	bne.n	fa90 <smp_pairing_req+0x194>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    faac:	210d      	movs	r1, #13
    faae:	4630      	mov	r0, r6
    fab0:	f7fe fffc 	bl	eaac <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    fab4:	2800      	cmp	r0, #0
    fab6:	d1eb      	bne.n	fa90 <smp_pairing_req+0x194>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    fab8:	4f04      	ldr	r7, [pc, #16]	; (facc <smp_pairing_req+0x1d0>)
    faba:	683b      	ldr	r3, [r7, #0]
    fabc:	2b00      	cmp	r3, #0
    fabe:	d0e7      	beq.n	fa90 <smp_pairing_req+0x194>
	    bt_auth && bt_auth->pairing_confirm) {
    fac0:	691b      	ldr	r3, [r3, #16]
    fac2:	2b00      	cmp	r3, #0
    fac4:	d0e4      	beq.n	fa90 <smp_pairing_req+0x194>
    fac6:	e7a7      	b.n	fa18 <smp_pairing_req+0x11c>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    fac8:	2503      	movs	r5, #3
    faca:	e720      	b.n	f90e <smp_pairing_req+0x12>
    facc:	20003670 	.word	0x20003670
    fad0:	000325d1 	.word	0x000325d1

0000fad4 <smp_reset>:
{
    fad4:	b538      	push	{r3, r4, r5, lr}
    fad6:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    fad8:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    fada:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    fade:	f01e fdc6 	bl	2e66e <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    fae2:	2300      	movs	r3, #0
    fae4:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
	atomic_set(&smp->allowed_cmds, 0);
    fae8:	f104 0094 	add.w	r0, r4, #148	; 0x94
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    faec:	f3bf 8f5b 	dmb	ish
    faf0:	e850 2f00 	ldrex	r2, [r0]
    faf4:	e840 3100 	strex	r1, r3, [r0]
    faf8:	2900      	cmp	r1, #0
    fafa:	d1f9      	bne.n	faf0 <smp_reset+0x1c>
    fafc:	f3bf 8f5b 	dmb	ish
    fb00:	f3bf 8f5b 	dmb	ish
    fb04:	3498      	adds	r4, #152	; 0x98
    fb06:	e854 2f00 	ldrex	r2, [r4]
    fb0a:	e844 3100 	strex	r1, r3, [r4]
    fb0e:	2900      	cmp	r1, #0
    fb10:	d1f9      	bne.n	fb06 <smp_reset+0x32>
    fb12:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    fb16:	7a6b      	ldrb	r3, [r5, #9]
    fb18:	7aaa      	ldrb	r2, [r5, #10]
    fb1a:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
    fb1c:	bf18      	it	ne
    fb1e:	72ab      	strbne	r3, [r5, #10]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fb20:	78eb      	ldrb	r3, [r5, #3]
    fb22:	b923      	cbnz	r3, fb2e <smp_reset+0x5a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    fb24:	210b      	movs	r1, #11
}
    fb26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    fb2a:	f7ff bc37 	b.w	f39c <atomic_set_bit>
    fb2e:	2101      	movs	r1, #1
    fb30:	e7f9      	b.n	fb26 <smp_reset+0x52>
	...

0000fb34 <smp_pairing_complete>:
{
    fb34:	b510      	push	{r4, lr}
    fb36:	4b0f      	ldr	r3, [pc, #60]	; (fb74 <smp_pairing_complete+0x40>)
    fb38:	4604      	mov	r4, r0
	if (!status) {
    fb3a:	b989      	cbnz	r1, fb60 <smp_pairing_complete+0x2c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    fb3c:	210b      	movs	r1, #11
    fb3e:	3098      	adds	r0, #152	; 0x98
    fb40:	f7fe ffb4 	bl	eaac <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
    fb44:	681b      	ldr	r3, [r3, #0]
    fb46:	b133      	cbz	r3, fb56 <smp_pairing_complete+0x22>
    fb48:	695b      	ldr	r3, [r3, #20]
    fb4a:	b123      	cbz	r3, fb56 <smp_pairing_complete+0x22>
			bt_auth->pairing_complete(smp->chan.chan.conn,
    fb4c:	1c01      	adds	r1, r0, #0
    fb4e:	bf18      	it	ne
    fb50:	2101      	movne	r1, #1
    fb52:	6820      	ldr	r0, [r4, #0]
    fb54:	4798      	blx	r3
	smp_reset(smp);
    fb56:	4620      	mov	r0, r4
}
    fb58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    fb5c:	f7ff bfba 	b.w	fad4 <smp_reset>
	} else if (bt_auth && bt_auth->pairing_failed) {
    fb60:	681b      	ldr	r3, [r3, #0]
    fb62:	2b00      	cmp	r3, #0
    fb64:	d0f7      	beq.n	fb56 <smp_pairing_complete+0x22>
    fb66:	699b      	ldr	r3, [r3, #24]
    fb68:	2b00      	cmp	r3, #0
    fb6a:	d0f4      	beq.n	fb56 <smp_pairing_complete+0x22>
		bt_auth->pairing_failed(smp->chan.chan.conn);
    fb6c:	6800      	ldr	r0, [r0, #0]
    fb6e:	4798      	blx	r3
    fb70:	e7f1      	b.n	fb56 <smp_pairing_complete+0x22>
    fb72:	bf00      	nop
    fb74:	20003670 	.word	0x20003670

0000fb78 <smp_error>:
{
    fb78:	b570      	push	{r4, r5, r6, lr}
    fb7a:	4605      	mov	r5, r0
    fb7c:	460e      	mov	r6, r1
	smp_pairing_complete(smp, reason);
    fb7e:	f7ff ffd9 	bl	fb34 <smp_pairing_complete>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    fb82:	2005      	movs	r0, #5
    fb84:	f7ff f9de 	bl	ef44 <smp_create_pdu.isra.6>
	if (!buf) {
    fb88:	4604      	mov	r4, r0
    fb8a:	b160      	cbz	r0, fba6 <smp_error+0x2e>
	rsp = net_buf_add(buf, sizeof(*rsp));
    fb8c:	2101      	movs	r1, #1
    fb8e:	3008      	adds	r0, #8
    fb90:	f00f fbbe 	bl	1f310 <net_buf_simple_add>
	rsp->reason = reason;
    fb94:	7006      	strb	r6, [r0, #0]
    fb96:	6828      	ldr	r0, [r5, #0]
    fb98:	2300      	movs	r3, #0
    fb9a:	4622      	mov	r2, r4
    fb9c:	2106      	movs	r1, #6
    fb9e:	f7fb ff31 	bl	ba04 <bt_l2cap_send_cb>
	return 0;
    fba2:	2000      	movs	r0, #0
}
    fba4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    fba6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    fbaa:	e7fb      	b.n	fba4 <smp_error+0x2c>

0000fbac <bt_smp_dhkey_ready>:
{
    fbac:	b538      	push	{r3, r4, r5, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    fbae:	4c1d      	ldr	r4, [pc, #116]	; (fc24 <bt_smp_dhkey_ready+0x78>)
{
    fbb0:	4605      	mov	r5, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    fbb2:	2107      	movs	r1, #7
    fbb4:	f104 0098 	add.w	r0, r4, #152	; 0x98
    fbb8:	f7ff fbd8 	bl	f36c <atomic_test_and_clear_bit>
    fbbc:	b370      	cbz	r0, fc1c <bt_smp_dhkey_ready+0x70>
	if (!dhkey) {
    fbbe:	b92d      	cbnz	r5, fbcc <bt_smp_dhkey_ready+0x20>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    fbc0:	210b      	movs	r1, #11
			smp_error(smp, err);
    fbc2:	4620      	mov	r0, r4
}
    fbc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			smp_error(smp, err);
    fbc8:	f7ff bfd6 	b.w	fb78 <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    fbcc:	4629      	mov	r1, r5
    fbce:	2220      	movs	r2, #32
    fbd0:	f204 102b 	addw	r0, r4, #299	; 0x12b
    fbd4:	f7f7 f858 	bl	6c88 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    fbd8:	2109      	movs	r1, #9
    fbda:	f104 0098 	add.w	r0, r4, #152	; 0x98
    fbde:	f7fe ff65 	bl	eaac <atomic_test_bit>
    fbe2:	b128      	cbz	r0, fbf0 <bt_smp_dhkey_ready+0x44>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    fbe4:	2108      	movs	r1, #8
    fbe6:	4810      	ldr	r0, [pc, #64]	; (fc28 <bt_smp_dhkey_ready+0x7c>)
}
    fbe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    fbec:	f7ff bbd6 	b.w	f39c <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    fbf0:	210e      	movs	r1, #14
    fbf2:	f104 0098 	add.w	r0, r4, #152	; 0x98
    fbf6:	f7fe ff59 	bl	eaac <atomic_test_bit>
    fbfa:	2800      	cmp	r0, #0
    fbfc:	d1f2      	bne.n	fbe4 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    fbfe:	2108      	movs	r1, #8
    fc00:	f104 0098 	add.w	r0, r4, #152	; 0x98
    fc04:	f7fe ff52 	bl	eaac <atomic_test_bit>
    fc08:	b140      	cbz	r0, fc1c <bt_smp_dhkey_ready+0x70>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    fc0a:	6823      	ldr	r3, [r4, #0]
    fc0c:	78db      	ldrb	r3, [r3, #3]
			err = compute_and_send_master_dhcheck(smp);
    fc0e:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    fc10:	b92b      	cbnz	r3, fc1e <bt_smp_dhkey_ready+0x72>
			err = compute_and_send_master_dhcheck(smp);
    fc12:	f7ff fc17 	bl	f444 <compute_and_send_master_dhcheck>
		if (err) {
    fc16:	4601      	mov	r1, r0
    fc18:	2800      	cmp	r0, #0
    fc1a:	d1d2      	bne.n	fbc2 <bt_smp_dhkey_ready+0x16>
}
    fc1c:	bd38      	pop	{r3, r4, r5, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    fc1e:	f7ff fc61 	bl	f4e4 <compute_and_check_and_send_slave_dhcheck>
    fc22:	e7f8      	b.n	fc16 <bt_smp_dhkey_ready+0x6a>
    fc24:	20000e70 	.word	0x20000e70
    fc28:	20000f08 	.word	0x20000f08

0000fc2c <bt_smp_recv>:
	if (buf->len < sizeof(*hdr)) {
    fc2c:	898b      	ldrh	r3, [r1, #12]
{
    fc2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    fc32:	4604      	mov	r4, r0
    fc34:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    fc36:	b9c3      	cbnz	r3, fc6a <bt_smp_recv+0x3e>
		BT_ERR("Too small SMP PDU received");
    fc38:	4a57      	ldr	r2, [pc, #348]	; (fd98 <bt_smp_recv+0x16c>)
    fc3a:	6812      	ldr	r2, [r2, #0]
    fc3c:	0752      	lsls	r2, r2, #29
    fc3e:	d010      	beq.n	fc62 <bt_smp_recv+0x36>
    fc40:	2101      	movs	r1, #1
    fc42:	f04f 0200 	mov.w	r2, #0
    fc46:	f361 0202 	bfi	r2, r1, #0, #3
    fc4a:	f363 02c5 	bfi	r2, r3, #3, #3
    fc4e:	4953      	ldr	r1, [pc, #332]	; (fd9c <bt_smp_recv+0x170>)
    fc50:	4b53      	ldr	r3, [pc, #332]	; (fda0 <bt_smp_recv+0x174>)
    fc52:	4854      	ldr	r0, [pc, #336]	; (fda4 <bt_smp_recv+0x178>)
    fc54:	1a5b      	subs	r3, r3, r1
    fc56:	08db      	lsrs	r3, r3, #3
    fc58:	f363 128f 	bfi	r2, r3, #6, #10
    fc5c:	4952      	ldr	r1, [pc, #328]	; (fda8 <bt_smp_recv+0x17c>)
    fc5e:	f7f2 fa45 	bl	20ec <log_1>
}
    fc62:	2000      	movs	r0, #0
    fc64:	b002      	add	sp, #8
    fc66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_smp_hdr *hdr = (void *)buf->data;
    fc6a:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    fc6c:	2101      	movs	r1, #1
	struct bt_smp_hdr *hdr = (void *)buf->data;
    fc6e:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    fc72:	f00f fb9d 	bl	1f3b0 <net_buf_simple_pull>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    fc76:	2104      	movs	r1, #4
    fc78:	f104 0098 	add.w	r0, r4, #152	; 0x98
    fc7c:	f7fe ff16 	bl	eaac <atomic_test_bit>
    fc80:	4680      	mov	r8, r0
    fc82:	b1c0      	cbz	r0, fcb6 <bt_smp_recv+0x8a>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    fc84:	4b44      	ldr	r3, [pc, #272]	; (fd98 <bt_smp_recv+0x16c>)
    fc86:	681b      	ldr	r3, [r3, #0]
    fc88:	f003 0307 	and.w	r3, r3, #7
    fc8c:	2b01      	cmp	r3, #1
    fc8e:	d9e8      	bls.n	fc62 <bt_smp_recv+0x36>
    fc90:	2202      	movs	r2, #2
    fc92:	f04f 0300 	mov.w	r3, #0
    fc96:	f362 0302 	bfi	r3, r2, #0, #3
    fc9a:	4940      	ldr	r1, [pc, #256]	; (fd9c <bt_smp_recv+0x170>)
    fc9c:	4a40      	ldr	r2, [pc, #256]	; (fda0 <bt_smp_recv+0x174>)
    fc9e:	4843      	ldr	r0, [pc, #268]	; (fdac <bt_smp_recv+0x180>)
    fca0:	1a52      	subs	r2, r2, r1
    fca2:	08d2      	lsrs	r2, r2, #3
    fca4:	f36f 03c5 	bfc	r3, #3, #3
    fca8:	f362 138f 	bfi	r3, r2, #6, #10
    fcac:	493e      	ldr	r1, [pc, #248]	; (fda8 <bt_smp_recv+0x17c>)
    fcae:	782a      	ldrb	r2, [r5, #0]
    fcb0:	f7f2 fa30 	bl	2114 <log_2>
    fcb4:	e7d5      	b.n	fc62 <bt_smp_recv+0x36>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    fcb6:	782a      	ldrb	r2, [r5, #0]
    fcb8:	2a0d      	cmp	r2, #13
    fcba:	d803      	bhi.n	fcc4 <bt_smp_recv+0x98>
    fcbc:	4f3c      	ldr	r7, [pc, #240]	; (fdb0 <bt_smp_recv+0x184>)
    fcbe:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
    fcc2:	b9db      	cbnz	r3, fcfc <bt_smp_recv+0xd0>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    fcc4:	4b34      	ldr	r3, [pc, #208]	; (fd98 <bt_smp_recv+0x16c>)
    fcc6:	681b      	ldr	r3, [r3, #0]
    fcc8:	f003 0307 	and.w	r3, r3, #7
    fccc:	2b01      	cmp	r3, #1
    fcce:	d910      	bls.n	fcf2 <bt_smp_recv+0xc6>
    fcd0:	2102      	movs	r1, #2
    fcd2:	f04f 0300 	mov.w	r3, #0
    fcd6:	f361 0302 	bfi	r3, r1, #0, #3
    fcda:	4831      	ldr	r0, [pc, #196]	; (fda0 <bt_smp_recv+0x174>)
    fcdc:	492f      	ldr	r1, [pc, #188]	; (fd9c <bt_smp_recv+0x170>)
    fcde:	1a40      	subs	r0, r0, r1
    fce0:	08c0      	lsrs	r0, r0, #3
    fce2:	f36f 03c5 	bfc	r3, #3, #3
    fce6:	f360 138f 	bfi	r3, r0, #6, #10
    fcea:	492f      	ldr	r1, [pc, #188]	; (fda8 <bt_smp_recv+0x17c>)
    fcec:	4831      	ldr	r0, [pc, #196]	; (fdb4 <bt_smp_recv+0x188>)
    fcee:	f7f2 fa11 	bl	2114 <log_2>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    fcf2:	2107      	movs	r1, #7
		smp_error(smp, err);
    fcf4:	4620      	mov	r0, r4
    fcf6:	f7ff ff3f 	bl	fb78 <smp_error>
    fcfa:	e7b2      	b.n	fc62 <bt_smp_recv+0x36>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    fcfc:	4611      	mov	r1, r2
    fcfe:	f104 0094 	add.w	r0, r4, #148	; 0x94
    fd02:	f7ff fb33 	bl	f36c <atomic_test_and_clear_bit>
    fd06:	782a      	ldrb	r2, [r5, #0]
    fd08:	b9d8      	cbnz	r0, fd42 <bt_smp_recv+0x116>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    fd0a:	4b23      	ldr	r3, [pc, #140]	; (fd98 <bt_smp_recv+0x16c>)
    fd0c:	681b      	ldr	r3, [r3, #0]
    fd0e:	f003 0307 	and.w	r3, r3, #7
    fd12:	2b01      	cmp	r3, #1
    fd14:	d910      	bls.n	fd38 <bt_smp_recv+0x10c>
    fd16:	2102      	movs	r1, #2
    fd18:	f04f 0300 	mov.w	r3, #0
    fd1c:	f361 0302 	bfi	r3, r1, #0, #3
    fd20:	f360 03c5 	bfi	r3, r0, #3, #3
    fd24:	491e      	ldr	r1, [pc, #120]	; (fda0 <bt_smp_recv+0x174>)
    fd26:	481d      	ldr	r0, [pc, #116]	; (fd9c <bt_smp_recv+0x170>)
    fd28:	1a09      	subs	r1, r1, r0
    fd2a:	08c9      	lsrs	r1, r1, #3
    fd2c:	f361 138f 	bfi	r3, r1, #6, #10
    fd30:	4821      	ldr	r0, [pc, #132]	; (fdb8 <bt_smp_recv+0x18c>)
    fd32:	491d      	ldr	r1, [pc, #116]	; (fda8 <bt_smp_recv+0x17c>)
    fd34:	f7f2 f9ee 	bl	2114 <log_2>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    fd38:	782b      	ldrb	r3, [r5, #0]
    fd3a:	2b05      	cmp	r3, #5
    fd3c:	d091      	beq.n	fc62 <bt_smp_recv+0x36>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    fd3e:	2108      	movs	r1, #8
    fd40:	e7d8      	b.n	fcf4 <bt_smp_recv+0xc8>
	if (buf->len != handlers[hdr->code].expect_len) {
    fd42:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    fd46:	89b0      	ldrh	r0, [r6, #12]
    fd48:	791b      	ldrb	r3, [r3, #4]
    fd4a:	4283      	cmp	r3, r0
    fd4c:	d01a      	beq.n	fd84 <bt_smp_recv+0x158>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    fd4e:	4b12      	ldr	r3, [pc, #72]	; (fd98 <bt_smp_recv+0x16c>)
    fd50:	681b      	ldr	r3, [r3, #0]
    fd52:	075b      	lsls	r3, r3, #29
    fd54:	d014      	beq.n	fd80 <bt_smp_recv+0x154>
    fd56:	2301      	movs	r3, #1
    fd58:	f04f 0100 	mov.w	r1, #0
    fd5c:	f363 0102 	bfi	r1, r3, #0, #3
    fd60:	4d0e      	ldr	r5, [pc, #56]	; (fd9c <bt_smp_recv+0x170>)
    fd62:	4b0f      	ldr	r3, [pc, #60]	; (fda0 <bt_smp_recv+0x174>)
    fd64:	1b5b      	subs	r3, r3, r5
    fd66:	08db      	lsrs	r3, r3, #3
    fd68:	f368 01c5 	bfi	r1, r8, #3, #3
    fd6c:	f363 118f 	bfi	r1, r3, #6, #10
    fd70:	f8ad 1000 	strh.w	r1, [sp]
    fd74:	4613      	mov	r3, r2
    fd76:	490c      	ldr	r1, [pc, #48]	; (fda8 <bt_smp_recv+0x17c>)
    fd78:	4602      	mov	r2, r0
    fd7a:	4810      	ldr	r0, [pc, #64]	; (fdbc <bt_smp_recv+0x190>)
    fd7c:	f7f2 f9e2 	bl	2144 <log_3>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    fd80:	210a      	movs	r1, #10
    fd82:	e7b7      	b.n	fcf4 <bt_smp_recv+0xc8>
	err = handlers[hdr->code].func(smp, buf);
    fd84:	4631      	mov	r1, r6
    fd86:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
    fd8a:	4620      	mov	r0, r4
    fd8c:	4798      	blx	r3
	if (err) {
    fd8e:	4601      	mov	r1, r0
    fd90:	2800      	cmp	r0, #0
    fd92:	f43f af66 	beq.w	fc62 <bt_smp_recv+0x36>
    fd96:	e7ad      	b.n	fcf4 <bt_smp_recv+0xc8>
    fd98:	2000e248 	.word	0x2000e248
    fd9c:	0002ef38 	.word	0x0002ef38
    fda0:	0002efd0 	.word	0x0002efd0
    fda4:	000324b5 	.word	0x000324b5
    fda8:	00032376 	.word	0x00032376
    fdac:	000324d4 	.word	0x000324d4
    fdb0:	000325ec 	.word	0x000325ec
    fdb4:	00032509 	.word	0x00032509
    fdb8:	00032527 	.word	0x00032527
    fdbc:	00032022 	.word	0x00032022

0000fdc0 <smp_pairing_failed>:
{
    fdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BT_ERR("reason 0x%x", req->reason);
    fdc2:	4b20      	ldr	r3, [pc, #128]	; (fe44 <smp_pairing_failed+0x84>)
	struct bt_conn *conn = smp->chan.chan.conn;
    fdc4:	6807      	ldr	r7, [r0, #0]
	BT_ERR("reason 0x%x", req->reason);
    fdc6:	681b      	ldr	r3, [r3, #0]
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    fdc8:	688e      	ldr	r6, [r1, #8]
	BT_ERR("reason 0x%x", req->reason);
    fdca:	075b      	lsls	r3, r3, #29
{
    fdcc:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    fdce:	d011      	beq.n	fdf4 <smp_pairing_failed+0x34>
    fdd0:	2201      	movs	r2, #1
    fdd2:	f04f 0300 	mov.w	r3, #0
    fdd6:	f362 0302 	bfi	r3, r2, #0, #3
    fdda:	491b      	ldr	r1, [pc, #108]	; (fe48 <smp_pairing_failed+0x88>)
    fddc:	4a1b      	ldr	r2, [pc, #108]	; (fe4c <smp_pairing_failed+0x8c>)
    fdde:	481c      	ldr	r0, [pc, #112]	; (fe50 <smp_pairing_failed+0x90>)
    fde0:	1a52      	subs	r2, r2, r1
    fde2:	08d2      	lsrs	r2, r2, #3
    fde4:	f36f 03c5 	bfc	r3, #3, #3
    fde8:	f362 138f 	bfi	r3, r2, #6, #10
    fdec:	4919      	ldr	r1, [pc, #100]	; (fe54 <smp_pairing_failed+0x94>)
    fdee:	7832      	ldrb	r2, [r6, #0]
    fdf0:	f7f2 f990 	bl	2114 <log_2>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    fdf4:	f104 0598 	add.w	r5, r4, #152	; 0x98
    fdf8:	2109      	movs	r1, #9
    fdfa:	4628      	mov	r0, r5
    fdfc:	f7ff fab6 	bl	f36c <atomic_test_and_clear_bit>
    fe00:	b190      	cbz	r0, fe28 <smp_pairing_failed+0x68>
		if (bt_auth && bt_auth->cancel) {
    fe02:	4b15      	ldr	r3, [pc, #84]	; (fe58 <smp_pairing_failed+0x98>)
    fe04:	681b      	ldr	r3, [r3, #0]
    fe06:	b9b3      	cbnz	r3, fe36 <smp_pairing_failed+0x76>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    fe08:	2102      	movs	r1, #2
    fe0a:	4628      	mov	r0, r5
    fe0c:	f7fe fe4e 	bl	eaac <atomic_test_bit>
    fe10:	b120      	cbz	r0, fe1c <smp_pairing_failed+0x5c>
	    smp->chan.chan.conn->le.keys) {
    fe12:	6823      	ldr	r3, [r4, #0]
    fe14:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    fe16:	b108      	cbz	r0, fe1c <smp_pairing_failed+0x5c>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    fe18:	f001 fa36 	bl	11288 <bt_keys_clear>
	smp_pairing_complete(smp, req->reason);
    fe1c:	4620      	mov	r0, r4
    fe1e:	7831      	ldrb	r1, [r6, #0]
    fe20:	f7ff fe88 	bl	fb34 <smp_pairing_complete>
}
    fe24:	2000      	movs	r0, #0
    fe26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    fe28:	210a      	movs	r1, #10
    fe2a:	4628      	mov	r0, r5
    fe2c:	f7ff fa9e 	bl	f36c <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    fe30:	2800      	cmp	r0, #0
    fe32:	d1e6      	bne.n	fe02 <smp_pairing_failed+0x42>
    fe34:	e7e8      	b.n	fe08 <smp_pairing_failed+0x48>
		if (bt_auth && bt_auth->cancel) {
    fe36:	68db      	ldr	r3, [r3, #12]
    fe38:	2b00      	cmp	r3, #0
    fe3a:	d0e5      	beq.n	fe08 <smp_pairing_failed+0x48>
			bt_auth->cancel(conn);
    fe3c:	4638      	mov	r0, r7
    fe3e:	4798      	blx	r3
    fe40:	e7e2      	b.n	fe08 <smp_pairing_failed+0x48>
    fe42:	bf00      	nop
    fe44:	2000e248 	.word	0x2000e248
    fe48:	0002ef38 	.word	0x0002ef38
    fe4c:	0002efd0 	.word	0x0002efd0
    fe50:	00032759 	.word	0x00032759
    fe54:	0003230b 	.word	0x0003230b
    fe58:	20003670 	.word	0x20003670

0000fe5c <smp_timeout>:
{
    fe5c:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("SMP Timeout");
    fe5e:	4b16      	ldr	r3, [pc, #88]	; (feb8 <smp_timeout+0x5c>)
    fe60:	681b      	ldr	r3, [r3, #0]
    fe62:	075b      	lsls	r3, r3, #29
{
    fe64:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    fe66:	f5a0 75ba 	sub.w	r5, r0, #372	; 0x174
	BT_ERR("SMP Timeout");
    fe6a:	d010      	beq.n	fe8e <smp_timeout+0x32>
    fe6c:	2301      	movs	r3, #1
    fe6e:	f04f 0200 	mov.w	r2, #0
    fe72:	f363 0202 	bfi	r2, r3, #0, #3
    fe76:	4911      	ldr	r1, [pc, #68]	; (febc <smp_timeout+0x60>)
    fe78:	4b11      	ldr	r3, [pc, #68]	; (fec0 <smp_timeout+0x64>)
    fe7a:	4812      	ldr	r0, [pc, #72]	; (fec4 <smp_timeout+0x68>)
    fe7c:	1a5b      	subs	r3, r3, r1
    fe7e:	f36f 02c5 	bfc	r2, #3, #3
    fe82:	08db      	lsrs	r3, r3, #3
    fe84:	f363 128f 	bfi	r2, r3, #6, #10
    fe88:	490f      	ldr	r1, [pc, #60]	; (fec8 <smp_timeout+0x6c>)
    fe8a:	f7f2 f92f 	bl	20ec <log_1>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    fe8e:	3cdc      	subs	r4, #220	; 0xdc
    fe90:	2102      	movs	r1, #2
    fe92:	4620      	mov	r0, r4
    fe94:	f7fe fe0a 	bl	eaac <atomic_test_bit>
    fe98:	b120      	cbz	r0, fea4 <smp_timeout+0x48>
	    smp->chan.chan.conn->le.keys) {
    fe9a:	682b      	ldr	r3, [r5, #0]
    fe9c:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    fe9e:	b108      	cbz	r0, fea4 <smp_timeout+0x48>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    fea0:	f001 f9f2 	bl	11288 <bt_keys_clear>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    fea4:	4628      	mov	r0, r5
    fea6:	2108      	movs	r1, #8
    fea8:	f7ff fe44 	bl	fb34 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    feac:	4620      	mov	r0, r4
    feae:	2104      	movs	r1, #4
}
    feb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    feb4:	f7ff ba72 	b.w	f39c <atomic_set_bit>
    feb8:	2000e248 	.word	0x2000e248
    febc:	0002ef38 	.word	0x0002ef38
    fec0:	0002efd0 	.word	0x0002efd0
    fec4:	00032823 	.word	0x00032823
    fec8:	0003227a 	.word	0x0003227a

0000fecc <smp_signing_info>:
{
    fecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fece:	4605      	mov	r5, r0
    fed0:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    fed2:	f850 4b98 	ldr.w	r4, [r0], #152
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fed6:	210b      	movs	r1, #11
    fed8:	f7fe fde8 	bl	eaac <atomic_test_bit>
    fedc:	b358      	cbz	r0, ff36 <smp_signing_info+0x6a>
					&conn->le.dst);
    fede:	f104 0648 	add.w	r6, r4, #72	; 0x48
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    fee2:	4632      	mov	r2, r6
    fee4:	7a21      	ldrb	r1, [r4, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
    fee6:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    fee8:	2010      	movs	r0, #16
    feea:	f001 f96f 	bl	111cc <bt_keys_get_type>
		if (!keys) {
    feee:	b9e8      	cbnz	r0, ff2c <smp_signing_info+0x60>
			BT_ERR("Unable to get keys for %s",
    fef0:	4b1d      	ldr	r3, [pc, #116]	; (ff68 <smp_signing_info+0x9c>)
    fef2:	681b      	ldr	r3, [r3, #0]
    fef4:	075b      	lsls	r3, r3, #29
    fef6:	d017      	beq.n	ff28 <smp_signing_info+0x5c>
    fef8:	2301      	movs	r3, #1
    fefa:	f04f 0400 	mov.w	r4, #0
    fefe:	f363 0402 	bfi	r4, r3, #0, #3
    ff02:	4a1a      	ldr	r2, [pc, #104]	; (ff6c <smp_signing_info+0xa0>)
    ff04:	4b1a      	ldr	r3, [pc, #104]	; (ff70 <smp_signing_info+0xa4>)
    ff06:	1ad2      	subs	r2, r2, r3
    ff08:	08d2      	lsrs	r2, r2, #3
    ff0a:	f360 04c5 	bfi	r4, r0, #3, #3
    ff0e:	4630      	mov	r0, r6
    ff10:	f362 148f 	bfi	r4, r2, #6, #10
    ff14:	f7f7 fbb2 	bl	767c <bt_addr_le_str_real>
    ff18:	f7f2 fa7a 	bl	2410 <log_strdup>
    ff1c:	4623      	mov	r3, r4
    ff1e:	4602      	mov	r2, r0
    ff20:	4914      	ldr	r1, [pc, #80]	; (ff74 <smp_signing_info+0xa8>)
    ff22:	4815      	ldr	r0, [pc, #84]	; (ff78 <smp_signing_info+0xac>)
    ff24:	f7f2 f8f6 	bl	2114 <log_2>
			return BT_SMP_ERR_UNSPECIFIED;
    ff28:	2008      	movs	r0, #8
}
    ff2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
    ff2c:	2210      	movs	r2, #16
    ff2e:	4639      	mov	r1, r7
    ff30:	3050      	adds	r0, #80	; 0x50
    ff32:	f7f6 fea9 	bl	6c88 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    ff36:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    ff3a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    ff3e:	f885 3172 	strb.w	r3, [r5, #370]	; 0x172
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ff42:	78e2      	ldrb	r2, [r4, #3]
    ff44:	b91a      	cbnz	r2, ff4e <smp_signing_info+0x82>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    ff46:	b913      	cbnz	r3, ff4e <smp_signing_info+0x82>
		bt_smp_distribute_keys(smp);
    ff48:	4628      	mov	r0, r5
    ff4a:	f7ff f8f9 	bl	f140 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    ff4e:	f8d5 4170 	ldr.w	r4, [r5, #368]	; 0x170
    ff52:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    ff56:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    ff5a:	b91c      	cbnz	r4, ff64 <smp_signing_info+0x98>
		smp_pairing_complete(smp, 0);
    ff5c:	4621      	mov	r1, r4
    ff5e:	4628      	mov	r0, r5
    ff60:	f7ff fde8 	bl	fb34 <smp_pairing_complete>
	return 0;
    ff64:	2000      	movs	r0, #0
    ff66:	e7e0      	b.n	ff2a <smp_signing_info+0x5e>
    ff68:	2000e248 	.word	0x2000e248
    ff6c:	0002efd0 	.word	0x0002efd0
    ff70:	0002ef38 	.word	0x0002ef38
    ff74:	00032341 	.word	0x00032341
    ff78:	0003273b 	.word	0x0003273b

0000ff7c <smp_master_ident>:
{
    ff7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff80:	460b      	mov	r3, r1
    ff82:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ff84:	210b      	movs	r1, #11
	struct bt_conn *conn = smp->chan.chan.conn;
    ff86:	f850 6b98 	ldr.w	r6, [r0], #152
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ff8a:	f7fe fd8f 	bl	eaac <atomic_test_bit>
    ff8e:	2800      	cmp	r0, #0
    ff90:	d039      	beq.n	10006 <__kernel_ram_size+0x6>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    ff92:	f106 0848 	add.w	r8, r6, #72	; 0x48
    ff96:	4642      	mov	r2, r8
    ff98:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    ff9a:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    ff9c:	2004      	movs	r0, #4
    ff9e:	f001 f915 	bl	111cc <bt_keys_get_type>
		if (!keys) {
    ffa2:	4604      	mov	r4, r0
    ffa4:	b9f0      	cbnz	r0, ffe4 <smp_master_ident+0x68>
			BT_ERR("Unable to get keys for %s",
    ffa6:	4b29      	ldr	r3, [pc, #164]	; (1004c <__kernel_ram_size+0x4c>)
    ffa8:	681b      	ldr	r3, [r3, #0]
    ffaa:	0759      	lsls	r1, r3, #29
    ffac:	d017      	beq.n	ffde <smp_master_ident+0x62>
    ffae:	2301      	movs	r3, #1
    ffb0:	f04f 0500 	mov.w	r5, #0
    ffb4:	f363 0502 	bfi	r5, r3, #0, #3
    ffb8:	4a25      	ldr	r2, [pc, #148]	; (10050 <__kernel_ram_size+0x50>)
    ffba:	4b26      	ldr	r3, [pc, #152]	; (10054 <__kernel_ram_size+0x54>)
    ffbc:	1ad2      	subs	r2, r2, r3
    ffbe:	08d2      	lsrs	r2, r2, #3
    ffc0:	f360 05c5 	bfi	r5, r0, #3, #3
    ffc4:	4640      	mov	r0, r8
    ffc6:	f362 158f 	bfi	r5, r2, #6, #10
    ffca:	f7f7 fb57 	bl	767c <bt_addr_le_str_real>
    ffce:	f7f2 fa1f 	bl	2410 <log_strdup>
    ffd2:	462b      	mov	r3, r5
    ffd4:	4602      	mov	r2, r0
    ffd6:	4920      	ldr	r1, [pc, #128]	; (10058 <__kernel_ram_size+0x58>)
    ffd8:	4820      	ldr	r0, [pc, #128]	; (1005c <__kernel_ram_size+0x5c>)
    ffda:	f7f2 f89b 	bl	2114 <log_2>
			return BT_SMP_ERR_UNSPECIFIED;
    ffde:	2008      	movs	r0, #8
}
    ffe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    ffe4:	2202      	movs	r2, #2
    ffe6:	4639      	mov	r1, r7
    ffe8:	3014      	adds	r0, #20
    ffea:	f7f6 fe4d 	bl	6c88 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    ffee:	2208      	movs	r2, #8
    fff0:	1cb9      	adds	r1, r7, #2
    fff2:	f104 000c 	add.w	r0, r4, #12
    fff6:	f7f6 fe47 	bl	6c88 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    fffa:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    fffe:	f023 0301 	bic.w	r3, r3, #1
   10002:	f885 3172 	strb.w	r3, [r5, #370]	; 0x172
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   10006:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
   1000a:	079a      	lsls	r2, r3, #30
   1000c:	d519      	bpl.n	10042 <__kernel_ram_size+0x42>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1000e:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   10010:	f105 0094 	add.w	r0, r5, #148	; 0x94
   10014:	f7ff f9c2 	bl	f39c <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10018:	78f3      	ldrb	r3, [r6, #3]
   1001a:	b92b      	cbnz	r3, 10028 <__kernel_ram_size+0x28>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
   1001c:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
   10020:	b913      	cbnz	r3, 10028 <__kernel_ram_size+0x28>
		bt_smp_distribute_keys(smp);
   10022:	4628      	mov	r0, r5
   10024:	f7ff f88c 	bl	f140 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
   10028:	f8d5 4170 	ldr.w	r4, [r5, #368]	; 0x170
   1002c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   10030:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
   10034:	b91c      	cbnz	r4, 1003e <__kernel_ram_size+0x3e>
		smp_pairing_complete(smp, 0);
   10036:	4621      	mov	r1, r4
   10038:	4628      	mov	r0, r5
   1003a:	f7ff fd7b 	bl	fb34 <smp_pairing_complete>
	return 0;
   1003e:	2000      	movs	r0, #0
   10040:	e7ce      	b.n	ffe0 <smp_master_ident+0x64>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   10042:	075b      	lsls	r3, r3, #29
   10044:	d5e8      	bpl.n	10018 <__kernel_ram_size+0x18>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   10046:	210a      	movs	r1, #10
   10048:	e7e2      	b.n	10010 <__kernel_ram_size+0x10>
   1004a:	bf00      	nop
   1004c:	2000e248 	.word	0x2000e248
   10050:	0002efd0 	.word	0x0002efd0
   10054:	0002ef38 	.word	0x0002ef38
   10058:	000322ed 	.word	0x000322ed
   1005c:	0003273b 	.word	0x0003273b

00010060 <smp_check_complete.part.13>:
static void smp_check_complete(struct bt_conn *conn, u8_t dist_complete)
   10060:	b510      	push	{r4, lr}
   10062:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   10064:	2106      	movs	r1, #6
   10066:	f7fb fe40 	bl	bcea <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   1006a:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
   1006e:	ea21 0104 	bic.w	r1, r1, r4
   10072:	f880 1171 	strb.w	r1, [r0, #369]	; 0x171
		if (!smp->local_dist && !smp->remote_dist) {
   10076:	f8d0 1170 	ldr.w	r1, [r0, #368]	; 0x170
   1007a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1007e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   10082:	b919      	cbnz	r1, 1008c <smp_check_complete.part.13+0x2c>
}
   10084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   10088:	f7ff bd54 	b.w	fb34 <smp_pairing_complete>
}
   1008c:	bd10      	pop	{r4, pc}

0001008e <sign_info_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   1008e:	7883      	ldrb	r3, [r0, #2]
   10090:	b913      	cbnz	r3, 10098 <sign_info_sent+0xa>
   10092:	2104      	movs	r1, #4
   10094:	f7ff bfe4 	b.w	10060 <smp_check_complete.part.13>
}
   10098:	4770      	bx	lr

0001009a <bt_smp_encrypt_change>:
{
   1009a:	b570      	push	{r4, r5, r6, lr}
   1009c:	4604      	mov	r4, r0
	if (hci_status) {
   1009e:	2900      	cmp	r1, #0
   100a0:	d158      	bne.n	10154 <bt_smp_encrypt_change+0xba>
	struct bt_conn *conn = chan->conn;
   100a2:	6806      	ldr	r6, [r0, #0]
	if (!conn->encrypt) {
   100a4:	7af3      	ldrb	r3, [r6, #11]
   100a6:	2b00      	cmp	r3, #0
   100a8:	d054      	beq.n	10154 <bt_smp_encrypt_change+0xba>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   100aa:	f100 0598 	add.w	r5, r0, #152	; 0x98
   100ae:	2103      	movs	r1, #3
   100b0:	4628      	mov	r0, r5
   100b2:	f7fe fcfb 	bl	eaac <atomic_test_bit>
   100b6:	b920      	cbnz	r0, 100c2 <bt_smp_encrypt_change+0x28>
		smp_reset(smp);
   100b8:	4620      	mov	r0, r4
}
   100ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_reset(smp);
   100be:	f7ff bd09 	b.w	fad4 <smp_reset>
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   100c2:	2101      	movs	r1, #1
   100c4:	4628      	mov	r0, r5
   100c6:	f7fe feab 	bl	ee20 <atomic_clear_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   100ca:	2105      	movs	r1, #5
   100cc:	f7fe fcee 	bl	eaac <atomic_test_bit>
   100d0:	b1b8      	cbz	r0, 10102 <bt_smp_encrypt_change+0x68>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   100d2:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
   100d6:	071b      	lsls	r3, r3, #28
   100d8:	d507      	bpl.n	100ea <bt_smp_encrypt_change+0x50>
   100da:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
   100de:	0718      	lsls	r0, r3, #28
   100e0:	d503      	bpl.n	100ea <bt_smp_encrypt_change+0x50>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   100e2:	210f      	movs	r1, #15
   100e4:	4628      	mov	r0, r5
   100e6:	f7ff f959 	bl	f39c <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   100ea:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
   100ee:	f023 0308 	bic.w	r3, r3, #8
   100f2:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   100f6:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
   100fa:	f023 0308 	bic.w	r3, r3, #8
   100fe:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   10102:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
   10106:	07d9      	lsls	r1, r3, #31
   10108:	d51c      	bpl.n	10144 <bt_smp_encrypt_change+0xaa>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1010a:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1010c:	f104 0094 	add.w	r0, r4, #148	; 0x94
   10110:	f7ff f944 	bl	f39c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   10114:	2102      	movs	r1, #2
   10116:	4628      	mov	r0, r5
   10118:	f7ff f940 	bl	f39c <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1011c:	78f3      	ldrb	r3, [r6, #3]
   1011e:	b913      	cbnz	r3, 10126 <bt_smp_encrypt_change+0x8c>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
   10120:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
   10124:	b9b3      	cbnz	r3, 10154 <bt_smp_encrypt_change+0xba>
	bt_smp_distribute_keys(smp);
   10126:	4620      	mov	r0, r4
   10128:	f7ff f80a 	bl	f140 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
   1012c:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
   10130:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   10134:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   10138:	b961      	cbnz	r1, 10154 <bt_smp_encrypt_change+0xba>
		smp_pairing_complete(smp, 0);
   1013a:	4620      	mov	r0, r4
}
   1013c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_pairing_complete(smp, 0);
   10140:	f7ff bcf8 	b.w	fb34 <smp_pairing_complete>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   10144:	079a      	lsls	r2, r3, #30
   10146:	d501      	bpl.n	1014c <bt_smp_encrypt_change+0xb2>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   10148:	2108      	movs	r1, #8
   1014a:	e7df      	b.n	1010c <bt_smp_encrypt_change+0x72>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1014c:	075b      	lsls	r3, r3, #29
   1014e:	d5e1      	bpl.n	10114 <bt_smp_encrypt_change+0x7a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   10150:	210a      	movs	r1, #10
   10152:	e7db      	b.n	1010c <bt_smp_encrypt_change+0x72>
}
   10154:	bd70      	pop	{r4, r5, r6, pc}
	...

00010158 <bt_smp_connected>:
{
   10158:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
   1015a:	4905      	ldr	r1, [pc, #20]	; (10170 <bt_smp_connected+0x18>)
{
   1015c:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
   1015e:	f500 70ba 	add.w	r0, r0, #372	; 0x174
   10162:	f01e fa7b 	bl	2e65c <k_delayed_work_init>
	smp_reset(smp);
   10166:	4620      	mov	r0, r4
}
   10168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   1016c:	f7ff bcb2 	b.w	fad4 <smp_reset>
   10170:	0000fe5d 	.word	0x0000fe5d

00010174 <ident_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   10174:	7883      	ldrb	r3, [r0, #2]
   10176:	b913      	cbnz	r3, 1017e <ident_sent+0xa>
   10178:	2101      	movs	r1, #1
   1017a:	f7ff bf71 	b.w	10060 <smp_check_complete.part.13>
}
   1017e:	4770      	bx	lr

00010180 <smp_c1>:
{
   10180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10184:	b089      	sub	sp, #36	; 0x24
   10186:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   1018a:	461f      	mov	r7, r3
	p1[0] = ia->type;
   1018c:	f898 3000 	ldrb.w	r3, [r8]
   10190:	f88d 3000 	strb.w	r3, [sp]
{
   10194:	4606      	mov	r6, r0
	p1[1] = ra->type;
   10196:	f899 3000 	ldrb.w	r3, [r9]
   1019a:	f88d 3001 	strb.w	r3, [sp, #1]
{
   1019e:	460c      	mov	r4, r1
	memcpy(p1 + 2, preq, 7);
   101a0:	f10d 0002 	add.w	r0, sp, #2
{
   101a4:	4611      	mov	r1, r2
	memcpy(p1 + 2, preq, 7);
   101a6:	2207      	movs	r2, #7
{
   101a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
   101aa:	f7f6 fd6d 	bl	6c88 <memcpy>
	memcpy(p1 + 9, pres, 7);
   101ae:	2207      	movs	r2, #7
   101b0:	4639      	mov	r1, r7
   101b2:	f10d 0009 	add.w	r0, sp, #9
   101b6:	f7f6 fd67 	bl	6c88 <memcpy>
   101ba:	2300      	movs	r3, #0
		*r++ = *p++ ^ *q++;
   101bc:	5ce2      	ldrb	r2, [r4, r3]
   101be:	f81d 1003 	ldrb.w	r1, [sp, r3]
   101c2:	404a      	eors	r2, r1
   101c4:	54ea      	strb	r2, [r5, r3]
   101c6:	3301      	adds	r3, #1
	while (len--) {
   101c8:	2b10      	cmp	r3, #16
   101ca:	d1f7      	bne.n	101bc <smp_c1+0x3c>
	err = bt_encrypt_le(k, enc_data, enc_data);
   101cc:	462a      	mov	r2, r5
   101ce:	4629      	mov	r1, r5
   101d0:	4630      	mov	r0, r6
   101d2:	f00c fe13 	bl	1cdfc <bt_encrypt_le>
	if (err) {
   101d6:	4604      	mov	r4, r0
   101d8:	bb10      	cbnz	r0, 10220 <smp_c1+0xa0>
	memcpy(p2, ra->a.val, 6);
   101da:	af04      	add	r7, sp, #16
   101dc:	2206      	movs	r2, #6
   101de:	f109 0101 	add.w	r1, r9, #1
   101e2:	4638      	mov	r0, r7
   101e4:	f7f6 fd50 	bl	6c88 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   101e8:	2206      	movs	r2, #6
   101ea:	f108 0101 	add.w	r1, r8, #1
   101ee:	f10d 0016 	add.w	r0, sp, #22
   101f2:	f7f6 fd49 	bl	6c88 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   101f6:	2204      	movs	r2, #4
   101f8:	4621      	mov	r1, r4
   101fa:	a807      	add	r0, sp, #28
   101fc:	f7f6 fd71 	bl	6ce2 <memset>
   10200:	462b      	mov	r3, r5
		*r++ = *p++ ^ *q++;
   10202:	f813 2b01 	ldrb.w	r2, [r3], #1
   10206:	5d39      	ldrb	r1, [r7, r4]
   10208:	3401      	adds	r4, #1
   1020a:	404a      	eors	r2, r1
	while (len--) {
   1020c:	2c10      	cmp	r4, #16
		*r++ = *p++ ^ *q++;
   1020e:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   10212:	d1f6      	bne.n	10202 <smp_c1+0x82>
	return bt_encrypt_le(k, enc_data, enc_data);
   10214:	462a      	mov	r2, r5
   10216:	4629      	mov	r1, r5
   10218:	4630      	mov	r0, r6
   1021a:	f00c fdef 	bl	1cdfc <bt_encrypt_le>
   1021e:	4604      	mov	r4, r0
}
   10220:	4620      	mov	r0, r4
   10222:	b009      	add	sp, #36	; 0x24
   10224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00010228 <legacy_send_pairing_confirm>:
{
   10228:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1022a:	6804      	ldr	r4, [r0, #0]
{
   1022c:	4605      	mov	r5, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1022e:	2003      	movs	r0, #3
   10230:	f7fe fe88 	bl	ef44 <smp_create_pdu.isra.6>
	if (!buf) {
   10234:	4606      	mov	r6, r0
   10236:	b1c0      	cbz	r0, 1026a <legacy_send_pairing_confirm+0x42>
	req = net_buf_add(buf, sizeof(*req));
   10238:	2110      	movs	r1, #16
   1023a:	3008      	adds	r0, #8
   1023c:	f00f f868 	bl	1f310 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   10240:	f104 0356 	add.w	r3, r4, #86	; 0x56
   10244:	344f      	adds	r4, #79	; 0x4f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   10246:	9002      	str	r0, [sp, #8]
   10248:	9301      	str	r3, [sp, #4]
   1024a:	9400      	str	r4, [sp, #0]
   1024c:	f105 03a4 	add.w	r3, r5, #164	; 0xa4
   10250:	f105 029d 	add.w	r2, r5, #157	; 0x9d
   10254:	f105 01bb 	add.w	r1, r5, #187	; 0xbb
   10258:	f105 00db 	add.w	r0, r5, #219	; 0xdb
   1025c:	f7ff ff90 	bl	10180 <smp_c1>
   10260:	4604      	mov	r4, r0
   10262:	b120      	cbz	r0, 1026e <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
   10264:	4630      	mov	r0, r6
   10266:	f00e fff5 	bl	1f254 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1026a:	2008      	movs	r0, #8
   1026c:	e00a      	b.n	10284 <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL);
   1026e:	4602      	mov	r2, r0
   10270:	4631      	mov	r1, r6
   10272:	4628      	mov	r0, r5
   10274:	f7fe fea4 	bl	efc0 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   10278:	f105 0098 	add.w	r0, r5, #152	; 0x98
   1027c:	4621      	mov	r1, r4
   1027e:	f7fe fdcf 	bl	ee20 <atomic_clear_bit>
	return 0;
   10282:	4620      	mov	r0, r4
}
   10284:	b004      	add	sp, #16
   10286:	bd70      	pop	{r4, r5, r6, pc}

00010288 <legacy_pairing_confirm>:
{
   10288:	b510      	push	{r4, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1028a:	6803      	ldr	r3, [r0, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1028c:	78db      	ldrb	r3, [r3, #3]
{
   1028e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10290:	b94b      	cbnz	r3, 102a6 <legacy_pairing_confirm+0x1e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   10292:	2103      	movs	r1, #3
			atomic_set_bit(&smp->allowed_cmds,
   10294:	f104 0094 	add.w	r0, r4, #148	; 0x94
   10298:	f7ff f880 	bl	f39c <atomic_set_bit>
			return legacy_send_pairing_confirm(smp);
   1029c:	4620      	mov	r0, r4
}
   1029e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return legacy_send_pairing_confirm(smp);
   102a2:	f7ff bfc1 	b.w	10228 <legacy_send_pairing_confirm>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   102a6:	f100 0398 	add.w	r3, r0, #152	; 0x98
   102aa:	2109      	movs	r1, #9
   102ac:	4618      	mov	r0, r3
   102ae:	f7fe fbfd 	bl	eaac <atomic_test_bit>
   102b2:	b908      	cbnz	r0, 102b8 <legacy_pairing_confirm+0x30>
			atomic_set_bit(&smp->allowed_cmds,
   102b4:	2104      	movs	r1, #4
   102b6:	e7ed      	b.n	10294 <legacy_pairing_confirm+0xc>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   102b8:	4618      	mov	r0, r3
   102ba:	2100      	movs	r1, #0
   102bc:	f7ff f86e 	bl	f39c <atomic_set_bit>
}
   102c0:	2000      	movs	r0, #0
   102c2:	bd10      	pop	{r4, pc}

000102c4 <smp_pairing_confirm>:
{
   102c4:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   102c6:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   102c8:	f100 0598 	add.w	r5, r0, #152	; 0x98
{
   102cc:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   102ce:	210a      	movs	r1, #10
   102d0:	4628      	mov	r0, r5
   102d2:	f7fe fda5 	bl	ee20 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   102d6:	2210      	movs	r2, #16
   102d8:	4631      	mov	r1, r6
   102da:	f104 00ab 	add.w	r0, r4, #171	; 0xab
   102de:	f7f6 fcd3 	bl	6c88 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   102e2:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   102e4:	78db      	ldrb	r3, [r3, #3]
   102e6:	b94b      	cbnz	r3, 102fc <smp_pairing_confirm+0x38>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   102e8:	f104 0094 	add.w	r0, r4, #148	; 0x94
   102ec:	2104      	movs	r1, #4
   102ee:	f7ff f855 	bl	f39c <atomic_set_bit>
		return smp_send_pairing_random(smp);
   102f2:	4620      	mov	r0, r4
}
   102f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_random(smp);
   102f8:	f7fe becb 	b.w	f092 <smp_send_pairing_random>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   102fc:	2105      	movs	r1, #5
   102fe:	4628      	mov	r0, r5
   10300:	f7fe fbd4 	bl	eaac <atomic_test_bit>
   10304:	b920      	cbnz	r0, 10310 <smp_pairing_confirm+0x4c>
		return legacy_pairing_confirm(smp);
   10306:	4620      	mov	r0, r4
}
   10308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1030c:	f7ff bfbc 	b.w	10288 <legacy_pairing_confirm>
	switch (smp->method) {
   10310:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
   10314:	2b01      	cmp	r3, #1
   10316:	d00b      	beq.n	10330 <smp_pairing_confirm+0x6c>
   10318:	2b02      	cmp	r3, #2
   1031a:	d115      	bne.n	10348 <smp_pairing_confirm+0x84>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1031c:	f104 0094 	add.w	r0, r4, #148	; 0x94
   10320:	2104      	movs	r1, #4
   10322:	f7ff f83b 	bl	f39c <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   10326:	4620      	mov	r0, r4
}
   10328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1032c:	f7fe beca 	b.w	f0c4 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   10330:	2109      	movs	r1, #9
   10332:	4628      	mov	r0, r5
   10334:	f7fe fbba 	bl	eaac <atomic_test_bit>
   10338:	2800      	cmp	r0, #0
   1033a:	d0ef      	beq.n	1031c <smp_pairing_confirm+0x58>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1033c:	4628      	mov	r0, r5
   1033e:	2100      	movs	r1, #0
   10340:	f7ff f82c 	bl	f39c <atomic_set_bit>
			return 0;
   10344:	2000      	movs	r0, #0
}
   10346:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   10348:	2008      	movs	r0, #8
   1034a:	e7fc      	b.n	10346 <smp_pairing_confirm+0x82>

0001034c <smp_public_key_slave.part.11>:
static u8_t smp_public_key_slave(struct bt_smp *smp)
   1034c:	b538      	push	{r3, r4, r5, lr}
	switch (smp->method) {
   1034e:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
static u8_t smp_public_key_slave(struct bt_smp *smp)
   10352:	4605      	mov	r5, r0
	switch (smp->method) {
   10354:	2b03      	cmp	r3, #3
   10356:	d832      	bhi.n	103be <smp_public_key_slave.part.11+0x72>
   10358:	e8df f003 	tbb	[pc, r3]
   1035c:	020b2202 	.word	0x020b2202
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   10360:	3094      	adds	r0, #148	; 0x94
   10362:	2104      	movs	r1, #4
   10364:	f7ff f81a 	bl	f39c <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   10368:	4628      	mov	r0, r5
   1036a:	f7fe feab 	bl	f0c4 <smp_send_pairing_confirm>
		if (err) {
   1036e:	b148      	cbz	r0, 10384 <smp_public_key_slave.part.11+0x38>
}
   10370:	bd38      	pop	{r3, r4, r5, pc}
		err = display_passkey(smp);
   10372:	f7ff f83b 	bl	f3ec <display_passkey>
		if (err) {
   10376:	2800      	cmp	r0, #0
   10378:	d1fa      	bne.n	10370 <smp_public_key_slave.part.11+0x24>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1037a:	2103      	movs	r1, #3
   1037c:	f105 0094 	add.w	r0, r5, #148	; 0x94
   10380:	f7ff f80c 	bl	f39c <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
   10384:	490f      	ldr	r1, [pc, #60]	; (103c4 <smp_public_key_slave.part.11+0x78>)
   10386:	f105 00eb 	add.w	r0, r5, #235	; 0xeb
   1038a:	f7fa f9fd 	bl	a788 <bt_dh_key_gen>
   1038e:	4604      	mov	r4, r0
   10390:	b9a8      	cbnz	r0, 103be <smp_public_key_slave.part.11+0x72>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   10392:	f105 0098 	add.w	r0, r5, #152	; 0x98
   10396:	2107      	movs	r1, #7
   10398:	f7ff f800 	bl	f39c <atomic_set_bit>
	return 0;
   1039c:	4620      	mov	r0, r4
   1039e:	e7e7      	b.n	10370 <smp_public_key_slave.part.11+0x24>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   103a0:	2103      	movs	r1, #3
   103a2:	3094      	adds	r0, #148	; 0x94
   103a4:	f7fe fffa 	bl	f39c <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   103a8:	f105 0098 	add.w	r0, r5, #152	; 0x98
   103ac:	2109      	movs	r1, #9
   103ae:	f7fe fff5 	bl	f39c <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   103b2:	4b05      	ldr	r3, [pc, #20]	; (103c8 <smp_public_key_slave.part.11+0x7c>)
   103b4:	6828      	ldr	r0, [r5, #0]
   103b6:	681b      	ldr	r3, [r3, #0]
   103b8:	685b      	ldr	r3, [r3, #4]
   103ba:	4798      	blx	r3
   103bc:	e7e2      	b.n	10384 <smp_public_key_slave.part.11+0x38>
		return BT_SMP_ERR_UNSPECIFIED;
   103be:	2008      	movs	r0, #8
   103c0:	e7d6      	b.n	10370 <smp_public_key_slave.part.11+0x24>
   103c2:	bf00      	nop
   103c4:	0000fbad 	.word	0x0000fbad
   103c8:	20003670 	.word	0x20003670

000103cc <smp_public_key>:
{
   103cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   103ce:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
   103d0:	f100 04eb 	add.w	r4, r0, #235	; 0xeb
{
   103d4:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
   103d6:	2220      	movs	r2, #32
   103d8:	4631      	mov	r1, r6
   103da:	4620      	mov	r0, r4
   103dc:	f7f6 fc54 	bl	6c88 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
   103e0:	2220      	movs	r2, #32
   103e2:	18b1      	adds	r1, r6, r2
   103e4:	f205 100b 	addw	r0, r5, #267	; 0x10b
   103e8:	f7f6 fc4e 	bl	6c88 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
   103ec:	2240      	movs	r2, #64	; 0x40
   103ee:	4934      	ldr	r1, [pc, #208]	; (104c0 <smp_public_key+0xf4>)
   103f0:	4620      	mov	r0, r4
   103f2:	f7f6 fc22 	bl	6c3a <memcmp>
   103f6:	b9d8      	cbnz	r0, 10430 <smp_public_key+0x64>
		BT_INFO("Remote is using Debug Public key");
   103f8:	4b32      	ldr	r3, [pc, #200]	; (104c4 <smp_public_key+0xf8>)
   103fa:	681b      	ldr	r3, [r3, #0]
   103fc:	f003 0307 	and.w	r3, r3, #7
   10400:	2b02      	cmp	r3, #2
   10402:	d910      	bls.n	10426 <smp_public_key+0x5a>
   10404:	2303      	movs	r3, #3
   10406:	f04f 0200 	mov.w	r2, #0
   1040a:	f363 0202 	bfi	r2, r3, #0, #3
   1040e:	492e      	ldr	r1, [pc, #184]	; (104c8 <smp_public_key+0xfc>)
   10410:	4b2e      	ldr	r3, [pc, #184]	; (104cc <smp_public_key+0x100>)
   10412:	1a5b      	subs	r3, r3, r1
   10414:	f360 02c5 	bfi	r2, r0, #3, #3
   10418:	08db      	lsrs	r3, r3, #3
   1041a:	f363 128f 	bfi	r2, r3, #6, #10
   1041e:	492c      	ldr	r1, [pc, #176]	; (104d0 <smp_public_key+0x104>)
   10420:	482c      	ldr	r0, [pc, #176]	; (104d4 <smp_public_key+0x108>)
   10422:	f7f1 fe63 	bl	20ec <log_1>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   10426:	210c      	movs	r1, #12
   10428:	f105 0098 	add.w	r0, r5, #152	; 0x98
   1042c:	f7fe ffb6 	bl	f39c <atomic_set_bit>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   10430:	682b      	ldr	r3, [r5, #0]
   10432:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10434:	bb9b      	cbnz	r3, 1049e <smp_public_key+0xd2>
		switch (smp->method) {
   10436:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
   1043a:	2b03      	cmp	r3, #3
   1043c:	d83e      	bhi.n	104bc <smp_public_key+0xf0>
   1043e:	e8df f003 	tbb	[pc, r3]
   10442:	2302      	.short	0x2302
   10444:	0214      	.short	0x0214
			atomic_set_bit(&smp->allowed_cmds,
   10446:	2103      	movs	r1, #3
   10448:	f105 0094 	add.w	r0, r5, #148	; 0x94
   1044c:	f7fe ffa6 	bl	f39c <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
   10450:	4620      	mov	r0, r4
   10452:	4921      	ldr	r1, [pc, #132]	; (104d8 <smp_public_key+0x10c>)
   10454:	f7fa f998 	bl	a788 <bt_dh_key_gen>
   10458:	4604      	mov	r4, r0
   1045a:	bb78      	cbnz	r0, 104bc <smp_public_key+0xf0>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1045c:	2107      	movs	r1, #7
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1045e:	f105 0098 	add.w	r0, r5, #152	; 0x98
   10462:	f7fe ff9b 	bl	f39c <atomic_set_bit>
		return 0;
   10466:	4620      	mov	r0, r4
   10468:	e00d      	b.n	10486 <smp_public_key+0xba>
			err = display_passkey(smp);
   1046a:	4628      	mov	r0, r5
   1046c:	f7fe ffbe 	bl	f3ec <display_passkey>
			if (err) {
   10470:	b948      	cbnz	r0, 10486 <smp_public_key+0xba>
			atomic_set_bit(&smp->allowed_cmds,
   10472:	f105 0094 	add.w	r0, r5, #148	; 0x94
   10476:	2103      	movs	r1, #3
   10478:	f7fe ff90 	bl	f39c <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   1047c:	4628      	mov	r0, r5
   1047e:	f7fe fe21 	bl	f0c4 <smp_send_pairing_confirm>
			if (err) {
   10482:	2800      	cmp	r0, #0
   10484:	d0e4      	beq.n	10450 <smp_public_key+0x84>
}
   10486:	bd70      	pop	{r4, r5, r6, pc}
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   10488:	f105 0098 	add.w	r0, r5, #152	; 0x98
   1048c:	2109      	movs	r1, #9
   1048e:	f7fe ff85 	bl	f39c <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
   10492:	4b12      	ldr	r3, [pc, #72]	; (104dc <smp_public_key+0x110>)
   10494:	6828      	ldr	r0, [r5, #0]
   10496:	681b      	ldr	r3, [r3, #0]
   10498:	685b      	ldr	r3, [r3, #4]
   1049a:	4798      	blx	r3
			break;
   1049c:	e7d8      	b.n	10450 <smp_public_key+0x84>
	if (!sc_local_pkey_valid) {
   1049e:	4b10      	ldr	r3, [pc, #64]	; (104e0 <smp_public_key+0x114>)
   104a0:	781c      	ldrb	r4, [r3, #0]
   104a2:	b90c      	cbnz	r4, 104a8 <smp_public_key+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   104a4:	2106      	movs	r1, #6
   104a6:	e7da      	b.n	1045e <smp_public_key+0x92>
	err = sc_send_public_key(smp);
   104a8:	4628      	mov	r0, r5
   104aa:	f7fe fdb7 	bl	f01c <sc_send_public_key>
	if (err) {
   104ae:	2800      	cmp	r0, #0
   104b0:	d1e9      	bne.n	10486 <smp_public_key+0xba>
   104b2:	4628      	mov	r0, r5
}
   104b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   104b8:	f7ff bf48 	b.w	1034c <smp_public_key_slave.part.11>
		return BT_SMP_ERR_UNSPECIFIED;
   104bc:	2008      	movs	r0, #8
   104be:	e7e2      	b.n	10486 <smp_public_key+0xba>
   104c0:	000326bd 	.word	0x000326bd
   104c4:	2000e248 	.word	0x2000e248
   104c8:	0002ef38 	.word	0x0002ef38
   104cc:	0002efd0 	.word	0x0002efd0
   104d0:	00032367 	.word	0x00032367
   104d4:	00032788 	.word	0x00032788
   104d8:	0000fbad 	.word	0x0000fbad
   104dc:	20003670 	.word	0x20003670
   104e0:	20001004 	.word	0x20001004

000104e4 <bt_smp_pkey_ready>:
{
   104e4:	b510      	push	{r4, lr}
	if (!pkey) {
   104e6:	4601      	mov	r1, r0
   104e8:	4c28      	ldr	r4, [pc, #160]	; (1058c <bt_smp_pkey_ready+0xa8>)
   104ea:	b9c8      	cbnz	r0, 10520 <bt_smp_pkey_ready+0x3c>
		BT_WARN("Public key not available");
   104ec:	4b28      	ldr	r3, [pc, #160]	; (10590 <bt_smp_pkey_ready+0xac>)
   104ee:	681b      	ldr	r3, [r3, #0]
   104f0:	f003 0307 	and.w	r3, r3, #7
   104f4:	2b01      	cmp	r3, #1
   104f6:	d910      	bls.n	1051a <bt_smp_pkey_ready+0x36>
   104f8:	2302      	movs	r3, #2
   104fa:	f04f 0200 	mov.w	r2, #0
   104fe:	f363 0202 	bfi	r2, r3, #0, #3
   10502:	4924      	ldr	r1, [pc, #144]	; (10594 <bt_smp_pkey_ready+0xb0>)
   10504:	4b24      	ldr	r3, [pc, #144]	; (10598 <bt_smp_pkey_ready+0xb4>)
   10506:	1a5b      	subs	r3, r3, r1
   10508:	f360 02c5 	bfi	r2, r0, #3, #3
   1050c:	08db      	lsrs	r3, r3, #3
   1050e:	f363 128f 	bfi	r2, r3, #6, #10
   10512:	4922      	ldr	r1, [pc, #136]	; (1059c <bt_smp_pkey_ready+0xb8>)
   10514:	4822      	ldr	r0, [pc, #136]	; (105a0 <bt_smp_pkey_ready+0xbc>)
   10516:	f7f1 fde9 	bl	20ec <log_1>
		sc_local_pkey_valid = false;
   1051a:	2300      	movs	r3, #0
   1051c:	7023      	strb	r3, [r4, #0]
}
   1051e:	bd10      	pop	{r4, pc}
	memcpy(sc_public_key, pkey, 64);
   10520:	2240      	movs	r2, #64	; 0x40
   10522:	4820      	ldr	r0, [pc, #128]	; (105a4 <bt_smp_pkey_ready+0xc0>)
   10524:	f7f6 fbb0 	bl	6c88 <memcpy>
	sc_local_pkey_valid = true;
   10528:	2301      	movs	r3, #1
   1052a:	7023      	strb	r3, [r4, #0]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1052c:	4c1e      	ldr	r4, [pc, #120]	; (105a8 <bt_smp_pkey_ready+0xc4>)
   1052e:	2106      	movs	r1, #6
   10530:	f104 0098 	add.w	r0, r4, #152	; 0x98
   10534:	f7fe faba 	bl	eaac <atomic_test_bit>
   10538:	2800      	cmp	r0, #0
   1053a:	d0f0      	beq.n	1051e <bt_smp_pkey_ready+0x3a>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1053c:	6823      	ldr	r3, [r4, #0]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1053e:	78db      	ldrb	r3, [r3, #3]
			err = sc_send_public_key(smp);
   10540:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10542:	b9a3      	cbnz	r3, 1056e <bt_smp_pkey_ready+0x8a>
			err = sc_send_public_key(smp);
   10544:	f7fe fd6a 	bl	f01c <sc_send_public_key>
			if (err) {
   10548:	4601      	mov	r1, r0
   1054a:	b110      	cbz	r0, 10552 <bt_smp_pkey_ready+0x6e>
				smp_error(smp, err);
   1054c:	4620      	mov	r0, r4
   1054e:	f7ff fb13 	bl	fb78 <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10552:	f3bf 8f5b 	dmb	ish
   10556:	4b15      	ldr	r3, [pc, #84]	; (105ac <bt_smp_pkey_ready+0xc8>)
   10558:	e853 2f00 	ldrex	r2, [r3]
   1055c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   10560:	e843 2100 	strex	r1, r2, [r3]
   10564:	2900      	cmp	r1, #0
   10566:	d1f7      	bne.n	10558 <bt_smp_pkey_ready+0x74>
   10568:	f3bf 8f5b 	dmb	ish
   1056c:	e7d7      	b.n	1051e <bt_smp_pkey_ready+0x3a>
	err = sc_send_public_key(smp);
   1056e:	f7fe fd55 	bl	f01c <sc_send_public_key>
	if (err) {
   10572:	b920      	cbnz	r0, 1057e <bt_smp_pkey_ready+0x9a>
   10574:	4620      	mov	r0, r4
   10576:	f7ff fee9 	bl	1034c <smp_public_key_slave.part.11>
		if (err) {
   1057a:	2800      	cmp	r0, #0
   1057c:	d0cf      	beq.n	1051e <bt_smp_pkey_ready+0x3a>
			smp_error(smp, err);
   1057e:	4601      	mov	r1, r0
}
   10580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   10584:	4808      	ldr	r0, [pc, #32]	; (105a8 <bt_smp_pkey_ready+0xc4>)
   10586:	f7ff baf7 	b.w	fb78 <smp_error>
   1058a:	bf00      	nop
   1058c:	20001004 	.word	0x20001004
   10590:	2000e248 	.word	0x2000e248
   10594:	0002ef38 	.word	0x0002ef38
   10598:	0002efd0 	.word	0x0002efd0
   1059c:	00032382 	.word	0x00032382
   105a0:	00032498 	.word	0x00032498
   105a4:	20001005 	.word	0x20001005
   105a8:	20000e70 	.word	0x20000e70
   105ac:	20000f04 	.word	0x20000f04

000105b0 <smp_ident_addr_info>:
{
   105b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   105b4:	688f      	ldr	r7, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   105b6:	6804      	ldr	r4, [r0, #0]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   105b8:	783b      	ldrb	r3, [r7, #0]
{
   105ba:	4605      	mov	r5, r0
   105bc:	b36b      	cbz	r3, 1061a <smp_ident_addr_info+0x6a>
	if (!bt_addr_le_is_identity(&req->addr)) {
   105be:	79bb      	ldrb	r3, [r7, #6]
   105c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   105c4:	2bc0      	cmp	r3, #192	; 0xc0
   105c6:	d028      	beq.n	1061a <smp_ident_addr_info+0x6a>
		BT_ERR("Invalid identity %s for %s",
   105c8:	4b53      	ldr	r3, [pc, #332]	; (10718 <smp_ident_addr_info+0x168>)
   105ca:	681b      	ldr	r3, [r3, #0]
   105cc:	0759      	lsls	r1, r3, #29
   105ce:	d020      	beq.n	10612 <smp_ident_addr_info+0x62>
   105d0:	2301      	movs	r3, #1
   105d2:	f04f 0500 	mov.w	r5, #0
   105d6:	4a51      	ldr	r2, [pc, #324]	; (1071c <smp_ident_addr_info+0x16c>)
   105d8:	f363 0502 	bfi	r5, r3, #0, #3
   105dc:	4b50      	ldr	r3, [pc, #320]	; (10720 <smp_ident_addr_info+0x170>)
   105de:	1a9b      	subs	r3, r3, r2
   105e0:	08db      	lsrs	r3, r3, #3
   105e2:	f36f 05c5 	bfc	r5, #3, #3
   105e6:	4638      	mov	r0, r7
   105e8:	f363 158f 	bfi	r5, r3, #6, #10
   105ec:	f7f7 f846 	bl	767c <bt_addr_le_str_real>
   105f0:	f7f1 ff0e 	bl	2410 <log_strdup>
   105f4:	4606      	mov	r6, r0
   105f6:	f104 0048 	add.w	r0, r4, #72	; 0x48
   105fa:	f7f7 f83f 	bl	767c <bt_addr_le_str_real>
   105fe:	f7f1 ff07 	bl	2410 <log_strdup>
   10602:	f8ad 5000 	strh.w	r5, [sp]
   10606:	4603      	mov	r3, r0
   10608:	4632      	mov	r2, r6
   1060a:	4946      	ldr	r1, [pc, #280]	; (10724 <smp_ident_addr_info+0x174>)
   1060c:	4846      	ldr	r0, [pc, #280]	; (10728 <smp_ident_addr_info+0x178>)
   1060e:	f7f1 fd99 	bl	2144 <log_3>
		return BT_SMP_ERR_INVALID_PARAMS;
   10612:	200a      	movs	r0, #10
}
   10614:	b002      	add	sp, #8
   10616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1061a:	210b      	movs	r1, #11
   1061c:	f105 0098 	add.w	r0, r5, #152	; 0x98
   10620:	f7fe fa44 	bl	eaac <atomic_test_bit>
   10624:	2800      	cmp	r0, #0
   10626:	d052      	beq.n	106ce <smp_ident_addr_info+0x11e>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   10628:	f104 0848 	add.w	r8, r4, #72	; 0x48
   1062c:	4642      	mov	r2, r8
   1062e:	7a21      	ldrb	r1, [r4, #8]
   10630:	2002      	movs	r0, #2
   10632:	f000 fdcb 	bl	111cc <bt_keys_get_type>
		if (!keys) {
   10636:	4606      	mov	r6, r0
   10638:	b9e8      	cbnz	r0, 10676 <smp_ident_addr_info+0xc6>
			BT_ERR("Unable to get keys for %s",
   1063a:	4b37      	ldr	r3, [pc, #220]	; (10718 <smp_ident_addr_info+0x168>)
   1063c:	681b      	ldr	r3, [r3, #0]
   1063e:	075a      	lsls	r2, r3, #29
   10640:	d017      	beq.n	10672 <smp_ident_addr_info+0xc2>
   10642:	2301      	movs	r3, #1
   10644:	f04f 0400 	mov.w	r4, #0
   10648:	f363 0402 	bfi	r4, r3, #0, #3
   1064c:	4a34      	ldr	r2, [pc, #208]	; (10720 <smp_ident_addr_info+0x170>)
   1064e:	4b33      	ldr	r3, [pc, #204]	; (1071c <smp_ident_addr_info+0x16c>)
   10650:	1ad2      	subs	r2, r2, r3
   10652:	08d2      	lsrs	r2, r2, #3
   10654:	f360 04c5 	bfi	r4, r0, #3, #3
   10658:	4640      	mov	r0, r8
   1065a:	f362 148f 	bfi	r4, r2, #6, #10
   1065e:	f7f7 f80d 	bl	767c <bt_addr_le_str_real>
   10662:	f7f1 fed5 	bl	2410 <log_strdup>
   10666:	4623      	mov	r3, r4
   10668:	4602      	mov	r2, r0
   1066a:	492e      	ldr	r1, [pc, #184]	; (10724 <smp_ident_addr_info+0x174>)
   1066c:	482f      	ldr	r0, [pc, #188]	; (1072c <smp_ident_addr_info+0x17c>)
   1066e:	f7f1 fd51 	bl	2114 <log_2>
			return BT_SMP_ERR_UNSPECIFIED;
   10672:	2008      	movs	r0, #8
   10674:	e7ce      	b.n	10614 <smp_ident_addr_info+0x64>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   10676:	78e3      	ldrb	r3, [r4, #3]
   10678:	2b00      	cmp	r3, #0
   1067a:	d14a      	bne.n	10712 <smp_ident_addr_info+0x162>
			dst = &conn->le.resp_addr;
   1067c:	f104 0156 	add.w	r1, r4, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
   10680:	780b      	ldrb	r3, [r1, #0]
   10682:	2b01      	cmp	r3, #1
   10684:	d120      	bne.n	106c8 <smp_ident_addr_info+0x118>
		if (bt_addr_le_is_rpa(dst)) {
   10686:	798b      	ldrb	r3, [r1, #6]
   10688:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1068c:	2b40      	cmp	r3, #64	; 0x40
   1068e:	d11b      	bne.n	106c8 <smp_ident_addr_info+0x118>
	memcpy(dst, src, sizeof(*dst));
   10690:	2206      	movs	r2, #6
   10692:	3101      	adds	r1, #1
   10694:	f106 0036 	add.w	r0, r6, #54	; 0x36
   10698:	f7f6 faf6 	bl	6c88 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1069c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   106a0:	b193      	cbz	r3, 106c8 <smp_ident_addr_info+0x118>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   106a2:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   106a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   106aa:	2bc0      	cmp	r3, #192	; 0xc0
   106ac:	d00c      	beq.n	106c8 <smp_ident_addr_info+0x118>
	memcpy(dst, src, sizeof(*dst));
   106ae:	2207      	movs	r2, #7
   106b0:	4639      	mov	r1, r7
   106b2:	1c70      	adds	r0, r6, #1
   106b4:	f7f6 fae8 	bl	6c88 <memcpy>
   106b8:	2207      	movs	r2, #7
   106ba:	4639      	mov	r1, r7
   106bc:	4640      	mov	r0, r8
   106be:	f7f6 fae3 	bl	6c88 <memcpy>
				bt_conn_identity_resolved(conn);
   106c2:	4620      	mov	r0, r4
   106c4:	f7fa f91e 	bl	a904 <bt_conn_identity_resolved>
		bt_id_add(keys);
   106c8:	4630      	mov	r0, r6
   106ca:	f7f7 fc6f 	bl	7fac <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   106ce:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
   106d2:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   106d6:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   106d8:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   106dc:	d504      	bpl.n	106e8 <smp_ident_addr_info+0x138>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   106de:	210a      	movs	r1, #10
   106e0:	f105 0094 	add.w	r0, r5, #148	; 0x94
   106e4:	f7fe fe5a 	bl	f39c <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   106e8:	78e3      	ldrb	r3, [r4, #3]
   106ea:	b92b      	cbnz	r3, 106f8 <smp_ident_addr_info+0x148>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
   106ec:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
   106f0:	b913      	cbnz	r3, 106f8 <smp_ident_addr_info+0x148>
		bt_smp_distribute_keys(smp);
   106f2:	4628      	mov	r0, r5
   106f4:	f7fe fd24 	bl	f140 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
   106f8:	f8d5 0170 	ldr.w	r0, [r5, #368]	; 0x170
   106fc:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
   10700:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
   10704:	b91c      	cbnz	r4, 1070e <smp_ident_addr_info+0x15e>
		smp_pairing_complete(smp, 0);
   10706:	4621      	mov	r1, r4
   10708:	4628      	mov	r0, r5
   1070a:	f7ff fa13 	bl	fb34 <smp_pairing_complete>
	return 0;
   1070e:	2000      	movs	r0, #0
   10710:	e780      	b.n	10614 <smp_ident_addr_info+0x64>
			dst = &conn->le.init_addr;
   10712:	f104 014f 	add.w	r1, r4, #79	; 0x4f
   10716:	e7b3      	b.n	10680 <smp_ident_addr_info+0xd0>
   10718:	2000e248 	.word	0x2000e248
   1071c:	0002ef38 	.word	0x0002ef38
   10720:	0002efd0 	.word	0x0002efd0
   10724:	0003232d 	.word	0x0003232d
   10728:	0003271c 	.word	0x0003271c
   1072c:	0003273b 	.word	0x0003273b

00010730 <smp_pairing_rsp>:
{
   10730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
   10734:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   10736:	78eb      	ldrb	r3, [r5, #3]
   10738:	3b07      	subs	r3, #7
   1073a:	2b09      	cmp	r3, #9
{
   1073c:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1073e:	d903      	bls.n	10748 <smp_pairing_rsp+0x18>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   10740:	2506      	movs	r5, #6
}
   10742:	4628      	mov	r0, r5
   10744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->local_dist &= rsp->init_key_dist;
   10748:	792a      	ldrb	r2, [r5, #4]
   1074a:	f890 3171 	ldrb.w	r3, [r0, #369]	; 0x171
	struct bt_conn *conn = smp->chan.chan.conn;
   1074e:	6807      	ldr	r7, [r0, #0]
	smp->local_dist &= rsp->init_key_dist;
   10750:	4013      	ands	r3, r2
   10752:	f880 3171 	strb.w	r3, [r0, #369]	; 0x171
	smp->remote_dist &= rsp->resp_key_dist;
   10756:	796a      	ldrb	r2, [r5, #5]
   10758:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   1075c:	4013      	ands	r3, r2
   1075e:	f880 3172 	strb.w	r3, [r0, #370]	; 0x172
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   10762:	2302      	movs	r3, #2
   10764:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   10768:	2206      	movs	r2, #6
   1076a:	4629      	mov	r1, r5
   1076c:	30a5      	adds	r0, #165	; 0xa5
   1076e:	f7f6 fa8b 	bl	6c88 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   10772:	78ab      	ldrb	r3, [r5, #2]
   10774:	071a      	lsls	r2, r3, #28
   10776:	f104 0698 	add.w	r6, r4, #152	; 0x98
   1077a:	d507      	bpl.n	1078c <smp_pairing_rsp+0x5c>
   1077c:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
   10780:	071b      	lsls	r3, r3, #28
   10782:	d503      	bpl.n	1078c <smp_pairing_rsp+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   10784:	2105      	movs	r1, #5
   10786:	4630      	mov	r0, r6
   10788:	f7fe fe08 	bl	f39c <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1078c:	78ab      	ldrb	r3, [r5, #2]
   1078e:	0698      	lsls	r0, r3, #26
   10790:	d507      	bpl.n	107a2 <smp_pairing_rsp+0x72>
   10792:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
   10796:	0699      	lsls	r1, r3, #26
   10798:	d503      	bpl.n	107a2 <smp_pairing_rsp+0x72>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1079a:	2112      	movs	r1, #18
   1079c:	4630      	mov	r0, r6
   1079e:	f7fe fdfd 	bl	f39c <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   107a2:	78ab      	ldrb	r3, [r5, #2]
   107a4:	07da      	lsls	r2, r3, #31
   107a6:	d507      	bpl.n	107b8 <smp_pairing_rsp+0x88>
   107a8:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
   107ac:	07db      	lsls	r3, r3, #31
   107ae:	d503      	bpl.n	107b8 <smp_pairing_rsp+0x88>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   107b0:	210b      	movs	r1, #11
   107b2:	4630      	mov	r0, r6
   107b4:	f7fe fdf2 	bl	f39c <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   107b8:	2105      	movs	r1, #5
   107ba:	4630      	mov	r0, r6
   107bc:	f7fe f976 	bl	eaac <atomic_test_bit>
   107c0:	f895 8000 	ldrb.w	r8, [r5]
   107c4:	bba0      	cbnz	r0, 10830 <smp_pairing_rsp+0x100>
	smp->method = legacy_get_pair_method(smp, remote_io);
   107c6:	4641      	mov	r1, r8
   107c8:	4620      	mov	r0, r4
   107ca:	f7fe fb53 	bl	ee74 <legacy_get_pair_method>
   107ce:	4605      	mov	r5, r0
   107d0:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   107d4:	b990      	cbnz	r0, 107fc <smp_pairing_rsp+0xcc>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   107d6:	210d      	movs	r1, #13
   107d8:	4630      	mov	r0, r6
   107da:	f7fe f967 	bl	eaac <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   107de:	b168      	cbz	r0, 107fc <smp_pairing_rsp+0xcc>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   107e0:	4f3a      	ldr	r7, [pc, #232]	; (108cc <smp_pairing_rsp+0x19c>)
   107e2:	683b      	ldr	r3, [r7, #0]
   107e4:	b153      	cbz	r3, 107fc <smp_pairing_rsp+0xcc>
	    bt_auth && bt_auth->pairing_confirm) {
   107e6:	691b      	ldr	r3, [r3, #16]
   107e8:	b143      	cbz	r3, 107fc <smp_pairing_rsp+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   107ea:	4630      	mov	r0, r6
   107ec:	2109      	movs	r1, #9
   107ee:	f7fe fdd5 	bl	f39c <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   107f2:	683b      	ldr	r3, [r7, #0]
   107f4:	6820      	ldr	r0, [r4, #0]
   107f6:	691b      	ldr	r3, [r3, #16]
   107f8:	4798      	blx	r3
		return 0;
   107fa:	e7a2      	b.n	10742 <smp_pairing_rsp+0x12>
	ret = legacy_request_tk(smp);
   107fc:	4620      	mov	r0, r4
   107fe:	f7fe fff1 	bl	f7e4 <legacy_request_tk>
	if (ret) {
   10802:	4605      	mov	r5, r0
   10804:	2800      	cmp	r0, #0
   10806:	d19c      	bne.n	10742 <smp_pairing_rsp+0x12>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   10808:	2109      	movs	r1, #9
   1080a:	4630      	mov	r0, r6
   1080c:	f7fe f94e 	bl	eaac <atomic_test_bit>
   10810:	b948      	cbnz	r0, 10826 <smp_pairing_rsp+0xf6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   10812:	f104 0094 	add.w	r0, r4, #148	; 0x94
   10816:	2103      	movs	r1, #3
   10818:	f7fe fdc0 	bl	f39c <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
   1081c:	4620      	mov	r0, r4
}
   1081e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return legacy_send_pairing_confirm(smp);
   10822:	f7ff bd01 	b.w	10228 <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   10826:	4629      	mov	r1, r5
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   10828:	4630      	mov	r0, r6
   1082a:	f7fe fdb7 	bl	f39c <atomic_set_bit>
		return 0;
   1082e:	e788      	b.n	10742 <smp_pairing_rsp+0x12>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
   10830:	f1b8 0f04 	cmp.w	r8, #4
   10834:	d83c      	bhi.n	108b0 <smp_pairing_rsp+0x180>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   10836:	f894 50a0 	ldrb.w	r5, [r4, #160]	; 0xa0
   1083a:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
   1083e:	431d      	orrs	r5, r3
   10840:	f015 0504 	ands.w	r5, r5, #4
   10844:	d007      	beq.n	10856 <smp_pairing_rsp+0x126>
	return gen_method_sc[remote_io][get_io_capa()];
   10846:	f7fe f8ed 	bl	ea24 <get_io_capa>
   1084a:	4921      	ldr	r1, [pc, #132]	; (108d0 <smp_pairing_rsp+0x1a0>)
   1084c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   10850:	4488      	add	r8, r1
   10852:	f818 5000 	ldrb.w	r5, [r8, r0]
	smp->method = get_pair_method(smp, rsp->io_capability);
   10856:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
   1085a:	7abb      	ldrb	r3, [r7, #10]
   1085c:	2b04      	cmp	r3, #4
   1085e:	d10a      	bne.n	10876 <smp_pairing_rsp+0x146>
	     conn->required_sec_level == BT_SECURITY_FIPS) &&
   10860:	b395      	cbz	r5, 108c8 <smp_pairing_rsp+0x198>
	return min(req->max_key_size, rsp->max_key_size);
   10862:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   10866:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
	     conn->required_sec_level == BT_SECURITY_FIPS) &&
   1086a:	4293      	cmp	r3, r2
   1086c:	bf28      	it	cs
   1086e:	4613      	movcs	r3, r2
   10870:	2b10      	cmp	r3, #16
   10872:	f47f af65 	bne.w	10740 <smp_pairing_rsp+0x10>
	smp->local_dist &= SEND_KEYS_SC;
   10876:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
   1087a:	f003 0304 	and.w	r3, r3, #4
   1087e:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	smp->remote_dist &= RECV_KEYS_SC;
   10882:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
   10886:	f003 0306 	and.w	r3, r3, #6
   1088a:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1088e:	b955      	cbnz	r5, 108a6 <smp_pairing_rsp+0x176>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   10890:	210d      	movs	r1, #13
   10892:	4630      	mov	r0, r6
   10894:	f7fe f90a 	bl	eaac <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   10898:	b128      	cbz	r0, 108a6 <smp_pairing_rsp+0x176>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1089a:	4f0c      	ldr	r7, [pc, #48]	; (108cc <smp_pairing_rsp+0x19c>)
   1089c:	683b      	ldr	r3, [r7, #0]
   1089e:	b113      	cbz	r3, 108a6 <smp_pairing_rsp+0x176>
	    bt_auth && bt_auth->pairing_confirm) {
   108a0:	691b      	ldr	r3, [r3, #16]
   108a2:	2b00      	cmp	r3, #0
   108a4:	d1a1      	bne.n	107ea <smp_pairing_rsp+0xba>
	if (!sc_local_pkey_valid) {
   108a6:	4b0b      	ldr	r3, [pc, #44]	; (108d4 <smp_pairing_rsp+0x1a4>)
   108a8:	781d      	ldrb	r5, [r3, #0]
   108aa:	b91d      	cbnz	r5, 108b4 <smp_pairing_rsp+0x184>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   108ac:	2106      	movs	r1, #6
   108ae:	e7bb      	b.n	10828 <smp_pairing_rsp+0xf8>
		return JUST_WORKS;
   108b0:	2500      	movs	r5, #0
   108b2:	e7d0      	b.n	10856 <smp_pairing_rsp+0x126>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   108b4:	f104 0094 	add.w	r0, r4, #148	; 0x94
   108b8:	210c      	movs	r1, #12
   108ba:	f7fe fd6f 	bl	f39c <atomic_set_bit>
	return sc_send_public_key(smp);
   108be:	4620      	mov	r0, r4
}
   108c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sc_send_public_key(smp);
   108c4:	f7fe bbaa 	b.w	f01c <sc_send_public_key>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   108c8:	2503      	movs	r5, #3
   108ca:	e73a      	b.n	10742 <smp_pairing_rsp+0x12>
   108cc:	20003670 	.word	0x20003670
   108d0:	000325d1 	.word	0x000325d1
   108d4:	20001004 	.word	0x20001004

000108d8 <smp_pairing_random>:
{
   108d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108dc:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   108de:	f100 08cb 	add.w	r8, r0, #203	; 0xcb
{
   108e2:	b08d      	sub	sp, #52	; 0x34
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   108e4:	2210      	movs	r2, #16
   108e6:	6889      	ldr	r1, [r1, #8]
   108e8:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   108ea:	f104 0698 	add.w	r6, r4, #152	; 0x98
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   108ee:	f7f6 f9cb 	bl	6c88 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   108f2:	2105      	movs	r1, #5
   108f4:	4630      	mov	r0, r6
   108f6:	f7fe f8d9 	bl	eaac <atomic_test_bit>
   108fa:	f8d4 9000 	ldr.w	r9, [r4]
   108fe:	2800      	cmp	r0, #0
   10900:	f040 808b 	bne.w	10a1a <smp_pairing_random+0x142>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   10904:	f109 0356 	add.w	r3, r9, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   10908:	f104 0adb 	add.w	sl, r4, #219	; 0xdb
   1090c:	af08      	add	r7, sp, #32
   1090e:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   10910:	f109 034f 	add.w	r3, r9, #79	; 0x4f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   10914:	9300      	str	r3, [sp, #0]
   10916:	9702      	str	r7, [sp, #8]
   10918:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
   1091c:	f104 029d 	add.w	r2, r4, #157	; 0x9d
   10920:	4641      	mov	r1, r8
   10922:	4650      	mov	r0, sl
   10924:	f7ff fc2c 	bl	10180 <smp_c1>
	if (err) {
   10928:	b108      	cbz	r0, 1092e <smp_pairing_random+0x56>
				return BT_SMP_ERR_UNSPECIFIED;
   1092a:	2508      	movs	r5, #8
   1092c:	e06f      	b.n	10a0e <smp_pairing_random+0x136>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1092e:	2210      	movs	r2, #16
   10930:	4639      	mov	r1, r7
   10932:	f104 00ab 	add.w	r0, r4, #171	; 0xab
   10936:	f7f6 f980 	bl	6c3a <memcmp>
   1093a:	2800      	cmp	r0, #0
   1093c:	d16b      	bne.n	10a16 <smp_pairing_random+0x13e>
	    conn->role == BT_HCI_ROLE_MASTER) {
   1093e:	f899 5003 	ldrb.w	r5, [r9, #3]
   10942:	f104 0bbb 	add.w	fp, r4, #187	; 0xbb
	memcpy(out, r2, 8);
   10946:	2208      	movs	r2, #8
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10948:	2d00      	cmp	r5, #0
   1094a:	d143      	bne.n	109d4 <smp_pairing_random+0xfc>
	memcpy(out, r2, 8);
   1094c:	4659      	mov	r1, fp
   1094e:	4638      	mov	r0, r7
   10950:	f7f6 f99a 	bl	6c88 <memcpy>
	memcpy(out + 8, r1, 8);
   10954:	2208      	movs	r2, #8
   10956:	4641      	mov	r1, r8
   10958:	a80a      	add	r0, sp, #40	; 0x28
   1095a:	f7f6 f995 	bl	6c88 <memcpy>
	return bt_encrypt_le(k, out, out);
   1095e:	463a      	mov	r2, r7
   10960:	4639      	mov	r1, r7
   10962:	4650      	mov	r0, sl
   10964:	f00c fa4a 	bl	1cdfc <bt_encrypt_le>
		if (err) {
   10968:	2800      	cmp	r0, #0
   1096a:	d1de      	bne.n	1092a <smp_pairing_random+0x52>
		(void)memset(ediv, 0, sizeof(ediv));
   1096c:	2202      	movs	r2, #2
   1096e:	4629      	mov	r1, r5
   10970:	a805      	add	r0, sp, #20
   10972:	f7f6 f9b6 	bl	6ce2 <memset>
		(void)memset(rand, 0, sizeof(rand));
   10976:	2208      	movs	r2, #8
   10978:	4629      	mov	r1, r5
   1097a:	a806      	add	r0, sp, #24
   1097c:	f7f6 f9b1 	bl	6ce2 <memset>
	return min(req->max_key_size, rsp->max_key_size);
   10980:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
   10984:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   10988:	429a      	cmp	r2, r3
   1098a:	bf94      	ite	ls
   1098c:	9200      	strls	r2, [sp, #0]
   1098e:	9300      	strhi	r3, [sp, #0]
   10990:	a906      	add	r1, sp, #24
   10992:	463b      	mov	r3, r7
   10994:	aa05      	add	r2, sp, #20
   10996:	4648      	mov	r0, r9
   10998:	f7f9 ffce 	bl	a938 <bt_conn_le_start_encryption>
   1099c:	b1a8      	cbz	r0, 109ca <smp_pairing_random+0xf2>
			BT_ERR("Failed to start encryption");
   1099e:	4b73      	ldr	r3, [pc, #460]	; (10b6c <smp_pairing_random+0x294>)
   109a0:	681b      	ldr	r3, [r3, #0]
   109a2:	075b      	lsls	r3, r3, #29
   109a4:	d0c1      	beq.n	1092a <smp_pairing_random+0x52>
   109a6:	2301      	movs	r3, #1
   109a8:	f04f 0200 	mov.w	r2, #0
   109ac:	f363 0202 	bfi	r2, r3, #0, #3
   109b0:	496f      	ldr	r1, [pc, #444]	; (10b70 <smp_pairing_random+0x298>)
   109b2:	4b70      	ldr	r3, [pc, #448]	; (10b74 <smp_pairing_random+0x29c>)
   109b4:	4870      	ldr	r0, [pc, #448]	; (10b78 <smp_pairing_random+0x2a0>)
   109b6:	1a5b      	subs	r3, r3, r1
   109b8:	f365 02c5 	bfi	r2, r5, #3, #3
   109bc:	08db      	lsrs	r3, r3, #3
   109be:	f363 128f 	bfi	r2, r3, #6, #10
   109c2:	496e      	ldr	r1, [pc, #440]	; (10b7c <smp_pairing_random+0x2a4>)
   109c4:	f7f1 fb92 	bl	20ec <log_1>
   109c8:	e7af      	b.n	1092a <smp_pairing_random+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   109ca:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   109cc:	4630      	mov	r0, r6
   109ce:	f7fe fce5 	bl	f39c <atomic_set_bit>
			return 0;
   109d2:	e01c      	b.n	10a0e <smp_pairing_random+0x136>
	memcpy(out, r2, 8);
   109d4:	4641      	mov	r1, r8
   109d6:	4638      	mov	r0, r7
   109d8:	f7f6 f956 	bl	6c88 <memcpy>
	memcpy(out + 8, r1, 8);
   109dc:	2208      	movs	r2, #8
   109de:	4659      	mov	r1, fp
   109e0:	a80a      	add	r0, sp, #40	; 0x28
   109e2:	f7f6 f951 	bl	6c88 <memcpy>
	return bt_encrypt_le(k, out, out);
   109e6:	463a      	mov	r2, r7
   109e8:	4639      	mov	r1, r7
   109ea:	4650      	mov	r0, sl
   109ec:	f00c fa06 	bl	1cdfc <bt_encrypt_le>
		if (err) {
   109f0:	4605      	mov	r5, r0
   109f2:	2800      	cmp	r0, #0
   109f4:	d199      	bne.n	1092a <smp_pairing_random+0x52>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   109f6:	2210      	movs	r2, #16
   109f8:	4639      	mov	r1, r7
   109fa:	4650      	mov	r0, sl
   109fc:	f7f6 f944 	bl	6c88 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   10a00:	4630      	mov	r0, r6
   10a02:	2101      	movs	r1, #1
   10a04:	f7fe fcca 	bl	f39c <atomic_set_bit>
		smp_send_pairing_random(smp);
   10a08:	4620      	mov	r0, r4
   10a0a:	f7fe fb42 	bl	f092 <smp_send_pairing_random>
}
   10a0e:	4628      	mov	r0, r5
   10a10:	b00d      	add	sp, #52	; 0x34
   10a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_SMP_ERR_CONFIRM_FAILED;
   10a16:	2504      	movs	r5, #4
		return legacy_pairing_random(smp);
   10a18:	e7f9      	b.n	10a0e <smp_pairing_random+0x136>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   10a1a:	f899 3003 	ldrb.w	r3, [r9, #3]
   10a1e:	2b00      	cmp	r3, #0
   10a20:	d14e      	bne.n	10ac0 <smp_pairing_random+0x1e8>
		err = sc_smp_check_confirm(smp);
   10a22:	4620      	mov	r0, r4
   10a24:	f7fe f8e0 	bl	ebe8 <sc_smp_check_confirm>
		if (err) {
   10a28:	4605      	mov	r5, r0
   10a2a:	2800      	cmp	r0, #0
   10a2c:	d1ef      	bne.n	10a0e <smp_pairing_random+0x136>
		switch (smp->method) {
   10a2e:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
   10a32:	2b03      	cmp	r3, #3
   10a34:	f63f af79 	bhi.w	1092a <smp_pairing_random+0x52>
   10a38:	e8df f003 	tbb	[pc, r3]
   10a3c:	021d1d36 	.word	0x021d1d36
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
   10a40:	ab08      	add	r3, sp, #32
   10a42:	9300      	str	r3, [sp, #0]
   10a44:	f104 02bb 	add.w	r2, r4, #187	; 0xbb
   10a48:	4643      	mov	r3, r8
   10a4a:	f104 01eb 	add.w	r1, r4, #235	; 0xeb
   10a4e:	484c      	ldr	r0, [pc, #304]	; (10b80 <smp_pairing_random+0x2a8>)
   10a50:	f7fe f9b2 	bl	edb8 <smp_g2>
   10a54:	2800      	cmp	r0, #0
   10a56:	f47f af68 	bne.w	1092a <smp_pairing_random+0x52>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   10a5a:	4630      	mov	r0, r6
   10a5c:	2109      	movs	r1, #9
   10a5e:	f7fe fc9d 	bl	f39c <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   10a62:	2108      	movs	r1, #8
   10a64:	f7fe fc9a 	bl	f39c <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   10a68:	4b46      	ldr	r3, [pc, #280]	; (10b84 <smp_pairing_random+0x2ac>)
   10a6a:	9908      	ldr	r1, [sp, #32]
   10a6c:	681b      	ldr	r3, [r3, #0]
   10a6e:	6820      	ldr	r0, [r4, #0]
   10a70:	689b      	ldr	r3, [r3, #8]
   10a72:	4798      	blx	r3
			return 0;
   10a74:	e7cb      	b.n	10a0e <smp_pairing_random+0x136>
			smp->passkey_round++;
   10a76:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   10a7a:	3301      	adds	r3, #1
   10a7c:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20) {
   10a7e:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   10a80:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
			if (smp->passkey_round == 20) {
   10a84:	d010      	beq.n	10aa8 <smp_pairing_random+0x1d0>
			if (bt_rand(smp->prnd, 16)) {
   10a86:	2110      	movs	r1, #16
   10a88:	f104 00bb 	add.w	r0, r4, #187	; 0xbb
   10a8c:	f00c f99c 	bl	1cdc8 <bt_rand>
   10a90:	2800      	cmp	r0, #0
   10a92:	f47f af4a 	bne.w	1092a <smp_pairing_random+0x52>
			atomic_set_bit(&smp->allowed_cmds,
   10a96:	f104 0094 	add.w	r0, r4, #148	; 0x94
   10a9a:	2103      	movs	r1, #3
   10a9c:	f7fe fc7e 	bl	f39c <atomic_set_bit>
			smp_send_pairing_confirm(smp);
   10aa0:	4620      	mov	r0, r4
   10aa2:	f7fe fb0f 	bl	f0c4 <smp_send_pairing_confirm>
			return 0;
   10aa6:	e7b2      	b.n	10a0e <smp_pairing_random+0x136>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   10aa8:	2107      	movs	r1, #7
   10aaa:	4630      	mov	r0, r6
   10aac:	f7fd fffe 	bl	eaac <atomic_test_bit>
   10ab0:	b108      	cbz	r0, 10ab6 <smp_pairing_random+0x1de>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   10ab2:	2108      	movs	r1, #8
   10ab4:	e78a      	b.n	109cc <smp_pairing_random+0xf4>
		return compute_and_send_master_dhcheck(smp);
   10ab6:	4620      	mov	r0, r4
   10ab8:	f7fe fcc4 	bl	f444 <compute_and_send_master_dhcheck>
   10abc:	4605      	mov	r5, r0
   10abe:	e7a6      	b.n	10a0e <smp_pairing_random+0x136>
	switch (smp->method) {
   10ac0:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
   10ac4:	2b03      	cmp	r3, #3
   10ac6:	f63f af30 	bhi.w	1092a <smp_pairing_random+0x52>
   10aca:	e8df f003 	tbb	[pc, r3]
   10ace:	2719      	.short	0x2719
   10ad0:	0227      	.short	0x0227
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   10ad2:	ab08      	add	r3, sp, #32
   10ad4:	9300      	str	r3, [sp, #0]
   10ad6:	4642      	mov	r2, r8
   10ad8:	f104 03bb 	add.w	r3, r4, #187	; 0xbb
   10adc:	4928      	ldr	r1, [pc, #160]	; (10b80 <smp_pairing_random+0x2a8>)
   10ade:	f104 00eb 	add.w	r0, r4, #235	; 0xeb
   10ae2:	f7fe f969 	bl	edb8 <smp_g2>
   10ae6:	2800      	cmp	r0, #0
   10ae8:	f47f af1f 	bne.w	1092a <smp_pairing_random+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   10aec:	2109      	movs	r1, #9
   10aee:	4630      	mov	r0, r6
   10af0:	f7fe fc54 	bl	f39c <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   10af4:	4b23      	ldr	r3, [pc, #140]	; (10b84 <smp_pairing_random+0x2ac>)
   10af6:	9908      	ldr	r1, [sp, #32]
   10af8:	681b      	ldr	r3, [r3, #0]
   10afa:	6820      	ldr	r0, [r4, #0]
   10afc:	689b      	ldr	r3, [r3, #8]
   10afe:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   10b00:	210d      	movs	r1, #13
   10b02:	f104 0094 	add.w	r0, r4, #148	; 0x94
   10b06:	f7fe fc49 	bl	f39c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   10b0a:	210e      	movs	r1, #14
   10b0c:	4630      	mov	r0, r6
   10b0e:	f7fe fc45 	bl	f39c <atomic_set_bit>
	smp_send_pairing_random(smp);
   10b12:	4620      	mov	r0, r4
   10b14:	f7fe fabd 	bl	f092 <smp_send_pairing_random>
	return 0;
   10b18:	2500      	movs	r5, #0
   10b1a:	e778      	b.n	10a0e <smp_pairing_random+0x136>
		err = sc_smp_check_confirm(smp);
   10b1c:	4620      	mov	r0, r4
   10b1e:	f7fe f863 	bl	ebe8 <sc_smp_check_confirm>
		if (err) {
   10b22:	4605      	mov	r5, r0
   10b24:	2800      	cmp	r0, #0
   10b26:	f47f af72 	bne.w	10a0e <smp_pairing_random+0x136>
		atomic_set_bit(&smp->allowed_cmds,
   10b2a:	f104 0794 	add.w	r7, r4, #148	; 0x94
   10b2e:	2103      	movs	r1, #3
   10b30:	4638      	mov	r0, r7
   10b32:	f7fe fc33 	bl	f39c <atomic_set_bit>
		smp_send_pairing_random(smp);
   10b36:	4620      	mov	r0, r4
   10b38:	f7fe faab 	bl	f092 <smp_send_pairing_random>
		smp->passkey_round++;
   10b3c:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   10b40:	3301      	adds	r3, #1
   10b42:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20) {
   10b44:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   10b46:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
		if (smp->passkey_round == 20) {
   10b4a:	d105      	bne.n	10b58 <smp_pairing_random+0x280>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   10b4c:	210d      	movs	r1, #13
   10b4e:	4638      	mov	r0, r7
   10b50:	f7fe fc24 	bl	f39c <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   10b54:	210e      	movs	r1, #14
   10b56:	e739      	b.n	109cc <smp_pairing_random+0xf4>
		if (bt_rand(smp->prnd, 16)) {
   10b58:	2110      	movs	r1, #16
   10b5a:	f104 00bb 	add.w	r0, r4, #187	; 0xbb
   10b5e:	f00c f933 	bl	1cdc8 <bt_rand>
   10b62:	2800      	cmp	r0, #0
   10b64:	f43f af53 	beq.w	10a0e <smp_pairing_random+0x136>
   10b68:	e6df      	b.n	1092a <smp_pairing_random+0x52>
   10b6a:	bf00      	nop
   10b6c:	2000e248 	.word	0x2000e248
   10b70:	0002ef38 	.word	0x0002ef38
   10b74:	0002efd0 	.word	0x0002efd0
   10b78:	00032769 	.word	0x00032769
   10b7c:	000322c6 	.word	0x000322c6
   10b80:	20001005 	.word	0x20001005
   10b84:	20003670 	.word	0x20003670

00010b88 <bt_smp_send_security_req>:
{
   10b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10b8c:	4680      	mov	r8, r0
	smp = smp_chan_get(conn);
   10b8e:	f7fe f9b1 	bl	eef4 <smp_chan_get>
	if (!smp) {
   10b92:	4605      	mov	r5, r0
   10b94:	b3d0      	cbz	r0, 10c0c <bt_smp_send_security_req+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   10b96:	f100 0698 	add.w	r6, r0, #152	; 0x98
   10b9a:	2104      	movs	r1, #4
   10b9c:	4630      	mov	r0, r6
   10b9e:	f7fd ff85 	bl	eaac <atomic_test_bit>
   10ba2:	bbb0      	cbnz	r0, 10c12 <bt_smp_send_security_req+0x8a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   10ba4:	2103      	movs	r1, #3
   10ba6:	4630      	mov	r0, r6
   10ba8:	f7fd ff80 	bl	eaac <atomic_test_bit>
   10bac:	bba0      	cbnz	r0, 10c18 <bt_smp_send_security_req+0x90>
	if (!sec_level_reachable(conn)) {
   10bae:	f898 000a 	ldrb.w	r0, [r8, #10]
   10bb2:	f7fe f981 	bl	eeb8 <sec_level_reachable.isra.3>
   10bb6:	b390      	cbz	r0, 10c1e <bt_smp_send_security_req+0x96>
	if (_smp_init(smp) != 0) {
   10bb8:	4628      	mov	r0, r5
   10bba:	f7fe fbfe 	bl	f3ba <_smp_init>
   10bbe:	4604      	mov	r4, r0
   10bc0:	b120      	cbz	r0, 10bcc <bt_smp_send_security_req+0x44>
		return -ENOBUFS;
   10bc2:	f06f 0436 	mvn.w	r4, #54	; 0x36
}
   10bc6:	4620      	mov	r0, r4
   10bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
   10bcc:	200b      	movs	r0, #11
   10bce:	f7fe f9b9 	bl	ef44 <smp_create_pdu.isra.6>
	if (!req_buf) {
   10bd2:	4607      	mov	r7, r0
   10bd4:	2800      	cmp	r0, #0
   10bd6:	d0f4      	beq.n	10bc2 <bt_smp_send_security_req+0x3a>
	req = net_buf_add(req_buf, sizeof(*req));
   10bd8:	2101      	movs	r1, #1
   10bda:	3008      	adds	r0, #8
   10bdc:	f00e fb98 	bl	1f310 <net_buf_simple_add>
   10be0:	4681      	mov	r9, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
   10be2:	2009      	movs	r0, #9
   10be4:	f7fd ff44 	bl	ea70 <get_auth>
   10be8:	4623      	mov	r3, r4
   10bea:	f889 0000 	strb.w	r0, [r9]
   10bee:	463a      	mov	r2, r7
   10bf0:	4640      	mov	r0, r8
   10bf2:	2106      	movs	r1, #6
   10bf4:	f7fa ff06 	bl	ba04 <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   10bf8:	4630      	mov	r0, r6
   10bfa:	210d      	movs	r1, #13
   10bfc:	f7fe fbce 	bl	f39c <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   10c00:	2101      	movs	r1, #1
   10c02:	f105 0094 	add.w	r0, r5, #148	; 0x94
   10c06:	f7fe fbc9 	bl	f39c <atomic_set_bit>
	return 0;
   10c0a:	e7dc      	b.n	10bc6 <bt_smp_send_security_req+0x3e>
		return -ENOTCONN;
   10c0c:	f06f 0438 	mvn.w	r4, #56	; 0x38
   10c10:	e7d9      	b.n	10bc6 <bt_smp_send_security_req+0x3e>
		return -EIO;
   10c12:	f06f 0404 	mvn.w	r4, #4
   10c16:	e7d6      	b.n	10bc6 <bt_smp_send_security_req+0x3e>
		return -EBUSY;
   10c18:	f06f 040f 	mvn.w	r4, #15
   10c1c:	e7d3      	b.n	10bc6 <bt_smp_send_security_req+0x3e>
		return -EINVAL;
   10c1e:	f06f 0415 	mvn.w	r4, #21
   10c22:	e7d0      	b.n	10bc6 <bt_smp_send_security_req+0x3e>

00010c24 <bt_smp_send_pairing_req>:
{
   10c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c28:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   10c2a:	f7fe f963 	bl	eef4 <smp_chan_get>
	if (!smp) {
   10c2e:	4605      	mov	r5, r0
   10c30:	2800      	cmp	r0, #0
   10c32:	d051      	beq.n	10cd8 <bt_smp_send_pairing_req+0xb4>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   10c34:	f100 0798 	add.w	r7, r0, #152	; 0x98
   10c38:	2104      	movs	r1, #4
   10c3a:	4638      	mov	r0, r7
   10c3c:	f7fd ff36 	bl	eaac <atomic_test_bit>
   10c40:	2800      	cmp	r0, #0
   10c42:	d14c      	bne.n	10cde <bt_smp_send_pairing_req+0xba>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   10c44:	2103      	movs	r1, #3
   10c46:	4638      	mov	r0, r7
   10c48:	f7fd ff30 	bl	eaac <atomic_test_bit>
   10c4c:	2800      	cmp	r0, #0
   10c4e:	d149      	bne.n	10ce4 <bt_smp_send_pairing_req+0xc0>
	if (!sec_level_reachable(conn)) {
   10c50:	7aa0      	ldrb	r0, [r4, #10]
   10c52:	f7fe f931 	bl	eeb8 <sec_level_reachable.isra.3>
   10c56:	2800      	cmp	r0, #0
   10c58:	d047      	beq.n	10cea <bt_smp_send_pairing_req+0xc6>
	if (_smp_init(smp)) {
   10c5a:	4628      	mov	r0, r5
   10c5c:	f7fe fbad 	bl	f3ba <_smp_init>
   10c60:	4604      	mov	r4, r0
   10c62:	b120      	cbz	r0, 10c6e <bt_smp_send_pairing_req+0x4a>
		return -ENOBUFS;
   10c64:	f06f 0436 	mvn.w	r4, #54	; 0x36
}
   10c68:	4620      	mov	r0, r4
   10c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   10c6e:	2001      	movs	r0, #1
   10c70:	f7fe f968 	bl	ef44 <smp_create_pdu.isra.6>
	if (!req_buf) {
   10c74:	4680      	mov	r8, r0
   10c76:	2800      	cmp	r0, #0
   10c78:	d0f4      	beq.n	10c64 <bt_smp_send_pairing_req+0x40>
	req = net_buf_add(req_buf, sizeof(*req));
   10c7a:	2106      	movs	r1, #6
   10c7c:	3008      	adds	r0, #8
   10c7e:	f00e fb47 	bl	1f310 <net_buf_simple_add>
   10c82:	4606      	mov	r6, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
   10c84:	2009      	movs	r0, #9
   10c86:	f7fd fef3 	bl	ea70 <get_auth>
   10c8a:	70b0      	strb	r0, [r6, #2]
	req->io_capability = get_io_capa();
   10c8c:	f7fd feca 	bl	ea24 <get_io_capa>
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   10c90:	2310      	movs	r3, #16
   10c92:	70f3      	strb	r3, [r6, #3]
	req->init_key_dist = SEND_KEYS;
   10c94:	2205      	movs	r2, #5
	req->resp_key_dist = RECV_KEYS;
   10c96:	2307      	movs	r3, #7
	req->io_capability = get_io_capa();
   10c98:	7030      	strb	r0, [r6, #0]
	req->init_key_dist = SEND_KEYS;
   10c9a:	7132      	strb	r2, [r6, #4]
	req->resp_key_dist = RECV_KEYS;
   10c9c:	7173      	strb	r3, [r6, #5]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
   10c9e:	7074      	strb	r4, [r6, #1]
	smp->remote_dist = RECV_KEYS;
   10ca0:	f885 3172 	strb.w	r3, [r5, #370]	; 0x172
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   10ca4:	2301      	movs	r3, #1
   10ca6:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
	smp->local_dist = SEND_KEYS;
   10caa:	f885 2171 	strb.w	r2, [r5, #369]	; 0x171
	memcpy(smp->preq + 1, req, sizeof(*req));
   10cae:	4631      	mov	r1, r6
   10cb0:	2206      	movs	r2, #6
   10cb2:	f105 009e 	add.w	r0, r5, #158	; 0x9e
   10cb6:	f7f5 ffe7 	bl	6c88 <memcpy>
	smp_send(smp, req_buf, NULL);
   10cba:	4622      	mov	r2, r4
   10cbc:	4641      	mov	r1, r8
   10cbe:	4628      	mov	r0, r5
   10cc0:	f7fe f97e 	bl	efc0 <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   10cc4:	f105 0094 	add.w	r0, r5, #148	; 0x94
   10cc8:	2102      	movs	r1, #2
   10cca:	f7fe fb67 	bl	f39c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   10cce:	2103      	movs	r1, #3
   10cd0:	4638      	mov	r0, r7
   10cd2:	f7fe fb63 	bl	f39c <atomic_set_bit>
	return 0;
   10cd6:	e7c7      	b.n	10c68 <bt_smp_send_pairing_req+0x44>
		return -ENOTCONN;
   10cd8:	f06f 0438 	mvn.w	r4, #56	; 0x38
   10cdc:	e7c4      	b.n	10c68 <bt_smp_send_pairing_req+0x44>
		return -EIO;
   10cde:	f06f 0404 	mvn.w	r4, #4
   10ce2:	e7c1      	b.n	10c68 <bt_smp_send_pairing_req+0x44>
		return -EBUSY;
   10ce4:	f06f 040f 	mvn.w	r4, #15
   10ce8:	e7be      	b.n	10c68 <bt_smp_send_pairing_req+0x44>
		return -EINVAL;
   10cea:	f06f 0415 	mvn.w	r4, #21
   10cee:	e7bb      	b.n	10c68 <bt_smp_send_pairing_req+0x44>

00010cf0 <smp_security_request>:
{
   10cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10cf2:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   10cf4:	6804      	ldr	r4, [r0, #0]
   10cf6:	781d      	ldrb	r5, [r3, #0]
	if (sc_supported) {
   10cf8:	4b45      	ldr	r3, [pc, #276]	; (10e10 <smp_security_request+0x120>)
   10cfa:	781b      	ldrb	r3, [r3, #0]
{
   10cfc:	4606      	mov	r6, r0
	if (sc_supported) {
   10cfe:	b153      	cbz	r3, 10d16 <smp_security_request+0x26>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   10d00:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
   10d04:	6f23      	ldr	r3, [r4, #112]	; 0x70
   10d06:	b14b      	cbz	r3, 10d1c <smp_security_request+0x2c>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   10d08:	895b      	ldrh	r3, [r3, #10]
   10d0a:	f003 0324 	and.w	r3, r3, #36	; 0x24
   10d0e:	2b00      	cmp	r3, #0
   10d10:	d04b      	beq.n	10daa <smp_security_request+0xba>
	if (!conn->le.keys) {
   10d12:	6f20      	ldr	r0, [r4, #112]	; 0x70
   10d14:	e014      	b.n	10d40 <smp_security_request+0x50>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
   10d16:	f005 0507 	and.w	r5, r5, #7
   10d1a:	e7f3      	b.n	10d04 <smp_security_request+0x14>
					     &conn->le.dst);
   10d1c:	f104 0748 	add.w	r7, r4, #72	; 0x48
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   10d20:	463a      	mov	r2, r7
   10d22:	7a21      	ldrb	r1, [r4, #8]
   10d24:	2020      	movs	r0, #32
   10d26:	f000 fa39 	bl	1119c <bt_keys_find>
   10d2a:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys) {
   10d2c:	2800      	cmp	r0, #0
   10d2e:	d1f0      	bne.n	10d12 <smp_security_request+0x22>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   10d30:	463a      	mov	r2, r7
   10d32:	7a21      	ldrb	r1, [r4, #8]
   10d34:	2004      	movs	r0, #4
   10d36:	f000 fa31 	bl	1119c <bt_keys_find>
   10d3a:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
   10d3c:	2800      	cmp	r0, #0
   10d3e:	d034      	beq.n	10daa <smp_security_request+0xba>
	if ((auth & BT_SMP_AUTH_MITM) &&
   10d40:	076a      	lsls	r2, r5, #29
   10d42:	d539      	bpl.n	10db8 <smp_security_request+0xc8>
   10d44:	7a47      	ldrb	r7, [r0, #9]
   10d46:	f017 0701 	ands.w	r7, r7, #1
   10d4a:	d135      	bne.n	10db8 <smp_security_request+0xc8>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
   10d4c:	f7fd fe6a 	bl	ea24 <get_io_capa>
   10d50:	4b30      	ldr	r3, [pc, #192]	; (10e14 <smp_security_request+0x124>)
   10d52:	681b      	ldr	r3, [r3, #0]
   10d54:	2803      	cmp	r0, #3
   10d56:	f003 0307 	and.w	r3, r3, #7
   10d5a:	d012      	beq.n	10d82 <smp_security_request+0x92>
			BT_INFO("New auth requirements: 0x%x, repairing",
   10d5c:	2b02      	cmp	r3, #2
   10d5e:	d924      	bls.n	10daa <smp_security_request+0xba>
   10d60:	f04f 0300 	mov.w	r3, #0
   10d64:	2203      	movs	r2, #3
   10d66:	f362 0302 	bfi	r3, r2, #0, #3
   10d6a:	f367 03c5 	bfi	r3, r7, #3, #3
   10d6e:	492a      	ldr	r1, [pc, #168]	; (10e18 <smp_security_request+0x128>)
   10d70:	4a2a      	ldr	r2, [pc, #168]	; (10e1c <smp_security_request+0x12c>)
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   10d72:	482b      	ldr	r0, [pc, #172]	; (10e20 <smp_security_request+0x130>)
   10d74:	1a52      	subs	r2, r2, r1
   10d76:	08d2      	lsrs	r2, r2, #3
   10d78:	f362 138f 	bfi	r3, r2, #6, #10
   10d7c:	4929      	ldr	r1, [pc, #164]	; (10e24 <smp_security_request+0x134>)
   10d7e:	462a      	mov	r2, r5
   10d80:	e011      	b.n	10da6 <smp_security_request+0xb6>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
   10d82:	2b01      	cmp	r3, #1
   10d84:	d911      	bls.n	10daa <smp_security_request+0xba>
   10d86:	2202      	movs	r2, #2
   10d88:	f04f 0300 	mov.w	r3, #0
   10d8c:	f362 0302 	bfi	r3, r2, #0, #3
   10d90:	4921      	ldr	r1, [pc, #132]	; (10e18 <smp_security_request+0x128>)
   10d92:	4a22      	ldr	r2, [pc, #136]	; (10e1c <smp_security_request+0x12c>)
   10d94:	4824      	ldr	r0, [pc, #144]	; (10e28 <smp_security_request+0x138>)
   10d96:	1a52      	subs	r2, r2, r1
   10d98:	08d2      	lsrs	r2, r2, #3
   10d9a:	f367 03c5 	bfi	r3, r7, #3, #3
   10d9e:	4921      	ldr	r1, [pc, #132]	; (10e24 <smp_security_request+0x134>)
   10da0:	f362 138f 	bfi	r3, r2, #6, #10
   10da4:	462a      	mov	r2, r5
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   10da6:	f7f1 f9b5 	bl	2114 <log_2>
	if (bt_smp_send_pairing_req(conn) < 0) {
   10daa:	4620      	mov	r0, r4
   10dac:	f7ff ff3a 	bl	10c24 <bt_smp_send_pairing_req>
   10db0:	2800      	cmp	r0, #0
   10db2:	db22      	blt.n	10dfa <smp_security_request+0x10a>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   10db4:	210d      	movs	r1, #13
   10db6:	e024      	b.n	10e02 <smp_security_request+0x112>
	if ((auth & BT_SMP_AUTH_SC) &&
   10db8:	072b      	lsls	r3, r5, #28
   10dba:	d511      	bpl.n	10de0 <smp_security_request+0xf0>
   10dbc:	8943      	ldrh	r3, [r0, #10]
   10dbe:	f013 0220 	ands.w	r2, r3, #32
   10dc2:	d10d      	bne.n	10de0 <smp_security_request+0xf0>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   10dc4:	4b13      	ldr	r3, [pc, #76]	; (10e14 <smp_security_request+0x124>)
   10dc6:	681b      	ldr	r3, [r3, #0]
   10dc8:	f003 0307 	and.w	r3, r3, #7
   10dcc:	2b02      	cmp	r3, #2
   10dce:	d9ec      	bls.n	10daa <smp_security_request+0xba>
   10dd0:	f04f 0300 	mov.w	r3, #0
   10dd4:	2103      	movs	r1, #3
   10dd6:	f361 0302 	bfi	r3, r1, #0, #3
   10dda:	f362 03c5 	bfi	r3, r2, #3, #3
   10dde:	e7c6      	b.n	10d6e <smp_security_request+0x7e>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   10de0:	7a03      	ldrb	r3, [r0, #8]
   10de2:	9300      	str	r3, [sp, #0]
   10de4:	f100 0214 	add.w	r2, r0, #20
   10de8:	f100 0316 	add.w	r3, r0, #22
   10dec:	f100 010c 	add.w	r1, r0, #12
   10df0:	4620      	mov	r0, r4
   10df2:	f7f9 fda1 	bl	a938 <bt_conn_le_start_encryption>
   10df6:	2800      	cmp	r0, #0
   10df8:	da02      	bge.n	10e00 <smp_security_request+0x110>
		return BT_SMP_ERR_UNSPECIFIED;
   10dfa:	2008      	movs	r0, #8
}
   10dfc:	b003      	add	sp, #12
   10dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   10e00:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   10e02:	f106 0098 	add.w	r0, r6, #152	; 0x98
   10e06:	f7fe fac9 	bl	f39c <atomic_set_bit>
	return 0;
   10e0a:	2000      	movs	r0, #0
   10e0c:	e7f6      	b.n	10dfc <smp_security_request+0x10c>
   10e0e:	bf00      	nop
   10e10:	20001045 	.word	0x20001045
   10e14:	2000e248 	.word	0x2000e248
   10e18:	0002ef38 	.word	0x0002ef38
   10e1c:	0002efd0 	.word	0x0002efd0
   10e20:	000327ad 	.word	0x000327ad
   10e24:	00032352 	.word	0x00032352
   10e28:	000327d8 	.word	0x000327d8

00010e2c <bt_smp_sign_verify>:
{
   10e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   10e2e:	898b      	ldrh	r3, [r1, #12]
   10e30:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   10e32:	6889      	ldr	r1, [r1, #8]
{
   10e34:	4605      	mov	r5, r0
   10e36:	b085      	sub	sp, #20
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   10e38:	3b0c      	subs	r3, #12
   10e3a:	4419      	add	r1, r3
   10e3c:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   10e3e:	f105 0648 	add.w	r6, r5, #72	; 0x48
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   10e42:	a801      	add	r0, sp, #4
   10e44:	f7f5 ff20 	bl	6c88 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   10e48:	7a29      	ldrb	r1, [r5, #8]
   10e4a:	4632      	mov	r2, r6
   10e4c:	2010      	movs	r0, #16
   10e4e:	f000 f9a5 	bl	1119c <bt_keys_find>
	if (!keys) {
   10e52:	4605      	mov	r5, r0
   10e54:	b9f0      	cbnz	r0, 10e94 <bt_smp_sign_verify+0x68>
		BT_ERR("Unable to find Remote CSRK for %s",
   10e56:	4b40      	ldr	r3, [pc, #256]	; (10f58 <bt_smp_sign_verify+0x12c>)
   10e58:	681b      	ldr	r3, [r3, #0]
   10e5a:	0759      	lsls	r1, r3, #29
   10e5c:	d017      	beq.n	10e8e <bt_smp_sign_verify+0x62>
   10e5e:	2301      	movs	r3, #1
   10e60:	f04f 0400 	mov.w	r4, #0
   10e64:	f363 0402 	bfi	r4, r3, #0, #3
   10e68:	4a3c      	ldr	r2, [pc, #240]	; (10f5c <bt_smp_sign_verify+0x130>)
   10e6a:	4b3d      	ldr	r3, [pc, #244]	; (10f60 <bt_smp_sign_verify+0x134>)
   10e6c:	1ad2      	subs	r2, r2, r3
   10e6e:	08d2      	lsrs	r2, r2, #3
   10e70:	f360 04c5 	bfi	r4, r0, #3, #3
   10e74:	4630      	mov	r0, r6
   10e76:	f362 148f 	bfi	r4, r2, #6, #10
   10e7a:	f7f6 fbff 	bl	767c <bt_addr_le_str_real>
   10e7e:	f7f1 fac7 	bl	2410 <log_strdup>
   10e82:	4623      	mov	r3, r4
   10e84:	4602      	mov	r2, r0
   10e86:	4937      	ldr	r1, [pc, #220]	; (10f64 <bt_smp_sign_verify+0x138>)
   10e88:	4837      	ldr	r0, [pc, #220]	; (10f68 <bt_smp_sign_verify+0x13c>)
   10e8a:	f7f1 f943 	bl	2114 <log_2>
		return -ENOENT;
   10e8e:	f06f 0001 	mvn.w	r0, #1
   10e92:	e05e      	b.n	10f52 <bt_smp_sign_verify+0x126>
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
   10e94:	a904      	add	r1, sp, #16
   10e96:	6e03      	ldr	r3, [r0, #96]	; 0x60
   10e98:	f841 3d10 	str.w	r3, [r1, #-16]!
   10e9c:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
   10e9e:	68a0      	ldr	r0, [r4, #8]
   10ea0:	3b0c      	subs	r3, #12
   10ea2:	2204      	movs	r2, #4
   10ea4:	4418      	add	r0, r3
   10ea6:	f7f5 feef 	bl	6c88 <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
   10eaa:	89a2      	ldrh	r2, [r4, #12]
   10eac:	68a1      	ldr	r1, [r4, #8]
   10eae:	3a0c      	subs	r2, #12
   10eb0:	b292      	uxth	r2, r2
   10eb2:	f105 0050 	add.w	r0, r5, #80	; 0x50
   10eb6:	f7fd fe21 	bl	eafc <smp_sign_buf>
	if (err) {
   10eba:	4607      	mov	r7, r0
   10ebc:	b1f0      	cbz	r0, 10efc <bt_smp_sign_verify+0xd0>
		BT_ERR("Unable to create signature for %s",
   10ebe:	4b26      	ldr	r3, [pc, #152]	; (10f58 <bt_smp_sign_verify+0x12c>)
   10ec0:	681b      	ldr	r3, [r3, #0]
   10ec2:	075a      	lsls	r2, r3, #29
   10ec4:	d017      	beq.n	10ef6 <bt_smp_sign_verify+0xca>
   10ec6:	2301      	movs	r3, #1
   10ec8:	f04f 0400 	mov.w	r4, #0
   10ecc:	f363 0402 	bfi	r4, r3, #0, #3
   10ed0:	4a22      	ldr	r2, [pc, #136]	; (10f5c <bt_smp_sign_verify+0x130>)
   10ed2:	4b23      	ldr	r3, [pc, #140]	; (10f60 <bt_smp_sign_verify+0x134>)
   10ed4:	1ad2      	subs	r2, r2, r3
   10ed6:	08d2      	lsrs	r2, r2, #3
   10ed8:	f36f 04c5 	bfc	r4, #3, #3
   10edc:	4630      	mov	r0, r6
   10ede:	f362 148f 	bfi	r4, r2, #6, #10
   10ee2:	f7f6 fbcb 	bl	767c <bt_addr_le_str_real>
   10ee6:	f7f1 fa93 	bl	2410 <log_strdup>
   10eea:	4623      	mov	r3, r4
   10eec:	4602      	mov	r2, r0
   10eee:	491d      	ldr	r1, [pc, #116]	; (10f64 <bt_smp_sign_verify+0x138>)
   10ef0:	481e      	ldr	r0, [pc, #120]	; (10f6c <bt_smp_sign_verify+0x140>)
   10ef2:	f7f1 f90f 	bl	2114 <log_2>
		return -EIO;
   10ef6:	f06f 0004 	mvn.w	r0, #4
   10efa:	e02a      	b.n	10f52 <bt_smp_sign_verify+0x126>
   10efc:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
   10efe:	68a1      	ldr	r1, [r4, #8]
   10f00:	3b0c      	subs	r3, #12
   10f02:	220c      	movs	r2, #12
   10f04:	4419      	add	r1, r3
   10f06:	a801      	add	r0, sp, #4
   10f08:	f7f5 fe97 	bl	6c3a <memcmp>
   10f0c:	b1f0      	cbz	r0, 10f4c <bt_smp_sign_verify+0x120>
		BT_ERR("Unable to verify signature for %s",
   10f0e:	4b12      	ldr	r3, [pc, #72]	; (10f58 <bt_smp_sign_verify+0x12c>)
   10f10:	681b      	ldr	r3, [r3, #0]
   10f12:	075b      	lsls	r3, r3, #29
   10f14:	d017      	beq.n	10f46 <bt_smp_sign_verify+0x11a>
   10f16:	2301      	movs	r3, #1
   10f18:	f04f 0400 	mov.w	r4, #0
   10f1c:	f363 0402 	bfi	r4, r3, #0, #3
   10f20:	4a0e      	ldr	r2, [pc, #56]	; (10f5c <bt_smp_sign_verify+0x130>)
   10f22:	4b0f      	ldr	r3, [pc, #60]	; (10f60 <bt_smp_sign_verify+0x134>)
   10f24:	1ad2      	subs	r2, r2, r3
   10f26:	08d2      	lsrs	r2, r2, #3
   10f28:	f367 04c5 	bfi	r4, r7, #3, #3
   10f2c:	4630      	mov	r0, r6
   10f2e:	f362 148f 	bfi	r4, r2, #6, #10
   10f32:	f7f6 fba3 	bl	767c <bt_addr_le_str_real>
   10f36:	f7f1 fa6b 	bl	2410 <log_strdup>
   10f3a:	4623      	mov	r3, r4
   10f3c:	4602      	mov	r2, r0
   10f3e:	4909      	ldr	r1, [pc, #36]	; (10f64 <bt_smp_sign_verify+0x138>)
   10f40:	480b      	ldr	r0, [pc, #44]	; (10f70 <bt_smp_sign_verify+0x144>)
   10f42:	f7f1 f8e7 	bl	2114 <log_2>
		return -EBADMSG;
   10f46:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   10f4a:	e002      	b.n	10f52 <bt_smp_sign_verify+0x126>
	keys->remote_csrk.cnt++;
   10f4c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   10f4e:	3301      	adds	r3, #1
   10f50:	662b      	str	r3, [r5, #96]	; 0x60
}
   10f52:	b005      	add	sp, #20
   10f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f56:	bf00      	nop
   10f58:	2000e248 	.word	0x2000e248
   10f5c:	0002efd0 	.word	0x0002efd0
   10f60:	0002ef38 	.word	0x0002ef38
   10f64:	000323a1 	.word	0x000323a1
   10f68:	00032546 	.word	0x00032546
   10f6c:	0003256c 	.word	0x0003256c
   10f70:	00032592 	.word	0x00032592

00010f74 <bt_smp_update_keys>:
{
   10f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f76:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   10f78:	f7fd ffbc 	bl	eef4 <smp_chan_get>
	if (!smp) {
   10f7c:	4605      	mov	r5, r0
   10f7e:	2800      	cmp	r0, #0
   10f80:	d07e      	beq.n	11080 <bt_smp_update_keys+0x10c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   10f82:	f100 0698 	add.w	r6, r0, #152	; 0x98
   10f86:	2103      	movs	r1, #3
   10f88:	4630      	mov	r0, r6
   10f8a:	f7fd fd8f 	bl	eaac <atomic_test_bit>
   10f8e:	2800      	cmp	r0, #0
   10f90:	d076      	beq.n	11080 <bt_smp_update_keys+0x10c>
	if (conn->le.keys) {
   10f92:	6f20      	ldr	r0, [r4, #112]	; 0x70
   10f94:	b108      	cbz	r0, 10f9a <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   10f96:	f000 f977 	bl	11288 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   10f9a:	f104 0748 	add.w	r7, r4, #72	; 0x48
   10f9e:	4639      	mov	r1, r7
   10fa0:	7a20      	ldrb	r0, [r4, #8]
   10fa2:	f000 f8c3 	bl	1112c <bt_keys_get_addr>
   10fa6:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
   10fa8:	bb08      	cbnz	r0, 10fee <bt_smp_update_keys+0x7a>
		BT_ERR("Unable to get keys for %s",
   10faa:	4b36      	ldr	r3, [pc, #216]	; (11084 <bt_smp_update_keys+0x110>)
   10fac:	681b      	ldr	r3, [r3, #0]
   10fae:	075b      	lsls	r3, r3, #29
   10fb0:	d017      	beq.n	10fe2 <bt_smp_update_keys+0x6e>
   10fb2:	2301      	movs	r3, #1
   10fb4:	f04f 0400 	mov.w	r4, #0
   10fb8:	f363 0402 	bfi	r4, r3, #0, #3
   10fbc:	4a32      	ldr	r2, [pc, #200]	; (11088 <bt_smp_update_keys+0x114>)
   10fbe:	4b33      	ldr	r3, [pc, #204]	; (1108c <bt_smp_update_keys+0x118>)
   10fc0:	1ad2      	subs	r2, r2, r3
   10fc2:	08d2      	lsrs	r2, r2, #3
   10fc4:	f360 04c5 	bfi	r4, r0, #3, #3
   10fc8:	4638      	mov	r0, r7
   10fca:	f362 148f 	bfi	r4, r2, #6, #10
   10fce:	f7f6 fb55 	bl	767c <bt_addr_le_str_real>
   10fd2:	f7f1 fa1d 	bl	2410 <log_strdup>
   10fd6:	4623      	mov	r3, r4
   10fd8:	4602      	mov	r2, r0
   10fda:	492d      	ldr	r1, [pc, #180]	; (11090 <bt_smp_update_keys+0x11c>)
   10fdc:	482d      	ldr	r0, [pc, #180]	; (11094 <bt_smp_update_keys+0x120>)
   10fde:	f7f1 f899 	bl	2114 <log_2>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   10fe2:	4628      	mov	r0, r5
   10fe4:	2108      	movs	r1, #8
}
   10fe6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   10fea:	f7fe bdc5 	b.w	fb78 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   10fee:	210c      	movs	r1, #12
   10ff0:	4630      	mov	r0, r6
   10ff2:	f7fd fd5b 	bl	eaac <atomic_test_bit>
   10ff6:	b120      	cbz	r0, 11002 <bt_smp_update_keys+0x8e>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   10ff8:	6f22      	ldr	r2, [r4, #112]	; 0x70
   10ffa:	7a53      	ldrb	r3, [r2, #9]
   10ffc:	f043 0302 	orr.w	r3, r3, #2
   11000:	7253      	strb	r3, [r2, #9]
   11002:	6f22      	ldr	r2, [r4, #112]	; 0x70
	switch (smp->method) {
   11004:	f895 109c 	ldrb.w	r1, [r5, #156]	; 0x9c
   11008:	7a53      	ldrb	r3, [r2, #9]
   1100a:	3901      	subs	r1, #1
   1100c:	2902      	cmp	r1, #2
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1100e:	bf94      	ite	ls
   11010:	f043 0301 	orrls.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   11014:	f023 0301 	bichi.w	r3, r3, #1
   11018:	7253      	strb	r3, [r2, #9]
	return min(req->max_key_size, rsp->max_key_size);
   1101a:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   1101e:	f895 10a1 	ldrb.w	r1, [r5, #161]	; 0xa1
   11022:	428b      	cmp	r3, r1
   11024:	bf28      	it	cs
   11026:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   11028:	7213      	strb	r3, [r2, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1102a:	2105      	movs	r1, #5
   1102c:	4630      	mov	r0, r6
   1102e:	f7fd fd3d 	bl	eaac <atomic_test_bit>
   11032:	6f23      	ldr	r3, [r4, #112]	; 0x70
		conn->le.keys->flags |= BT_KEYS_SC;
   11034:	7a5a      	ldrb	r2, [r3, #9]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   11036:	b300      	cbz	r0, 1107a <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_SC;
   11038:	f042 0210 	orr.w	r2, r2, #16
   1103c:	725a      	strb	r2, [r3, #9]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1103e:	210b      	movs	r1, #11
   11040:	4630      	mov	r0, r6
   11042:	f7fd fd33 	bl	eaac <atomic_test_bit>
   11046:	b1d8      	cbz	r0, 11080 <bt_smp_update_keys+0x10c>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   11048:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1104a:	2120      	movs	r1, #32
   1104c:	f000 f918 	bl	11280 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   11050:	6f20      	ldr	r0, [r4, #112]	; 0x70
   11052:	f105 01db 	add.w	r1, r5, #219	; 0xdb
   11056:	2210      	movs	r2, #16
   11058:	3016      	adds	r0, #22
   1105a:	f7f5 fe15 	bl	6c88 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1105e:	6f20      	ldr	r0, [r4, #112]	; 0x70
   11060:	2208      	movs	r2, #8
   11062:	2100      	movs	r1, #0
   11064:	300c      	adds	r0, #12
   11066:	f7f5 fe3c 	bl	6ce2 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1106a:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1106c:	2202      	movs	r2, #2
   1106e:	2100      	movs	r1, #0
   11070:	3014      	adds	r0, #20
}
   11072:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   11076:	f7f5 be34 	b.w	6ce2 <memset>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1107a:	f022 0210 	bic.w	r2, r2, #16
   1107e:	725a      	strb	r2, [r3, #9]
}
   11080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11082:	bf00      	nop
   11084:	2000e248 	.word	0x2000e248
   11088:	0002efd0 	.word	0x0002efd0
   1108c:	0002ef38 	.word	0x0002ef38
   11090:	000323b4 	.word	0x000323b4
   11094:	0003273b 	.word	0x0003273b

00011098 <bt_smp_get_tk>:
{
   11098:	b538      	push	{r3, r4, r5, lr}
   1109a:	460d      	mov	r5, r1
	smp = smp_chan_get(conn);
   1109c:	f7fd ff2a 	bl	eef4 <smp_chan_get>
	if (!smp) {
   110a0:	4603      	mov	r3, r0
   110a2:	b908      	cbnz	r0, 110a8 <bt_smp_get_tk+0x10>
		return false;
   110a4:	2000      	movs	r0, #0
}
   110a6:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   110a8:	f100 0298 	add.w	r2, r0, #152	; 0x98
   110ac:	2103      	movs	r1, #3
   110ae:	4610      	mov	r0, r2
   110b0:	f7fd fcfc 	bl	eaac <atomic_test_bit>
   110b4:	2800      	cmp	r0, #0
   110b6:	d0f5      	beq.n	110a4 <bt_smp_get_tk+0xc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   110b8:	2101      	movs	r1, #1
   110ba:	4610      	mov	r0, r2
   110bc:	f7fd fcf6 	bl	eaac <atomic_test_bit>
   110c0:	2800      	cmp	r0, #0
   110c2:	d0ef      	beq.n	110a4 <bt_smp_get_tk+0xc>
	return min(req->max_key_size, rsp->max_key_size);
   110c4:	f893 40a8 	ldrb.w	r4, [r3, #168]	; 0xa8
   110c8:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
   110cc:	4294      	cmp	r4, r2
   110ce:	bf28      	it	cs
   110d0:	4614      	movcs	r4, r2
	memcpy(tk, smp->tk, enc_size);
   110d2:	4622      	mov	r2, r4
   110d4:	f103 01db 	add.w	r1, r3, #219	; 0xdb
   110d8:	4628      	mov	r0, r5
   110da:	f7f5 fdd5 	bl	6c88 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
   110de:	2c0f      	cmp	r4, #15
   110e0:	d805      	bhi.n	110ee <bt_smp_get_tk+0x56>
		(void)memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
   110e2:	f1c4 0210 	rsb	r2, r4, #16
   110e6:	2100      	movs	r1, #0
   110e8:	1928      	adds	r0, r5, r4
   110ea:	f7f5 fdfa 	bl	6ce2 <memset>
	return true;
   110ee:	2001      	movs	r0, #1
   110f0:	e7d9      	b.n	110a6 <bt_smp_get_tk+0xe>
	...

000110f4 <bt_smp_init>:
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

int bt_smp_init(void)
{
   110f4:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   110f6:	4b09      	ldr	r3, [pc, #36]	; (1111c <bt_smp_init+0x28>)
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) && !sc_supported) {
		BT_ERR("SC Pair Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
   110f8:	4809      	ldr	r0, [pc, #36]	; (11120 <bt_smp_init+0x2c>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   110fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   110fe:	f003 0306 	and.w	r3, r3, #6
   11102:	1f9a      	subs	r2, r3, #6
   11104:	4253      	negs	r3, r2
   11106:	4153      	adcs	r3, r2
   11108:	4a06      	ldr	r2, [pc, #24]	; (11124 <bt_smp_init+0x30>)
   1110a:	7013      	strb	r3, [r2, #0]
	bt_l2cap_le_fixed_chan_register(&chan);
   1110c:	f7fa fbfc 	bl	b908 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
   11110:	4805      	ldr	r0, [pc, #20]	; (11128 <bt_smp_init+0x34>)
   11112:	f7f9 fabd 	bl	a690 <bt_pub_key_gen>

	return smp_self_test();
}
   11116:	2000      	movs	r0, #0
   11118:	bd08      	pop	{r3, pc}
   1111a:	bf00      	nop
   1111c:	2000d778 	.word	0x2000d778
   11120:	2000da5c 	.word	0x2000da5c
   11124:	20001045 	.word	0x20001045
   11128:	2000da7c 	.word	0x2000da7c

0001112c <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BT_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(u8_t id, const bt_addr_le_t *addr)
{
   1112c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1112e:	4c11      	ldr	r4, [pc, #68]	; (11174 <bt_keys_get_addr+0x48>)
   11130:	7823      	ldrb	r3, [r4, #0]
   11132:	4283      	cmp	r3, r0
{
   11134:	4605      	mov	r5, r0
   11136:	460e      	mov	r6, r1
   11138:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1113a:	d00b      	beq.n	11154 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1113c:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   1113e:	2207      	movs	r2, #7
   11140:	4669      	mov	r1, sp
   11142:	480d      	ldr	r0, [pc, #52]	; (11178 <bt_keys_get_addr+0x4c>)
   11144:	9400      	str	r4, [sp, #0]
   11146:	f8cd 4003 	str.w	r4, [sp, #3]
   1114a:	f7f5 fd76 	bl	6c3a <memcmp>
   1114e:	b140      	cbz	r0, 11162 <bt_keys_get_addr+0x36>
		keys = &key_pool[i];
   11150:	4620      	mov	r0, r4
   11152:	e00d      	b.n	11170 <bt_keys_get_addr+0x44>
   11154:	2207      	movs	r2, #7
   11156:	1c60      	adds	r0, r4, #1
   11158:	f7f5 fd6f 	bl	6c3a <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1115c:	2800      	cmp	r0, #0
   1115e:	d1ed      	bne.n	1113c <bt_keys_get_addr+0x10>
   11160:	e7f6      	b.n	11150 <bt_keys_get_addr+0x24>
			keys->id = id;
   11162:	703d      	strb	r5, [r7, #0]
	memcpy(dst, src, sizeof(*dst));
   11164:	2207      	movs	r2, #7
   11166:	4631      	mov	r1, r6
   11168:	4803      	ldr	r0, [pc, #12]	; (11178 <bt_keys_get_addr+0x4c>)
   1116a:	f7f5 fd8d 	bl	6c88 <memcpy>
		keys = &key_pool[i];
   1116e:	4801      	ldr	r0, [pc, #4]	; (11174 <bt_keys_get_addr+0x48>)
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
   11170:	b003      	add	sp, #12
   11172:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11174:	20001048 	.word	0x20001048
   11178:	20001049 	.word	0x20001049

0001117c <bt_keys_foreach>:
		     void *data)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1117c:	4b06      	ldr	r3, [pc, #24]	; (11198 <bt_keys_foreach+0x1c>)
{
   1117e:	b410      	push	{r4}
   11180:	460c      	mov	r4, r1
		if ((key_pool[i].keys & type)) {
   11182:	8959      	ldrh	r1, [r3, #10]
   11184:	4201      	tst	r1, r0
   11186:	d004      	beq.n	11192 <bt_keys_foreach+0x16>
			func(&key_pool[i], data);
   11188:	4618      	mov	r0, r3
   1118a:	4611      	mov	r1, r2
   1118c:	4623      	mov	r3, r4
		}
	}
}
   1118e:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   11190:	4718      	bx	r3
}
   11192:	bc10      	pop	{r4}
   11194:	4770      	bx	lr
   11196:	bf00      	nop
   11198:	20001048 	.word	0x20001048

0001119c <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, u8_t id, const bt_addr_le_t *addr)
{
   1119c:	b538      	push	{r3, r4, r5, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1119e:	4c0a      	ldr	r4, [pc, #40]	; (111c8 <bt_keys_find+0x2c>)
   111a0:	8963      	ldrh	r3, [r4, #10]
   111a2:	4018      	ands	r0, r3
{
   111a4:	460d      	mov	r5, r1
   111a6:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   111a8:	d00a      	beq.n	111c0 <bt_keys_find+0x24>
   111aa:	7823      	ldrb	r3, [r4, #0]
   111ac:	42ab      	cmp	r3, r5
   111ae:	d108      	bne.n	111c2 <bt_keys_find+0x26>
	return memcmp(a, b, sizeof(*a));
   111b0:	2207      	movs	r2, #7
   111b2:	1c60      	adds	r0, r4, #1
   111b4:	f7f5 fd41 	bl	6c3a <memcmp>
   111b8:	2800      	cmp	r0, #0
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
   111ba:	bf0c      	ite	eq
   111bc:	4620      	moveq	r0, r4
   111be:	2000      	movne	r0, #0
		}
	}

	return NULL;
}
   111c0:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   111c2:	2000      	movs	r0, #0
   111c4:	e7fc      	b.n	111c0 <bt_keys_find+0x24>
   111c6:	bf00      	nop
   111c8:	20001048 	.word	0x20001048

000111cc <bt_keys_get_type>:

struct bt_keys *bt_keys_get_type(int type, u8_t id, const bt_addr_le_t *addr)
{
   111cc:	b570      	push	{r4, r5, r6, lr}
   111ce:	4604      	mov	r4, r0
   111d0:	460d      	mov	r5, r1
   111d2:	4616      	mov	r6, r2
	struct bt_keys *keys;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	keys = bt_keys_find(type, id, addr);
   111d4:	f7ff ffe2 	bl	1119c <bt_keys_find>
	if (keys) {
   111d8:	b938      	cbnz	r0, 111ea <bt_keys_get_type+0x1e>
		return keys;
	}

	keys = bt_keys_get_addr(id, addr);
   111da:	4631      	mov	r1, r6
   111dc:	4628      	mov	r0, r5
   111de:	f7ff ffa5 	bl	1112c <bt_keys_get_addr>
	if (!keys) {
   111e2:	b110      	cbz	r0, 111ea <bt_keys_get_type+0x1e>
	return NULL;
}

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   111e4:	8943      	ldrh	r3, [r0, #10]
   111e6:	431c      	orrs	r4, r3
   111e8:	8144      	strh	r4, [r0, #10]
}
   111ea:	bd70      	pop	{r4, r5, r6, pc}

000111ec <bt_keys_find_irk>:
{
   111ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   111ee:	780b      	ldrb	r3, [r1, #0]
   111f0:	2b01      	cmp	r3, #1
   111f2:	4606      	mov	r6, r0
   111f4:	460d      	mov	r5, r1
   111f6:	d001      	beq.n	111fc <bt_keys_find_irk+0x10>
		return NULL;
   111f8:	2000      	movs	r0, #0
}
   111fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   111fc:	798b      	ldrb	r3, [r1, #6]
   111fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   11202:	2b40      	cmp	r3, #64	; 0x40
   11204:	d1f8      	bne.n	111f8 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   11206:	4c13      	ldr	r4, [pc, #76]	; (11254 <bt_keys_find_irk+0x68>)
   11208:	8963      	ldrh	r3, [r4, #10]
   1120a:	f013 0f02 	tst.w	r3, #2
   1120e:	4627      	mov	r7, r4
   11210:	d00b      	beq.n	1122a <bt_keys_find_irk+0x3e>
		if (key_pool[i].id == id &&
   11212:	7823      	ldrb	r3, [r4, #0]
   11214:	4283      	cmp	r3, r0
   11216:	d108      	bne.n	1122a <bt_keys_find_irk+0x3e>
	return memcmp(a, b, sizeof(*a));
   11218:	2206      	movs	r2, #6
   1121a:	f104 0136 	add.w	r1, r4, #54	; 0x36
   1121e:	1c68      	adds	r0, r5, #1
   11220:	f7f5 fd0b 	bl	6c3a <memcmp>
   11224:	b908      	cbnz	r0, 1122a <bt_keys_find_irk+0x3e>
			return &key_pool[i];
   11226:	4620      	mov	r0, r4
   11228:	e7e7      	b.n	111fa <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1122a:	897b      	ldrh	r3, [r7, #10]
   1122c:	079b      	lsls	r3, r3, #30
   1122e:	d5e3      	bpl.n	111f8 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   11230:	783b      	ldrb	r3, [r7, #0]
   11232:	42b3      	cmp	r3, r6
   11234:	d1e0      	bne.n	111f8 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   11236:	3501      	adds	r5, #1
   11238:	4629      	mov	r1, r5
   1123a:	4807      	ldr	r0, [pc, #28]	; (11258 <bt_keys_find_irk+0x6c>)
   1123c:	f7f6 fa79 	bl	7732 <bt_rpa_irk_matches>
   11240:	2800      	cmp	r0, #0
   11242:	d0d9      	beq.n	111f8 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   11244:	2206      	movs	r2, #6
   11246:	4629      	mov	r1, r5
   11248:	4804      	ldr	r0, [pc, #16]	; (1125c <bt_keys_find_irk+0x70>)
   1124a:	f7f5 fd1d 	bl	6c88 <memcpy>
			return &key_pool[i];
   1124e:	4801      	ldr	r0, [pc, #4]	; (11254 <bt_keys_find_irk+0x68>)
   11250:	e7d3      	b.n	111fa <bt_keys_find_irk+0xe>
   11252:	bf00      	nop
   11254:	20001048 	.word	0x20001048
   11258:	2000106e 	.word	0x2000106e
   1125c:	2000107e 	.word	0x2000107e

00011260 <bt_keys_find_addr>:
{
   11260:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   11262:	4c06      	ldr	r4, [pc, #24]	; (1127c <bt_keys_find_addr+0x1c>)
   11264:	7823      	ldrb	r3, [r4, #0]
   11266:	4283      	cmp	r3, r0
   11268:	d104      	bne.n	11274 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1126a:	2207      	movs	r2, #7
   1126c:	1c60      	adds	r0, r4, #1
   1126e:	f7f5 fce4 	bl	6c3a <memcmp>
   11272:	b108      	cbz	r0, 11278 <bt_keys_find_addr+0x18>
	return NULL;
   11274:	2000      	movs	r0, #0
}
   11276:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   11278:	4620      	mov	r0, r4
   1127a:	e7fc      	b.n	11276 <bt_keys_find_addr+0x16>
   1127c:	20001048 	.word	0x20001048

00011280 <bt_keys_add_type>:
	keys->keys |= type;
   11280:	8943      	ldrh	r3, [r0, #10]
   11282:	4319      	orrs	r1, r3
   11284:	8141      	strh	r1, [r0, #10]
}
   11286:	4770      	bx	lr

00011288 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->keys & BT_KEYS_IRK) {
   11288:	8943      	ldrh	r3, [r0, #10]
   1128a:	079b      	lsls	r3, r3, #30
{
   1128c:	b510      	push	{r4, lr}
   1128e:	4604      	mov	r4, r0
	if (keys->keys & BT_KEYS_IRK) {
   11290:	d501      	bpl.n	11296 <bt_keys_clear+0xe>
		bt_id_del(keys);
   11292:	f7f6 ffb3 	bl	81fc <bt_id_del>

		BT_DBG("Deleting key %s", key);
		settings_save_one(key, NULL);
	}

	(void)memset(keys, 0, sizeof(*keys));
   11296:	4620      	mov	r0, r4
   11298:	2280      	movs	r2, #128	; 0x80
   1129a:	2100      	movs	r1, #0
}
   1129c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   112a0:	f7f5 bd1f 	b.w	6ce2 <memset>

000112a4 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
   112a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   112a6:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   112a8:	1dc3      	adds	r3, r0, #7
   112aa:	f023 0303 	bic.w	r3, r3, #3
{
   112ae:	460e      	mov	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   112b0:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   112b2:	3a01      	subs	r2, #1
   112b4:	b294      	uxth	r4, r2
{
   112b6:	4605      	mov	r5, r0
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   112b8:	2204      	movs	r2, #4
   112ba:	2100      	movs	r1, #0
   112bc:	fb06 0004 	mla	r0, r6, r4, r0
   112c0:	f7f5 fd0f 	bl	6ce2 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   112c4:	f64f 77ff 	movw	r7, #65535	; 0xffff
   112c8:	3c01      	subs	r4, #1
   112ca:	b2a4      	uxth	r4, r4
   112cc:	42bc      	cmp	r4, r7
   112ce:	d101      	bne.n	112d4 <mem_init+0x30>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   112d0:	b003      	add	sp, #12
   112d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   112d4:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
   112d8:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   112da:	2204      	movs	r2, #4
   112dc:	1b80      	subs	r0, r0, r6
   112de:	eb0d 0102 	add.w	r1, sp, r2
   112e2:	4428      	add	r0, r5
		next = (u32_t)((u8_t *) mem_pool +
   112e4:	9301      	str	r3, [sp, #4]
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   112e6:	f7f5 fccf 	bl	6c88 <memcpy>
   112ea:	e7ed      	b.n	112c8 <mem_init+0x24>

000112ec <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   112ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   112ee:	6804      	ldr	r4, [r0, #0]
{
   112f0:	4606      	mov	r6, r0
	if (*mem_head) {
   112f2:	b18c      	cbz	r4, 11318 <mem_acquire+0x2c>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   112f4:	1de3      	adds	r3, r4, #7
   112f6:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   112fa:	2204      	movs	r2, #4
   112fc:	4621      	mov	r1, r4
   112fe:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   11302:	881d      	ldrh	r5, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   11304:	f7f5 fcc0 	bl	6c88 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   11308:	9b01      	ldr	r3, [sp, #4]
   1130a:	b123      	cbz	r3, 11316 <mem_acquire+0x2a>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   1130c:	1dda      	adds	r2, r3, #7
   1130e:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   11312:	3d01      	subs	r5, #1
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   11314:	8015      	strh	r5, [r2, #0]
				free_count;
		}

		*mem_head = head;
   11316:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
   11318:	4620      	mov	r0, r4
   1131a:	b002      	add	sp, #8
   1131c:	bd70      	pop	{r4, r5, r6, pc}

0001131e <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   1131e:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   11320:	680c      	ldr	r4, [r1, #0]
{
   11322:	4606      	mov	r6, r0
   11324:	460d      	mov	r5, r1
	if (*mem_head) {
   11326:	b11c      	cbz	r4, 11330 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   11328:	1de3      	adds	r3, r4, #7
   1132a:	f023 0303 	bic.w	r3, r3, #3
   1132e:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   11330:	2204      	movs	r2, #4
   11332:	4629      	mov	r1, r5
   11334:	4630      	mov	r0, r6
   11336:	f7f5 fca7 	bl	6c88 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   1133a:	1df2      	adds	r2, r6, #7
   1133c:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   11340:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   11342:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   11344:	602e      	str	r6, [r5, #0]
}
   11346:	bd70      	pop	{r4, r5, r6, pc}

00011348 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
   11348:	b118      	cbz	r0, 11352 <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
   1134a:	3007      	adds	r0, #7
   1134c:	f020 0003 	bic.w	r0, r0, #3
   11350:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
   11352:	4770      	bx	lr

00011354 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
   11354:	fb02 0001 	mla	r0, r2, r1, r0
   11358:	4770      	bx	lr

0001135a <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
   1135a:	1a40      	subs	r0, r0, r1
   1135c:	b280      	uxth	r0, r0
}
   1135e:	fbb0 f0f2 	udiv	r0, r0, r2
   11362:	4770      	bx	lr

00011364 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
   11364:	b510      	push	{r4, lr}
	src += len;
   11366:	4411      	add	r1, r2
   11368:	3801      	subs	r0, #1
	while (len--) {
   1136a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1136e:	3a01      	subs	r2, #1
   11370:	b292      	uxth	r2, r2
   11372:	429a      	cmp	r2, r3
   11374:	d100      	bne.n	11378 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   11376:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   11378:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   1137c:	f800 4f01 	strb.w	r4, [r0, #1]!
   11380:	e7f5      	b.n	1136e <mem_rcopy+0xa>

00011382 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
   11382:	4401      	add	r1, r0
	while (len--) {
   11384:	4288      	cmp	r0, r1
   11386:	d101      	bne.n	1138c <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
   11388:	2000      	movs	r0, #0
   1138a:	4770      	bx	lr
		if (*src++) {
   1138c:	f810 3b01 	ldrb.w	r3, [r0], #1
   11390:	2b00      	cmp	r3, #0
   11392:	d0f7      	beq.n	11384 <mem_nz+0x2>
			return 1;
   11394:	2001      	movs	r0, #1
}
   11396:	4770      	bx	lr

00011398 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
   11398:	6010      	str	r0, [r2, #0]
   1139a:	6008      	str	r0, [r1, #0]

	return link;
}
   1139c:	4770      	bx	lr

0001139e <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   1139e:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
   113a0:	6814      	ldr	r4, [r2, #0]
   113a2:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
   113a4:	6814      	ldr	r4, [r2, #0]
   113a6:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
   113a8:	6010      	str	r0, [r2, #0]

	return link;
}
   113aa:	bd10      	pop	{r4, pc}

000113ac <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
   113ac:	4288      	cmp	r0, r1
   113ae:	d003      	beq.n	113b8 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
   113b0:	b11a      	cbz	r2, 113ba <memq_peek+0xe>
		*mem = head->mem;
   113b2:	6843      	ldr	r3, [r0, #4]
   113b4:	6013      	str	r3, [r2, #0]
   113b6:	4770      	bx	lr
		return NULL;
   113b8:	2000      	movs	r0, #0
	}

	return head;
}
   113ba:	4770      	bx	lr

000113bc <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
   113bc:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   113be:	4283      	cmp	r3, r0
   113c0:	d007      	beq.n	113d2 <memq_dequeue+0x16>
	if (mem) {
   113c2:	b10a      	cbz	r2, 113c8 <memq_dequeue+0xc>
		*mem = head->mem;
   113c4:	6858      	ldr	r0, [r3, #4]
   113c6:	6010      	str	r0, [r2, #0]
	if (!link) {
   113c8:	b10b      	cbz	r3, 113ce <memq_dequeue+0x12>
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
   113ca:	681a      	ldr	r2, [r3, #0]
   113cc:	600a      	str	r2, [r1, #0]

	return link;
}
   113ce:	4618      	mov	r0, r3
   113d0:	4770      	bx	lr
		return NULL;
   113d2:	2300      	movs	r3, #0
   113d4:	e7fb      	b.n	113ce <memq_dequeue+0x12>
	...

000113d8 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
   113d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
   113dc:	4f11      	ldr	r7, [pc, #68]	; (11424 <mayfly_init+0x4c>)
   113de:	f8df 9048 	ldr.w	r9, [pc, #72]	; 11428 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
   113e2:	2604      	movs	r6, #4
	while (callee_id--) {
   113e4:	3e01      	subs	r6, #1
   113e6:	b2f6      	uxtb	r6, r6
   113e8:	2eff      	cmp	r6, #255	; 0xff
   113ea:	d019      	beq.n	11420 <mayfly_init+0x48>
   113ec:	b233      	sxth	r3, r6
   113ee:	ea4f 0883 	mov.w	r8, r3, lsl #2
   113f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   113f6:	011d      	lsls	r5, r3, #4
		caller_id = MAYFLY_CALLER_COUNT;
   113f8:	2404      	movs	r4, #4
   113fa:	f04f 0a0c 	mov.w	sl, #12
   113fe:	e00a      	b.n	11416 <mayfly_init+0x3e>
   11400:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
   11404:	1d0a      	adds	r2, r1, #4
   11406:	eb04 0008 	add.w	r0, r4, r8
   1140a:	443a      	add	r2, r7
   1140c:	4439      	add	r1, r7
   1140e:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
   11412:	f7ff ffc1 	bl	11398 <memq_init>
		while (caller_id--) {
   11416:	3c01      	subs	r4, #1
   11418:	b2e4      	uxtb	r4, r4
   1141a:	2cff      	cmp	r4, #255	; 0xff
   1141c:	d1f0      	bne.n	11400 <mayfly_init+0x28>
   1141e:	e7e1      	b.n	113e4 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   11420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11424:	20001148 	.word	0x20001148
   11428:	200010c8 	.word	0x200010c8

0001142c <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
   1142c:	b4f0      	push	{r4, r5, r6, r7}
   1142e:	4b12      	ldr	r3, [pc, #72]	; (11478 <mayfly_enable+0x4c>)
   11430:	4605      	mov	r5, r0
   11432:	460f      	mov	r7, r1
   11434:	260c      	movs	r6, #12
   11436:	2430      	movs	r4, #48	; 0x30
	if (enable) {
   11438:	b172      	cbz	r2, 11458 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
   1143a:	4361      	muls	r1, r4
   1143c:	fb06 1400 	mla	r4, r6, r0, r1
   11440:	4423      	add	r3, r4
   11442:	7a59      	ldrb	r1, [r3, #9]
   11444:	7a18      	ldrb	r0, [r3, #8]
   11446:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   11448:	bf04      	itt	eq
   1144a:	3101      	addeq	r1, #1
   1144c:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   1144e:	4628      	mov	r0, r5
   11450:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
   11452:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
   11454:	f00d bcec 	b.w	1ee30 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   11458:	434c      	muls	r4, r1
   1145a:	fb06 4400 	mla	r4, r6, r0, r4
   1145e:	4423      	add	r3, r4
   11460:	7a9c      	ldrb	r4, [r3, #10]
   11462:	7ada      	ldrb	r2, [r3, #11]
   11464:	42a2      	cmp	r2, r4
   11466:	d104      	bne.n	11472 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
   11468:	3201      	adds	r2, #1
   1146a:	729a      	strb	r2, [r3, #10]
}
   1146c:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
   1146e:	f00d bd53 	b.w	1ef18 <mayfly_pend>
}
   11472:	bcf0      	pop	{r4, r5, r6, r7}
   11474:	4770      	bx	lr
   11476:	bf00      	nop
   11478:	20001148 	.word	0x20001148

0001147c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
   1147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1147e:	4605      	mov	r5, r0
   11480:	460e      	mov	r6, r1
   11482:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   11484:	b18a      	cbz	r2, 114aa <mayfly_enqueue+0x2e>
   11486:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
   11488:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   1148a:	7820      	ldrb	r0, [r4, #0]
   1148c:	1a80      	subs	r0, r0, r2
	if (state != 0) {
   1148e:	f010 0703 	ands.w	r7, r0, #3
   11492:	d029      	beq.n	114e8 <mayfly_enqueue+0x6c>
		if (chain) {
   11494:	b303      	cbz	r3, 114d8 <mayfly_enqueue+0x5c>
			if (state != 1) {
   11496:	2f01      	cmp	r7, #1
   11498:	d039      	beq.n	1150e <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
   1149a:	3201      	adds	r2, #1
   1149c:	b2d2      	uxtb	r2, r2
   1149e:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   114a0:	4631      	mov	r1, r6
   114a2:	4628      	mov	r0, r5
   114a4:	f00d fd38 	bl	1ef18 <mayfly_pend>
   114a8:	e01c      	b.n	114e4 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   114aa:	f00d fd23 	bl	1eef4 <mayfly_prio_is_equal>
   114ae:	2800      	cmp	r0, #0
   114b0:	d0e9      	beq.n	11486 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   114b2:	4631      	mov	r1, r6
   114b4:	4628      	mov	r0, r5
   114b6:	f00d fced 	bl	1ee94 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   114ba:	2800      	cmp	r0, #0
   114bc:	d0e3      	beq.n	11486 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   114be:	2330      	movs	r3, #48	; 0x30
   114c0:	220c      	movs	r2, #12
   114c2:	4373      	muls	r3, r6
   114c4:	fb02 3305 	mla	r3, r2, r5, r3
   114c8:	4a12      	ldr	r2, [pc, #72]	; (11514 <mayfly_enqueue+0x98>)
   114ca:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
   114cc:	7a93      	ldrb	r3, [r2, #10]
   114ce:	7ad2      	ldrb	r2, [r2, #11]
   114d0:	1a9b      	subs	r3, r3, r2
   114d2:	bf18      	it	ne
   114d4:	2301      	movne	r3, #1
   114d6:	e7d7      	b.n	11488 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
   114d8:	3202      	adds	r2, #2
   114da:	b2d2      	uxtb	r2, r2
   114dc:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
   114de:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   114e2:	4798      	blx	r3
		return 0;
   114e4:	2000      	movs	r0, #0

	return 0;
}
   114e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
   114e8:	2b00      	cmp	r3, #0
   114ea:	d0f8      	beq.n	114de <mayfly_enqueue+0x62>
	m->_req = ack + 1;
   114ec:	3201      	adds	r2, #1
   114ee:	b2d2      	uxtb	r2, r2
   114f0:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   114f2:	2304      	movs	r3, #4
   114f4:	2230      	movs	r2, #48	; 0x30
   114f6:	fb12 3206 	smlabb	r2, r2, r6, r3
   114fa:	230c      	movs	r3, #12
   114fc:	fb13 2305 	smlabb	r3, r3, r5, r2
   11500:	4a04      	ldr	r2, [pc, #16]	; (11514 <mayfly_enqueue+0x98>)
   11502:	6860      	ldr	r0, [r4, #4]
   11504:	441a      	add	r2, r3
   11506:	4621      	mov	r1, r4
   11508:	f7ff ff49 	bl	1139e <memq_enqueue>
   1150c:	e7c8      	b.n	114a0 <mayfly_enqueue+0x24>
			return 1;
   1150e:	4638      	mov	r0, r7
   11510:	e7e9      	b.n	114e6 <mayfly_enqueue+0x6a>
   11512:	bf00      	nop
   11514:	20001148 	.word	0x20001148

00011518 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
   11518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1151c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   11520:	b089      	sub	sp, #36	; 0x24
   11522:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
   11524:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   11528:	4e43      	ldr	r6, [pc, #268]	; (11638 <mayfly_run+0x120>)
   1152a:	9304      	str	r3, [sp, #16]
{
   1152c:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
   1152e:	2404      	movs	r4, #4
	u8_t disable = 0;
   11530:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
   11534:	3c01      	subs	r4, #1
   11536:	b2e4      	uxtb	r4, r4
   11538:	2cff      	cmp	r4, #255	; 0xff
   1153a:	d10b      	bne.n	11554 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   1153c:	9b01      	ldr	r3, [sp, #4]
   1153e:	2b00      	cmp	r3, #0
   11540:	d072      	beq.n	11628 <mayfly_run+0x110>
   11542:	f1b8 0f00 	cmp.w	r8, #0
   11546:	d16f      	bne.n	11628 <mayfly_run+0x110>
		mayfly_enable_cb(callee_id, callee_id, 0);
   11548:	4642      	mov	r2, r8
   1154a:	4629      	mov	r1, r5
   1154c:	4628      	mov	r0, r5
   1154e:	f00d fc6f 	bl	1ee30 <mayfly_enable_cb>
   11552:	e069      	b.n	11628 <mayfly_run+0x110>
		struct mayfly *m = 0;
   11554:	f10d 0b20 	add.w	fp, sp, #32
   11558:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   1155a:	270c      	movs	r7, #12
		struct mayfly *m = 0;
   1155c:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
   11560:	f04f 0930 	mov.w	r9, #48	; 0x30
   11564:	fb07 f304 	mul.w	r3, r7, r4
   11568:	fb09 3005 	mla	r0, r9, r5, r3
   1156c:	1831      	adds	r1, r6, r0
   1156e:	465a      	mov	r2, fp
   11570:	6849      	ldr	r1, [r1, #4]
   11572:	5830      	ldr	r0, [r6, r0]
   11574:	9302      	str	r3, [sp, #8]
   11576:	f7ff ff19 	bl	113ac <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
   1157a:	9b04      	ldr	r3, [sp, #16]
   1157c:	fb17 3704 	smlabb	r7, r7, r4, r3
   11580:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
   11582:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
   11584:	9303      	str	r3, [sp, #12]
		while (link) {
   11586:	f1ba 0f00 	cmp.w	sl, #0
   1158a:	d032      	beq.n	115f2 <mayfly_run+0xda>
			req = m->_req;
   1158c:	9b07      	ldr	r3, [sp, #28]
   1158e:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
   11590:	785a      	ldrb	r2, [r3, #1]
   11592:	1abf      	subs	r7, r7, r2
   11594:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
   11598:	2f01      	cmp	r7, #1
   1159a:	d104      	bne.n	115a6 <mayfly_run+0x8e>
				m->_ack--;
   1159c:	3a01      	subs	r2, #1
   1159e:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
   115a0:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
   115a4:	4790      	blx	r2
			req = m->_req;
   115a6:	9a07      	ldr	r2, [sp, #28]
   115a8:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
   115aa:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
   115ac:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
   115ae:	1a9a      	subs	r2, r3, r2
   115b0:	f002 0203 	and.w	r2, r2, #3
   115b4:	2a01      	cmp	r2, #1
   115b6:	9305      	str	r3, [sp, #20]
   115b8:	d00d      	beq.n	115d6 <mayfly_run+0xbe>
				memq_dequeue(mft[callee_id][caller_id].tail,
   115ba:	9b02      	ldr	r3, [sp, #8]
   115bc:	9903      	ldr	r1, [sp, #12]
   115be:	fb09 3005 	mla	r0, r9, r5, r3
   115c2:	4430      	add	r0, r6
   115c4:	2200      	movs	r2, #0
   115c6:	6840      	ldr	r0, [r0, #4]
   115c8:	f7ff fef8 	bl	113bc <memq_dequeue>
				m->_link = link;
   115cc:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
   115ce:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
   115d0:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
   115d4:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
   115d6:	9b02      	ldr	r3, [sp, #8]
   115d8:	fb09 3305 	mla	r3, r9, r5, r3
   115dc:	18f1      	adds	r1, r6, r3
   115de:	465a      	mov	r2, fp
   115e0:	6849      	ldr	r1, [r1, #4]
   115e2:	58f0      	ldr	r0, [r6, r3]
   115e4:	f7ff fee2 	bl	113ac <memq_peek>
			if (state == 1) {
   115e8:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   115ea:	4682      	mov	sl, r0
			if (state == 1) {
   115ec:	d1cb      	bne.n	11586 <mayfly_run+0x6e>
				if (caller_id || link) {
   115ee:	b9bc      	cbnz	r4, 11620 <mayfly_run+0x108>
   115f0:	b9b0      	cbnz	r0, 11620 <mayfly_run+0x108>
		if (mft[callee_id][caller_id].disable_req !=
   115f2:	2230      	movs	r2, #48	; 0x30
   115f4:	230c      	movs	r3, #12
   115f6:	436a      	muls	r2, r5
   115f8:	fb03 2204 	mla	r2, r3, r4, r2
   115fc:	4432      	add	r2, r6
   115fe:	7a91      	ldrb	r1, [r2, #10]
   11600:	7ad0      	ldrb	r0, [r2, #11]
   11602:	4288      	cmp	r0, r1
   11604:	d113      	bne.n	1162e <mayfly_run+0x116>
		if (mft[callee_id][caller_id].enable_req !=
   11606:	2230      	movs	r2, #48	; 0x30
   11608:	436a      	muls	r2, r5
   1160a:	fb03 2304 	mla	r3, r3, r4, r2
   1160e:	4433      	add	r3, r6
   11610:	7a1a      	ldrb	r2, [r3, #8]
   11612:	7a59      	ldrb	r1, [r3, #9]
   11614:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
   11616:	bf1c      	itt	ne
   11618:	725a      	strbne	r2, [r3, #9]
			enable = 1;
   1161a:	f04f 0801 	movne.w	r8, #1
   1161e:	e789      	b.n	11534 <mayfly_run+0x1c>
					mayfly_pend(callee_id, callee_id);
   11620:	4629      	mov	r1, r5
   11622:	4628      	mov	r0, r5
   11624:	f00d fc78 	bl	1ef18 <mayfly_pend>
	}
}
   11628:	b009      	add	sp, #36	; 0x24
   1162a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
   1162e:	72d1      	strb	r1, [r2, #11]
			disable = 1;
   11630:	2201      	movs	r2, #1
   11632:	9201      	str	r2, [sp, #4]
   11634:	e7e7      	b.n	11606 <mayfly_run+0xee>
   11636:	bf00      	nop
   11638:	20001148 	.word	0x20001148

0001163c <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
   1163c:	b510      	push	{r4, lr}
   1163e:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
   11640:	2000      	movs	r0, #0

	while (octets_len--) {
   11642:	3901      	subs	r1, #1
   11644:	b2c9      	uxtb	r1, r1
   11646:	29ff      	cmp	r1, #255	; 0xff
   11648:	d100      	bne.n	1164c <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   1164a:	bd10      	pop	{r4, pc}
		bite = *octets;
   1164c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   11650:	2b00      	cmp	r3, #0
   11652:	d0f6      	beq.n	11642 <util_ones_count_get+0x6>
			bite &= (bite - 1);
   11654:	1e5c      	subs	r4, r3, #1
			one_count++;
   11656:	3001      	adds	r0, #1
			bite &= (bite - 1);
   11658:	4023      	ands	r3, r4
			one_count++;
   1165a:	b2c0      	uxtb	r0, r0
   1165c:	e7f8      	b.n	11650 <util_ones_count_get+0x14>

0001165e <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
   1165e:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
   11660:	7f42      	ldrb	r2, [r0, #29]
	node = &instance->node[0];
   11662:	6804      	ldr	r4, [r0, #0]
{
   11664:	4606      	mov	r6, r0
	previous = instance->ticker_id_head;
   11666:	4613      	mov	r3, r2
	current = previous;
	total = 0;
   11668:	2000      	movs	r0, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
   1166a:	2aff      	cmp	r2, #255	; 0xff
   1166c:	d101      	bne.n	11672 <ticker_dequeue+0x14>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
   1166e:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   11670:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
   11672:	eb02 0582 	add.w	r5, r2, r2, lsl #2
   11676:	eb04 07c5 	add.w	r7, r4, r5, lsl #3
		if (current == id) {
   1167a:	428a      	cmp	r2, r1
   1167c:	f8d7 c008 	ldr.w	ip, [r7, #8]
   11680:	f814 5035 	ldrb.w	r5, [r4, r5, lsl #3]
   11684:	4460      	add	r0, ip
   11686:	d002      	beq.n	1168e <ticker_dequeue+0x30>
   11688:	4613      	mov	r3, r2
   1168a:	462a      	mov	r2, r5
   1168c:	e7ed      	b.n	1166a <ticker_dequeue+0xc>
	if (previous == current) {
   1168e:	4293      	cmp	r3, r2
   11690:	d100      	bne.n	11694 <ticker_dequeue+0x36>
		instance->ticker_id_head = ticker_current->next;
   11692:	7775      	strb	r5, [r6, #29]
	node[previous].next = ticker_current->next;
   11694:	b21b      	sxth	r3, r3
   11696:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1169a:	f804 5033 	strb.w	r5, [r4, r3, lsl #3]
	if (ticker_current->next != TICKER_NULL) {
   1169e:	783b      	ldrb	r3, [r7, #0]
   116a0:	2bff      	cmp	r3, #255	; 0xff
   116a2:	d0e5      	beq.n	11670 <ticker_dequeue+0x12>
		node[ticker_current->next].ticks_to_expire += timeout;
   116a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   116a8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   116ac:	68a3      	ldr	r3, [r4, #8]
   116ae:	4463      	add	r3, ip
   116b0:	60a3      	str	r3, [r4, #8]
	return (total + timeout);
   116b2:	e7dd      	b.n	11670 <ticker_dequeue+0x12>

000116b4 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
   116b4:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
   116b6:	1a55      	subs	r5, r2, r1
   116b8:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   116bc:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   116be:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
   116c0:	d109      	bne.n	116d6 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   116c2:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   116c6:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   116c8:	42a2      	cmp	r2, r4
   116ca:	d90e      	bls.n	116ea <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   116cc:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
   116ce:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   116d0:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   116d2:	6144      	str	r4, [r0, #20]
}
   116d4:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   116d6:	1a8a      	subs	r2, r1, r2
   116d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   116dc:	4293      	cmp	r3, r2
   116de:	d901      	bls.n	116e4 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   116e0:	1a9a      	subs	r2, r3, r2
   116e2:	e7f1      	b.n	116c8 <ticks_to_expire_prep+0x14>
   116e4:	4422      	add	r2, r4
			ticks_to_expire_minus +=
   116e6:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
   116e8:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
   116ea:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
   116ec:	2200      	movs	r2, #0
   116ee:	e7ef      	b.n	116d0 <ticks_to_expire_prep+0x1c>

000116f0 <ticker_job_op_cb>:
{
   116f0:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   116f2:	2200      	movs	r2, #0
   116f4:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   116f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
   116f8:	6259      	str	r1, [r3, #36]	; 0x24
{
   116fa:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   116fc:	b10a      	cbz	r2, 11702 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   116fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   11700:	4710      	bx	r2
}
   11702:	4770      	bx	lr

00011704 <ticker_worker>:
{
   11704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
   11708:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
   1170a:	2301      	movs	r3, #1
{
   1170c:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
   1170e:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   11710:	b91d      	cbnz	r5, 1171a <ticker_worker+0x16>
	if (instance->ticker_id_head == TICKER_NULL) {
   11712:	7f43      	ldrb	r3, [r0, #29]
   11714:	2bff      	cmp	r3, #255	; 0xff
   11716:	d102      	bne.n	1171e <ticker_worker+0x1a>
		instance->worker_trigger = 0;
   11718:	77c5      	strb	r5, [r0, #31]
}
   1171a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1171e:	f00c fee7 	bl	1e4f0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   11722:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
   11724:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
   11726:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   1172a:	1bc7      	subs	r7, r0, r7
   1172c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
   11730:	2eff      	cmp	r6, #255	; 0xff
   11732:	d006      	beq.n	11742 <ticker_worker+0x3e>
		ticker = &node[ticker_id_head];
   11734:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   11738:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
   1173c:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1173e:	429f      	cmp	r7, r3
   11740:	d218      	bcs.n	11774 <ticker_worker+0x70>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   11742:	7aa2      	ldrb	r2, [r4, #10]
   11744:	7ae3      	ldrb	r3, [r4, #11]
   11746:	4293      	cmp	r3, r2
   11748:	d105      	bne.n	11756 <ticker_worker+0x52>
		last = instance->ticks_elapsed_last + 1;
   1174a:	3301      	adds	r3, #1
   1174c:	b2db      	uxtb	r3, r3
			last = 0;
   1174e:	2b02      	cmp	r3, #2
   11750:	bf08      	it	eq
   11752:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
   11754:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   11756:	7ae3      	ldrb	r3, [r4, #11]
   11758:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1175c:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1175e:	60dd      	str	r5, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   11760:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
   11762:	2300      	movs	r3, #0
   11764:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   11766:	46ac      	mov	ip, r5
   11768:	4623      	mov	r3, r4
   1176a:	2104      	movs	r1, #4
   1176c:	2003      	movs	r0, #3
}
   1176e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   11772:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
   11774:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   11776:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   11778:	788a      	ldrb	r2, [r1, #2]
   1177a:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
   1177c:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   11780:	1a9b      	subs	r3, r3, r2
   11782:	b2db      	uxtb	r3, r3
   11784:	2b01      	cmp	r3, #1
   11786:	d1d3      	bne.n	11730 <ticker_worker+0x2c>
		if (ticker->timeout_func) {
   11788:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
   1178c:	3a01      	subs	r2, #1
   1178e:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   11790:	f1b9 0f00 	cmp.w	r9, #0
   11794:	d0cc      	beq.n	11730 <ticker_worker+0x2c>
					   ticks_expired -
   11796:	6948      	ldr	r0, [r1, #20]
   11798:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   1179a:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
   1179c:	1a28      	subs	r0, r5, r0
   1179e:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
   117a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   117a4:	690b      	ldr	r3, [r1, #16]
   117a6:	6a49      	ldr	r1, [r1, #36]	; 0x24
   117a8:	47c8      	blx	r9
   117aa:	e7c1      	b.n	11730 <ticker_worker+0x2c>

000117ac <ticker_job>:
{
   117ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
   117b0:	7fc2      	ldrb	r2, [r0, #31]
{
   117b2:	b093      	sub	sp, #76	; 0x4c
   117b4:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
   117b6:	2a00      	cmp	r2, #0
   117b8:	f040 83c2 	bne.w	11f40 <ticker_job+0x794>
	ticks_previous = instance->ticks_current;
   117bc:	6943      	ldr	r3, [r0, #20]
   117be:	9304      	str	r3, [sp, #16]
	instance->job_guard = 1;
   117c0:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   117c2:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
   117c4:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   117c6:	7ac0      	ldrb	r0, [r0, #11]
   117c8:	4298      	cmp	r0, r3
   117ca:	f000 808c 	beq.w	118e6 <ticker_job+0x13a>
		first = instance->ticks_elapsed_first + 1;
   117ce:	440b      	add	r3, r1
   117d0:	b2db      	uxtb	r3, r3
			first = 0;
   117d2:	2b02      	cmp	r3, #2
   117d4:	bf08      	it	eq
   117d6:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
   117d8:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
   117dc:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
   117e0:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
   117e2:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
   117e6:	9b04      	ldr	r3, [sp, #16]
   117e8:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
   117ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   117ee:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
   117f2:	f89b 301d 	ldrb.w	r3, [fp, #29]
   117f6:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
   117f8:	f8db 3000 	ldr.w	r3, [fp]
   117fc:	9305      	str	r3, [sp, #20]
	users = &instance->user[0];
   117fe:	f8db 3004 	ldr.w	r3, [fp, #4]
   11802:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
   11804:	f89b 3009 	ldrb.w	r3, [fp, #9]
   11808:	9302      	str	r3, [sp, #8]
	pending = 0;
   1180a:	2300      	movs	r3, #0
   1180c:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
   1180e:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
   11812:	9b02      	ldr	r3, [sp, #8]
   11814:	3b01      	subs	r3, #1
   11816:	b2db      	uxtb	r3, r3
   11818:	2bff      	cmp	r3, #255	; 0xff
   1181a:	9302      	str	r3, [sp, #8]
   1181c:	d166      	bne.n	118ec <ticker_job+0x140>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1181e:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
   11822:	9a03      	ldr	r2, [sp, #12]
   11824:	1a9b      	subs	r3, r3, r2
   11826:	bf18      	it	ne
   11828:	2301      	movne	r3, #1
   1182a:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
   1182c:	9b01      	ldr	r3, [sp, #4]
   1182e:	b1cb      	cbz	r3, 11864 <ticker_job+0xb8>
   11830:	f8db 9000 	ldr.w	r9, [fp]
	ticks_expired = 0;
   11834:	2700      	movs	r7, #0
	while (instance->ticker_id_head != TICKER_NULL) {
   11836:	f89b 501d 	ldrb.w	r5, [fp, #29]
   1183a:	2dff      	cmp	r5, #255	; 0xff
   1183c:	d00b      	beq.n	11856 <ticker_job+0xaa>
		ticker = &node[id_expired];
   1183e:	b22e      	sxth	r6, r5
   11840:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   11844:	eb09 04c6 	add.w	r4, r9, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
   11848:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1184a:	4543      	cmp	r3, r8
   1184c:	f240 8132 	bls.w	11ab4 <ticker_job+0x308>
			ticker->ticks_to_expire -= ticks_elapsed;
   11850:	eba3 0308 	sub.w	r3, r3, r8
   11854:	60a3      	str	r3, [r4, #8]
			flag_compare_update = 1;
   11856:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   1185a:	9903      	ldr	r1, [sp, #12]
   1185c:	42a9      	cmp	r1, r5
   1185e:	bf18      	it	ne
   11860:	4613      	movne	r3, r2
   11862:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
   11864:	f8db 3000 	ldr.w	r3, [fp]
   11868:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
   1186a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1186e:	9310      	str	r3, [sp, #64]	; 0x40
	count_user = instance->count_user;
   11870:	f89b 3009 	ldrb.w	r3, [fp, #9]
   11874:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   11876:	9b01      	ldr	r3, [sp, #4]
   11878:	3b01      	subs	r3, #1
   1187a:	b2db      	uxtb	r3, r3
   1187c:	2bff      	cmp	r3, #255	; 0xff
   1187e:	9301      	str	r3, [sp, #4]
   11880:	f040 8168 	bne.w	11b54 <ticker_job+0x3a8>
	if (instance->ticker_id_head != ticker_id_old_head) {
   11884:	f89b 301d 	ldrb.w	r3, [fp, #29]
   11888:	9a03      	ldr	r2, [sp, #12]
   1188a:	4293      	cmp	r3, r2
	if (!pending) {
   1188c:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
   1188e:	f040 834c 	bne.w	11f2a <ticker_job+0x77e>
	if (!pending) {
   11892:	b94b      	cbnz	r3, 118a8 <ticker_job+0xfc>
	users = &instance->user[0];
   11894:	f8db 3004 	ldr.w	r3, [fp, #4]
	count_user = instance->count_user;
   11898:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
   1189c:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   1189e:	3c01      	subs	r4, #1
   118a0:	b2e4      	uxtb	r4, r4
   118a2:	2cff      	cmp	r4, #255	; 0xff
   118a4:	f040 829c 	bne.w	11de0 <ticker_job+0x634>
	instance->job_guard = 0;
   118a8:	2300      	movs	r3, #0
   118aa:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   118ae:	9b02      	ldr	r3, [sp, #8]
   118b0:	b14b      	cbz	r3, 118c6 <ticker_job+0x11a>
	if (instance->ticker_id_head == TICKER_NULL) {
   118b2:	f89b 301d 	ldrb.w	r3, [fp, #29]
   118b6:	2bff      	cmp	r3, #255	; 0xff
   118b8:	f040 82e6 	bne.w	11e88 <ticker_job+0x6dc>
		if (cntr_stop() == 0) {
   118bc:	f00c fde0 	bl	1e480 <cntr_stop>
   118c0:	b908      	cbnz	r0, 118c6 <ticker_job+0x11a>
			instance->ticks_slot_previous = 0;
   118c2:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
   118c6:	f89b 301f 	ldrb.w	r3, [fp, #31]
   118ca:	2b00      	cmp	r3, #0
   118cc:	f000 8338 	beq.w	11f40 <ticker_job+0x794>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   118d0:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   118d4:	465b      	mov	r3, fp
   118d6:	2201      	movs	r2, #1
   118d8:	2103      	movs	r1, #3
   118da:	2004      	movs	r0, #4
   118dc:	46a4      	mov	ip, r4
}
   118de:	b013      	add	sp, #76	; 0x4c
   118e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   118e4:	4760      	bx	ip
		flag_elapsed = 0;
   118e6:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
   118e8:	4690      	mov	r8, r2
   118ea:	e782      	b.n	117f2 <ticker_job+0x46>
		user = &users[count_user];
   118ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   118ee:	9a02      	ldr	r2, [sp, #8]
   118f0:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   118f4:	687b      	ldr	r3, [r7, #4]
   118f6:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
   118f8:	78f9      	ldrb	r1, [r7, #3]
   118fa:	78be      	ldrb	r6, [r7, #2]
   118fc:	428e      	cmp	r6, r1
   118fe:	d088      	beq.n	11812 <ticker_job+0x66>
			user_op = &user_ops[user->middle];
   11900:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
   11902:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
   11904:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   11908:	0112      	lsls	r2, r2, #4
   1190a:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
   1190c:	1c73      	adds	r3, r6, #1
   1190e:	b2db      	uxtb	r3, r3
				middle = 0;
   11910:	4298      	cmp	r0, r3
   11912:	bf08      	it	eq
   11914:	2300      	moveq	r3, #0
			user->middle = middle;
   11916:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   11918:	9b06      	ldr	r3, [sp, #24]
   1191a:	5c9a      	ldrb	r2, [r3, r2]
   1191c:	2a03      	cmp	r2, #3
   1191e:	d9ec      	bls.n	118fa <ticker_job+0x14e>
			ticker = &node[user_op->id];
   11920:	7869      	ldrb	r1, [r5, #1]
   11922:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   11926:	930a      	str	r3, [sp, #40]	; 0x28
   11928:	980a      	ldr	r0, [sp, #40]	; 0x28
   1192a:	9b05      	ldr	r3, [sp, #20]
   1192c:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   11930:	2a05      	cmp	r2, #5
			state = (ticker->req - ticker->ack) & 0xff;
   11932:	7863      	ldrb	r3, [r4, #1]
   11934:	78a0      	ldrb	r0, [r4, #2]
   11936:	eba3 0300 	sub.w	r3, r3, r0
   1193a:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   1193c:	d80a      	bhi.n	11954 <ticker_job+0x1a8>
   1193e:	b14b      	cbz	r3, 11954 <ticker_job+0x1a8>
			    (state == 0) ||
   11940:	2a04      	cmp	r2, #4
   11942:	d10c      	bne.n	1195e <ticker_job+0x1b2>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   11944:	686a      	ldr	r2, [r5, #4]
   11946:	b952      	cbnz	r2, 1195e <ticker_job+0x1b2>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   11948:	68aa      	ldr	r2, [r5, #8]
   1194a:	b942      	cbnz	r2, 1195e <ticker_job+0x1b2>
			     (user_op->params.update.lazy == 0) &&
   1194c:	68ea      	ldr	r2, [r5, #12]
   1194e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   11952:	d104      	bne.n	1195e <ticker_job+0x1b2>
				ticker_job_op_cb(user_op,
   11954:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   11956:	4628      	mov	r0, r5
   11958:	f7ff feca 	bl	116f0 <ticker_job_op_cb>
   1195c:	e7cc      	b.n	118f8 <ticker_job+0x14c>
			if (state == 1) {
   1195e:	2b01      	cmp	r3, #1
   11960:	f040 809d 	bne.w	11a9e <ticker_job+0x2f2>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   11964:	4658      	mov	r0, fp
   11966:	f7ff fe7a 	bl	1165e <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   1196a:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   1196c:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   1196e:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   11970:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   11972:	f040 8086 	bne.w	11a82 <ticker_job+0x2d6>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   11976:	f8db 3014 	ldr.w	r3, [fp, #20]
   1197a:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
   1197c:	f00c fdb8 	bl	1e4f0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   11980:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
   11982:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   11984:	1ac3      	subs	r3, r0, r3
   11986:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1198a:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
   1198c:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   1198e:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
   11990:	bf9e      	ittt	ls
   11992:	6962      	ldrls	r2, [r4, #20]
   11994:	1b92      	subls	r2, r2, r6
   11996:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
   11998:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1199a:	bf96      	itet	ls
   1199c:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
   1199e:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
   119a0:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
   119a2:	2a00      	cmp	r2, #0
   119a4:	d049      	beq.n	11a3a <ticker_job+0x28e>
	    (user_op->params.update.lazy != 0)) {
   119a6:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
   119a8:	2900      	cmp	r1, #0
   119aa:	d046      	beq.n	11a3a <ticker_job+0x28e>
		user_op->params.update.lazy--;
   119ac:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   119b0:	fa1f fc8c 	uxth.w	ip, ip
   119b4:	f8a5 c00c 	strh.w	ip, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   119b8:	429a      	cmp	r2, r3
   119ba:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
   119be:	d201      	bcs.n	119c4 <ticker_job+0x218>
   119c0:	45f4      	cmp	ip, lr
   119c2:	d302      	bcc.n	119ca <ticker_job+0x21e>
		ticker->remainder_current -= 30517578UL;
   119c4:	f8df 9274 	ldr.w	r9, [pc, #628]	; 11c3c <ticker_job+0x490>
   119c8:	e031      	b.n	11a2e <ticker_job+0x282>
	if ((ticker->remainder_current >= BIT(31)) ||
   119ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
   119cc:	4e99      	ldr	r6, [pc, #612]	; (11c34 <ticker_job+0x488>)
   119ce:	489a      	ldr	r0, [pc, #616]	; (11c38 <ticker_job+0x48c>)
   119d0:	198e      	adds	r6, r1, r6
   119d2:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
   119d4:	bf81      	itttt	hi
   119d6:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   119da:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   119de:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
   119e2:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
   119e4:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
		decrement++;
   119e8:	bf8c      	ite	hi
   119ea:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
   119ee:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
   119f2:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
   119f4:	4491      	add	r9, r2
			ticker->lazy_current--;
   119f6:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
   119fa:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
   119fc:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
   11a00:	f8a4 e01e 	strh.w	lr, [r4, #30]
   11a04:	e7d8      	b.n	119b8 <ticker_job+0x20c>
	ticker->remainder_current += ticker->remainder_periodic;
   11a06:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
   11a0a:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
   11a0c:	4989      	ldr	r1, [pc, #548]	; (11c34 <ticker_job+0x488>)
   11a0e:	488a      	ldr	r0, [pc, #552]	; (11c38 <ticker_job+0x48c>)
   11a10:	1871      	adds	r1, r6, r1
   11a12:	4281      	cmp	r1, r0
	return 0;
   11a14:	bf8e      	itee	hi
   11a16:	2100      	movhi	r1, #0
		return 1;
   11a18:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
   11a1a:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
   11a1c:	4411      	add	r1, r2
			ticker->lazy_current++;
   11a1e:	f10e 0e01 	add.w	lr, lr, #1
	ticker->remainder_current += ticker->remainder_periodic;
   11a22:	bf8c      	ite	hi
   11a24:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
   11a26:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
   11a28:	440b      	add	r3, r1
			ticker->lazy_current++;
   11a2a:	f8a4 e01e 	strh.w	lr, [r4, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11a2e:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
   11a32:	45f4      	cmp	ip, lr
   11a34:	d8e7      	bhi.n	11a06 <ticker_job+0x25a>
		ticker->lazy_periodic = user_op->params.update.lazy;
   11a36:	f8a4 c01c 	strh.w	ip, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
   11a3a:	88aa      	ldrh	r2, [r5, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   11a3c:	4413      	add	r3, r2
   11a3e:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
   11a40:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
   11a42:	6963      	ldr	r3, [r4, #20]
   11a44:	4413      	add	r3, r2
   11a46:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   11a48:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   11a4c:	4620      	mov	r0, r4
   11a4e:	f7ff fe31 	bl	116b4 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   11a52:	69a2      	ldr	r2, [r4, #24]
   11a54:	892b      	ldrh	r3, [r5, #8]
   11a56:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   11a58:	896a      	ldrh	r2, [r5, #10]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   11a5a:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   11a5c:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   11a5e:	bf8c      	ite	hi
   11a60:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
   11a62:	2300      	movls	r3, #0
   11a64:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
   11a66:	7bab      	ldrb	r3, [r5, #14]
   11a68:	b103      	cbz	r3, 11a6c <ticker_job+0x2c0>
		ticker->force = user_op->params.update.force;
   11a6a:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
   11a6c:	9b05      	ldr	r3, [sp, #20]
   11a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11a70:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
   11a74:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   11a76:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
   11a7a:	3301      	adds	r3, #1
   11a7c:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   11a7e:	2100      	movs	r1, #0
   11a80:	e769      	b.n	11956 <ticker_job+0x1aa>
		ticker->req = ticker->ack;
   11a82:	78a3      	ldrb	r3, [r4, #2]
   11a84:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   11a86:	786b      	ldrb	r3, [r5, #1]
   11a88:	f89b 201c 	ldrb.w	r2, [fp, #28]
   11a8c:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   11a8e:	bf01      	itttt	eq
   11a90:	23ff      	moveq	r3, #255	; 0xff
   11a92:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
   11a96:	2300      	moveq	r3, #0
   11a98:	f8cb 3018 	streq.w	r3, [fp, #24]
   11a9c:	e7ef      	b.n	11a7e <ticker_job+0x2d2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   11a9e:	2104      	movs	r1, #4
   11aa0:	465b      	mov	r3, fp
   11aa2:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   11aa6:	2201      	movs	r2, #1
   11aa8:	4608      	mov	r0, r1
   11aaa:	47a0      	blx	r4
				pending = 1;
   11aac:	2301      	movs	r3, #1
				user->middle = prev;
   11aae:	70be      	strb	r6, [r7, #2]
				pending = 1;
   11ab0:	9307      	str	r3, [sp, #28]
   11ab2:	e6ae      	b.n	11812 <ticker_job+0x66>
		if (instance->ticks_slot_previous > ticks_to_expire) {
   11ab4:	f8db 2018 	ldr.w	r2, [fp, #24]
   11ab8:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   11aba:	eba8 0803 	sub.w	r8, r8, r3
		ticks_expired += ticks_to_expire;
   11abe:	441f      	add	r7, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   11ac0:	bf29      	itett	cs
   11ac2:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
   11ac4:	1ad3      	subcc	r3, r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   11ac6:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
   11aca:	2300      	movcs	r3, #0
   11acc:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
   11ad0:	69a3      	ldr	r3, [r4, #24]
   11ad2:	b11b      	cbz	r3, 11adc <ticker_job+0x330>
			instance->ticker_id_slot_previous = id_expired;
   11ad4:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   11ad8:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
   11adc:	2200      	movs	r2, #0
   11ade:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
   11ae0:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   11ae4:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
   11ae8:	f8d4 c004 	ldr.w	ip, [r4, #4]
   11aec:	f1bc 0f00 	cmp.w	ip, #0
   11af0:	d02c      	beq.n	11b4c <ticker_job+0x3a0>
   11af2:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
   11af4:	f8df e140 	ldr.w	lr, [pc, #320]	; 11c38 <ticker_job+0x48c>
	ticker->remainder_current += ticker->remainder_periodic;
   11af8:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   11afc:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
   11afe:	494d      	ldr	r1, [pc, #308]	; (11c34 <ticker_job+0x488>)
   11b00:	1859      	adds	r1, r3, r1
   11b02:	4571      	cmp	r1, lr
		ticker->remainder_current -= 30517578UL;
   11b04:	bf9f      	itttt	ls
   11b06:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
   11b0a:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
   11b0e:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
   11b12:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
   11b14:	bf92      	itee	ls
   11b16:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
   11b18:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
   11b1a:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
   11b1c:	4463      	add	r3, ip
			while (count--) {
   11b1e:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
   11b22:	441a      	add	r2, r3
			while (count--) {
   11b24:	d2e8      	bcs.n	11af8 <ticker_job+0x34c>
			ticks_to_expire_prep(ticker, instance->ticks_current,
   11b26:	9b04      	ldr	r3, [sp, #16]
			ticker->ticks_to_expire = ticks_to_expire;
   11b28:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   11b2a:	f8db 1014 	ldr.w	r1, [fp, #20]
   11b2e:	19da      	adds	r2, r3, r7
   11b30:	4620      	mov	r0, r4
   11b32:	f7ff fdbf 	bl	116b4 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   11b36:	8ba3      	ldrh	r3, [r4, #28]
   11b38:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
   11b3a:	2300      	movs	r3, #0
   11b3c:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
   11b3e:	f809 a036 	strb.w	sl, [r9, r6, lsl #3]
			ticker->req++;
   11b42:	7863      	ldrb	r3, [r4, #1]
   11b44:	3301      	adds	r3, #1
   11b46:	7063      	strb	r3, [r4, #1]
			ticker->req = ticker->ack;
   11b48:	46aa      	mov	sl, r5
   11b4a:	e674      	b.n	11836 <ticker_job+0x8a>
   11b4c:	78a3      	ldrb	r3, [r4, #2]
   11b4e:	7063      	strb	r3, [r4, #1]
   11b50:	4655      	mov	r5, sl
   11b52:	e7f9      	b.n	11b48 <ticker_job+0x39c>
		user = &users[count_user];
   11b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11b56:	9a01      	ldr	r2, [sp, #4]
   11b58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11b5c:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
   11b5e:	685b      	ldr	r3, [r3, #4]
   11b60:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
   11b62:	9b04      	ldr	r3, [sp, #16]
   11b64:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
   11b68:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   11b6c:	d040      	beq.n	11bf0 <ticker_job+0x444>
				ticker = &node[id_insert];
   11b6e:	fa0f f38a 	sxth.w	r3, sl
   11b72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   11b76:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
   11b78:	46d0      	mov	r8, sl
   11b7a:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
   11b7e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
   11b82:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
   11b84:	f8db 3000 	ldr.w	r3, [fp]
   11b88:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
   11b8a:	23ff      	movs	r3, #255	; 0xff
   11b8c:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   11b8e:	8ba2      	ldrh	r2, [r4, #28]
   11b90:	8be3      	ldrh	r3, [r4, #30]
   11b92:	4293      	cmp	r3, r2
   11b94:	f240 8080 	bls.w	11c98 <ticker_job+0x4ec>
		skip = ticker->lazy_current -
   11b98:	1a9b      	subs	r3, r3, r2
   11b9a:	b29b      	uxth	r3, r3
		skip = 0;
   11b9c:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
   11b9e:	fa0f f388 	sxth.w	r3, r8
   11ba2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   11ba6:	00db      	lsls	r3, r3, #3
   11ba8:	9311      	str	r3, [sp, #68]	; 0x44
   11baa:	e0c8      	b.n	11d3e <ticker_job+0x592>
				user_op = &user_ops[user_ops_first];
   11bac:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   11bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11bb2:	011b      	lsls	r3, r3, #4
   11bb4:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
   11bb6:	f109 0201 	add.w	r2, r9, #1
   11bba:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
   11bbe:	9a04      	ldr	r2, [sp, #16]
   11bc0:	7812      	ldrb	r2, [r2, #0]
					first = 0;
   11bc2:	454a      	cmp	r2, r9
   11bc4:	bf08      	it	eq
   11bc6:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   11bca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11bcc:	5cd3      	ldrb	r3, [r2, r3]
   11bce:	2b03      	cmp	r3, #3
   11bd0:	d10e      	bne.n	11bf0 <ticker_job+0x444>
				id_insert = user_op->id;
   11bd2:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   11bd6:	9b08      	ldr	r3, [sp, #32]
   11bd8:	eb08 0488 	add.w	r4, r8, r8, lsl #2
   11bdc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   11be0:	7862      	ldrb	r2, [r4, #1]
   11be2:	78a3      	ldrb	r3, [r4, #2]
   11be4:	429a      	cmp	r2, r3
   11be6:	d008      	beq.n	11bfa <ticker_job+0x44e>
					ticker_job_op_cb(user_op,
   11be8:	2101      	movs	r1, #1
   11bea:	4628      	mov	r0, r5
   11bec:	f7ff fd80 	bl	116f0 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   11bf0:	9b04      	ldr	r3, [sp, #16]
   11bf2:	789b      	ldrb	r3, [r3, #2]
   11bf4:	454b      	cmp	r3, r9
   11bf6:	d1d9      	bne.n	11bac <ticker_job+0x400>
   11bf8:	e63d      	b.n	11876 <ticker_job+0xca>
	ticker->ticks_periodic = start->ticks_periodic;
   11bfa:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
   11bfc:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   11c00:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   11c02:	692b      	ldr	r3, [r5, #16]
   11c04:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
   11c06:	8aab      	ldrh	r3, [r5, #20]
   11c08:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   11c0a:	69ab      	ldr	r3, [r5, #24]
   11c0c:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   11c0e:	69eb      	ldr	r3, [r5, #28]
   11c10:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   11c12:	6a2b      	ldr	r3, [r5, #32]
   11c14:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
   11c16:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
   11c18:	68ab      	ldr	r3, [r5, #8]
   11c1a:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
   11c1c:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   11c1e:	686a      	ldr	r2, [r5, #4]
   11c20:	4620      	mov	r0, r4
   11c22:	f7ff fd47 	bl	116b4 <ticks_to_expire_prep>
	ticker->force = 1;
   11c26:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
   11c28:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
   11c2a:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
   11c2c:	70e3      	strb	r3, [r4, #3]
   11c2e:	f04f 0aff 	mov.w	sl, #255	; 0xff
   11c32:	e7a7      	b.n	11b84 <ticker_job+0x3d8>
   11c34:	ff172b5a 	.word	0xff172b5a
   11c38:	7f172b59 	.word	0x7f172b59
   11c3c:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
   11c40:	6860      	ldr	r0, [r4, #4]
   11c42:	2800      	cmp	r0, #0
   11c44:	f000 80c7 	beq.w	11dd6 <ticker_job+0x62a>
	ticker->remainder_current += ticker->remainder_periodic;
   11c48:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
   11c4c:	4b8c      	ldr	r3, [pc, #560]	; (11e80 <ticker_job+0x6d4>)
	ticker->remainder_current += ticker->remainder_periodic;
   11c4e:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
   11c50:	498c      	ldr	r1, [pc, #560]	; (11e84 <ticker_job+0x6d8>)
   11c52:	18d3      	adds	r3, r2, r3
   11c54:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
   11c56:	bf9c      	itt	ls
   11c58:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
   11c5c:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
   11c60:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
   11c62:	bf8b      	itete	hi
   11c64:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
   11c66:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
   11c6a:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
   11c6c:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
   11c6e:	4403      	add	r3, r0
		return 1;
   11c70:	bf98      	it	ls
   11c72:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
   11c74:	4413      	add	r3, r2
			ticker->lazy_current++;
   11c76:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
   11c78:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
   11c7a:	3201      	adds	r2, #1
   11c7c:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
   11c7e:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
   11c80:	4293      	cmp	r3, r2
   11c82:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
   11c86:	bf89      	itett	hi
   11c88:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
   11c8a:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
   11c8c:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
   11c8e:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
   11c90:	bf9c      	itt	ls
   11c92:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
   11c94:	60a1      	strls	r1, [r4, #8]
   11c96:	e052      	b.n	11d3e <ticker_job+0x592>
		skip = 0;
   11c98:	2300      	movs	r3, #0
   11c9a:	e77f      	b.n	11b9c <ticker_job+0x3f0>
		if (ticker_current->ticks_slot != 0) {
   11c9c:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
   11c9e:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
   11ca0:	b946      	cbnz	r6, 11cb4 <ticker_job+0x508>
			if (ticks_slot_previous > ticks_to_expire_current) {
   11ca2:	9f05      	ldr	r7, [sp, #20]
   11ca4:	42b8      	cmp	r0, r7
   11ca6:	d200      	bcs.n	11caa <ticker_job+0x4fe>
				ticks_slot_previous -= ticks_to_expire_current;
   11ca8:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
   11caa:	9309      	str	r3, [sp, #36]	; 0x24
   11cac:	9605      	str	r6, [sp, #20]
   11cae:	f812 303e 	ldrb.w	r3, [r2, lr, lsl #3]
   11cb2:	e053      	b.n	11d5c <ticker_job+0x5b0>
		if (ticker_current->ticks_slot != 0) {
   11cb4:	9306      	str	r3, [sp, #24]
   11cb6:	e7f8      	b.n	11caa <ticker_job+0x4fe>
		ticker = &node[ticker_id_head];
   11cb8:	b230      	sxth	r0, r6
   11cba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   11cbe:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
   11cc2:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
   11cc4:	68bf      	ldr	r7, [r7, #8]
   11cc6:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
   11cc8:	4577      	cmp	r7, lr
   11cca:	d209      	bcs.n	11ce0 <ticker_job+0x534>
		if (ticker->ticks_slot) {
   11ccc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   11cce:	69bf      	ldr	r7, [r7, #24]
   11cd0:	2f00      	cmp	r7, #0
   11cd2:	d154      	bne.n	11d7e <ticker_job+0x5d2>
		ticks_slot -= ticks_to_expire;
   11cd4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   11cd6:	ebae 0e06 	sub.w	lr, lr, r6
		ticker_id_head = ticker->next;
   11cda:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
   11cde:	e04c      	b.n	11d7a <ticker_job+0x5ce>
			return TICKER_NULL;
   11ce0:	26ff      	movs	r6, #255	; 0xff
   11ce2:	e04c      	b.n	11d7e <ticker_job+0x5d2>
	while (id_insert !=
   11ce4:	9b06      	ldr	r3, [sp, #24]
   11ce6:	4598      	cmp	r8, r3
   11ce8:	d06a      	beq.n	11dc0 <ticker_job+0x614>
		if (id_collide != TICKER_NULL) {
   11cea:	9b06      	ldr	r3, [sp, #24]
   11cec:	2bff      	cmp	r3, #255	; 0xff
   11cee:	d0a7      	beq.n	11c40 <ticker_job+0x494>
   11cf0:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
   11cf2:	b233      	sxth	r3, r6
   11cf4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   11cf8:	9305      	str	r3, [sp, #20]
   11cfa:	9a05      	ldr	r2, [sp, #20]
   11cfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11cfe:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
   11d02:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
   11d04:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
   11d06:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
   11d08:	bf88      	it	hi
   11d0a:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
   11d0c:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
   11d0e:	bf8c      	ite	hi
   11d10:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
   11d12:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
   11d14:	2a00      	cmp	r2, #0
   11d16:	d093      	beq.n	11c40 <ticker_job+0x494>
   11d18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11d1a:	4293      	cmp	r3, r2
   11d1c:	d890      	bhi.n	11c40 <ticker_job+0x494>
			    skip_collide <= skip &&
   11d1e:	78fa      	ldrb	r2, [r7, #3]
   11d20:	78e3      	ldrb	r3, [r4, #3]
   11d22:	429a      	cmp	r2, r3
   11d24:	d28c      	bcs.n	11c40 <ticker_job+0x494>
					ticker_dequeue(instance, id_collide);
   11d26:	4631      	mov	r1, r6
   11d28:	4658      	mov	r0, fp
   11d2a:	f7ff fc98 	bl	1165e <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
   11d2e:	78bb      	ldrb	r3, [r7, #2]
   11d30:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
   11d32:	9a05      	ldr	r2, [sp, #20]
   11d34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
   11d36:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
   11d38:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
   11d3c:	46b2      	mov	sl, r6
	ticker_new = &node[id];
   11d3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
   11d40:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
   11d44:	f8db 0018 	ldr.w	r0, [fp, #24]
   11d48:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
   11d4a:	eb02 0c03 	add.w	ip, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
   11d4e:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
   11d50:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
   11d54:	f8dc 1008 	ldr.w	r1, [ip, #8]
	previous = current;
   11d58:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
   11d5a:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
   11d5c:	2bff      	cmp	r3, #255	; 0xff
   11d5e:	d006      	beq.n	11d6e <ticker_job+0x5c2>
		 (ticker_current = &node[current])->ticks_to_expire))) {
   11d60:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   11d64:	eb02 06ce 	add.w	r6, r2, lr, lsl #3
		(ticks_to_expire_current =
   11d68:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
   11d6a:	4281      	cmp	r1, r0
   11d6c:	d896      	bhi.n	11c9c <ticker_job+0x4f0>
				     ticks_to_expire + ticker_new->ticks_slot);
   11d6e:	f8dc 0018 	ldr.w	r0, [ip, #24]
   11d72:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
   11d74:	eb01 0e00 	add.w	lr, r1, r0
   11d78:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
   11d7a:	2eff      	cmp	r6, #255	; 0xff
   11d7c:	d19c      	bne.n	11cb8 <ticker_job+0x50c>
	if ((ticker_new->ticks_slot == 0) ||
   11d7e:	980d      	ldr	r0, [sp, #52]	; 0x34
   11d80:	b128      	cbz	r0, 11d8e <ticker_job+0x5e2>
   11d82:	9805      	ldr	r0, [sp, #20]
   11d84:	4281      	cmp	r1, r0
   11d86:	d3ad      	bcc.n	11ce4 <ticker_job+0x538>
	    ((ticks_slot_previous <= ticks_to_expire) &&
   11d88:	2eff      	cmp	r6, #255	; 0xff
   11d8a:	f040 80d5 	bne.w	11f38 <ticker_job+0x78c>
		if (previous == current) {
   11d8e:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
   11d90:	f8cc 1008 	str.w	r1, [ip, #8]
		if (previous == current) {
   11d94:	4283      	cmp	r3, r0
			node[previous].next = id;
   11d96:	bf18      	it	ne
   11d98:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
   11d9c:	f88c 3000 	strb.w	r3, [ip]
			node[previous].next = id;
   11da0:	bf16      	itet	ne
   11da2:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
   11da6:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
   11daa:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
   11dae:	2bff      	cmp	r3, #255	; 0xff
   11db0:	d006      	beq.n	11dc0 <ticker_job+0x614>
			node[current].ticks_to_expire -= ticks_to_expire;
   11db2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   11db6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11dba:	689a      	ldr	r2, [r3, #8]
   11dbc:	1a51      	subs	r1, r2, r1
   11dbe:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
   11dc0:	78a3      	ldrb	r3, [r4, #2]
   11dc2:	3301      	adds	r3, #1
   11dc4:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   11dc6:	2100      	movs	r1, #0
			if (user_op) {
   11dc8:	2d00      	cmp	r5, #0
   11dca:	f43f aecd 	beq.w	11b68 <ticker_job+0x3bc>
				ticker_job_op_cb(user_op, status);
   11dce:	4628      	mov	r0, r5
   11dd0:	f7ff fc8e 	bl	116f0 <ticker_job_op_cb>
   11dd4:	e6c8      	b.n	11b68 <ticker_job+0x3bc>
			return TICKER_STATUS_FAILURE;
   11dd6:	2101      	movs	r1, #1
   11dd8:	e7f6      	b.n	11dc8 <ticker_job+0x61c>
		flag_compare_update = 1;
   11dda:	2301      	movs	r3, #1
   11ddc:	9302      	str	r3, [sp, #8]
   11dde:	e559      	b.n	11894 <ticker_job+0xe8>
		user = &users[count_user];
   11de0:	9b01      	ldr	r3, [sp, #4]
   11de2:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
   11de6:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
   11de8:	786b      	ldrb	r3, [r5, #1]
   11dea:	78ea      	ldrb	r2, [r5, #3]
   11dec:	429a      	cmp	r2, r3
   11dee:	f43f ad56 	beq.w	1189e <ticker_job+0xf2>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   11df2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11df6:	011a      	lsls	r2, r3, #4
   11df8:	18b3      	adds	r3, r6, r2
	switch (uop->op) {
   11dfa:	5cb2      	ldrb	r2, [r6, r2]
   11dfc:	2a01      	cmp	r2, #1
   11dfe:	d024      	beq.n	11e4a <ticker_job+0x69e>
   11e00:	2a02      	cmp	r2, #2
   11e02:	d129      	bne.n	11e58 <ticker_job+0x6ac>
		ticker_by_next_slot_get(instance,
   11e04:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
   11e08:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
   11e0c:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->node;
   11e10:	f8db c000 	ldr.w	ip, [fp]
   11e14:	f8db 1014 	ldr.w	r1, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   11e18:	2aff      	cmp	r2, #255	; 0xff
   11e1a:	d002      	beq.n	11e22 <ticker_job+0x676>
   11e1c:	6807      	ldr	r7, [r0, #0]
   11e1e:	42b9      	cmp	r1, r7
   11e20:	d023      	beq.n	11e6a <ticker_job+0x6be>
		_ticker_id_head = instance->ticker_id_head;
   11e22:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   11e26:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0;
   11e28:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   11e2a:	2aff      	cmp	r2, #255	; 0xff
   11e2c:	d009      	beq.n	11e42 <ticker_job+0x696>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
   11e2e:	eb02 0882 	add.w	r8, r2, r2, lsl #2
   11e32:	eb0c 0ac8 	add.w	sl, ip, r8, lsl #3
   11e36:	f8da 0008 	ldr.w	r0, [sl, #8]
   11e3a:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
   11e3c:	f8da 0018 	ldr.w	r0, [sl, #24]
   11e40:	b1d0      	cbz	r0, 11e78 <ticker_job+0x6cc>
	*ticker_id_head = _ticker_id_head;
   11e42:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
   11e46:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
   11e4a:	2200      	movs	r2, #0
   11e4c:	625a      	str	r2, [r3, #36]	; 0x24
		fp_op_func = uop->fp_op_func;
   11e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (fp_op_func) {
   11e50:	b112      	cbz	r2, 11e58 <ticker_job+0x6ac>
		fp_op_func(uop->status, uop->op_context);
   11e52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   11e54:	2000      	movs	r0, #0
   11e56:	4790      	blx	r2
			first = user->first + 1;
   11e58:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
   11e5a:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
   11e5c:	3301      	adds	r3, #1
   11e5e:	b2db      	uxtb	r3, r3
				first = 0;
   11e60:	429a      	cmp	r2, r3
   11e62:	bf08      	it	eq
   11e64:	2300      	moveq	r3, #0
			user->first = first;
   11e66:	706b      	strb	r3, [r5, #1]
   11e68:	e7be      	b.n	11de8 <ticker_job+0x63c>
		ticker = &node[_ticker_id_head];
   11e6a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	_ticks_to_expire = *ticks_to_expire;
   11e6e:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
   11e72:	f81c 2032 	ldrb.w	r2, [ip, r2, lsl #3]
   11e76:	e7d8      	b.n	11e2a <ticker_job+0x67e>
		_ticker_id_head = ticker->next;
   11e78:	f81c 2038 	ldrb.w	r2, [ip, r8, lsl #3]
   11e7c:	e7d5      	b.n	11e2a <ticker_job+0x67e>
   11e7e:	bf00      	nop
   11e80:	ff172b5a 	.word	0xff172b5a
   11e84:	7f172b59 	.word	0x7f172b59
	if (ticker_id_old_head == TICKER_NULL) {
   11e88:	9b03      	ldr	r3, [sp, #12]
   11e8a:	2bff      	cmp	r3, #255	; 0xff
   11e8c:	d107      	bne.n	11e9e <ticker_job+0x6f2>
		ticks_current = cntr_cnt_get();
   11e8e:	f00c fb2f 	bl	1e4f0 <cntr_cnt_get>
   11e92:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   11e94:	f00c fae6 	bl	1e464 <cntr_start>
   11e98:	b908      	cbnz	r0, 11e9e <ticker_job+0x6f2>
			instance->ticks_current = ticks_current;
   11e9a:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
   11e9e:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
   11ea2:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
   11ea6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
   11eaa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11eae:	260a      	movs	r6, #10
   11eb0:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
   11eb2:	f00c fb1d 	bl	1e4f0 <cntr_cnt_get>
		cc = instance->ticks_current;
   11eb6:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   11eba:	1b03      	subs	r3, r0, r4
   11ebc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   11ec0:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
   11ec2:	42ab      	cmp	r3, r5
   11ec4:	bf2c      	ite	cs
   11ec6:	18e4      	addcs	r4, r4, r3
   11ec8:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
   11eca:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   11ece:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
   11ed0:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
   11ed4:	4620      	mov	r0, r4
   11ed6:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   11ed8:	f00c fb0a 	bl	1e4f0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   11edc:	1bc0      	subs	r0, r0, r7
   11ede:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11ee2:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   11ee4:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   11ee6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
   11eea:	42a0      	cmp	r0, r4
   11eec:	f67f aceb 	bls.w	118c6 <ticker_job+0x11a>
		LL_ASSERT(i);
   11ef0:	3e01      	subs	r6, #1
   11ef2:	d1de      	bne.n	11eb2 <ticker_job+0x706>
   11ef4:	4b14      	ldr	r3, [pc, #80]	; (11f48 <ticker_job+0x79c>)
   11ef6:	681b      	ldr	r3, [r3, #0]
   11ef8:	075b      	lsls	r3, r3, #29
   11efa:	d010      	beq.n	11f1e <ticker_job+0x772>
   11efc:	2301      	movs	r3, #1
   11efe:	f04f 0200 	mov.w	r2, #0
   11f02:	f363 0202 	bfi	r2, r3, #0, #3
   11f06:	4911      	ldr	r1, [pc, #68]	; (11f4c <ticker_job+0x7a0>)
   11f08:	4b11      	ldr	r3, [pc, #68]	; (11f50 <ticker_job+0x7a4>)
   11f0a:	4812      	ldr	r0, [pc, #72]	; (11f54 <ticker_job+0x7a8>)
   11f0c:	1a5b      	subs	r3, r3, r1
   11f0e:	f366 02c5 	bfi	r2, r6, #3, #3
   11f12:	08db      	lsrs	r3, r3, #3
   11f14:	f363 128f 	bfi	r2, r3, #6, #10
   11f18:	490f      	ldr	r1, [pc, #60]	; (11f58 <ticker_job+0x7ac>)
   11f1a:	f7f0 f8e7 	bl	20ec <log_1>
   11f1e:	4040      	eors	r0, r0
   11f20:	f380 8811 	msr	BASEPRI, r0
   11f24:	f04f 0004 	mov.w	r0, #4
   11f28:	df02      	svc	2
	if (!pending) {
   11f2a:	2b00      	cmp	r3, #0
   11f2c:	f43f af55 	beq.w	11dda <ticker_job+0x62e>
	instance->job_guard = 0;
   11f30:	2300      	movs	r3, #0
   11f32:	f88b 301e 	strb.w	r3, [fp, #30]
   11f36:	e4bc      	b.n	118b2 <ticker_job+0x106>
	while (id_insert !=
   11f38:	45b0      	cmp	r8, r6
   11f3a:	f47f aeda 	bne.w	11cf2 <ticker_job+0x546>
   11f3e:	e73f      	b.n	11dc0 <ticker_job+0x614>
}
   11f40:	b013      	add	sp, #76	; 0x4c
   11f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f46:	bf00      	nop
   11f48:	2000e230 	.word	0x2000e230
   11f4c:	0002ef38 	.word	0x0002ef38
   11f50:	0002efa0 	.word	0x0002efa0
   11f54:	0003286b 	.word	0x0003286b
   11f58:	00032842 	.word	0x00032842

00011f5c <ticker_init>:
{
   11f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
   11f5e:	4e1c      	ldr	r6, [pc, #112]	; (11fd0 <ticker_init+0x74>)
{
   11f60:	9f05      	ldr	r7, [sp, #20]
   11f62:	f89d 4018 	ldrb.w	r4, [sp, #24]
   11f66:	f8dd c01c 	ldr.w	ip, [sp, #28]
	instance->count_node = count_node;
   11f6a:	252c      	movs	r5, #44	; 0x2c
   11f6c:	4345      	muls	r5, r0
   11f6e:	eb06 0e05 	add.w	lr, r6, r5
	instance->node = node;
   11f72:	5172      	str	r2, [r6, r5]
	instance->count_node = count_node;
   11f74:	f88e 1008 	strb.w	r1, [lr, #8]
	instance->count_user = count_user;
   11f78:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
   11f7c:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
   11f80:	3b01      	subs	r3, #1
   11f82:	b2db      	uxtb	r3, r3
   11f84:	2bff      	cmp	r3, #255	; 0xff
   11f86:	d113      	bne.n	11fb0 <ticker_init+0x54>
	if (count_op) {
   11f88:	bb04      	cbnz	r4, 11fcc <ticker_init+0x70>
	instance->caller_id_get_cb = caller_id_get_cb;
   11f8a:	232c      	movs	r3, #44	; 0x2c
   11f8c:	4358      	muls	r0, r3
   11f8e:	1833      	adds	r3, r6, r0
   11f90:	9a08      	ldr	r2, [sp, #32]
   11f92:	621a      	str	r2, [r3, #32]
	instance->sched_cb = sched_cb;
   11f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11f96:	625a      	str	r2, [r3, #36]	; 0x24
   11f98:	3018      	adds	r0, #24
	instance->trigger_set_cb = trigger_set_cb;
   11f9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11f9c:	629a      	str	r2, [r3, #40]	; 0x28
   11f9e:	1832      	adds	r2, r6, r0
	instance->ticks_slot_previous = 0;
   11fa0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11fa4:	5034      	str	r4, [r6, r0]
   11fa6:	8091      	strh	r1, [r2, #4]
	return TICKER_STATUS_SUCCESS;
   11fa8:	4620      	mov	r0, r4
	instance->ticks_current = 0;
   11faa:	615c      	str	r4, [r3, #20]
	instance->ticks_elapsed_first = 0;
   11fac:	815c      	strh	r4, [r3, #10]
}
   11fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
   11fb0:	b21a      	sxth	r2, r3
   11fb2:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
   11fb6:	f8c1 c004 	str.w	ip, [r1, #4]
		user_op_ += users[count_user].count_user_op;
   11fba:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
   11fbe:	eb02 0142 	add.w	r1, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
   11fc2:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
   11fc4:	eb0c 1c01 	add.w	ip, ip, r1, lsl #4
		count_op -= users[count_user].count_user_op;
   11fc8:	b2e4      	uxtb	r4, r4
   11fca:	e7d9      	b.n	11f80 <ticker_init+0x24>
		return TICKER_STATUS_FAILURE;
   11fcc:	2001      	movs	r0, #1
   11fce:	e7ee      	b.n	11fae <ticker_init+0x52>
   11fd0:	20001208 	.word	0x20001208

00011fd4 <ticker_trigger>:
	instance = &_instance[instance_index];
   11fd4:	4a07      	ldr	r2, [pc, #28]	; (11ff4 <ticker_trigger+0x20>)
   11fd6:	212c      	movs	r1, #44	; 0x2c
   11fd8:	fb00 2301 	mla	r3, r0, r1, r2
{
   11fdc:	b410      	push	{r4}
	if (instance->sched_cb) {
   11fde:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   11fe0:	b12c      	cbz	r4, 11fee <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   11fe2:	46a4      	mov	ip, r4
   11fe4:	2201      	movs	r2, #1
   11fe6:	2103      	movs	r1, #3
   11fe8:	2002      	movs	r0, #2
}
   11fea:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   11fec:	4760      	bx	ip
}
   11fee:	bc10      	pop	{r4}
   11ff0:	4770      	bx	lr
   11ff2:	bf00      	nop
   11ff4:	20001208 	.word	0x20001208

00011ff8 <ticker_start>:
{
   11ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11ffc:	4c22      	ldr	r4, [pc, #136]	; (12088 <ticker_start+0x90>)
   11ffe:	272c      	movs	r7, #44	; 0x2c
   12000:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->user[user_id];
   12004:	b20d      	sxth	r5, r1
   12006:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1200a:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
   1200e:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
   12012:	f89c 4003 	ldrb.w	r4, [ip, #3]
   12016:	1c66      	adds	r6, r4, #1
   12018:	b2f6      	uxtb	r6, r6
		last = 0;
   1201a:	42b0      	cmp	r0, r6
   1201c:	bf98      	it	ls
   1201e:	2600      	movls	r6, #0
	if (last == user->first) {
   12020:	f89c 0001 	ldrb.w	r0, [ip, #1]
   12024:	42b0      	cmp	r0, r6
   12026:	d02d      	beq.n	12084 <ticker_start+0x8c>
	user_op = &user->user_op[user->last];
   12028:	f8dc 0004 	ldr.w	r0, [ip, #4]
   1202c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   12030:	0125      	lsls	r5, r4, #4
   12032:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_START;
   12034:	f04f 0e03 	mov.w	lr, #3
   12038:	f800 e005 	strb.w	lr, [r0, r5]
	user_op->params.start.ticks_at_start = ticks_anchor;
   1203c:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   1203e:	9b06      	ldr	r3, [sp, #24]
   12040:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   12042:	9b07      	ldr	r3, [sp, #28]
   12044:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   12046:	9b08      	ldr	r3, [sp, #32]
   12048:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   1204a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1204c:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
   1204e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   12052:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   12054:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12056:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   12058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1205a:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
   1205c:	2302      	movs	r3, #2
   1205e:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
   12060:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12062:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
   12064:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   12066:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   12068:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
   1206a:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1206e:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
   12072:	4608      	mov	r0, r1
   12074:	4798      	blx	r3
   12076:	4643      	mov	r3, r8
   12078:	2200      	movs	r2, #0
   1207a:	2104      	movs	r1, #4
   1207c:	47a8      	blx	r5
	return user_op->status;
   1207e:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
   12080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   12084:	2001      	movs	r0, #1
   12086:	e7fb      	b.n	12080 <ticker_start+0x88>
   12088:	20001208 	.word	0x20001208

0001208c <ticker_update>:
{
   1208c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   12090:	4c22      	ldr	r4, [pc, #136]	; (1211c <ticker_update+0x90>)
   12092:	272c      	movs	r7, #44	; 0x2c
   12094:	fb00 4907 	mla	r9, r0, r7, r4
	user = &instance->user[user_id];
   12098:	b20d      	sxth	r5, r1
   1209a:	f8d9 0004 	ldr.w	r0, [r9, #4]
   1209e:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
   120a2:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
   120a6:	f89c 4003 	ldrb.w	r4, [ip, #3]
   120aa:	1c66      	adds	r6, r4, #1
   120ac:	b2f6      	uxtb	r6, r6
		last = 0;
   120ae:	42b0      	cmp	r0, r6
   120b0:	bf98      	it	ls
   120b2:	2600      	movls	r6, #0
	if (last == user->first) {
   120b4:	f89c 0001 	ldrb.w	r0, [ip, #1]
   120b8:	42b0      	cmp	r0, r6
   120ba:	d02d      	beq.n	12118 <ticker_update+0x8c>
	user_op = &user->user_op[user->last];
   120bc:	f8dc 0004 	ldr.w	r0, [ip, #4]
   120c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   120c4:	0125      	lsls	r5, r4, #4
   120c6:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   120c8:	f04f 0804 	mov.w	r8, #4
   120cc:	f800 8005 	strb.w	r8, [r0, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   120d0:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   120d2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   120d6:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   120d8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   120dc:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   120de:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   120e2:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
   120e4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   120e8:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
   120ea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   120ee:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
   120f0:	2302      	movs	r3, #2
   120f2:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
   120f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   120f6:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
   120f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   120fa:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   120fc:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
   120fe:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12102:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
   12106:	4608      	mov	r0, r1
   12108:	4798      	blx	r3
   1210a:	464b      	mov	r3, r9
   1210c:	2200      	movs	r2, #0
   1210e:	4641      	mov	r1, r8
   12110:	47a8      	blx	r5
	return user_op->status;
   12112:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
   12114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   12118:	2001      	movs	r0, #1
   1211a:	e7fb      	b.n	12114 <ticker_update+0x88>
   1211c:	20001208 	.word	0x20001208

00012120 <ticker_stop>:
{
   12120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   12124:	4c1a      	ldr	r4, [pc, #104]	; (12190 <ticker_stop+0x70>)
   12126:	262c      	movs	r6, #44	; 0x2c
   12128:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->user[user_id];
   1212c:	b20f      	sxth	r7, r1
   1212e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   12132:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
   12136:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
   1213a:	f89c 4003 	ldrb.w	r4, [ip, #3]
   1213e:	1c65      	adds	r5, r4, #1
   12140:	b2ed      	uxtb	r5, r5
		last = 0;
   12142:	42a8      	cmp	r0, r5
   12144:	bf98      	it	ls
   12146:	2500      	movls	r5, #0
	if (last == user->first) {
   12148:	f89c 0001 	ldrb.w	r0, [ip, #1]
   1214c:	42a8      	cmp	r0, r5
   1214e:	d01c      	beq.n	1218a <ticker_stop+0x6a>
	user_op = &user->user_op[user->last];
   12150:	f8dc 0004 	ldr.w	r0, [ip, #4]
   12154:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   12158:	0124      	lsls	r4, r4, #4
   1215a:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   1215c:	f04f 0e05 	mov.w	lr, #5
   12160:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = ticker_id;
   12164:	707a      	strb	r2, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
   12166:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
   12168:	e9c7 2309 	strd	r2, r3, [r7, #36]	; 0x24
	user_op->op_context = op_context;
   1216c:	9b06      	ldr	r3, [sp, #24]
   1216e:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
   12170:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12174:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   12178:	4608      	mov	r0, r1
   1217a:	4798      	blx	r3
   1217c:	4643      	mov	r3, r8
   1217e:	2200      	movs	r2, #0
   12180:	2104      	movs	r1, #4
   12182:	47a0      	blx	r4
	return user_op->status;
   12184:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
   12186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1218a:	2001      	movs	r0, #1
   1218c:	e7fb      	b.n	12186 <ticker_stop+0x66>
   1218e:	bf00      	nop
   12190:	20001208 	.word	0x20001208

00012194 <ticker_next_slot_get>:
{
   12194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   12198:	4c1c      	ldr	r4, [pc, #112]	; (1220c <ticker_next_slot_get+0x78>)
   1219a:	272c      	movs	r7, #44	; 0x2c
   1219c:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->user[user_id];
   121a0:	b20d      	sxth	r5, r1
   121a2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   121a6:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
   121aa:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
   121ae:	f89c 4003 	ldrb.w	r4, [ip, #3]
   121b2:	1c66      	adds	r6, r4, #1
   121b4:	b2f6      	uxtb	r6, r6
		last = 0;
   121b6:	42b0      	cmp	r0, r6
   121b8:	bf98      	it	ls
   121ba:	2600      	movls	r6, #0
	if (last == user->first) {
   121bc:	f89c 0001 	ldrb.w	r0, [ip, #1]
   121c0:	42b0      	cmp	r0, r6
   121c2:	d021      	beq.n	12208 <ticker_next_slot_get+0x74>
	user_op = &user->user_op[user->last];
   121c4:	f8dc e004 	ldr.w	lr, [ip, #4]
   121c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   121cc:	0125      	lsls	r5, r4, #4
   121ce:	eb0e 0405 	add.w	r4, lr, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   121d2:	2002      	movs	r0, #2
   121d4:	f80e 0005 	strb.w	r0, [lr, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
   121d8:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   121dc:	9b06      	ldr	r3, [sp, #24]
   121de:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
   121e0:	9b07      	ldr	r3, [sp, #28]
   121e2:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
   121e4:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
   121e6:	9b08      	ldr	r3, [sp, #32]
	user_op->id = TICKER_NULL;
   121e8:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   121ea:	6260      	str	r0, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   121ec:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
   121ee:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   121f2:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
   121f6:	4608      	mov	r0, r1
   121f8:	4798      	blx	r3
   121fa:	4643      	mov	r3, r8
   121fc:	2200      	movs	r2, #0
   121fe:	2104      	movs	r1, #4
   12200:	47a8      	blx	r5
	return user_op->status;
   12202:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
   12204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   12208:	2001      	movs	r0, #1
   1220a:	e7fb      	b.n	12204 <ticker_next_slot_get+0x70>
   1220c:	20001208 	.word	0x20001208

00012210 <ticker_job_idle_get>:
{
   12210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   12214:	4c1a      	ldr	r4, [pc, #104]	; (12280 <ticker_job_idle_get+0x70>)
   12216:	262c      	movs	r6, #44	; 0x2c
   12218:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->user[user_id];
   1221c:	b20f      	sxth	r7, r1
   1221e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   12222:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
   12226:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
   1222a:	f89c 4003 	ldrb.w	r4, [ip, #3]
   1222e:	1c65      	adds	r5, r4, #1
   12230:	b2ed      	uxtb	r5, r5
		last = 0;
   12232:	42a8      	cmp	r0, r5
   12234:	bf98      	it	ls
   12236:	2500      	movls	r5, #0
	if (last == user->first) {
   12238:	f89c 0001 	ldrb.w	r0, [ip, #1]
   1223c:	42a8      	cmp	r0, r5
   1223e:	d01c      	beq.n	1227a <ticker_job_idle_get+0x6a>
	user_op = &user->user_op[user->last];
   12240:	f8dc 0004 	ldr.w	r0, [ip, #4]
   12244:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   12248:	0124      	lsls	r4, r4, #4
   1224a:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   1224c:	f04f 0e01 	mov.w	lr, #1
   12250:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = TICKER_NULL;
   12254:	20ff      	movs	r0, #255	; 0xff
   12256:	7078      	strb	r0, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
   12258:	2002      	movs	r0, #2
	user_op->fp_op_func = fp_op_func;
   1225a:	e9c7 0209 	strd	r0, r2, [r7, #36]	; 0x24
	user_op->op_context = op_context;
   1225e:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
   12260:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12264:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   12268:	4608      	mov	r0, r1
   1226a:	4798      	blx	r3
   1226c:	4643      	mov	r3, r8
   1226e:	2200      	movs	r2, #0
   12270:	2104      	movs	r1, #4
   12272:	47a0      	blx	r4
	return user_op->status;
   12274:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
   12276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1227a:	2001      	movs	r0, #1
   1227c:	e7fb      	b.n	12276 <ticker_job_idle_get+0x66>
   1227e:	bf00      	nop
   12280:	20001208 	.word	0x20001208

00012284 <ticker_job_sched>:
{
   12284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12288:	4c08      	ldr	r4, [pc, #32]	; (122ac <ticker_job_sched+0x28>)
   1228a:	252c      	movs	r5, #44	; 0x2c
   1228c:	fb05 4300 	mla	r3, r5, r0, r4
   12290:	e9d3 3708 	ldrd	r3, r7, [r3, #32]
{
   12294:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12296:	4608      	mov	r0, r1
   12298:	4798      	blx	r3
   1229a:	fb06 4305 	mla	r3, r6, r5, r4
   1229e:	46bc      	mov	ip, r7
   122a0:	2200      	movs	r2, #0
   122a2:	2104      	movs	r1, #4
}
   122a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   122a8:	4760      	bx	ip
   122aa:	bf00      	nop
   122ac:	20001208 	.word	0x20001208

000122b0 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   122b0:	f00c b91e 	b.w	1e4f0 <cntr_cnt_get>

000122b4 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   122b4:	1a40      	subs	r0, r0, r1
}
   122b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   122ba:	4770      	bx	lr

000122bc <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
   122bc:	b508      	push	{r3, lr}
   122be:	4603      	mov	r3, r0
	if (addr_type > 1) {
   122c0:	2b01      	cmp	r3, #1
{
   122c2:	4608      	mov	r0, r1
	if (addr_type > 1) {
   122c4:	d80e      	bhi.n	122e4 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
   122c6:	b133      	cbz	r3, 122d6 <ll_addr_get+0x1a>
		if (bdaddr) {
   122c8:	b119      	cbz	r1, 122d2 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   122ca:	2206      	movs	r2, #6
   122cc:	4906      	ldr	r1, [pc, #24]	; (122e8 <ll_addr_get+0x2c>)
   122ce:	f7f4 fcdb 	bl	6c88 <memcpy>
		}

		return rnd_addr;
   122d2:	4805      	ldr	r0, [pc, #20]	; (122e8 <ll_addr_get+0x2c>)
   122d4:	e007      	b.n	122e6 <ll_addr_get+0x2a>
	}

	if (bdaddr) {
   122d6:	b119      	cbz	r1, 122e0 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   122d8:	2206      	movs	r2, #6
   122da:	4904      	ldr	r1, [pc, #16]	; (122ec <ll_addr_get+0x30>)
   122dc:	f7f4 fcd4 	bl	6c88 <memcpy>
	}

	return pub_addr;
   122e0:	4802      	ldr	r0, [pc, #8]	; (122ec <ll_addr_get+0x30>)
   122e2:	e000      	b.n	122e6 <ll_addr_get+0x2a>
		return NULL;
   122e4:	2000      	movs	r0, #0
}
   122e6:	bd08      	pop	{r3, pc}
   122e8:	20001266 	.word	0x20001266
   122ec:	20001260 	.word	0x20001260

000122f0 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   122f0:	b570      	push	{r4, r5, r6, lr}
   122f2:	4606      	mov	r6, r0
   122f4:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
   122f6:	f007 fba5 	bl	19a44 <ll_adv_is_enabled>
   122fa:	4604      	mov	r4, r0
   122fc:	b110      	cbz	r0, 12304 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   122fe:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
   12300:	4620      	mov	r0, r4
   12302:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
   12304:	f007 fbb2 	bl	19a6c <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
   12308:	f010 0f06 	tst.w	r0, #6
   1230c:	d1f7      	bne.n	122fe <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   1230e:	2206      	movs	r2, #6
   12310:	4629      	mov	r1, r5
	if (addr_type) {
   12312:	b11e      	cbz	r6, 1231c <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   12314:	4802      	ldr	r0, [pc, #8]	; (12320 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   12316:	f7f4 fcb7 	bl	6c88 <memcpy>
   1231a:	e7f1      	b.n	12300 <ll_addr_set+0x10>
   1231c:	4801      	ldr	r0, [pc, #4]	; (12324 <ll_addr_set+0x34>)
   1231e:	e7fa      	b.n	12316 <ll_addr_set+0x26>
   12320:	20001266 	.word	0x20001266
   12324:	20001260 	.word	0x20001260

00012328 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
   12328:	2300      	movs	r3, #0
   1232a:	7003      	strb	r3, [r0, #0]
	*max = 0;
   1232c:	700b      	strb	r3, [r1, #0]
}
   1232e:	4770      	bx	lr

00012330 <cpu_sleep>:
 * SPDX-License-Identifier: Apache-2.0
 */

static inline void cpu_sleep(void)
{
	__WFE();
   12330:	bf20      	wfe
	__SEV();
   12332:	bf40      	sev
	__WFE();
   12334:	bf20      	wfe
}
   12336:	4770      	bx	lr

00012338 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
   12338:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
   1233a:	4b0d      	ldr	r3, [pc, #52]	; (12370 <pdu_len_cmp+0x38>)
{
   1233c:	b089      	sub	sp, #36	; 0x24
   1233e:	4605      	mov	r5, r0
   12340:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
   12342:	aa01      	add	r2, sp, #4
   12344:	f103 0718 	add.w	r7, r3, #24
   12348:	6818      	ldr	r0, [r3, #0]
   1234a:	6859      	ldr	r1, [r3, #4]
   1234c:	4614      	mov	r4, r2
   1234e:	c403      	stmia	r4!, {r0, r1}
   12350:	3308      	adds	r3, #8
   12352:	42bb      	cmp	r3, r7
   12354:	4622      	mov	r2, r4
   12356:	d1f7      	bne.n	12348 <pdu_len_cmp+0x10>
   12358:	881b      	ldrh	r3, [r3, #0]
   1235a:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
   1235c:	ab08      	add	r3, sp, #32
   1235e:	441d      	add	r5, r3
   12360:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
   12364:	1b83      	subs	r3, r0, r6
   12366:	4258      	negs	r0, r3
   12368:	4158      	adcs	r0, r3
   1236a:	b009      	add	sp, #36	; 0x24
   1236c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1236e:	bf00      	nop
   12370:	0002f194 	.word	0x0002f194

00012374 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
   12374:	6008      	str	r0, [r1, #0]
}
   12376:	4770      	bx	lr

00012378 <mayfly_xtal_start>:
static void mayfly_xtal_start(void *params)
{
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
   12378:	4b02      	ldr	r3, [pc, #8]	; (12384 <mayfly_xtal_start+0xc>)
   1237a:	6818      	ldr	r0, [r3, #0]
   1237c:	6843      	ldr	r3, [r0, #4]
   1237e:	2100      	movs	r1, #0
   12380:	681b      	ldr	r3, [r3, #0]
   12382:	4718      	bx	r3
   12384:	2000126c 	.word	0x2000126c

00012388 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
   12388:	b918      	cbnz	r0, 12392 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
   1238a:	680b      	ldr	r3, [r1, #0]
   1238c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12390:	600b      	str	r3, [r1, #0]
	}
}
   12392:	4770      	bx	lr

00012394 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
   12394:	b918      	cbnz	r0, 1239e <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
   12396:	680b      	ldr	r3, [r1, #0]
   12398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1239c:	600b      	str	r3, [r1, #0]
	}
}
   1239e:	4770      	bx	lr

000123a0 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
   123a0:	b570      	push	{r4, r5, r6, lr}
   123a2:	1d03      	adds	r3, r0, #4
   123a4:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
   123a6:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
   123a8:	429d      	cmp	r5, r3
   123aa:	d101      	bne.n	123b0 <chan_sel_remap+0x10>
   123ac:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
   123ae:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
   123b0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
   123b4:	2200      	movs	r2, #0
   123b6:	18a0      	adds	r0, r4, r2
   123b8:	2a08      	cmp	r2, #8
   123ba:	b2c0      	uxtb	r0, r0
   123bc:	d101      	bne.n	123c2 <chan_sel_remap+0x22>
   123be:	4604      	mov	r4, r0
   123c0:	e7f2      	b.n	123a8 <chan_sel_remap+0x8>
			if (bite & 0x01) {
   123c2:	f016 0f01 	tst.w	r6, #1
   123c6:	d003      	beq.n	123d0 <chan_sel_remap+0x30>
				if (chan_index == 0) {
   123c8:	2900      	cmp	r1, #0
   123ca:	d0f0      	beq.n	123ae <chan_sel_remap+0xe>
				chan_index--;
   123cc:	3901      	subs	r1, #1
   123ce:	b2c9      	uxtb	r1, r1
			bite >>= 1;
   123d0:	0876      	lsrs	r6, r6, #1
   123d2:	3201      	adds	r2, #1
   123d4:	e7ef      	b.n	123b6 <chan_sel_remap+0x16>
	...

000123d8 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
   123d8:	4b09      	ldr	r3, [pc, #36]	; (12400 <packet_rx_acquired_count_get+0x28>)
   123da:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
   123de:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
   123e2:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
   123e4:	bf3b      	ittet	cc
   123e6:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
   123ea:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
   123ee:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
   123f2:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
   123f4:	bf2c      	ite	cs
   123f6:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
   123f8:	1a80      	subcc	r0, r0, r2
   123fa:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
   123fc:	4770      	bx	lr
   123fe:	bf00      	nop
   12400:	2000126c 	.word	0x2000126c

00012404 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
   12404:	b508      	push	{r3, lr}
   12406:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
   12408:	f7ff ffe6 	bl	123d8 <packet_rx_acquired_count_get>
   1240c:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
   1240e:	bf23      	ittte	cs
   12410:	4b04      	ldrcs	r3, [pc, #16]	; (12424 <packet_rx_reserve_get+0x20>)
   12412:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
   12416:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
		return 0;
   1241a:	2000      	movcc	r0, #0
	return _radio.packet_rx[_radio.packet_rx_last];
   1241c:	bf28      	it	cs
   1241e:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
}
   12422:	bd08      	pop	{r3, pc}
   12424:	2000126c 	.word	0x2000126c

00012428 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
   12428:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
   1242a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   1242e:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   12432:	4299      	cmp	r1, r3
   12434:	d15c      	bne.n	124f0 <conn_update_req+0xc8>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
   12436:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
   1243a:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   1243e:	42a3      	cmp	r3, r4
   12440:	d156      	bne.n	124f0 <conn_update_req+0xc8>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
   12442:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12446:	2b00      	cmp	r3, #0
   12448:	db25      	blt.n	12496 <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
   1244a:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
   1244c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
   1244e:	f8a0 407c 	strh.w	r4, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
   12452:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
   12454:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   12458:	4354      	muls	r4, r2
					      conn->supervision_reload *
   1245a:	227d      	movs	r2, #125	; 0x7d
   1245c:	4362      	muls	r2, r4
					      125 / 1000;
   1245e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   12462:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   12466:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1246a:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
   1246e:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   12470:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
   12474:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
   12476:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
   12478:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
   1247c:	3901      	subs	r1, #1
		conn->llcp.conn_upd.win_size = 1;
   1247e:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   12482:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
   12486:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   1248a:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
   1248e:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
   12492:	4618      	mov	r0, r3
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
}
   12494:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
   12496:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   1249a:	06d9      	lsls	r1, r3, #27
   1249c:	d42a      	bmi.n	124f4 <conn_update_req+0xcc>
		   (!conn->common.fex_valid ||
   1249e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
   124a2:	069a      	lsls	r2, r3, #26
   124a4:	d503      	bpl.n	124ae <conn_update_req+0x86>
		    (conn->llcp_features &
   124a6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
   124aa:	079b      	lsls	r3, r3, #30
   124ac:	d522      	bpl.n	124f4 <conn_update_req+0xcc>
		conn->llcp_conn_param.latency = conn->latency;
   124ae:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval_min = conn->conn_interval;
   124b0:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
   124b2:	f8a0 10c8 	strh.w	r1, [r0, #200]	; 0xc8
						conn->supervision_reload *
   124b6:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval_min = conn->conn_interval;
   124b8:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
   124bc:	4351      	muls	r1, r2
		conn->llcp_conn_param.interval_max = conn->conn_interval;
   124be:	f8a0 20c6 	strh.w	r2, [r0, #198]	; 0xc6
						conn->supervision_reload *
   124c2:	227d      	movs	r2, #125	; 0x7d
   124c4:	434a      	muls	r2, r1
						125 / 1000;
   124c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   124ca:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp_conn_param.timeout = conn->conn_interval *
   124ce:	f8a0 20ca 	strh.w	r2, [r0, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   124d2:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
   124d6:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
   124d8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
   124dc:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
   124e0:	3c01      	subs	r4, #1
		conn->llcp_conn_param.status = 0;
   124e2:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
   124e6:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
   124ea:	f880 40c1 	strb.w	r4, [r0, #193]	; 0xc1
   124ee:	e7d0      	b.n	12492 <conn_update_req+0x6a>
		return 1;
   124f0:	2001      	movs	r0, #1
   124f2:	e7cf      	b.n	12494 <conn_update_req+0x6c>
	return 2;
   124f4:	2002      	movs	r0, #2
   124f6:	e7cd      	b.n	12494 <conn_update_req+0x6c>

000124f8 <packet_rx_allocate>:
{
   124f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
   124fc:	4d22      	ldr	r5, [pc, #136]	; (12588 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
   124fe:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
   12502:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
   12506:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
   1250a:	3401      	adds	r4, #1
   1250c:	4581      	cmp	r9, r0
   1250e:	b2e4      	uxtb	r4, r4
   12510:	bf28      	it	cs
   12512:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
   12514:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
   12518:	42a3      	cmp	r3, r4
   1251a:	bf08      	it	eq
   1251c:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   1251e:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   12522:	f1b9 0f00 	cmp.w	r9, #0
   12526:	d003      	beq.n	12530 <packet_rx_allocate+0x38>
   12528:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
   1252c:	42a3      	cmp	r3, r4
   1252e:	d101      	bne.n	12534 <packet_rx_allocate+0x3c>
}
   12530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
   12534:	4638      	mov	r0, r7
   12536:	f7fe fed9 	bl	112ec <mem_acquire>
		if (!link) {
   1253a:	4606      	mov	r6, r0
   1253c:	2800      	cmp	r0, #0
   1253e:	d0f7      	beq.n	12530 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   12540:	4640      	mov	r0, r8
   12542:	f7fe fed3 	bl	112ec <mem_acquire>
		if (!node_rx) {
   12546:	b928      	cbnz	r0, 12554 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
   12548:	4630      	mov	r0, r6
   1254a:	4910      	ldr	r1, [pc, #64]	; (1258c <packet_rx_allocate+0x94>)
}
   1254c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
   12550:	f7fe bee5 	b.w	1131e <mem_release>
		node_rx->hdr.onion.link = link;
   12554:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
   12556:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
   1255a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   1255e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
   12562:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
   12566:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
   1256a:	3401      	adds	r4, #1
   1256c:	b2e4      	uxtb	r4, r4
			acquire = 0;
   1256e:	42a3      	cmp	r3, r4
   12570:	bf08      	it	eq
   12572:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
   12574:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   12578:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1257c:	3b01      	subs	r3, #1
   1257e:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
   12582:	fa5f f989 	uxtb.w	r9, r9
   12586:	e7cc      	b.n	12522 <packet_rx_allocate+0x2a>
   12588:	2000126c 	.word	0x2000126c
   1258c:	200013b4 	.word	0x200013b4

00012590 <common_init>:
{
   12590:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
   12592:	4c3d      	ldr	r4, [pc, #244]	; (12688 <common_init+0xf8>)
   12594:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   12598:	2a00      	cmp	r2, #0
   1259a:	d04c      	beq.n	12636 <common_init+0xa6>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
   1259c:	f504 7386 	add.w	r3, r4, #268	; 0x10c
   125a0:	f44f 71aa 	mov.w	r1, #340	; 0x154
   125a4:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
   125a8:	f7fe fe7c 	bl	112a4 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
   125ac:	4b37      	ldr	r3, [pc, #220]	; (1268c <common_init+0xfc>)
   125ae:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
   125b2:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
   125b6:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   125ba:	f7fe fe73 	bl	112a4 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
   125be:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
   125c2:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
   125c6:	4b32      	ldr	r3, [pc, #200]	; (12690 <common_init+0x100>)
   125c8:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
   125cc:	440a      	add	r2, r1
   125ce:	2108      	movs	r1, #8
   125d0:	f7fe fe68 	bl	112a4 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
   125d4:	4b2f      	ldr	r3, [pc, #188]	; (12694 <common_init+0x104>)
   125d6:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
   125da:	2202      	movs	r2, #2
   125dc:	2124      	movs	r1, #36	; 0x24
   125de:	f7fe fe61 	bl	112a4 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
   125e2:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
   125e6:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
   125ea:	4b2b      	ldr	r3, [pc, #172]	; (12698 <common_init+0x108>)
   125ec:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
   125f0:	3a01      	subs	r2, #1
   125f2:	b292      	uxth	r2, r2
   125f4:	f7fe fe56 	bl	112a4 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
   125f8:	4825      	ldr	r0, [pc, #148]	; (12690 <common_init+0x100>)
   125fa:	f7fe fe77 	bl	112ec <mem_acquire>
	LL_ASSERT(link);
   125fe:	b9e8      	cbnz	r0, 1263c <common_init+0xac>
   12600:	4a26      	ldr	r2, [pc, #152]	; (1269c <common_init+0x10c>)
   12602:	6812      	ldr	r2, [r2, #0]
   12604:	0752      	lsls	r2, r2, #29
   12606:	d010      	beq.n	1262a <common_init+0x9a>
   12608:	2101      	movs	r1, #1
   1260a:	f04f 0200 	mov.w	r2, #0
   1260e:	f361 0202 	bfi	r2, r1, #0, #3
   12612:	4b23      	ldr	r3, [pc, #140]	; (126a0 <common_init+0x110>)
   12614:	4923      	ldr	r1, [pc, #140]	; (126a4 <common_init+0x114>)
   12616:	1a5b      	subs	r3, r3, r1
   12618:	f360 02c5 	bfi	r2, r0, #3, #3
   1261c:	08db      	lsrs	r3, r3, #3
   1261e:	f363 128f 	bfi	r2, r3, #6, #10
   12622:	4921      	ldr	r1, [pc, #132]	; (126a8 <common_init+0x118>)
   12624:	4821      	ldr	r0, [pc, #132]	; (126ac <common_init+0x11c>)
   12626:	f7ef fd61 	bl	20ec <log_1>
   1262a:	4040      	eors	r0, r0
   1262c:	f380 8811 	msr	BASEPRI, r0
   12630:	f04f 0004 	mov.w	r0, #4
   12634:	df02      	svc	2
		_radio.conn_free = NULL;
   12636:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
   1263a:	e7b7      	b.n	125ac <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
   1263c:	4a1c      	ldr	r2, [pc, #112]	; (126b0 <common_init+0x120>)
   1263e:	1f11      	subs	r1, r2, #4
   12640:	f7fe feaa 	bl	11398 <memq_init>
	_radio.advertiser.chan_map = 0x07;
   12644:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   12648:	f043 0338 	orr.w	r3, r3, #56	; 0x38
   1264c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
   12650:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12654:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
   12658:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
   1265c:	f242 531f 	movw	r3, #9503	; 0x251f
   12660:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   12664:	231b      	movs	r3, #27
   12666:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
   1266a:	f44f 73a4 	mov.w	r3, #328	; 0x148
   1266e:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
   12672:	2303      	movs	r3, #3
   12674:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
   12678:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
	packet_rx_allocate(0xFF);
   1267c:	20ff      	movs	r0, #255	; 0xff
}
   1267e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
   12682:	f7ff bf39 	b.w	124f8 <packet_rx_allocate>
   12686:	bf00      	nop
   12688:	2000126c 	.word	0x2000126c
   1268c:	2000139c 	.word	0x2000139c
   12690:	200013b4 	.word	0x200013b4
   12694:	200013c8 	.word	0x200013c8
   12698:	200013d0 	.word	0x200013d0
   1269c:	2000e218 	.word	0x2000e218
   126a0:	0002ef70 	.word	0x0002ef70
   126a4:	0002ef38 	.word	0x0002ef38
   126a8:	00032882 	.word	0x00032882
   126ac:	00032d65 	.word	0x00032d65
   126b0:	200013bc 	.word	0x200013bc

000126b4 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
   126b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
   126b8:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   126ba:	4294      	cmp	r4, r2
{
   126bc:	4681      	mov	r9, r0
   126be:	460f      	mov	r7, r1
   126c0:	4690      	mov	r8, r2
	if (_first == last) {
   126c2:	d03d      	beq.n	12740 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
   126c4:	4e1f      	ldr	r6, [pc, #124]	; (12744 <tx_cmplt_get+0x90>)
   126c6:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
   126ca:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   126ce:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
   126d0:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
   126d2:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   126d6:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
   126da:	b222      	sxth	r2, r4
   126dc:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
   126e0:	f8b9 c000 	ldrh.w	ip, [r9]
   126e4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   126e8:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
   126ec:	4594      	cmp	ip, r2
   126ee:	d120      	bne.n	12732 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
   126f0:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
   126f2:	2801      	cmp	r0, #1
   126f4:	f020 0303 	bic.w	r3, r0, #3
   126f8:	d90a      	bls.n	12710 <tx_cmplt_get+0x5c>
   126fa:	b1f3      	cbz	r3, 1273a <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   126fc:	1d02      	adds	r2, r0, #4
   126fe:	d01c      	beq.n	1273a <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   12700:	7942      	ldrb	r2, [r0, #5]
   12702:	b1d2      	cbz	r2, 1273a <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   12704:	7902      	ldrb	r2, [r0, #4]
   12706:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   1270a:	3a01      	subs	r2, #1
   1270c:	2a01      	cmp	r2, #1
   1270e:	d814      	bhi.n	1273a <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
   12710:	2201      	movs	r2, #1
			cmplt++;
   12712:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
   12714:	604a      	str	r2, [r1, #4]
			cmplt++;
   12716:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   12718:	b113      	cbz	r3, 12720 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   1271a:	4651      	mov	r1, sl
   1271c:	f7fe fdff 	bl	1131e <mem_release>
		}

		_first = _first + 1;
   12720:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
   12722:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
   12726:	b2e4      	uxtb	r4, r4
			_first = 0;
   12728:	42a2      	cmp	r2, r4
   1272a:	bf08      	it	eq
   1272c:	2400      	moveq	r4, #0
		}

	} while (_first != last);
   1272e:	4544      	cmp	r4, r8
   12730:	d1d3      	bne.n	126da <tx_cmplt_get+0x26>

	*first = _first;
   12732:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
   12734:	4628      	mov	r0, r5
   12736:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
   1273a:	f8c1 b004 	str.w	fp, [r1, #4]
   1273e:	e7eb      	b.n	12718 <tx_cmplt_get+0x64>
		return 0;
   12740:	2500      	movs	r5, #0
   12742:	e7f7      	b.n	12734 <tx_cmplt_get+0x80>
   12744:	2000126c 	.word	0x2000126c

00012748 <connection_get>:
{
   12748:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
   1274a:	4b09      	ldr	r3, [pc, #36]	; (12770 <connection_get+0x28>)
   1274c:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
   12750:	4282      	cmp	r2, r0
{
   12752:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
   12754:	d90a      	bls.n	1276c <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   12756:	4602      	mov	r2, r0
   12758:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1275c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
   12760:	f7fe fdf8 	bl	11354 <mem_get>
		if ((conn) && (conn->handle == handle)) {
   12764:	b110      	cbz	r0, 1276c <connection_get+0x24>
   12766:	8c03      	ldrh	r3, [r0, #32]
   12768:	42a3      	cmp	r3, r4
   1276a:	d000      	beq.n	1276e <connection_get+0x26>
	return 0;
   1276c:	2000      	movs	r0, #0
}
   1276e:	bd10      	pop	{r4, pc}
   12770:	2000126c 	.word	0x2000126c

00012774 <role_disable>:
{
   12774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12778:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1277a:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
   1277c:	2805      	cmp	r0, #5
{
   1277e:	4605      	mov	r5, r0
   12780:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12782:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
   12784:	d00c      	beq.n	127a0 <role_disable+0x2c>
   12786:	2806      	cmp	r0, #6
   12788:	d057      	beq.n	1283a <role_disable+0xc6>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   1278a:	d95a      	bls.n	12842 <role_disable+0xce>
			conn_handle = ticker_id_primary -
   1278c:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   1278e:	b280      	uxth	r0, r0
   12790:	f7ff ffda 	bl	12748 <connection_get>
			if (!conn) {
   12794:	2800      	cmp	r0, #0
   12796:	f000 81ee 	beq.w	12b76 <role_disable+0x402>
			ticks_active_to_start =
   1279a:	e9d0 6800 	ldrd	r6, r8, [r0]
		break;
   1279e:	e00e      	b.n	127be <role_disable+0x4a>
		ticks_xtal_to_start =
   127a0:	4ba4      	ldr	r3, [pc, #656]	; (12a34 <role_disable+0x2c0>)
		ticks_active_to_start =
   127a2:	e9d3 6806 	ldrd	r6, r8, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   127a6:	ab02      	add	r3, sp, #8
   127a8:	9300      	str	r3, [sp, #0]
   127aa:	460a      	mov	r2, r1
   127ac:	4ba2      	ldr	r3, [pc, #648]	; (12a38 <role_disable+0x2c4>)
   127ae:	2103      	movs	r1, #3
   127b0:	2000      	movs	r0, #0
   127b2:	f7ff fcb5 	bl	12120 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   127b6:	2802      	cmp	r0, #2
   127b8:	d01d      	beq.n	127f6 <role_disable+0x82>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   127ba:	9b02      	ldr	r3, [sp, #8]
   127bc:	b9fb      	cbnz	r3, 127fe <role_disable+0x8a>
	LL_ASSERT(!_radio.ticker_id_stop);
   127be:	4c9d      	ldr	r4, [pc, #628]	; (12a34 <role_disable+0x2c0>)
   127c0:	7ce3      	ldrb	r3, [r4, #19]
   127c2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   127c6:	2b00      	cmp	r3, #0
   127c8:	d04f      	beq.n	1286a <role_disable+0xf6>
   127ca:	4b9c      	ldr	r3, [pc, #624]	; (12a3c <role_disable+0x2c8>)
   127cc:	681b      	ldr	r3, [r3, #0]
   127ce:	0759      	lsls	r1, r3, #29
   127d0:	d02d      	beq.n	1282e <role_disable+0xba>
   127d2:	2301      	movs	r3, #1
   127d4:	f04f 0200 	mov.w	r2, #0
   127d8:	f363 0202 	bfi	r2, r3, #0, #3
   127dc:	4998      	ldr	r1, [pc, #608]	; (12a40 <role_disable+0x2cc>)
   127de:	4b99      	ldr	r3, [pc, #612]	; (12a44 <role_disable+0x2d0>)
   127e0:	4899      	ldr	r0, [pc, #612]	; (12a48 <role_disable+0x2d4>)
   127e2:	1a5b      	subs	r3, r3, r1
   127e4:	f36f 02c5 	bfc	r2, #3, #3
   127e8:	08db      	lsrs	r3, r3, #3
   127ea:	f363 128f 	bfi	r2, r3, #6, #10
   127ee:	4997      	ldr	r1, [pc, #604]	; (12a4c <role_disable+0x2d8>)
   127f0:	e01b      	b.n	1282a <role_disable+0xb6>
				cpu_sleep();
   127f2:	f7ff fd9d 	bl	12330 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   127f6:	9b02      	ldr	r3, [sp, #8]
   127f8:	2b02      	cmp	r3, #2
   127fa:	d0fa      	beq.n	127f2 <role_disable+0x7e>
   127fc:	e7dd      	b.n	127ba <role_disable+0x46>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   127fe:	9b02      	ldr	r3, [sp, #8]
   12800:	2b01      	cmp	r3, #1
   12802:	d0dc      	beq.n	127be <role_disable+0x4a>
   12804:	4b8d      	ldr	r3, [pc, #564]	; (12a3c <role_disable+0x2c8>)
   12806:	681b      	ldr	r3, [r3, #0]
   12808:	075c      	lsls	r4, r3, #29
   1280a:	d010      	beq.n	1282e <role_disable+0xba>
   1280c:	2301      	movs	r3, #1
   1280e:	f04f 0200 	mov.w	r2, #0
   12812:	f363 0202 	bfi	r2, r3, #0, #3
   12816:	498a      	ldr	r1, [pc, #552]	; (12a40 <role_disable+0x2cc>)
   12818:	4b8a      	ldr	r3, [pc, #552]	; (12a44 <role_disable+0x2d0>)
   1281a:	488d      	ldr	r0, [pc, #564]	; (12a50 <role_disable+0x2dc>)
   1281c:	1a5b      	subs	r3, r3, r1
   1281e:	f36f 02c5 	bfc	r2, #3, #3
   12822:	08db      	lsrs	r3, r3, #3
   12824:	4989      	ldr	r1, [pc, #548]	; (12a4c <role_disable+0x2d8>)
   12826:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(0);
   1282a:	f7ef fc5f 	bl	20ec <log_1>
   1282e:	4040      	eors	r0, r0
   12830:	f380 8811 	msr	BASEPRI, r0
   12834:	f04f 0004 	mov.w	r0, #4
   12838:	df02      	svc	2
		ticks_xtal_to_start =
   1283a:	4b7e      	ldr	r3, [pc, #504]	; (12a34 <role_disable+0x2c0>)
		ticks_active_to_start =
   1283c:	e9d3 6834 	ldrd	r6, r8, [r3, #208]	; 0xd0
		break;
   12840:	e7bd      	b.n	127be <role_disable+0x4a>
			LL_ASSERT(0);
   12842:	4b7e      	ldr	r3, [pc, #504]	; (12a3c <role_disable+0x2c8>)
   12844:	681b      	ldr	r3, [r3, #0]
   12846:	0758      	lsls	r0, r3, #29
   12848:	d0f1      	beq.n	1282e <role_disable+0xba>
   1284a:	2301      	movs	r3, #1
   1284c:	f04f 0200 	mov.w	r2, #0
   12850:	f363 0202 	bfi	r2, r3, #0, #3
   12854:	497a      	ldr	r1, [pc, #488]	; (12a40 <role_disable+0x2cc>)
   12856:	4b7b      	ldr	r3, [pc, #492]	; (12a44 <role_disable+0x2d0>)
   12858:	1a5b      	subs	r3, r3, r1
   1285a:	f36f 02c5 	bfc	r2, #3, #3
   1285e:	08db      	lsrs	r3, r3, #3
   12860:	497a      	ldr	r1, [pc, #488]	; (12a4c <role_disable+0x2d8>)
   12862:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(0);
   12866:	487b      	ldr	r0, [pc, #492]	; (12a54 <role_disable+0x2e0>)
   12868:	e7df      	b.n	1282a <role_disable+0xb6>
	ret_cb = TICKER_STATUS_BUSY;
   1286a:	ab06      	add	r3, sp, #24
   1286c:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
   1286e:	74e5      	strb	r5, [r4, #19]
	ret_cb = TICKER_STATUS_BUSY;
   12870:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12874:	2103      	movs	r1, #3
   12876:	9300      	str	r3, [sp, #0]
   12878:	462a      	mov	r2, r5
   1287a:	4b6f      	ldr	r3, [pc, #444]	; (12a38 <role_disable+0x2c4>)
   1287c:	f7ff fc50 	bl	12120 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   12880:	2802      	cmp	r0, #2
   12882:	d033      	beq.n	128ec <role_disable+0x178>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   12884:	9b02      	ldr	r3, [sp, #8]
   12886:	2b00      	cmp	r3, #0
   12888:	f040 815b 	bne.w	12b42 <role_disable+0x3ce>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   1288c:	7c63      	ldrb	r3, [r4, #17]
   1288e:	42ab      	cmp	r3, r5
   12890:	d003      	beq.n	1289a <role_disable+0x126>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   12892:	7ca3      	ldrb	r3, [r4, #18]
   12894:	42ab      	cmp	r3, r5
   12896:	f040 8150 	bne.w	12b3a <role_disable+0x3c6>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
   1289a:	ab06      	add	r3, sp, #24
   1289c:	2202      	movs	r2, #2
   1289e:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   128a2:	2200      	movs	r2, #0
   128a4:	9300      	str	r3, [sp, #0]
   128a6:	2103      	movs	r1, #3
   128a8:	4b63      	ldr	r3, [pc, #396]	; (12a38 <role_disable+0x2c4>)
   128aa:	4610      	mov	r0, r2
   128ac:	f7ff fc38 	bl	12120 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   128b0:	2802      	cmp	r0, #2
   128b2:	d129      	bne.n	12908 <role_disable+0x194>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   128b4:	2201      	movs	r2, #1
   128b6:	4611      	mov	r1, r2
   128b8:	2003      	movs	r0, #3
   128ba:	f7fe fdb7 	bl	1142c <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
   128be:	9b03      	ldr	r3, [sp, #12]
   128c0:	2b02      	cmp	r3, #2
   128c2:	d121      	bne.n	12908 <role_disable+0x194>
   128c4:	4b5d      	ldr	r3, [pc, #372]	; (12a3c <role_disable+0x2c8>)
   128c6:	681b      	ldr	r3, [r3, #0]
   128c8:	075a      	lsls	r2, r3, #29
   128ca:	d0b0      	beq.n	1282e <role_disable+0xba>
   128cc:	2301      	movs	r3, #1
   128ce:	f04f 0200 	mov.w	r2, #0
   128d2:	f363 0202 	bfi	r2, r3, #0, #3
   128d6:	495a      	ldr	r1, [pc, #360]	; (12a40 <role_disable+0x2cc>)
   128d8:	4b5a      	ldr	r3, [pc, #360]	; (12a44 <role_disable+0x2d0>)
   128da:	485f      	ldr	r0, [pc, #380]	; (12a58 <role_disable+0x2e4>)
   128dc:	1a5b      	subs	r3, r3, r1
   128de:	f36f 02c5 	bfc	r2, #3, #3
   128e2:	08db      	lsrs	r3, r3, #3
   128e4:	f363 128f 	bfi	r2, r3, #6, #10
   128e8:	495c      	ldr	r1, [pc, #368]	; (12a5c <role_disable+0x2e8>)
   128ea:	e79e      	b.n	1282a <role_disable+0xb6>
		if (_radio.ticker_id_event == ticker_id_primary) {
   128ec:	7ca3      	ldrb	r3, [r4, #18]
   128ee:	42ab      	cmp	r3, r5
   128f0:	d104      	bne.n	128fc <role_disable+0x188>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   128f2:	2201      	movs	r2, #1
   128f4:	4611      	mov	r1, r2
   128f6:	2003      	movs	r0, #3
   128f8:	f7fe fd98 	bl	1142c <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
   128fc:	9b02      	ldr	r3, [sp, #8]
   128fe:	2b02      	cmp	r3, #2
   12900:	d1c0      	bne.n	12884 <role_disable+0x110>
			cpu_sleep();
   12902:	f7ff fd15 	bl	12330 <cpu_sleep>
   12906:	e7f9      	b.n	128fc <role_disable+0x188>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
   12908:	9d03      	ldr	r5, [sp, #12]
   1290a:	2d00      	cmp	r5, #0
   1290c:	f040 80b2 	bne.w	12a74 <role_disable+0x300>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
   12910:	2302      	movs	r3, #2
   12912:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
   12914:	7c63      	ldrb	r3, [r4, #17]
   12916:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   1291a:	b99b      	cbnz	r3, 12944 <role_disable+0x1d0>
   1291c:	4b47      	ldr	r3, [pc, #284]	; (12a3c <role_disable+0x2c8>)
   1291e:	681b      	ldr	r3, [r3, #0]
   12920:	075b      	lsls	r3, r3, #29
   12922:	d084      	beq.n	1282e <role_disable+0xba>
   12924:	2301      	movs	r3, #1
   12926:	f04f 0200 	mov.w	r2, #0
   1292a:	f363 0202 	bfi	r2, r3, #0, #3
   1292e:	f361 02c5 	bfi	r2, r1, #3, #3
   12932:	4b44      	ldr	r3, [pc, #272]	; (12a44 <role_disable+0x2d0>)
   12934:	4942      	ldr	r1, [pc, #264]	; (12a40 <role_disable+0x2cc>)
   12936:	484a      	ldr	r0, [pc, #296]	; (12a60 <role_disable+0x2ec>)
   12938:	1a5b      	subs	r3, r3, r1
   1293a:	08db      	lsrs	r3, r3, #3
   1293c:	f363 128f 	bfi	r2, r3, #6, #10
   12940:	4946      	ldr	r1, [pc, #280]	; (12a5c <role_disable+0x2e8>)
   12942:	e772      	b.n	1282a <role_disable+0xb6>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12944:	ab04      	add	r3, sp, #16
		_radio.ticker_id_prepare = 0;
   12946:	7465      	strb	r5, [r4, #17]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12948:	2201      	movs	r2, #1
   1294a:	9300      	str	r3, [sp, #0]
   1294c:	2103      	movs	r1, #3
   1294e:	4b3a      	ldr	r3, [pc, #232]	; (12a38 <role_disable+0x2c4>)
   12950:	4628      	mov	r0, r5
   12952:	f7ff fbe5 	bl	12120 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   12956:	2802      	cmp	r0, #2
   12958:	d11c      	bne.n	12994 <role_disable+0x220>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1295a:	2201      	movs	r2, #1
   1295c:	4611      	mov	r1, r2
   1295e:	2003      	movs	r0, #3
   12960:	f7fe fd64 	bl	1142c <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
   12964:	9b04      	ldr	r3, [sp, #16]
   12966:	2b02      	cmp	r3, #2
   12968:	d114      	bne.n	12994 <role_disable+0x220>
   1296a:	4b34      	ldr	r3, [pc, #208]	; (12a3c <role_disable+0x2c8>)
   1296c:	681b      	ldr	r3, [r3, #0]
   1296e:	075f      	lsls	r7, r3, #29
   12970:	f43f af5d 	beq.w	1282e <role_disable+0xba>
   12974:	2301      	movs	r3, #1
   12976:	f04f 0200 	mov.w	r2, #0
   1297a:	f363 0202 	bfi	r2, r3, #0, #3
   1297e:	4930      	ldr	r1, [pc, #192]	; (12a40 <role_disable+0x2cc>)
   12980:	4b30      	ldr	r3, [pc, #192]	; (12a44 <role_disable+0x2d0>)
   12982:	4838      	ldr	r0, [pc, #224]	; (12a64 <role_disable+0x2f0>)
   12984:	1a5b      	subs	r3, r3, r1
   12986:	f365 02c5 	bfi	r2, r5, #3, #3
   1298a:	08db      	lsrs	r3, r3, #3
   1298c:	f363 128f 	bfi	r2, r3, #6, #10
   12990:	4932      	ldr	r1, [pc, #200]	; (12a5c <role_disable+0x2e8>)
   12992:	e74a      	b.n	1282a <role_disable+0xb6>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
   12994:	9d04      	ldr	r5, [sp, #16]
   12996:	bb15      	cbnz	r5, 129de <role_disable+0x26a>
			ticks_xtal_to_start &= ~XON_BITMASK;
   12998:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   1299c:	45b0      	cmp	r8, r6
				ret = mayfly_enqueue(
   1299e:	bf8c      	ite	hi
   129a0:	4b31      	ldrhi	r3, [pc, #196]	; (12a68 <role_disable+0x2f4>)
				ret = mayfly_enqueue(
   129a2:	4b32      	ldrls	r3, [pc, #200]	; (12a6c <role_disable+0x2f8>)
   129a4:	462a      	mov	r2, r5
   129a6:	4629      	mov	r1, r5
   129a8:	2003      	movs	r0, #3
   129aa:	f7fe fd67 	bl	1147c <mayfly_enqueue>
				LL_ASSERT(!ret);
   129ae:	2800      	cmp	r0, #0
   129b0:	f000 80c3 	beq.w	12b3a <role_disable+0x3c6>
   129b4:	4b21      	ldr	r3, [pc, #132]	; (12a3c <role_disable+0x2c8>)
   129b6:	681b      	ldr	r3, [r3, #0]
   129b8:	075e      	lsls	r6, r3, #29
   129ba:	f43f af38 	beq.w	1282e <role_disable+0xba>
   129be:	f04f 0200 	mov.w	r2, #0
   129c2:	2301      	movs	r3, #1
   129c4:	f363 0202 	bfi	r2, r3, #0, #3
			LL_ASSERT(!ret);
   129c8:	f365 02c5 	bfi	r2, r5, #3, #3
   129cc:	491c      	ldr	r1, [pc, #112]	; (12a40 <role_disable+0x2cc>)
   129ce:	4b1d      	ldr	r3, [pc, #116]	; (12a44 <role_disable+0x2d0>)
			LL_ASSERT(!ret);
   129d0:	4827      	ldr	r0, [pc, #156]	; (12a70 <role_disable+0x2fc>)
   129d2:	1a5b      	subs	r3, r3, r1
   129d4:	08db      	lsrs	r3, r3, #3
   129d6:	f363 128f 	bfi	r2, r3, #6, #10
   129da:	4920      	ldr	r1, [pc, #128]	; (12a5c <role_disable+0x2e8>)
   129dc:	e725      	b.n	1282a <role_disable+0xb6>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
   129de:	9e04      	ldr	r6, [sp, #16]
   129e0:	2e01      	cmp	r6, #1
   129e2:	f040 80b4 	bne.w	12b4e <role_disable+0x3da>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   129e6:	2200      	movs	r2, #0
   129e8:	4b1f      	ldr	r3, [pc, #124]	; (12a68 <role_disable+0x2f4>)
   129ea:	4611      	mov	r1, r2
   129ec:	2003      	movs	r0, #3
   129ee:	f7fe fd45 	bl	1147c <mayfly_enqueue>
			LL_ASSERT(!ret);
   129f2:	4605      	mov	r5, r0
   129f4:	b158      	cbz	r0, 12a0e <role_disable+0x29a>
   129f6:	4b11      	ldr	r3, [pc, #68]	; (12a3c <role_disable+0x2c8>)
   129f8:	681b      	ldr	r3, [r3, #0]
   129fa:	075d      	lsls	r5, r3, #29
   129fc:	f43f af17 	beq.w	1282e <role_disable+0xba>
   12a00:	f04f 0200 	mov.w	r2, #0
   12a04:	f366 0202 	bfi	r2, r6, #0, #3
			LL_ASSERT(!ret);
   12a08:	f36f 02c5 	bfc	r2, #3, #3
   12a0c:	e7de      	b.n	129cc <role_disable+0x258>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   12a0e:	4602      	mov	r2, r0
   12a10:	4601      	mov	r1, r0
   12a12:	4b16      	ldr	r3, [pc, #88]	; (12a6c <role_disable+0x2f8>)
   12a14:	2003      	movs	r0, #3
   12a16:	f7fe fd31 	bl	1147c <mayfly_enqueue>
			LL_ASSERT(!ret);
   12a1a:	2800      	cmp	r0, #0
   12a1c:	f000 808d 	beq.w	12b3a <role_disable+0x3c6>
   12a20:	4b06      	ldr	r3, [pc, #24]	; (12a3c <role_disable+0x2c8>)
   12a22:	681b      	ldr	r3, [r3, #0]
   12a24:	075c      	lsls	r4, r3, #29
   12a26:	f43f af02 	beq.w	1282e <role_disable+0xba>
   12a2a:	f04f 0200 	mov.w	r2, #0
   12a2e:	f366 0202 	bfi	r2, r6, #0, #3
   12a32:	e7c9      	b.n	129c8 <role_disable+0x254>
   12a34:	2000126c 	.word	0x2000126c
   12a38:	00012375 	.word	0x00012375
   12a3c:	2000e218 	.word	0x2000e218
   12a40:	0002ef38 	.word	0x0002ef38
   12a44:	0002ef70 	.word	0x0002ef70
   12a48:	00033541 	.word	0x00033541
   12a4c:	00032d0a 	.word	0x00032d0a
   12a50:	0003350d 	.word	0x0003350d
   12a54:	0003146d 	.word	0x0003146d
   12a58:	0003356d 	.word	0x0003356d
   12a5c:	00032cf6 	.word	0x00032cf6
   12a60:	00033592 	.word	0x00033592
   12a64:	000335c0 	.word	0x000335c0
   12a68:	2000dac4 	.word	0x2000dac4
   12a6c:	2000db84 	.word	0x2000db84
   12a70:	000335e4 	.word	0x000335e4
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
   12a74:	9d03      	ldr	r5, [sp, #12]
   12a76:	2d01      	cmp	r5, #1
   12a78:	d169      	bne.n	12b4e <role_disable+0x3da>
		if (ticker_id_stop != TICKER_NULL) {
   12a7a:	2fff      	cmp	r7, #255	; 0xff
   12a7c:	d042      	beq.n	12b04 <role_disable+0x390>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
   12a7e:	ab06      	add	r3, sp, #24
   12a80:	2202      	movs	r2, #2
   12a82:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a86:	2103      	movs	r1, #3
   12a88:	9300      	str	r3, [sp, #0]
   12a8a:	463a      	mov	r2, r7
   12a8c:	4b3b      	ldr	r3, [pc, #236]	; (12b7c <role_disable+0x408>)
   12a8e:	2000      	movs	r0, #0
   12a90:	f7ff fb46 	bl	12120 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   12a94:	2802      	cmp	r0, #2
   12a96:	d11b      	bne.n	12ad0 <role_disable+0x35c>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   12a98:	462a      	mov	r2, r5
   12a9a:	4629      	mov	r1, r5
   12a9c:	2003      	movs	r0, #3
   12a9e:	f7fe fcc5 	bl	1142c <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
   12aa2:	9b05      	ldr	r3, [sp, #20]
   12aa4:	2b02      	cmp	r3, #2
   12aa6:	d113      	bne.n	12ad0 <role_disable+0x35c>
   12aa8:	4b35      	ldr	r3, [pc, #212]	; (12b80 <role_disable+0x40c>)
   12aaa:	681b      	ldr	r3, [r3, #0]
   12aac:	0758      	lsls	r0, r3, #29
   12aae:	f43f aebe 	beq.w	1282e <role_disable+0xba>
   12ab2:	4934      	ldr	r1, [pc, #208]	; (12b84 <role_disable+0x410>)
   12ab4:	4b34      	ldr	r3, [pc, #208]	; (12b88 <role_disable+0x414>)
   12ab6:	4835      	ldr	r0, [pc, #212]	; (12b8c <role_disable+0x418>)
   12ab8:	f04f 0200 	mov.w	r2, #0
   12abc:	1a5b      	subs	r3, r3, r1
   12abe:	f365 0202 	bfi	r2, r5, #0, #3
   12ac2:	f36f 02c5 	bfc	r2, #3, #3
   12ac6:	08db      	lsrs	r3, r3, #3
   12ac8:	f363 128f 	bfi	r2, r3, #6, #10
   12acc:	4930      	ldr	r1, [pc, #192]	; (12b90 <role_disable+0x41c>)
   12ace:	e6ac      	b.n	1282a <role_disable+0xb6>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
   12ad0:	9b05      	ldr	r3, [sp, #20]
   12ad2:	b1bb      	cbz	r3, 12b04 <role_disable+0x390>
   12ad4:	9b05      	ldr	r3, [sp, #20]
   12ad6:	2b01      	cmp	r3, #1
   12ad8:	d014      	beq.n	12b04 <role_disable+0x390>
   12ada:	4b29      	ldr	r3, [pc, #164]	; (12b80 <role_disable+0x40c>)
   12adc:	681b      	ldr	r3, [r3, #0]
   12ade:	0759      	lsls	r1, r3, #29
   12ae0:	f43f aea5 	beq.w	1282e <role_disable+0xba>
   12ae4:	2301      	movs	r3, #1
   12ae6:	f04f 0200 	mov.w	r2, #0
   12aea:	f363 0202 	bfi	r2, r3, #0, #3
   12aee:	4925      	ldr	r1, [pc, #148]	; (12b84 <role_disable+0x410>)
   12af0:	4b25      	ldr	r3, [pc, #148]	; (12b88 <role_disable+0x414>)
   12af2:	4828      	ldr	r0, [pc, #160]	; (12b94 <role_disable+0x420>)
   12af4:	1a5b      	subs	r3, r3, r1
   12af6:	f36f 02c5 	bfc	r2, #3, #3
   12afa:	08db      	lsrs	r3, r3, #3
   12afc:	f363 128f 	bfi	r2, r3, #6, #10
   12b00:	4923      	ldr	r1, [pc, #140]	; (12b90 <role_disable+0x41c>)
   12b02:	e692      	b.n	1282a <role_disable+0xb6>
		if (_radio.role != ROLE_NONE) {
   12b04:	7d23      	ldrb	r3, [r4, #20]
   12b06:	b1c3      	cbz	r3, 12b3a <role_disable+0x3c6>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   12b08:	4b23      	ldr	r3, [pc, #140]	; (12b98 <role_disable+0x424>)
   12b0a:	2204      	movs	r2, #4
   12b0c:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   12b0e:	2200      	movs	r2, #0
   12b10:	4611      	mov	r1, r2
   12b12:	2003      	movs	r0, #3
   12b14:	f7fe fcb2 	bl	1147c <mayfly_enqueue>
			LL_ASSERT(!ret);
   12b18:	b160      	cbz	r0, 12b34 <role_disable+0x3c0>
   12b1a:	4b19      	ldr	r3, [pc, #100]	; (12b80 <role_disable+0x40c>)
   12b1c:	681b      	ldr	r3, [r3, #0]
   12b1e:	075a      	lsls	r2, r3, #29
   12b20:	f43f ae85 	beq.w	1282e <role_disable+0xba>
   12b24:	f04f 0200 	mov.w	r2, #0
   12b28:	2301      	movs	r3, #1
   12b2a:	f363 0202 	bfi	r2, r3, #0, #3
   12b2e:	e76b      	b.n	12a08 <role_disable+0x294>
				cpu_sleep();
   12b30:	f7ff fbfe 	bl	12330 <cpu_sleep>
			while (_radio.role != ROLE_NONE) {
   12b34:	7d23      	ldrb	r3, [r4, #20]
   12b36:	2b00      	cmp	r3, #0
   12b38:	d1fa      	bne.n	12b30 <role_disable+0x3bc>
	if (!_radio.ticker_id_stop) {
   12b3a:	7ce3      	ldrb	r3, [r4, #19]
   12b3c:	b90b      	cbnz	r3, 12b42 <role_disable+0x3ce>
		ret_cb = TICKER_STATUS_FAILURE;
   12b3e:	2301      	movs	r3, #1
   12b40:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
   12b42:	2300      	movs	r3, #0
   12b44:	74e3      	strb	r3, [r4, #19]
	return ret_cb;
   12b46:	9802      	ldr	r0, [sp, #8]
}
   12b48:	b006      	add	sp, #24
   12b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(0);
   12b4e:	4b0c      	ldr	r3, [pc, #48]	; (12b80 <role_disable+0x40c>)
   12b50:	681b      	ldr	r3, [r3, #0]
   12b52:	075b      	lsls	r3, r3, #29
   12b54:	f43f ae6b 	beq.w	1282e <role_disable+0xba>
   12b58:	2301      	movs	r3, #1
   12b5a:	f04f 0200 	mov.w	r2, #0
   12b5e:	f363 0202 	bfi	r2, r3, #0, #3
   12b62:	4908      	ldr	r1, [pc, #32]	; (12b84 <role_disable+0x410>)
   12b64:	4b08      	ldr	r3, [pc, #32]	; (12b88 <role_disable+0x414>)
   12b66:	1a5b      	subs	r3, r3, r1
   12b68:	f36f 02c5 	bfc	r2, #3, #3
   12b6c:	08db      	lsrs	r3, r3, #3
   12b6e:	f363 128f 	bfi	r2, r3, #6, #10
   12b72:	4907      	ldr	r1, [pc, #28]	; (12b90 <role_disable+0x41c>)
   12b74:	e677      	b.n	12866 <role_disable+0xf2>
				return 1;
   12b76:	2001      	movs	r0, #1
   12b78:	e7e6      	b.n	12b48 <role_disable+0x3d4>
   12b7a:	bf00      	nop
   12b7c:	00012375 	.word	0x00012375
   12b80:	2000e218 	.word	0x2000e218
   12b84:	0002ef38 	.word	0x0002ef38
   12b88:	0002ef70 	.word	0x0002ef70
   12b8c:	000335fe 	.word	0x000335fe
   12b90:	00032cf6 	.word	0x00032cf6
   12b94:	00033624 	.word	0x00033624
   12b98:	2000daf4 	.word	0x2000daf4

00012b9c <mayfly_xtal_retain>:
{
   12b9c:	b570      	push	{r4, r5, r6, lr}
   12b9e:	4b2c      	ldr	r3, [pc, #176]	; (12c50 <mayfly_xtal_retain+0xb4>)
   12ba0:	4605      	mov	r5, r0
   12ba2:	781c      	ldrb	r4, [r3, #0]
	if (retain) {
   12ba4:	460e      	mov	r6, r1
   12ba6:	2900      	cmp	r1, #0
   12ba8:	d038      	beq.n	12c1c <mayfly_xtal_retain+0x80>
		if (!s_xtal_retained) {
   12baa:	2c00      	cmp	r4, #0
   12bac:	d14e      	bne.n	12c4c <mayfly_xtal_retain+0xb0>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   12bae:	2801      	cmp	r0, #1
   12bb0:	d01a      	beq.n	12be8 <mayfly_xtal_retain+0x4c>
   12bb2:	4b28      	ldr	r3, [pc, #160]	; (12c54 <mayfly_xtal_retain+0xb8>)
   12bb4:	681b      	ldr	r3, [r3, #0]
   12bb6:	0759      	lsls	r1, r3, #29
   12bb8:	d010      	beq.n	12bdc <mayfly_xtal_retain+0x40>
   12bba:	2301      	movs	r3, #1
   12bbc:	f04f 0200 	mov.w	r2, #0
   12bc0:	f363 0202 	bfi	r2, r3, #0, #3
   12bc4:	4924      	ldr	r1, [pc, #144]	; (12c58 <mayfly_xtal_retain+0xbc>)
   12bc6:	4b25      	ldr	r3, [pc, #148]	; (12c5c <mayfly_xtal_retain+0xc0>)
   12bc8:	4825      	ldr	r0, [pc, #148]	; (12c60 <mayfly_xtal_retain+0xc4>)
   12bca:	1a5b      	subs	r3, r3, r1
   12bcc:	f364 02c5 	bfi	r2, r4, #3, #3
   12bd0:	08db      	lsrs	r3, r3, #3
   12bd2:	4924      	ldr	r1, [pc, #144]	; (12c64 <mayfly_xtal_retain+0xc8>)
   12bd4:	f363 128f 	bfi	r2, r3, #6, #10
			LL_ASSERT(!retval);
   12bd8:	f7ef fa88 	bl	20ec <log_1>
   12bdc:	4040      	eors	r0, r0
   12bde:	f380 8811 	msr	BASEPRI, r0
   12be2:	f04f 0004 	mov.w	r0, #4
   12be6:	df02      	svc	2
			s_xtal_retained = 1;
   12be8:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
   12bea:	4622      	mov	r2, r4
   12bec:	4b1e      	ldr	r3, [pc, #120]	; (12c68 <mayfly_xtal_retain+0xcc>)
   12bee:	4621      	mov	r1, r4
   12bf0:	f7fe fc44 	bl	1147c <mayfly_enqueue>
			LL_ASSERT(!retval);
   12bf4:	b350      	cbz	r0, 12c4c <mayfly_xtal_retain+0xb0>
   12bf6:	4b17      	ldr	r3, [pc, #92]	; (12c54 <mayfly_xtal_retain+0xb8>)
   12bf8:	681b      	ldr	r3, [r3, #0]
   12bfa:	075a      	lsls	r2, r3, #29
   12bfc:	d0ee      	beq.n	12bdc <mayfly_xtal_retain+0x40>
   12bfe:	f04f 0200 	mov.w	r2, #0
   12c02:	f365 0202 	bfi	r2, r5, #0, #3
   12c06:	f364 02c5 	bfi	r2, r4, #3, #3
   12c0a:	4913      	ldr	r1, [pc, #76]	; (12c58 <mayfly_xtal_retain+0xbc>)
   12c0c:	4b13      	ldr	r3, [pc, #76]	; (12c5c <mayfly_xtal_retain+0xc0>)
			LL_ASSERT(!retval);
   12c0e:	4817      	ldr	r0, [pc, #92]	; (12c6c <mayfly_xtal_retain+0xd0>)
   12c10:	1a5b      	subs	r3, r3, r1
   12c12:	08db      	lsrs	r3, r3, #3
   12c14:	f363 128f 	bfi	r2, r3, #6, #10
   12c18:	4912      	ldr	r1, [pc, #72]	; (12c64 <mayfly_xtal_retain+0xc8>)
   12c1a:	e7dd      	b.n	12bd8 <mayfly_xtal_retain+0x3c>
		if (s_xtal_retained) {
   12c1c:	b1b4      	cbz	r4, 12c4c <mayfly_xtal_retain+0xb0>
			s_xtal_retained = 0;
   12c1e:	7019      	strb	r1, [r3, #0]
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
   12c20:	4b13      	ldr	r3, [pc, #76]	; (12c70 <mayfly_xtal_retain+0xd4>)
   12c22:	f1a3 0210 	sub.w	r2, r3, #16
			retval = mayfly_enqueue(caller_id,
   12c26:	2801      	cmp	r0, #1
   12c28:	bf18      	it	ne
   12c2a:	4613      	movne	r3, r2
   12c2c:	460a      	mov	r2, r1
   12c2e:	f7fe fc25 	bl	1147c <mayfly_enqueue>
			LL_ASSERT(!retval);
   12c32:	b158      	cbz	r0, 12c4c <mayfly_xtal_retain+0xb0>
   12c34:	4b07      	ldr	r3, [pc, #28]	; (12c54 <mayfly_xtal_retain+0xb8>)
   12c36:	681b      	ldr	r3, [r3, #0]
   12c38:	075b      	lsls	r3, r3, #29
   12c3a:	d0cf      	beq.n	12bdc <mayfly_xtal_retain+0x40>
   12c3c:	f04f 0200 	mov.w	r2, #0
   12c40:	2301      	movs	r3, #1
   12c42:	f363 0202 	bfi	r2, r3, #0, #3
   12c46:	f366 02c5 	bfi	r2, r6, #3, #3
   12c4a:	e7de      	b.n	12c0a <mayfly_xtal_retain+0x6e>
}
   12c4c:	bd70      	pop	{r4, r5, r6, pc}
   12c4e:	bf00      	nop
   12c50:	2000148c 	.word	0x2000148c
   12c54:	2000e218 	.word	0x2000e218
   12c58:	0002ef38 	.word	0x0002ef38
   12c5c:	0002ef70 	.word	0x0002ef70
   12c60:	000333c6 	.word	0x000333c6
   12c64:	00032a55 	.word	0x00032a55
   12c68:	2000db44 	.word	0x2000db44
   12c6c:	000333ea 	.word	0x000333ea
   12c70:	2000db64 	.word	0x2000db64

00012c74 <rx_packet_set>:
{
   12c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
   12c76:	f890 503a 	ldrb.w	r5, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
   12c7a:	8e04      	ldrh	r4, [r0, #48]	; 0x30
{
   12c7c:	4607      	mov	r7, r0
	phy = conn->phy_rx;
   12c7e:	f005 0507 	and.w	r5, r5, #7
{
   12c82:	460e      	mov	r6, r1
	radio_phy_set(phy, 0);
   12c84:	4628      	mov	r0, r5
   12c86:	2100      	movs	r1, #0
   12c88:	f00b fd64 	bl	1e754 <radio_phy_set>
	if (conn->enc_rx) {
   12c8c:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
   12c90:	006a      	lsls	r2, r5, #1
   12c92:	06db      	lsls	r3, r3, #27
   12c94:	b2e1      	uxtb	r1, r4
   12c96:	f042 0201 	orr.w	r2, r2, #1
   12c9a:	d50e      	bpl.n	12cba <rx_packet_set+0x46>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   12c9c:	3104      	adds	r1, #4
   12c9e:	b2c9      	uxtb	r1, r1
   12ca0:	2008      	movs	r0, #8
   12ca2:	f00b fd9d 	bl	1e7e0 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   12ca6:	4632      	mov	r2, r6
   12ca8:	4629      	mov	r1, r5
   12caa:	f107 00f9 	add.w	r0, r7, #249	; 0xf9
   12cae:	f00b ffdd 	bl	1ec6c <radio_ccm_rx_pkt_set>
}
   12cb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
   12cb6:	f00b bdc1 	b.w	1e83c <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   12cba:	2008      	movs	r0, #8
   12cbc:	f00b fd90 	bl	1e7e0 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   12cc0:	4630      	mov	r0, r6
   12cc2:	e7f6      	b.n	12cb2 <rx_packet_set+0x3e>

00012cc4 <tx_packet_set>:
{
   12cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12cc6:	460f      	mov	r7, r1
	phy = conn->phy_tx;
   12cc8:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
   12ccc:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
   12cce:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
   12cd2:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
   12cd4:	09c9      	lsrs	r1, r1, #7
   12cd6:	4620      	mov	r0, r4
   12cd8:	f00b fd3c 	bl	1e754 <radio_phy_set>
	if (conn->enc_tx) {
   12cdc:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
   12ce0:	0062      	lsls	r2, r4, #1
   12ce2:	069b      	lsls	r3, r3, #26
   12ce4:	b2e9      	uxtb	r1, r5
   12ce6:	f042 0201 	orr.w	r2, r2, #1
   12cea:	d50d      	bpl.n	12d08 <tx_packet_set+0x44>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
   12cec:	3104      	adds	r1, #4
   12cee:	b2c9      	uxtb	r1, r1
   12cf0:	2008      	movs	r0, #8
   12cf2:	f00b fd75 	bl	1e7e0 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
   12cf6:	4639      	mov	r1, r7
   12cf8:	f506 708d 	add.w	r0, r6, #282	; 0x11a
   12cfc:	f00b fff2 	bl	1ece4 <radio_ccm_tx_pkt_set>
}
   12d00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   12d04:	f00b bda0 	b.w	1e848 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   12d08:	2008      	movs	r0, #8
   12d0a:	f00b fd69 	bl	1e7e0 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   12d0e:	4638      	mov	r0, r7
   12d10:	e7f6      	b.n	12d00 <tx_packet_set+0x3c>
   12d12:	0000      	movs	r0, r0
   12d14:	0000      	movs	r0, r0
	...

00012d18 <sched_free_win_offset_calc>:
{
   12d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d1c:	b08f      	sub	sp, #60	; 0x3c
   12d1e:	4692      	mov	sl, r2
   12d20:	9304      	str	r3, [sp, #16]
   12d22:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
   12d26:	2b00      	cmp	r3, #0
{
   12d28:	4680      	mov	r8, r0
   12d2a:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
   12d2c:	da46      	bge.n	12dbc <sched_free_win_offset_calc+0xa4>
		u32_t ticks_prepare_to_start =
   12d2e:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
   12d30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
   12d34:	428a      	cmp	r2, r1
   12d36:	bf2c      	ite	cs
   12d38:	1a9a      	subcs	r2, r3, r2
   12d3a:	1a5a      	subcc	r2, r3, r1
	u32_t ticks_prepare_reduced = 0;
   12d3c:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
   12d3e:	f8d8 200c 	ldr.w	r2, [r8, #12]
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12d42:	2400      	movs	r4, #0
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
   12d44:	323d      	adds	r2, #61	; 0x3d
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   12d46:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12d4a:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
   12d4c:	18d3      	adds	r3, r2, r3
   12d4e:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12d50:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12d54:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12d58:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12d5a:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
   12d5c:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   12d5e:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12d60:	2302      	movs	r3, #2
   12d62:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   12d64:	ab0d      	add	r3, sp, #52	; 0x34
   12d66:	9302      	str	r3, [sp, #8]
   12d68:	4b8d      	ldr	r3, [pc, #564]	; (12fa0 <sched_free_win_offset_calc+0x288>)
   12d6a:	9301      	str	r3, [sp, #4]
   12d6c:	ab0b      	add	r3, sp, #44	; 0x2c
   12d6e:	9300      	str	r3, [sp, #0]
   12d70:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   12d74:	ab0c      	add	r3, sp, #48	; 0x30
   12d76:	2101      	movs	r1, #1
   12d78:	2000      	movs	r0, #0
   12d7a:	f7ff fa0b 	bl	12194 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   12d7e:	2802      	cmp	r0, #2
   12d80:	d025      	beq.n	12dce <sched_free_win_offset_calc+0xb6>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12d84:	b33b      	cbz	r3, 12dd6 <sched_free_win_offset_calc+0xbe>
   12d86:	4b87      	ldr	r3, [pc, #540]	; (12fa4 <sched_free_win_offset_calc+0x28c>)
   12d88:	681b      	ldr	r3, [r3, #0]
   12d8a:	0759      	lsls	r1, r3, #29
   12d8c:	d010      	beq.n	12db0 <sched_free_win_offset_calc+0x98>
   12d8e:	2301      	movs	r3, #1
   12d90:	f04f 0200 	mov.w	r2, #0
   12d94:	f363 0202 	bfi	r2, r3, #0, #3
   12d98:	4983      	ldr	r1, [pc, #524]	; (12fa8 <sched_free_win_offset_calc+0x290>)
   12d9a:	4b84      	ldr	r3, [pc, #528]	; (12fac <sched_free_win_offset_calc+0x294>)
   12d9c:	4884      	ldr	r0, [pc, #528]	; (12fb0 <sched_free_win_offset_calc+0x298>)
   12d9e:	1a5b      	subs	r3, r3, r1
   12da0:	f36f 02c5 	bfc	r2, #3, #3
   12da4:	08db      	lsrs	r3, r3, #3
   12da6:	4983      	ldr	r1, [pc, #524]	; (12fb4 <sched_free_win_offset_calc+0x29c>)
   12da8:	f363 128f 	bfi	r2, r3, #6, #10
			LL_ASSERT(0);
   12dac:	f7ef f99e 	bl	20ec <log_1>
   12db0:	4040      	eors	r0, r0
   12db2:	f380 8811 	msr	BASEPRI, r0
   12db6:	f04f 0004 	mov.w	r0, #4
   12dba:	df02      	svc	2
		u32_t ticks_prepare_to_start =
   12dbc:	4293      	cmp	r3, r2
   12dbe:	bf38      	it	cc
   12dc0:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
   12dc2:	2200      	movs	r2, #0
   12dc4:	e7ba      	b.n	12d3c <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12dc6:	2101      	movs	r1, #1
   12dc8:	2000      	movs	r0, #0
   12dca:	f7ff fa5b 	bl	12284 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12dd0:	2b02      	cmp	r3, #2
   12dd2:	d0f8      	beq.n	12dc6 <sched_free_win_offset_calc+0xae>
   12dd4:	e7d5      	b.n	12d82 <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
   12dd6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
   12dda:	2aff      	cmp	r2, #255	; 0xff
   12ddc:	d071      	beq.n	12ec2 <sched_free_win_offset_calc+0x1aa>
		if ((ticker_id_prev != 0xff) &&
   12dde:	2fff      	cmp	r7, #255	; 0xff
   12de0:	d016      	beq.n	12e10 <sched_free_win_offset_calc+0xf8>
   12de2:	990c      	ldr	r1, [sp, #48]	; 0x30
   12de4:	4549      	cmp	r1, r9
   12de6:	d013      	beq.n	12e10 <sched_free_win_offset_calc+0xf8>
			LL_ASSERT(0);
   12de8:	4a6e      	ldr	r2, [pc, #440]	; (12fa4 <sched_free_win_offset_calc+0x28c>)
   12dea:	6812      	ldr	r2, [r2, #0]
   12dec:	0752      	lsls	r2, r2, #29
   12dee:	d0df      	beq.n	12db0 <sched_free_win_offset_calc+0x98>
   12df0:	2101      	movs	r1, #1
   12df2:	f04f 0200 	mov.w	r2, #0
   12df6:	f361 0202 	bfi	r2, r1, #0, #3
   12dfa:	f363 02c5 	bfi	r2, r3, #3, #3
   12dfe:	496a      	ldr	r1, [pc, #424]	; (12fa8 <sched_free_win_offset_calc+0x290>)
   12e00:	4b6a      	ldr	r3, [pc, #424]	; (12fac <sched_free_win_offset_calc+0x294>)
   12e02:	486d      	ldr	r0, [pc, #436]	; (12fb8 <sched_free_win_offset_calc+0x2a0>)
   12e04:	1a5b      	subs	r3, r3, r1
   12e06:	08db      	lsrs	r3, r3, #3
   12e08:	f363 128f 	bfi	r2, r3, #6, #10
   12e0c:	4969      	ldr	r1, [pc, #420]	; (12fb4 <sched_free_win_offset_calc+0x29c>)
   12e0e:	e7cd      	b.n	12dac <sched_free_win_offset_calc+0x94>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12e10:	2a05      	cmp	r2, #5
   12e12:	d951      	bls.n	12eb8 <sched_free_win_offset_calc+0x1a0>
				  _radio.connection_count)) {
   12e14:	4869      	ldr	r0, [pc, #420]	; (12fbc <sched_free_win_offset_calc+0x2a4>)
   12e16:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   12e1a:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12e1c:	429a      	cmp	r2, r3
   12e1e:	da4b      	bge.n	12eb8 <sched_free_win_offset_calc+0x1a0>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
   12e20:	2a06      	cmp	r2, #6
   12e22:	f000 8092 	beq.w	12f4a <sched_free_win_offset_calc+0x232>
		if (ticker_id_other != 0xFF) {
   12e26:	9b06      	ldr	r3, [sp, #24]
   12e28:	2bff      	cmp	r3, #255	; 0xff
   12e2a:	d14a      	bne.n	12ec2 <sched_free_win_offset_calc+0x1aa>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12e2c:	3a07      	subs	r2, #7
   12e2e:	b292      	uxth	r2, r2
   12e30:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12e34:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
   12e38:	f7fe fa8c 	bl	11354 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
   12e3c:	4580      	cmp	r8, r0
   12e3e:	d03b      	beq.n	12eb8 <sched_free_win_offset_calc+0x1a0>
   12e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12e42:	b91b      	cbnz	r3, 12e4c <sched_free_win_offset_calc+0x134>
   12e44:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12e48:	2b00      	cmp	r3, #0
   12e4a:	db35      	blt.n	12eb8 <sched_free_win_offset_calc+0x1a0>
			u32_t ticks_to_expire_normal =
   12e4c:	9b05      	ldr	r3, [sp, #20]
   12e4e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   12e50:	441e      	add	r6, r3
   12e52:	e9d0 3200 	ldrd	r3, r2, [r0]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   12e56:	2b00      	cmp	r3, #0
   12e58:	da4e      	bge.n	12ef8 <sched_free_win_offset_calc+0x1e0>
				u32_t ticks_prepare_to_start =
   12e5a:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
   12e5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12e60:	428a      	cmp	r2, r1
   12e62:	bf2c      	ite	cs
   12e64:	18b6      	addcs	r6, r6, r2
   12e66:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
   12e68:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
   12e6a:	68c2      	ldr	r2, [r0, #12]
   12e6c:	f102 093d 	add.w	r9, r2, #61	; 0x3d
   12e70:	444b      	add	r3, r9
   12e72:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   12e74:	f8da 3000 	ldr.w	r3, [sl]
   12e78:	42b3      	cmp	r3, r6
   12e7a:	d216      	bcs.n	12eaa <sched_free_win_offset_calc+0x192>
   12e7c:	429d      	cmp	r5, r3
   12e7e:	bf38      	it	cc
   12e80:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
   12e82:	9b07      	ldr	r3, [sp, #28]
   12e84:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
   12e88:	9b18      	ldr	r3, [sp, #96]	; 0x60
   12e8a:	781b      	ldrb	r3, [r3, #0]
   12e8c:	42a3      	cmp	r3, r4
   12e8e:	d905      	bls.n	12e9c <sched_free_win_offset_calc+0x184>
				       (ticker_ticks_diff_get(
   12e90:	4629      	mov	r1, r5
   12e92:	4630      	mov	r0, r6
   12e94:	f7ff fa0e 	bl	122b4 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
   12e98:	42b8      	cmp	r0, r7
   12e9a:	d231      	bcs.n	12f00 <sched_free_win_offset_calc+0x1e8>
				if (_win_offset >= conn_interval) {
   12e9c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   12ea0:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
   12ea2:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
   12ea6:	4293      	cmp	r3, r2
   12ea8:	d20b      	bcs.n	12ec2 <sched_free_win_offset_calc+0x1aa>
			ticks_anchor_prev = ticks_anchor;
   12eaa:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
   12eae:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   12eb2:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
   12eb6:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
   12eb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   12eba:	781b      	ldrb	r3, [r3, #0]
   12ebc:	42a3      	cmp	r3, r4
   12ebe:	f63f af4f 	bhi.w	12d60 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
   12ec2:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   12ec6:	2bff      	cmp	r3, #255	; 0xff
   12ec8:	d111      	bne.n	12eee <sched_free_win_offset_calc+0x1d6>
   12eca:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
   12ece:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 12fc0 <sched_free_win_offset_calc+0x2a8>
   12ed2:	a731      	add	r7, pc, #196	; (adr r7, 12f98 <sched_free_win_offset_calc+0x280>)
   12ed4:	e9d7 6700 	ldrd	r6, r7, [r7]
   12ed8:	429d      	cmp	r5, r3
   12eda:	bf38      	it	cc
   12edc:	461d      	movcc	r5, r3
   12ede:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
   12ee2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   12ee4:	781b      	ldrb	r3, [r3, #0]
   12ee6:	42a3      	cmp	r3, r4
   12ee8:	d831      	bhi.n	12f4e <sched_free_win_offset_calc+0x236>
		*ticks_to_offset_next = ticks_to_expire_prev;
   12eea:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
   12eee:	9b18      	ldr	r3, [sp, #96]	; 0x60
   12ef0:	701c      	strb	r4, [r3, #0]
}
   12ef2:	b00f      	add	sp, #60	; 0x3c
   12ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
   12ef8:	4293      	cmp	r3, r2
   12efa:	bf38      	it	cc
   12efc:	4613      	movcc	r3, r2
   12efe:	e7b4      	b.n	12e6a <sched_free_win_offset_calc+0x152>
					_win_offset = HAL_TICKER_TICKS_TO_US(
   12f00:	4a2f      	ldr	r2, [pc, #188]	; (12fc0 <sched_free_win_offset_calc+0x2a8>)
   12f02:	eb05 030b 	add.w	r3, r5, fp
   12f06:	fba3 0102 	umull	r0, r1, r3, r2
   12f0a:	2207      	movs	r2, #7
   12f0c:	fb02 1103 	mla	r1, r2, r3, r1
   12f10:	a321      	add	r3, pc, #132	; (adr r3, 12f98 <sched_free_win_offset_calc+0x280>)
   12f12:	e9d3 2300 	ldrd	r2, r3, [r3]
   12f16:	f7ed f9cd 	bl	2b4 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
   12f1a:	f240 43e2 	movw	r3, #1250	; 0x4e2
   12f1e:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
   12f22:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
   12f24:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
   12f26:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
   12f28:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
   12f2c:	d20b      	bcs.n	12f46 <sched_free_win_offset_calc+0x22e>
					memcpy(win_offset +
   12f2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12f30:	2202      	movs	r2, #2
   12f32:	eb03 0044 	add.w	r0, r3, r4, lsl #1
   12f36:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
   12f3a:	3401      	adds	r4, #1
					memcpy(win_offset +
   12f3c:	f7f3 fea4 	bl	6c88 <memcpy>
					offset_index++;
   12f40:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
   12f42:	3528      	adds	r5, #40	; 0x28
   12f44:	e7a0      	b.n	12e88 <sched_free_win_offset_calc+0x170>
						ticks_to_expire_prev = 0;
   12f46:	2500      	movs	r5, #0
   12f48:	e7a8      	b.n	12e9c <sched_free_win_offset_calc+0x184>
			ticker_id_other = ticker_id;
   12f4a:	9206      	str	r2, [sp, #24]
   12f4c:	e7b4      	b.n	12eb8 <sched_free_win_offset_calc+0x1a0>
			_win_offset = HAL_TICKER_TICKS_TO_US(
   12f4e:	eb05 030b 	add.w	r3, r5, fp
   12f52:	fba3 0108 	umull	r0, r1, r3, r8
   12f56:	fb09 1103 	mla	r1, r9, r3, r1
   12f5a:	4632      	mov	r2, r6
   12f5c:	463b      	mov	r3, r7
   12f5e:	f7ed f9a9 	bl	2b4 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
   12f62:	f240 43e2 	movw	r3, #1250	; 0x4e2
   12f66:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
   12f6a:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
   12f6c:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
   12f6e:	4298      	cmp	r0, r3
			_win_offset = HAL_TICKER_TICKS_TO_US(
   12f70:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
   12f74:	d20b      	bcs.n	12f8e <sched_free_win_offset_calc+0x276>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
   12f76:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12f78:	2202      	movs	r2, #2
   12f7a:	eb03 0044 	add.w	r0, r3, r4, lsl #1
   12f7e:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
   12f82:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
   12f84:	f7f3 fe80 	bl	6c88 <memcpy>
			offset_index++;
   12f88:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
   12f8a:	3528      	adds	r5, #40	; 0x28
   12f8c:	e7a9      	b.n	12ee2 <sched_free_win_offset_calc+0x1ca>
				ticks_to_expire_prev = 0;
   12f8e:	2500      	movs	r5, #0
   12f90:	e7ab      	b.n	12eea <sched_free_win_offset_calc+0x1d2>
   12f92:	bf00      	nop
   12f94:	f3af 8000 	nop.w
   12f98:	3b9aca00 	.word	0x3b9aca00
   12f9c:	00000000 	.word	0x00000000
   12fa0:	00012375 	.word	0x00012375
   12fa4:	2000e218 	.word	0x2000e218
   12fa8:	0002ef38 	.word	0x0002ef38
   12fac:	0002ef70 	.word	0x0002ef70
   12fb0:	000336af 	.word	0x000336af
   12fb4:	00032ad1 	.word	0x00032ad1
   12fb8:	0003146d 	.word	0x0003146d
   12fbc:	2000126c 	.word	0x2000126c
   12fc0:	1afd498d 	.word	0x1afd498d

00012fc4 <mayfly_sched_free_win_offset_calc>:
{
   12fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
   12fc6:	2300      	movs	r3, #0
   12fc8:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
   12fca:	2306      	movs	r3, #6
   12fcc:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
   12fd0:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   12fd4:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
   12fd8:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
   12fda:	bfbe      	ittt	lt
   12fdc:	4602      	movlt	r2, r0
   12fde:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
   12fe0:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   12fe4:	9101      	str	r1, [sp, #4]
   12fe6:	f10d 010b 	add.w	r1, sp, #11
   12fea:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
   12fec:	bfa8      	it	ge
   12fee:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   12ff0:	f8b0 30c6 	ldrh.w	r3, [r0, #198]	; 0xc6
   12ff4:	2100      	movs	r1, #0
   12ff6:	f7ff fe8f 	bl	12d18 <sched_free_win_offset_calc>
}
   12ffa:	b005      	add	sp, #20
   12ffc:	f85d fb04 	ldr.w	pc, [sp], #4

00013000 <mayfly_sched_win_offset_select>:
{
   13000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   13004:	f8b0 70d0 	ldrh.w	r7, [r0, #208]	; 0xd0
{
   13008:	b089      	sub	sp, #36	; 0x24
   1300a:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   1300c:	4842      	ldr	r0, [pc, #264]	; (13118 <mayfly_sched_win_offset_select+0x118>)
	u8_t offset_m_max = OFFSET_M_MAX;
   1300e:	2306      	movs	r3, #6
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   13010:	fba7 0100 	umull	r0, r1, r7, r0
	u8_t offset_m_max = OFFSET_M_MAX;
   13014:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   13018:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   1301c:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   1301e:	fb03 1107 	mla	r1, r3, r7, r1
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   13022:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   13024:	a33a      	add	r3, pc, #232	; (adr r3, 13110 <mayfly_sched_win_offset_select+0x110>)
   13026:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   1302a:	9505      	str	r5, [sp, #20]
   1302c:	e9c6 5501 	strd	r5, r5, [r6, #4]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   13030:	f7ed f940 	bl	2b4 <__aeabi_uldivmod>
   13034:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
   13036:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   1303a:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
   1303e:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   13042:	9100      	str	r1, [sp, #0]
   13044:	9601      	str	r6, [sp, #4]
   13046:	2101      	movs	r1, #1
   13048:	4620      	mov	r0, r4
   1304a:	f7ff fe65 	bl	12d18 <sched_free_win_offset_calc>
   1304e:	f104 07d0 	add.w	r7, r4, #208	; 0xd0
	u8_t has_offset_s = 0;
   13052:	46a8      	mov	r8, r5
			if (win_offset_s != 0xffff) {
   13054:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
   13058:	2202      	movs	r2, #2
   1305a:	4639      	mov	r1, r7
   1305c:	f10d 000e 	add.w	r0, sp, #14
   13060:	f7f3 fe12 	bl	6c88 <memcpy>
		while (offset_index_m < offset_m_max) {
   13064:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
   13068:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
   1306c:	2300      	movs	r3, #0
   1306e:	b2d9      	uxtb	r1, r3
   13070:	4288      	cmp	r0, r1
   13072:	d815      	bhi.n	130a0 <mayfly_sched_win_offset_select+0xa0>
   13074:	3501      	adds	r5, #1
	while (offset_index_s < OFFSET_S_MAX) {
   13076:	2d06      	cmp	r5, #6
   13078:	f107 0702 	add.w	r7, r7, #2
   1307c:	d1ec      	bne.n	13058 <mayfly_sched_win_offset_select+0x58>
   1307e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	} else if (!has_offset_s) {
   13082:	f1b8 0f00 	cmp.w	r8, #0
   13086:	d115      	bne.n	130b4 <mayfly_sched_win_offset_select+0xb4>
			win_offset_m[0] * 1250;
   13088:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1308c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   13090:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
   13092:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   13096:	2202      	movs	r2, #2
   13098:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   1309a:	f7f3 fdf5 	bl	6c88 <memcpy>
   1309e:	e026      	b.n	130ee <mayfly_sched_win_offset_select+0xee>
			if (win_offset_s != 0xffff) {
   130a0:	454a      	cmp	r2, r9
   130a2:	d005      	beq.n	130b0 <mayfly_sched_win_offset_select+0xb0>
				if (win_offset_s ==
   130a4:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
   130a8:	4291      	cmp	r1, r2
   130aa:	d023      	beq.n	130f4 <mayfly_sched_win_offset_select+0xf4>
				has_offset_s = 1;
   130ac:	f04f 0801 	mov.w	r8, #1
   130b0:	3301      	adds	r3, #1
   130b2:	e7dc      	b.n	1306e <mayfly_sched_win_offset_select+0x6e>
		conn->llcp_ack = conn->llcp_req;
   130b4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   130b8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   130bc:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   130c0:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   130c4:	4b15      	ldr	r3, [pc, #84]	; (1311c <mayfly_sched_win_offset_select+0x11c>)
   130c6:	2200      	movs	r2, #0
   130c8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   130cc:	f810 3c05 	ldrb.w	r3, [r0, #-5]
   130d0:	f043 0303 	orr.w	r3, r3, #3
   130d4:	f800 3c05 	strb.w	r3, [r0, #-5]
		pdu_ctrl_tx->len =
   130d8:	2303      	movs	r3, #3
   130da:	f800 3c04 	strb.w	r3, [r0, #-4]
		pdu_ctrl_tx->llctrl.opcode =
   130de:	2311      	movs	r3, #17
   130e0:	f800 3c02 	strb.w	r3, [r0, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
   130e4:	230f      	movs	r3, #15
   130e6:	f800 3c01 	strb.w	r3, [r0, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
   130ea:	2320      	movs	r3, #32
   130ec:	7003      	strb	r3, [r0, #0]
}
   130ee:	b009      	add	sp, #36	; 0x24
   130f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
   130f4:	f240 43e2 	movw	r3, #1250	; 0x4e2
   130f8:	4353      	muls	r3, r2
   130fa:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
		conn->llcp.conn_upd.win_offset_us =
   130fe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   13102:	2202      	movs	r2, #2
   13104:	f10d 010e 	add.w	r1, sp, #14
   13108:	e7c7      	b.n	1309a <mayfly_sched_win_offset_select+0x9a>
   1310a:	bf00      	nop
   1310c:	f3af 8000 	nop.w
   13110:	1afd498d 	.word	0x1afd498d
   13114:	00000007 	.word	0x00000007
   13118:	09ce5400 	.word	0x09ce5400
   1311c:	2000126c 	.word	0x2000126c

00013120 <sched_after_mstr_free_slot_get>:
{
   13120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13124:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   13126:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
   13128:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
   1312a:	f8df 9150 	ldr.w	r9, [pc, #336]	; 1327c <sched_after_mstr_free_slot_get+0x15c>
	ticker_id = ticker_id_prev = 0xff;
   1312e:	f88d 501f 	strb.w	r5, [sp, #31]
{
   13132:	4680      	mov	r8, r0
   13134:	4693      	mov	fp, r2
   13136:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
   13138:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   1313c:	601c      	str	r4, [r3, #0]
   1313e:	9408      	str	r4, [sp, #32]
   13140:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   13142:	2302      	movs	r3, #2
   13144:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   13146:	ab09      	add	r3, sp, #36	; 0x24
   13148:	9302      	str	r3, [sp, #8]
   1314a:	4b45      	ldr	r3, [pc, #276]	; (13260 <sched_after_mstr_free_slot_get+0x140>)
   1314c:	9301      	str	r3, [sp, #4]
   1314e:	ab08      	add	r3, sp, #32
   13150:	9300      	str	r3, [sp, #0]
   13152:	f10d 021f 	add.w	r2, sp, #31
   13156:	465b      	mov	r3, fp
   13158:	4641      	mov	r1, r8
   1315a:	2000      	movs	r0, #0
   1315c:	f7ff f81a 	bl	12194 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   13160:	2802      	cmp	r0, #2
   13162:	d020      	beq.n	131a6 <sched_after_mstr_free_slot_get+0x86>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   13164:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13166:	b313      	cbz	r3, 131ae <sched_after_mstr_free_slot_get+0x8e>
   13168:	4b3e      	ldr	r3, [pc, #248]	; (13264 <sched_after_mstr_free_slot_get+0x144>)
   1316a:	681b      	ldr	r3, [r3, #0]
   1316c:	075b      	lsls	r3, r3, #29
   1316e:	d010      	beq.n	13192 <sched_after_mstr_free_slot_get+0x72>
   13170:	2301      	movs	r3, #1
   13172:	f04f 0200 	mov.w	r2, #0
   13176:	f363 0202 	bfi	r2, r3, #0, #3
   1317a:	493b      	ldr	r1, [pc, #236]	; (13268 <sched_after_mstr_free_slot_get+0x148>)
   1317c:	4b3b      	ldr	r3, [pc, #236]	; (1326c <sched_after_mstr_free_slot_get+0x14c>)
   1317e:	483c      	ldr	r0, [pc, #240]	; (13270 <sched_after_mstr_free_slot_get+0x150>)
   13180:	1a5b      	subs	r3, r3, r1
   13182:	f36f 02c5 	bfc	r2, #3, #3
   13186:	08db      	lsrs	r3, r3, #3
   13188:	f363 128f 	bfi	r2, r3, #6, #10
   1318c:	4939      	ldr	r1, [pc, #228]	; (13274 <sched_after_mstr_free_slot_get+0x154>)
   1318e:	f7ee ffad 	bl	20ec <log_1>
   13192:	4040      	eors	r0, r0
   13194:	f380 8811 	msr	BASEPRI, r0
   13198:	f04f 0004 	mov.w	r0, #4
   1319c:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   1319e:	4641      	mov	r1, r8
   131a0:	2000      	movs	r0, #0
   131a2:	f7ff f86f 	bl	12284 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   131a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   131a8:	2b02      	cmp	r3, #2
   131aa:	d0f8      	beq.n	1319e <sched_after_mstr_free_slot_get+0x7e>
   131ac:	e7da      	b.n	13164 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
   131ae:	f89d 201f 	ldrb.w	r2, [sp, #31]
   131b2:	2aff      	cmp	r2, #255	; 0xff
   131b4:	d04d      	beq.n	13252 <sched_after_mstr_free_slot_get+0x132>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   131b6:	2a06      	cmp	r2, #6
   131b8:	d9c3      	bls.n	13142 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
   131ba:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   131be:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   131c0:	429a      	cmp	r2, r3
   131c2:	dabe      	bge.n	13142 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   131c4:	3a07      	subs	r2, #7
   131c6:	b292      	uxth	r2, r2
   131c8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   131cc:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
   131d0:	f7fe f8c0 	bl	11354 <mem_get>
		if (conn && !conn->role) {
   131d4:	2800      	cmp	r0, #0
   131d6:	d0b4      	beq.n	13142 <sched_after_mstr_free_slot_get+0x22>
   131d8:	f990 301d 	ldrsb.w	r3, [r0, #29]
   131dc:	2b00      	cmp	r3, #0
   131de:	dbb0      	blt.n	13142 <sched_after_mstr_free_slot_get+0x22>
   131e0:	e9d0 3c00 	ldrd	r3, ip, [r0]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   131e4:	2b00      	cmp	r3, #0
			u32_t ticks_to_expire_normal = ticks_to_expire;
   131e6:	9a08      	ldr	r2, [sp, #32]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   131e8:	da12      	bge.n	13210 <sched_after_mstr_free_slot_get+0xf0>
   131ea:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
   131ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   131f0:	458c      	cmp	ip, r1
   131f2:	bf2c      	ite	cs
   131f4:	4462      	addcs	r2, ip
   131f6:	1852      	addcc	r2, r2, r1
				ticks_to_expire_normal -=
   131f8:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
   131fa:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
   131fc:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
   131fe:	f101 0104 	add.w	r1, r1, #4
   13202:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
   13204:	d108      	bne.n	13218 <sched_after_mstr_free_slot_get+0xf8>
			ticker_id_prev = ticker_id;
   13206:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   1320a:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
   1320c:	4616      	mov	r6, r2
   1320e:	e798      	b.n	13142 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
   13210:	4563      	cmp	r3, ip
   13212:	bf38      	it	cc
   13214:	4663      	movcc	r3, ip
   13216:	e7f0      	b.n	131fa <sched_after_mstr_free_slot_get+0xda>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   13218:	4631      	mov	r1, r6
   1321a:	4610      	mov	r0, r2
   1321c:	9305      	str	r3, [sp, #20]
   1321e:	9204      	str	r2, [sp, #16]
   13220:	f7ff f848 	bl	122b4 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
   13224:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
   13228:	4288      	cmp	r0, r1
   1322a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1322e:	d9ea      	bls.n	13206 <sched_after_mstr_free_slot_get+0xe6>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
   13230:	4811      	ldr	r0, [pc, #68]	; (13278 <sched_after_mstr_free_slot_get+0x158>)
   13232:	4434      	add	r4, r6
   13234:	fba4 0100 	umull	r0, r1, r4, r0
   13238:	2307      	movs	r3, #7
   1323a:	fb03 1104 	mla	r1, r3, r4, r1
   1323e:	a306      	add	r3, pc, #24	; (adr r3, 13258 <sched_after_mstr_free_slot_get+0x138>)
   13240:	e9d3 2300 	ldrd	r2, r3, [r3]
   13244:	f7ed f836 	bl	2b4 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
   13248:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
   1324a:	6038      	str	r0, [r7, #0]
}
   1324c:	b00b      	add	sp, #44	; 0x2c
   1324e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
   13252:	2dff      	cmp	r5, #255	; 0xff
   13254:	d1ec      	bne.n	13230 <sched_after_mstr_free_slot_get+0x110>
   13256:	e7f9      	b.n	1324c <sched_after_mstr_free_slot_get+0x12c>
   13258:	3b9aca00 	.word	0x3b9aca00
   1325c:	00000000 	.word	0x00000000
   13260:	00012375 	.word	0x00012375
   13264:	2000e218 	.word	0x2000e218
   13268:	0002ef38 	.word	0x0002ef38
   1326c:	0002ef70 	.word	0x0002ef70
   13270:	000336af 	.word	0x000336af
   13274:	00032a91 	.word	0x00032a91
   13278:	1afd498d 	.word	0x1afd498d
   1327c:	2000126c 	.word	0x2000126c

00013280 <isr_adv_ci_adva_check>:
{
   13280:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
   13282:	7804      	ldrb	r4, [r0, #0]
   13284:	780a      	ldrb	r2, [r1, #0]
   13286:	f3c4 1380 	ubfx	r3, r4, #6, #1
   1328a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1328e:	d119      	bne.n	132c4 <isr_adv_ci_adva_check+0x44>
   13290:	f004 040f 	and.w	r4, r4, #15
   13294:	2c01      	cmp	r4, #1
   13296:	f100 0502 	add.w	r5, r0, #2
   1329a:	f101 0608 	add.w	r6, r1, #8
   1329e:	d008      	beq.n	132b2 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   132a0:	2206      	movs	r2, #6
   132a2:	4631      	mov	r1, r6
   132a4:	4628      	mov	r0, r5
   132a6:	f7f3 fcc8 	bl	6c3a <memcmp>
			 BDADDR_SIZE)) ||
   132aa:	fab0 f080 	clz	r0, r0
   132ae:	0940      	lsrs	r0, r0, #5
}
   132b0:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   132b2:	2206      	movs	r2, #6
   132b4:	4631      	mov	r1, r6
   132b6:	4628      	mov	r0, r5
   132b8:	f7f3 fcbf 	bl	6c3a <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   132bc:	2800      	cmp	r0, #0
   132be:	d1ef      	bne.n	132a0 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
   132c0:	4620      	mov	r0, r4
   132c2:	e7f5      	b.n	132b0 <isr_adv_ci_adva_check+0x30>
   132c4:	2000      	movs	r0, #0
   132c6:	e7f3      	b.n	132b0 <isr_adv_ci_adva_check+0x30>

000132c8 <packet_rx_enqueue>:
{
   132c8:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   132ca:	4a2a      	ldr	r2, [pc, #168]	; (13374 <packet_rx_enqueue+0xac>)
   132cc:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
   132d0:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
   132d4:	4299      	cmp	r1, r3
   132d6:	d11a      	bne.n	1330e <packet_rx_enqueue+0x46>
   132d8:	4b27      	ldr	r3, [pc, #156]	; (13378 <packet_rx_enqueue+0xb0>)
   132da:	681b      	ldr	r3, [r3, #0]
   132dc:	075a      	lsls	r2, r3, #29
   132de:	d010      	beq.n	13302 <packet_rx_enqueue+0x3a>
   132e0:	2301      	movs	r3, #1
   132e2:	f04f 0200 	mov.w	r2, #0
   132e6:	f363 0202 	bfi	r2, r3, #0, #3
   132ea:	4924      	ldr	r1, [pc, #144]	; (1337c <packet_rx_enqueue+0xb4>)
   132ec:	4b24      	ldr	r3, [pc, #144]	; (13380 <packet_rx_enqueue+0xb8>)
   132ee:	4825      	ldr	r0, [pc, #148]	; (13384 <packet_rx_enqueue+0xbc>)
   132f0:	1a5b      	subs	r3, r3, r1
   132f2:	f36f 02c5 	bfc	r2, #3, #3
   132f6:	08db      	lsrs	r3, r3, #3
   132f8:	4923      	ldr	r1, [pc, #140]	; (13388 <packet_rx_enqueue+0xc0>)
   132fa:	f363 128f 	bfi	r2, r3, #6, #10
	LL_ASSERT(link);
   132fe:	f7ee fef5 	bl	20ec <log_1>
   13302:	4040      	eors	r0, r0
   13304:	f380 8811 	msr	BASEPRI, r0
   13308:	f04f 0004 	mov.w	r0, #4
   1330c:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   1330e:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
   13312:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
   13316:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
   1331a:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
   1331e:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
   13320:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
   13322:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
   13326:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
   1332a:	3301      	adds	r3, #1
   1332c:	b2db      	uxtb	r3, r3
		last = 0;
   1332e:	429c      	cmp	r4, r3
   13330:	bf08      	it	eq
   13332:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
   13334:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
   13338:	f502 72a8 	add.w	r2, r2, #336	; 0x150
   1333c:	f7fe f82f 	bl	1139e <memq_enqueue>
	LL_ASSERT(link);
   13340:	b998      	cbnz	r0, 1336a <packet_rx_enqueue+0xa2>
   13342:	4b0d      	ldr	r3, [pc, #52]	; (13378 <packet_rx_enqueue+0xb0>)
   13344:	681b      	ldr	r3, [r3, #0]
   13346:	075b      	lsls	r3, r3, #29
   13348:	d0db      	beq.n	13302 <packet_rx_enqueue+0x3a>
   1334a:	2301      	movs	r3, #1
   1334c:	f04f 0200 	mov.w	r2, #0
   13350:	f363 0202 	bfi	r2, r3, #0, #3
   13354:	4909      	ldr	r1, [pc, #36]	; (1337c <packet_rx_enqueue+0xb4>)
   13356:	4b0a      	ldr	r3, [pc, #40]	; (13380 <packet_rx_enqueue+0xb8>)
   13358:	1a5b      	subs	r3, r3, r1
   1335a:	f360 02c5 	bfi	r2, r0, #3, #3
   1335e:	08db      	lsrs	r3, r3, #3
   13360:	f363 128f 	bfi	r2, r3, #6, #10
   13364:	4908      	ldr	r1, [pc, #32]	; (13388 <packet_rx_enqueue+0xc0>)
   13366:	4809      	ldr	r0, [pc, #36]	; (1338c <packet_rx_enqueue+0xc4>)
   13368:	e7c9      	b.n	132fe <packet_rx_enqueue+0x36>
}
   1336a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
   1336e:	f007 bda3 	b.w	1aeb8 <radio_event_callback>
   13372:	bf00      	nop
   13374:	2000126c 	.word	0x2000126c
   13378:	2000e218 	.word	0x2000e218
   1337c:	0002ef38 	.word	0x0002ef38
   13380:	0002ef70 	.word	0x0002ef70
   13384:	00033443 	.word	0x00033443
   13388:	00032c94 	.word	0x00032c94
   1338c:	00032d65 	.word	0x00032d65

00013390 <isr_scan_tgta_check>:
{
   13390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13394:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   13396:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
   13398:	f101 0808 	add.w	r8, r1, #8
{
   1339c:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   1339e:	09c0      	lsrs	r0, r0, #7
   133a0:	4641      	mov	r1, r8
{
   133a2:	4691      	mov	r9, r2
   133a4:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   133a6:	f00a fc09 	bl	1dbbc <ctrl_rl_addr_resolve>
   133aa:	4604      	mov	r4, r0
   133ac:	b9d8      	cbnz	r0, 133e6 <isr_scan_tgta_check+0x56>
   133ae:	4f1c      	ldr	r7, [pc, #112]	; (13420 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   133b0:	f1ba 0f00 	cmp.w	sl, #0
   133b4:	d10e      	bne.n	133d4 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   133b6:	782b      	ldrb	r3, [r5, #0]
   133b8:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
   133bc:	09db      	lsrs	r3, r3, #7
   133be:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   133c2:	d113      	bne.n	133ec <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
   133c4:	2206      	movs	r2, #6
   133c6:	4641      	mov	r1, r8
   133c8:	4816      	ldr	r0, [pc, #88]	; (13424 <isr_scan_tgta_check+0x94>)
   133ca:	f7f3 fc36 	bl	6c3a <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   133ce:	b968      	cbnz	r0, 133ec <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
   133d0:	2001      	movs	r0, #1
   133d2:	e012      	b.n	133fa <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   133d4:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
   133d8:	07db      	lsls	r3, r3, #31
   133da:	d5ec      	bpl.n	133b6 <isr_scan_tgta_check+0x26>
   133dc:	4648      	mov	r0, r9
   133de:	f00a f88b 	bl	1d4f8 <ctrl_lrpa_get>
   133e2:	2800      	cmp	r0, #0
   133e4:	d0e7      	beq.n	133b6 <isr_scan_tgta_check+0x26>
}
   133e6:	4620      	mov	r0, r4
   133e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   133ec:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
   133f0:	f3c0 1001 	ubfx	r0, r0, #4, #2
   133f4:	f010 0002 	ands.w	r0, r0, #2
   133f8:	d101      	bne.n	133fe <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
   133fa:	4604      	mov	r4, r0
   133fc:	e7f3      	b.n	133e6 <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   133fe:	f995 3000 	ldrsb.w	r3, [r5]
   13402:	2b00      	cmp	r3, #0
   13404:	da09      	bge.n	1341a <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
   13406:	7b6b      	ldrb	r3, [r5, #13]
   13408:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1340c:	2b40      	cmp	r3, #64	; 0x40
   1340e:	d104      	bne.n	1341a <isr_scan_tgta_check+0x8a>
		if (dir_report) {
   13410:	2e00      	cmp	r6, #0
   13412:	d0dd      	beq.n	133d0 <isr_scan_tgta_check+0x40>
			*dir_report = true;
   13414:	2001      	movs	r0, #1
   13416:	7030      	strb	r0, [r6, #0]
   13418:	e7ef      	b.n	133fa <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
   1341a:	2000      	movs	r0, #0
   1341c:	e7ed      	b.n	133fa <isr_scan_tgta_check+0x6a>
   1341e:	bf00      	nop
   13420:	2000126c 	.word	0x2000126c
   13424:	20001350 	.word	0x20001350

00013428 <isr_rx_scan_report>:
{
   13428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1342c:	4680      	mov	r8, r0
	node_rx = packet_rx_reserve_get(3);
   1342e:	2003      	movs	r0, #3
{
   13430:	460f      	mov	r7, r1
   13432:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
   13434:	f7fe ffe6 	bl	12404 <packet_rx_reserve_get>
	if (node_rx == 0) {
   13438:	4604      	mov	r4, r0
   1343a:	2800      	cmp	r0, #0
   1343c:	d046      	beq.n	134cc <isr_rx_scan_report+0xa4>
	node_rx->hdr.handle = 0xffff;
   1343e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13442:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
   13444:	4b22      	ldr	r3, [pc, #136]	; (134d0 <isr_rx_scan_report+0xa8>)
   13446:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
   1344a:	075a      	lsls	r2, r3, #29
   1344c:	d03a      	beq.n	134c4 <isr_rx_scan_report+0x9c>
		switch (_radio.scanner.phy) {
   1344e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13452:	b2da      	uxtb	r2, r3
   13454:	2a01      	cmp	r2, #1
   13456:	d01c      	beq.n	13492 <isr_rx_scan_report+0x6a>
   13458:	2a04      	cmp	r2, #4
   1345a:	d01b      	beq.n	13494 <isr_rx_scan_report+0x6c>
			LL_ASSERT(0);
   1345c:	4b1d      	ldr	r3, [pc, #116]	; (134d4 <isr_rx_scan_report+0xac>)
   1345e:	681b      	ldr	r3, [r3, #0]
   13460:	075b      	lsls	r3, r3, #29
   13462:	d010      	beq.n	13486 <isr_rx_scan_report+0x5e>
   13464:	2301      	movs	r3, #1
   13466:	f04f 0200 	mov.w	r2, #0
   1346a:	f363 0202 	bfi	r2, r3, #0, #3
   1346e:	491a      	ldr	r1, [pc, #104]	; (134d8 <isr_rx_scan_report+0xb0>)
   13470:	4b1a      	ldr	r3, [pc, #104]	; (134dc <isr_rx_scan_report+0xb4>)
   13472:	481b      	ldr	r0, [pc, #108]	; (134e0 <isr_rx_scan_report+0xb8>)
   13474:	1a5b      	subs	r3, r3, r1
   13476:	f36f 02c5 	bfc	r2, #3, #3
   1347a:	08db      	lsrs	r3, r3, #3
   1347c:	f363 128f 	bfi	r2, r3, #6, #10
   13480:	4918      	ldr	r1, [pc, #96]	; (134e4 <isr_rx_scan_report+0xbc>)
   13482:	f7ee fe33 	bl	20ec <log_1>
   13486:	4040      	eors	r0, r0
   13488:	f380 8811 	msr	BASEPRI, r0
   1348c:	f04f 0004 	mov.w	r0, #4
   13490:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
   13492:	2303      	movs	r3, #3
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   13494:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
   13496:	f104 0508 	add.w	r5, r4, #8
			     pdu_adv_rx->len] =
   1349a:	f1b8 0f00 	cmp.w	r8, #0
   1349e:	d013      	beq.n	134c8 <isr_rx_scan_report+0xa0>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   134a0:	f00b fa7a 	bl	1e998 <radio_rssi_get>
			     pdu_adv_rx->len] =
   134a4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   134a8:	7a63      	ldrb	r3, [r4, #9]
   134aa:	442b      	add	r3, r5
   134ac:	7098      	strb	r0, [r3, #2]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   134ae:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
   134b0:	442b      	add	r3, r5
   134b2:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   134b4:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   134b6:	441d      	add	r5, r3
   134b8:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
   134ba:	f7ff ff05 	bl	132c8 <packet_rx_enqueue>
	return 0;
   134be:	2000      	movs	r0, #0
}
   134c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   134c4:	2302      	movs	r3, #2
   134c6:	e7e5      	b.n	13494 <isr_rx_scan_report+0x6c>
			     pdu_adv_rx->len] =
   134c8:	207f      	movs	r0, #127	; 0x7f
   134ca:	e7ed      	b.n	134a8 <isr_rx_scan_report+0x80>
		return 1;
   134cc:	2001      	movs	r0, #1
   134ce:	e7f7      	b.n	134c0 <isr_rx_scan_report+0x98>
   134d0:	2000126c 	.word	0x2000126c
   134d4:	2000e218 	.word	0x2000e218
   134d8:	0002ef38 	.word	0x0002ef38
   134dc:	0002ef70 	.word	0x0002ef70
   134e0:	0003146d 	.word	0x0003146d
   134e4:	000328ac 	.word	0x000328ac

000134e8 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   134e8:	4a0b      	ldr	r2, [pc, #44]	; (13518 <rx_fc_lock+0x30>)
   134ea:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
   134ee:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
   134f2:	4299      	cmp	r1, r3
   134f4:	d10e      	bne.n	13514 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   134f6:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
   134fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   134fe:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
   13502:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
   13506:	3301      	adds	r3, #1
   13508:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
   1350a:	2b03      	cmp	r3, #3
   1350c:	bf08      	it	eq
   1350e:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
   13510:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
	}
}
   13514:	4770      	bx	lr
   13516:	bf00      	nop
   13518:	2000126c 	.word	0x2000126c

0001351c <ticker_success_assert>:
{
   1351c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1351e:	b1d0      	cbz	r0, 13556 <ticker_success_assert+0x3a>
   13520:	4b0d      	ldr	r3, [pc, #52]	; (13558 <ticker_success_assert+0x3c>)
   13522:	681b      	ldr	r3, [r3, #0]
   13524:	075b      	lsls	r3, r3, #29
   13526:	d010      	beq.n	1354a <ticker_success_assert+0x2e>
   13528:	2301      	movs	r3, #1
   1352a:	f04f 0200 	mov.w	r2, #0
   1352e:	f363 0202 	bfi	r2, r3, #0, #3
   13532:	490a      	ldr	r1, [pc, #40]	; (1355c <ticker_success_assert+0x40>)
   13534:	4b0a      	ldr	r3, [pc, #40]	; (13560 <ticker_success_assert+0x44>)
   13536:	480b      	ldr	r0, [pc, #44]	; (13564 <ticker_success_assert+0x48>)
   13538:	1a5b      	subs	r3, r3, r1
   1353a:	f36f 02c5 	bfc	r2, #3, #3
   1353e:	08db      	lsrs	r3, r3, #3
   13540:	f363 128f 	bfi	r2, r3, #6, #10
   13544:	4908      	ldr	r1, [pc, #32]	; (13568 <ticker_success_assert+0x4c>)
   13546:	f7ee fdd1 	bl	20ec <log_1>
   1354a:	4040      	eors	r0, r0
   1354c:	f380 8811 	msr	BASEPRI, r0
   13550:	f04f 0004 	mov.w	r0, #4
   13554:	df02      	svc	2
}
   13556:	bd08      	pop	{r3, pc}
   13558:	2000e218 	.word	0x2000e218
   1355c:	0002ef38 	.word	0x0002ef38
   13560:	0002ef70 	.word	0x0002ef70
   13564:	000337cd 	.word	0x000337cd
   13568:	00032995 	.word	0x00032995

0001356c <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   1356c:	2801      	cmp	r0, #1
{
   1356e:	b508      	push	{r3, lr}
   13570:	4b1c      	ldr	r3, [pc, #112]	; (135e4 <ticker_stop_adv_assert+0x78>)
	if (status == TICKER_STATUS_FAILURE) {
   13572:	d11f      	bne.n	135b4 <ticker_stop_adv_assert+0x48>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   13574:	7cda      	ldrb	r2, [r3, #19]
   13576:	2a05      	cmp	r2, #5
   13578:	d102      	bne.n	13580 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
   1357a:	2200      	movs	r2, #0
   1357c:	74da      	strb	r2, [r3, #19]
}
   1357e:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   13580:	4b19      	ldr	r3, [pc, #100]	; (135e8 <ticker_stop_adv_assert+0x7c>)
   13582:	681b      	ldr	r3, [r3, #0]
   13584:	075a      	lsls	r2, r3, #29
   13586:	d00f      	beq.n	135a8 <ticker_stop_adv_assert+0x3c>
   13588:	4918      	ldr	r1, [pc, #96]	; (135ec <ticker_stop_adv_assert+0x80>)
   1358a:	4b19      	ldr	r3, [pc, #100]	; (135f0 <ticker_stop_adv_assert+0x84>)
   1358c:	f04f 0200 	mov.w	r2, #0
   13590:	f360 0202 	bfi	r2, r0, #0, #3
   13594:	1a5b      	subs	r3, r3, r1
   13596:	f36f 02c5 	bfc	r2, #3, #3
   1359a:	08db      	lsrs	r3, r3, #3
   1359c:	4915      	ldr	r1, [pc, #84]	; (135f4 <ticker_stop_adv_assert+0x88>)
   1359e:	4816      	ldr	r0, [pc, #88]	; (135f8 <ticker_stop_adv_assert+0x8c>)
   135a0:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   135a4:	f7ee fda2 	bl	20ec <log_1>
   135a8:	4040      	eors	r0, r0
   135aa:	f380 8811 	msr	BASEPRI, r0
   135ae:	f04f 0004 	mov.w	r0, #4
   135b2:	df02      	svc	2
   135b4:	7c5b      	ldrb	r3, [r3, #17]
   135b6:	2b05      	cmp	r3, #5
   135b8:	d1e1      	bne.n	1357e <ticker_stop_adv_assert+0x12>
   135ba:	4b0b      	ldr	r3, [pc, #44]	; (135e8 <ticker_stop_adv_assert+0x7c>)
   135bc:	681b      	ldr	r3, [r3, #0]
   135be:	075b      	lsls	r3, r3, #29
   135c0:	d0f2      	beq.n	135a8 <ticker_stop_adv_assert+0x3c>
   135c2:	2301      	movs	r3, #1
   135c4:	f04f 0200 	mov.w	r2, #0
   135c8:	f363 0202 	bfi	r2, r3, #0, #3
   135cc:	4907      	ldr	r1, [pc, #28]	; (135ec <ticker_stop_adv_assert+0x80>)
   135ce:	4b08      	ldr	r3, [pc, #32]	; (135f0 <ticker_stop_adv_assert+0x84>)
   135d0:	480a      	ldr	r0, [pc, #40]	; (135fc <ticker_stop_adv_assert+0x90>)
   135d2:	1a5b      	subs	r3, r3, r1
   135d4:	f36f 02c5 	bfc	r2, #3, #3
   135d8:	08db      	lsrs	r3, r3, #3
   135da:	f363 128f 	bfi	r2, r3, #6, #10
   135de:	4905      	ldr	r1, [pc, #20]	; (135f4 <ticker_stop_adv_assert+0x88>)
   135e0:	e7e0      	b.n	135a4 <ticker_stop_adv_assert+0x38>
   135e2:	bf00      	nop
   135e4:	2000126c 	.word	0x2000126c
   135e8:	2000e218 	.word	0x2000e218
   135ec:	0002ef38 	.word	0x0002ef38
   135f0:	0002ef70 	.word	0x0002ef70
   135f4:	000329ab 	.word	0x000329ab
   135f8:	0003146d 	.word	0x0003146d
   135fc:	00033737 	.word	0x00033737

00013600 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   13600:	2801      	cmp	r0, #1
{
   13602:	b508      	push	{r3, lr}
   13604:	4b1c      	ldr	r3, [pc, #112]	; (13678 <ticker_stop_scan_assert+0x78>)
	if (status == TICKER_STATUS_FAILURE) {
   13606:	d11f      	bne.n	13648 <ticker_stop_scan_assert+0x48>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
   13608:	7cda      	ldrb	r2, [r3, #19]
   1360a:	2a06      	cmp	r2, #6
   1360c:	d102      	bne.n	13614 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
   1360e:	2200      	movs	r2, #0
   13610:	74da      	strb	r2, [r3, #19]
}
   13612:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   13614:	4b19      	ldr	r3, [pc, #100]	; (1367c <ticker_stop_scan_assert+0x7c>)
   13616:	681b      	ldr	r3, [r3, #0]
   13618:	075a      	lsls	r2, r3, #29
   1361a:	d00f      	beq.n	1363c <ticker_stop_scan_assert+0x3c>
   1361c:	4918      	ldr	r1, [pc, #96]	; (13680 <ticker_stop_scan_assert+0x80>)
   1361e:	4b19      	ldr	r3, [pc, #100]	; (13684 <ticker_stop_scan_assert+0x84>)
   13620:	f04f 0200 	mov.w	r2, #0
   13624:	f360 0202 	bfi	r2, r0, #0, #3
   13628:	1a5b      	subs	r3, r3, r1
   1362a:	f36f 02c5 	bfc	r2, #3, #3
   1362e:	08db      	lsrs	r3, r3, #3
   13630:	4915      	ldr	r1, [pc, #84]	; (13688 <ticker_stop_scan_assert+0x88>)
   13632:	4816      	ldr	r0, [pc, #88]	; (1368c <ticker_stop_scan_assert+0x8c>)
   13634:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   13638:	f7ee fd58 	bl	20ec <log_1>
   1363c:	4040      	eors	r0, r0
   1363e:	f380 8811 	msr	BASEPRI, r0
   13642:	f04f 0004 	mov.w	r0, #4
   13646:	df02      	svc	2
   13648:	7c5b      	ldrb	r3, [r3, #17]
   1364a:	2b06      	cmp	r3, #6
   1364c:	d1e1      	bne.n	13612 <ticker_stop_scan_assert+0x12>
   1364e:	4b0b      	ldr	r3, [pc, #44]	; (1367c <ticker_stop_scan_assert+0x7c>)
   13650:	681b      	ldr	r3, [r3, #0]
   13652:	075b      	lsls	r3, r3, #29
   13654:	d0f2      	beq.n	1363c <ticker_stop_scan_assert+0x3c>
   13656:	2301      	movs	r3, #1
   13658:	f04f 0200 	mov.w	r2, #0
   1365c:	f363 0202 	bfi	r2, r3, #0, #3
   13660:	4907      	ldr	r1, [pc, #28]	; (13680 <ticker_stop_scan_assert+0x80>)
   13662:	4b08      	ldr	r3, [pc, #32]	; (13684 <ticker_stop_scan_assert+0x84>)
   13664:	480a      	ldr	r0, [pc, #40]	; (13690 <ticker_stop_scan_assert+0x90>)
   13666:	1a5b      	subs	r3, r3, r1
   13668:	f36f 02c5 	bfc	r2, #3, #3
   1366c:	08db      	lsrs	r3, r3, #3
   1366e:	f363 128f 	bfi	r2, r3, #6, #10
   13672:	4905      	ldr	r1, [pc, #20]	; (13688 <ticker_stop_scan_assert+0x88>)
   13674:	e7e0      	b.n	13638 <ticker_stop_scan_assert+0x38>
   13676:	bf00      	nop
   13678:	2000126c 	.word	0x2000126c
   1367c:	2000e218 	.word	0x2000e218
   13680:	0002ef38 	.word	0x0002ef38
   13684:	0002ef70 	.word	0x0002ef70
   13688:	000329c2 	.word	0x000329c2
   1368c:	0003146d 	.word	0x0003146d
   13690:	0003379a 	.word	0x0003379a

00013694 <ticker_update_adv_assert>:
{
   13694:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   13696:	b1f0      	cbz	r0, 136d6 <ticker_update_adv_assert+0x42>
   13698:	4b0f      	ldr	r3, [pc, #60]	; (136d8 <ticker_update_adv_assert+0x44>)
   1369a:	7cdb      	ldrb	r3, [r3, #19]
   1369c:	2b05      	cmp	r3, #5
   1369e:	d01a      	beq.n	136d6 <ticker_update_adv_assert+0x42>
   136a0:	4b0e      	ldr	r3, [pc, #56]	; (136dc <ticker_update_adv_assert+0x48>)
   136a2:	681b      	ldr	r3, [r3, #0]
   136a4:	075b      	lsls	r3, r3, #29
   136a6:	d010      	beq.n	136ca <ticker_update_adv_assert+0x36>
   136a8:	2301      	movs	r3, #1
   136aa:	f04f 0200 	mov.w	r2, #0
   136ae:	f363 0202 	bfi	r2, r3, #0, #3
   136b2:	490b      	ldr	r1, [pc, #44]	; (136e0 <ticker_update_adv_assert+0x4c>)
   136b4:	4b0b      	ldr	r3, [pc, #44]	; (136e4 <ticker_update_adv_assert+0x50>)
   136b6:	480c      	ldr	r0, [pc, #48]	; (136e8 <ticker_update_adv_assert+0x54>)
   136b8:	1a5b      	subs	r3, r3, r1
   136ba:	f36f 02c5 	bfc	r2, #3, #3
   136be:	08db      	lsrs	r3, r3, #3
   136c0:	f363 128f 	bfi	r2, r3, #6, #10
   136c4:	4909      	ldr	r1, [pc, #36]	; (136ec <ticker_update_adv_assert+0x58>)
   136c6:	f7ee fd11 	bl	20ec <log_1>
   136ca:	4040      	eors	r0, r0
   136cc:	f380 8811 	msr	BASEPRI, r0
   136d0:	f04f 0004 	mov.w	r0, #4
   136d4:	df02      	svc	2
}
   136d6:	bd08      	pop	{r3, pc}
   136d8:	2000126c 	.word	0x2000126c
   136dc:	2000e218 	.word	0x2000e218
   136e0:	0002ef38 	.word	0x0002ef38
   136e4:	0002ef70 	.word	0x0002ef70
   136e8:	000337ee 	.word	0x000337ee
   136ec:	000329da 	.word	0x000329da

000136f0 <ticker_update_slave_assert>:
{
   136f0:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   136f2:	b1f8      	cbz	r0, 13734 <ticker_update_slave_assert+0x44>
   136f4:	4b10      	ldr	r3, [pc, #64]	; (13738 <ticker_update_slave_assert+0x48>)
   136f6:	7cdb      	ldrb	r3, [r3, #19]
   136f8:	b2c9      	uxtb	r1, r1
   136fa:	4299      	cmp	r1, r3
   136fc:	d01a      	beq.n	13734 <ticker_update_slave_assert+0x44>
   136fe:	4b0f      	ldr	r3, [pc, #60]	; (1373c <ticker_update_slave_assert+0x4c>)
   13700:	681b      	ldr	r3, [r3, #0]
   13702:	075b      	lsls	r3, r3, #29
   13704:	d010      	beq.n	13728 <ticker_update_slave_assert+0x38>
   13706:	2301      	movs	r3, #1
   13708:	f04f 0200 	mov.w	r2, #0
   1370c:	f363 0202 	bfi	r2, r3, #0, #3
   13710:	490b      	ldr	r1, [pc, #44]	; (13740 <ticker_update_slave_assert+0x50>)
   13712:	4b0c      	ldr	r3, [pc, #48]	; (13744 <ticker_update_slave_assert+0x54>)
   13714:	480c      	ldr	r0, [pc, #48]	; (13748 <ticker_update_slave_assert+0x58>)
   13716:	1a5b      	subs	r3, r3, r1
   13718:	f36f 02c5 	bfc	r2, #3, #3
   1371c:	08db      	lsrs	r3, r3, #3
   1371e:	f363 128f 	bfi	r2, r3, #6, #10
   13722:	490a      	ldr	r1, [pc, #40]	; (1374c <ticker_update_slave_assert+0x5c>)
   13724:	f7ee fce2 	bl	20ec <log_1>
   13728:	4040      	eors	r0, r0
   1372a:	f380 8811 	msr	BASEPRI, r0
   1372e:	f04f 0004 	mov.w	r0, #4
   13732:	df02      	svc	2
}
   13734:	bd08      	pop	{r3, pc}
   13736:	bf00      	nop
   13738:	2000126c 	.word	0x2000126c
   1373c:	2000e218 	.word	0x2000e218
   13740:	0002ef38 	.word	0x0002ef38
   13744:	0002ef70 	.word	0x0002ef70
   13748:	00033831 	.word	0x00033831
   1374c:	000329f3 	.word	0x000329f3

00013750 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
   13750:	b508      	push	{r3, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   13752:	b1d0      	cbz	r0, 1378a <ticker_op_latency_cancelled+0x3a>
   13754:	4b10      	ldr	r3, [pc, #64]	; (13798 <ticker_op_latency_cancelled+0x48>)
   13756:	681b      	ldr	r3, [r3, #0]
   13758:	075b      	lsls	r3, r3, #29
   1375a:	d010      	beq.n	1377e <ticker_op_latency_cancelled+0x2e>
   1375c:	2301      	movs	r3, #1
   1375e:	f04f 0200 	mov.w	r2, #0
   13762:	f363 0202 	bfi	r2, r3, #0, #3
   13766:	490d      	ldr	r1, [pc, #52]	; (1379c <ticker_op_latency_cancelled+0x4c>)
   13768:	4b0d      	ldr	r3, [pc, #52]	; (137a0 <ticker_op_latency_cancelled+0x50>)
   1376a:	480e      	ldr	r0, [pc, #56]	; (137a4 <ticker_op_latency_cancelled+0x54>)
   1376c:	1a5b      	subs	r3, r3, r1
   1376e:	f36f 02c5 	bfc	r2, #3, #3
   13772:	08db      	lsrs	r3, r3, #3
   13774:	f363 128f 	bfi	r2, r3, #6, #10
   13778:	490b      	ldr	r1, [pc, #44]	; (137a8 <ticker_op_latency_cancelled+0x58>)
   1377a:	f7ee fcb7 	bl	20ec <log_1>
   1377e:	4040      	eors	r0, r0
   13780:	f380 8811 	msr	BASEPRI, r0
   13784:	f04f 0004 	mov.w	r0, #4
   13788:	df02      	svc	2

	conn->slave.latency_cancel = 0;
   1378a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   1378e:	f360 0341 	bfi	r3, r0, #1, #1
   13792:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
   13796:	bd08      	pop	{r3, pc}
   13798:	2000e218 	.word	0x2000e218
   1379c:	0002ef38 	.word	0x0002ef38
   137a0:	0002ef70 	.word	0x0002ef70
   137a4:	0003370f 	.word	0x0003370f
   137a8:	00032d37 	.word	0x00032d37

000137ac <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
   137ac:	4b04      	ldr	r3, [pc, #16]	; (137c0 <ticker_job_disable+0x14>)
   137ae:	7d5b      	ldrb	r3, [r3, #21]
   137b0:	b123      	cbz	r3, 137bc <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   137b2:	2101      	movs	r1, #1
   137b4:	2200      	movs	r2, #0
   137b6:	4608      	mov	r0, r1
   137b8:	f7fd be38 	b.w	1142c <mayfly_enable>
}
   137bc:	4770      	bx	lr
   137be:	bf00      	nop
   137c0:	2000126c 	.word	0x2000126c

000137c4 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   137c4:	2806      	cmp	r0, #6
{
   137c6:	b510      	push	{r4, lr}
   137c8:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   137ca:	d90a      	bls.n	137e2 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   137cc:	4b09      	ldr	r3, [pc, #36]	; (137f4 <hdr_conn_get+0x30>)
   137ce:	1fc2      	subs	r2, r0, #7
   137d0:	b292      	uxth	r2, r2
   137d2:	f44f 71aa 	mov.w	r1, #340	; 0x154
   137d6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
   137da:	f7fd fdbb 	bl	11354 <mem_get>
   137de:	6020      	str	r0, [r4, #0]
}
   137e0:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   137e2:	2805      	cmp	r0, #5
   137e4:	d004      	beq.n	137f0 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   137e6:	2806      	cmp	r0, #6
	return NULL;
   137e8:	4803      	ldr	r0, [pc, #12]	; (137f8 <hdr_conn_get+0x34>)
   137ea:	bf18      	it	ne
   137ec:	2000      	movne	r0, #0
   137ee:	e7f7      	b.n	137e0 <hdr_conn_get+0x1c>
		return &_radio.advertiser.hdr;
   137f0:	4802      	ldr	r0, [pc, #8]	; (137fc <hdr_conn_get+0x38>)
   137f2:	e7f5      	b.n	137e0 <hdr_conn_get+0x1c>
   137f4:	2000126c 	.word	0x2000126c
   137f8:	2000133c 	.word	0x2000133c
   137fc:	20001284 	.word	0x20001284

00013800 <event_stop.part.11>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
   13800:	b508      	push	{r3, lr}
	LL_ASSERT(!retval);
   13802:	4b0d      	ldr	r3, [pc, #52]	; (13838 <event_stop.part.11+0x38>)
   13804:	681b      	ldr	r3, [r3, #0]
   13806:	075b      	lsls	r3, r3, #29
   13808:	d010      	beq.n	1382c <event_stop.part.11+0x2c>
   1380a:	2301      	movs	r3, #1
   1380c:	f04f 0200 	mov.w	r2, #0
   13810:	f363 0202 	bfi	r2, r3, #0, #3
   13814:	4909      	ldr	r1, [pc, #36]	; (1383c <event_stop.part.11+0x3c>)
   13816:	4b0a      	ldr	r3, [pc, #40]	; (13840 <event_stop.part.11+0x40>)
   13818:	480a      	ldr	r0, [pc, #40]	; (13844 <event_stop.part.11+0x44>)
   1381a:	1a5b      	subs	r3, r3, r1
   1381c:	f36f 02c5 	bfc	r2, #3, #3
   13820:	08db      	lsrs	r3, r3, #3
   13822:	f363 128f 	bfi	r2, r3, #6, #10
   13826:	4908      	ldr	r1, [pc, #32]	; (13848 <event_stop.part.11+0x48>)
   13828:	f7ee fc60 	bl	20ec <log_1>
   1382c:	4040      	eors	r0, r0
   1382e:	f380 8811 	msr	BASEPRI, r0
   13832:	f04f 0004 	mov.w	r0, #4
   13836:	df02      	svc	2
   13838:	2000e218 	.word	0x2000e218
   1383c:	0002ef38 	.word	0x0002ef38
   13840:	0002ef70 	.word	0x0002ef70
   13844:	000333ea 	.word	0x000333ea
   13848:	00032afe 	.word	0x00032afe

0001384c <event_stop>:
	s_mfy_radio_stop.param = context;
   1384c:	4a06      	ldr	r2, [pc, #24]	; (13868 <event_stop+0x1c>)
{
   1384e:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   13850:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   13852:	4613      	mov	r3, r2
   13854:	2200      	movs	r2, #0
   13856:	4611      	mov	r1, r2
   13858:	4610      	mov	r0, r2
   1385a:	f7fd fe0f 	bl	1147c <mayfly_enqueue>
	LL_ASSERT(!retval);
   1385e:	b108      	cbz	r0, 13864 <event_stop+0x18>
   13860:	f7ff ffce 	bl	13800 <event_stop.part.11>
}
   13864:	bd08      	pop	{r3, pc}
   13866:	bf00      	nop
   13868:	2000dad4 	.word	0x2000dad4

0001386c <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1386c:	2200      	movs	r2, #0
{
   1386e:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   13870:	4611      	mov	r1, r2
   13872:	4b10      	ldr	r3, [pc, #64]	; (138b4 <event_active+0x48>)
   13874:	4610      	mov	r0, r2
   13876:	f7fd fe01 	bl	1147c <mayfly_enqueue>
	LL_ASSERT(!retval);
   1387a:	b1d0      	cbz	r0, 138b2 <event_active+0x46>
   1387c:	4b0e      	ldr	r3, [pc, #56]	; (138b8 <event_active+0x4c>)
   1387e:	681b      	ldr	r3, [r3, #0]
   13880:	075b      	lsls	r3, r3, #29
   13882:	d010      	beq.n	138a6 <event_active+0x3a>
   13884:	2301      	movs	r3, #1
   13886:	f04f 0200 	mov.w	r2, #0
   1388a:	f363 0202 	bfi	r2, r3, #0, #3
   1388e:	490b      	ldr	r1, [pc, #44]	; (138bc <event_active+0x50>)
   13890:	4b0b      	ldr	r3, [pc, #44]	; (138c0 <event_active+0x54>)
   13892:	480c      	ldr	r0, [pc, #48]	; (138c4 <event_active+0x58>)
   13894:	1a5b      	subs	r3, r3, r1
   13896:	f36f 02c5 	bfc	r2, #3, #3
   1389a:	08db      	lsrs	r3, r3, #3
   1389c:	f363 128f 	bfi	r2, r3, #6, #10
   138a0:	4909      	ldr	r1, [pc, #36]	; (138c8 <event_active+0x5c>)
   138a2:	f7ee fc23 	bl	20ec <log_1>
   138a6:	4040      	eors	r0, r0
   138a8:	f380 8811 	msr	BASEPRI, r0
   138ac:	f04f 0004 	mov.w	r0, #4
   138b0:	df02      	svc	2
}
   138b2:	bd08      	pop	{r3, pc}
   138b4:	2000da94 	.word	0x2000da94
   138b8:	2000e218 	.word	0x2000e218
   138bc:	0002ef38 	.word	0x0002ef38
   138c0:	0002ef70 	.word	0x0002ef70
   138c4:	000333ea 	.word	0x000333ea
   138c8:	00032a22 	.word	0x00032a22

000138cc <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   138cc:	2200      	movs	r2, #0
{
   138ce:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   138d0:	4611      	mov	r1, r2
   138d2:	4b10      	ldr	r3, [pc, #64]	; (13914 <event_xtal+0x48>)
   138d4:	4610      	mov	r0, r2
   138d6:	f7fd fdd1 	bl	1147c <mayfly_enqueue>
	LL_ASSERT(!retval);
   138da:	b1d0      	cbz	r0, 13912 <event_xtal+0x46>
   138dc:	4b0e      	ldr	r3, [pc, #56]	; (13918 <event_xtal+0x4c>)
   138de:	681b      	ldr	r3, [r3, #0]
   138e0:	075b      	lsls	r3, r3, #29
   138e2:	d010      	beq.n	13906 <event_xtal+0x3a>
   138e4:	2301      	movs	r3, #1
   138e6:	f04f 0200 	mov.w	r2, #0
   138ea:	f363 0202 	bfi	r2, r3, #0, #3
   138ee:	490b      	ldr	r1, [pc, #44]	; (1391c <event_xtal+0x50>)
   138f0:	4b0b      	ldr	r3, [pc, #44]	; (13920 <event_xtal+0x54>)
   138f2:	480c      	ldr	r0, [pc, #48]	; (13924 <event_xtal+0x58>)
   138f4:	1a5b      	subs	r3, r3, r1
   138f6:	f36f 02c5 	bfc	r2, #3, #3
   138fa:	08db      	lsrs	r3, r3, #3
   138fc:	f363 128f 	bfi	r2, r3, #6, #10
   13900:	4909      	ldr	r1, [pc, #36]	; (13928 <event_xtal+0x5c>)
   13902:	f7ee fbf3 	bl	20ec <log_1>
   13906:	4040      	eors	r0, r0
   13908:	f380 8811 	msr	BASEPRI, r0
   1390c:	f04f 0004 	mov.w	r0, #4
   13910:	df02      	svc	2
}
   13912:	bd08      	pop	{r3, pc}
   13914:	2000db34 	.word	0x2000db34
   13918:	2000e218 	.word	0x2000e218
   1391c:	0002ef38 	.word	0x0002ef38
   13920:	0002ef70 	.word	0x0002ef70
   13924:	000333ea 	.word	0x000333ea
   13928:	00032a3e 	.word	0x00032a3e

0001392c <mayfly_radio_active>:
{
   1392c:	b508      	push	{r3, lr}
   1392e:	4a16      	ldr	r2, [pc, #88]	; (13988 <mayfly_radio_active+0x5c>)
   13930:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
   13932:	b138      	cbz	r0, 13944 <mayfly_radio_active+0x18>
		if (s_active++) {
   13934:	1c59      	adds	r1, r3, #1
   13936:	7011      	strb	r1, [r2, #0]
   13938:	bb2b      	cbnz	r3, 13986 <mayfly_radio_active+0x5a>
		radio_active_callback(1);
   1393a:	2001      	movs	r0, #1
}
   1393c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
   13940:	f007 bab8 	b.w	1aeb4 <radio_active_callback>
		LL_ASSERT(s_active);
   13944:	b9d3      	cbnz	r3, 1397c <mayfly_radio_active+0x50>
   13946:	4a11      	ldr	r2, [pc, #68]	; (1398c <mayfly_radio_active+0x60>)
   13948:	6812      	ldr	r2, [r2, #0]
   1394a:	0752      	lsls	r2, r2, #29
   1394c:	d010      	beq.n	13970 <mayfly_radio_active+0x44>
   1394e:	2101      	movs	r1, #1
   13950:	f04f 0200 	mov.w	r2, #0
   13954:	f361 0202 	bfi	r2, r1, #0, #3
   13958:	f363 02c5 	bfi	r2, r3, #3, #3
   1395c:	490c      	ldr	r1, [pc, #48]	; (13990 <mayfly_radio_active+0x64>)
   1395e:	4b0d      	ldr	r3, [pc, #52]	; (13994 <mayfly_radio_active+0x68>)
   13960:	480d      	ldr	r0, [pc, #52]	; (13998 <mayfly_radio_active+0x6c>)
   13962:	1a5b      	subs	r3, r3, r1
   13964:	08db      	lsrs	r3, r3, #3
   13966:	f363 128f 	bfi	r2, r3, #6, #10
   1396a:	490c      	ldr	r1, [pc, #48]	; (1399c <mayfly_radio_active+0x70>)
   1396c:	f7ee fbbe 	bl	20ec <log_1>
   13970:	4040      	eors	r0, r0
   13972:	f380 8811 	msr	BASEPRI, r0
   13976:	f04f 0004 	mov.w	r0, #4
   1397a:	df02      	svc	2
		if (--s_active) {
   1397c:	3b01      	subs	r3, #1
   1397e:	b2db      	uxtb	r3, r3
   13980:	7013      	strb	r3, [r2, #0]
   13982:	2b00      	cmp	r3, #0
   13984:	d0da      	beq.n	1393c <mayfly_radio_active+0x10>
}
   13986:	bd08      	pop	{r3, pc}
   13988:	20001428 	.word	0x20001428
   1398c:	2000e218 	.word	0x2000e218
   13990:	0002ef38 	.word	0x0002ef38
   13994:	0002ef70 	.word	0x0002ef70
   13998:	00033363 	.word	0x00033363
   1399c:	00032a0e 	.word	0x00032a0e

000139a0 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
   139a0:	2000      	movs	r0, #0
   139a2:	f7ff bfc3 	b.w	1392c <mayfly_radio_active>
	...

000139a8 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
   139a8:	b2c0      	uxtb	r0, r0
{
   139aa:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   139ac:	1f03      	subs	r3, r0, #4
   139ae:	2b01      	cmp	r3, #1
   139b0:	d91a      	bls.n	139e8 <mayfly_radio_stop+0x40>
   139b2:	4b15      	ldr	r3, [pc, #84]	; (13a08 <mayfly_radio_stop+0x60>)
   139b4:	681b      	ldr	r3, [r3, #0]
   139b6:	075b      	lsls	r3, r3, #29
   139b8:	d010      	beq.n	139dc <mayfly_radio_stop+0x34>
   139ba:	2301      	movs	r3, #1
   139bc:	f04f 0200 	mov.w	r2, #0
   139c0:	f363 0202 	bfi	r2, r3, #0, #3
   139c4:	4911      	ldr	r1, [pc, #68]	; (13a0c <mayfly_radio_stop+0x64>)
   139c6:	4b12      	ldr	r3, [pc, #72]	; (13a10 <mayfly_radio_stop+0x68>)
   139c8:	4812      	ldr	r0, [pc, #72]	; (13a14 <mayfly_radio_stop+0x6c>)
   139ca:	1a5b      	subs	r3, r3, r1
   139cc:	f36f 02c5 	bfc	r2, #3, #3
   139d0:	08db      	lsrs	r3, r3, #3
   139d2:	f363 128f 	bfi	r2, r3, #6, #10
   139d6:	4910      	ldr	r1, [pc, #64]	; (13a18 <mayfly_radio_stop+0x70>)
   139d8:	f7ee fb88 	bl	20ec <log_1>
   139dc:	4040      	eors	r0, r0
   139de:	f380 8811 	msr	BASEPRI, r0
   139e2:	f04f 0004 	mov.w	r0, #4
   139e6:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
   139e8:	4a0c      	ldr	r2, [pc, #48]	; (13a1c <mayfly_radio_stop+0x74>)
   139ea:	7d53      	ldrb	r3, [r2, #21]
		      (_radio.state != STATE_STOP) &&
   139ec:	b113      	cbz	r3, 139f4 <mayfly_radio_stop+0x4c>
	radio_used = ((_radio.state != STATE_NONE) &&
   139ee:	3b04      	subs	r3, #4
   139f0:	2b01      	cmp	r3, #1
   139f2:	d806      	bhi.n	13a02 <mayfly_radio_stop+0x5a>
	if (radio_used || !radio_is_idle()) {
   139f4:	f00a ff7a 	bl	1e8ec <radio_is_idle>
   139f8:	b928      	cbnz	r0, 13a06 <mayfly_radio_stop+0x5e>
}
   139fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
   139fe:	f00a bf43 	b.w	1e888 <radio_disable>
			_radio.state = state;
   13a02:	7550      	strb	r0, [r2, #21]
   13a04:	e7f9      	b.n	139fa <mayfly_radio_stop+0x52>
}
   13a06:	bd08      	pop	{r3, pc}
   13a08:	2000e218 	.word	0x2000e218
   13a0c:	0002ef38 	.word	0x0002ef38
   13a10:	0002ef70 	.word	0x0002ef70
   13a14:	00033381 	.word	0x00033381
   13a18:	00032aec 	.word	0x00032aec
   13a1c:	2000126c 	.word	0x2000126c

00013a20 <pdu_node_tx_release>:
{
   13a20:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   13a22:	4a1d      	ldr	r2, [pc, #116]	; (13a98 <pdu_node_tx_release+0x78>)
   13a24:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
   13a28:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
   13a2c:	3301      	adds	r3, #1
   13a2e:	b2db      	uxtb	r3, r3
		last = 0;
   13a30:	429c      	cmp	r4, r3
   13a32:	bf08      	it	eq
   13a34:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
   13a36:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
   13a3a:	429c      	cmp	r4, r3
   13a3c:	d11a      	bne.n	13a74 <pdu_node_tx_release+0x54>
   13a3e:	4b17      	ldr	r3, [pc, #92]	; (13a9c <pdu_node_tx_release+0x7c>)
   13a40:	681b      	ldr	r3, [r3, #0]
   13a42:	075b      	lsls	r3, r3, #29
   13a44:	d010      	beq.n	13a68 <pdu_node_tx_release+0x48>
   13a46:	2301      	movs	r3, #1
   13a48:	f04f 0200 	mov.w	r2, #0
   13a4c:	f363 0202 	bfi	r2, r3, #0, #3
   13a50:	4913      	ldr	r1, [pc, #76]	; (13aa0 <pdu_node_tx_release+0x80>)
   13a52:	4b14      	ldr	r3, [pc, #80]	; (13aa4 <pdu_node_tx_release+0x84>)
   13a54:	4814      	ldr	r0, [pc, #80]	; (13aa8 <pdu_node_tx_release+0x88>)
   13a56:	1a5b      	subs	r3, r3, r1
   13a58:	f36f 02c5 	bfc	r2, #3, #3
   13a5c:	08db      	lsrs	r3, r3, #3
   13a5e:	f363 128f 	bfi	r2, r3, #6, #10
   13a62:	4912      	ldr	r1, [pc, #72]	; (13aac <pdu_node_tx_release+0x8c>)
   13a64:	f7ee fb42 	bl	20ec <log_1>
   13a68:	4040      	eors	r0, r0
   13a6a:	f380 8811 	msr	BASEPRI, r0
   13a6e:	f04f 0004 	mov.w	r0, #4
   13a72:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   13a74:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
   13a78:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
   13a7c:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   13a80:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
   13a84:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   13a88:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
   13a8a:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
   13a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
   13a92:	f007 ba11 	b.w	1aeb8 <radio_event_callback>
   13a96:	bf00      	nop
   13a98:	2000126c 	.word	0x2000126c
   13a9c:	2000e218 	.word	0x2000e218
   13aa0:	0002ef38 	.word	0x0002ef38
   13aa4:	0002ef70 	.word	0x0002ef70
   13aa8:	0003348a 	.word	0x0003348a
   13aac:	00032ca6 	.word	0x00032ca6

00013ab0 <packet_tx_enqueue>:
{
   13ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   13ab4:	4d25      	ldr	r5, [pc, #148]	; (13b4c <packet_tx_enqueue+0x9c>)
{
   13ab6:	4606      	mov	r6, r0
   13ab8:	46a8      	mov	r8, r5
		node_tx_new->next = NULL;
   13aba:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   13abc:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   13ac0:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   13ac4:	429a      	cmp	r2, r3
   13ac6:	d036      	beq.n	13b36 <packet_tx_enqueue+0x86>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   13ac8:	f895 9175 	ldrb.w	r9, [r5, #373]	; 0x175
   13acc:	f8d5 a16c 	ldr.w	sl, [r5, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   13ad0:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
   13ad4:	f83a 2039 	ldrh.w	r2, [sl, r9, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   13ad8:	eb0a 03c9 	add.w	r3, sl, r9, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   13adc:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
   13ae0:	685c      	ldr	r4, [r3, #4]
		node_tx_new->next = NULL;
   13ae2:	6027      	str	r7, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   13ae4:	f7fd fc36 	bl	11354 <mem_get>
   13ae8:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
   13aea:	f83a 0039 	ldrh.w	r0, [sl, r9, lsl #3]
   13aee:	8c1a      	ldrh	r2, [r3, #32]
   13af0:	4282      	cmp	r2, r0
   13af2:	d122      	bne.n	13b3a <packet_tx_enqueue+0x8a>
			if (conn->pkt_tx_data == 0) {
   13af4:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   13af8:	b942      	cbnz	r2, 13b0c <packet_tx_enqueue+0x5c>
				if (conn->pkt_tx_head == 0) {
   13afa:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
   13afe:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
   13b02:	b91a      	cbnz	r2, 13b0c <packet_tx_enqueue+0x5c>
					conn->pkt_tx_head = node_tx_new;
   13b04:	f8c3 413c 	str.w	r4, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
   13b08:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
   13b0c:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
   13b10:	b102      	cbz	r2, 13b14 <packet_tx_enqueue+0x64>
				conn->pkt_tx_last->next = node_tx_new;
   13b12:	6014      	str	r4, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
   13b14:	f8c3 414c 	str.w	r4, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
   13b18:	f898 3175 	ldrb.w	r3, [r8, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
   13b1c:	f898 2174 	ldrb.w	r2, [r8, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
   13b20:	3301      	adds	r3, #1
   13b22:	b2db      	uxtb	r3, r3
   13b24:	3e01      	subs	r6, #1
			first = 0;
   13b26:	429a      	cmp	r2, r3
   13b28:	bf08      	it	eq
   13b2a:	2300      	moveq	r3, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   13b2c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		_radio.packet_tx_first = first;
   13b30:	f888 3175 	strb.w	r3, [r8, #373]	; 0x175
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   13b34:	d1c2      	bne.n	13abc <packet_tx_enqueue+0xc>
}
   13b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   13b3a:	7923      	ldrb	r3, [r4, #4]
   13b3c:	f367 0301 	bfi	r3, r7, #0, #2
   13b40:	7123      	strb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   13b42:	4621      	mov	r1, r4
   13b44:	f7ff ff6c 	bl	13a20 <pdu_node_tx_release>
   13b48:	e7e6      	b.n	13b18 <packet_tx_enqueue+0x68>
   13b4a:	bf00      	nop
   13b4c:	2000126c 	.word	0x2000126c

00013b50 <connection_release>:
{
   13b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   13b52:	2201      	movs	r2, #1
{
   13b54:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   13b56:	4611      	mov	r1, r2
   13b58:	2000      	movs	r0, #0
   13b5a:	f7fd fc67 	bl	1142c <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13b5e:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
   13b62:	f242 3363 	movw	r3, #9059	; 0x2363
   13b66:	2100      	movs	r1, #0
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13b68:	3207      	adds	r2, #7
	ticker_status =
   13b6a:	9300      	str	r3, [sp, #0]
   13b6c:	b2d2      	uxtb	r2, r2
   13b6e:	4b51      	ldr	r3, [pc, #324]	; (13cb4 <connection_release+0x164>)
   13b70:	4608      	mov	r0, r1
   13b72:	f7fe fad5 	bl	12120 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13b76:	f030 0602 	bics.w	r6, r0, #2
   13b7a:	d01a      	beq.n	13bb2 <connection_release+0x62>
   13b7c:	4b4e      	ldr	r3, [pc, #312]	; (13cb8 <connection_release+0x168>)
   13b7e:	681b      	ldr	r3, [r3, #0]
   13b80:	0759      	lsls	r1, r3, #29
   13b82:	d010      	beq.n	13ba6 <connection_release+0x56>
   13b84:	f04f 0200 	mov.w	r2, #0
   13b88:	2301      	movs	r3, #1
   13b8a:	f363 0202 	bfi	r2, r3, #0, #3
   13b8e:	f36f 02c5 	bfc	r2, #3, #3
   13b92:	494a      	ldr	r1, [pc, #296]	; (13cbc <connection_release+0x16c>)
   13b94:	4b4a      	ldr	r3, [pc, #296]	; (13cc0 <connection_release+0x170>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13b96:	484b      	ldr	r0, [pc, #300]	; (13cc4 <connection_release+0x174>)
   13b98:	1a5b      	subs	r3, r3, r1
   13b9a:	08db      	lsrs	r3, r3, #3
   13b9c:	f363 128f 	bfi	r2, r3, #6, #10
   13ba0:	4949      	ldr	r1, [pc, #292]	; (13cc8 <connection_release+0x178>)
   13ba2:	f7ee faa3 	bl	20ec <log_1>
   13ba6:	4040      	eors	r0, r0
   13ba8:	f380 8811 	msr	BASEPRI, r0
   13bac:	f04f 0004 	mov.w	r0, #4
   13bb0:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
   13bb2:	4b46      	ldr	r3, [pc, #280]	; (13ccc <connection_release+0x17c>)
   13bb4:	7d5a      	ldrb	r2, [r3, #21]
   13bb6:	2a05      	cmp	r2, #5
   13bb8:	461f      	mov	r7, r3
   13bba:	d13f      	bne.n	13c3c <connection_release+0xec>
					  conn->handle))) {
   13bbc:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   13bbe:	7c59      	ldrb	r1, [r3, #17]
   13bc0:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
   13bc2:	4291      	cmp	r1, r2
   13bc4:	d13a      	bne.n	13c3c <connection_release+0xec>
		_radio.ticker_id_prepare = 0;
   13bc6:	745e      	strb	r6, [r3, #17]
		ticker_status =
   13bc8:	f242 3374 	movw	r3, #9076	; 0x2374
   13bcc:	9300      	str	r3, [sp, #0]
   13bce:	2201      	movs	r2, #1
   13bd0:	4b38      	ldr	r3, [pc, #224]	; (13cb4 <connection_release+0x164>)
   13bd2:	4631      	mov	r1, r6
   13bd4:	4630      	mov	r0, r6
   13bd6:	f7fe faa3 	bl	12120 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13bda:	f030 0502 	bics.w	r5, r0, #2
   13bde:	d00b      	beq.n	13bf8 <connection_release+0xa8>
   13be0:	4b35      	ldr	r3, [pc, #212]	; (13cb8 <connection_release+0x168>)
   13be2:	681b      	ldr	r3, [r3, #0]
   13be4:	075a      	lsls	r2, r3, #29
   13be6:	d0de      	beq.n	13ba6 <connection_release+0x56>
   13be8:	f04f 0200 	mov.w	r2, #0
   13bec:	2301      	movs	r3, #1
   13bee:	f363 0202 	bfi	r2, r3, #0, #3
   13bf2:	f366 02c5 	bfi	r2, r6, #3, #3
   13bf6:	e7cc      	b.n	13b92 <connection_release+0x42>
		ticker_status =
   13bf8:	f242 337b 	movw	r3, #9083	; 0x237b
   13bfc:	9300      	str	r3, [sp, #0]
   13bfe:	462a      	mov	r2, r5
   13c00:	4b2c      	ldr	r3, [pc, #176]	; (13cb4 <connection_release+0x164>)
   13c02:	4629      	mov	r1, r5
   13c04:	4628      	mov	r0, r5
   13c06:	f7fe fa8b 	bl	12120 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13c0a:	f030 0302 	bics.w	r3, r0, #2
   13c0e:	d015      	beq.n	13c3c <connection_release+0xec>
   13c10:	4b29      	ldr	r3, [pc, #164]	; (13cb8 <connection_release+0x168>)
   13c12:	681b      	ldr	r3, [r3, #0]
   13c14:	075b      	lsls	r3, r3, #29
   13c16:	d0c6      	beq.n	13ba6 <connection_release+0x56>
   13c18:	f04f 0200 	mov.w	r2, #0
   13c1c:	2301      	movs	r3, #1
   13c1e:	f363 0202 	bfi	r2, r3, #0, #3
   13c22:	f365 02c5 	bfi	r2, r5, #3, #3
   13c26:	e7b4      	b.n	13b92 <connection_release+0x42>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   13c28:	790b      	ldrb	r3, [r1, #4]
   13c2a:	f36f 0301 	bfc	r3, #0, #2
   13c2e:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   13c30:	680b      	ldr	r3, [r1, #0]
   13c32:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
   13c36:	8c20      	ldrh	r0, [r4, #32]
   13c38:	f7ff fef2 	bl	13a20 <pdu_node_tx_release>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   13c3c:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   13c40:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   13c44:	4299      	cmp	r1, r3
   13c46:	d003      	beq.n	13c50 <connection_release+0x100>
   13c48:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   13c4c:	4299      	cmp	r1, r3
   13c4e:	d1eb      	bne.n	13c28 <connection_release+0xd8>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   13c50:	4d1f      	ldr	r5, [pc, #124]	; (13cd0 <connection_release+0x180>)
   13c52:	e007      	b.n	13c64 <connection_release+0x114>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   13c54:	6803      	ldr	r3, [r0, #0]
   13c56:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   13c5a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   13c5e:	4629      	mov	r1, r5
   13c60:	f7fd fb5d 	bl	1131e <mem_release>
	while ((conn->pkt_tx_head) &&
   13c64:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   13c68:	b118      	cbz	r0, 13c72 <connection_release+0x122>
   13c6a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   13c6e:	4298      	cmp	r0, r3
   13c70:	d1f0      	bne.n	13c54 <connection_release+0x104>
	conn->pkt_tx_ctrl = NULL;
   13c72:	2300      	movs	r3, #0
   13c74:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   13c78:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
   13c7c:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   13c80:	b951      	cbnz	r1, 13c98 <connection_release+0x148>
	conn->handle = 0xffff;
   13c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13c86:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   13c88:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
   13c8c:	42a3      	cmp	r3, r4
		_radio.conn_upd = NULL;
   13c8e:	bf08      	it	eq
   13c90:	f8c7 1188 	streq.w	r1, [r7, #392]	; 0x188
}
   13c94:	b003      	add	sp, #12
   13c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   13c98:	790b      	ldrb	r3, [r1, #4]
   13c9a:	f36f 0301 	bfc	r3, #0, #2
   13c9e:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   13ca0:	680b      	ldr	r3, [r1, #0]
   13ca2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
   13ca6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
   13caa:	8c20      	ldrh	r0, [r4, #32]
   13cac:	f7ff feb8 	bl	13a20 <pdu_node_tx_release>
   13cb0:	e7e4      	b.n	13c7c <connection_release+0x12c>
   13cb2:	bf00      	nop
   13cb4:	0001351d 	.word	0x0001351d
   13cb8:	2000e218 	.word	0x2000e218
   13cbc:	0002ef38 	.word	0x0002ef38
   13cc0:	0002ef70 	.word	0x0002ef70
   13cc4:	00032d7f 	.word	0x00032d7f
   13cc8:	00032cba 	.word	0x00032cba
   13ccc:	2000126c 	.word	0x2000126c
   13cd0:	200013c8 	.word	0x200013c8

00013cd4 <chan_set>:
	switch (chan) {
   13cd4:	2826      	cmp	r0, #38	; 0x26
{
   13cd6:	b510      	push	{r4, lr}
   13cd8:	4604      	mov	r4, r0
	switch (chan) {
   13cda:	d00b      	beq.n	13cf4 <chan_set+0x20>
   13cdc:	2827      	cmp	r0, #39	; 0x27
   13cde:	d00b      	beq.n	13cf8 <chan_set+0x24>
   13ce0:	2825      	cmp	r0, #37	; 0x25
   13ce2:	d10b      	bne.n	13cfc <chan_set+0x28>
		radio_freq_chan_set(2);
   13ce4:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
   13ce6:	f00a fd4b 	bl	1e780 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   13cea:	4620      	mov	r0, r4
}
   13cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   13cf0:	f00a bd4c 	b.w	1e78c <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   13cf4:	201a      	movs	r0, #26
   13cf6:	e7f6      	b.n	13ce6 <chan_set+0x12>
		radio_freq_chan_set(80);
   13cf8:	2050      	movs	r0, #80	; 0x50
   13cfa:	e7f4      	b.n	13ce6 <chan_set+0x12>
		if (chan < 11) {
   13cfc:	280a      	cmp	r0, #10
   13cfe:	d802      	bhi.n	13d06 <chan_set+0x32>
			radio_freq_chan_set(4 + (2 * chan));
   13d00:	3002      	adds	r0, #2
   13d02:	0040      	lsls	r0, r0, #1
   13d04:	e7ef      	b.n	13ce6 <chan_set+0x12>
		} else if (chan < 40) {
   13d06:	2827      	cmp	r0, #39	; 0x27
   13d08:	d801      	bhi.n	13d0e <chan_set+0x3a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   13d0a:	3003      	adds	r0, #3
   13d0c:	e7f9      	b.n	13d02 <chan_set+0x2e>
			LL_ASSERT(0);
   13d0e:	4b0d      	ldr	r3, [pc, #52]	; (13d44 <chan_set+0x70>)
   13d10:	681b      	ldr	r3, [r3, #0]
   13d12:	075b      	lsls	r3, r3, #29
   13d14:	d010      	beq.n	13d38 <chan_set+0x64>
   13d16:	2301      	movs	r3, #1
   13d18:	f04f 0200 	mov.w	r2, #0
   13d1c:	f363 0202 	bfi	r2, r3, #0, #3
   13d20:	4909      	ldr	r1, [pc, #36]	; (13d48 <chan_set+0x74>)
   13d22:	4b0a      	ldr	r3, [pc, #40]	; (13d4c <chan_set+0x78>)
   13d24:	480a      	ldr	r0, [pc, #40]	; (13d50 <chan_set+0x7c>)
   13d26:	1a5b      	subs	r3, r3, r1
   13d28:	f36f 02c5 	bfc	r2, #3, #3
   13d2c:	08db      	lsrs	r3, r3, #3
   13d2e:	f363 128f 	bfi	r2, r3, #6, #10
   13d32:	4908      	ldr	r1, [pc, #32]	; (13d54 <chan_set+0x80>)
   13d34:	f7ee f9da 	bl	20ec <log_1>
   13d38:	4040      	eors	r0, r0
   13d3a:	f380 8811 	msr	BASEPRI, r0
   13d3e:	f04f 0004 	mov.w	r0, #4
   13d42:	df02      	svc	2
   13d44:	2000e218 	.word	0x2000e218
   13d48:	0002ef38 	.word	0x0002ef38
   13d4c:	0002ef70 	.word	0x0002ef70
   13d50:	0003146d 	.word	0x0003146d
   13d54:	00032b1e 	.word	0x00032b1e

00013d58 <adv_setup>:
{
   13d58:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
   13d5a:	4c33      	ldr	r4, [pc, #204]	; (13e28 <adv_setup+0xd0>)
   13d5c:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
   13d60:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
   13d64:	429a      	cmp	r2, r3
   13d66:	d027      	beq.n	13db8 <adv_setup+0x60>
		first = _radio.advertiser.adv_data.first + 1;
   13d68:	3301      	adds	r3, #1
   13d6a:	b2db      	uxtb	r3, r3
			first = 0;
   13d6c:	2b02      	cmp	r3, #2
   13d6e:	bf08      	it	eq
   13d70:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
   13d72:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
   13d76:	2201      	movs	r2, #1
   13d78:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
	if (_radio.advertiser.scan_data.first != _radio.
   13d7c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
   13d80:	212b      	movs	r1, #43	; 0x2b
   13d82:	2527      	movs	r5, #39	; 0x27
   13d84:	fb15 1500 	smlabb	r5, r5, r0, r1
   13d88:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
   13d8c:	4299      	cmp	r1, r3
   13d8e:	eb04 0605 	add.w	r6, r4, r5
   13d92:	d013      	beq.n	13dbc <adv_setup+0x64>
		first = _radio.advertiser.scan_data.first + 1;
   13d94:	3301      	adds	r3, #1
   13d96:	b2db      	uxtb	r3, r3
			first = 0;
   13d98:	2b02      	cmp	r3, #2
   13d9a:	bf08      	it	eq
   13d9c:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
   13d9e:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		struct pdu_adv *scan_pdu = (void *)
   13da2:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
   13da6:	2327      	movs	r3, #39	; 0x27
   13da8:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
   13dac:	2206      	movs	r2, #6
   13dae:	1cb1      	adds	r1, r6, #2
   13db0:	307d      	adds	r0, #125	; 0x7d
   13db2:	f7f2 ff69 	bl	6c88 <memcpy>
   13db6:	e003      	b.n	13dc0 <adv_setup+0x68>
	u8_t upd = 0;
   13db8:	2200      	movs	r2, #0
   13dba:	e7dd      	b.n	13d78 <adv_setup+0x20>
	if (upd) {
   13dbc:	2a00      	cmp	r2, #0
   13dbe:	d1f0      	bne.n	13da2 <adv_setup+0x4a>
	radio_pkt_tx_set(pdu);
   13dc0:	4630      	mov	r0, r6
   13dc2:	f00a fd41 	bl	1e848 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   13dc6:	5d63      	ldrb	r3, [r4, r5]
   13dc8:	f003 030f 	and.w	r3, r3, #15
   13dcc:	2b02      	cmp	r3, #2
   13dce:	d022      	beq.n	13e16 <adv_setup+0xbe>
   13dd0:	2b07      	cmp	r3, #7
   13dd2:	d020      	beq.n	13e16 <adv_setup+0xbe>
		_radio.state = STATE_TX;
   13dd4:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
   13dd6:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   13dd8:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
   13dda:	f00a fe4b 	bl	1ea74 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   13dde:	2000      	movs	r0, #0
   13de0:	f00a fdac 	bl	1e93c <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
   13de4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   13de8:	f3c3 0202 	ubfx	r2, r3, #0, #3
   13dec:	b2d3      	uxtb	r3, r2
   13dee:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
   13df0:	2000      	movs	r0, #0
   13df2:	07ce      	lsls	r6, r1, #31
   13df4:	f100 0501 	add.w	r5, r0, #1
   13df8:	d512      	bpl.n	13e20 <adv_setup+0xc8>
		(_radio.advertiser.chan_map_current - 1);
   13dfa:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
   13dfc:	4013      	ands	r3, r2
   13dfe:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
   13e02:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
   13e04:	f363 0202 	bfi	r2, r3, #0, #3
   13e08:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
   13e0c:	3025      	adds	r0, #37	; 0x25
}
   13e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
   13e12:	f7ff bf5f 	b.w	13cd4 <chan_set>
		_radio.state = STATE_CLOSE;
   13e16:	2303      	movs	r3, #3
   13e18:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
   13e1a:	f00a fda5 	bl	1e968 <radio_switch_complete_and_disable>
   13e1e:	e7e1      	b.n	13de4 <adv_setup+0x8c>
		bitmap >>= 1;
   13e20:	0849      	lsrs	r1, r1, #1
   13e22:	4628      	mov	r0, r5
   13e24:	e7e5      	b.n	13df2 <adv_setup+0x9a>
   13e26:	bf00      	nop
   13e28:	2000126c 	.word	0x2000126c

00013e2c <ticker_stop_adv_stop>:
{
   13e2c:	b530      	push	{r4, r5, lr}
   13e2e:	4c89      	ldr	r4, [pc, #548]	; (14054 <ticker_stop_adv_stop+0x228>)
   13e30:	b085      	sub	sp, #20
	if (status != TICKER_STATUS_SUCCESS) {
   13e32:	b1f0      	cbz	r0, 13e72 <ticker_stop_adv_stop+0x46>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   13e34:	7ce3      	ldrb	r3, [r4, #19]
   13e36:	2b05      	cmp	r3, #5
   13e38:	f000 810a 	beq.w	14050 <ticker_stop_adv_stop+0x224>
   13e3c:	4b86      	ldr	r3, [pc, #536]	; (14058 <ticker_stop_adv_stop+0x22c>)
   13e3e:	681b      	ldr	r3, [r3, #0]
   13e40:	0759      	lsls	r1, r3, #29
   13e42:	d010      	beq.n	13e66 <ticker_stop_adv_stop+0x3a>
   13e44:	2301      	movs	r3, #1
   13e46:	f04f 0200 	mov.w	r2, #0
   13e4a:	f363 0202 	bfi	r2, r3, #0, #3
   13e4e:	4983      	ldr	r1, [pc, #524]	; (1405c <ticker_stop_adv_stop+0x230>)
   13e50:	4b83      	ldr	r3, [pc, #524]	; (14060 <ticker_stop_adv_stop+0x234>)
   13e52:	4884      	ldr	r0, [pc, #528]	; (14064 <ticker_stop_adv_stop+0x238>)
   13e54:	1a5b      	subs	r3, r3, r1
   13e56:	f36f 02c5 	bfc	r2, #3, #3
   13e5a:	08db      	lsrs	r3, r3, #3
   13e5c:	4982      	ldr	r1, [pc, #520]	; (14068 <ticker_stop_adv_stop+0x23c>)
   13e5e:	f363 128f 	bfi	r2, r3, #6, #10
	LL_ASSERT(!retval);
   13e62:	f7ee f943 	bl	20ec <log_1>
   13e66:	4040      	eors	r0, r0
   13e68:	f380 8811 	msr	BASEPRI, r0
   13e6c:	f04f 0004 	mov.w	r0, #4
   13e70:	df02      	svc	2
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   13e72:	7c63      	ldrb	r3, [r4, #17]
   13e74:	2b05      	cmp	r3, #5
   13e76:	d003      	beq.n	13e80 <ticker_stop_adv_stop+0x54>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   13e78:	7ca3      	ldrb	r3, [r4, #18]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   13e7a:	2b05      	cmp	r3, #5
   13e7c:	f040 80cc 	bne.w	14018 <ticker_stop_adv_stop+0x1ec>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
   13e80:	ab04      	add	r3, sp, #16
   13e82:	2202      	movs	r2, #2
   13e84:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13e88:	2200      	movs	r2, #0
   13e8a:	9300      	str	r3, [sp, #0]
   13e8c:	2101      	movs	r1, #1
   13e8e:	4b77      	ldr	r3, [pc, #476]	; (1406c <ticker_stop_adv_stop+0x240>)
   13e90:	4610      	mov	r0, r2
   13e92:	f7fe f945 	bl	12120 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   13e96:	2802      	cmp	r0, #2
   13e98:	d01d      	beq.n	13ed6 <ticker_stop_adv_stop+0xaa>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
   13e9a:	9802      	ldr	r0, [sp, #8]
   13e9c:	b340      	cbz	r0, 13ef0 <ticker_stop_adv_stop+0xc4>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
   13e9e:	9d02      	ldr	r5, [sp, #8]
   13ea0:	2d01      	cmp	r5, #1
   13ea2:	f040 80a4 	bne.w	13fee <ticker_stop_adv_stop+0x1c2>
		if (_radio.role != ROLE_NONE) {
   13ea6:	7d23      	ldrb	r3, [r4, #20]
   13ea8:	2b00      	cmp	r3, #0
   13eaa:	f000 80b5 	beq.w	14018 <ticker_stop_adv_stop+0x1ec>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   13eae:	4b70      	ldr	r3, [pc, #448]	; (14070 <ticker_stop_adv_stop+0x244>)
   13eb0:	2204      	movs	r2, #4
   13eb2:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   13eb4:	2200      	movs	r2, #0
   13eb6:	4611      	mov	r1, r2
   13eb8:	4628      	mov	r0, r5
   13eba:	f7fd fadf 	bl	1147c <mayfly_enqueue>
			LL_ASSERT(!ret);
   13ebe:	2800      	cmp	r0, #0
   13ec0:	f000 80aa 	beq.w	14018 <ticker_stop_adv_stop+0x1ec>
   13ec4:	4b64      	ldr	r3, [pc, #400]	; (14058 <ticker_stop_adv_stop+0x22c>)
   13ec6:	681b      	ldr	r3, [r3, #0]
   13ec8:	0759      	lsls	r1, r3, #29
   13eca:	d0cc      	beq.n	13e66 <ticker_stop_adv_stop+0x3a>
   13ecc:	f04f 0200 	mov.w	r2, #0
   13ed0:	f365 0202 	bfi	r2, r5, #0, #3
   13ed4:	e046      	b.n	13f64 <ticker_stop_adv_stop+0x138>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   13ed6:	2201      	movs	r2, #1
   13ed8:	4611      	mov	r1, r2
   13eda:	4610      	mov	r0, r2
   13edc:	f7fd faa6 	bl	1142c <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
   13ee0:	9b02      	ldr	r3, [sp, #8]
   13ee2:	2b02      	cmp	r3, #2
   13ee4:	d1d9      	bne.n	13e9a <ticker_stop_adv_stop+0x6e>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   13ee6:	2101      	movs	r1, #1
   13ee8:	2000      	movs	r0, #0
   13eea:	f7fe f9cb 	bl	12284 <ticker_job_sched>
   13eee:	e7f7      	b.n	13ee0 <ticker_stop_adv_stop+0xb4>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
   13ef0:	2302      	movs	r3, #2
   13ef2:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   13ef4:	7c63      	ldrb	r3, [r4, #17]
   13ef6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   13efa:	b99b      	cbnz	r3, 13f24 <ticker_stop_adv_stop+0xf8>
   13efc:	4b56      	ldr	r3, [pc, #344]	; (14058 <ticker_stop_adv_stop+0x22c>)
   13efe:	681b      	ldr	r3, [r3, #0]
   13f00:	075a      	lsls	r2, r3, #29
   13f02:	d0b0      	beq.n	13e66 <ticker_stop_adv_stop+0x3a>
   13f04:	2301      	movs	r3, #1
   13f06:	f04f 0200 	mov.w	r2, #0
   13f0a:	f363 0202 	bfi	r2, r3, #0, #3
   13f0e:	f361 02c5 	bfi	r2, r1, #3, #3
   13f12:	4b53      	ldr	r3, [pc, #332]	; (14060 <ticker_stop_adv_stop+0x234>)
   13f14:	4951      	ldr	r1, [pc, #324]	; (1405c <ticker_stop_adv_stop+0x230>)
   13f16:	4857      	ldr	r0, [pc, #348]	; (14074 <ticker_stop_adv_stop+0x248>)
   13f18:	1a5b      	subs	r3, r3, r1
   13f1a:	08db      	lsrs	r3, r3, #3
   13f1c:	f363 128f 	bfi	r2, r3, #6, #10
   13f20:	4955      	ldr	r1, [pc, #340]	; (14078 <ticker_stop_adv_stop+0x24c>)
   13f22:	e79e      	b.n	13e62 <ticker_stop_adv_stop+0x36>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13f24:	ab03      	add	r3, sp, #12
   13f26:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
   13f28:	7460      	strb	r0, [r4, #17]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13f2a:	4611      	mov	r1, r2
   13f2c:	9300      	str	r3, [sp, #0]
   13f2e:	4b4f      	ldr	r3, [pc, #316]	; (1406c <ticker_stop_adv_stop+0x240>)
   13f30:	f7fe f8f6 	bl	12120 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   13f34:	2802      	cmp	r0, #2
   13f36:	d018      	beq.n	13f6a <ticker_stop_adv_stop+0x13e>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
   13f38:	9d03      	ldr	r5, [sp, #12]
   13f3a:	b31d      	cbz	r5, 13f84 <ticker_stop_adv_stop+0x158>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
   13f3c:	9c03      	ldr	r4, [sp, #12]
   13f3e:	2c01      	cmp	r4, #1
   13f40:	d155      	bne.n	13fee <ticker_stop_adv_stop+0x1c2>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   13f42:	2200      	movs	r2, #0
   13f44:	4b4d      	ldr	r3, [pc, #308]	; (1407c <ticker_stop_adv_stop+0x250>)
   13f46:	4611      	mov	r1, r2
   13f48:	4620      	mov	r0, r4
   13f4a:	f7fd fa97 	bl	1147c <mayfly_enqueue>
			LL_ASSERT(!ret);
   13f4e:	4605      	mov	r5, r0
   13f50:	2800      	cmp	r0, #0
   13f52:	d03b      	beq.n	13fcc <ticker_stop_adv_stop+0x1a0>
   13f54:	4b40      	ldr	r3, [pc, #256]	; (14058 <ticker_stop_adv_stop+0x22c>)
   13f56:	681b      	ldr	r3, [r3, #0]
   13f58:	075d      	lsls	r5, r3, #29
   13f5a:	d084      	beq.n	13e66 <ticker_stop_adv_stop+0x3a>
   13f5c:	f04f 0200 	mov.w	r2, #0
   13f60:	f364 0202 	bfi	r2, r4, #0, #3
			LL_ASSERT(!ret);
   13f64:	f36f 02c5 	bfc	r2, #3, #3
   13f68:	e027      	b.n	13fba <ticker_stop_adv_stop+0x18e>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   13f6a:	2201      	movs	r2, #1
   13f6c:	4611      	mov	r1, r2
   13f6e:	4610      	mov	r0, r2
   13f70:	f7fd fa5c 	bl	1142c <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
   13f74:	9b03      	ldr	r3, [sp, #12]
   13f76:	2b02      	cmp	r3, #2
   13f78:	d1de      	bne.n	13f38 <ticker_stop_adv_stop+0x10c>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   13f7a:	2101      	movs	r1, #1
   13f7c:	2000      	movs	r0, #0
   13f7e:	f7fe f981 	bl	12284 <ticker_job_sched>
   13f82:	e7f7      	b.n	13f74 <ticker_stop_adv_stop+0x148>
			u32_t ticks_xtal_to_start =
   13f84:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
   13f86:	69e2      	ldr	r2, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
   13f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   13f8c:	4293      	cmp	r3, r2
				ret = mayfly_enqueue(
   13f8e:	bf34      	ite	cc
   13f90:	4b3a      	ldrcc	r3, [pc, #232]	; (1407c <ticker_stop_adv_stop+0x250>)
				ret = mayfly_enqueue(
   13f92:	4b3b      	ldrcs	r3, [pc, #236]	; (14080 <ticker_stop_adv_stop+0x254>)
   13f94:	462a      	mov	r2, r5
   13f96:	4629      	mov	r1, r5
   13f98:	2001      	movs	r0, #1
   13f9a:	f7fd fa6f 	bl	1147c <mayfly_enqueue>
				LL_ASSERT(!ret);
   13f9e:	2800      	cmp	r0, #0
   13fa0:	d03a      	beq.n	14018 <ticker_stop_adv_stop+0x1ec>
   13fa2:	4b2d      	ldr	r3, [pc, #180]	; (14058 <ticker_stop_adv_stop+0x22c>)
   13fa4:	681b      	ldr	r3, [r3, #0]
   13fa6:	075b      	lsls	r3, r3, #29
   13fa8:	f43f af5d 	beq.w	13e66 <ticker_stop_adv_stop+0x3a>
   13fac:	f04f 0200 	mov.w	r2, #0
   13fb0:	2301      	movs	r3, #1
   13fb2:	f363 0202 	bfi	r2, r3, #0, #3
			LL_ASSERT(!ret);
   13fb6:	f365 02c5 	bfi	r2, r5, #3, #3
   13fba:	4928      	ldr	r1, [pc, #160]	; (1405c <ticker_stop_adv_stop+0x230>)
   13fbc:	4b28      	ldr	r3, [pc, #160]	; (14060 <ticker_stop_adv_stop+0x234>)
			LL_ASSERT(!ret);
   13fbe:	4831      	ldr	r0, [pc, #196]	; (14084 <ticker_stop_adv_stop+0x258>)
   13fc0:	1a5b      	subs	r3, r3, r1
   13fc2:	08db      	lsrs	r3, r3, #3
   13fc4:	f363 128f 	bfi	r2, r3, #6, #10
   13fc8:	492b      	ldr	r1, [pc, #172]	; (14078 <ticker_stop_adv_stop+0x24c>)
   13fca:	e74a      	b.n	13e62 <ticker_stop_adv_stop+0x36>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   13fcc:	4602      	mov	r2, r0
   13fce:	4601      	mov	r1, r0
   13fd0:	4b2b      	ldr	r3, [pc, #172]	; (14080 <ticker_stop_adv_stop+0x254>)
   13fd2:	4620      	mov	r0, r4
   13fd4:	f7fd fa52 	bl	1147c <mayfly_enqueue>
			LL_ASSERT(!ret);
   13fd8:	b1f0      	cbz	r0, 14018 <ticker_stop_adv_stop+0x1ec>
   13fda:	4b1f      	ldr	r3, [pc, #124]	; (14058 <ticker_stop_adv_stop+0x22c>)
   13fdc:	681b      	ldr	r3, [r3, #0]
   13fde:	0758      	lsls	r0, r3, #29
   13fe0:	f43f af41 	beq.w	13e66 <ticker_stop_adv_stop+0x3a>
   13fe4:	f04f 0200 	mov.w	r2, #0
   13fe8:	f364 0202 	bfi	r2, r4, #0, #3
   13fec:	e7e3      	b.n	13fb6 <ticker_stop_adv_stop+0x18a>
		LL_ASSERT(0);
   13fee:	4b1a      	ldr	r3, [pc, #104]	; (14058 <ticker_stop_adv_stop+0x22c>)
   13ff0:	681b      	ldr	r3, [r3, #0]
   13ff2:	075a      	lsls	r2, r3, #29
   13ff4:	f43f af37 	beq.w	13e66 <ticker_stop_adv_stop+0x3a>
   13ff8:	2301      	movs	r3, #1
   13ffa:	f04f 0200 	mov.w	r2, #0
   13ffe:	f363 0202 	bfi	r2, r3, #0, #3
   14002:	4916      	ldr	r1, [pc, #88]	; (1405c <ticker_stop_adv_stop+0x230>)
   14004:	4b16      	ldr	r3, [pc, #88]	; (14060 <ticker_stop_adv_stop+0x234>)
   14006:	4820      	ldr	r0, [pc, #128]	; (14088 <ticker_stop_adv_stop+0x25c>)
   14008:	1a5b      	subs	r3, r3, r1
   1400a:	f36f 02c5 	bfc	r2, #3, #3
   1400e:	08db      	lsrs	r3, r3, #3
   14010:	f363 128f 	bfi	r2, r3, #6, #10
   14014:	4918      	ldr	r1, [pc, #96]	; (14078 <ticker_stop_adv_stop+0x24c>)
   14016:	e724      	b.n	13e62 <ticker_stop_adv_stop+0x36>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   14018:	2200      	movs	r2, #0
   1401a:	4b1c      	ldr	r3, [pc, #112]	; (1408c <ticker_stop_adv_stop+0x260>)
   1401c:	4611      	mov	r1, r2
   1401e:	2001      	movs	r0, #1
   14020:	f7fd fa2c 	bl	1147c <mayfly_enqueue>
	LL_ASSERT(!retval);
   14024:	b1a0      	cbz	r0, 14050 <ticker_stop_adv_stop+0x224>
   14026:	4b0c      	ldr	r3, [pc, #48]	; (14058 <ticker_stop_adv_stop+0x22c>)
   14028:	681b      	ldr	r3, [r3, #0]
   1402a:	075b      	lsls	r3, r3, #29
   1402c:	f43f af1b 	beq.w	13e66 <ticker_stop_adv_stop+0x3a>
   14030:	2301      	movs	r3, #1
   14032:	f04f 0200 	mov.w	r2, #0
   14036:	f363 0202 	bfi	r2, r3, #0, #3
   1403a:	4908      	ldr	r1, [pc, #32]	; (1405c <ticker_stop_adv_stop+0x230>)
   1403c:	4b08      	ldr	r3, [pc, #32]	; (14060 <ticker_stop_adv_stop+0x234>)
   1403e:	4814      	ldr	r0, [pc, #80]	; (14090 <ticker_stop_adv_stop+0x264>)
   14040:	1a5b      	subs	r3, r3, r1
   14042:	f36f 02c5 	bfc	r2, #3, #3
   14046:	08db      	lsrs	r3, r3, #3
   14048:	f363 128f 	bfi	r2, r3, #6, #10
   1404c:	4906      	ldr	r1, [pc, #24]	; (14068 <ticker_stop_adv_stop+0x23c>)
   1404e:	e708      	b.n	13e62 <ticker_stop_adv_stop+0x36>
}
   14050:	b005      	add	sp, #20
   14052:	bd30      	pop	{r4, r5, pc}
   14054:	2000126c 	.word	0x2000126c
   14058:	2000e218 	.word	0x2000e218
   1405c:	0002ef38 	.word	0x0002ef38
   14060:	0002ef70 	.word	0x0002ef70
   14064:	0003376a 	.word	0x0003376a
   14068:	00032b85 	.word	0x00032b85
   1406c:	00012375 	.word	0x00012375
   14070:	2000dae4 	.word	0x2000dae4
   14074:	00033592 	.word	0x00033592
   14078:	00032b69 	.word	0x00032b69
   1407c:	2000dab4 	.word	0x2000dab4
   14080:	2000db74 	.word	0x2000db74
   14084:	000335e4 	.word	0x000335e4
   14088:	0003146d 	.word	0x0003146d
   1408c:	2000da84 	.word	0x2000da84
   14090:	000333ea 	.word	0x000333ea
   14094:	00000000 	.word	0x00000000

00014098 <sched_after_mstr_free_offset_get>:
{
   14098:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1409a:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
   1409c:	aa02      	add	r2, sp, #8
{
   1409e:	461c      	mov	r4, r3
   140a0:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
   140a2:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
   140a6:	3127      	adds	r1, #39	; 0x27
   140a8:	2001      	movs	r0, #1
   140aa:	f7ff f839 	bl	13120 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
   140ae:	6823      	ldr	r3, [r4, #0]
   140b0:	2b00      	cmp	r3, #0
   140b2:	d038      	beq.n	14126 <sched_after_mstr_free_offset_get+0x8e>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
   140b4:	9801      	ldr	r0, [sp, #4]
   140b6:	1b83      	subs	r3, r0, r6
   140b8:	021a      	lsls	r2, r3, #8
   140ba:	d51a      	bpl.n	140f2 <sched_after_mstr_free_offset_get+0x5a>
   140bc:	4b1e      	ldr	r3, [pc, #120]	; (14138 <sched_after_mstr_free_offset_get+0xa0>)
   140be:	681b      	ldr	r3, [r3, #0]
   140c0:	075b      	lsls	r3, r3, #29
   140c2:	d010      	beq.n	140e6 <sched_after_mstr_free_offset_get+0x4e>
   140c4:	2301      	movs	r3, #1
   140c6:	f04f 0200 	mov.w	r2, #0
   140ca:	f363 0202 	bfi	r2, r3, #0, #3
   140ce:	491b      	ldr	r1, [pc, #108]	; (1413c <sched_after_mstr_free_offset_get+0xa4>)
   140d0:	4b1b      	ldr	r3, [pc, #108]	; (14140 <sched_after_mstr_free_offset_get+0xa8>)
   140d2:	481c      	ldr	r0, [pc, #112]	; (14144 <sched_after_mstr_free_offset_get+0xac>)
   140d4:	1a5b      	subs	r3, r3, r1
   140d6:	f36f 02c5 	bfc	r2, #3, #3
   140da:	08db      	lsrs	r3, r3, #3
   140dc:	f363 128f 	bfi	r2, r3, #6, #10
   140e0:	4919      	ldr	r1, [pc, #100]	; (14148 <sched_after_mstr_free_offset_get+0xb0>)
   140e2:	f7ee f803 	bl	20ec <log_1>
   140e6:	4040      	eors	r0, r0
   140e8:	f380 8811 	msr	BASEPRI, r0
   140ec:	f04f 0004 	mov.w	r0, #4
   140f0:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
   140f2:	4631      	mov	r1, r6
   140f4:	f7fe f8de 	bl	122b4 <ticker_ticks_diff_get>
   140f8:	4602      	mov	r2, r0
   140fa:	4814      	ldr	r0, [pc, #80]	; (1414c <sched_after_mstr_free_offset_get+0xb4>)
   140fc:	2307      	movs	r3, #7
   140fe:	fba2 0100 	umull	r0, r1, r2, r0
   14102:	fb03 1102 	mla	r1, r3, r2, r1
   14106:	a30a      	add	r3, pc, #40	; (adr r3, 14130 <sched_after_mstr_free_offset_get+0x98>)
   14108:	e9d3 2300 	ldrd	r2, r3, [r3]
   1410c:	f7ec f8d2 	bl	2b4 <__aeabi_uldivmod>
   14110:	6823      	ldr	r3, [r4, #0]
   14112:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
   14114:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
   14116:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
   14118:	db05      	blt.n	14126 <sched_after_mstr_free_offset_get+0x8e>
		u32_t conn_interval_us = conn_interval * 1250;
   1411a:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1411e:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
   14120:	6823      	ldr	r3, [r4, #0]
   14122:	4283      	cmp	r3, r0
   14124:	d801      	bhi.n	1412a <sched_after_mstr_free_offset_get+0x92>
}
   14126:	b002      	add	sp, #8
   14128:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
   1412a:	1a1b      	subs	r3, r3, r0
   1412c:	6023      	str	r3, [r4, #0]
   1412e:	e7f7      	b.n	14120 <sched_after_mstr_free_offset_get+0x88>
   14130:	3b9aca00 	.word	0x3b9aca00
   14134:	00000000 	.word	0x00000000
   14138:	2000e218 	.word	0x2000e218
   1413c:	0002ef38 	.word	0x0002ef38
   14140:	0002ef70 	.word	0x0002ef70
   14144:	00033662 	.word	0x00033662
   14148:	00032ab0 	.word	0x00032ab0
   1414c:	1afd498d 	.word	0x1afd498d

00014150 <mayfly_sched_win_offset_use>:
{
   14150:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
   14152:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
   14156:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
   14158:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   1415c:	68c1      	ldr	r1, [r0, #12]
   1415e:	8c80      	ldrh	r0, [r0, #36]	; 0x24
   14160:	f7ff ff9a 	bl	14098 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   14164:	a902      	add	r1, sp, #8
   14166:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   1416a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   1416e:	f240 42e2 	movw	r2, #1250	; 0x4e2
   14172:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   14176:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   14178:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   1417c:	f7f2 fd84 	bl	6c88 <memcpy>
}
   14180:	b002      	add	sp, #8
   14182:	bd10      	pop	{r4, pc}

00014184 <mayfly_sched_after_mstr_free_offset_get>:
{
   14184:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   14186:	4c05      	ldr	r4, [pc, #20]	; (1419c <mayfly_sched_after_mstr_free_offset_get+0x18>)
   14188:	4602      	mov	r2, r0
   1418a:	f504 7382 	add.w	r3, r4, #260	; 0x104
   1418e:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
   14192:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
   14196:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   14198:	f7ff bf7e 	b.w	14098 <sched_after_mstr_free_offset_get>
   1419c:	2000126c 	.word	0x2000126c

000141a0 <mayfly_adv_stop>:
{
   141a0:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
   141a2:	2001      	movs	r0, #1
   141a4:	f7fe f92e 	bl	12404 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
   141a8:	4604      	mov	r4, r0
   141aa:	b9d0      	cbnz	r0, 141e2 <mayfly_adv_stop+0x42>
   141ac:	4b15      	ldr	r3, [pc, #84]	; (14204 <mayfly_adv_stop+0x64>)
   141ae:	681b      	ldr	r3, [r3, #0]
   141b0:	075b      	lsls	r3, r3, #29
   141b2:	d010      	beq.n	141d6 <mayfly_adv_stop+0x36>
   141b4:	2301      	movs	r3, #1
   141b6:	f04f 0200 	mov.w	r2, #0
   141ba:	f363 0202 	bfi	r2, r3, #0, #3
   141be:	4912      	ldr	r1, [pc, #72]	; (14208 <mayfly_adv_stop+0x68>)
   141c0:	4b12      	ldr	r3, [pc, #72]	; (1420c <mayfly_adv_stop+0x6c>)
   141c2:	1a5b      	subs	r3, r3, r1
   141c4:	f360 02c5 	bfi	r2, r0, #3, #3
   141c8:	08db      	lsrs	r3, r3, #3
   141ca:	f363 128f 	bfi	r2, r3, #6, #10
   141ce:	4910      	ldr	r1, [pc, #64]	; (14210 <mayfly_adv_stop+0x70>)
   141d0:	4810      	ldr	r0, [pc, #64]	; (14214 <mayfly_adv_stop+0x74>)
   141d2:	f7ed ff8b 	bl	20ec <log_1>
   141d6:	4040      	eors	r0, r0
   141d8:	f380 8811 	msr	BASEPRI, r0
   141dc:	f04f 0004 	mov.w	r0, #4
   141e0:	df02      	svc	2
	node_rx->hdr.handle = 0xffff;
   141e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   141e6:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   141e8:	2306      	movs	r3, #6
   141ea:	7103      	strb	r3, [r0, #4]
	(void)memset(radio_le_conn_cmplt, 0x00,
   141ec:	221d      	movs	r2, #29
   141ee:	2100      	movs	r1, #0
   141f0:	3008      	adds	r0, #8
   141f2:	f7f2 fd76 	bl	6ce2 <memset>
	radio_le_conn_cmplt->status = BT_HCI_ERR_ADV_TIMEOUT;
   141f6:	233c      	movs	r3, #60	; 0x3c
   141f8:	7223      	strb	r3, [r4, #8]
}
   141fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
   141fe:	f7ff b863 	b.w	132c8 <packet_rx_enqueue>
   14202:	bf00      	nop
   14204:	2000e218 	.word	0x2000e218
   14208:	0002ef38 	.word	0x0002ef38
   1420c:	0002ef70 	.word	0x0002ef70
   14210:	00032b59 	.word	0x00032b59
   14214:	00033346 	.word	0x00033346

00014218 <terminate_ind_rx_enqueue>:
{
   14218:	4603      	mov	r3, r0
   1421a:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
   1421c:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
   14220:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
{
   14224:	b510      	push	{r4, lr}
	LL_ASSERT(node_rx->hdr.onion.link);
   14226:	b9d0      	cbnz	r0, 1425e <terminate_ind_rx_enqueue+0x46>
   14228:	4b22      	ldr	r3, [pc, #136]	; (142b4 <terminate_ind_rx_enqueue+0x9c>)
   1422a:	681b      	ldr	r3, [r3, #0]
   1422c:	075a      	lsls	r2, r3, #29
   1422e:	d010      	beq.n	14252 <terminate_ind_rx_enqueue+0x3a>
   14230:	2301      	movs	r3, #1
   14232:	f04f 0200 	mov.w	r2, #0
   14236:	f363 0202 	bfi	r2, r3, #0, #3
   1423a:	491f      	ldr	r1, [pc, #124]	; (142b8 <terminate_ind_rx_enqueue+0xa0>)
   1423c:	4b1f      	ldr	r3, [pc, #124]	; (142bc <terminate_ind_rx_enqueue+0xa4>)
   1423e:	1a5b      	subs	r3, r3, r1
   14240:	f360 02c5 	bfi	r2, r0, #3, #3
   14244:	08db      	lsrs	r3, r3, #3
   14246:	491e      	ldr	r1, [pc, #120]	; (142c0 <terminate_ind_rx_enqueue+0xa8>)
   14248:	481e      	ldr	r0, [pc, #120]	; (142c4 <terminate_ind_rx_enqueue+0xac>)
   1424a:	f363 128f 	bfi	r2, r3, #6, #10
	LL_ASSERT(link);
   1424e:	f7ed ff4d 	bl	20ec <log_1>
   14252:	4040      	eors	r0, r0
   14254:	f380 8811 	msr	BASEPRI, r0
   14258:	f04f 0004 	mov.w	r0, #4
   1425c:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
   1425e:	8c1c      	ldrh	r4, [r3, #32]
   14260:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
   14264:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   14268:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
   1426a:	4a17      	ldr	r2, [pc, #92]	; (142c8 <terminate_ind_rx_enqueue+0xb0>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1426c:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
   14270:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
   14274:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
   14278:	f502 72a8 	add.w	r2, r2, #336	; 0x150
   1427c:	f7fd f88f 	bl	1139e <memq_enqueue>
	LL_ASSERT(link);
   14280:	b998      	cbnz	r0, 142aa <terminate_ind_rx_enqueue+0x92>
   14282:	4b0c      	ldr	r3, [pc, #48]	; (142b4 <terminate_ind_rx_enqueue+0x9c>)
   14284:	681b      	ldr	r3, [r3, #0]
   14286:	075b      	lsls	r3, r3, #29
   14288:	d0e3      	beq.n	14252 <terminate_ind_rx_enqueue+0x3a>
   1428a:	2301      	movs	r3, #1
   1428c:	f04f 0200 	mov.w	r2, #0
   14290:	f363 0202 	bfi	r2, r3, #0, #3
   14294:	4908      	ldr	r1, [pc, #32]	; (142b8 <terminate_ind_rx_enqueue+0xa0>)
   14296:	4b09      	ldr	r3, [pc, #36]	; (142bc <terminate_ind_rx_enqueue+0xa4>)
   14298:	1a5b      	subs	r3, r3, r1
   1429a:	f360 02c5 	bfi	r2, r0, #3, #3
   1429e:	08db      	lsrs	r3, r3, #3
   142a0:	f363 128f 	bfi	r2, r3, #6, #10
   142a4:	4906      	ldr	r1, [pc, #24]	; (142c0 <terminate_ind_rx_enqueue+0xa8>)
   142a6:	4809      	ldr	r0, [pc, #36]	; (142cc <terminate_ind_rx_enqueue+0xb4>)
   142a8:	e7d1      	b.n	1424e <terminate_ind_rx_enqueue+0x36>
}
   142aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
   142ae:	f006 be03 	b.w	1aeb8 <radio_event_callback>
   142b2:	bf00      	nop
   142b4:	2000e218 	.word	0x2000e218
   142b8:	0002ef38 	.word	0x0002ef38
   142bc:	0002ef70 	.word	0x0002ef70
   142c0:	00032ccd 	.word	0x00032ccd
   142c4:	000336e2 	.word	0x000336e2
   142c8:	2000126c 	.word	0x2000126c
   142cc:	00032d65 	.word	0x00032d65

000142d0 <prepare_normal_set>:
{
   142d0:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
   142d2:	6803      	ldr	r3, [r0, #0]
   142d4:	2b00      	cmp	r3, #0
{
   142d6:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
   142d8:	da33      	bge.n	14342 <prepare_normal_set+0x72>
		u32_t ticks_prepare_to_start =
   142da:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
   142de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   142e2:	42a5      	cmp	r5, r4
   142e4:	bf34      	ite	cc
   142e6:	1b1b      	subcc	r3, r3, r4
   142e8:	1b5b      	subcs	r3, r3, r5
		ticker_status =
   142ea:	2400      	movs	r4, #0
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   142ec:	b29b      	uxth	r3, r3
		ticker_status =
   142ee:	9006      	str	r0, [sp, #24]
   142f0:	4815      	ldr	r0, [pc, #84]	; (14348 <prepare_normal_set+0x78>)
   142f2:	9005      	str	r0, [sp, #20]
   142f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
   142f8:	9300      	str	r3, [sp, #0]
   142fa:	e9cd 4403 	strd	r4, r4, [sp, #12]
   142fe:	4623      	mov	r3, r4
   14300:	4620      	mov	r0, r4
   14302:	f7fd fec3 	bl	1208c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14306:	f030 0302 	bics.w	r3, r0, #2
   1430a:	d01a      	beq.n	14342 <prepare_normal_set+0x72>
   1430c:	4b0f      	ldr	r3, [pc, #60]	; (1434c <prepare_normal_set+0x7c>)
   1430e:	681b      	ldr	r3, [r3, #0]
   14310:	075b      	lsls	r3, r3, #29
   14312:	d010      	beq.n	14336 <prepare_normal_set+0x66>
   14314:	2301      	movs	r3, #1
   14316:	f04f 0200 	mov.w	r2, #0
   1431a:	f363 0202 	bfi	r2, r3, #0, #3
   1431e:	490c      	ldr	r1, [pc, #48]	; (14350 <prepare_normal_set+0x80>)
   14320:	4b0c      	ldr	r3, [pc, #48]	; (14354 <prepare_normal_set+0x84>)
   14322:	480d      	ldr	r0, [pc, #52]	; (14358 <prepare_normal_set+0x88>)
   14324:	1a5b      	subs	r3, r3, r1
   14326:	f364 02c5 	bfi	r2, r4, #3, #3
   1432a:	08db      	lsrs	r3, r3, #3
   1432c:	f363 128f 	bfi	r2, r3, #6, #10
   14330:	490a      	ldr	r1, [pc, #40]	; (1435c <prepare_normal_set+0x8c>)
   14332:	f7ed fedb 	bl	20ec <log_1>
   14336:	4040      	eors	r0, r0
   14338:	f380 8811 	msr	BASEPRI, r0
   1433c:	f04f 0004 	mov.w	r0, #4
   14340:	df02      	svc	2
}
   14342:	b009      	add	sp, #36	; 0x24
   14344:	bd30      	pop	{r4, r5, pc}
   14346:	bf00      	nop
   14348:	00012395 	.word	0x00012395
   1434c:	2000e218 	.word	0x2000e218
   14350:	0002ef38 	.word	0x0002ef38
   14354:	0002ef70 	.word	0x0002ef70
   14358:	00032d7f 	.word	0x00032d7f
   1435c:	00032a68 	.word	0x00032a68

00014360 <mayfly_xtal_stop_calc>:
{
   14360:	e92d 4870 	stmdb	sp!, {r4, r5, r6, fp, lr}
   14364:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   14366:	2302      	movs	r3, #2
   14368:	9309      	str	r3, [sp, #36]	; 0x24
	struct connection *conn_curr = NULL;
   1436a:	2300      	movs	r3, #0
	struct connection *conn_next = NULL;
   1436c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
	ticker_id_next = 0xff;
   14370:	22ff      	movs	r2, #255	; 0xff
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   14372:	4e99      	ldr	r6, [pc, #612]	; (145d8 <mayfly_xtal_stop_calc+0x278>)
				    _radio.connection_count));
   14374:	4d99      	ldr	r5, [pc, #612]	; (145dc <mayfly_xtal_stop_calc+0x27c>)
	ticker_id_next = 0xff;
   14376:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
{
   1437a:	4604      	mov	r4, r0
	ticks_to_expire = 0;
   1437c:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   1437e:	ab09      	add	r3, sp, #36	; 0x24
   14380:	e9cd 6301 	strd	r6, r3, [sp, #4]
   14384:	ab0c      	add	r3, sp, #48	; 0x30
   14386:	9300      	str	r3, [sp, #0]
   14388:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   1438c:	ab0d      	add	r3, sp, #52	; 0x34
   1438e:	2101      	movs	r1, #1
   14390:	2000      	movs	r0, #0
   14392:	f7fd feff 	bl	12194 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   14396:	2802      	cmp	r0, #2
   14398:	d020      	beq.n	143dc <mayfly_xtal_stop_calc+0x7c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   1439a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1439c:	b313      	cbz	r3, 143e4 <mayfly_xtal_stop_calc+0x84>
   1439e:	4b90      	ldr	r3, [pc, #576]	; (145e0 <mayfly_xtal_stop_calc+0x280>)
   143a0:	681b      	ldr	r3, [r3, #0]
   143a2:	0758      	lsls	r0, r3, #29
   143a4:	d010      	beq.n	143c8 <mayfly_xtal_stop_calc+0x68>
   143a6:	2301      	movs	r3, #1
   143a8:	f04f 0200 	mov.w	r2, #0
   143ac:	f363 0202 	bfi	r2, r3, #0, #3
   143b0:	498c      	ldr	r1, [pc, #560]	; (145e4 <mayfly_xtal_stop_calc+0x284>)
   143b2:	4b8d      	ldr	r3, [pc, #564]	; (145e8 <mayfly_xtal_stop_calc+0x288>)
   143b4:	488d      	ldr	r0, [pc, #564]	; (145ec <mayfly_xtal_stop_calc+0x28c>)
   143b6:	1a5b      	subs	r3, r3, r1
   143b8:	f36f 02c5 	bfc	r2, #3, #3
   143bc:	08db      	lsrs	r3, r3, #3
   143be:	498c      	ldr	r1, [pc, #560]	; (145f0 <mayfly_xtal_stop_calc+0x290>)
   143c0:	f363 128f 	bfi	r2, r3, #6, #10
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   143c4:	f7ed fe92 	bl	20ec <log_1>
   143c8:	4040      	eors	r0, r0
   143ca:	f380 8811 	msr	BASEPRI, r0
   143ce:	f04f 0004 	mov.w	r0, #4
   143d2:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   143d4:	2101      	movs	r1, #1
   143d6:	2000      	movs	r0, #0
   143d8:	f7fd ff54 	bl	12284 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   143dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   143de:	2b02      	cmp	r3, #2
   143e0:	d0f8      	beq.n	143d4 <mayfly_xtal_stop_calc+0x74>
   143e2:	e7da      	b.n	1439a <mayfly_xtal_stop_calc+0x3a>
	} while (ticker_id_next != TICKER_NULL &&
   143e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
   143e8:	2bff      	cmp	r3, #255	; 0xff
   143ea:	d004      	beq.n	143f6 <mayfly_xtal_stop_calc+0x96>
   143ec:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   143f0:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
   143f2:	4293      	cmp	r3, r2
   143f4:	dac3      	bge.n	1437e <mayfly_xtal_stop_calc+0x1e>
	if ((ticker_id_next == TICKER_NULL) ||
   143f6:	1f5a      	subs	r2, r3, #5
   143f8:	b2d2      	uxtb	r2, r2
   143fa:	2af9      	cmp	r2, #249	; 0xf9
   143fc:	d805      	bhi.n	1440a <mayfly_xtal_stop_calc+0xaa>
				_radio.connection_count))) {
   143fe:	4a77      	ldr	r2, [pc, #476]	; (145dc <mayfly_xtal_stop_calc+0x27c>)
   14400:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   14404:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
   14406:	4293      	cmp	r3, r2
   14408:	db06      	blt.n	14418 <mayfly_xtal_stop_calc+0xb8>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   1440a:	2100      	movs	r1, #0
   1440c:	2001      	movs	r0, #1
   1440e:	f7fe fbc5 	bl	12b9c <mayfly_xtal_retain>
}
   14412:	b00f      	add	sp, #60	; 0x3c
   14414:	e8bd 8870 	ldmia.w	sp!, {r4, r5, r6, fp, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
   14418:	a90a      	add	r1, sp, #40	; 0x28
   1441a:	b2e0      	uxtb	r0, r4
   1441c:	f7ff f9d2 	bl	137c4 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
   14420:	b998      	cbnz	r0, 1444a <mayfly_xtal_stop_calc+0xea>
   14422:	4b6f      	ldr	r3, [pc, #444]	; (145e0 <mayfly_xtal_stop_calc+0x280>)
   14424:	681b      	ldr	r3, [r3, #0]
   14426:	0759      	lsls	r1, r3, #29
   14428:	d0ce      	beq.n	143c8 <mayfly_xtal_stop_calc+0x68>
   1442a:	2301      	movs	r3, #1
   1442c:	f04f 0200 	mov.w	r2, #0
   14430:	f363 0202 	bfi	r2, r3, #0, #3
   14434:	496b      	ldr	r1, [pc, #428]	; (145e4 <mayfly_xtal_stop_calc+0x284>)
   14436:	4b6c      	ldr	r3, [pc, #432]	; (145e8 <mayfly_xtal_stop_calc+0x288>)
   14438:	1a5b      	subs	r3, r3, r1
   1443a:	f360 02c5 	bfi	r2, r0, #3, #3
   1443e:	08db      	lsrs	r3, r3, #3
   14440:	f363 128f 	bfi	r2, r3, #6, #10
   14444:	496a      	ldr	r1, [pc, #424]	; (145f0 <mayfly_xtal_stop_calc+0x290>)
   14446:	486b      	ldr	r0, [pc, #428]	; (145f4 <mayfly_xtal_stop_calc+0x294>)
   14448:	e7bc      	b.n	143c4 <mayfly_xtal_stop_calc+0x64>
   1444a:	e9d0 3400 	ldrd	r3, r4, [r0]
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
   1444e:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
   14450:	bfb8      	it	lt
   14452:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
   14454:	429c      	cmp	r4, r3
   14456:	bf38      	it	cc
   14458:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
   1445a:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   1445c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   14460:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
   14462:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   14464:	f7ff f9ae 	bl	137c4 <hdr_conn_get>
	LL_ASSERT(hdr_next);
   14468:	4605      	mov	r5, r0
   1446a:	b998      	cbnz	r0, 14494 <mayfly_xtal_stop_calc+0x134>
   1446c:	4b5c      	ldr	r3, [pc, #368]	; (145e0 <mayfly_xtal_stop_calc+0x280>)
   1446e:	681b      	ldr	r3, [r3, #0]
   14470:	075a      	lsls	r2, r3, #29
   14472:	d0a9      	beq.n	143c8 <mayfly_xtal_stop_calc+0x68>
   14474:	2301      	movs	r3, #1
   14476:	f04f 0200 	mov.w	r2, #0
   1447a:	f363 0202 	bfi	r2, r3, #0, #3
   1447e:	4959      	ldr	r1, [pc, #356]	; (145e4 <mayfly_xtal_stop_calc+0x284>)
   14480:	4b59      	ldr	r3, [pc, #356]	; (145e8 <mayfly_xtal_stop_calc+0x288>)
   14482:	1a5b      	subs	r3, r3, r1
   14484:	f360 02c5 	bfi	r2, r0, #3, #3
   14488:	08db      	lsrs	r3, r3, #3
   1448a:	f363 128f 	bfi	r2, r3, #6, #10
   1448e:	4958      	ldr	r1, [pc, #352]	; (145f0 <mayfly_xtal_stop_calc+0x290>)
   14490:	4859      	ldr	r0, [pc, #356]	; (145f8 <mayfly_xtal_stop_calc+0x298>)
   14492:	e797      	b.n	143c4 <mayfly_xtal_stop_calc+0x64>
	ticks_prepare_to_start_next =
   14494:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   14498:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
   1449a:	429e      	cmp	r6, r3
   1449c:	bf38      	it	cc
   1449e:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   144a0:	2a00      	cmp	r2, #0
   144a2:	da05      	bge.n	144b0 <mayfly_xtal_stop_calc+0x150>
		ticks_to_expire -=
   144a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
   144a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
   144aa:	4433      	add	r3, r6
   144ac:	1a9b      	subs	r3, r3, r2
   144ae:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
   144b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
   144b2:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
   144b6:	4293      	cmp	r3, r2
   144b8:	d20a      	bcs.n	144d0 <mayfly_xtal_stop_calc+0x170>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   144ba:	2100      	movs	r1, #0
   144bc:	2001      	movs	r0, #1
   144be:	f7fe fb6d 	bl	12b9c <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
   144c2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   144c6:	2101      	movs	r1, #1
   144c8:	4628      	mov	r0, r5
   144ca:	f7ff ff01 	bl	142d0 <prepare_normal_set>
   144ce:	e7a0      	b.n	14412 <mayfly_xtal_stop_calc+0xb2>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   144d0:	2101      	movs	r1, #1
   144d2:	4608      	mov	r0, r1
   144d4:	f7fe fb62 	bl	12b9c <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
   144d8:	682b      	ldr	r3, [r5, #0]
   144da:	2b00      	cmp	r3, #0
   144dc:	db2a      	blt.n	14534 <mayfly_xtal_stop_calc+0x1d4>
   144de:	42b3      	cmp	r3, r6
   144e0:	d928      	bls.n	14534 <mayfly_xtal_stop_calc+0x1d4>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
   144e2:	1b9b      	subs	r3, r3, r6
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   144e4:	b29b      	uxth	r3, r3
			ticker_status =
   144e6:	9506      	str	r5, [sp, #24]
   144e8:	4944      	ldr	r1, [pc, #272]	; (145fc <mayfly_xtal_stop_calc+0x29c>)
   144ea:	9105      	str	r1, [sp, #20]
   144ec:	2500      	movs	r5, #0
   144ee:	e9cd 5301 	strd	r5, r3, [sp, #4]
   144f2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   144f6:	9500      	str	r5, [sp, #0]
   144f8:	e9cd 5503 	strd	r5, r5, [sp, #12]
   144fc:	2101      	movs	r1, #1
   144fe:	4628      	mov	r0, r5
   14500:	f7fd fdc4 	bl	1208c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14504:	f030 0302 	bics.w	r3, r0, #2
   14508:	d014      	beq.n	14534 <mayfly_xtal_stop_calc+0x1d4>
   1450a:	4b35      	ldr	r3, [pc, #212]	; (145e0 <mayfly_xtal_stop_calc+0x280>)
   1450c:	681b      	ldr	r3, [r3, #0]
   1450e:	075b      	lsls	r3, r3, #29
   14510:	f43f af5a 	beq.w	143c8 <mayfly_xtal_stop_calc+0x68>
   14514:	2301      	movs	r3, #1
   14516:	f04f 0200 	mov.w	r2, #0
   1451a:	f363 0202 	bfi	r2, r3, #0, #3
   1451e:	4931      	ldr	r1, [pc, #196]	; (145e4 <mayfly_xtal_stop_calc+0x284>)
   14520:	4b31      	ldr	r3, [pc, #196]	; (145e8 <mayfly_xtal_stop_calc+0x288>)
   14522:	4837      	ldr	r0, [pc, #220]	; (14600 <mayfly_xtal_stop_calc+0x2a0>)
   14524:	1a5b      	subs	r3, r3, r1
   14526:	f365 02c5 	bfi	r2, r5, #3, #3
   1452a:	08db      	lsrs	r3, r3, #3
   1452c:	f363 128f 	bfi	r2, r3, #6, #10
   14530:	492f      	ldr	r1, [pc, #188]	; (145f0 <mayfly_xtal_stop_calc+0x290>)
   14532:	e747      	b.n	143c4 <mayfly_xtal_stop_calc+0x64>
		if (!conn_curr || !conn_next) {
   14534:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   14536:	2e00      	cmp	r6, #0
   14538:	f43f af6b 	beq.w	14412 <mayfly_xtal_stop_calc+0xb2>
   1453c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1453e:	2d00      	cmp	r5, #0
   14540:	f43f af67 	beq.w	14412 <mayfly_xtal_stop_calc+0xb2>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
   14544:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
   14546:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   14548:	429a      	cmp	r2, r3
   1454a:	f47f af62 	bne.w	14412 <mayfly_xtal_stop_calc+0xb2>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
   1454e:	482d      	ldr	r0, [pc, #180]	; (14604 <mayfly_xtal_stop_calc+0x2a4>)
   14550:	fa1f fb82 	uxth.w	fp, r2
   14554:	fbab 0100 	umull	r0, r1, fp, r0
   14558:	f240 1323 	movw	r3, #291	; 0x123
   1455c:	fb03 110b 	mla	r1, r3, fp, r1
   14560:	a31b      	add	r3, pc, #108	; (adr r3, 145d0 <mayfly_xtal_stop_calc+0x270>)
   14562:	e9d3 2300 	ldrd	r2, r3, [r3]
   14566:	f7eb fea5 	bl	2b4 <__aeabi_uldivmod>
   1456a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1456c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
   14570:	2200      	movs	r2, #0
   14572:	4283      	cmp	r3, r0
   14574:	d818      	bhi.n	145a8 <mayfly_xtal_stop_calc+0x248>
   14576:	b102      	cbz	r2, 1457a <mayfly_xtal_stop_calc+0x21a>
   14578:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
   1457a:	f996 101d 	ldrsb.w	r1, [r6, #29]
   1457e:	f995 201d 	ldrsb.w	r2, [r5, #29]
   14582:	2900      	cmp	r1, #0
   14584:	da13      	bge.n	145ae <mayfly_xtal_stop_calc+0x24e>
   14586:	2a00      	cmp	r2, #0
   14588:	f6ff af43 	blt.w	14412 <mayfly_xtal_stop_calc+0xb2>
			     (ticks_slot_abs +
   1458c:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
   1458e:	42a3      	cmp	r3, r4
   14590:	f4bf af3f 	bcs.w	14412 <mayfly_xtal_stop_calc+0xb2>
				status = conn_update_req(conn_curr);
   14594:	4630      	mov	r0, r6
   14596:	f7fd ff47 	bl	12428 <conn_update_req>
				if (status == 2) {
   1459a:	2802      	cmp	r0, #2
   1459c:	f47f af39 	bne.w	14412 <mayfly_xtal_stop_calc+0xb2>
					conn_update_req(conn_next);
   145a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
   145a2:	f7fd ff41 	bl	12428 <conn_update_req>
   145a6:	e734      	b.n	14412 <mayfly_xtal_stop_calc+0xb2>
				ticks_to_expire -= ticks_conn_interval;
   145a8:	1a1b      	subs	r3, r3, r0
   145aa:	2201      	movs	r2, #1
   145ac:	e7e1      	b.n	14572 <mayfly_xtal_stop_calc+0x212>
			} else if (!conn_curr->role && conn_next->role &&
   145ae:	2a00      	cmp	r2, #0
   145b0:	f6bf af2f 	bge.w	14412 <mayfly_xtal_stop_calc+0xb2>
				    (ticks_slot_abs +
   145b4:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
   145b6:	42a3      	cmp	r3, r4
   145b8:	f4bf af2b 	bcs.w	14412 <mayfly_xtal_stop_calc+0xb2>
				status = conn_update_req(conn_next);
   145bc:	4628      	mov	r0, r5
   145be:	f7fd ff33 	bl	12428 <conn_update_req>
				if (status == 2) {
   145c2:	2802      	cmp	r0, #2
   145c4:	f47f af25 	bne.w	14412 <mayfly_xtal_stop_calc+0xb2>
					conn_update_req(conn_curr);
   145c8:	980a      	ldr	r0, [sp, #40]	; 0x28
   145ca:	e7ea      	b.n	145a2 <mayfly_xtal_stop_calc+0x242>
   145cc:	f3af 8000 	nop.w
   145d0:	1afd498d 	.word	0x1afd498d
   145d4:	00000007 	.word	0x00000007
   145d8:	00012375 	.word	0x00012375
   145dc:	2000126c 	.word	0x2000126c
   145e0:	2000e218 	.word	0x2000e218
   145e4:	0002ef38 	.word	0x0002ef38
   145e8:	0002ef70 	.word	0x0002ef70
   145ec:	000336af 	.word	0x000336af
   145f0:	00032a7b 	.word	0x00032a7b
   145f4:	00033407 	.word	0x00033407
   145f8:	00033425 	.word	0x00033425
   145fc:	00012389 	.word	0x00012389
   14600:	00032d7f 	.word	0x00032d7f
   14604:	09ce5400 	.word	0x09ce5400

00014608 <preempt_calc>:
{
   14608:	b570      	push	{r4, r5, r6, lr}
   1460a:	4614      	mov	r4, r2
   1460c:	460e      	mov	r6, r1
   1460e:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   14610:	f7fd fe4e 	bl	122b0 <ticker_ticks_now_get>
	u32_t diff =
   14614:	4621      	mov	r1, r4
   14616:	f7fd fe4d 	bl	122b4 <ticker_ticks_diff_get>
	diff += 3;
   1461a:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   1461c:	2c09      	cmp	r4, #9
   1461e:	d90f      	bls.n	14640 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   14620:	2100      	movs	r1, #0
   14622:	4608      	mov	r0, r1
   14624:	f7fe faba 	bl	12b9c <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   14628:	4632      	mov	r2, r6
   1462a:	2100      	movs	r1, #0
   1462c:	4628      	mov	r0, r5
   1462e:	f7ff fe4f 	bl	142d0 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   14632:	68ab      	ldr	r3, [r5, #8]
   14634:	441c      	add	r4, r3
		if (diff <
   14636:	2c26      	cmp	r4, #38	; 0x26
   14638:	d800      	bhi.n	1463c <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
   1463a:	60ac      	str	r4, [r5, #8]
		return 1;
   1463c:	2001      	movs	r0, #1
   1463e:	e000      	b.n	14642 <preempt_calc+0x3a>
	return 0;
   14640:	2000      	movs	r0, #0
}
   14642:	bd70      	pop	{r4, r5, r6, pc}

00014644 <adv_scan_configure.constprop.32>:
static void adv_scan_configure(u8_t phy, u8_t flags)
   14644:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
   14646:	ad02      	add	r5, sp, #8
   14648:	4b10      	ldr	r3, [pc, #64]	; (1468c <adv_scan_configure.constprop.32+0x48>)
   1464a:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
   1464e:	4604      	mov	r4, r0
	radio_reset();
   14650:	f00a f866 	bl	1e720 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   14654:	2000      	movs	r0, #0
   14656:	f00a f88d 	bl	1e774 <radio_tx_power_set>
	radio_isr_set(isr);
   1465a:	480d      	ldr	r0, [pc, #52]	; (14690 <adv_scan_configure.constprop.32+0x4c>)
   1465c:	f00a f82a 	bl	1e6b4 <radio_isr_set>
	radio_phy_set(phy, flags);
   14660:	2101      	movs	r1, #1
   14662:	4620      	mov	r0, r4
   14664:	f00a f876 	bl	1e754 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   14668:	4628      	mov	r0, r5
   1466a:	f00a f8a1 	bl	1e7b0 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   1466e:	0062      	lsls	r2, r4, #1
   14670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   14674:	2125      	movs	r1, #37	; 0x25
   14676:	2008      	movs	r0, #8
   14678:	f00a f8b2 	bl	1e7e0 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1467c:	4905      	ldr	r1, [pc, #20]	; (14694 <adv_scan_configure.constprop.32+0x50>)
   1467e:	f240 605b 	movw	r0, #1627	; 0x65b
   14682:	f00a f93d 	bl	1e900 <radio_crc_configure>
}
   14686:	b003      	add	sp, #12
   14688:	bd30      	pop	{r4, r5, pc}
   1468a:	bf00      	nop
   1468c:	8e89bed6 	.word	0x8e89bed6
   14690:	00017d49 	.word	0x00017d49
   14694:	00555555 	.word	0x00555555

00014698 <event_scan>:
{
   14698:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   1469a:	4b7b      	ldr	r3, [pc, #492]	; (14888 <event_scan+0x1f0>)
   1469c:	7d1a      	ldrb	r2, [r3, #20]
{
   1469e:	b08d      	sub	sp, #52	; 0x34
   146a0:	4606      	mov	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   146a2:	f002 05ff 	and.w	r5, r2, #255	; 0xff
   146a6:	461c      	mov	r4, r3
   146a8:	b1d2      	cbz	r2, 146e0 <event_scan+0x48>
   146aa:	4b78      	ldr	r3, [pc, #480]	; (1488c <event_scan+0x1f4>)
   146ac:	681b      	ldr	r3, [r3, #0]
   146ae:	0758      	lsls	r0, r3, #29
   146b0:	d010      	beq.n	146d4 <event_scan+0x3c>
   146b2:	2301      	movs	r3, #1
   146b4:	f04f 0200 	mov.w	r2, #0
   146b8:	f363 0202 	bfi	r2, r3, #0, #3
   146bc:	4974      	ldr	r1, [pc, #464]	; (14890 <event_scan+0x1f8>)
   146be:	4b75      	ldr	r3, [pc, #468]	; (14894 <event_scan+0x1fc>)
   146c0:	4875      	ldr	r0, [pc, #468]	; (14898 <event_scan+0x200>)
   146c2:	1a5b      	subs	r3, r3, r1
   146c4:	f36f 02c5 	bfc	r2, #3, #3
   146c8:	08db      	lsrs	r3, r3, #3
   146ca:	4974      	ldr	r1, [pc, #464]	; (1489c <event_scan+0x204>)
   146cc:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   146d0:	f7ed fd0c 	bl	20ec <log_1>
   146d4:	4040      	eors	r0, r0
   146d6:	f380 8811 	msr	BASEPRI, r0
   146da:	f04f 0004 	mov.w	r0, #4
   146de:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   146e0:	7c5b      	ldrb	r3, [r3, #17]
   146e2:	b2db      	uxtb	r3, r3
   146e4:	2b06      	cmp	r3, #6
   146e6:	d013      	beq.n	14710 <event_scan+0x78>
   146e8:	4b68      	ldr	r3, [pc, #416]	; (1488c <event_scan+0x1f4>)
   146ea:	681b      	ldr	r3, [r3, #0]
   146ec:	0759      	lsls	r1, r3, #29
   146ee:	d0f1      	beq.n	146d4 <event_scan+0x3c>
   146f0:	2301      	movs	r3, #1
   146f2:	f04f 0200 	mov.w	r2, #0
   146f6:	f363 0202 	bfi	r2, r3, #0, #3
   146fa:	4965      	ldr	r1, [pc, #404]	; (14890 <event_scan+0x1f8>)
   146fc:	4b65      	ldr	r3, [pc, #404]	; (14894 <event_scan+0x1fc>)
   146fe:	4868      	ldr	r0, [pc, #416]	; (148a0 <event_scan+0x208>)
   14700:	1a5b      	subs	r3, r3, r1
   14702:	f365 02c5 	bfi	r2, r5, #3, #3
   14706:	08db      	lsrs	r3, r3, #3
   14708:	f363 128f 	bfi	r2, r3, #6, #10
   1470c:	4963      	ldr	r1, [pc, #396]	; (1489c <event_scan+0x204>)
   1470e:	e7df      	b.n	146d0 <event_scan+0x38>
	_radio.role = ROLE_SCAN;
   14710:	2202      	movs	r2, #2
   14712:	7522      	strb	r2, [r4, #20]
	_radio.ticks_anchor = ticks_at_expire;
   14714:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
   14716:	7465      	strb	r5, [r4, #17]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   14718:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   1471c:	74a3      	strb	r3, [r4, #18]
	_radio.scanner.state = 0;
   1471e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
   14722:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
   14724:	f365 0341 	bfi	r3, r5, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   14728:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
   1472c:	7562      	strb	r2, [r4, #21]
	_radio.scanner.state = 0;
   1472e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   14732:	f7ff ff87 	bl	14644 <adv_scan_configure.constprop.32>
	chan_set(37 + _radio.scanner.chan++);
   14736:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1473a:	f3c3 0081 	ubfx	r0, r3, #2, #2
   1473e:	1c42      	adds	r2, r0, #1
   14740:	f362 0383 	bfi	r3, r2, #2, #2
   14744:	3025      	adds	r0, #37	; 0x25
   14746:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   1474a:	f7ff fac3 	bl	13cd4 <chan_set>
	if (_radio.scanner.chan == 3) {
   1474e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   14752:	f003 020c 	and.w	r2, r3, #12
   14756:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
   14758:	bf08      	it	eq
   1475a:	f365 0383 	bfieq	r3, r5, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
   1475e:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
   14762:	bf08      	it	eq
   14764:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
   14768:	f00a f984 	bl	1ea74 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1476c:	2300      	movs	r3, #0
   1476e:	4619      	mov	r1, r3
   14770:	461a      	mov	r2, r3
   14772:	4618      	mov	r0, r3
   14774:	f00a f8ee 	bl	1e954 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   14778:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1477c:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   14780:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   14784:	3008      	adds	r0, #8
   14786:	f00a f859 	bl	1e83c <radio_pkt_rx_set>
	radio_rssi_measure();
   1478a:	f00a f8fb 	bl	1e984 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
   1478e:	f009 fa35 	bl	1dbfc <ctrl_rl_enabled>
   14792:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   14796:	b340      	cbz	r0, 147ea <event_scan+0x152>
		struct ll_filter *filter =
   14798:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1479c:	f008 ffec 	bl	1d778 <ctrl_filter_get>
   147a0:	4605      	mov	r5, r0
		u8_t count, *irks = ctrl_irks_get(&count);
   147a2:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   147a6:	f008 febb 	bl	1d520 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   147aa:	7869      	ldrb	r1, [r5, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
   147ac:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
   147ae:	1caa      	adds	r2, r5, #2
   147b0:	7828      	ldrb	r0, [r5, #0]
   147b2:	f00a f909 	bl	1e9c8 <radio_filter_configure>
		radio_ar_configure(count, irks);
   147b6:	4639      	mov	r1, r7
   147b8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   147bc:	f00a fae0 	bl	1ed80 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   147c0:	68e2      	ldr	r2, [r4, #12]
   147c2:	f106 0109 	add.w	r1, r6, #9
   147c6:	2000      	movs	r0, #0
   147c8:	f00a f960 	bl	1ea8c <radio_tmr_start>
	radio_tmr_end_capture();
   147cc:	f00a fa30 	bl	1ec30 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   147d0:	4632      	mov	r2, r6
   147d2:	2106      	movs	r1, #6
   147d4:	4833      	ldr	r0, [pc, #204]	; (148a4 <event_scan+0x20c>)
   147d6:	f7ff ff17 	bl	14608 <preempt_calc>
   147da:	4605      	mov	r5, r0
   147dc:	b188      	cbz	r0, 14802 <event_scan+0x16a>
		_radio.state = STATE_STOP;
   147de:	2304      	movs	r3, #4
   147e0:	7563      	strb	r3, [r4, #21]
		radio_disable();
   147e2:	f00a f851 	bl	1e888 <radio_disable>
}
   147e6:	b00d      	add	sp, #52	; 0x34
   147e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
   147ea:	f013 0f30 	tst.w	r3, #48	; 0x30
   147ee:	d0e7      	beq.n	147c0 <event_scan+0x128>
		struct ll_filter *wl = ctrl_filter_get(true);
   147f0:	2001      	movs	r0, #1
   147f2:	f008 ffc1 	bl	1d778 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   147f6:	1c82      	adds	r2, r0, #2
   147f8:	7841      	ldrb	r1, [r0, #1]
   147fa:	7800      	ldrb	r0, [r0, #0]
   147fc:	f00a f8e4 	bl	1e9c8 <radio_filter_configure>
   14800:	e7de      	b.n	147c0 <event_scan+0x128>
		ret = ticker_start(
   14802:	f641 13b4 	movw	r3, #6580	; 0x19b4
   14806:	9308      	str	r3, [sp, #32]
   14808:	4b27      	ldr	r3, [pc, #156]	; (148a8 <event_scan+0x210>)
   1480a:	9307      	str	r3, [sp, #28]
   1480c:	4b27      	ldr	r3, [pc, #156]	; (148ac <event_scan+0x214>)
   1480e:	9001      	str	r0, [sp, #4]
   14810:	e9cd 0304 	strd	r0, r3, [sp, #16]
   14814:	e9cd 0002 	strd	r0, r0, [sp, #8]
   14818:	2204      	movs	r2, #4
   1481a:	9206      	str	r2, [sp, #24]
   1481c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   14820:	3309      	adds	r3, #9
   14822:	9300      	str	r3, [sp, #0]
   14824:	4601      	mov	r1, r0
   14826:	4633      	mov	r3, r6
   14828:	f7fd fbe6 	bl	11ff8 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1482c:	f030 0402 	bics.w	r4, r0, #2
   14830:	d014      	beq.n	1485c <event_scan+0x1c4>
   14832:	4b16      	ldr	r3, [pc, #88]	; (1488c <event_scan+0x1f4>)
   14834:	681b      	ldr	r3, [r3, #0]
   14836:	075a      	lsls	r2, r3, #29
   14838:	f43f af4c 	beq.w	146d4 <event_scan+0x3c>
   1483c:	f04f 0200 	mov.w	r2, #0
   14840:	2301      	movs	r3, #1
   14842:	f363 0202 	bfi	r2, r3, #0, #3
   14846:	f365 02c5 	bfi	r2, r5, #3, #3
   1484a:	4911      	ldr	r1, [pc, #68]	; (14890 <event_scan+0x1f8>)
   1484c:	4b11      	ldr	r3, [pc, #68]	; (14894 <event_scan+0x1fc>)
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1484e:	4818      	ldr	r0, [pc, #96]	; (148b0 <event_scan+0x218>)
   14850:	1a5b      	subs	r3, r3, r1
   14852:	08db      	lsrs	r3, r3, #3
   14854:	f363 128f 	bfi	r2, r3, #6, #10
   14858:	4910      	ldr	r1, [pc, #64]	; (1489c <event_scan+0x204>)
   1485a:	e739      	b.n	146d0 <event_scan+0x38>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   1485c:	4623      	mov	r3, r4
   1485e:	4a15      	ldr	r2, [pc, #84]	; (148b4 <event_scan+0x21c>)
   14860:	4621      	mov	r1, r4
   14862:	4620      	mov	r0, r4
   14864:	f7fd fcd4 	bl	12210 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14868:	f030 0302 	bics.w	r3, r0, #2
   1486c:	d0bb      	beq.n	147e6 <event_scan+0x14e>
   1486e:	4b07      	ldr	r3, [pc, #28]	; (1488c <event_scan+0x1f4>)
   14870:	681b      	ldr	r3, [r3, #0]
   14872:	075b      	lsls	r3, r3, #29
   14874:	f43f af2e 	beq.w	146d4 <event_scan+0x3c>
   14878:	f04f 0200 	mov.w	r2, #0
   1487c:	2301      	movs	r3, #1
   1487e:	f363 0202 	bfi	r2, r3, #0, #3
   14882:	f364 02c5 	bfi	r2, r4, #3, #3
   14886:	e7e0      	b.n	1484a <event_scan+0x1b2>
   14888:	2000126c 	.word	0x2000126c
   1488c:	2000e218 	.word	0x2000e218
   14890:	0002ef38 	.word	0x0002ef38
   14894:	0002ef70 	.word	0x0002ef70
   14898:	00032e9e 	.word	0x00032e9e
   1489c:	00032bbc 	.word	0x00032bbc
   148a0:	00032ecc 	.word	0x00032ecc
   148a4:	2000133c 	.word	0x2000133c
   148a8:	0001351d 	.word	0x0001351d
   148ac:	0001384d 	.word	0x0001384d
   148b0:	00032eff 	.word	0x00032eff
   148b4:	000137ad 	.word	0x000137ad

000148b8 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   148b8:	4b4c      	ldr	r3, [pc, #304]	; (149ec <event_adv+0x134>)
   148ba:	7d1a      	ldrb	r2, [r3, #20]
{
   148bc:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   148be:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
   148c2:	4605      	mov	r5, r0
   148c4:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   148c6:	b1d2      	cbz	r2, 148fe <event_adv+0x46>
   148c8:	4b49      	ldr	r3, [pc, #292]	; (149f0 <event_adv+0x138>)
   148ca:	681b      	ldr	r3, [r3, #0]
   148cc:	0759      	lsls	r1, r3, #29
   148ce:	d010      	beq.n	148f2 <event_adv+0x3a>
   148d0:	2301      	movs	r3, #1
   148d2:	f04f 0200 	mov.w	r2, #0
   148d6:	f363 0202 	bfi	r2, r3, #0, #3
   148da:	4946      	ldr	r1, [pc, #280]	; (149f4 <event_adv+0x13c>)
   148dc:	4b46      	ldr	r3, [pc, #280]	; (149f8 <event_adv+0x140>)
   148de:	4847      	ldr	r0, [pc, #284]	; (149fc <event_adv+0x144>)
   148e0:	1a5b      	subs	r3, r3, r1
   148e2:	f36f 02c5 	bfc	r2, #3, #3
   148e6:	08db      	lsrs	r3, r3, #3
   148e8:	4945      	ldr	r1, [pc, #276]	; (14a00 <event_adv+0x148>)
   148ea:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   148ee:	f7ed fbfd 	bl	20ec <log_1>
   148f2:	4040      	eors	r0, r0
   148f4:	f380 8811 	msr	BASEPRI, r0
   148f8:	f04f 0004 	mov.w	r0, #4
   148fc:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   148fe:	7c5b      	ldrb	r3, [r3, #17]
   14900:	b2db      	uxtb	r3, r3
   14902:	2b05      	cmp	r3, #5
   14904:	d013      	beq.n	1492e <event_adv+0x76>
   14906:	4b3a      	ldr	r3, [pc, #232]	; (149f0 <event_adv+0x138>)
   14908:	681b      	ldr	r3, [r3, #0]
   1490a:	075a      	lsls	r2, r3, #29
   1490c:	d0f1      	beq.n	148f2 <event_adv+0x3a>
   1490e:	2301      	movs	r3, #1
   14910:	f04f 0200 	mov.w	r2, #0
   14914:	f363 0202 	bfi	r2, r3, #0, #3
   14918:	f361 02c5 	bfi	r2, r1, #3, #3
   1491c:	4b36      	ldr	r3, [pc, #216]	; (149f8 <event_adv+0x140>)
   1491e:	4935      	ldr	r1, [pc, #212]	; (149f4 <event_adv+0x13c>)
   14920:	4838      	ldr	r0, [pc, #224]	; (14a04 <event_adv+0x14c>)
   14922:	1a5b      	subs	r3, r3, r1
   14924:	08db      	lsrs	r3, r3, #3
   14926:	f363 128f 	bfi	r2, r3, #6, #10
   1492a:	4935      	ldr	r1, [pc, #212]	; (14a00 <event_adv+0x148>)
   1492c:	e7df      	b.n	148ee <event_adv+0x36>
	_radio.ticks_anchor = ticks_at_expire;
   1492e:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   14930:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
   14934:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   14936:	f000 0007 	and.w	r0, r0, #7
	_radio.role = ROLE_ADV;
   1493a:	7526      	strb	r6, [r4, #20]
	_radio.ticker_id_prepare = 0;
   1493c:	7461      	strb	r1, [r4, #17]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   1493e:	74a3      	strb	r3, [r4, #18]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   14940:	f7ff fe80 	bl	14644 <adv_scan_configure.constprop.32>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   14944:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   14948:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   1494c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   14950:	f363 0202 	bfi	r2, r3, #0, #3
   14954:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
   14958:	f7ff f9fe 	bl	13d58 <adv_setup>
	if (ctrl_rl_enabled()) {
   1495c:	f009 f94e 	bl	1dbfc <ctrl_rl_enabled>
   14960:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   14964:	b300      	cbz	r0, 149a8 <event_adv+0xf0>
			ctrl_filter_get(!!(_radio.advertiser.filter_policy));
   14966:	f013 0fc0 	tst.w	r3, #192	; 0xc0
		struct ll_filter *filter =
   1496a:	bf14      	ite	ne
   1496c:	4630      	movne	r0, r6
   1496e:	2000      	moveq	r0, #0
		struct ll_filter *wl = ctrl_filter_get(true);
   14970:	f008 ff02 	bl	1d778 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   14974:	1c82      	adds	r2, r0, #2
   14976:	7841      	ldrb	r1, [r0, #1]
   14978:	7800      	ldrb	r0, [r0, #0]
   1497a:	f00a f825 	bl	1e9c8 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
   1497e:	f105 0109 	add.w	r1, r5, #9
   14982:	68e2      	ldr	r2, [r4, #12]
   14984:	2001      	movs	r0, #1
   14986:	f00a f881 	bl	1ea8c <radio_tmr_start>
	radio_tmr_end_capture();
   1498a:	f00a f951 	bl	1ec30 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   1498e:	462a      	mov	r2, r5
   14990:	2105      	movs	r1, #5
   14992:	481d      	ldr	r0, [pc, #116]	; (14a08 <event_adv+0x150>)
   14994:	f7ff fe38 	bl	14608 <preempt_calc>
   14998:	4605      	mov	r5, r0
   1499a:	b150      	cbz	r0, 149b2 <event_adv+0xfa>
		_radio.state = STATE_STOP;
   1499c:	2304      	movs	r3, #4
   1499e:	7563      	strb	r3, [r4, #21]
}
   149a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
   149a4:	f009 bf70 	b.w	1e888 <radio_disable>
	if (_radio.advertiser.filter_policy) {
   149a8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   149ac:	d0e7      	beq.n	1497e <event_adv+0xc6>
		struct ll_filter *wl = ctrl_filter_get(true);
   149ae:	4630      	mov	r0, r6
   149b0:	e7de      	b.n	14970 <event_adv+0xb8>
		ticker_status =
   149b2:	4603      	mov	r3, r0
   149b4:	4a15      	ldr	r2, [pc, #84]	; (14a0c <event_adv+0x154>)
   149b6:	4601      	mov	r1, r0
   149b8:	f7fd fc2a 	bl	12210 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   149bc:	f030 0302 	bics.w	r3, r0, #2
   149c0:	d013      	beq.n	149ea <event_adv+0x132>
   149c2:	4b0b      	ldr	r3, [pc, #44]	; (149f0 <event_adv+0x138>)
   149c4:	681b      	ldr	r3, [r3, #0]
   149c6:	075b      	lsls	r3, r3, #29
   149c8:	d093      	beq.n	148f2 <event_adv+0x3a>
   149ca:	2301      	movs	r3, #1
   149cc:	f04f 0200 	mov.w	r2, #0
   149d0:	f363 0202 	bfi	r2, r3, #0, #3
   149d4:	4907      	ldr	r1, [pc, #28]	; (149f4 <event_adv+0x13c>)
   149d6:	4b08      	ldr	r3, [pc, #32]	; (149f8 <event_adv+0x140>)
   149d8:	480d      	ldr	r0, [pc, #52]	; (14a10 <event_adv+0x158>)
   149da:	1a5b      	subs	r3, r3, r1
   149dc:	f365 02c5 	bfi	r2, r5, #3, #3
   149e0:	08db      	lsrs	r3, r3, #3
   149e2:	f363 128f 	bfi	r2, r3, #6, #10
   149e6:	4906      	ldr	r1, [pc, #24]	; (14a00 <event_adv+0x148>)
   149e8:	e781      	b.n	148ee <event_adv+0x36>
}
   149ea:	bd70      	pop	{r4, r5, r6, pc}
   149ec:	2000126c 	.word	0x2000126c
   149f0:	2000e218 	.word	0x2000e218
   149f4:	0002ef38 	.word	0x0002ef38
   149f8:	0002ef70 	.word	0x0002ef70
   149fc:	00032e9e 	.word	0x00032e9e
   14a00:	00032b4f 	.word	0x00032b4f
   14a04:	00032dc1 	.word	0x00032dc1
   14a08:	20001284 	.word	0x20001284
   14a0c:	000137ad 	.word	0x000137ad
   14a10:	00032d7f 	.word	0x00032d7f

00014a14 <event_stop.constprop.33>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
   14a14:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   14a16:	4b05      	ldr	r3, [pc, #20]	; (14a2c <event_stop.constprop.33+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   14a18:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
   14a1a:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   14a1c:	4611      	mov	r1, r2
   14a1e:	4610      	mov	r0, r2
   14a20:	f7fc fd2c 	bl	1147c <mayfly_enqueue>
	LL_ASSERT(!retval);
   14a24:	b108      	cbz	r0, 14a2a <event_stop.constprop.33+0x16>
   14a26:	f7fe feeb 	bl	13800 <event_stop.part.11>
}
   14a2a:	bd08      	pop	{r3, pc}
   14a2c:	2000dad4 	.word	0x2000dad4

00014a30 <event_common_prepare>:
{
   14a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   14a34:	6814      	ldr	r4, [r2, #0]
{
   14a36:	b08d      	sub	sp, #52	; 0x34
   14a38:	469b      	mov	fp, r3
	if (_ticks_xtal_to_start & XON_BITMASK) {
   14a3a:	2c00      	cmp	r4, #0
{
   14a3c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   14a40:	910b      	str	r1, [sp, #44]	; 0x2c
   14a42:	4682      	mov	sl, r0
   14a44:	4691      	mov	r9, r2
   14a46:	930a      	str	r3, [sp, #40]	; 0x28
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   14a48:	f8db 6000 	ldr.w	r6, [fp]
	if (_ticks_xtal_to_start & XON_BITMASK) {
   14a4c:	da03      	bge.n	14a56 <event_common_prepare+0x26>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
   14a4e:	9c16      	ldr	r4, [sp, #88]	; 0x58
   14a50:	42b4      	cmp	r4, r6
   14a52:	bf38      	it	cc
   14a54:	4634      	movcc	r4, r6
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   14a56:	42b4      	cmp	r4, r6
   14a58:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 14c30 <event_common_prepare+0x200>
   14a5c:	d931      	bls.n	14ac2 <event_common_prepare+0x92>
		ticker_status =
   14a5e:	f241 53ad 	movw	r3, #5549	; 0x15ad
   14a62:	e9cd 8307 	strd	r8, r3, [sp, #28]
   14a66:	4b68      	ldr	r3, [pc, #416]	; (14c08 <event_common_prepare+0x1d8>)
   14a68:	2500      	movs	r5, #0
   14a6a:	e9cd 5304 	strd	r5, r3, [sp, #16]
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   14a6e:	1ba3      	subs	r3, r4, r6
		ticker_status =
   14a70:	9300      	str	r3, [sp, #0]
   14a72:	9506      	str	r5, [sp, #24]
   14a74:	4653      	mov	r3, sl
   14a76:	e9cd 5502 	strd	r5, r5, [sp, #8]
   14a7a:	9501      	str	r5, [sp, #4]
   14a7c:	2201      	movs	r2, #1
   14a7e:	4629      	mov	r1, r5
   14a80:	4628      	mov	r0, r5
   14a82:	f7fd fab9 	bl	11ff8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14a86:	f030 0302 	bics.w	r3, r0, #2
   14a8a:	d041      	beq.n	14b10 <event_common_prepare+0xe0>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14a8c:	4b5f      	ldr	r3, [pc, #380]	; (14c0c <event_common_prepare+0x1dc>)
   14a8e:	681b      	ldr	r3, [r3, #0]
   14a90:	0759      	lsls	r1, r3, #29
   14a92:	d010      	beq.n	14ab6 <event_common_prepare+0x86>
   14a94:	f04f 0200 	mov.w	r2, #0
   14a98:	2301      	movs	r3, #1
   14a9a:	f363 0202 	bfi	r2, r3, #0, #3
   14a9e:	f365 02c5 	bfi	r2, r5, #3, #3
   14aa2:	495b      	ldr	r1, [pc, #364]	; (14c10 <event_common_prepare+0x1e0>)
   14aa4:	4b5b      	ldr	r3, [pc, #364]	; (14c14 <event_common_prepare+0x1e4>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14aa6:	485c      	ldr	r0, [pc, #368]	; (14c18 <event_common_prepare+0x1e8>)
   14aa8:	1a5b      	subs	r3, r3, r1
   14aaa:	08db      	lsrs	r3, r3, #3
   14aac:	495b      	ldr	r1, [pc, #364]	; (14c1c <event_common_prepare+0x1ec>)
   14aae:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(!retval);
   14ab2:	f7ed fb1b 	bl	20ec <log_1>
   14ab6:	4040      	eors	r0, r0
   14ab8:	f380 8811 	msr	BASEPRI, r0
   14abc:	f04f 0004 	mov.w	r0, #4
   14ac0:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   14ac2:	d21e      	bcs.n	14b02 <event_common_prepare+0xd2>
		event_active(0, 0, 0, NULL);
   14ac4:	2300      	movs	r3, #0
   14ac6:	461a      	mov	r2, r3
   14ac8:	4619      	mov	r1, r3
   14aca:	4618      	mov	r0, r3
   14acc:	f7fe fece 	bl	1386c <event_active>
		ticker_status =
   14ad0:	f241 53c2 	movw	r3, #5570	; 0x15c2
   14ad4:	e9cd 8307 	strd	r8, r3, [sp, #28]
   14ad8:	4b51      	ldr	r3, [pc, #324]	; (14c20 <event_common_prepare+0x1f0>)
   14ada:	2500      	movs	r5, #0
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   14adc:	1b34      	subs	r4, r6, r4
		ticker_status =
   14ade:	e9cd 5304 	strd	r5, r3, [sp, #16]
   14ae2:	9506      	str	r5, [sp, #24]
   14ae4:	4653      	mov	r3, sl
   14ae6:	e9cd 5502 	strd	r5, r5, [sp, #8]
   14aea:	e9cd 4500 	strd	r4, r5, [sp]
   14aee:	2201      	movs	r2, #1
   14af0:	4629      	mov	r1, r5
   14af2:	4628      	mov	r0, r5
   14af4:	f7fd fa80 	bl	11ff8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14af8:	f030 0302 	bics.w	r3, r0, #2
   14afc:	d1c6      	bne.n	14a8c <event_common_prepare+0x5c>
   14afe:	4634      	mov	r4, r6
   14b00:	e00b      	b.n	14b1a <event_common_prepare+0xea>
		event_active(0, 0, 0, NULL);
   14b02:	2300      	movs	r3, #0
   14b04:	461a      	mov	r2, r3
   14b06:	4619      	mov	r1, r3
   14b08:	4618      	mov	r0, r3
   14b0a:	f7fe feaf 	bl	1386c <event_active>
		event_xtal(0, 0, 0, NULL);
   14b0e:	2300      	movs	r3, #0
   14b10:	461a      	mov	r2, r3
   14b12:	4619      	mov	r1, r3
   14b14:	4618      	mov	r0, r3
   14b16:	f7fe fed9 	bl	138cc <event_xtal>
	_radio.remainder_anchor = remainder;
   14b1a:	4f42      	ldr	r7, [pc, #264]	; (14c24 <event_common_prepare+0x1f4>)
   14b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14b1e:	60fb      	str	r3, [r7, #12]
	ticker_status =
   14b20:	f241 53da 	movw	r3, #5594	; 0x15da
   14b24:	e9cd 8307 	strd	r8, r3, [sp, #28]
   14b28:	9b19      	ldr	r3, [sp, #100]	; 0x64
   14b2a:	9306      	str	r3, [sp, #24]
   14b2c:	2500      	movs	r5, #0
   14b2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14b30:	9305      	str	r3, [sp, #20]
   14b32:	e9cd 5503 	strd	r5, r5, [sp, #12]
   14b36:	4653      	mov	r3, sl
   14b38:	e9cd 5501 	strd	r5, r5, [sp, #4]
   14b3c:	9400      	str	r4, [sp, #0]
   14b3e:	462a      	mov	r2, r5
   14b40:	4629      	mov	r1, r5
   14b42:	4628      	mov	r0, r5
   14b44:	f7fd fa58 	bl	11ff8 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14b48:	f030 0302 	bics.w	r3, r0, #2
   14b4c:	d19e      	bne.n	14a8c <event_common_prepare+0x5c>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   14b4e:	2005      	movs	r0, #5
   14b50:	f7ff ff60 	bl	14a14 <event_stop.constprop.33>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   14b54:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
   14b58:	42b3      	cmp	r3, r6
   14b5a:	d030      	beq.n	14bbe <event_common_prepare+0x18e>
		*ticks_active_to_start = _radio.ticks_active_to_start;
   14b5c:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
   14b60:	f8d9 3000 	ldr.w	r3, [r9]
   14b64:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
   14b66:	bfbc      	itt	lt
   14b68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   14b6c:	f8c9 3000 	strlt.w	r3, [r9]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
   14b70:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
   14b74:	f8d9 2000 	ldr.w	r2, [r9]
   14b78:	428a      	cmp	r2, r1
   14b7a:	bf38      	it	cc
   14b7c:	460a      	movcc	r2, r1
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14b7e:	b2a3      	uxth	r3, r4
   14b80:	b292      	uxth	r2, r2
		ticker_status =
   14b82:	2400      	movs	r4, #0
   14b84:	f241 6108 	movw	r1, #5640	; 0x1608
   14b88:	e9cd 2301 	strd	r2, r3, [sp, #4]
   14b8c:	e9cd 8105 	strd	r8, r1, [sp, #20]
   14b90:	9200      	str	r2, [sp, #0]
   14b92:	e9cd 4403 	strd	r4, r4, [sp, #12]
   14b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14b98:	4621      	mov	r1, r4
   14b9a:	4620      	mov	r0, r4
   14b9c:	f7fd fa76 	bl	1208c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14ba0:	f030 0302 	bics.w	r3, r0, #2
   14ba4:	d00b      	beq.n	14bbe <event_common_prepare+0x18e>
   14ba6:	4b19      	ldr	r3, [pc, #100]	; (14c0c <event_common_prepare+0x1dc>)
   14ba8:	681b      	ldr	r3, [r3, #0]
   14baa:	075a      	lsls	r2, r3, #29
   14bac:	d083      	beq.n	14ab6 <event_common_prepare+0x86>
   14bae:	f04f 0200 	mov.w	r2, #0
   14bb2:	2301      	movs	r3, #1
   14bb4:	f363 0202 	bfi	r2, r3, #0, #3
   14bb8:	f364 02c5 	bfi	r2, r4, #3, #3
   14bbc:	e771      	b.n	14aa2 <event_common_prepare+0x72>
	packet_tx_enqueue(0xFF);
   14bbe:	20ff      	movs	r0, #255	; 0xff
   14bc0:	f7fe ff76 	bl	13ab0 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   14bc4:	4b18      	ldr	r3, [pc, #96]	; (14c28 <event_common_prepare+0x1f8>)
   14bc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14bc8:	609a      	str	r2, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   14bca:	2201      	movs	r2, #1
   14bcc:	4611      	mov	r1, r2
   14bce:	2000      	movs	r0, #0
   14bd0:	f7fc fc54 	bl	1147c <mayfly_enqueue>
		LL_ASSERT(!retval);
   14bd4:	b1a0      	cbz	r0, 14c00 <event_common_prepare+0x1d0>
   14bd6:	4b0d      	ldr	r3, [pc, #52]	; (14c0c <event_common_prepare+0x1dc>)
   14bd8:	681b      	ldr	r3, [r3, #0]
   14bda:	075b      	lsls	r3, r3, #29
   14bdc:	f43f af6b 	beq.w	14ab6 <event_common_prepare+0x86>
   14be0:	2301      	movs	r3, #1
   14be2:	f04f 0200 	mov.w	r2, #0
   14be6:	f363 0202 	bfi	r2, r3, #0, #3
   14bea:	4909      	ldr	r1, [pc, #36]	; (14c10 <event_common_prepare+0x1e0>)
   14bec:	4b09      	ldr	r3, [pc, #36]	; (14c14 <event_common_prepare+0x1e4>)
   14bee:	480f      	ldr	r0, [pc, #60]	; (14c2c <event_common_prepare+0x1fc>)
   14bf0:	1a5b      	subs	r3, r3, r1
   14bf2:	f36f 02c5 	bfc	r2, #3, #3
   14bf6:	08db      	lsrs	r3, r3, #3
   14bf8:	f363 128f 	bfi	r2, r3, #6, #10
   14bfc:	4907      	ldr	r1, [pc, #28]	; (14c1c <event_common_prepare+0x1ec>)
   14bfe:	e758      	b.n	14ab2 <event_common_prepare+0x82>
}
   14c00:	b00d      	add	sp, #52	; 0x34
   14c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c06:	bf00      	nop
   14c08:	0001386d 	.word	0x0001386d
   14c0c:	2000e218 	.word	0x2000e218
   14c10:	0002ef38 	.word	0x0002ef38
   14c14:	0002ef70 	.word	0x0002ef70
   14c18:	00032d7f 	.word	0x00032d7f
   14c1c:	00032b09 	.word	0x00032b09
   14c20:	000138cd 	.word	0x000138cd
   14c24:	2000126c 	.word	0x2000126c
   14c28:	2000db94 	.word	0x2000db94
   14c2c:	000333ea 	.word	0x000333ea
   14c30:	0001351d 	.word	0x0001351d

00014c34 <radio_event_adv_prepare>:
{
   14c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   14c36:	4a17      	ldr	r2, [pc, #92]	; (14c94 <radio_event_adv_prepare+0x60>)
   14c38:	7c53      	ldrb	r3, [r2, #17]
   14c3a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   14c3e:	b1d3      	cbz	r3, 14c76 <radio_event_adv_prepare+0x42>
   14c40:	4b15      	ldr	r3, [pc, #84]	; (14c98 <radio_event_adv_prepare+0x64>)
   14c42:	681b      	ldr	r3, [r3, #0]
   14c44:	075b      	lsls	r3, r3, #29
   14c46:	d010      	beq.n	14c6a <radio_event_adv_prepare+0x36>
   14c48:	2301      	movs	r3, #1
   14c4a:	f04f 0200 	mov.w	r2, #0
   14c4e:	f363 0202 	bfi	r2, r3, #0, #3
   14c52:	4912      	ldr	r1, [pc, #72]	; (14c9c <radio_event_adv_prepare+0x68>)
   14c54:	4b12      	ldr	r3, [pc, #72]	; (14ca0 <radio_event_adv_prepare+0x6c>)
   14c56:	4813      	ldr	r0, [pc, #76]	; (14ca4 <radio_event_adv_prepare+0x70>)
   14c58:	1a5b      	subs	r3, r3, r1
   14c5a:	f36f 02c5 	bfc	r2, #3, #3
   14c5e:	08db      	lsrs	r3, r3, #3
   14c60:	f363 128f 	bfi	r2, r3, #6, #10
   14c64:	4910      	ldr	r1, [pc, #64]	; (14ca8 <radio_event_adv_prepare+0x74>)
   14c66:	f7ed fa41 	bl	20ec <log_1>
   14c6a:	4040      	eors	r0, r0
   14c6c:	f380 8811 	msr	BASEPRI, r0
   14c70:	f04f 0004 	mov.w	r0, #4
   14c74:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   14c76:	2305      	movs	r3, #5
   14c78:	7453      	strb	r3, [r2, #17]
	event_common_prepare(ticks_at_expire, remainder,
   14c7a:	9403      	str	r4, [sp, #12]
   14c7c:	4c0b      	ldr	r4, [pc, #44]	; (14cac <radio_event_adv_prepare+0x78>)
   14c7e:	e9cd 3401 	strd	r3, r4, [sp, #4]
   14c82:	6a13      	ldr	r3, [r2, #32]
   14c84:	9300      	str	r3, [sp, #0]
   14c86:	f102 031c 	add.w	r3, r2, #28
   14c8a:	3218      	adds	r2, #24
   14c8c:	f7ff fed0 	bl	14a30 <event_common_prepare>
}
   14c90:	b004      	add	sp, #16
   14c92:	bd10      	pop	{r4, pc}
   14c94:	2000126c 	.word	0x2000126c
   14c98:	2000e218 	.word	0x2000e218
   14c9c:	0002ef38 	.word	0x0002ef38
   14ca0:	0002ef70 	.word	0x0002ef70
   14ca4:	000334de 	.word	0x000334de
   14ca8:	00032b37 	.word	0x00032b37
   14cac:	000148b9 	.word	0x000148b9

00014cb0 <event_scan_prepare>:
{
   14cb0:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   14cb2:	4c30      	ldr	r4, [pc, #192]	; (14d74 <event_scan_prepare+0xc4>)
   14cb4:	7c63      	ldrb	r3, [r4, #17]
{
   14cb6:	b085      	sub	sp, #20
   14cb8:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
   14cba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   14cbe:	b1d3      	cbz	r3, 14cf6 <event_scan_prepare+0x46>
   14cc0:	4b2d      	ldr	r3, [pc, #180]	; (14d78 <event_scan_prepare+0xc8>)
   14cc2:	681b      	ldr	r3, [r3, #0]
   14cc4:	075a      	lsls	r2, r3, #29
   14cc6:	d010      	beq.n	14cea <event_scan_prepare+0x3a>
   14cc8:	2301      	movs	r3, #1
   14cca:	f04f 0200 	mov.w	r2, #0
   14cce:	f363 0202 	bfi	r2, r3, #0, #3
   14cd2:	492a      	ldr	r1, [pc, #168]	; (14d7c <event_scan_prepare+0xcc>)
   14cd4:	4b2a      	ldr	r3, [pc, #168]	; (14d80 <event_scan_prepare+0xd0>)
   14cd6:	482b      	ldr	r0, [pc, #172]	; (14d84 <event_scan_prepare+0xd4>)
   14cd8:	1a5b      	subs	r3, r3, r1
   14cda:	f36f 02c5 	bfc	r2, #3, #3
   14cde:	08db      	lsrs	r3, r3, #3
   14ce0:	4929      	ldr	r1, [pc, #164]	; (14d88 <event_scan_prepare+0xd8>)
   14ce2:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(!retval);
   14ce6:	f7ed fa01 	bl	20ec <log_1>
   14cea:	4040      	eors	r0, r0
   14cec:	f380 8811 	msr	BASEPRI, r0
   14cf0:	f04f 0004 	mov.w	r0, #4
   14cf4:	df02      	svc	2
	event_common_prepare(ticks_at_expire, remainder,
   14cf6:	9203      	str	r2, [sp, #12]
   14cf8:	4a24      	ldr	r2, [pc, #144]	; (14d8c <event_scan_prepare+0xdc>)
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   14cfa:	2306      	movs	r3, #6
	event_common_prepare(ticks_at_expire, remainder,
   14cfc:	e9cd 3201 	strd	r3, r2, [sp, #4]
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   14d00:	7463      	strb	r3, [r4, #17]
	event_common_prepare(ticks_at_expire, remainder,
   14d02:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   14d06:	9300      	str	r3, [sp, #0]
   14d08:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   14d0c:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
   14d10:	f7ff fe8e 	bl	14a30 <event_common_prepare>
	if (_radio.scanner.conn) {
   14d14:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   14d18:	b353      	cbz	r3, 14d70 <event_scan_prepare+0xc0>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
   14d1a:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   14d1e:	2b00      	cmp	r3, #0
   14d20:	da0a      	bge.n	14d38 <event_scan_prepare+0x88>
			u32_t ticks_prepare_to_start =
   14d22:	e9d4 2135 	ldrd	r2, r1, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
   14d26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
   14d2a:	4291      	cmp	r1, r2
   14d2c:	bf2c      	ite	cs
   14d2e:	ebc3 0301 	rsbcs	r3, r3, r1
   14d32:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
   14d36:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
   14d38:	4b15      	ldr	r3, [pc, #84]	; (14d90 <event_scan_prepare+0xe0>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   14d3a:	2201      	movs	r2, #1
   14d3c:	4611      	mov	r1, r2
   14d3e:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
   14d40:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   14d42:	f7fc fb9b 	bl	1147c <mayfly_enqueue>
		LL_ASSERT(!retval);
   14d46:	b198      	cbz	r0, 14d70 <event_scan_prepare+0xc0>
   14d48:	4b0b      	ldr	r3, [pc, #44]	; (14d78 <event_scan_prepare+0xc8>)
   14d4a:	681b      	ldr	r3, [r3, #0]
   14d4c:	075b      	lsls	r3, r3, #29
   14d4e:	d0cc      	beq.n	14cea <event_scan_prepare+0x3a>
   14d50:	2301      	movs	r3, #1
   14d52:	f04f 0200 	mov.w	r2, #0
   14d56:	f363 0202 	bfi	r2, r3, #0, #3
   14d5a:	4908      	ldr	r1, [pc, #32]	; (14d7c <event_scan_prepare+0xcc>)
   14d5c:	4b08      	ldr	r3, [pc, #32]	; (14d80 <event_scan_prepare+0xd0>)
   14d5e:	480d      	ldr	r0, [pc, #52]	; (14d94 <event_scan_prepare+0xe4>)
   14d60:	1a5b      	subs	r3, r3, r1
   14d62:	f36f 02c5 	bfc	r2, #3, #3
   14d66:	08db      	lsrs	r3, r3, #3
   14d68:	f363 128f 	bfi	r2, r3, #6, #10
   14d6c:	4906      	ldr	r1, [pc, #24]	; (14d88 <event_scan_prepare+0xd8>)
   14d6e:	e7ba      	b.n	14ce6 <event_scan_prepare+0x36>
}
   14d70:	b005      	add	sp, #20
   14d72:	bd30      	pop	{r4, r5, pc}
   14d74:	2000126c 	.word	0x2000126c
   14d78:	2000e218 	.word	0x2000e218
   14d7c:	0002ef38 	.word	0x0002ef38
   14d80:	0002ef70 	.word	0x0002ef70
   14d84:	000334de 	.word	0x000334de
   14d88:	00032ba9 	.word	0x00032ba9
   14d8c:	00014699 	.word	0x00014699
   14d90:	2000db04 	.word	0x2000db04
   14d94:	000333ea 	.word	0x000333ea

00014d98 <event_adv_stop>:
{
   14d98:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   14d9a:	2005      	movs	r0, #5
   14d9c:	f7ff fe3a 	bl	14a14 <event_stop.constprop.33>
	ticker_status =
   14da0:	f641 1311 	movw	r3, #6417	; 0x1911
   14da4:	2100      	movs	r1, #0
   14da6:	9300      	str	r3, [sp, #0]
   14da8:	2205      	movs	r2, #5
   14daa:	4b12      	ldr	r3, [pc, #72]	; (14df4 <event_adv_stop+0x5c>)
   14dac:	4608      	mov	r0, r1
   14dae:	f7fd f9b7 	bl	12120 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14db2:	f030 0302 	bics.w	r3, r0, #2
   14db6:	d01a      	beq.n	14dee <event_adv_stop+0x56>
   14db8:	4b0f      	ldr	r3, [pc, #60]	; (14df8 <event_adv_stop+0x60>)
   14dba:	681b      	ldr	r3, [r3, #0]
   14dbc:	075b      	lsls	r3, r3, #29
   14dbe:	d010      	beq.n	14de2 <event_adv_stop+0x4a>
   14dc0:	2301      	movs	r3, #1
   14dc2:	f04f 0200 	mov.w	r2, #0
   14dc6:	f363 0202 	bfi	r2, r3, #0, #3
   14dca:	490c      	ldr	r1, [pc, #48]	; (14dfc <event_adv_stop+0x64>)
   14dcc:	4b0c      	ldr	r3, [pc, #48]	; (14e00 <event_adv_stop+0x68>)
   14dce:	480d      	ldr	r0, [pc, #52]	; (14e04 <event_adv_stop+0x6c>)
   14dd0:	1a5b      	subs	r3, r3, r1
   14dd2:	f36f 02c5 	bfc	r2, #3, #3
   14dd6:	08db      	lsrs	r3, r3, #3
   14dd8:	f363 128f 	bfi	r2, r3, #6, #10
   14ddc:	490a      	ldr	r1, [pc, #40]	; (14e08 <event_adv_stop+0x70>)
   14dde:	f7ed f985 	bl	20ec <log_1>
   14de2:	4040      	eors	r0, r0
   14de4:	f380 8811 	msr	BASEPRI, r0
   14de8:	f04f 0004 	mov.w	r0, #4
   14dec:	df02      	svc	2
}
   14dee:	b003      	add	sp, #12
   14df0:	f85d fb04 	ldr.w	pc, [sp], #4
   14df4:	00013e2d 	.word	0x00013e2d
   14df8:	2000e218 	.word	0x2000e218
   14dfc:	0002ef38 	.word	0x0002ef38
   14e00:	0002ef70 	.word	0x0002ef70
   14e04:	00032d7f 	.word	0x00032d7f
   14e08:	00032b9a 	.word	0x00032b9a

00014e0c <entropy_get_entropy_isr.constprop.35>:
					  u16_t length,
					  u32_t flags)
{
	const struct entropy_driver_api *api = dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
   14e0c:	6843      	ldr	r3, [r0, #4]
static inline int entropy_get_entropy_isr(struct device *dev,
   14e0e:	b410      	push	{r4}
	if (unlikely(!api->get_entropy_isr)) {
   14e10:	685c      	ldr	r4, [r3, #4]
   14e12:	b11c      	cbz	r4, 14e1c <entropy_get_entropy_isr.constprop.35+0x10>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   14e14:	46a4      	mov	ip, r4
   14e16:	2300      	movs	r3, #0
}
   14e18:	bc10      	pop	{r4}
	return api->get_entropy_isr(dev, buffer, length, flags);
   14e1a:	4760      	bx	ip
}
   14e1c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   14e20:	bc10      	pop	{r4}
   14e22:	4770      	bx	lr

00014e24 <k32src_wait>:
{
   14e24:	b538      	push	{r3, r4, r5, lr}
	if (!_radio.is_k32src_stable) {
   14e26:	4b17      	ldr	r3, [pc, #92]	; (14e84 <k32src_wait+0x60>)
   14e28:	7c1a      	ldrb	r2, [r3, #16]
   14e2a:	bb4a      	cbnz	r2, 14e80 <k32src_wait+0x5c>
		_radio.is_k32src_stable = 1;
   14e2c:	2501      	movs	r5, #1
		clk_k32 = device_get_binding(DRV_NAME);
   14e2e:	4816      	ldr	r0, [pc, #88]	; (14e88 <k32src_wait+0x64>)
		_radio.is_k32src_stable = 1;
   14e30:	741d      	strb	r5, [r3, #16]
		clk_k32 = device_get_binding(DRV_NAME);
   14e32:	f018 fb29 	bl	2d488 <device_get_binding>
		LL_ASSERT(clk_k32);
   14e36:	4604      	mov	r4, r0
   14e38:	b9d8      	cbnz	r0, 14e72 <k32src_wait+0x4e>
   14e3a:	4b14      	ldr	r3, [pc, #80]	; (14e8c <k32src_wait+0x68>)
   14e3c:	681b      	ldr	r3, [r3, #0]
   14e3e:	075b      	lsls	r3, r3, #29
   14e40:	d00f      	beq.n	14e62 <k32src_wait+0x3e>
   14e42:	4913      	ldr	r1, [pc, #76]	; (14e90 <k32src_wait+0x6c>)
   14e44:	4b13      	ldr	r3, [pc, #76]	; (14e94 <k32src_wait+0x70>)
   14e46:	f04f 0200 	mov.w	r2, #0
   14e4a:	1a5b      	subs	r3, r3, r1
   14e4c:	f365 0202 	bfi	r2, r5, #0, #3
   14e50:	f360 02c5 	bfi	r2, r0, #3, #3
   14e54:	08db      	lsrs	r3, r3, #3
   14e56:	f363 128f 	bfi	r2, r3, #6, #10
   14e5a:	490f      	ldr	r1, [pc, #60]	; (14e98 <k32src_wait+0x74>)
   14e5c:	480f      	ldr	r0, [pc, #60]	; (14e9c <k32src_wait+0x78>)
   14e5e:	f7ed f945 	bl	20ec <log_1>
   14e62:	4040      	eors	r0, r0
   14e64:	f380 8811 	msr	BASEPRI, r0
   14e68:	f04f 0004 	mov.w	r0, #4
   14e6c:	df02      	svc	2
			cpu_sleep();
   14e6e:	f7fd fa5f 	bl	12330 <cpu_sleep>
   14e72:	6863      	ldr	r3, [r4, #4]
   14e74:	2101      	movs	r1, #1
   14e76:	681b      	ldr	r3, [r3, #0]
   14e78:	4620      	mov	r0, r4
   14e7a:	4798      	blx	r3
		while (clock_control_on(clk_k32, (void *)K32SRC)) {
   14e7c:	2800      	cmp	r0, #0
   14e7e:	d1f6      	bne.n	14e6e <k32src_wait+0x4a>
}
   14e80:	bd38      	pop	{r3, r4, r5, pc}
   14e82:	bf00      	nop
   14e84:	2000126c 	.word	0x2000126c
   14e88:	0003075c 	.word	0x0003075c
   14e8c:	2000e218 	.word	0x2000e218
   14e90:	0002ef38 	.word	0x0002ef38
   14e94:	0002ef70 	.word	0x0002ef70
   14e98:	00032a49 	.word	0x00032a49
   14e9c:	0003321c 	.word	0x0003321c

00014ea0 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
   14ea0:	4b02      	ldr	r3, [pc, #8]	; (14eac <mayfly_xtal_stop+0xc>)
   14ea2:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
   14ea4:	6843      	ldr	r3, [r0, #4]
   14ea6:	2100      	movs	r1, #0
   14ea8:	685b      	ldr	r3, [r3, #4]
   14eaa:	4718      	bx	r3
   14eac:	2000126c 	.word	0x2000126c

00014eb0 <chan_sel_2>:
{
   14eb0:	b4f0      	push	{r4, r5, r6, r7}
	prn_e = counter ^ chan_id;
   14eb2:	4048      	eors	r0, r1
   14eb4:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   14eb6:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   14eba:	2608      	movs	r6, #8
	o = 0;
   14ebc:	2400      	movs	r4, #0
		o |= (i & 1);
   14ebe:	f00c 0501 	and.w	r5, ip, #1
   14ec2:	3e01      	subs	r6, #1
   14ec4:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
   14ec8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
   14ecc:	b2ec      	uxtb	r4, r5
		i >>= 1;
   14ece:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
   14ed2:	d1f4      	bne.n	14ebe <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   14ed4:	0225      	lsls	r5, r4, #8
   14ed6:	b22d      	sxth	r5, r5
   14ed8:	b2c0      	uxtb	r0, r0
   14eda:	f04f 0c08 	mov.w	ip, #8
	o = 0;
   14ede:	4634      	mov	r4, r6
		o |= (i & 1);
   14ee0:	f000 0601 	and.w	r6, r0, #1
   14ee4:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
   14ee8:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
   14eec:	f016 0cff 	ands.w	ip, r6, #255	; 0xff
		o |= (i & 1);
   14ef0:	b2e4      	uxtb	r4, r4
		i >>= 1;
   14ef2:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
   14ef6:	d1f3      	bne.n	14ee0 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   14ef8:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
   14efa:	eb04 1404 	add.w	r4, r4, r4, lsl #4
   14efe:	3f01      	subs	r7, #1
   14f00:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
   14f02:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
   14f06:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
   14f08:	d1d5      	bne.n	14eb6 <chan_sel_2+0x6>
	chan_next = prn_e % 37;
   14f0a:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
   14f0c:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   14f0e:	fbb1 f0f4 	udiv	r0, r1, r4
   14f12:	fb04 1010 	mls	r0, r4, r0, r1
   14f16:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   14f18:	08c4      	lsrs	r4, r0, #3
   14f1a:	f000 0507 	and.w	r5, r0, #7
   14f1e:	5d14      	ldrb	r4, [r2, r4]
   14f20:	412c      	asrs	r4, r5
   14f22:	07e4      	lsls	r4, r4, #31
   14f24:	d405      	bmi.n	14f32 <chan_sel_2+0x82>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   14f26:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
   14f28:	0c09      	lsrs	r1, r1, #16
   14f2a:	4610      	mov	r0, r2
}
   14f2c:	bcf0      	pop	{r4, r5, r6, r7}
		chan_next = chan_sel_remap(chan_map, chan_index);
   14f2e:	f7fd ba37 	b.w	123a0 <chan_sel_remap>
}
   14f32:	bcf0      	pop	{r4, r5, r6, r7}
   14f34:	4770      	bx	lr
	...

00014f38 <connection_configure>:
{
   14f38:	b510      	push	{r4, lr}
   14f3a:	4604      	mov	r4, r0
	radio_reset();
   14f3c:	f009 fbf0 	bl	1e720 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   14f40:	2000      	movs	r0, #0
   14f42:	f009 fc17 	bl	1e774 <radio_tx_power_set>
	radio_isr_set(isr);
   14f46:	480a      	ldr	r0, [pc, #40]	; (14f70 <connection_configure+0x38>)
   14f48:	f009 fbb4 	bl	1e6b4 <radio_isr_set>
	radio_aa_set(conn->access_addr);
   14f4c:	f104 0010 	add.w	r0, r4, #16
   14f50:	f009 fc2e 	bl	1e7b0 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
   14f54:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
   14f56:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   14f58:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   14f5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   14f5e:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   14f60:	f240 605b 	movw	r0, #1627	; 0x65b
   14f64:	4319      	orrs	r1, r3
}
   14f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   14f6a:	f009 bcc9 	b.w	1e900 <radio_crc_configure>
   14f6e:	bf00      	nop
   14f70:	00017d49 	.word	0x00017d49

00014f74 <event_slave>:
{
   14f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f78:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   14f7a:	4b82      	ldr	r3, [pc, #520]	; (15184 <event_slave+0x210>)
   14f7c:	7d1a      	ldrb	r2, [r3, #20]
{
   14f7e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   14f80:	f002 06ff 	and.w	r6, r2, #255	; 0xff
   14f84:	461d      	mov	r5, r3
   14f86:	b1d2      	cbz	r2, 14fbe <event_slave+0x4a>
   14f88:	4b7f      	ldr	r3, [pc, #508]	; (15188 <event_slave+0x214>)
   14f8a:	681b      	ldr	r3, [r3, #0]
   14f8c:	075d      	lsls	r5, r3, #29
   14f8e:	d010      	beq.n	14fb2 <event_slave+0x3e>
   14f90:	2301      	movs	r3, #1
   14f92:	f04f 0200 	mov.w	r2, #0
   14f96:	f363 0202 	bfi	r2, r3, #0, #3
   14f9a:	497c      	ldr	r1, [pc, #496]	; (1518c <event_slave+0x218>)
   14f9c:	4b7c      	ldr	r3, [pc, #496]	; (15190 <event_slave+0x21c>)
   14f9e:	487d      	ldr	r0, [pc, #500]	; (15194 <event_slave+0x220>)
   14fa0:	1a5b      	subs	r3, r3, r1
   14fa2:	f36f 02c5 	bfc	r2, #3, #3
   14fa6:	08db      	lsrs	r3, r3, #3
   14fa8:	497b      	ldr	r1, [pc, #492]	; (15198 <event_slave+0x224>)
   14faa:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14fae:	f7ed f89d 	bl	20ec <log_1>
   14fb2:	4040      	eors	r0, r0
   14fb4:	f380 8811 	msr	BASEPRI, r0
   14fb8:	f04f 0004 	mov.w	r0, #4
   14fbc:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   14fbe:	7c5b      	ldrb	r3, [r3, #17]
   14fc0:	8c22      	ldrh	r2, [r4, #32]
   14fc2:	b2db      	uxtb	r3, r3
   14fc4:	3207      	adds	r2, #7
   14fc6:	4293      	cmp	r3, r2
   14fc8:	d013      	beq.n	14ff2 <event_slave+0x7e>
   14fca:	4b6f      	ldr	r3, [pc, #444]	; (15188 <event_slave+0x214>)
   14fcc:	681b      	ldr	r3, [r3, #0]
   14fce:	075c      	lsls	r4, r3, #29
   14fd0:	d0ef      	beq.n	14fb2 <event_slave+0x3e>
   14fd2:	2301      	movs	r3, #1
   14fd4:	f04f 0200 	mov.w	r2, #0
   14fd8:	f363 0202 	bfi	r2, r3, #0, #3
   14fdc:	496b      	ldr	r1, [pc, #428]	; (1518c <event_slave+0x218>)
   14fde:	4b6c      	ldr	r3, [pc, #432]	; (15190 <event_slave+0x21c>)
   14fe0:	486e      	ldr	r0, [pc, #440]	; (1519c <event_slave+0x228>)
   14fe2:	1a5b      	subs	r3, r3, r1
   14fe4:	f366 02c5 	bfi	r2, r6, #3, #3
   14fe8:	08db      	lsrs	r3, r3, #3
   14fea:	f363 128f 	bfi	r2, r3, #6, #10
   14fee:	496a      	ldr	r1, [pc, #424]	; (15198 <event_slave+0x224>)
   14ff0:	e7dd      	b.n	14fae <event_slave+0x3a>
	_radio.packet_counter = 0;
   14ff2:	f8a5 6118 	strh.w	r6, [r5, #280]	; 0x118
	_radio.role = ROLE_SLAVE;
   14ff6:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   14ff8:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
   14ffa:	752a      	strb	r2, [r5, #20]
	_radio.ticker_id_prepare = 0;
   14ffc:	746e      	strb	r6, [r5, #17]
	_radio.ticker_id_event =
   14ffe:	74ab      	strb	r3, [r5, #18]
	conn->latency_event = conn->latency_prepare;
   15000:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   15002:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
   15006:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
   15008:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
   1500a:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
   1500c:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
   1500e:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
   15010:	756a      	strb	r2, [r5, #21]
	connection_configure(conn);
   15012:	f7ff ff91 	bl	14f38 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   15016:	2096      	movs	r0, #150	; 0x96
   15018:	f009 fd2c 	bl	1ea74 <radio_tmr_tifs_set>
				     conn->phy_flags);
   1501c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   15020:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   15024:	09d3      	lsrs	r3, r2, #7
   15026:	4631      	mov	r1, r6
   15028:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   1502c:	f000 0007 	and.w	r0, r0, #7
   15030:	f009 fc90 	bl	1e954 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   15034:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
   15038:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   1503c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
   15040:	4620      	mov	r0, r4
   15042:	3108      	adds	r1, #8
   15044:	f7fd fe16 	bl	12c74 <rx_packet_set>
	if (conn->data_chan_sel) {
   15048:	7f63      	ldrb	r3, [r4, #29]
   1504a:	0658      	lsls	r0, r3, #25
   1504c:	f104 0217 	add.w	r2, r4, #23
   15050:	d559      	bpl.n	15106 <event_slave+0x192>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   15052:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   15054:	8be1      	ldrh	r1, [r4, #30]
   15056:	3801      	subs	r0, #1
   15058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1505c:	b280      	uxth	r0, r0
   1505e:	f7ff ff27 	bl	14eb0 <chan_sel_2>
	chan_set(data_chan_use);
   15062:	f7fe fe37 	bl	13cd4 <chan_set>
	conn->slave.window_widening_event_us +=
   15066:	e9d4 2317 	ldrd	r2, r3, [r4, #92]	; 0x5c
   1506a:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
   1506c:	2200      	movs	r2, #0
   1506e:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   15070:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
   15072:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
   15074:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
   15076:	bf88      	it	hi
   15078:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
   1507a:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
   1507e:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
   15080:	4413      	add	r3, r2
   15082:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   15084:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
   15086:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   15088:	f107 0109 	add.w	r1, r7, #9
   1508c:	4630      	mov	r0, r6
   1508e:	f009 fcfd 	bl	1ea8c <radio_tmr_start>
   15092:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
   15094:	f009 fd98 	bl	1ebc8 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   15098:	4630      	mov	r0, r6
   1509a:	f009 fdb7 	bl	1ec0c <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   1509e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   150a0:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   150a2:	f103 0650 	add.w	r6, r3, #80	; 0x50
   150a6:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
   150aa:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   150ae:	2101      	movs	r1, #1
   150b0:	f000 0007 	and.w	r0, r0, #7
   150b4:	f009 fbd5 	bl	1e862 <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   150b8:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
   150ba:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
   150bc:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   150c0:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   150c4:	2802      	cmp	r0, #2
   150c6:	d03e      	beq.n	15146 <event_slave+0x1d2>
		return 40;
   150c8:	2804      	cmp	r0, #4
   150ca:	bf0c      	ite	eq
   150cc:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   150d0:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   150d2:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
   150d4:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   150d6:	f009 fbc6 	bl	1e866 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   150da:	4430      	add	r0, r6
   150dc:	f009 fd56 	bl	1eb8c <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   150e0:	f894 1020 	ldrb.w	r1, [r4, #32]
   150e4:	3107      	adds	r1, #7
   150e6:	4620      	mov	r0, r4
   150e8:	463a      	mov	r2, r7
   150ea:	b2c9      	uxtb	r1, r1
   150ec:	f7ff fa8c 	bl	14608 <preempt_calc>
   150f0:	4604      	mov	r4, r0
   150f2:	b350      	cbz	r0, 1514a <event_slave+0x1d6>
		_radio.state = STATE_STOP;
   150f4:	2304      	movs	r3, #4
   150f6:	756b      	strb	r3, [r5, #21]
		radio_disable();
   150f8:	f009 fbc6 	bl	1e888 <radio_disable>
	packet_tx_enqueue(2);
   150fc:	2002      	movs	r0, #2
}
   150fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
   15102:	f7fe bcd5 	b.w	13ab0 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   15106:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   15108:	7fa6      	ldrb	r6, [r4, #30]
   1510a:	fb01 6606 	mla	r6, r1, r6, r6
   1510e:	7fe1      	ldrb	r1, [r4, #31]
   15110:	2025      	movs	r0, #37	; 0x25
   15112:	440e      	add	r6, r1
   15114:	fb96 f1f0 	sdiv	r1, r6, r0
   15118:	fb00 6611 	mls	r6, r0, r1, r6
   1511c:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   1511e:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   15120:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   15122:	5c51      	ldrb	r1, [r2, r1]
   15124:	f006 0607 	and.w	r6, r6, #7
   15128:	fa41 f606 	asr.w	r6, r1, r6
   1512c:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
   1512e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   15132:	d496      	bmi.n	15062 <event_slave+0xee>
		chan_index = chan_next % chan_count;
   15134:	fbb0 f1f3 	udiv	r1, r0, r3
   15138:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   1513c:	b2c9      	uxtb	r1, r1
   1513e:	4610      	mov	r0, r2
   15140:	f7fd f92e 	bl	123a0 <chan_sel_remap>
   15144:	e78d      	b.n	15062 <event_slave+0xee>
		return 24;
   15146:	2318      	movs	r3, #24
   15148:	e7c3      	b.n	150d2 <event_slave+0x15e>
		ticker_status =
   1514a:	4603      	mov	r3, r0
   1514c:	4a14      	ldr	r2, [pc, #80]	; (151a0 <event_slave+0x22c>)
   1514e:	4601      	mov	r1, r0
   15150:	f7fd f85e 	bl	12210 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15154:	f030 0302 	bics.w	r3, r0, #2
   15158:	d0d0      	beq.n	150fc <event_slave+0x188>
   1515a:	4b0b      	ldr	r3, [pc, #44]	; (15188 <event_slave+0x214>)
   1515c:	681b      	ldr	r3, [r3, #0]
   1515e:	075b      	lsls	r3, r3, #29
   15160:	f43f af27 	beq.w	14fb2 <event_slave+0x3e>
   15164:	2301      	movs	r3, #1
   15166:	f04f 0200 	mov.w	r2, #0
   1516a:	f363 0202 	bfi	r2, r3, #0, #3
   1516e:	4907      	ldr	r1, [pc, #28]	; (1518c <event_slave+0x218>)
   15170:	4b07      	ldr	r3, [pc, #28]	; (15190 <event_slave+0x21c>)
   15172:	480c      	ldr	r0, [pc, #48]	; (151a4 <event_slave+0x230>)
   15174:	1a5b      	subs	r3, r3, r1
   15176:	f364 02c5 	bfi	r2, r4, #3, #3
   1517a:	08db      	lsrs	r3, r3, #3
   1517c:	f363 128f 	bfi	r2, r3, #6, #10
   15180:	4905      	ldr	r1, [pc, #20]	; (15198 <event_slave+0x224>)
   15182:	e714      	b.n	14fae <event_slave+0x3a>
   15184:	2000126c 	.word	0x2000126c
   15188:	2000e218 	.word	0x2000e218
   1518c:	0002ef38 	.word	0x0002ef38
   15190:	0002ef70 	.word	0x0002ef70
   15194:	00032e9e 	.word	0x00032e9e
   15198:	00032c7b 	.word	0x00032c7b
   1519c:	00032f2d 	.word	0x00032f2d
   151a0:	000137ad 	.word	0x000137ad
   151a4:	00032d7f 	.word	0x00032d7f

000151a8 <ctrl_tx_enqueue>:
{
   151a8:	b510      	push	{r4, lr}
	    !conn->empty &&
   151aa:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
   151ae:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
   151b2:	f014 0f80 	tst.w	r4, #128	; 0x80
   151b6:	d118      	bne.n	151ea <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   151b8:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
   151bc:	b1ab      	cbz	r3, 151ea <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   151be:	0724      	lsls	r4, r4, #28
   151c0:	d413      	bmi.n	151ea <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   151c2:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
   151c6:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   151c8:	bf04      	itt	eq
   151ca:	681c      	ldreq	r4, [r3, #0]
   151cc:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
   151d0:	b992      	cbnz	r2, 151f8 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
   151d2:	681a      	ldr	r2, [r3, #0]
   151d4:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
   151d6:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   151d8:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
   151dc:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
   151e0:	680b      	ldr	r3, [r1, #0]
   151e2:	b90b      	cbnz	r3, 151e8 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
   151e4:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
}
   151e8:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
   151ea:	b92a      	cbnz	r2, 151f8 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
   151ec:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   151f0:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   151f2:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
   151f6:	e7ef      	b.n	151d8 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   151f8:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   151fc:	681a      	ldr	r2, [r3, #0]
   151fe:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   15200:	6019      	str	r1, [r3, #0]
   15202:	e7eb      	b.n	151dc <ctrl_tx_enqueue+0x34>

00015204 <ctrl_tx_sec_enqueue>:
{
   15204:	b410      	push	{r4}
	if (conn->pause_tx) {
   15206:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
   1520a:	0724      	lsls	r4, r4, #28
{
   1520c:	460a      	mov	r2, r1
	if (conn->pause_tx) {
   1520e:	d50f      	bpl.n	15230 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
   15210:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
   15214:	b931      	cbnz	r1, 15224 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
   15216:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   1521a:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
   1521c:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
   15220:	bc10      	pop	{r4}
   15222:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   15224:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   15228:	6819      	ldr	r1, [r3, #0]
   1522a:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   1522c:	601a      	str	r2, [r3, #0]
   1522e:	e7f7      	b.n	15220 <ctrl_tx_sec_enqueue+0x1c>
}
   15230:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
   15232:	f7ff bfb9 	b.w	151a8 <ctrl_tx_enqueue>
	...

00015238 <feature_rsp_send>:
{
   15238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1523a:	4f21      	ldr	r7, [pc, #132]	; (152c0 <feature_rsp_send+0x88>)
{
   1523c:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1523e:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
   15242:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15244:	f7fc f852 	bl	112ec <mem_acquire>
	if (!node_tx) {
   15248:	4604      	mov	r4, r0
   1524a:	b3b0      	cbz	r0, 152ba <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   1524c:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
   1524e:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   15250:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   15254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   15258:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   1525c:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   15260:	f043 0310 	orr.w	r3, r3, #16
   15264:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   15268:	79b1      	ldrb	r1, [r6, #6]
   1526a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   1526e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
   15272:	f3c1 0110 	ubfx	r1, r1, #0, #17
   15276:	400b      	ands	r3, r1
   15278:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
   1527c:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   15280:	f043 0320 	orr.w	r3, r3, #32
   15284:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15288:	7903      	ldrb	r3, [r0, #4]
   1528a:	f043 0303 	orr.w	r3, r3, #3
   1528e:	7103      	strb	r3, [r0, #4]
	(void)memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
   15290:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   15292:	2309      	movs	r3, #9
   15294:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   15296:	71c3      	strb	r3, [r0, #7]
	(void)memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
   15298:	2100      	movs	r1, #0
   1529a:	4410      	add	r0, r2
   1529c:	f7f1 fd21 	bl	6ce2 <memset>
		conn->llcp_features & 0xFF;
   152a0:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
   152a4:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   152a6:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
   152a8:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
   152aa:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
   152ac:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
   152ae:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   152b0:	4621      	mov	r1, r4
   152b2:	f7ff ffa7 	bl	15204 <ctrl_tx_sec_enqueue>
	return 0;
   152b6:	2000      	movs	r0, #0
}
   152b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   152ba:	2001      	movs	r0, #1
   152bc:	e7fc      	b.n	152b8 <feature_rsp_send+0x80>
   152be:	bf00      	nop
   152c0:	2000126c 	.word	0x2000126c

000152c4 <start_enc_rsp_send>:
	conn->enc_tx = 1;
   152c4:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   152c8:	f043 0320 	orr.w	r3, r3, #32
   152cc:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   152d0:	780b      	ldrb	r3, [r1, #0]
   152d2:	f043 0303 	orr.w	r3, r3, #3
   152d6:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   152d8:	2301      	movs	r3, #1
   152da:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   152dc:	2306      	movs	r3, #6
   152de:	70cb      	strb	r3, [r1, #3]
}
   152e0:	2000      	movs	r0, #0
   152e2:	4770      	bx	lr

000152e4 <reject_ext_ind_send>:
{
   152e4:	b570      	push	{r4, r5, r6, lr}
   152e6:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   152e8:	480b      	ldr	r0, [pc, #44]	; (15318 <reject_ext_ind_send+0x34>)
{
   152ea:	460e      	mov	r6, r1
   152ec:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   152ee:	f7fb fffd 	bl	112ec <mem_acquire>
	if (!node_tx) {
   152f2:	b178      	cbz	r0, 15314 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   152f4:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   152f6:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   152f8:	f043 0303 	orr.w	r3, r3, #3
   152fc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   152fe:	2303      	movs	r3, #3
   15300:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   15302:	2311      	movs	r3, #17
   15304:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   15306:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   15308:	4601      	mov	r1, r0
   1530a:	4620      	mov	r0, r4
   1530c:	f7ff ff4c 	bl	151a8 <ctrl_tx_enqueue>
	return 0;
   15310:	2000      	movs	r0, #0
}
   15312:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   15314:	2001      	movs	r0, #1
   15316:	e7fc      	b.n	15312 <reject_ext_ind_send+0x2e>
   15318:	200013c8 	.word	0x200013c8
   1531c:	00000000 	.word	0x00000000

00015320 <event_connection_prepare>:
{
   15320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   15324:	4dc7      	ldr	r5, [pc, #796]	; (15644 <event_connection_prepare+0x324>)
{
   15326:	b08f      	sub	sp, #60	; 0x3c
   15328:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
   1532a:	7c6b      	ldrb	r3, [r5, #17]
{
   1532c:	910c      	str	r1, [sp, #48]	; 0x30
   1532e:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
   15330:	b1d3      	cbz	r3, 15368 <event_connection_prepare+0x48>
   15332:	4bc5      	ldr	r3, [pc, #788]	; (15648 <event_connection_prepare+0x328>)
   15334:	681b      	ldr	r3, [r3, #0]
   15336:	075c      	lsls	r4, r3, #29
   15338:	d010      	beq.n	1535c <event_connection_prepare+0x3c>
   1533a:	2301      	movs	r3, #1
   1533c:	f04f 0200 	mov.w	r2, #0
   15340:	f363 0202 	bfi	r2, r3, #0, #3
   15344:	49c1      	ldr	r1, [pc, #772]	; (1564c <event_connection_prepare+0x32c>)
   15346:	4bc2      	ldr	r3, [pc, #776]	; (15650 <event_connection_prepare+0x330>)
   15348:	48c2      	ldr	r0, [pc, #776]	; (15654 <event_connection_prepare+0x334>)
   1534a:	1a5b      	subs	r3, r3, r1
   1534c:	f36f 02c5 	bfc	r2, #3, #3
   15350:	08db      	lsrs	r3, r3, #3
   15352:	49c1      	ldr	r1, [pc, #772]	; (15658 <event_connection_prepare+0x338>)
   15354:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(0);
   15358:	f7ec fec8 	bl	20ec <log_1>
   1535c:	4040      	eors	r0, r0
   1535e:	f380 8811 	msr	BASEPRI, r0
   15362:	f04f 0004 	mov.w	r0, #4
   15366:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
   15368:	f894 3020 	ldrb.w	r3, [r4, #32]
   1536c:	3307      	adds	r3, #7
   1536e:	b2db      	uxtb	r3, r3
   15370:	746b      	strb	r3, [r5, #17]
	if (conn->role) {
   15372:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15376:	2b00      	cmp	r3, #0
   15378:	da09      	bge.n	1538e <event_connection_prepare+0x6e>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   1537a:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
   1537c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   1537e:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
   15382:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
   15384:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
   15386:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
   15388:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
   1538a:	bf88      	it	hi
   1538c:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
   1538e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
   15390:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
   15394:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
   15396:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
   15398:	b292      	uxth	r2, r2
   1539a:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
   1539c:	4432      	add	r2, r6
   1539e:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
   153a0:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   153a4:	429a      	cmp	r2, r3
   153a6:	f040 81dd 	bne.w	15764 <event_connection_prepare+0x444>
   153aa:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   153ae:	0758      	lsls	r0, r3, #29
   153b0:	f100 852d 	bmi.w	15e0e <event_connection_prepare+0xaee>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   153b4:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   153b8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   153bc:	429a      	cmp	r2, r3
   153be:	f000 80a6 	beq.w	1550e <event_connection_prepare+0x1ee>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   153c2:	2005      	movs	r0, #5
   153c4:	f7ff fb26 	bl	14a14 <event_stop.constprop.33>
	conn_upd = _radio.conn_upd;
   153c8:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
   153cc:	b113      	cbz	r3, 153d4 <event_connection_prepare+0xb4>
   153ce:	429c      	cmp	r4, r3
   153d0:	f040 809d 	bne.w	1550e <event_connection_prepare+0x1ee>
	switch (conn->llcp_conn_param.state) {
   153d4:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   153d8:	f003 0307 	and.w	r3, r3, #7
   153dc:	2b05      	cmp	r3, #5
   153de:	f200 8171 	bhi.w	156c4 <event_connection_prepare+0x3a4>
   153e2:	e8df f013 	tbh	[pc, r3, lsl #1]
   153e6:	0006      	.short	0x0006
   153e8:	01430075 	.word	0x01430075
   153ec:	00940094 	.word	0x00940094
   153f0:	0094      	.short	0x0094
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   153f2:	489a      	ldr	r0, [pc, #616]	; (1565c <event_connection_prepare+0x33c>)
   153f4:	f7fb ff7a 	bl	112ec <mem_acquire>
	if (!node_tx) {
   153f8:	4607      	mov	r7, r0
   153fa:	2800      	cmp	r0, #0
   153fc:	f000 8087 	beq.w	1550e <event_connection_prepare+0x1ee>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   15400:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   15404:	2204      	movs	r2, #4
   15406:	f362 0302 	bfi	r3, r2, #0, #3
   1540a:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1540e:	7903      	ldrb	r3, [r0, #4]
   15410:	f043 0303 	orr.w	r3, r3, #3
   15414:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   15416:	2318      	movs	r3, #24
   15418:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1541a:	230f      	movs	r3, #15
   1541c:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval_min;
   1541e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   15422:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval_max;
   15424:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   15428:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   1542a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   1542e:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   15430:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   15434:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
   15436:	2300      	movs	r3, #0
   15438:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
   1543a:	74c3      	strb	r3, [r0, #19]
   1543c:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
   1543e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15442:	7543      	strb	r3, [r0, #21]
   15444:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
   15446:	75c3      	strb	r3, [r0, #23]
   15448:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
   1544a:	7643      	strb	r3, [r0, #25]
   1544c:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
   1544e:	76c3      	strb	r3, [r0, #27]
   15450:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
   15452:	7743      	strb	r3, [r0, #29]
   15454:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
   15456:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
   1545a:	4601      	mov	r1, r0
   1545c:	4620      	mov	r0, r4
   1545e:	f7ff fea3 	bl	151a8 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   15462:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
   15464:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
   15468:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   1546c:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
   1546e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   15472:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   15476:	da0b      	bge.n	15490 <event_connection_prepare+0x170>
			u32_t ticks_prepare_to_start =
   15478:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
   1547c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
   15480:	428b      	cmp	r3, r1
   15482:	bf2c      	ite	cs
   15484:	4443      	addcs	r3, r8
   15486:	eb08 0301 	addcc.w	r3, r8, r1
   1548a:	1a9b      	subs	r3, r3, r2
   1548c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   15490:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
   15492:	4b73      	ldr	r3, [pc, #460]	; (15660 <event_connection_prepare+0x340>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   15494:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   15498:	2201      	movs	r2, #1
   1549a:	4611      	mov	r1, r2
   1549c:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
   1549e:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   154a0:	f7fb ffec 	bl	1147c <mayfly_enqueue>
		LL_ASSERT(!retval);
   154a4:	b398      	cbz	r0, 1550e <event_connection_prepare+0x1ee>
   154a6:	4b68      	ldr	r3, [pc, #416]	; (15648 <event_connection_prepare+0x328>)
   154a8:	681b      	ldr	r3, [r3, #0]
   154aa:	0759      	lsls	r1, r3, #29
   154ac:	f43f af56 	beq.w	1535c <event_connection_prepare+0x3c>
   154b0:	2301      	movs	r3, #1
   154b2:	f04f 0200 	mov.w	r2, #0
   154b6:	f363 0202 	bfi	r2, r3, #0, #3
   154ba:	4964      	ldr	r1, [pc, #400]	; (1564c <event_connection_prepare+0x32c>)
   154bc:	4b64      	ldr	r3, [pc, #400]	; (15650 <event_connection_prepare+0x330>)
   154be:	1a5b      	subs	r3, r3, r1
   154c0:	f36f 02c5 	bfc	r2, #3, #3
   154c4:	08db      	lsrs	r3, r3, #3
   154c6:	4967      	ldr	r1, [pc, #412]	; (15664 <event_connection_prepare+0x344>)
   154c8:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(!retval);
   154cc:	4866      	ldr	r0, [pc, #408]	; (15668 <event_connection_prepare+0x348>)
   154ce:	e743      	b.n	15358 <event_connection_prepare+0x38>
	if (conn->llcp_conn_param.status) {
   154d0:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
   154d4:	b397      	cbz	r7, 1553c <event_connection_prepare+0x21c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   154d6:	4861      	ldr	r0, [pc, #388]	; (1565c <event_connection_prepare+0x33c>)
   154d8:	f7fb ff08 	bl	112ec <mem_acquire>
		if (!node_tx) {
   154dc:	4601      	mov	r1, r0
   154de:	b1b0      	cbz	r0, 1550e <event_connection_prepare+0x1ee>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   154e0:	7903      	ldrb	r3, [r0, #4]
   154e2:	f043 0303 	orr.w	r3, r3, #3
   154e6:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   154e8:	2311      	movs	r3, #17
   154ea:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   154ec:	2303      	movs	r3, #3
   154ee:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   154f0:	230f      	movs	r3, #15
   154f2:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   154f4:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   154f8:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
   154fa:	4620      	mov	r0, r4
   154fc:	f7ff fe54 	bl	151a8 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15500:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   15504:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   15508:	2300      	movs	r3, #0
   1550a:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1550e:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   15512:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   15516:	429a      	cmp	r2, r3
   15518:	f000 811d 	beq.w	15756 <event_connection_prepare+0x436>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   1551c:	2005      	movs	r0, #5
   1551e:	f7ff fa79 	bl	14a14 <event_stop.constprop.33>
	switch (conn->llcp_phy.state) {
   15522:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15526:	f003 0203 	and.w	r2, r3, #3
   1552a:	2a03      	cmp	r2, #3
   1552c:	f200 818c 	bhi.w	15848 <event_connection_prepare+0x528>
   15530:	e8df f012 	tbh	[pc, r2, lsl #1]
   15534:	011100dd 	.word	0x011100dd
   15538:	012b0111 	.word	0x012b0111
	if (!conn->role) {
   1553c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15540:	2b00      	cmp	r3, #0
   15542:	db3b      	blt.n	155bc <event_connection_prepare+0x29c>
		if (conn->llcp_req != conn->llcp_ack) {
   15544:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
   15548:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   1554c:	428b      	cmp	r3, r1
   1554e:	d1de      	bne.n	1550e <event_connection_prepare+0x1ee>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   15550:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
   15554:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   15558:	2205      	movs	r2, #5
   1555a:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
   1555e:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   15562:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   15566:	2301      	movs	r3, #1
   15568:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
   1556c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
		if (conn->llcp_conn_param.preferred_periodicity) {
   15570:	b122      	cbz	r2, 1557c <event_connection_prepare+0x25c>
				((conn->llcp_conn_param.interval_max /
   15572:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
   15576:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
   15578:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
   1557c:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   15580:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   15584:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   15588:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   1558c:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   15590:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15594:	2202      	movs	r2, #2
   15596:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   1559a:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   1559e:	f082 0208 	eor.w	r2, r2, #8
   155a2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   155a6:	f362 0382 	bfi	r3, r2, #2, #1
   155aa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
   155ae:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
   155b0:	2301      	movs	r3, #1
   155b2:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   155b6:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
   155ba:	e7a8      	b.n	1550e <event_connection_prepare+0x1ee>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   155bc:	4827      	ldr	r0, [pc, #156]	; (1565c <event_connection_prepare+0x33c>)
   155be:	f7fb fe95 	bl	112ec <mem_acquire>
	if (!node_tx) {
   155c2:	4601      	mov	r1, r0
   155c4:	2800      	cmp	r0, #0
   155c6:	d0a2      	beq.n	1550e <event_connection_prepare+0x1ee>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   155c8:	7903      	ldrb	r3, [r0, #4]
   155ca:	f043 0303 	orr.w	r3, r3, #3
   155ce:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   155d0:	2318      	movs	r3, #24
   155d2:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   155d4:	2310      	movs	r3, #16
   155d6:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval_min;
   155d8:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   155dc:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval_max;
   155de:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   155e2:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
   155e4:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   155e8:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
   155ea:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   155ee:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
   155f0:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   155f4:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
   155f6:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   155fa:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
   155fe:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   15602:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
   15606:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
   1560a:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
   1560e:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   15612:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
   15616:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
   1561a:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
   1561e:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
   15622:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
   15626:	f8b4 30da 	ldrh.w	r3, [r4, #218]	; 0xda
   1562a:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
   1562e:	4620      	mov	r0, r4
   15630:	f7ff fdba 	bl	151a8 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15634:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   15638:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
   1563c:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
   15640:	e765      	b.n	1550e <event_connection_prepare+0x1ee>
   15642:	bf00      	nop
   15644:	2000126c 	.word	0x2000126c
   15648:	2000e218 	.word	0x2000e218
   1564c:	0002ef38 	.word	0x0002ef38
   15650:	0002ef70 	.word	0x0002ef70
   15654:	000334de 	.word	0x000334de
   15658:	00032c62 	.word	0x00032c62
   1565c:	200013c8 	.word	0x200013c8
   15660:	2000db24 	.word	0x2000db24
   15664:	00032bfe 	.word	0x00032bfe
   15668:	000333ea 	.word	0x000333ea
	if (conn->pause_tx) {
   1566c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15670:	071a      	lsls	r2, r3, #28
   15672:	f53f af4c 	bmi.w	1550e <event_connection_prepare+0x1ee>
	node_rx = packet_rx_reserve_get(2);
   15676:	2002      	movs	r0, #2
   15678:	f7fc fec4 	bl	12404 <packet_rx_reserve_get>
	if (!node_rx) {
   1567c:	2800      	cmp	r0, #0
   1567e:	f43f af46 	beq.w	1550e <event_connection_prepare+0x1ee>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   15682:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   15686:	2203      	movs	r2, #3
   15688:	f362 0302 	bfi	r3, r2, #0, #3
   1568c:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
   15690:	8c23      	ldrh	r3, [r4, #32]
   15692:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15694:	2301      	movs	r3, #1
   15696:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15698:	7a03      	ldrb	r3, [r0, #8]
   1569a:	4313      	orrs	r3, r2
   1569c:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1569e:	2318      	movs	r3, #24
   156a0:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   156a2:	230f      	movs	r3, #15
   156a4:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval_min;
   156a6:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   156aa:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval_max;
   156ac:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   156b0:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
   156b2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   156b6:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
   156b8:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   156bc:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
   156be:	f7fd fe03 	bl	132c8 <packet_rx_enqueue>
   156c2:	e724      	b.n	1550e <event_connection_prepare+0x1ee>
		LL_ASSERT(0);
   156c4:	4bb3      	ldr	r3, [pc, #716]	; (15994 <event_connection_prepare+0x674>)
   156c6:	681b      	ldr	r3, [r3, #0]
   156c8:	075b      	lsls	r3, r3, #29
   156ca:	f43f ae47 	beq.w	1535c <event_connection_prepare+0x3c>
   156ce:	2301      	movs	r3, #1
   156d0:	f04f 0200 	mov.w	r2, #0
   156d4:	f363 0202 	bfi	r2, r3, #0, #3
   156d8:	49af      	ldr	r1, [pc, #700]	; (15998 <event_connection_prepare+0x678>)
   156da:	4bb0      	ldr	r3, [pc, #704]	; (1599c <event_connection_prepare+0x67c>)
   156dc:	1a5b      	subs	r3, r3, r1
   156de:	f36f 02c5 	bfc	r2, #3, #3
   156e2:	08db      	lsrs	r3, r3, #3
   156e4:	49ae      	ldr	r1, [pc, #696]	; (159a0 <event_connection_prepare+0x680>)
   156e6:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(0);
   156ea:	48ae      	ldr	r0, [pc, #696]	; (159a4 <event_connection_prepare+0x684>)
   156ec:	e634      	b.n	15358 <event_connection_prepare+0x38>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   156ee:	48ae      	ldr	r0, [pc, #696]	; (159a8 <event_connection_prepare+0x688>)
   156f0:	f7fb fdfc 	bl	112ec <mem_acquire>
		if (!node_tx) {
   156f4:	4601      	mov	r1, r0
   156f6:	b370      	cbz	r0, 15756 <event_connection_prepare+0x436>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   156f8:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
   156fc:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   15700:	2201      	movs	r2, #1
   15702:	f362 0301 	bfi	r3, r2, #0, #2
   15706:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   1570a:	b2db      	uxtb	r3, r3
   1570c:	f3c3 0782 	ubfx	r7, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   15710:	f3c3 1342 	ubfx	r3, r3, #5, #3
   15714:	f363 00c5 	bfi	r0, r3, #3, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
   15718:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
   1571c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
   15720:	f894 00f7 	ldrb.w	r0, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
   15724:	f367 0202 	bfi	r2, r7, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
   15728:	f3c0 0000 	ubfx	r0, r0, #0, #1
   1572c:	f360 1286 	bfi	r2, r0, #6, #1
   15730:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15734:	790a      	ldrb	r2, [r1, #4]
		pr->rx_phys = conn->llcp_phy.rx;
   15736:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15738:	f042 0203 	orr.w	r2, r2, #3
   1573c:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
   1573e:	2203      	movs	r2, #3
   15740:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   15742:	2216      	movs	r2, #22
   15744:	71ca      	strb	r2, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
   15746:	720f      	strb	r7, [r1, #8]
		ctrl_tx_enqueue(conn, node_tx);
   15748:	4620      	mov	r0, r4
   1574a:	f7ff fd2d 	bl	151a8 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   1574e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15752:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
   15756:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   1575a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1575e:	429a      	cmp	r2, r3
   15760:	f000 8355 	beq.w	15e0e <event_connection_prepare+0xaee>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15764:	2005      	movs	r0, #5
   15766:	f7ff f955 	bl	14a14 <event_stop.constprop.33>
		switch (conn->llcp_type) {
   1576a:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   1576e:	3b01      	subs	r3, #1
   15770:	2b07      	cmp	r3, #7
   15772:	f200 862f 	bhi.w	163d4 <event_connection_prepare+0x10b4>
   15776:	e8df f013 	tbh	[pc, r3, lsl #1]
   1577a:	007b      	.short	0x007b
   1577c:	03a20323 	.word	0x03a20323
   15780:	04e904b9 	.word	0x04e904b9
   15784:	0560062d 	.word	0x0560062d
   15788:	0574      	.short	0x0574
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1578a:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   1578e:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
   15792:	f3c3 0282 	ubfx	r2, r3, #2, #3
   15796:	0797      	lsls	r7, r2, #30
   15798:	d544      	bpl.n	15824 <event_connection_prepare+0x504>
			conn->llcp_phy.tx = BIT(1);
   1579a:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
   1579c:	f362 0384 	bfi	r3, r2, #2, #3
   157a0:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
   157a4:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   157a8:	095a      	lsrs	r2, r3, #5
   157aa:	0791      	lsls	r1, r2, #30
   157ac:	d543      	bpl.n	15836 <event_connection_prepare+0x516>
			conn->llcp_phy.rx = BIT(1);
   157ae:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
   157b0:	f362 1347 	bfi	r3, r2, #5, #3
   157b4:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
   157b8:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
   157bc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   157c0:	f3c2 0182 	ubfx	r1, r2, #2, #3
   157c4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   157c8:	428b      	cmp	r3, r1
   157ca:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
   157ce:	bf14      	ite	ne
   157d0:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
   157d4:	f36f 0384 	bfceq	r3, #2, #3
   157d8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
   157dc:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   157e0:	0952      	lsrs	r2, r2, #5
   157e2:	f003 0307 	and.w	r3, r3, #7
   157e6:	4293      	cmp	r3, r2
   157e8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
   157ec:	bf14      	ite	ne
   157ee:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
   157f2:	f36f 1347 	bfceq	r3, #5, #3
   157f6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
   157fa:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   157fe:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
   15802:	f043 0301 	orr.w	r3, r3, #1
   15806:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1580a:	f362 0341 	bfi	r3, r2, #1, #1
   1580e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
   15812:	2308      	movs	r3, #8
   15814:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   15818:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   1581c:	3b01      	subs	r3, #1
   1581e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   15822:	e798      	b.n	15756 <event_connection_prepare+0x436>
		} else if (conn->llcp_phy.tx & BIT(0)) {
   15824:	07d0      	lsls	r0, r2, #31
   15826:	d501      	bpl.n	1582c <event_connection_prepare+0x50c>
			conn->llcp_phy.tx = BIT(0);
   15828:	2201      	movs	r2, #1
   1582a:	e7b7      	b.n	1579c <event_connection_prepare+0x47c>
		} else if (conn->llcp_phy.tx & BIT(2)) {
   1582c:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
   15830:	bf18      	it	ne
   15832:	2204      	movne	r2, #4
   15834:	e7b2      	b.n	1579c <event_connection_prepare+0x47c>
		} else if (conn->llcp_phy.rx & BIT(0)) {
   15836:	07d7      	lsls	r7, r2, #31
   15838:	d501      	bpl.n	1583e <event_connection_prepare+0x51e>
			conn->llcp_phy.rx = BIT(0);
   1583a:	2201      	movs	r2, #1
   1583c:	e7b8      	b.n	157b0 <event_connection_prepare+0x490>
		} else if (conn->llcp_phy.rx & BIT(2)) {
   1583e:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
   15842:	bf18      	it	ne
   15844:	2204      	movne	r2, #4
   15846:	e7b3      	b.n	157b0 <event_connection_prepare+0x490>
		LL_ASSERT(0);
   15848:	4b52      	ldr	r3, [pc, #328]	; (15994 <event_connection_prepare+0x674>)
   1584a:	681b      	ldr	r3, [r3, #0]
   1584c:	075c      	lsls	r4, r3, #29
   1584e:	f43f ad85 	beq.w	1535c <event_connection_prepare+0x3c>
   15852:	2301      	movs	r3, #1
   15854:	f04f 0200 	mov.w	r2, #0
   15858:	f363 0202 	bfi	r2, r3, #0, #3
   1585c:	494e      	ldr	r1, [pc, #312]	; (15998 <event_connection_prepare+0x678>)
   1585e:	4b4f      	ldr	r3, [pc, #316]	; (1599c <event_connection_prepare+0x67c>)
   15860:	1a5b      	subs	r3, r3, r1
   15862:	f36f 02c5 	bfc	r2, #3, #3
   15866:	08db      	lsrs	r3, r3, #3
   15868:	f363 128f 	bfi	r2, r3, #6, #10
   1586c:	494f      	ldr	r1, [pc, #316]	; (159ac <event_connection_prepare+0x68c>)
   1586e:	e73c      	b.n	156ea <event_connection_prepare+0x3ca>
	if (!conn_upd) {
   15870:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
   15874:	b90b      	cbnz	r3, 1587a <event_connection_prepare+0x55a>
		_radio.conn_upd = conn;
   15876:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   1587a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1587e:	f013 0303 	ands.w	r3, r3, #3
   15882:	f000 809f 	beq.w	159c4 <event_connection_prepare+0x6a4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15886:	4848      	ldr	r0, [pc, #288]	; (159a8 <event_connection_prepare+0x688>)
   15888:	f7fb fd30 	bl	112ec <mem_acquire>
		if (!node_tx) {
   1588c:	4607      	mov	r7, r0
   1588e:	2800      	cmp	r0, #0
   15890:	f000 82bd 	beq.w	15e0e <event_connection_prepare+0xaee>
		switch (conn->llcp.conn_upd.state) {
   15894:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15898:	f003 0303 	and.w	r3, r3, #3
   1589c:	2b01      	cmp	r3, #1
   1589e:	d015      	beq.n	158cc <event_connection_prepare+0x5ac>
   158a0:	2b02      	cmp	r3, #2
   158a2:	d075      	beq.n	15990 <event_connection_prepare+0x670>
			LL_ASSERT(0);
   158a4:	4b3b      	ldr	r3, [pc, #236]	; (15994 <event_connection_prepare+0x674>)
   158a6:	681b      	ldr	r3, [r3, #0]
   158a8:	0758      	lsls	r0, r3, #29
   158aa:	f43f ad57 	beq.w	1535c <event_connection_prepare+0x3c>
   158ae:	2301      	movs	r3, #1
   158b0:	f04f 0200 	mov.w	r2, #0
   158b4:	f363 0202 	bfi	r2, r3, #0, #3
   158b8:	4937      	ldr	r1, [pc, #220]	; (15998 <event_connection_prepare+0x678>)
   158ba:	4b38      	ldr	r3, [pc, #224]	; (1599c <event_connection_prepare+0x67c>)
   158bc:	1a5b      	subs	r3, r3, r1
   158be:	f36f 02c5 	bfc	r2, #3, #3
   158c2:	08db      	lsrs	r3, r3, #3
   158c4:	f363 128f 	bfi	r2, r3, #6, #10
   158c8:	4939      	ldr	r1, [pc, #228]	; (159b0 <event_connection_prepare+0x690>)
   158ca:	e70e      	b.n	156ea <event_connection_prepare+0x3ca>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
   158cc:	4a39      	ldr	r2, [pc, #228]	; (159b4 <event_connection_prepare+0x694>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   158ce:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   158d2:	7939      	ldrb	r1, [r7, #4]
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   158d4:	f36f 0301 	bfc	r3, #0, #2
   158d8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
   158dc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   158de:	3306      	adds	r3, #6
   158e0:	4433      	add	r3, r6
   158e2:	b29b      	uxth	r3, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   158e4:	f041 0103 	orr.w	r1, r1, #3
	conn->llcp.conn_upd.instant =
   158e8:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   158ec:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
   158ee:	210c      	movs	r1, #12
   158f0:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   158f2:	2100      	movs	r1, #0
   158f4:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
   158f6:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
   158fa:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   158fc:	f240 40e2 	movw	r0, #1250	; 0x4e2
   15900:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   15904:	fbb1 f1f0 	udiv	r1, r1, r0
   15908:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
   1590c:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
   15910:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   15914:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   15918:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
   1591c:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
   15920:	f8a7 100f 	strh.w	r1, [r7, #15]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   15924:	6821      	ldr	r1, [r4, #0]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
   15926:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   1592a:	2900      	cmp	r1, #0
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   1592c:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   15930:	da0b      	bge.n	1594a <event_connection_prepare+0x62a>
			u32_t ticks_prepare_to_start =
   15932:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
   15936:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
   1593a:	4283      	cmp	r3, r0
   1593c:	bf2c      	ite	cs
   1593e:	4443      	addcs	r3, r8
   15940:	eb08 0300 	addcc.w	r3, r8, r0
   15944:	1a5b      	subs	r3, r3, r1
   15946:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
   1594a:	f107 0309 	add.w	r3, r7, #9
   1594e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
   15952:	4b19      	ldr	r3, [pc, #100]	; (159b8 <event_connection_prepare+0x698>)
		mayfly_sched_offset->param = (void *)conn;
   15954:	e9c3 4202 	strd	r4, r2, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   15958:	2201      	movs	r2, #1
   1595a:	4611      	mov	r1, r2
   1595c:	2000      	movs	r0, #0
   1595e:	f7fb fd8d 	bl	1147c <mayfly_enqueue>
		LL_ASSERT(!retval);
   15962:	2800      	cmp	r0, #0
   15964:	f000 824f 	beq.w	15e06 <event_connection_prepare+0xae6>
   15968:	4b0a      	ldr	r3, [pc, #40]	; (15994 <event_connection_prepare+0x674>)
   1596a:	681b      	ldr	r3, [r3, #0]
   1596c:	0759      	lsls	r1, r3, #29
   1596e:	f43f acf5 	beq.w	1535c <event_connection_prepare+0x3c>
   15972:	2301      	movs	r3, #1
   15974:	f04f 0200 	mov.w	r2, #0
   15978:	f363 0202 	bfi	r2, r3, #0, #3
   1597c:	4906      	ldr	r1, [pc, #24]	; (15998 <event_connection_prepare+0x678>)
   1597e:	4b07      	ldr	r3, [pc, #28]	; (1599c <event_connection_prepare+0x67c>)
   15980:	1a5b      	subs	r3, r3, r1
   15982:	f36f 02c5 	bfc	r2, #3, #3
   15986:	08db      	lsrs	r3, r3, #3
   15988:	f363 128f 	bfi	r2, r3, #6, #10
   1598c:	490b      	ldr	r1, [pc, #44]	; (159bc <event_connection_prepare+0x69c>)
   1598e:	e59d      	b.n	154cc <event_connection_prepare+0x1ac>
			fp_mayfly_select_or_use =
   15990:	4a0b      	ldr	r2, [pc, #44]	; (159c0 <event_connection_prepare+0x6a0>)
   15992:	e79c      	b.n	158ce <event_connection_prepare+0x5ae>
   15994:	2000e218 	.word	0x2000e218
   15998:	0002ef38 	.word	0x0002ef38
   1599c:	0002ef70 	.word	0x0002ef70
   159a0:	00032c13 	.word	0x00032c13
   159a4:	0003146d 	.word	0x0003146d
   159a8:	200013c8 	.word	0x200013c8
   159ac:	00032c38 	.word	0x00032c38
   159b0:	00032bdb 	.word	0x00032bdb
   159b4:	00014151 	.word	0x00014151
   159b8:	2000db14 	.word	0x2000db14
   159bc:	00032bc7 	.word	0x00032bc7
   159c0:	00013001 	.word	0x00013001
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   159c4:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
   159c8:	1bf7      	subs	r7, r6, r7
   159ca:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
   159cc:	043a      	lsls	r2, r7, #16
   159ce:	f100 821e 	bmi.w	15e0e <event_connection_prepare+0xaee>
		conn->llcp_ack = conn->llcp_req;
   159d2:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   159d6:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   159da:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
   159de:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   159e2:	428a      	cmp	r2, r1
   159e4:	d009      	beq.n	159fa <event_connection_prepare+0x6da>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   159e6:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   159ea:	f002 0207 	and.w	r2, r2, #7
   159ee:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   159f0:	bf04      	itt	eq
   159f2:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
   159f6:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
   159fa:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
   159fe:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
   15a00:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
   15a02:	bf08      	it	eq
   15a04:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
   15a08:	746b      	strb	r3, [r5, #17]
		if ((conn->llcp.conn_upd.interval !=
   15a0a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   15a0c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   15a10:	429a      	cmp	r2, r3
   15a12:	d114      	bne.n	15a3e <event_connection_prepare+0x71e>
		     conn->conn_interval) ||
   15a14:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   15a18:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   15a1a:	4299      	cmp	r1, r3
   15a1c:	d10f      	bne.n	15a3e <event_connection_prepare+0x71e>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   15a1e:	f240 43e2 	movw	r3, #1250	; 0x4e2
   15a22:	435a      	muls	r2, r3
   15a24:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15a28:	f242 7110 	movw	r1, #10000	; 0x2710
   15a2c:	fb01 2303 	mla	r3, r1, r3, r2
   15a30:	3b01      	subs	r3, #1
   15a32:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   15a36:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   15a38:	b29b      	uxth	r3, r3
   15a3a:	429a      	cmp	r2, r3
   15a3c:	d02c      	beq.n	15a98 <event_connection_prepare+0x778>
			node_rx = packet_rx_reserve_get(2);
   15a3e:	2002      	movs	r0, #2
   15a40:	f7fc fce0 	bl	12404 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   15a44:	b9a0      	cbnz	r0, 15a70 <event_connection_prepare+0x750>
   15a46:	4bce      	ldr	r3, [pc, #824]	; (15d80 <event_connection_prepare+0xa60>)
   15a48:	681b      	ldr	r3, [r3, #0]
   15a4a:	075d      	lsls	r5, r3, #29
   15a4c:	f43f ac86 	beq.w	1535c <event_connection_prepare+0x3c>
   15a50:	2301      	movs	r3, #1
   15a52:	f04f 0200 	mov.w	r2, #0
   15a56:	f363 0202 	bfi	r2, r3, #0, #3
   15a5a:	49ca      	ldr	r1, [pc, #808]	; (15d84 <event_connection_prepare+0xa64>)
   15a5c:	4bca      	ldr	r3, [pc, #808]	; (15d88 <event_connection_prepare+0xa68>)
   15a5e:	1a5b      	subs	r3, r3, r1
   15a60:	f360 02c5 	bfi	r2, r0, #3, #3
   15a64:	08db      	lsrs	r3, r3, #3
   15a66:	49c9      	ldr	r1, [pc, #804]	; (15d8c <event_connection_prepare+0xa6c>)
   15a68:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(node_rx);
   15a6c:	48c8      	ldr	r0, [pc, #800]	; (15d90 <event_connection_prepare+0xa70>)
   15a6e:	e473      	b.n	15358 <event_connection_prepare+0x38>
			node_rx->hdr.handle = conn->handle;
   15a70:	8c23      	ldrh	r3, [r4, #32]
   15a72:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   15a74:	2308      	movs	r3, #8
   15a76:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status = 0x00;
   15a78:	2300      	movs	r3, #0
   15a7a:	7203      	strb	r3, [r0, #8]
			radio_le_conn_update_cmplt->interval =
   15a7c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   15a80:	f8a0 3009 	strh.w	r3, [r0, #9]
			radio_le_conn_update_cmplt->latency =
   15a84:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
   15a88:	f8a0 300b 	strh.w	r3, [r0, #11]
			radio_le_conn_update_cmplt->timeout =
   15a8c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15a90:	f8a0 300d 	strh.w	r3, [r0, #13]
			packet_rx_enqueue();
   15a94:	f7fd fc18 	bl	132c8 <packet_rx_enqueue>
   15a98:	e9d4 3600 	ldrd	r3, r6, [r4]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   15a9c:	2b00      	cmp	r3, #0
   15a9e:	da09      	bge.n	15ab4 <event_connection_prepare+0x794>
			u32_t ticks_prepare_to_start =
   15aa0:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
   15aa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   15aa6:	4286      	cmp	r6, r0
   15aa8:	bf2c      	ite	cs
   15aaa:	44b0      	addcs	r8, r6
   15aac:	4480      	addcc	r8, r0
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
   15aae:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   15ab0:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
   15ab4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
   15ab6:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
   15aba:	49b6      	ldr	r1, [pc, #728]	; (15d94 <event_connection_prepare+0xa74>)
		conn_interval_old = instant_latency * conn->conn_interval;
   15abc:	fb13 f307 	smulbb	r3, r3, r7
   15ac0:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
   15ac2:	fbb3 f2fa 	udiv	r2, r3, sl
   15ac6:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
   15aca:	fb1a f009 	smulbb	r0, sl, r9
   15ace:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   15ad0:	4283      	cmp	r3, r0
   15ad2:	f080 80cd 	bcs.w	15c70 <event_connection_prepare+0x950>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
   15ad6:	1ac0      	subs	r0, r0, r3
   15ad8:	f240 1223 	movw	r2, #291	; 0x123
   15adc:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   15ae0:	4342      	muls	r2, r0
   15ae2:	fb01 230c 	mla	r3, r1, ip, r2
   15ae6:	fba0 0101 	umull	r0, r1, r0, r1
   15aea:	4419      	add	r1, r3
   15aec:	a3a2      	add	r3, pc, #648	; (adr r3, 15d78 <event_connection_prepare+0xa58>)
   15aee:	e9d3 2300 	ldrd	r2, r3, [r3]
   15af2:	f7ea fbdf 	bl	2b4 <__aeabi_uldivmod>
   15af6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   15afa:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   15afe:	930c      	str	r3, [sp, #48]	; 0x30
		conn->latency_prepare -= (instant_latency - latency);
   15b00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   15b02:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 15dbc <event_connection_prepare+0xa9c>
   15b06:	1bdb      	subs	r3, r3, r7
   15b08:	444b      	add	r3, r9
   15b0a:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   15b0c:	6823      	ldr	r3, [r4, #0]
   15b0e:	429e      	cmp	r6, r3
   15b10:	bf38      	it	cc
   15b12:	461e      	movcc	r6, r3
   15b14:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   15b18:	930a      	str	r3, [sp, #40]	; 0x28
		if (conn->role) {
   15b1a:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   15b1e:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   15b20:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
   15b24:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   15b26:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
   15b2a:	f280 80b3 	bge.w	15c94 <event_connection_prepare+0x974>
				conn->slave.window_widening_periodic_us *
   15b2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   15b30:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   15b32:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
   15b36:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
   15b3a:	4a97      	ldr	r2, [pc, #604]	; (15d98 <event_connection_prepare+0xa78>)
   15b3c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   15b40:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   15b44:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
   15b4c:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
   15b50:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
   15b52:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   15b54:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
   15b58:	4b90      	ldr	r3, [pc, #576]	; (15d9c <event_connection_prepare+0xa7c>)
				conn->llcp.conn_upd.win_size * 1250;
   15b5a:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   15b5e:	f205 253f 	addw	r5, r5, #575	; 0x23f
   15b62:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
   15b66:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
   15b68:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
   15b6c:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
   15b6e:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
   15b70:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   15b72:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
   15b74:	429f      	cmp	r7, r3
   15b76:	bf94      	ite	ls
   15b78:	65e7      	strls	r7, [r4, #92]	; 0x5c
   15b7a:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
   15b7c:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
   15b7e:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
   15b80:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   15b82:	fba0 010b 	umull	r0, r1, r0, fp
   15b86:	a37c      	add	r3, pc, #496	; (adr r3, 15d78 <event_connection_prepare+0xa58>)
   15b88:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b8c:	f7ea fb92 	bl	2b4 <__aeabi_uldivmod>
   15b90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15b92:	1a1b      	subs	r3, r3, r0
   15b94:	930c      	str	r3, [sp, #48]	; 0x30
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   15b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15b98:	fbb3 f0f8 	udiv	r0, r3, r8
   15b9c:	fb08 f000 	mul.w	r0, r8, r0
   15ba0:	a375      	add	r3, pc, #468	; (adr r3, 15d78 <event_connection_prepare+0xa58>)
   15ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ba6:	fba0 010b 	umull	r0, r1, r0, fp
   15baa:	f7ea fb83 	bl	2b4 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
   15bae:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   15bb0:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   15bb4:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
   15bb8:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   15bbc:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   15bbe:	f242 7110 	movw	r1, #10000	; 0x2710
   15bc2:	fb01 6303 	mla	r3, r1, r3, r6
   15bc6:	3b01      	subs	r3, #1
   15bc8:	fbb3 f3f6 	udiv	r3, r3, r6
   15bcc:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   15bce:	4b74      	ldr	r3, [pc, #464]	; (15da0 <event_connection_prepare+0xa80>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
   15bd0:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   15bd4:	4433      	add	r3, r6
   15bd6:	fbb3 f3f6 	udiv	r3, r3, r6
   15bda:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   15bde:	4b71      	ldr	r3, [pc, #452]	; (15da4 <event_connection_prepare+0xa84>)
   15be0:	4433      	add	r3, r6
   15be2:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15be6:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   15be8:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15bea:	4299      	cmp	r1, r3
   15bec:	bfc4      	itt	gt
   15bee:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
   15bf2:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   15bf4:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15bf8:	bfc8      	it	gt
   15bfa:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
   15bfc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15c00:	bfc8      	it	gt
   15c02:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
   15c04:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
   15c08:	bf08      	it	eq
   15c0a:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15c0e:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
   15c12:	2000      	movs	r0, #0
   15c14:	2101      	movs	r1, #1
   15c16:	f009 f93d 	bl	1ee94 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   15c1a:	2200      	movs	r2, #0
   15c1c:	2101      	movs	r1, #1
		mayfly_was_enabled =
   15c1e:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   15c20:	4610      	mov	r0, r2
   15c22:	f7fb fc03 	bl	1142c <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   15c26:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
   15c2a:	f641 23ff 	movw	r3, #6911	; 0x1aff
   15c2e:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   15c30:	3207      	adds	r2, #7
		ticker_status =
   15c32:	9300      	str	r3, [sp, #0]
   15c34:	b2d2      	uxtb	r2, r2
   15c36:	4b5c      	ldr	r3, [pc, #368]	; (15da8 <event_connection_prepare+0xa88>)
   15c38:	4608      	mov	r0, r1
   15c3a:	f7fc fa71 	bl	12120 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15c3e:	f030 0802 	bics.w	r8, r0, #2
   15c42:	d034      	beq.n	15cae <event_connection_prepare+0x98e>
   15c44:	4b4e      	ldr	r3, [pc, #312]	; (15d80 <event_connection_prepare+0xa60>)
   15c46:	681b      	ldr	r3, [r3, #0]
   15c48:	075c      	lsls	r4, r3, #29
   15c4a:	f43f ab87 	beq.w	1535c <event_connection_prepare+0x3c>
   15c4e:	f04f 0200 	mov.w	r2, #0
   15c52:	2301      	movs	r3, #1
   15c54:	f363 0202 	bfi	r2, r3, #0, #3
   15c58:	f36f 02c5 	bfc	r2, #3, #3
   15c5c:	4949      	ldr	r1, [pc, #292]	; (15d84 <event_connection_prepare+0xa64>)
   15c5e:	4b4a      	ldr	r3, [pc, #296]	; (15d88 <event_connection_prepare+0xa68>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15c60:	4852      	ldr	r0, [pc, #328]	; (15dac <event_connection_prepare+0xa8c>)
   15c62:	1a5b      	subs	r3, r3, r1
   15c64:	08db      	lsrs	r3, r3, #3
   15c66:	f363 128f 	bfi	r2, r3, #6, #10
   15c6a:	4948      	ldr	r1, [pc, #288]	; (15d8c <event_connection_prepare+0xa6c>)
   15c6c:	f7ff bb74 	b.w	15358 <event_connection_prepare+0x38>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   15c70:	fb0a 3212 	mls	r2, sl, r2, r3
   15c74:	fa1f fb82 	uxth.w	fp, r2
   15c78:	fbab 0101 	umull	r0, r1, fp, r1
   15c7c:	f240 1323 	movw	r3, #291	; 0x123
   15c80:	fb03 110b 	mla	r1, r3, fp, r1
   15c84:	a33c      	add	r3, pc, #240	; (adr r3, 15d78 <event_connection_prepare+0xa58>)
   15c86:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c8a:	f7ea fb13 	bl	2b4 <__aeabi_uldivmod>
   15c8e:	eba8 0300 	sub.w	r3, r8, r0
   15c92:	e734      	b.n	15afe <event_connection_prepare+0x7de>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   15c94:	990a      	ldr	r1, [sp, #40]	; 0x28
   15c96:	a338      	add	r3, pc, #224	; (adr r3, 15d78 <event_connection_prepare+0xa58>)
   15c98:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c9c:	fba1 010b 	umull	r0, r1, r1, fp
   15ca0:	f7ea fb08 	bl	2b4 <__aeabi_uldivmod>
   15ca4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   15ca8:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
   15caa:	4635      	mov	r5, r6
   15cac:	e782      	b.n	15bb4 <event_connection_prepare+0x894>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   15cae:	fba5 ab0b 	umull	sl, fp, r5, fp
   15cb2:	a331      	add	r3, pc, #196	; (adr r3, 15d78 <event_connection_prepare+0xa58>)
   15cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15cb8:	4650      	mov	r0, sl
   15cba:	4659      	mov	r1, fp
   15cbc:	f7ea fafa 	bl	2b4 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
   15cc0:	2300      	movs	r3, #0
   15cc2:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
   15cc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   15cca:	990a      	ldr	r1, [sp, #40]	; 0x28
   15ccc:	4a38      	ldr	r2, [pc, #224]	; (15db0 <event_connection_prepare+0xa90>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15cce:	f894 6020 	ldrb.w	r6, [r4, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
   15cd2:	2307      	movs	r3, #7
   15cd4:	434b      	muls	r3, r1
   15cd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15cd8:	fb02 3301 	mla	r3, r2, r1, r3
   15cdc:	990a      	ldr	r1, [sp, #40]	; 0x28
   15cde:	fba1 1202 	umull	r1, r2, r1, r2
   15ce2:	441a      	add	r2, r3
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15ce4:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
   15ce8:	4608      	mov	r0, r1
   15cea:	ebba 0000 	subs.w	r0, sl, r0
   15cee:	4611      	mov	r1, r2
   15cf0:	eb6b 0101 	sbc.w	r1, fp, r1
   15cf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15cf8:	2300      	movs	r3, #0
   15cfa:	f7ea fadb 	bl	2b4 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15cfe:	68e3      	ldr	r3, [r4, #12]
   15d00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15d02:	f994 c01d 	ldrsb.w	ip, [r4, #29]
   15d06:	492b      	ldr	r1, [pc, #172]	; (15db4 <event_connection_prepare+0xa94>)
   15d08:	441a      	add	r2, r3
   15d0a:	4613      	mov	r3, r2
   15d0c:	4a2a      	ldr	r2, [pc, #168]	; (15db8 <event_connection_prepare+0xa98>)
   15d0e:	ea32 022c 	bics.w	r2, r2, ip, asr #32
   15d12:	bf28      	it	cs
   15d14:	460a      	movcs	r2, r1
		ticker_status =
   15d16:	f641 310f 	movw	r1, #6927	; 0x1b0f
   15d1a:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15d1c:	3607      	adds	r6, #7
		ticker_status =
   15d1e:	4922      	ldr	r1, [pc, #136]	; (15da8 <event_connection_prepare+0xa88>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15d20:	b2f6      	uxtb	r6, r6
		ticker_status =
   15d22:	e9cd 3204 	strd	r3, r2, [sp, #16]
   15d26:	e9cd 4106 	strd	r4, r1, [sp, #24]
   15d2a:	e9cd 0802 	strd	r0, r8, [sp, #8]
   15d2e:	e9cd 7500 	strd	r7, r5, [sp]
   15d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15d34:	4632      	mov	r2, r6
   15d36:	4641      	mov	r1, r8
   15d38:	4640      	mov	r0, r8
   15d3a:	f7fc f95d 	bl	11ff8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15d3e:	f030 0002 	bics.w	r0, r0, #2
   15d42:	d00c      	beq.n	15d5e <event_connection_prepare+0xa3e>
   15d44:	4b0e      	ldr	r3, [pc, #56]	; (15d80 <event_connection_prepare+0xa60>)
   15d46:	681b      	ldr	r3, [r3, #0]
   15d48:	0758      	lsls	r0, r3, #29
   15d4a:	f43f ab07 	beq.w	1535c <event_connection_prepare+0x3c>
   15d4e:	f04f 0200 	mov.w	r2, #0
   15d52:	2301      	movs	r3, #1
   15d54:	f363 0202 	bfi	r2, r3, #0, #3
   15d58:	f368 02c5 	bfi	r2, r8, #3, #3
   15d5c:	e77e      	b.n	15c5c <event_connection_prepare+0x93c>
		if (mayfly_was_enabled) {
   15d5e:	f1b9 0f00 	cmp.w	r9, #0
   15d62:	f000 83c5 	beq.w	164f0 <event_connection_prepare+0x11d0>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   15d66:	2201      	movs	r2, #1
   15d68:	4611      	mov	r1, r2
}
   15d6a:	b00f      	add	sp, #60	; 0x3c
   15d6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   15d70:	f7fb bb5c 	b.w	1142c <mayfly_enable>
   15d74:	f3af 8000 	nop.w
   15d78:	1afd498d 	.word	0x1afd498d
   15d7c:	00000007 	.word	0x00000007
   15d80:	2000e218 	.word	0x2000e218
   15d84:	0002ef38 	.word	0x0002ef38
   15d88:	0002ef70 	.word	0x0002ef70
   15d8c:	00032bdb 	.word	0x00032bdb
   15d90:	00033346 	.word	0x00033346
   15d94:	09ce5400 	.word	0x09ce5400
   15d98:	00032f72 	.word	0x00032f72
   15d9c:	000f4240 	.word	0x000f4240
   15da0:	026259ff 	.word	0x026259ff
   15da4:	01c9c37f 	.word	0x01c9c37f
   15da8:	0001351d 	.word	0x0001351d
   15dac:	00032d7f 	.word	0x00032d7f
   15db0:	1afd498d 	.word	0x1afd498d
   15db4:	00016705 	.word	0x00016705
   15db8:	00016709 	.word	0x00016709
   15dbc:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
   15dc0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15dc4:	2b00      	cmp	r3, #0
   15dc6:	d05e      	beq.n	15e86 <event_connection_prepare+0xb66>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15dc8:	48c7      	ldr	r0, [pc, #796]	; (160e8 <event_connection_prepare+0xdc8>)
   15dca:	f7fb fa8f 	bl	112ec <mem_acquire>
		if (node_tx) {
   15dce:	4607      	mov	r7, r0
   15dd0:	b1e8      	cbz	r0, 15e0e <event_connection_prepare+0xaee>
			conn->llcp.chan_map.initiate = 0;
   15dd2:	2300      	movs	r3, #0
   15dd4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   15dd8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   15dda:	3306      	adds	r3, #6
   15ddc:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
   15dde:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15de2:	7903      	ldrb	r3, [r0, #4]
   15de4:	f043 0303 	orr.w	r3, r3, #3
   15de8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15dea:	2308      	movs	r3, #8
   15dec:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   15dee:	2301      	movs	r3, #1
   15df0:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   15df2:	2205      	movs	r2, #5
   15df4:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15df8:	3008      	adds	r0, #8
   15dfa:	f7f0 ff45 	bl	6c88 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   15dfe:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15e02:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
   15e06:	4639      	mov	r1, r7
   15e08:	4620      	mov	r0, r4
   15e0a:	f7ff f9cd 	bl	151a8 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   15e0e:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   15e12:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15e16:	429a      	cmp	r2, r3
   15e18:	d01e      	beq.n	15e58 <event_connection_prepare+0xb38>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15e1a:	2005      	movs	r0, #5
   15e1c:	f7fe fdfa 	bl	14a14 <event_stop.constprop.33>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15e20:	48b1      	ldr	r0, [pc, #708]	; (160e8 <event_connection_prepare+0xdc8>)
   15e22:	f7fb fa63 	bl	112ec <mem_acquire>
		if (node_tx) {
   15e26:	4601      	mov	r1, r0
   15e28:	b1b0      	cbz	r0, 15e58 <event_connection_prepare+0xb38>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   15e2a:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15e2e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15e32:	7903      	ldrb	r3, [r0, #4]
   15e34:	f043 0303 	orr.w	r3, r3, #3
   15e38:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15e3a:	2302      	movs	r3, #2
   15e3c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   15e3e:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
   15e40:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   15e44:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   15e46:	4620      	mov	r0, r4
   15e48:	f7ff f9ae 	bl	151a8 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   15e4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
   15e4e:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
   15e50:	bf98      	it	ls
   15e52:	3301      	addls	r3, #1
   15e54:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   15e58:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15e5c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15e60:	429a      	cmp	r2, r3
   15e62:	f000 832c 	beq.w	164be <event_connection_prepare+0x119e>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15e66:	2005      	movs	r0, #5
   15e68:	f7fe fdd4 	bl	14a14 <event_stop.constprop.33>
	switch (conn->llcp_length.state) {
   15e6c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   15e70:	f003 0303 	and.w	r3, r3, #3
   15e74:	2b03      	cmp	r3, #3
   15e76:	f200 834d 	bhi.w	16514 <event_connection_prepare+0x11f4>
   15e7a:	e8df f013 	tbh	[pc, r3, lsl #1]
   15e7e:	02d1      	.short	0x02d1
   15e80:	03200320 	.word	0x03200320
   15e84:	033c      	.short	0x033c
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   15e86:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15e8a:	1af3      	subs	r3, r6, r3
   15e8c:	0419      	lsls	r1, r3, #16
   15e8e:	d4be      	bmi.n	15e0e <event_connection_prepare+0xaee>
		conn->llcp_ack = conn->llcp_req;
   15e90:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15e94:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   15e98:	f104 0717 	add.w	r7, r4, #23
   15e9c:	2205      	movs	r2, #5
   15e9e:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15ea2:	4638      	mov	r0, r7
   15ea4:	f7f0 fef0 	bl	6c88 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   15ea8:	2105      	movs	r1, #5
   15eaa:	4638      	mov	r0, r7
   15eac:	f7fb fbc6 	bl	1163c <util_ones_count_get>
		conn->data_chan_count =
   15eb0:	7f63      	ldrb	r3, [r4, #29]
   15eb2:	f360 0305 	bfi	r3, r0, #0, #6
   15eb6:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   15eb8:	2301      	movs	r3, #1
   15eba:	7723      	strb	r3, [r4, #28]
   15ebc:	e7a7      	b.n	15e0e <event_connection_prepare+0xaee>
	if (conn->llcp.encryption.initiate) {
   15ebe:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
   15ec2:	f1b9 0f00 	cmp.w	r9, #0
   15ec6:	d1a2      	bne.n	15e0e <event_connection_prepare+0xaee>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15ec8:	4887      	ldr	r0, [pc, #540]	; (160e8 <event_connection_prepare+0xdc8>)
   15eca:	f7fb fa0f 	bl	112ec <mem_acquire>
	if (!node_tx) {
   15ece:	4607      	mov	r7, r0
   15ed0:	2800      	cmp	r0, #0
   15ed2:	d09c      	beq.n	15e0e <event_connection_prepare+0xaee>
	if (!conn->role) {
   15ed4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15ed8:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
   15eda:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
   15ede:	db4d      	blt.n	15f7c <event_connection_prepare+0xc5c>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
   15ee0:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
   15ee4:	465b      	mov	r3, fp
   15ee6:	464a      	mov	r2, r9
   15ee8:	f104 0194 	add.w	r1, r4, #148	; 0x94
   15eec:	f104 0084 	add.w	r0, r4, #132	; 0x84
   15ef0:	f008 fb38 	bl	1e564 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   15ef4:	2210      	movs	r2, #16
   15ef6:	4659      	mov	r1, fp
   15ef8:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   15efc:	f7f0 fec4 	bl	6c88 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   15f00:	f504 7189 	add.w	r1, r4, #274	; 0x112
   15f04:	2208      	movs	r2, #8
   15f06:	f204 1033 	addw	r0, r4, #307	; 0x133
   15f0a:	f7f0 febd 	bl	6c88 <memcpy>
		conn->ccm_rx.direction = 0;
   15f0e:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
   15f12:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
   15f16:	f369 0300 	bfi	r3, r9, #0, #1
   15f1a:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
   15f1e:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
   15f22:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
   15f26:	f043 0301 	orr.w	r3, r3, #1
   15f2a:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
   15f2e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
   15f32:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
   15f36:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
   15f3a:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
   15f3e:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
   15f42:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
   15f46:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
   15f4a:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
   15f4e:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
   15f52:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
   15f56:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
   15f5a:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
   15f5e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   15f62:	4651      	mov	r1, sl
   15f64:	4620      	mov	r0, r4
   15f66:	f7ff f9ad 	bl	152c4 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
   15f6a:	4639      	mov	r1, r7
   15f6c:	4620      	mov	r0, r4
   15f6e:	f7ff f91b 	bl	151a8 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
   15f72:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15f76:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   15f7a:	e748      	b.n	15e0e <event_connection_prepare+0xaee>
	else if (!conn->pause_tx || conn->refresh) {
   15f7c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15f80:	f003 0348 	and.w	r3, r3, #72	; 0x48
   15f84:	2b08      	cmp	r3, #8
   15f86:	f000 809f 	beq.w	160c8 <event_connection_prepare+0xda8>
		if (conn->llcp.encryption.error_code) {
   15f8a:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
   15f8e:	f1b9 0f00 	cmp.w	r9, #0
   15f92:	d020      	beq.n	15fd6 <event_connection_prepare+0xcb6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15f94:	7903      	ldrb	r3, [r0, #4]
   15f96:	f043 0303 	orr.w	r3, r3, #3
   15f9a:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   15f9c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   15fa0:	069a      	lsls	r2, r3, #26
   15fa2:	d512      	bpl.n	15fca <event_connection_prepare+0xcaa>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   15fa4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   15fa8:	075b      	lsls	r3, r3, #29
   15faa:	d50e      	bpl.n	15fca <event_connection_prepare+0xcaa>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   15fac:	2311      	movs	r3, #17
   15fae:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   15fb0:	2303      	movs	r3, #3
   15fb2:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
   15fb4:	f880 9009 	strb.w	r9, [r0, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   15fb8:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   15fba:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   15fbc:	797b      	ldrb	r3, [r7, #5]
   15fbe:	3301      	adds	r3, #1
   15fc0:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
   15fc2:	2300      	movs	r3, #0
   15fc4:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
   15fc8:	e7cf      	b.n	15f6a <event_connection_prepare+0xc4a>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   15fca:	230d      	movs	r3, #13
   15fcc:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   15fce:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   15fd2:	2301      	movs	r3, #1
   15fd4:	e7f1      	b.n	15fba <event_connection_prepare+0xc9a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15fd6:	4844      	ldr	r0, [pc, #272]	; (160e8 <event_connection_prepare+0xdc8>)
   15fd8:	f7fb f988 	bl	112ec <mem_acquire>
	if (!node_tx) {
   15fdc:	4682      	mov	sl, r0
   15fde:	2800      	cmp	r0, #0
   15fe0:	d06d      	beq.n	160be <event_connection_prepare+0xd9e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15fe2:	7903      	ldrb	r3, [r0, #4]
   15fe4:	f043 0303 	orr.w	r3, r3, #3
   15fe8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   15fea:	230d      	movs	r3, #13
   15fec:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   15fee:	f04f 0b04 	mov.w	fp, #4
				pdu_ctrl_tx->llctrl.enc_rsp.skds,
   15ff2:	f100 0308 	add.w	r3, r0, #8
	entropy_get_entropy_isr(_radio.entropy,
   15ff6:	4619      	mov	r1, r3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   15ff8:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_get_entropy_isr(_radio.entropy,
   15ffc:	220c      	movs	r2, #12
   15ffe:	6868      	ldr	r0, [r5, #4]
   16000:	930a      	str	r3, [sp, #40]	; 0x28
   16002:	f7fe ff03 	bl	14e0c <entropy_get_entropy_isr.constprop.35>
	memcpy(&conn->llcp.encryption.skd[8],
   16006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16008:	2208      	movs	r2, #8
   1600a:	4619      	mov	r1, r3
   1600c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   16010:	f7f0 fe3a 	bl	6c88 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   16014:	465a      	mov	r2, fp
   16016:	f10a 0110 	add.w	r1, sl, #16
   1601a:	f504 708b 	add.w	r0, r4, #278	; 0x116
   1601e:	f7f0 fe33 	bl	6c88 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   16022:	4651      	mov	r1, sl
   16024:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   16026:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
   1602a:	f7ff f8bd 	bl	151a8 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   1602e:	4653      	mov	r3, sl
   16030:	464a      	mov	r2, r9
   16032:	f104 0194 	add.w	r1, r4, #148	; 0x94
   16036:	f104 0084 	add.w	r0, r4, #132	; 0x84
   1603a:	f008 fa93 	bl	1e564 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
   1603e:	2210      	movs	r2, #16
   16040:	4651      	mov	r1, sl
   16042:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   16046:	f7f0 fe1f 	bl	6c88 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   1604a:	2208      	movs	r2, #8
   1604c:	f504 7189 	add.w	r1, r4, #274	; 0x112
   16050:	f204 1033 	addw	r0, r4, #307	; 0x133
   16054:	f7f0 fe18 	bl	6c88 <memcpy>
			conn->ccm_rx.direction = 1;
   16058:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
   1605c:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
   16060:	f043 0301 	orr.w	r3, r3, #1
   16064:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
   16068:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
   1606c:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
   16070:	f369 0300 	bfi	r3, r9, #0, #1
   16074:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   16078:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
   1607c:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
   16080:	f043 0310 	orr.w	r3, r3, #16
   16084:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16088:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
   1608a:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1608e:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
   16092:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
   16096:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
   1609a:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
   1609e:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   160a2:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
   160a6:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
   160aa:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
   160ae:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   160b2:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   160b4:	2301      	movs	r3, #1
   160b6:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
   160b8:	2305      	movs	r3, #5
   160ba:	71fb      	strb	r3, [r7, #7]
   160bc:	e755      	b.n	15f6a <event_connection_prepare+0xc4a>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   160be:	490a      	ldr	r1, [pc, #40]	; (160e8 <event_connection_prepare+0xdc8>)
   160c0:	4638      	mov	r0, r7
   160c2:	f7fb f92c 	bl	1131e <mem_release>
   160c6:	e6a2      	b.n	15e0e <event_connection_prepare+0xaee>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
   160c8:	4651      	mov	r1, sl
   160ca:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
   160ce:	f7ff f8f9 	bl	152c4 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
   160d2:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
   160d6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   160da:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
   160de:	f369 03c3 	bfi	r3, r9, #3, #1
   160e2:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   160e6:	e740      	b.n	15f6a <event_connection_prepare+0xc4a>
   160e8:	200013c8 	.word	0x200013c8
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   160ec:	48c4      	ldr	r0, [pc, #784]	; (16400 <event_connection_prepare+0x10e0>)
   160ee:	f7fb f8fd 	bl	112ec <mem_acquire>
	if (node_tx) {
   160f2:	4607      	mov	r7, r0
   160f4:	2800      	cmp	r0, #0
   160f6:	f43f ae8a 	beq.w	15e0e <event_connection_prepare+0xaee>
		conn->llcp_ack = conn->llcp_req;
   160fa:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   160fe:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   16102:	4bc0      	ldr	r3, [pc, #768]	; (16404 <event_connection_prepare+0x10e4>)
   16104:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16108:	7903      	ldrb	r3, [r0, #4]
   1610a:	f043 0303 	orr.w	r3, r3, #3
   1610e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   16110:	2309      	movs	r3, #9
   16112:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
   16114:	f994 301d 	ldrsb.w	r3, [r4, #29]
   16118:	2b00      	cmp	r3, #0
   1611a:	bfb4      	ite	lt
   1611c:	230e      	movlt	r3, #14
   1611e:	2308      	movge	r3, #8
		(void)memset(&pdu_ctrl_tx->llctrl.feature_req.features[0],
   16120:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
   16122:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu_ctrl_tx->llctrl.feature_req.features[0],
   16124:	2100      	movs	r1, #0
   16126:	4410      	add	r0, r2
   16128:	f7f0 fddb 	bl	6ce2 <memset>
			conn->llcp_features & 0xFF;
   1612c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
   16130:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
   16132:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
   16134:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
   16136:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
   16138:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
   1613a:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
   1613c:	4620      	mov	r0, r4
   1613e:	f7ff f833 	bl	151a8 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   16142:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   16146:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1614a:	e660      	b.n	15e0e <event_connection_prepare+0xaee>
	if (conn->llcp_version.tx == 0) {
   1614c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   16150:	07df      	lsls	r7, r3, #31
   16152:	d424      	bmi.n	1619e <event_connection_prepare+0xe7e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16154:	48aa      	ldr	r0, [pc, #680]	; (16400 <event_connection_prepare+0x10e0>)
   16156:	f7fb f8c9 	bl	112ec <mem_acquire>
		if (node_tx) {
   1615a:	4601      	mov	r1, r0
   1615c:	2800      	cmp	r0, #0
   1615e:	f43f ae56 	beq.w	15e0e <event_connection_prepare+0xaee>
			conn->llcp_ack = conn->llcp_req;
   16162:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   16166:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   1616a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   1616e:	f043 0301 	orr.w	r3, r3, #1
   16172:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16176:	7903      	ldrb	r3, [r0, #4]
   16178:	f043 0303 	orr.w	r3, r3, #3
   1617c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   1617e:	2306      	movs	r3, #6
   16180:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   16182:	230c      	movs	r3, #12
   16184:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
   16186:	2309      	movs	r3, #9
   16188:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
   1618a:	f06f 030e 	mvn.w	r3, #14
   1618e:	7243      	strb	r3, [r0, #9]
   16190:	2305      	movs	r3, #5
   16192:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
   16194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16198:	72c3      	strb	r3, [r0, #11]
   1619a:	7303      	strb	r3, [r0, #12]
   1619c:	e7ce      	b.n	1613c <event_connection_prepare+0xe1c>
	} else if (conn->llcp_version.rx != 0) {
   1619e:	f013 0302 	ands.w	r3, r3, #2
   161a2:	d035      	beq.n	16210 <event_connection_prepare+0xef0>
		conn->llcp_ack = conn->llcp_req;
   161a4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   161a8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
   161ac:	2002      	movs	r0, #2
   161ae:	f7fc f929 	bl	12404 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   161b2:	b998      	cbnz	r0, 161dc <event_connection_prepare+0xebc>
   161b4:	4b94      	ldr	r3, [pc, #592]	; (16408 <event_connection_prepare+0x10e8>)
   161b6:	681b      	ldr	r3, [r3, #0]
   161b8:	075c      	lsls	r4, r3, #29
   161ba:	f43f a8cf 	beq.w	1535c <event_connection_prepare+0x3c>
   161be:	2301      	movs	r3, #1
   161c0:	f04f 0200 	mov.w	r2, #0
   161c4:	f363 0202 	bfi	r2, r3, #0, #3
   161c8:	4990      	ldr	r1, [pc, #576]	; (1640c <event_connection_prepare+0x10ec>)
   161ca:	4b91      	ldr	r3, [pc, #580]	; (16410 <event_connection_prepare+0x10f0>)
   161cc:	1a5b      	subs	r3, r3, r1
   161ce:	f360 02c5 	bfi	r2, r0, #3, #3
   161d2:	08db      	lsrs	r3, r3, #3
   161d4:	f363 128f 	bfi	r2, r3, #6, #10
   161d8:	498e      	ldr	r1, [pc, #568]	; (16414 <event_connection_prepare+0x10f4>)
   161da:	e447      	b.n	15a6c <event_connection_prepare+0x74c>
		node_rx->hdr.handle = conn->handle;
   161dc:	8c23      	ldrh	r3, [r4, #32]
   161de:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   161e0:	2301      	movs	r3, #1
   161e2:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   161e4:	7a03      	ldrb	r3, [r0, #8]
   161e6:	f043 0303 	orr.w	r3, r3, #3
   161ea:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
   161ec:	2306      	movs	r3, #6
   161ee:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
   161f0:	230c      	movs	r3, #12
   161f2:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
   161f4:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   161f8:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
   161fa:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   161fe:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
   16202:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
   16206:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
   1620a:	f7fd f85d 	bl	132c8 <packet_rx_enqueue>
   1620e:	e5fe      	b.n	15e0e <event_connection_prepare+0xaee>
		LL_ASSERT(0);
   16210:	4a7d      	ldr	r2, [pc, #500]	; (16408 <event_connection_prepare+0x10e8>)
   16212:	6812      	ldr	r2, [r2, #0]
   16214:	0750      	lsls	r0, r2, #29
   16216:	f43f a8a1 	beq.w	1535c <event_connection_prepare+0x3c>
   1621a:	2101      	movs	r1, #1
   1621c:	f04f 0200 	mov.w	r2, #0
   16220:	f361 0202 	bfi	r2, r1, #0, #3
   16224:	f363 02c5 	bfi	r2, r3, #3, #3
   16228:	4978      	ldr	r1, [pc, #480]	; (1640c <event_connection_prepare+0x10ec>)
   1622a:	4b79      	ldr	r3, [pc, #484]	; (16410 <event_connection_prepare+0x10f0>)
   1622c:	1a5b      	subs	r3, r3, r1
   1622e:	08db      	lsrs	r3, r3, #3
   16230:	f363 128f 	bfi	r2, r3, #6, #10
   16234:	4977      	ldr	r1, [pc, #476]	; (16414 <event_connection_prepare+0x10f4>)
   16236:	f7ff ba58 	b.w	156ea <event_connection_prepare+0x3ca>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1623a:	4871      	ldr	r0, [pc, #452]	; (16400 <event_connection_prepare+0x10e0>)
   1623c:	f7fb f856 	bl	112ec <mem_acquire>
	if (node_tx) {
   16240:	4601      	mov	r1, r0
   16242:	2800      	cmp	r0, #0
   16244:	f43f ade3 	beq.w	15e0e <event_connection_prepare+0xaee>
		conn->llcp_ack = conn->llcp_req;
   16248:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1624c:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16250:	7903      	ldrb	r3, [r0, #4]
   16252:	f043 0303 	orr.w	r3, r3, #3
   16256:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   16258:	2301      	movs	r3, #1
   1625a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   1625c:	2312      	movs	r3, #18
   1625e:	71c3      	strb	r3, [r0, #7]
   16260:	e76c      	b.n	1613c <event_connection_prepare+0xe1c>
	if (conn->llcp.phy_upd_ind.initiate) {
   16262:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   16266:	07d1      	lsls	r1, r2, #31
   16268:	d561      	bpl.n	1632e <event_connection_prepare+0x100e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1626a:	4865      	ldr	r0, [pc, #404]	; (16400 <event_connection_prepare+0x10e0>)
   1626c:	f7fb f83e 	bl	112ec <mem_acquire>
		if (node_tx) {
   16270:	4607      	mov	r7, r0
   16272:	2800      	cmp	r0, #0
   16274:	f43f adcb 	beq.w	15e0e <event_connection_prepare+0xaee>
			conn->llcp.phy_upd_ind.initiate = 0;
   16278:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1627c:	f36f 0300 	bfc	r3, #0, #1
   16280:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   16284:	b2db      	uxtb	r3, r3
   16286:	f3c3 0982 	ubfx	r9, r3, #2, #3
   1628a:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
   1628e:	d148      	bne.n	16322 <event_connection_prepare+0x1002>
				conn->llcp_ack = conn->llcp_req;
   16290:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   16294:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
   16298:	079a      	lsls	r2, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
   1629a:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   1629e:	d52a      	bpl.n	162f6 <event_connection_prepare+0xfd6>
					node_rx = packet_rx_reserve_get(2);
   162a0:	2002      	movs	r0, #2
   162a2:	f7fc f8af 	bl	12404 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
   162a6:	b9a0      	cbnz	r0, 162d2 <event_connection_prepare+0xfb2>
		LL_ASSERT(node_rx);
   162a8:	4b57      	ldr	r3, [pc, #348]	; (16408 <event_connection_prepare+0x10e8>)
   162aa:	681b      	ldr	r3, [r3, #0]
   162ac:	075e      	lsls	r6, r3, #29
   162ae:	f43f a855 	beq.w	1535c <event_connection_prepare+0x3c>
   162b2:	2301      	movs	r3, #1
   162b4:	f04f 0200 	mov.w	r2, #0
   162b8:	f363 0202 	bfi	r2, r3, #0, #3
   162bc:	4953      	ldr	r1, [pc, #332]	; (1640c <event_connection_prepare+0x10ec>)
   162be:	4b54      	ldr	r3, [pc, #336]	; (16410 <event_connection_prepare+0x10f0>)
   162c0:	1a5b      	subs	r3, r3, r1
   162c2:	f360 02c5 	bfi	r2, r0, #3, #3
   162c6:	08db      	lsrs	r3, r3, #3
   162c8:	f363 128f 	bfi	r2, r3, #6, #10
   162cc:	4952      	ldr	r1, [pc, #328]	; (16418 <event_connection_prepare+0x10f8>)
   162ce:	f7ff bbcd 	b.w	15a6c <event_connection_prepare+0x74c>
					node_rx->hdr.handle = conn->handle;
   162d2:	8c23      	ldrh	r3, [r4, #32]
   162d4:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
   162d6:	f880 9008 	strb.w	r9, [r0, #8]
					node_rx->hdr.type =
   162da:	230c      	movs	r3, #12
   162dc:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
   162de:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   162e2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   162e6:	7243      	strb	r3, [r0, #9]
					upd->rx = conn->phy_rx;
   162e8:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   162ec:	f3c3 0302 	ubfx	r3, r3, #0, #3
   162f0:	7283      	strb	r3, [r0, #10]
					packet_rx_enqueue();
   162f2:	f7fc ffe9 	bl	132c8 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   162f6:	793b      	ldrb	r3, [r7, #4]
   162f8:	f043 0303 	orr.w	r3, r3, #3
   162fc:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
   162fe:	2305      	movs	r3, #5
   16300:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
   16302:	2318      	movs	r3, #24
   16304:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   16306:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1630a:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1630e:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   16310:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16314:	f3c3 1342 	ubfx	r3, r3, #5, #3
   16318:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
   1631a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1631e:	817b      	strh	r3, [r7, #10]
   16320:	e571      	b.n	15e06 <event_connection_prepare+0xae6>
								 conn->latency +
   16322:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   16324:	3306      	adds	r3, #6
   16326:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
   16328:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
   1632c:	e7e3      	b.n	162f6 <event_connection_prepare+0xfd6>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   1632e:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   16332:	1af3      	subs	r3, r6, r3
   16334:	041b      	lsls	r3, r3, #16
   16336:	f53f ad6a 	bmi.w	15e0e <event_connection_prepare+0xaee>
		conn->llcp_ack = conn->llcp_req;
   1633a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1633e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
   16342:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
   16346:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
   1634a:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   1634e:	bf18      	it	ne
   16350:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
   16354:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   16358:	bf1c      	itt	ne
   1635a:	f367 03c5 	bfine	r3, r7, #3, #3
   1635e:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   16362:	f012 0fe0 	tst.w	r2, #224	; 0xe0
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   16366:	bf1f      	itttt	ne
   16368:	f894 303a 	ldrbne.w	r3, [r4, #58]	; 0x3a
   1636c:	0957      	lsrne	r7, r2, #5
   1636e:	f367 0302 	bfine	r3, r7, #0, #3
   16372:	f884 303a 	strbne.w	r3, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   16376:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1637a:	f3c3 1780 	ubfx	r7, r3, #6, #1
   1637e:	f367 13c7 	bfi	r3, r7, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   16382:	0797      	lsls	r7, r2, #30
		old_rx = conn->phy_rx;
   16384:	f001 0107 	and.w	r1, r1, #7
		conn->phy_flags = conn->phy_pref_flags;
   16388:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   1638c:	d40b      	bmi.n	163a6 <event_connection_prepare+0x1086>
   1638e:	b2db      	uxtb	r3, r3
   16390:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   16394:	4283      	cmp	r3, r0
   16396:	d106      	bne.n	163a6 <event_connection_prepare+0x1086>
		    (conn->phy_rx == old_rx)) {
   16398:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   1639c:	f003 0307 	and.w	r3, r3, #7
   163a0:	428b      	cmp	r3, r1
   163a2:	f43f ad34 	beq.w	15e0e <event_connection_prepare+0xaee>
		node_rx = packet_rx_reserve_get(2);
   163a6:	2002      	movs	r0, #2
   163a8:	f7fc f82c 	bl	12404 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   163ac:	2800      	cmp	r0, #0
   163ae:	f43f af7b 	beq.w	162a8 <event_connection_prepare+0xf88>
		node_rx->hdr.handle = conn->handle;
   163b2:	8c23      	ldrh	r3, [r4, #32]
   163b4:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   163b6:	230c      	movs	r3, #12
   163b8:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
   163ba:	2300      	movs	r3, #0
   163bc:	7203      	strb	r3, [r0, #8]
		upd->tx = conn->phy_tx;
   163be:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   163c2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   163c6:	7243      	strb	r3, [r0, #9]
		upd->rx = conn->phy_rx;
   163c8:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   163cc:	f3c3 0302 	ubfx	r3, r3, #0, #3
   163d0:	7283      	strb	r3, [r0, #10]
   163d2:	e71a      	b.n	1620a <event_connection_prepare+0xeea>
			LL_ASSERT(0);
   163d4:	4b0c      	ldr	r3, [pc, #48]	; (16408 <event_connection_prepare+0x10e8>)
   163d6:	681b      	ldr	r3, [r3, #0]
   163d8:	075d      	lsls	r5, r3, #29
   163da:	f43e afbf 	beq.w	1535c <event_connection_prepare+0x3c>
   163de:	2301      	movs	r3, #1
   163e0:	f04f 0200 	mov.w	r2, #0
   163e4:	f363 0202 	bfi	r2, r3, #0, #3
   163e8:	4908      	ldr	r1, [pc, #32]	; (1640c <event_connection_prepare+0x10ec>)
   163ea:	4b09      	ldr	r3, [pc, #36]	; (16410 <event_connection_prepare+0x10f0>)
   163ec:	1a5b      	subs	r3, r3, r1
   163ee:	f36f 02c5 	bfc	r2, #3, #3
   163f2:	08db      	lsrs	r3, r3, #3
   163f4:	f363 128f 	bfi	r2, r3, #6, #10
   163f8:	4908      	ldr	r1, [pc, #32]	; (1641c <event_connection_prepare+0x10fc>)
   163fa:	f7ff b976 	b.w	156ea <event_connection_prepare+0x3ca>
   163fe:	bf00      	nop
   16400:	200013c8 	.word	0x200013c8
   16404:	000141ff 	.word	0x000141ff
   16408:	2000e218 	.word	0x2000e218
   1640c:	0002ef38 	.word	0x0002ef38
   16410:	0002ef70 	.word	0x0002ef70
   16414:	00032bef 	.word	0x00032bef
   16418:	00032c4b 	.word	0x00032c4b
   1641c:	00032c62 	.word	0x00032c62
		free_count_rx = packet_rx_acquired_count_get() +
   16420:	f7fb ffda 	bl	123d8 <packet_rx_acquired_count_get>
   16424:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
   16426:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   1642a:	f7fa ff8d 	bl	11348 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   1642e:	4438      	add	r0, r7
   16430:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   16432:	28ff      	cmp	r0, #255	; 0xff
   16434:	d915      	bls.n	16462 <event_connection_prepare+0x1142>
		LL_ASSERT(free_count_rx <= 0xFF);
   16436:	4ba7      	ldr	r3, [pc, #668]	; (166d4 <event_connection_prepare+0x13b4>)
   16438:	681b      	ldr	r3, [r3, #0]
   1643a:	075c      	lsls	r4, r3, #29
   1643c:	f43e af8e 	beq.w	1535c <event_connection_prepare+0x3c>
   16440:	2301      	movs	r3, #1
   16442:	f04f 0200 	mov.w	r2, #0
   16446:	f363 0202 	bfi	r2, r3, #0, #3
   1644a:	49a3      	ldr	r1, [pc, #652]	; (166d8 <event_connection_prepare+0x13b8>)
   1644c:	4ba3      	ldr	r3, [pc, #652]	; (166dc <event_connection_prepare+0x13bc>)
   1644e:	48a4      	ldr	r0, [pc, #656]	; (166e0 <event_connection_prepare+0x13c0>)
   16450:	1a5b      	subs	r3, r3, r1
   16452:	f36f 02c5 	bfc	r2, #3, #3
   16456:	08db      	lsrs	r3, r3, #3
   16458:	f363 128f 	bfi	r2, r3, #6, #10
   1645c:	49a1      	ldr	r1, [pc, #644]	; (166e4 <event_connection_prepare+0x13c4>)
   1645e:	f7fe bf7b 	b.w	15358 <event_connection_prepare+0x38>
		if (_radio.packet_rx_data_count != free_count_rx) {
   16462:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
   16466:	4283      	cmp	r3, r0
   16468:	d129      	bne.n	164be <event_connection_prepare+0x119e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1646a:	489f      	ldr	r0, [pc, #636]	; (166e8 <event_connection_prepare+0x13c8>)
   1646c:	f7fa ff3e 	bl	112ec <mem_acquire>
		if (!node_tx) {
   16470:	4601      	mov	r1, r0
   16472:	b320      	cbz	r0, 164be <event_connection_prepare+0x119e>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   16474:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
   16478:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   1647c:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
   16480:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   16482:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   16484:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   16486:	f365 0301 	bfi	r3, r5, #0, #2
   1648a:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1648e:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
   16490:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16492:	f043 0303 	orr.w	r3, r3, #3
   16496:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
   16498:	2309      	movs	r3, #9
   1649a:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   1649c:	2314      	movs	r3, #20
   1649e:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   164a0:	231b      	movs	r3, #27
   164a2:	720b      	strb	r3, [r1, #8]
   164a4:	2300      	movs	r3, #0
   164a6:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   164a8:	2348      	movs	r3, #72	; 0x48
   164aa:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
   164ac:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   164ae:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
   164b0:	4620      	mov	r0, r4
   164b2:	f7fe fe79 	bl	151a8 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   164b6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   164ba:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
   164be:	f894 3020 	ldrb.w	r3, [r4, #32]
   164c2:	f994 501d 	ldrsb.w	r5, [r4, #29]
   164c6:	4889      	ldr	r0, [pc, #548]	; (166ec <event_connection_prepare+0x13cc>)
   164c8:	4989      	ldr	r1, [pc, #548]	; (166f0 <event_connection_prepare+0x13d0>)
   164ca:	68a2      	ldr	r2, [r4, #8]
   164cc:	3307      	adds	r3, #7
   164ce:	ea31 0125 	bics.w	r1, r1, r5, asr #32
   164d2:	bf28      	it	cs
   164d4:	4601      	movcs	r1, r0
   164d6:	b2db      	uxtb	r3, r3
   164d8:	e9cd 2300 	strd	r2, r3, [sp]
   164dc:	e9cd 1402 	strd	r1, r4, [sp, #8]
   164e0:	1d23      	adds	r3, r4, #4
   164e2:	4622      	mov	r2, r4
   164e4:	990c      	ldr	r1, [sp, #48]	; 0x30
   164e6:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
   164e8:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
   164ea:	f7fe faa1 	bl	14a30 <event_common_prepare>
	conn->event_counter = event_counter + 1;
   164ee:	8466      	strh	r6, [r4, #34]	; 0x22
}
   164f0:	b00f      	add	sp, #60	; 0x3c
   164f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
   164f6:	f7fb ff6f 	bl	123d8 <packet_rx_acquired_count_get>
   164fa:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
   164fc:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   16500:	f7fa ff22 	bl	11348 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   16504:	4438      	add	r0, r7
   16506:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   16508:	28ff      	cmp	r0, #255	; 0xff
   1650a:	d894      	bhi.n	16436 <event_connection_prepare+0x1116>
		if (_radio.packet_rx_data_count != free_count_rx) {
   1650c:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
   16510:	4283      	cmp	r3, r0
   16512:	d014      	beq.n	1653e <event_connection_prepare+0x121e>
		LL_ASSERT(0);
   16514:	4b6f      	ldr	r3, [pc, #444]	; (166d4 <event_connection_prepare+0x13b4>)
   16516:	681b      	ldr	r3, [r3, #0]
   16518:	075b      	lsls	r3, r3, #29
   1651a:	f43e af1f 	beq.w	1535c <event_connection_prepare+0x3c>
   1651e:	2301      	movs	r3, #1
   16520:	f04f 0200 	mov.w	r2, #0
   16524:	f363 0202 	bfi	r2, r3, #0, #3
   16528:	496b      	ldr	r1, [pc, #428]	; (166d8 <event_connection_prepare+0x13b8>)
   1652a:	4b6c      	ldr	r3, [pc, #432]	; (166dc <event_connection_prepare+0x13bc>)
   1652c:	1a5b      	subs	r3, r3, r1
   1652e:	f36f 02c5 	bfc	r2, #3, #3
   16532:	08db      	lsrs	r3, r3, #3
   16534:	f363 128f 	bfi	r2, r3, #6, #10
   16538:	496a      	ldr	r1, [pc, #424]	; (166e4 <event_connection_prepare+0x13c4>)
   1653a:	f7ff b8d6 	b.w	156ea <event_connection_prepare+0x3ca>
		conn->llcp_length.ack = conn->llcp_length.req;
   1653e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16542:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->llcp_length.pause_tx = 0;
   16546:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		free_count_conn = mem_free_count_get(_radio.conn_free);
   1654a:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
		conn->llcp_length.pause_tx = 0;
   1654e:	f36f 0382 	bfc	r3, #2, #1
   16552:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->procedure_expire = 0;
   16556:	2300      	movs	r3, #0
   16558:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   1655c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   16560:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   16562:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   16566:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   16568:	f7fa feee 	bl	11348 <mem_free_count_get>
		if (_radio.advertiser.conn) {
   1656c:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   16570:	b10b      	cbz	r3, 16576 <event_connection_prepare+0x1256>
			free_count_conn++;
   16572:	3001      	adds	r0, #1
   16574:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   16576:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1657a:	b10b      	cbz	r3, 16580 <event_connection_prepare+0x1260>
			free_count_conn++;
   1657c:	3001      	adds	r0, #1
   1657e:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   16580:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
   16582:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   16586:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
   16588:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   1658a:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
   1658e:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   16590:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
   16592:	d07c      	beq.n	1668e <event_connection_prepare+0x136e>
   16594:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
   16598:	42bb      	cmp	r3, r7
   1659a:	d378      	bcc.n	1668e <event_connection_prepare+0x136e>
		node_rx = packet_rx_reserve_get(2);
   1659c:	2002      	movs	r0, #2
   1659e:	f7fb ff31 	bl	12404 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   165a2:	2800      	cmp	r0, #0
   165a4:	d17f      	bne.n	166a6 <event_connection_prepare+0x1386>
   165a6:	4b4b      	ldr	r3, [pc, #300]	; (166d4 <event_connection_prepare+0x13b4>)
   165a8:	681b      	ldr	r3, [r3, #0]
   165aa:	075a      	lsls	r2, r3, #29
   165ac:	f43e aed6 	beq.w	1535c <event_connection_prepare+0x3c>
   165b0:	2301      	movs	r3, #1
   165b2:	f04f 0200 	mov.w	r2, #0
   165b6:	f363 0202 	bfi	r2, r3, #0, #3
   165ba:	4947      	ldr	r1, [pc, #284]	; (166d8 <event_connection_prepare+0x13b8>)
   165bc:	4b47      	ldr	r3, [pc, #284]	; (166dc <event_connection_prepare+0x13bc>)
   165be:	1a5b      	subs	r3, r3, r1
   165c0:	f360 02c5 	bfi	r2, r0, #3, #3
   165c4:	08db      	lsrs	r3, r3, #3
   165c6:	f363 128f 	bfi	r2, r3, #6, #10
   165ca:	4946      	ldr	r1, [pc, #280]	; (166e4 <event_connection_prepare+0x13c4>)
   165cc:	f7ff ba4e 	b.w	15a6c <event_connection_prepare+0x74c>
				if (_radio.packet_rx_acquire == 0) {
   165d0:	b90b      	cbnz	r3, 165d6 <event_connection_prepare+0x12b6>
						_radio.packet_rx_count - 1;
   165d2:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
   165d6:	3b01      	subs	r3, #1
   165d8:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
   165dc:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
   165e0:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
   165e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   165e8:	4649      	mov	r1, r9
   165ea:	6818      	ldr	r0, [r3, #0]
   165ec:	f7fa fe97 	bl	1131e <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   165f0:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
   165f4:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   165f8:	3a01      	subs	r2, #1
   165fa:	4293      	cmp	r3, r2
   165fc:	db15      	blt.n	1662a <event_connection_prepare+0x130a>
   165fe:	4b35      	ldr	r3, [pc, #212]	; (166d4 <event_connection_prepare+0x13b4>)
   16600:	681b      	ldr	r3, [r3, #0]
   16602:	0758      	lsls	r0, r3, #29
   16604:	f43e aeaa 	beq.w	1535c <event_connection_prepare+0x3c>
   16608:	2301      	movs	r3, #1
   1660a:	f04f 0200 	mov.w	r2, #0
   1660e:	f363 0202 	bfi	r2, r3, #0, #3
   16612:	4931      	ldr	r1, [pc, #196]	; (166d8 <event_connection_prepare+0x13b8>)
   16614:	4b31      	ldr	r3, [pc, #196]	; (166dc <event_connection_prepare+0x13bc>)
   16616:	4837      	ldr	r0, [pc, #220]	; (166f4 <event_connection_prepare+0x13d4>)
   16618:	1a5b      	subs	r3, r3, r1
   1661a:	f36f 02c5 	bfc	r2, #3, #3
   1661e:	08db      	lsrs	r3, r3, #3
   16620:	f363 128f 	bfi	r2, r3, #6, #10
   16624:	492f      	ldr	r1, [pc, #188]	; (166e4 <event_connection_prepare+0x13c4>)
   16626:	f7fe be97 	b.w	15358 <event_connection_prepare+0x38>
				_radio.link_rx_data_quota++;
   1662a:	3301      	adds	r3, #1
   1662c:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
   16630:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
   16634:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
   16638:	4293      	cmp	r3, r2
   1663a:	d1c9      	bne.n	165d0 <event_connection_prepare+0x12b0>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   1663c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
   1663e:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   16642:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
   16644:	bf9a      	itte	ls
   16646:	2334      	movls	r3, #52	; 0x34
   16648:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
   1664c:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
   16650:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
   16654:	fbb2 f2f1 	udiv	r2, r2, r1
   16658:	b2d2      	uxtb	r2, r2
   1665a:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
   1665e:	b9ca      	cbnz	r2, 16694 <event_connection_prepare+0x1374>
   16660:	4b1c      	ldr	r3, [pc, #112]	; (166d4 <event_connection_prepare+0x13b4>)
   16662:	681b      	ldr	r3, [r3, #0]
   16664:	0759      	lsls	r1, r3, #29
   16666:	f43e ae79 	beq.w	1535c <event_connection_prepare+0x3c>
   1666a:	2301      	movs	r3, #1
   1666c:	f04f 0100 	mov.w	r1, #0
   16670:	f363 0102 	bfi	r1, r3, #0, #3
   16674:	f362 01c5 	bfi	r1, r2, #3, #3
   16678:	4b18      	ldr	r3, [pc, #96]	; (166dc <event_connection_prepare+0x13bc>)
   1667a:	4a17      	ldr	r2, [pc, #92]	; (166d8 <event_connection_prepare+0x13b8>)
   1667c:	481e      	ldr	r0, [pc, #120]	; (166f8 <event_connection_prepare+0x13d8>)
   1667e:	1a9b      	subs	r3, r3, r2
   16680:	08db      	lsrs	r3, r3, #3
   16682:	f363 118f 	bfi	r1, r3, #6, #10
   16686:	460a      	mov	r2, r1
   16688:	4916      	ldr	r1, [pc, #88]	; (166e4 <event_connection_prepare+0x13c4>)
   1668a:	f7fe be65 	b.w	15358 <event_connection_prepare+0x38>
				mem_release(node_rx->hdr.onion.link,
   1668e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 16700 <event_connection_prepare+0x13e0>
   16692:	e7cd      	b.n	16630 <event_connection_prepare+0x1310>
			mem_init(_radio.pkt_rx_data_pool,
   16694:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
   16698:	4b18      	ldr	r3, [pc, #96]	; (166fc <event_connection_prepare+0x13dc>)
   1669a:	f7fa fe03 	bl	112a4 <mem_init>
			packet_rx_allocate(4);
   1669e:	2004      	movs	r0, #4
   166a0:	f7fb ff2a 	bl	124f8 <packet_rx_allocate>
   166a4:	e77a      	b.n	1659c <event_connection_prepare+0x127c>
		node_rx->hdr.handle = conn->handle;
   166a6:	8c23      	ldrh	r3, [r4, #32]
   166a8:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   166aa:	2301      	movs	r3, #1
   166ac:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   166ae:	7a03      	ldrb	r3, [r0, #8]
   166b0:	f043 0303 	orr.w	r3, r3, #3
   166b4:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
   166b6:	2309      	movs	r3, #9
   166b8:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   166ba:	2315      	movs	r3, #21
   166bc:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   166be:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   166c0:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   166c2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   166c4:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
   166c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   166c8:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
   166ca:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   166cc:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
   166ce:	f7fc fdfb 	bl	132c8 <packet_rx_enqueue>
   166d2:	e6f4      	b.n	164be <event_connection_prepare+0x119e>
   166d4:	2000e218 	.word	0x2000e218
   166d8:	0002ef38 	.word	0x0002ef38
   166dc:	0002ef70 	.word	0x0002ef70
   166e0:	00032df4 	.word	0x00032df4
   166e4:	00032c29 	.word	0x00032c29
   166e8:	200013c8 	.word	0x200013c8
   166ec:	00014f75 	.word	0x00014f75
   166f0:	00016815 	.word	0x00016815
   166f4:	00032e1f 	.word	0x00032e1f
   166f8:	00032e6d 	.word	0x00032e6d
   166fc:	2000139c 	.word	0x2000139c
   16700:	200013b4 	.word	0x200013b4

00016704 <event_slave_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   16704:	f7fe be0c 	b.w	15320 <event_connection_prepare>

00016708 <event_master_prepare>:
   16708:	f7fe be0a 	b.w	15320 <event_connection_prepare>

0001670c <prepare_pdu_data_tx>:
{
   1670c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	    conn->empty ||
   16710:	f890 e0f8 	ldrb.w	lr, [r0, #248]	; 0xf8
	if (/* empty packet */
   16714:	f01e 0f80 	tst.w	lr, #128	; 0x80
{
   16718:	4604      	mov	r4, r0
   1671a:	460e      	mov	r6, r1
	if (/* empty packet */
   1671c:	d10d      	bne.n	1673a <prepare_pdu_data_tx+0x2e>
	    !conn->pkt_tx_head ||
   1671e:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
   16722:	b151      	cbz	r1, 1673a <prepare_pdu_data_tx+0x2e>
	    !conn->pkt_tx_head ||
   16724:	f01e 0f08 	tst.w	lr, #8
   16728:	f8d0 c140 	ldr.w	ip, [r0, #320]	; 0x140
   1672c:	d103      	bne.n	16736 <prepare_pdu_data_tx+0x2a>
	    ((conn->pause_tx ||
   1672e:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
	      conn->llcp_length.pause_tx ||
   16732:	075b      	lsls	r3, r3, #29
   16734:	d523      	bpl.n	1677e <prepare_pdu_data_tx+0x72>
	      0) && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   16736:	4561      	cmp	r1, ip
   16738:	d021      	beq.n	1677e <prepare_pdu_data_tx+0x72>
	conn->empty = 1;
   1673a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   1673e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16742:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
   16746:	f008 f8f1 	bl	1e92c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1674a:	7803      	ldrb	r3, [r0, #0]
   1674c:	2201      	movs	r2, #1
   1674e:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
   16752:	2200      	movs	r2, #0
   16754:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
   16756:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1675a:	7003      	strb	r3, [r0, #0]
   1675c:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
   1675e:	b15a      	cbz	r2, 16778 <prepare_pdu_data_tx+0x6c>
		pdu_data_tx->md = 1;
   16760:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
   16764:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
   16766:	7803      	ldrb	r3, [r0, #0]
   16768:	f36f 1347 	bfc	r3, #5, #3
   1676c:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
   1676e:	2300      	movs	r3, #0
   16770:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
   16772:	6030      	str	r0, [r6, #0]
}
   16774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data_tx->md = 0;
   16778:	f362 1304 	bfi	r3, r2, #4, #1
   1677c:	e7f2      	b.n	16764 <prepare_pdu_data_tx+0x58>
					conn->packet_tx_head_offset);
   1677e:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
   16782:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   16786:	1d0d      	adds	r5, r1, #4
   16788:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
   1678a:	b913      	cbnz	r3, 16792 <prepare_pdu_data_tx+0x86>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   1678c:	7843      	ldrb	r3, [r0, #1]
   1678e:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   16792:	b122      	cbz	r2, 1679e <prepare_pdu_data_tx+0x92>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   16794:	5cab      	ldrb	r3, [r5, r2]
   16796:	2701      	movs	r7, #1
   16798:	f367 0301 	bfi	r3, r7, #0, #2
   1679c:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   1679e:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
		switch (conn->phy_tx_time) {
   167a2:	f894 8039 	ldrb.w	r8, [r4, #57]	; 0x39
		_pdu_data_tx->len = conn->packet_tx_head_len -
   167a6:	1abf      	subs	r7, r7, r2
   167a8:	b2ff      	uxtb	r7, r7
   167aa:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
   167ac:	5cab      	ldrb	r3, [r5, r2]
   167ae:	f36f 1304 	bfc	r3, #4, #1
   167b2:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
   167b4:	f008 0807 	and.w	r8, r8, #7
   167b8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   167ba:	f1b8 0f02 	cmp.w	r8, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   167be:	bf15      	itete	ne
   167c0:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   167c2:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   167c4:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   167c6:	3b0b      	subeq	r3, #11
   167c8:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
   167ca:	f01e 0f20 	tst.w	lr, #32
			max_tx_octets -= 4;
   167ce:	bf18      	it	ne
   167d0:	3b04      	subne	r3, #4
   167d2:	f8b4 e02e 	ldrh.w	lr, [r4, #46]	; 0x2e
   167d6:	bf18      	it	ne
   167d8:	b29b      	uxthne	r3, r3
   167da:	4573      	cmp	r3, lr
   167dc:	bf28      	it	cs
   167de:	4673      	movcs	r3, lr
		if (_pdu_data_tx->len > max_tx_octets) {
   167e0:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
   167e2:	bf81      	itttt	hi
   167e4:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
   167e6:	5cab      	ldrbhi	r3, [r5, r2]
   167e8:	f043 0310 	orrhi.w	r3, r3, #16
   167ec:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
   167ee:	680b      	ldr	r3, [r1, #0]
   167f0:	b11b      	cbz	r3, 167fa <prepare_pdu_data_tx+0xee>
			_pdu_data_tx->md = 1;
   167f2:	5cab      	ldrb	r3, [r5, r2]
   167f4:	f043 0310 	orr.w	r3, r3, #16
   167f8:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
   167fa:	f1bc 0f00 	cmp.w	ip, #0
   167fe:	d1b2      	bne.n	16766 <prepare_pdu_data_tx+0x5a>
   16800:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   16804:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   16806:	bf1c      	itt	ne
   16808:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
   1680c:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
   16810:	e7a9      	b.n	16766 <prepare_pdu_data_tx+0x5a>
	...

00016814 <event_master>:
{
   16814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16816:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   16818:	4b69      	ldr	r3, [pc, #420]	; (169c0 <event_master+0x1ac>)
   1681a:	7d1a      	ldrb	r2, [r3, #20]
{
   1681c:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   1681e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   16822:	461d      	mov	r5, r3
   16824:	b1d2      	cbz	r2, 1685c <event_master+0x48>
   16826:	4b67      	ldr	r3, [pc, #412]	; (169c4 <event_master+0x1b0>)
   16828:	681b      	ldr	r3, [r3, #0]
   1682a:	075d      	lsls	r5, r3, #29
   1682c:	d010      	beq.n	16850 <event_master+0x3c>
   1682e:	2301      	movs	r3, #1
   16830:	f04f 0200 	mov.w	r2, #0
   16834:	f363 0202 	bfi	r2, r3, #0, #3
   16838:	4963      	ldr	r1, [pc, #396]	; (169c8 <event_master+0x1b4>)
   1683a:	4b64      	ldr	r3, [pc, #400]	; (169cc <event_master+0x1b8>)
   1683c:	4864      	ldr	r0, [pc, #400]	; (169d0 <event_master+0x1bc>)
   1683e:	1a5b      	subs	r3, r3, r1
   16840:	f36f 02c5 	bfc	r2, #3, #3
   16844:	08db      	lsrs	r3, r3, #3
   16846:	4963      	ldr	r1, [pc, #396]	; (169d4 <event_master+0x1c0>)
   16848:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1684c:	f7eb fc4e 	bl	20ec <log_1>
   16850:	4040      	eors	r0, r0
   16852:	f380 8811 	msr	BASEPRI, r0
   16856:	f04f 0004 	mov.w	r0, #4
   1685a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   1685c:	7c5b      	ldrb	r3, [r3, #17]
   1685e:	8c22      	ldrh	r2, [r4, #32]
   16860:	b2db      	uxtb	r3, r3
   16862:	3207      	adds	r2, #7
   16864:	4293      	cmp	r3, r2
   16866:	d013      	beq.n	16890 <event_master+0x7c>
   16868:	4b56      	ldr	r3, [pc, #344]	; (169c4 <event_master+0x1b0>)
   1686a:	681b      	ldr	r3, [r3, #0]
   1686c:	075c      	lsls	r4, r3, #29
   1686e:	d0ef      	beq.n	16850 <event_master+0x3c>
   16870:	2301      	movs	r3, #1
   16872:	f04f 0200 	mov.w	r2, #0
   16876:	f363 0202 	bfi	r2, r3, #0, #3
   1687a:	f361 02c5 	bfi	r2, r1, #3, #3
   1687e:	4b53      	ldr	r3, [pc, #332]	; (169cc <event_master+0x1b8>)
   16880:	4951      	ldr	r1, [pc, #324]	; (169c8 <event_master+0x1b4>)
   16882:	4855      	ldr	r0, [pc, #340]	; (169d8 <event_master+0x1c4>)
   16884:	1a5b      	subs	r3, r3, r1
   16886:	08db      	lsrs	r3, r3, #3
   16888:	f363 128f 	bfi	r2, r3, #6, #10
   1688c:	4951      	ldr	r1, [pc, #324]	; (169d4 <event_master+0x1c0>)
   1688e:	e7dd      	b.n	1684c <event_master+0x38>
	_radio.packet_counter = 0;
   16890:	f8a5 1118 	strh.w	r1, [r5, #280]	; 0x118
	_radio.role = ROLE_MASTER;
   16894:	2204      	movs	r2, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   16896:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
   16898:	752a      	strb	r2, [r5, #20]
	_radio.ticker_id_prepare = 0;
   1689a:	7469      	strb	r1, [r5, #17]
	_radio.ticker_id_event =
   1689c:	74ab      	strb	r3, [r5, #18]
	conn->latency_event = conn->latency_prepare;
   1689e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   168a0:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
   168a4:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
   168a6:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   168a8:	8521      	strh	r1, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
   168aa:	7568      	strb	r0, [r5, #21]
	_radio.ticks_anchor = ticks_at_expire;
   168ac:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
   168ae:	f7fd f8ff 	bl	13ab0 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   168b2:	a901      	add	r1, sp, #4
   168b4:	4620      	mov	r0, r4
   168b6:	f7ff ff29 	bl	1670c <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   168ba:	9901      	ldr	r1, [sp, #4]
   168bc:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
   168c0:	780b      	ldrb	r3, [r1, #0]
   168c2:	f3c2 0200 	ubfx	r2, r2, #0, #1
   168c6:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
   168ca:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
   168ce:	f3c2 0240 	ubfx	r2, r2, #1, #1
   168d2:	f362 0382 	bfi	r3, r2, #2, #1
   168d6:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
   168d8:	4620      	mov	r0, r4
   168da:	f7fe fb2d 	bl	14f38 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   168de:	2096      	movs	r0, #150	; 0x96
   168e0:	f008 f8c8 	bl	1ea74 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   168e4:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   168e8:	f000 0007 	and.w	r0, r0, #7
   168ec:	f008 f826 	bl	1e93c <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   168f0:	4620      	mov	r0, r4
   168f2:	9901      	ldr	r1, [sp, #4]
   168f4:	f7fc f9e6 	bl	12cc4 <tx_packet_set>
	if (conn->data_chan_sel) {
   168f8:	7f63      	ldrb	r3, [r4, #29]
   168fa:	0658      	lsls	r0, r3, #25
   168fc:	f104 0217 	add.w	r2, r4, #23
   16900:	d521      	bpl.n	16946 <event_master+0x132>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   16902:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   16904:	8be1      	ldrh	r1, [r4, #30]
   16906:	3801      	subs	r0, #1
   16908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1690c:	b280      	uxth	r0, r0
   1690e:	f7fe facf 	bl	14eb0 <chan_sel_2>
	chan_set(data_chan_use);
   16912:	f7fd f9df 	bl	13cd4 <chan_set>
		remainder_us = radio_tmr_start(1,
   16916:	68ea      	ldr	r2, [r5, #12]
   16918:	f107 0109 	add.w	r1, r7, #9
   1691c:	2001      	movs	r0, #1
   1691e:	f008 f8b5 	bl	1ea8c <radio_tmr_start>
		radio_tmr_end_capture();
   16922:	f008 f985 	bl	1ec30 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   16926:	f894 1020 	ldrb.w	r1, [r4, #32]
   1692a:	3107      	adds	r1, #7
   1692c:	4620      	mov	r0, r4
   1692e:	463a      	mov	r2, r7
   16930:	b2c9      	uxtb	r1, r1
   16932:	f7fd fe69 	bl	14608 <preempt_calc>
	if (0 !=
   16936:	4604      	mov	r4, r0
   16938:	b328      	cbz	r0, 16986 <event_master+0x172>
		_radio.state = STATE_STOP;
   1693a:	2304      	movs	r3, #4
   1693c:	756b      	strb	r3, [r5, #21]
		radio_disable();
   1693e:	f007 ffa3 	bl	1e888 <radio_disable>
}
   16942:	b003      	add	sp, #12
   16944:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   16946:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   16948:	7fa6      	ldrb	r6, [r4, #30]
   1694a:	fb01 6606 	mla	r6, r1, r6, r6
   1694e:	7fe1      	ldrb	r1, [r4, #31]
   16950:	2025      	movs	r0, #37	; 0x25
   16952:	440e      	add	r6, r1
   16954:	fb96 f1f0 	sdiv	r1, r6, r0
   16958:	fb00 6611 	mls	r6, r0, r1, r6
   1695c:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   1695e:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   16960:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   16962:	5c51      	ldrb	r1, [r2, r1]
   16964:	f006 0607 	and.w	r6, r6, #7
   16968:	fa41 f606 	asr.w	r6, r1, r6
   1696c:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
   1696e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   16972:	d4ce      	bmi.n	16912 <event_master+0xfe>
		chan_index = chan_next % chan_count;
   16974:	fbb0 f1f3 	udiv	r1, r0, r3
   16978:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   1697c:	b2c9      	uxtb	r1, r1
   1697e:	4610      	mov	r0, r2
   16980:	f7fb fd0e 	bl	123a0 <chan_sel_remap>
   16984:	e7c5      	b.n	16912 <event_master+0xfe>
		ticker_status =
   16986:	4603      	mov	r3, r0
   16988:	4a14      	ldr	r2, [pc, #80]	; (169dc <event_master+0x1c8>)
   1698a:	4601      	mov	r1, r0
   1698c:	f7fb fc40 	bl	12210 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16990:	f030 0302 	bics.w	r3, r0, #2
   16994:	d0d5      	beq.n	16942 <event_master+0x12e>
   16996:	4b0b      	ldr	r3, [pc, #44]	; (169c4 <event_master+0x1b0>)
   16998:	681b      	ldr	r3, [r3, #0]
   1699a:	075b      	lsls	r3, r3, #29
   1699c:	f43f af58 	beq.w	16850 <event_master+0x3c>
   169a0:	2301      	movs	r3, #1
   169a2:	f04f 0200 	mov.w	r2, #0
   169a6:	f363 0202 	bfi	r2, r3, #0, #3
   169aa:	4907      	ldr	r1, [pc, #28]	; (169c8 <event_master+0x1b4>)
   169ac:	4b07      	ldr	r3, [pc, #28]	; (169cc <event_master+0x1b8>)
   169ae:	480c      	ldr	r0, [pc, #48]	; (169e0 <event_master+0x1cc>)
   169b0:	1a5b      	subs	r3, r3, r1
   169b2:	f364 02c5 	bfi	r2, r4, #3, #3
   169b6:	08db      	lsrs	r3, r3, #3
   169b8:	f363 128f 	bfi	r2, r3, #6, #10
   169bc:	4905      	ldr	r1, [pc, #20]	; (169d4 <event_master+0x1c0>)
   169be:	e745      	b.n	1684c <event_master+0x38>
   169c0:	2000126c 	.word	0x2000126c
   169c4:	2000e218 	.word	0x2000e218
   169c8:	0002ef38 	.word	0x0002ef38
   169cc:	0002ef70 	.word	0x0002ef70
   169d0:	00032e9e 	.word	0x00032e9e
   169d4:	00032c87 	.word	0x00032c87
   169d8:	00032f2d 	.word	0x00032f2d
   169dc:	000137ad 	.word	0x000137ad
   169e0:	00032d7f 	.word	0x00032d7f

000169e4 <isr_rx_conn_pkt_ctrl>:
{
   169e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
   169e8:	7ac7      	ldrb	r7, [r0, #11]
{
   169ea:	4604      	mov	r4, r0
   169ec:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
   169ee:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
   169f2:	2f19      	cmp	r7, #25
   169f4:	f201 8182 	bhi.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
   169f8:	e8df f017 	tbh	[pc, r7, lsl #1]
   169fc:	007e001a 	.word	0x007e001a
   16a00:	00d800ca 	.word	0x00d800ca
   16a04:	012e0106 	.word	0x012e0106
   16a08:	05f8016c 	.word	0x05f8016c
   16a0c:	01d501a4 	.word	0x01d501a4
   16a10:	022d0203 	.word	0x022d0203
   16a14:	02c7025e 	.word	0x02c7025e
   16a18:	02df01ca 	.word	0x02df01ca
   16a1c:	04e5045c 	.word	0x04e5045c
   16a20:	05dc05c2 	.word	0x05dc05c2
   16a24:	06cd06cd 	.word	0x06cd06cd
   16a28:	088b07d5 	.word	0x088b07d5
   16a2c:	094c08c2 	.word	0x094c08c2
		if (!_radio.conn_curr->role ||
   16a30:	4ecf      	ldr	r6, [pc, #828]	; (16d70 <isr_rx_conn_pkt_ctrl+0x38c>)
   16a32:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
   16a36:	f995 301d 	ldrsb.w	r3, [r5, #29]
   16a3a:	2b00      	cmp	r3, #0
   16a3c:	f281 815e 	bge.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
   16a40:	7a41      	ldrb	r1, [r0, #9]
   16a42:	2000      	movs	r0, #0
   16a44:	f7fb fc78 	bl	12338 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   16a48:	2800      	cmp	r0, #0
   16a4a:	f001 8157 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
   16a4e:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   16a52:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   16a54:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
   16a56:	041f      	lsls	r7, r3, #16
   16a58:	f100 8098 	bmi.w	16b8c <isr_rx_conn_pkt_ctrl+0x1a8>
	if (conn->llcp_req != conn->llcp_ack) {
   16a5c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   16a60:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
   16a64:	429a      	cmp	r2, r3
   16a66:	d142      	bne.n	16aee <isr_rx_conn_pkt_ctrl+0x10a>
	if (_radio.conn_upd == 0) {
   16a68:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
   16a6c:	b90a      	cbnz	r2, 16a72 <isr_rx_conn_pkt_ctrl+0x8e>
		_radio.conn_upd = conn;
   16a6e:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
   16a72:	7b22      	ldrb	r2, [r4, #12]
   16a74:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
   16a78:	f8b4 000d 	ldrh.w	r0, [r4, #13]
   16a7c:	f240 42e2 	movw	r2, #1250	; 0x4e2
   16a80:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
   16a82:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
   16a86:	7c20      	ldrb	r0, [r4, #16]
   16a88:	7be2      	ldrb	r2, [r4, #15]
   16a8a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
   16a8e:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
   16a92:	7ca0      	ldrb	r0, [r4, #18]
   16a94:	7c62      	ldrb	r2, [r4, #17]
   16a96:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
   16a9a:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
   16a9e:	7ce2      	ldrb	r2, [r4, #19]
   16aa0:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
   16aa2:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
   16aa6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
   16aaa:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   16aae:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   16ab2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   16ab6:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
   16aba:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
   16abc:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   16ac0:	2201      	movs	r2, #1
   16ac2:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
   16ac6:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   16aca:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   16ace:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   16ad2:	4293      	cmp	r3, r2
   16ad4:	d007      	beq.n	16ae6 <isr_rx_conn_pkt_ctrl+0x102>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   16ad6:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   16ada:	f003 0307 	and.w	r3, r3, #7
   16ade:	2b04      	cmp	r3, #4
   16ae0:	d101      	bne.n	16ae6 <isr_rx_conn_pkt_ctrl+0x102>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16ae2:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
   16ae6:	2000      	movs	r0, #0
   16ae8:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
   16aec:	e04c      	b.n	16b88 <isr_rx_conn_pkt_ctrl+0x1a4>
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   16aee:	232a      	movs	r3, #42	; 0x2a
			_radio.conn_curr->llcp_terminate.reason_peer =
   16af0:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
	u8_t nack = 0;
   16af4:	2000      	movs	r0, #0
	return nack;
   16af6:	e047      	b.n	16b88 <isr_rx_conn_pkt_ctrl+0x1a4>
		if (!_radio.conn_curr->role ||
   16af8:	4b9d      	ldr	r3, [pc, #628]	; (16d70 <isr_rx_conn_pkt_ctrl+0x38c>)
   16afa:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
   16afe:	f995 301d 	ldrsb.w	r3, [r5, #29]
   16b02:	2b00      	cmp	r3, #0
   16b04:	f281 80fa 	bge.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
   16b08:	7a41      	ldrb	r1, [r0, #9]
   16b0a:	2001      	movs	r0, #1
   16b0c:	f7fb fc14 	bl	12338 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   16b10:	2800      	cmp	r0, #0
   16b12:	f001 80f3 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
   16b16:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   16b1a:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
   16b1c:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
   16b1e:	041e      	lsls	r6, r3, #16
   16b20:	d434      	bmi.n	16b8c <isr_rx_conn_pkt_ctrl+0x1a8>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   16b22:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   16b26:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   16b2a:	429a      	cmp	r2, r3
   16b2c:	d014      	beq.n	16b58 <isr_rx_conn_pkt_ctrl+0x174>
   16b2e:	4b91      	ldr	r3, [pc, #580]	; (16d74 <isr_rx_conn_pkt_ctrl+0x390>)
   16b30:	681b      	ldr	r3, [r3, #0]
   16b32:	075d      	lsls	r5, r3, #29
   16b34:	f000 80b2 	beq.w	16c9c <isr_rx_conn_pkt_ctrl+0x2b8>
   16b38:	2301      	movs	r3, #1
   16b3a:	f04f 0200 	mov.w	r2, #0
   16b3e:	f363 0202 	bfi	r2, r3, #0, #3
   16b42:	498d      	ldr	r1, [pc, #564]	; (16d78 <isr_rx_conn_pkt_ctrl+0x394>)
   16b44:	4b8d      	ldr	r3, [pc, #564]	; (16d7c <isr_rx_conn_pkt_ctrl+0x398>)
   16b46:	1a5b      	subs	r3, r3, r1
   16b48:	f36f 02c5 	bfc	r2, #3, #3
   16b4c:	08db      	lsrs	r3, r3, #3
   16b4e:	498c      	ldr	r1, [pc, #560]	; (16d80 <isr_rx_conn_pkt_ctrl+0x39c>)
   16b50:	f363 128f 	bfi	r2, r3, #6, #10
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   16b54:	488b      	ldr	r0, [pc, #556]	; (16d84 <isr_rx_conn_pkt_ctrl+0x3a0>)
   16b56:	e09f      	b.n	16c98 <isr_rx_conn_pkt_ctrl+0x2b4>
	memcpy(&conn->llcp.chan_map.chm[0],
   16b58:	2205      	movs	r2, #5
   16b5a:	f104 010c 	add.w	r1, r4, #12
   16b5e:	f105 0079 	add.w	r0, r5, #121	; 0x79
   16b62:	f7f0 f891 	bl	6c88 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
   16b66:	7c63      	ldrb	r3, [r4, #17]
   16b68:	7ca2      	ldrb	r2, [r4, #18]
   16b6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
   16b6e:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
   16b72:	2302      	movs	r3, #2
   16b74:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
   16b78:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
   16b7c:	2000      	movs	r0, #0
	conn->llcp_ack--;
   16b7e:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
   16b80:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
   16b84:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
   16b88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.conn_curr->llcp_terminate.reason_peer =
   16b8c:	2328      	movs	r3, #40	; 0x28
   16b8e:	e7af      	b.n	16af0 <isr_rx_conn_pkt_ctrl+0x10c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   16b90:	7a41      	ldrb	r1, [r0, #9]
   16b92:	2002      	movs	r0, #2
   16b94:	f7fb fbd0 	bl	12338 <pdu_len_cmp>
   16b98:	2800      	cmp	r0, #0
   16b9a:	f001 80af 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		_radio.conn_curr->llcp_terminate.reason_peer =
   16b9e:	4b74      	ldr	r3, [pc, #464]	; (16d70 <isr_rx_conn_pkt_ctrl+0x38c>)
   16ba0:	7b22      	ldrb	r2, [r4, #12]
   16ba2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   16ba6:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
   16baa:	e7a3      	b.n	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		if (!_radio.conn_curr->role ||
   16bac:	4e70      	ldr	r6, [pc, #448]	; (16d70 <isr_rx_conn_pkt_ctrl+0x38c>)
   16bae:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
   16bb2:	f998 301d 	ldrsb.w	r3, [r8, #29]
   16bb6:	2b00      	cmp	r3, #0
   16bb8:	f281 80a0 	bge.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
   16bbc:	7a41      	ldrb	r1, [r0, #9]
   16bbe:	2003      	movs	r0, #3
   16bc0:	f7fb fbba 	bl	12338 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   16bc4:	2800      	cmp	r0, #0
   16bc6:	f001 8099 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   16bca:	2208      	movs	r2, #8
   16bcc:	f104 0116 	add.w	r1, r4, #22
   16bd0:	f108 0094 	add.w	r0, r8, #148	; 0x94
   16bd4:	f7f0 f858 	bl	6c88 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   16bd8:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
   16bdc:	2204      	movs	r2, #4
   16bde:	f104 011e 	add.w	r1, r4, #30
   16be2:	f500 7089 	add.w	r0, r0, #274	; 0x112
   16be6:	f7f0 f84f 	bl	6c88 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   16bea:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
   16bee:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   16bf2:	f042 0204 	orr.w	r2, r2, #4
   16bf6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   16bfa:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   16bfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
   16c02:	2301      	movs	r3, #1
   16c04:	702b      	strb	r3, [r5, #0]
   16c06:	e775      	b.n	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		if (_radio.conn_curr->role ||
   16c08:	4d59      	ldr	r5, [pc, #356]	; (16d70 <isr_rx_conn_pkt_ctrl+0x38c>)
   16c0a:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
   16c0e:	f996 301d 	ldrsb.w	r3, [r6, #29]
   16c12:	2b00      	cmp	r3, #0
   16c14:	f2c1 8072 	blt.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
   16c18:	7a41      	ldrb	r1, [r0, #9]
   16c1a:	2004      	movs	r0, #4
   16c1c:	f7fb fb8c 	bl	12338 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   16c20:	2800      	cmp	r0, #0
   16c22:	f001 806b 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   16c26:	2208      	movs	r2, #8
   16c28:	f104 010c 	add.w	r1, r4, #12
   16c2c:	f106 009c 	add.w	r0, r6, #156	; 0x9c
   16c30:	f7f0 f82a 	bl	6c88 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   16c34:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
   16c38:	2204      	movs	r2, #4
   16c3a:	f104 0114 	add.w	r1, r4, #20
   16c3e:	f500 708b 	add.w	r0, r0, #278	; 0x116
   16c42:	f7f0 f821 	bl	6c88 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   16c46:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
   16c4a:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   16c4e:	f043 0304 	orr.w	r3, r3, #4
   16c52:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   16c56:	e74d      	b.n	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
   16c58:	4b45      	ldr	r3, [pc, #276]	; (16d70 <isr_rx_conn_pkt_ctrl+0x38c>)
   16c5a:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
   16c5e:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
   16c62:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   16c66:	42b3      	cmp	r3, r6
   16c68:	d01e      	beq.n	16ca8 <isr_rx_conn_pkt_ctrl+0x2c4>
   16c6a:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
   16c6e:	2b03      	cmp	r3, #3
   16c70:	d01a      	beq.n	16ca8 <isr_rx_conn_pkt_ctrl+0x2c4>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
   16c72:	4b40      	ldr	r3, [pc, #256]	; (16d74 <isr_rx_conn_pkt_ctrl+0x390>)
   16c74:	681b      	ldr	r3, [r3, #0]
   16c76:	075c      	lsls	r4, r3, #29
   16c78:	d010      	beq.n	16c9c <isr_rx_conn_pkt_ctrl+0x2b8>
   16c7a:	2301      	movs	r3, #1
   16c7c:	f04f 0200 	mov.w	r2, #0
   16c80:	f363 0202 	bfi	r2, r3, #0, #3
   16c84:	493c      	ldr	r1, [pc, #240]	; (16d78 <isr_rx_conn_pkt_ctrl+0x394>)
   16c86:	4b3d      	ldr	r3, [pc, #244]	; (16d7c <isr_rx_conn_pkt_ctrl+0x398>)
   16c88:	483f      	ldr	r0, [pc, #252]	; (16d88 <isr_rx_conn_pkt_ctrl+0x3a4>)
   16c8a:	1a5b      	subs	r3, r3, r1
   16c8c:	f36f 02c5 	bfc	r2, #3, #3
   16c90:	08db      	lsrs	r3, r3, #3
   16c92:	493e      	ldr	r1, [pc, #248]	; (16d8c <isr_rx_conn_pkt_ctrl+0x3a8>)
   16c94:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
   16c98:	f7eb fa28 	bl	20ec <log_1>
   16c9c:	4040      	eors	r0, r0
   16c9e:	f380 8811 	msr	BASEPRI, r0
   16ca2:	f04f 0004 	mov.w	r0, #4
   16ca6:	df02      	svc	2
		if (_radio.conn_curr->role ||
   16ca8:	f995 301d 	ldrsb.w	r3, [r5, #29]
   16cac:	2b00      	cmp	r3, #0
   16cae:	f2c1 8025 	blt.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
   16cb2:	7a61      	ldrb	r1, [r4, #9]
   16cb4:	2005      	movs	r0, #5
   16cb6:	f7fb fb3f 	bl	12338 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   16cba:	2800      	cmp	r0, #0
   16cbc:	f001 801e 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		_radio.conn_curr->llcp.encryption.initiate = 0;
   16cc0:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   16cc2:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
   16cc4:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
   16cc6:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   16cca:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   16cce:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
   16cd2:	e759      	b.n	16b88 <isr_rx_conn_pkt_ctrl+0x1a4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   16cd4:	7a41      	ldrb	r1, [r0, #9]
   16cd6:	2006      	movs	r0, #6
   16cd8:	f7fb fb2e 	bl	12338 <pdu_len_cmp>
   16cdc:	2800      	cmp	r0, #0
   16cde:	f001 800d 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
   16ce2:	4a23      	ldr	r2, [pc, #140]	; (16d70 <isr_rx_conn_pkt_ctrl+0x38c>)
		if (_radio.role == ROLE_SLAVE) {
   16ce4:	7d11      	ldrb	r1, [r2, #20]
   16ce6:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
   16cea:	2903      	cmp	r1, #3
   16cec:	4611      	mov	r1, r2
   16cee:	d120      	bne.n	16d32 <isr_rx_conn_pkt_ctrl+0x34e>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
   16cf0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
   16cf4:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
   16cf8:	4290      	cmp	r0, r2
   16cfa:	d003      	beq.n	16d04 <isr_rx_conn_pkt_ctrl+0x320>
   16cfc:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   16d00:	2803      	cmp	r0, #3
   16d02:	d1b6      	bne.n	16c72 <isr_rx_conn_pkt_ctrl+0x28e>
			_radio.conn_curr->llcp.encryption.initiate = 0;
   16d04:	2000      	movs	r0, #0
   16d06:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
   16d0a:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   16d0c:	2003      	movs	r0, #3
   16d0e:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   16d12:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
   16d16:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   16d1a:	0650      	lsls	r0, r2, #25
   16d1c:	d505      	bpl.n	16d2a <isr_rx_conn_pkt_ctrl+0x346>
			_radio.conn_curr->refresh = 0;
   16d1e:	f36f 1286 	bfc	r2, #6, #1
   16d22:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   16d26:	2309      	movs	r3, #9
   16d28:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
   16d2a:	2301      	movs	r3, #1
   16d2c:	702b      	strb	r3, [r5, #0]
				break;
   16d2e:	f000 bd2e 	b.w	1778e <isr_rx_conn_pkt_ctrl+0xdaa>
			_radio.conn_curr->pause_rx = 0;
   16d32:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   16d36:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   16d3a:	f36f 02c3 	bfc	r2, #3, #1
   16d3e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   16d42:	e7e8      	b.n	16d16 <isr_rx_conn_pkt_ctrl+0x332>
		if (!_radio.conn_curr->role ||
   16d44:	4b0a      	ldr	r3, [pc, #40]	; (16d70 <isr_rx_conn_pkt_ctrl+0x38c>)
   16d46:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
   16d4a:	f995 301d 	ldrsb.w	r3, [r5, #29]
   16d4e:	2b00      	cmp	r3, #0
   16d50:	f280 87d4 	bge.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
   16d54:	7a41      	ldrb	r1, [r0, #9]
   16d56:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   16d58:	f7fb faee 	bl	12338 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   16d5c:	2800      	cmp	r0, #0
   16d5e:	f000 87cd 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
   16d62:	4631      	mov	r1, r6
   16d64:	4628      	mov	r0, r5
}
   16d66:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
   16d6a:	f7fe ba65 	b.w	15238 <feature_rsp_send>
   16d6e:	bf00      	nop
   16d70:	2000126c 	.word	0x2000126c
   16d74:	2000e218 	.word	0x2000e218
   16d78:	0002ef38 	.word	0x0002ef38
   16d7c:	0002ef70 	.word	0x0002ef70
   16d80:	00032ce6 	.word	0x00032ce6
   16d84:	000330e2 	.word	0x000330e2
   16d88:	00033118 	.word	0x00033118
   16d8c:	0003291a 	.word	0x0003291a
		if (_radio.conn_curr->role ||
   16d90:	4bbd      	ldr	r3, [pc, #756]	; (17088 <isr_rx_conn_pkt_ctrl+0x6a4>)
   16d92:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
   16d96:	f995 301d 	ldrsb.w	r3, [r5, #29]
   16d9a:	2b00      	cmp	r3, #0
   16d9c:	f2c0 87ae 	blt.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   16da0:	7a41      	ldrb	r1, [r0, #9]
   16da2:	200e      	movs	r0, #14
   16da4:	e7d8      	b.n	16d58 <isr_rx_conn_pkt_ctrl+0x374>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
   16da6:	7a41      	ldrb	r1, [r0, #9]
   16da8:	2009      	movs	r0, #9
   16daa:	f7fb fac5 	bl	12338 <pdu_len_cmp>
   16dae:	2800      	cmp	r0, #0
   16db0:	f000 87a4 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   16db4:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
   16db6:	7b62      	ldrb	r2, [r4, #13]
   16db8:	48b3      	ldr	r0, [pc, #716]	; (17088 <isr_rx_conn_pkt_ctrl+0x6a4>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   16dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   16dbe:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   16dc2:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   16dc6:	f043 0310 	orr.w	r3, r3, #16
   16dca:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
   16dce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   16dd2:	7ba2      	ldrb	r2, [r4, #14]
   16dd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   16dd8:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
   16ddc:	f3c2 0210 	ubfx	r2, r2, #0, #17
   16de0:	4013      	ands	r3, r2
   16de2:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   16de6:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   16dea:	f043 0320 	orr.w	r3, r3, #32
   16dee:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		*rx_enqueue = 1;
   16df2:	2301      	movs	r3, #1
   16df4:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
   16df6:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
   16dfa:	2000      	movs	r0, #0
   16dfc:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
   16e00:	e6c2      	b.n	16b88 <isr_rx_conn_pkt_ctrl+0x1a4>
		if (!_radio.conn_curr->role ||
   16e02:	4ea1      	ldr	r6, [pc, #644]	; (17088 <isr_rx_conn_pkt_ctrl+0x6a4>)
   16e04:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
   16e08:	f995 301d 	ldrsb.w	r3, [r5, #29]
   16e0c:	2b00      	cmp	r3, #0
   16e0e:	f280 8775 	bge.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
   16e12:	7a41      	ldrb	r1, [r0, #9]
   16e14:	200a      	movs	r0, #10
   16e16:	f7fb fa8f 	bl	12338 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   16e1a:	2800      	cmp	r0, #0
   16e1c:	f000 876e 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16e20:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
   16e24:	f7fa fa62 	bl	112ec <mem_acquire>
		if (!node_tx) {
   16e28:	4601      	mov	r1, r0
   16e2a:	b908      	cbnz	r0, 16e30 <isr_rx_conn_pkt_ctrl+0x44c>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   16e2c:	2001      	movs	r0, #1
   16e2e:	e6ab      	b.n	16b88 <isr_rx_conn_pkt_ctrl+0x1a4>
		conn->refresh = 1;
   16e30:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
   16e34:	f043 0344 	orr.w	r3, r3, #68	; 0x44
   16e38:	f36f 1304 	bfc	r3, #4, #1
   16e3c:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16e40:	7903      	ldrb	r3, [r0, #4]
   16e42:	f043 0303 	orr.w	r3, r3, #3
   16e46:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   16e48:	2301      	movs	r3, #1
   16e4a:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   16e4c:	230b      	movs	r3, #11
   16e4e:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   16e50:	4628      	mov	r0, r5
   16e52:	f000 bd68 	b.w	17926 <isr_rx_conn_pkt_ctrl+0xf42>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   16e56:	7a41      	ldrb	r1, [r0, #9]
   16e58:	200b      	movs	r0, #11
   16e5a:	f7fb fa6d 	bl	12338 <pdu_len_cmp>
   16e5e:	2800      	cmp	r0, #0
   16e60:	f000 874c 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
   16e64:	4888      	ldr	r0, [pc, #544]	; (17088 <isr_rx_conn_pkt_ctrl+0x6a4>)
   16e66:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
   16e6a:	f994 301d 	ldrsb.w	r3, [r4, #29]
   16e6e:	2b00      	cmp	r3, #0
   16e70:	db1b      	blt.n	16eaa <isr_rx_conn_pkt_ctrl+0x4c6>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16e72:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
   16e76:	f7fa fa39 	bl	112ec <mem_acquire>
		if (!node_tx) {
   16e7a:	4601      	mov	r1, r0
   16e7c:	2800      	cmp	r0, #0
   16e7e:	d0d5      	beq.n	16e2c <isr_rx_conn_pkt_ctrl+0x448>
		conn->enc_tx = 0;
   16e80:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
   16e84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
   16e88:	f043 0304 	orr.w	r3, r3, #4
   16e8c:	f36f 1304 	bfc	r3, #4, #1
   16e90:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16e94:	7903      	ldrb	r3, [r0, #4]
   16e96:	f043 0303 	orr.w	r3, r3, #3
   16e9a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   16e9c:	2301      	movs	r3, #1
   16e9e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   16ea0:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   16ea2:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
   16ea4:	4620      	mov	r0, r4
   16ea6:	f000 bd3e 	b.w	17926 <isr_rx_conn_pkt_ctrl+0xf42>
		conn->enc_tx = 0;
   16eaa:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   16eae:	f36f 1345 	bfc	r3, #5, #1
   16eb2:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   16eb6:	e61d      	b.n	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   16eb8:	7a41      	ldrb	r1, [r0, #9]
   16eba:	200c      	movs	r0, #12
   16ebc:	f7fb fa3c 	bl	12338 <pdu_len_cmp>
   16ec0:	2800      	cmp	r0, #0
   16ec2:	f000 871b 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
   16ec6:	4870      	ldr	r0, [pc, #448]	; (17088 <isr_rx_conn_pkt_ctrl+0x6a4>)
   16ec8:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
   16ecc:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   16ed0:	f013 0701 	ands.w	r7, r3, #1
   16ed4:	d150      	bne.n	16f78 <isr_rx_conn_pkt_ctrl+0x594>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16ed6:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
   16eda:	f7fa fa07 	bl	112ec <mem_acquire>
		if (!node_tx) {
   16ede:	4601      	mov	r1, r0
   16ee0:	2800      	cmp	r0, #0
   16ee2:	d0a3      	beq.n	16e2c <isr_rx_conn_pkt_ctrl+0x448>
		conn->llcp_version.tx = 1;
   16ee4:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   16ee8:	f043 0301 	orr.w	r3, r3, #1
   16eec:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16ef0:	7903      	ldrb	r3, [r0, #4]
   16ef2:	f043 0303 	orr.w	r3, r3, #3
   16ef6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   16ef8:	2306      	movs	r3, #6
   16efa:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   16efc:	230c      	movs	r3, #12
   16efe:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
   16f00:	2309      	movs	r3, #9
   16f02:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
   16f04:	f06f 030e 	mvn.w	r3, #14
   16f08:	7243      	strb	r3, [r0, #9]
   16f0a:	2305      	movs	r3, #5
   16f0c:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
   16f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16f12:	72c3      	strb	r3, [r0, #11]
   16f14:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
   16f16:	4630      	mov	r0, r6
   16f18:	f7fe f974 	bl	15204 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
   16f1c:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
   16f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16f24:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
   16f28:	f007 fd00 	bl	1e92c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   16f2c:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   16f2e:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   16f30:	2201      	movs	r2, #1
   16f32:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
   16f36:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   16f3a:	7003      	strb	r3, [r0, #0]
   16f3c:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
   16f3e:	b1c2      	cbz	r2, 16f72 <isr_rx_conn_pkt_ctrl+0x58e>
		pdu_data_tx->md = 1;
   16f40:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
   16f44:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
   16f46:	7b23      	ldrb	r3, [r4, #12]
   16f48:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
   16f4c:	7ba2      	ldrb	r2, [r4, #14]
   16f4e:	7b63      	ldrb	r3, [r4, #13]
   16f50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16f54:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
   16f58:	7be3      	ldrb	r3, [r4, #15]
   16f5a:	7c22      	ldrb	r2, [r4, #16]
   16f5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16f60:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
   16f64:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   16f68:	f043 0302 	orr.w	r3, r3, #2
   16f6c:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   16f70:	e5c0      	b.n	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		pdu_data_tx->md = 0;
   16f72:	f362 1304 	bfi	r3, r2, #4, #1
   16f76:	e7e5      	b.n	16f44 <isr_rx_conn_pkt_ctrl+0x560>
	} else if (!conn->llcp_version.rx) {
   16f78:	f013 0302 	ands.w	r3, r3, #2
   16f7c:	f47f adba 	bne.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		conn->procedure_expire = 0;
   16f80:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
   16f84:	2301      	movs	r3, #1
   16f86:	702b      	strb	r3, [r5, #0]
   16f88:	e7dd      	b.n	16f46 <isr_rx_conn_pkt_ctrl+0x562>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
   16f8a:	7a41      	ldrb	r1, [r0, #9]
   16f8c:	200d      	movs	r0, #13
   16f8e:	f7fb f9d3 	bl	12338 <pdu_len_cmp>
   16f92:	2800      	cmp	r0, #0
   16f94:	f000 86b2 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
   16f98:	4b3b      	ldr	r3, [pc, #236]	; (17088 <isr_rx_conn_pkt_ctrl+0x6a4>)
   16f9a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
		_radio.conn_curr->pause_rx = 0;
   16f9e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   16fa2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   16fa6:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
   16faa:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
   16fac:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   16fb0:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
   16fb4:	2301      	movs	r3, #1
   16fb6:	702b      	strb	r3, [r5, #0]
   16fb8:	e5e6      	b.n	16b88 <isr_rx_conn_pkt_ctrl+0x1a4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   16fba:	7a41      	ldrb	r1, [r0, #9]
   16fbc:	200f      	movs	r0, #15
   16fbe:	f7fb f9bb 	bl	12338 <pdu_len_cmp>
   16fc2:	2800      	cmp	r0, #0
   16fc4:	f000 869a 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
   16fc8:	4a2f      	ldr	r2, [pc, #188]	; (17088 <isr_rx_conn_pkt_ctrl+0x6a4>)
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   16fca:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
   16fce:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
   16fd2:	b13b      	cbz	r3, 16fe4 <isr_rx_conn_pkt_ctrl+0x600>
   16fd4:	4283      	cmp	r3, r0
   16fd6:	d005      	beq.n	16fe4 <isr_rx_conn_pkt_ctrl+0x600>
			nack = reject_ext_ind_send(_radio.conn_curr,
   16fd8:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
   16fda:	210f      	movs	r1, #15
}
   16fdc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
   16fe0:	f7fe b980 	b.w	152e4 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
   16fe4:	f990 601d 	ldrsb.w	r6, [r0, #29]
   16fe8:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
   16fec:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   16ff0:	2e00      	cmp	r6, #0
   16ff2:	f2c0 80b5 	blt.w	17160 <isr_rx_conn_pkt_ctrl+0x77c>
			if ((conn->llcp_conn_param.req !=
   16ff6:	4299      	cmp	r1, r3
   16ff8:	d009      	beq.n	1700e <isr_rx_conn_pkt_ctrl+0x62a>
			    ((conn->llcp_conn_param.state ==
   16ffa:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   16ffe:	f013 0307 	ands.w	r3, r3, #7
   17002:	d002      	beq.n	1700a <isr_rx_conn_pkt_ctrl+0x626>
			      LLCP_CPR_STATE_REQ) ||
   17004:	3b04      	subs	r3, #4
   17006:	2b01      	cmp	r3, #1
   17008:	d801      	bhi.n	1700e <isr_rx_conn_pkt_ctrl+0x62a>
				nack = reject_ext_ind_send(_radio.conn_curr,
   1700a:	2223      	movs	r2, #35	; 0x23
   1700c:	e7e5      	b.n	16fda <isr_rx_conn_pkt_ctrl+0x5f6>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
   1700e:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   17012:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   17016:	4299      	cmp	r1, r3
   17018:	d003      	beq.n	17022 <isr_rx_conn_pkt_ctrl+0x63e>
   1701a:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   1701e:	2b03      	cmp	r3, #3
   17020:	d105      	bne.n	1702e <isr_rx_conn_pkt_ctrl+0x64a>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   17022:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
   17026:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
   1702a:	4299      	cmp	r1, r3
   1702c:	d001      	beq.n	17032 <isr_rx_conn_pkt_ctrl+0x64e>
				nack = reject_ext_ind_send(_radio.conn_curr,
   1702e:	222a      	movs	r2, #42	; 0x2a
   17030:	e7d3      	b.n	16fda <isr_rx_conn_pkt_ctrl+0x5f6>
				if ((cpr->interval_min < 6) ||
   17032:	f8b4 900c 	ldrh.w	r9, [r4, #12]
   17036:	fa1f f389 	uxth.w	r3, r9
   1703a:	2b05      	cmp	r3, #5
   1703c:	d922      	bls.n	17084 <isr_rx_conn_pkt_ctrl+0x6a0>
				    (cpr->interval_max > 3200) ||
   1703e:	f8b4 800e 	ldrh.w	r8, [r4, #14]
   17042:	fa1f f188 	uxth.w	r1, r8
				if ((cpr->interval_min < 6) ||
   17046:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1704a:	d81b      	bhi.n	17084 <isr_rx_conn_pkt_ctrl+0x6a0>
				    (cpr->interval_max > 3200) ||
   1704c:	428b      	cmp	r3, r1
   1704e:	d819      	bhi.n	17084 <isr_rx_conn_pkt_ctrl+0x6a0>
				    (cpr->latency > 499) ||
   17050:	f8b4 e010 	ldrh.w	lr, [r4, #16]
   17054:	fa1f f68e 	uxth.w	r6, lr
				    (cpr->interval_min > cpr->interval_max) ||
   17058:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   1705c:	d212      	bcs.n	17084 <isr_rx_conn_pkt_ctrl+0x6a0>
				    (cpr->timeout < 10) ||
   1705e:	f8b4 c012 	ldrh.w	ip, [r4, #18]
   17062:	fa1f f38c 	uxth.w	r3, ip
				    (cpr->latency > 499) ||
   17066:	f1a3 070a 	sub.w	r7, r3, #10
   1706a:	b2bf      	uxth	r7, r7
   1706c:	f640 4a76 	movw	sl, #3190	; 0xc76
   17070:	4557      	cmp	r7, sl
   17072:	d807      	bhi.n	17084 <isr_rx_conn_pkt_ctrl+0x6a0>
				     ((cpr->latency + 1) *
   17074:	fb06 1701 	mla	r7, r6, r1, r1
				    (cpr->timeout > 3200) ||
   17078:	ebb7 0f83 	cmp.w	r7, r3, lsl #2
   1707c:	da02      	bge.n	17084 <isr_rx_conn_pkt_ctrl+0x6a0>
				    (cpr->preferred_periodicity >
   1707e:	7d27      	ldrb	r7, [r4, #20]
				      cpr->interval_max)) ||
   17080:	42b9      	cmp	r1, r7
   17082:	d203      	bcs.n	1708c <isr_rx_conn_pkt_ctrl+0x6a8>
				nack = reject_ext_ind_send(conn,
   17084:	221e      	movs	r2, #30
   17086:	e7a8      	b.n	16fda <isr_rx_conn_pkt_ctrl+0x5f6>
   17088:	2000126c 	.word	0x2000126c
				conn->llcp_conn_param.interval_min =
   1708c:	f8a0 90c4 	strh.w	r9, [r0, #196]	; 0xc4
				conn->llcp_conn_param.interval_max =
   17090:	f8a0 80c6 	strh.w	r8, [r0, #198]	; 0xc6
				conn->llcp_conn_param.latency =	cpr->latency;
   17094:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.timeout =	cpr->timeout;
   17098:	f8a0 c0ca 	strh.w	ip, [r0, #202]	; 0xca
				conn->llcp_conn_param.preferred_periodicity =
   1709c:	f880 70cc 	strb.w	r7, [r0, #204]	; 0xcc
					cpr->reference_conn_event_count;
   170a0:	f894 c016 	ldrb.w	ip, [r4, #22]
   170a4:	7d67      	ldrb	r7, [r4, #21]
   170a6:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   170aa:	f8a0 70ce 	strh.w	r7, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   170ae:	f894 c018 	ldrb.w	ip, [r4, #24]
   170b2:	7de7      	ldrb	r7, [r4, #23]
   170b4:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   170b8:	f8a0 70d0 	strh.w	r7, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   170bc:	f894 c01a 	ldrb.w	ip, [r4, #26]
   170c0:	7e67      	ldrb	r7, [r4, #25]
   170c2:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   170c6:	f8a0 70d2 	strh.w	r7, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   170ca:	f894 c01c 	ldrb.w	ip, [r4, #28]
   170ce:	7ee7      	ldrb	r7, [r4, #27]
   170d0:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   170d4:	f8a0 70d4 	strh.w	r7, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   170d8:	f894 c01e 	ldrb.w	ip, [r4, #30]
   170dc:	7f67      	ldrb	r7, [r4, #29]
   170de:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   170e2:	f8a0 70d6 	strh.w	r7, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   170e6:	7fe7      	ldrb	r7, [r4, #31]
   170e8:	f894 c020 	ldrb.w	ip, [r4, #32]
   170ec:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   170f0:	f8a0 70d8 	strh.w	r7, [r0, #216]	; 0xd8
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   170f4:	f894 7021 	ldrb.w	r7, [r4, #33]	; 0x21
   170f8:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
   170fc:	ea47 2404 	orr.w	r4, r7, r4, lsl #8
   17100:	f8a0 40da 	strh.w	r4, [r0, #218]	; 0xda
				if ((conn->llcp_conn_param.interval_max !=
   17104:	8c84      	ldrh	r4, [r0, #36]	; 0x24
   17106:	428c      	cmp	r4, r1
   17108:	d111      	bne.n	1712e <isr_rx_conn_pkt_ctrl+0x74a>
				     conn->conn_interval) ||
   1710a:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
   1710c:	42b4      	cmp	r4, r6
   1710e:	d10e      	bne.n	1712e <isr_rx_conn_pkt_ctrl+0x74a>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   17110:	f240 44e2 	movw	r4, #1250	; 0x4e2
   17114:	4361      	muls	r1, r4
   17116:	f242 7410 	movw	r4, #10000	; 0x2710
   1711a:	fb04 1303 	mla	r3, r4, r3, r1
   1711e:	3b01      	subs	r3, #1
   17120:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
   17124:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   17126:	b29b      	uxth	r3, r3
   17128:	4299      	cmp	r1, r3
   1712a:	f000 80a5 	beq.w	17278 <isr_rx_conn_pkt_ctrl+0x894>
					if (conn->pause_tx) {
   1712e:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   17132:	0719      	lsls	r1, r3, #28
   17134:	f140 809a 	bpl.w	1726c <isr_rx_conn_pkt_ctrl+0x888>
						conn->llcp_conn_param.state =
   17138:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   1713c:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
   1713e:	f361 0302 	bfi	r3, r1, #0, #3
   17142:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   17146:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   1714a:	3b01      	subs	r3, #1
   1714c:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   17150:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
   17154:	2b00      	cmp	r3, #0
   17156:	f47f accd 	bne.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
				_radio.conn_upd = conn;
   1715a:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
   1715e:	e4c9      	b.n	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   17160:	4299      	cmp	r1, r3
   17162:	d004      	beq.n	1716e <isr_rx_conn_pkt_ctrl+0x78a>
			    _radio.conn_curr->llcp_conn_param.ack) ||
   17164:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   17168:	079b      	lsls	r3, r3, #30
   1716a:	f040 808e 	bne.w	1728a <isr_rx_conn_pkt_ctrl+0x8a6>
			if ((cpr->interval_min < 6) ||
   1716e:	f8b4 900c 	ldrh.w	r9, [r4, #12]
   17172:	fa1f f389 	uxth.w	r3, r9
   17176:	2b05      	cmp	r3, #5
   17178:	d984      	bls.n	17084 <isr_rx_conn_pkt_ctrl+0x6a0>
			    (cpr->interval_max > 3200) ||
   1717a:	f8b4 800e 	ldrh.w	r8, [r4, #14]
   1717e:	fa1f f188 	uxth.w	r1, r8
			if ((cpr->interval_min < 6) ||
   17182:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   17186:	f63f af7d 	bhi.w	17084 <isr_rx_conn_pkt_ctrl+0x6a0>
			    (cpr->interval_max > 3200) ||
   1718a:	428b      	cmp	r3, r1
   1718c:	f63f af7a 	bhi.w	17084 <isr_rx_conn_pkt_ctrl+0x6a0>
			    (cpr->latency > 499) ||
   17190:	f8b4 e010 	ldrh.w	lr, [r4, #16]
   17194:	fa1f f68e 	uxth.w	r6, lr
			    (cpr->interval_min > cpr->interval_max) ||
   17198:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   1719c:	f4bf af72 	bcs.w	17084 <isr_rx_conn_pkt_ctrl+0x6a0>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   171a0:	f8b4 c012 	ldrh.w	ip, [r4, #18]
   171a4:	fa1f f38c 	uxth.w	r3, ip
			    (cpr->latency > 499) ||
   171a8:	f1a3 070a 	sub.w	r7, r3, #10
   171ac:	b2bf      	uxth	r7, r7
   171ae:	f640 4a76 	movw	sl, #3190	; 0xc76
   171b2:	4557      	cmp	r7, sl
   171b4:	f63f af66 	bhi.w	17084 <isr_rx_conn_pkt_ctrl+0x6a0>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   171b8:	fb06 1701 	mla	r7, r6, r1, r1
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   171bc:	ebb7 0f83 	cmp.w	r7, r3, lsl #2
   171c0:	f6bf af60 	bge.w	17084 <isr_rx_conn_pkt_ctrl+0x6a0>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   171c4:	7d27      	ldrb	r7, [r4, #20]
						    cpr->interval_max)) ||
   171c6:	42b9      	cmp	r1, r7
   171c8:	f4ff af5c 	bcc.w	17084 <isr_rx_conn_pkt_ctrl+0x6a0>
			conn->llcp_conn_param.interval_min = cpr->interval_min;
   171cc:	f8a0 90c4 	strh.w	r9, [r0, #196]	; 0xc4
			conn->llcp_conn_param.interval_max = cpr->interval_max;
   171d0:	f8a0 80c6 	strh.w	r8, [r0, #198]	; 0xc6
			conn->llcp_conn_param.latency =	cpr->latency;
   171d4:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.timeout =	cpr->timeout;
   171d8:	f8a0 c0ca 	strh.w	ip, [r0, #202]	; 0xca
			conn->llcp_conn_param.preferred_periodicity =
   171dc:	f880 70cc 	strb.w	r7, [r0, #204]	; 0xcc
				cpr->reference_conn_event_count;
   171e0:	f894 c016 	ldrb.w	ip, [r4, #22]
   171e4:	7d67      	ldrb	r7, [r4, #21]
   171e6:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   171ea:	f8a0 70ce 	strh.w	r7, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   171ee:	f894 c018 	ldrb.w	ip, [r4, #24]
   171f2:	7de7      	ldrb	r7, [r4, #23]
   171f4:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   171f8:	f8a0 70d0 	strh.w	r7, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   171fc:	f894 c01a 	ldrb.w	ip, [r4, #26]
   17200:	7e67      	ldrb	r7, [r4, #25]
   17202:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   17206:	f8a0 70d2 	strh.w	r7, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   1720a:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1720e:	7ee7      	ldrb	r7, [r4, #27]
   17210:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   17214:	f8a0 70d4 	strh.w	r7, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   17218:	f894 c01e 	ldrb.w	ip, [r4, #30]
   1721c:	7f67      	ldrb	r7, [r4, #29]
   1721e:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   17222:	f8a0 70d6 	strh.w	r7, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   17226:	7fe7      	ldrb	r7, [r4, #31]
   17228:	f894 c020 	ldrb.w	ip, [r4, #32]
   1722c:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   17230:	f8a0 70d8 	strh.w	r7, [r0, #216]	; 0xd8
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   17234:	f894 7021 	ldrb.w	r7, [r4, #33]	; 0x21
   17238:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
   1723c:	ea47 2404 	orr.w	r4, r7, r4, lsl #8
   17240:	f8a0 40da 	strh.w	r4, [r0, #218]	; 0xda
			if ((conn->llcp_conn_param.interval_max !=
   17244:	8c84      	ldrh	r4, [r0, #36]	; 0x24
   17246:	428c      	cmp	r4, r1
   17248:	d110      	bne.n	1726c <isr_rx_conn_pkt_ctrl+0x888>
			     conn->conn_interval) ||
   1724a:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
   1724c:	42b1      	cmp	r1, r6
   1724e:	d10d      	bne.n	1726c <isr_rx_conn_pkt_ctrl+0x888>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   17250:	f240 41e2 	movw	r1, #1250	; 0x4e2
   17254:	4361      	muls	r1, r4
   17256:	f242 7410 	movw	r4, #10000	; 0x2710
   1725a:	fb04 1303 	mla	r3, r4, r3, r1
   1725e:	3b01      	subs	r3, #1
   17260:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
   17264:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   17266:	b29b      	uxth	r3, r3
   17268:	4299      	cmp	r1, r3
   1726a:	d005      	beq.n	17278 <isr_rx_conn_pkt_ctrl+0x894>
				*rx_enqueue = 1;
   1726c:	2301      	movs	r3, #1
   1726e:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
   17270:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   17274:	2103      	movs	r1, #3
   17276:	e762      	b.n	1713e <isr_rx_conn_pkt_ctrl+0x75a>
				conn->llcp_conn_param.status = 0;
   17278:	2300      	movs	r3, #0
   1727a:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   1727e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
   17282:	2101      	movs	r1, #1
   17284:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   17288:	e759      	b.n	1713e <isr_rx_conn_pkt_ctrl+0x75a>
			LL_ASSERT(0);
   1728a:	4bd0      	ldr	r3, [pc, #832]	; (175cc <isr_rx_conn_pkt_ctrl+0xbe8>)
   1728c:	681b      	ldr	r3, [r3, #0]
   1728e:	075f      	lsls	r7, r3, #29
   17290:	f43f ad04 	beq.w	16c9c <isr_rx_conn_pkt_ctrl+0x2b8>
   17294:	2301      	movs	r3, #1
   17296:	f04f 0200 	mov.w	r2, #0
   1729a:	f363 0202 	bfi	r2, r3, #0, #3
   1729e:	49cc      	ldr	r1, [pc, #816]	; (175d0 <isr_rx_conn_pkt_ctrl+0xbec>)
   172a0:	4bcc      	ldr	r3, [pc, #816]	; (175d4 <isr_rx_conn_pkt_ctrl+0xbf0>)
   172a2:	48cd      	ldr	r0, [pc, #820]	; (175d8 <isr_rx_conn_pkt_ctrl+0xbf4>)
   172a4:	1a5b      	subs	r3, r3, r1
   172a6:	f36f 02c5 	bfc	r2, #3, #3
   172aa:	08db      	lsrs	r3, r3, #3
   172ac:	f363 128f 	bfi	r2, r3, #6, #10
   172b0:	49ca      	ldr	r1, [pc, #808]	; (175dc <isr_rx_conn_pkt_ctrl+0xbf8>)
   172b2:	e4f1      	b.n	16c98 <isr_rx_conn_pkt_ctrl+0x2b4>
		if (_radio.conn_curr->role ||
   172b4:	4bca      	ldr	r3, [pc, #808]	; (175e0 <isr_rx_conn_pkt_ctrl+0xbfc>)
   172b6:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
   172ba:	f995 301d 	ldrsb.w	r3, [r5, #29]
   172be:	2b00      	cmp	r3, #0
   172c0:	f2c0 851c 	blt.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
   172c4:	7a41      	ldrb	r1, [r0, #9]
   172c6:	2010      	movs	r0, #16
   172c8:	f7fb f836 	bl	12338 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   172cc:	2800      	cmp	r0, #0
   172ce:	f000 8515 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		if (!_radio.conn_curr->role &&
   172d2:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   172d6:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   172da:	429a      	cmp	r2, r3
   172dc:	f43f ac0a 	beq.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		    (_radio.conn_curr->llcp_conn_param.state ==
   172e0:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
   172e4:	f003 0307 	and.w	r3, r3, #7
   172e8:	2b04      	cmp	r3, #4
   172ea:	f47f ac03 	bne.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
			if ((cpr->interval_min < 6) ||
   172ee:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   172f2:	fa1f f28e 	uxth.w	r2, lr
   172f6:	2a05      	cmp	r2, #5
   172f8:	d91e      	bls.n	17338 <isr_rx_conn_pkt_ctrl+0x954>
			    (cpr->interval_max > 3200) ||
   172fa:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
   172fe:	fa1f f38c 	uxth.w	r3, ip
			if ((cpr->interval_min < 6) ||
   17302:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   17306:	d817      	bhi.n	17338 <isr_rx_conn_pkt_ctrl+0x954>
			    (cpr->interval_max > 3200) ||
   17308:	429a      	cmp	r2, r3
   1730a:	d815      	bhi.n	17338 <isr_rx_conn_pkt_ctrl+0x954>
			    (cpr->latency > 499) ||
   1730c:	8a27      	ldrh	r7, [r4, #16]
   1730e:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
   17310:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   17314:	d210      	bcs.n	17338 <isr_rx_conn_pkt_ctrl+0x954>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   17316:	8a66      	ldrh	r6, [r4, #18]
   17318:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
   1731a:	f1a0 010a 	sub.w	r1, r0, #10
   1731e:	b289      	uxth	r1, r1
   17320:	f640 4876 	movw	r8, #3190	; 0xc76
   17324:	4541      	cmp	r1, r8
   17326:	d807      	bhi.n	17338 <isr_rx_conn_pkt_ctrl+0x954>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   17328:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   1732c:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   17330:	da02      	bge.n	17338 <isr_rx_conn_pkt_ctrl+0x954>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   17332:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   17334:	4293      	cmp	r3, r2
   17336:	d203      	bcs.n	17340 <isr_rx_conn_pkt_ctrl+0x95c>
				nack = reject_ext_ind_send(conn,
   17338:	221e      	movs	r2, #30
   1733a:	2110      	movs	r1, #16
				nack = reject_ext_ind_send(_radio.conn_curr,
   1733c:	4628      	mov	r0, r5
   1733e:	e64d      	b.n	16fdc <isr_rx_conn_pkt_ctrl+0x5f8>
			_radio.conn_curr->procedure_expire = 0;
   17340:	2000      	movs	r0, #0
   17342:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval_min = cpr->interval_min;
   17346:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.interval_max = cpr->interval_max;
   1734a:	f8a5 c0c6 	strh.w	ip, [r5, #198]	; 0xc6
			conn->llcp_conn_param.latency =	cpr->latency;
   1734e:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
			conn->llcp_conn_param.timeout =	cpr->timeout;
   17352:	f8a5 60ca 	strh.w	r6, [r5, #202]	; 0xca
			conn->llcp_conn_param.preferred_periodicity =
   17356:	f885 20cc 	strb.w	r2, [r5, #204]	; 0xcc
				cpr->reference_conn_event_count;
   1735a:	7da2      	ldrb	r2, [r4, #22]
   1735c:	7d63      	ldrb	r3, [r4, #21]
   1735e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   17362:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   17366:	7e22      	ldrb	r2, [r4, #24]
   17368:	7de3      	ldrb	r3, [r4, #23]
   1736a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1736e:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   17372:	7ea2      	ldrb	r2, [r4, #26]
   17374:	7e63      	ldrb	r3, [r4, #25]
   17376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1737a:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   1737e:	7f22      	ldrb	r2, [r4, #28]
   17380:	7ee3      	ldrb	r3, [r4, #27]
   17382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17386:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   1738a:	7fa2      	ldrb	r2, [r4, #30]
   1738c:	7f63      	ldrb	r3, [r4, #29]
   1738e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17392:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   17396:	f894 2020 	ldrb.w	r2, [r4, #32]
   1739a:	7fe3      	ldrb	r3, [r4, #31]
   1739c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   173a0:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   173a4:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   173a8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   173ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   173b0:	f8a5 30da 	strh.w	r3, [r5, #218]	; 0xda
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   173b4:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   173b8:	2201      	movs	r2, #1
   173ba:	f362 0302 	bfi	r3, r2, #0, #3
   173be:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   173c2:	f7ff bbe1 	b.w	16b88 <isr_rx_conn_pkt_ctrl+0x1a4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   173c6:	7a41      	ldrb	r1, [r0, #9]
   173c8:	2011      	movs	r0, #17
   173ca:	f7fa ffb5 	bl	12338 <pdu_len_cmp>
   173ce:	2800      	cmp	r0, #0
   173d0:	f000 8494 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
   173d4:	4a82      	ldr	r2, [pc, #520]	; (175e0 <isr_rx_conn_pkt_ctrl+0xbfc>)
   173d6:	7b21      	ldrb	r1, [r4, #12]
   173d8:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
		   _radio.conn_curr->llcp_phy.req) {
   173dc:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   173e0:	f893 60f5 	ldrb.w	r6, [r3, #245]	; 0xf5
   173e4:	4286      	cmp	r6, r0
   173e6:	d028      	beq.n	1743a <isr_rx_conn_pkt_ctrl+0xa56>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   173e8:	2916      	cmp	r1, #22
   173ea:	f47f ab83 	bne.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   173ee:	7b61      	ldrb	r1, [r4, #13]
   173f0:	2923      	cmp	r1, #35	; 0x23
   173f2:	d00e      	beq.n	17412 <isr_rx_conn_pkt_ctrl+0xa2e>
				_radio.conn_curr->phy_tx;
   173f4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
   173f8:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   173fc:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
   17400:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   17404:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
   17408:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
   1740a:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   1740e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   17412:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
   17416:	0796      	lsls	r6, r2, #30
   17418:	f57f ab6c 	bpl.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1741c:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
   1741e:	7221      	strb	r1, [r4, #8]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   17420:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
   17422:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   17426:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   1742a:	7262      	strb	r2, [r4, #9]
		p->rx = _radio.conn_curr->phy_rx;
   1742c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   17430:	f3c3 0302 	ubfx	r3, r3, #0, #3
   17434:	72a3      	strb	r3, [r4, #10]
   17436:	f7ff bbe4 	b.w	16c02 <isr_rx_conn_pkt_ctrl+0x21e>
		   _radio.conn_curr->llcp_conn_param.req) {
   1743a:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   1743e:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
   17442:	42b8      	cmp	r0, r7
   17444:	d068      	beq.n	17518 <isr_rx_conn_pkt_ctrl+0xb34>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   17446:	290f      	cmp	r1, #15
   17448:	f47f ab54 	bne.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
   1744c:	f993 001d 	ldrsb.w	r0, [r3, #29]
   17450:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code ==
   17452:	2800      	cmp	r0, #0
   17454:	db1d      	blt.n	17492 <isr_rx_conn_pkt_ctrl+0xaae>
   17456:	291a      	cmp	r1, #26
   17458:	d11b      	bne.n	17492 <isr_rx_conn_pkt_ctrl+0xaae>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1745a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   1745e:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
   17462:	4294      	cmp	r4, r2
   17464:	f000 80f9 	beq.w	1765a <isr_rx_conn_pkt_ctrl+0xc76>
   17468:	4b58      	ldr	r3, [pc, #352]	; (175cc <isr_rx_conn_pkt_ctrl+0xbe8>)
   1746a:	681b      	ldr	r3, [r3, #0]
   1746c:	075d      	lsls	r5, r3, #29
   1746e:	f43f ac15 	beq.w	16c9c <isr_rx_conn_pkt_ctrl+0x2b8>
   17472:	2301      	movs	r3, #1
   17474:	f04f 0200 	mov.w	r2, #0
   17478:	f363 0202 	bfi	r2, r3, #0, #3
   1747c:	4954      	ldr	r1, [pc, #336]	; (175d0 <isr_rx_conn_pkt_ctrl+0xbec>)
   1747e:	4b55      	ldr	r3, [pc, #340]	; (175d4 <isr_rx_conn_pkt_ctrl+0xbf0>)
   17480:	1a5b      	subs	r3, r3, r1
   17482:	f36f 02c5 	bfc	r2, #3, #3
   17486:	08db      	lsrs	r3, r3, #3
   17488:	f363 128f 	bfi	r2, r3, #6, #10
   1748c:	4955      	ldr	r1, [pc, #340]	; (175e4 <isr_rx_conn_pkt_ctrl+0xc00>)
   1748e:	f7ff bb61 	b.w	16b54 <isr_rx_conn_pkt_ctrl+0x170>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   17492:	2923      	cmp	r1, #35	; 0x23
   17494:	d026      	beq.n	174e4 <isr_rx_conn_pkt_ctrl+0xb00>
		LL_ASSERT(_radio.conn_upd == conn);
   17496:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
   1749a:	429e      	cmp	r6, r3
   1749c:	d015      	beq.n	174ca <isr_rx_conn_pkt_ctrl+0xae6>
   1749e:	4b4b      	ldr	r3, [pc, #300]	; (175cc <isr_rx_conn_pkt_ctrl+0xbe8>)
   174a0:	681b      	ldr	r3, [r3, #0]
   174a2:	075c      	lsls	r4, r3, #29
   174a4:	f43f abfa 	beq.w	16c9c <isr_rx_conn_pkt_ctrl+0x2b8>
   174a8:	2301      	movs	r3, #1
   174aa:	f04f 0200 	mov.w	r2, #0
   174ae:	f363 0202 	bfi	r2, r3, #0, #3
   174b2:	4947      	ldr	r1, [pc, #284]	; (175d0 <isr_rx_conn_pkt_ctrl+0xbec>)
   174b4:	4b47      	ldr	r3, [pc, #284]	; (175d4 <isr_rx_conn_pkt_ctrl+0xbf0>)
   174b6:	1a5b      	subs	r3, r3, r1
   174b8:	f36f 02c5 	bfc	r2, #3, #3
   174bc:	08db      	lsrs	r3, r3, #3
   174be:	4949      	ldr	r1, [pc, #292]	; (175e4 <isr_rx_conn_pkt_ctrl+0xc00>)
   174c0:	f363 128f 	bfi	r2, r3, #6, #10
			LL_ASSERT(_radio.conn_upd == conn);
   174c4:	4848      	ldr	r0, [pc, #288]	; (175e8 <isr_rx_conn_pkt_ctrl+0xc04>)
   174c6:	f7ff bbe7 	b.w	16c98 <isr_rx_conn_pkt_ctrl+0x2b4>
		_radio.conn_upd = NULL;
   174ca:	2600      	movs	r6, #0
		if (conn->role) {
   174cc:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
   174ce:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
   174d2:	bfb8      	it	lt
   174d4:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
   174d8:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   174dc:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
   174e0:	bfb8      	it	lt
   174e2:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
   174e4:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   174e8:	0710      	lsls	r0, r2, #28
   174ea:	f57f ab03 	bpl.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
	cp->status = rej_ext_ind->error_code;
   174ee:	7221      	strb	r1, [r4, #8]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   174f0:	2208      	movs	r2, #8
	cp->latency = conn->latency;
   174f2:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   174f4:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
   174f6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   174f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
   174fa:	f8a4 2009 	strh.w	r2, [r4, #9]
	cp->timeout = conn->supervision_reload *
   174fe:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
   17500:	237d      	movs	r3, #125	; 0x7d
   17502:	4353      	muls	r3, r2
	cp->latency = conn->latency;
   17504:	f8a4 100b 	strh.w	r1, [r4, #11]
	cp->timeout = conn->supervision_reload *
   17508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1750c:	fb93 f3f2 	sdiv	r3, r3, r2
   17510:	f8a4 300d 	strh.w	r3, [r4, #13]
   17514:	f7ff bb75 	b.w	16c02 <isr_rx_conn_pkt_ctrl+0x21e>
		   _radio.conn_curr->llcp_length.req) {
   17518:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   1751c:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
   17520:	4290      	cmp	r0, r2
   17522:	d01a      	beq.n	1755a <isr_rx_conn_pkt_ctrl+0xb76>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   17524:	2914      	cmp	r1, #20
   17526:	f47f aae5 	bne.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		conn->llcp_length.ack = conn->llcp_length.req;
   1752a:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->llcp_length.pause_tx = 0;
   1752e:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   17532:	f36f 0282 	bfc	r2, #2, #1
   17536:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
		conn->procedure_expire = 0;
   1753a:	2000      	movs	r0, #0
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   1753c:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
   1753e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   17542:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   17544:	2215      	movs	r2, #21
   17546:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   17548:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   1754a:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   1754c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
   1754e:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   17550:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
   17552:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
   17554:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   17556:	8263      	strh	r3, [r4, #18]
   17558:	e52c      	b.n	16fb4 <isr_rx_conn_pkt_ctrl+0x5d0>
		switch (rej_ext_ind->reject_opcode) {
   1755a:	2903      	cmp	r1, #3
   1755c:	f47f aaca 	bne.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
			_radio.conn_curr->pause_rx = 0;
   17560:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   17564:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   17568:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
   1756c:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
   1756e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   17572:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   17576:	230d      	movs	r3, #13
   17578:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
   1757a:	7b63      	ldrb	r3, [r4, #13]
   1757c:	7323      	strb	r3, [r4, #12]
   1757e:	e519      	b.n	16fb4 <isr_rx_conn_pkt_ctrl+0x5d0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
   17580:	7a41      	ldrb	r1, [r0, #9]
   17582:	2012      	movs	r0, #18
   17584:	f7fa fed8 	bl	12338 <pdu_len_cmp>
   17588:	2800      	cmp	r0, #0
   1758a:	f000 83b7 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
   1758e:	4814      	ldr	r0, [pc, #80]	; (175e0 <isr_rx_conn_pkt_ctrl+0xbfc>)
   17590:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   17594:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
   17598:	f7f9 fea8 	bl	112ec <mem_acquire>
	if (!node_tx) {
   1759c:	4601      	mov	r1, r0
   1759e:	2800      	cmp	r0, #0
   175a0:	f43f ac44 	beq.w	16e2c <isr_rx_conn_pkt_ctrl+0x448>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   175a4:	7903      	ldrb	r3, [r0, #4]
   175a6:	f043 0303 	orr.w	r3, r3, #3
   175aa:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   175ac:	2301      	movs	r3, #1
   175ae:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   175b0:	2313      	movs	r3, #19
   175b2:	e476      	b.n	16ea2 <isr_rx_conn_pkt_ctrl+0x4be>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
   175b4:	7a41      	ldrb	r1, [r0, #9]
   175b6:	2013      	movs	r0, #19
   175b8:	f7fa febe 	bl	12338 <pdu_len_cmp>
   175bc:	2800      	cmp	r0, #0
   175be:	f000 839d 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		_radio.conn_curr->procedure_expire = 0;
   175c2:	4b07      	ldr	r3, [pc, #28]	; (175e0 <isr_rx_conn_pkt_ctrl+0xbfc>)
   175c4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   175c8:	e417      	b.n	16dfa <isr_rx_conn_pkt_ctrl+0x416>
   175ca:	bf00      	nop
   175cc:	2000e218 	.word	0x2000e218
   175d0:	0002ef38 	.word	0x0002ef38
   175d4:	0002ef70 	.word	0x0002ef70
   175d8:	0003146d 	.word	0x0003146d
   175dc:	0003291a 	.word	0x0003291a
   175e0:	2000126c 	.word	0x2000126c
   175e4:	000328df 	.word	0x000328df
   175e8:	0003319c 	.word	0x0003319c
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   175ec:	7a41      	ldrb	r1, [r0, #9]
   175ee:	2007      	movs	r0, #7
   175f0:	f7fa fea2 	bl	12338 <pdu_len_cmp>
   175f4:	2800      	cmp	r0, #0
   175f6:	f000 8381 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
   175fa:	4acd      	ldr	r2, [pc, #820]	; (17930 <isr_rx_conn_pkt_ctrl+0xf4c>)
   175fc:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
   17600:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
   17604:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
   17608:	42b1      	cmp	r1, r6
   1760a:	4611      	mov	r1, r2
   1760c:	f000 8089 	beq.w	17722 <isr_rx_conn_pkt_ctrl+0xd3e>
			conn->llcp_conn_param.disabled = 1;
   17610:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
   17614:	f040 0010 	orr.w	r0, r0, #16
   17618:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
   1761c:	f993 001d 	ldrsb.w	r0, [r3, #29]
   17620:	2800      	cmp	r0, #0
   17622:	db46      	blt.n	176b2 <isr_rx_conn_pkt_ctrl+0xcce>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   17624:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   17628:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
   1762c:	4294      	cmp	r4, r2
   1762e:	d014      	beq.n	1765a <isr_rx_conn_pkt_ctrl+0xc76>
   17630:	4bc0      	ldr	r3, [pc, #768]	; (17934 <isr_rx_conn_pkt_ctrl+0xf50>)
   17632:	681b      	ldr	r3, [r3, #0]
   17634:	075a      	lsls	r2, r3, #29
   17636:	f43f ab31 	beq.w	16c9c <isr_rx_conn_pkt_ctrl+0x2b8>
   1763a:	2301      	movs	r3, #1
   1763c:	f04f 0200 	mov.w	r2, #0
   17640:	f363 0202 	bfi	r2, r3, #0, #3
   17644:	49bc      	ldr	r1, [pc, #752]	; (17938 <isr_rx_conn_pkt_ctrl+0xf54>)
   17646:	4bbd      	ldr	r3, [pc, #756]	; (1793c <isr_rx_conn_pkt_ctrl+0xf58>)
   17648:	1a5b      	subs	r3, r3, r1
   1764a:	f36f 02c5 	bfc	r2, #3, #3
   1764e:	08db      	lsrs	r3, r3, #3
   17650:	f363 128f 	bfi	r2, r3, #6, #10
   17654:	49ba      	ldr	r1, [pc, #744]	; (17940 <isr_rx_conn_pkt_ctrl+0xf5c>)
   17656:	f7ff ba7d 	b.w	16b54 <isr_rx_conn_pkt_ctrl+0x170>
				conn->llcp_conn_param.state =
   1765a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   1765e:	2105      	movs	r1, #5
   17660:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
   17664:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   17668:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
   1766c:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   17670:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
   17674:	f8b3 10ca 	ldrh.w	r1, [r3, #202]	; 0xca
   17678:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1767c:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
   17680:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
   17684:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
   17686:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1768a:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
   1768e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
   17692:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
   17694:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
   17698:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
   1769a:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
   1769e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
   176a2:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
   176a6:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
   176aa:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
   176ae:	f7ff ba6b 	b.w	16b88 <isr_rx_conn_pkt_ctrl+0x1a4>
			LL_ASSERT(_radio.conn_upd == conn);
   176b2:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
   176b6:	429a      	cmp	r2, r3
   176b8:	d013      	beq.n	176e2 <isr_rx_conn_pkt_ctrl+0xcfe>
   176ba:	4b9e      	ldr	r3, [pc, #632]	; (17934 <isr_rx_conn_pkt_ctrl+0xf50>)
   176bc:	681b      	ldr	r3, [r3, #0]
   176be:	075b      	lsls	r3, r3, #29
   176c0:	f43f aaec 	beq.w	16c9c <isr_rx_conn_pkt_ctrl+0x2b8>
   176c4:	2301      	movs	r3, #1
   176c6:	f04f 0200 	mov.w	r2, #0
   176ca:	f363 0202 	bfi	r2, r3, #0, #3
   176ce:	499a      	ldr	r1, [pc, #616]	; (17938 <isr_rx_conn_pkt_ctrl+0xf54>)
   176d0:	4b9a      	ldr	r3, [pc, #616]	; (1793c <isr_rx_conn_pkt_ctrl+0xf58>)
   176d2:	1a5b      	subs	r3, r3, r1
   176d4:	f36f 02c5 	bfc	r2, #3, #3
   176d8:	08db      	lsrs	r3, r3, #3
   176da:	f363 128f 	bfi	r2, r3, #6, #10
   176de:	4998      	ldr	r1, [pc, #608]	; (17940 <isr_rx_conn_pkt_ctrl+0xf5c>)
   176e0:	e6f0      	b.n	174c4 <isr_rx_conn_pkt_ctrl+0xae0>
			_radio.conn_upd = NULL;
   176e2:	2300      	movs	r3, #0
   176e4:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
   176e8:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   176ec:	f882 60c1 	strb.w	r6, [r2, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
   176f0:	071f      	lsls	r7, r3, #28
   176f2:	f57f a9ff 	bpl.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   176f6:	2308      	movs	r3, #8
   176f8:	7123      	strb	r3, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   176fa:	231a      	movs	r3, #26
   176fc:	7223      	strb	r3, [r4, #8]
			cp->interval = conn->conn_interval;
   176fe:	8c93      	ldrh	r3, [r2, #36]	; 0x24
			cp->latency = conn->latency;
   17700:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
   17702:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			cp->interval = conn->conn_interval;
   17704:	f8a4 3009 	strh.w	r3, [r4, #9]
			cp->timeout = conn->supervision_reload *
   17708:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
   1770a:	237d      	movs	r3, #125	; 0x7d
   1770c:	4353      	muls	r3, r2
			cp->latency = conn->latency;
   1770e:	f8a4 000b 	strh.w	r0, [r4, #11]
			cp->timeout = conn->supervision_reload *
   17712:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17716:	fb93 f3f2 	sdiv	r3, r3, r2
   1771a:	f8a4 300d 	strh.w	r3, [r4, #13]
   1771e:	f7ff bb04 	b.w	16d2a <isr_rx_conn_pkt_ctrl+0x346>
		} else if (_radio.conn_curr->llcp_length.req !=
   17722:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
   17726:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
   1772a:	4290      	cmp	r0, r2
   1772c:	d009      	beq.n	17742 <isr_rx_conn_pkt_ctrl+0xd5e>
			_radio.conn_curr->llcp_length.ack =
   1772e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->llcp_length.pause_tx = 0;
   17732:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   17736:	f36f 0282 	bfc	r2, #2, #1
   1773a:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
   1773e:	f7ff baf4 	b.w	16d2a <isr_rx_conn_pkt_ctrl+0x346>
		} else if (_radio.conn_curr->llcp_phy.req !=
   17742:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
   17746:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
   1774a:	4290      	cmp	r0, r2
   1774c:	d01b      	beq.n	17786 <isr_rx_conn_pkt_ctrl+0xda2>
			_radio.conn_curr->llcp_phy.ack =
   1774e:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
   17752:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
   17756:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
   1775a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   1775e:	f362 0002 	bfi	r0, r2, #0, #3
   17762:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   17766:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
   1776a:	0786      	lsls	r6, r0, #30
   1776c:	d50f      	bpl.n	1778e <isr_rx_conn_pkt_ctrl+0xdaa>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1776e:	200c      	movs	r0, #12
   17770:	7120      	strb	r0, [r4, #4]
				p->status = 0;
   17772:	2000      	movs	r0, #0
   17774:	7220      	strb	r0, [r4, #8]
				p->tx = _radio.conn_curr->phy_tx;
   17776:	7262      	strb	r2, [r4, #9]
				p->rx = _radio.conn_curr->phy_rx;
   17778:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1777c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   17780:	72a3      	strb	r3, [r4, #10]
   17782:	f7ff bad2 	b.w	16d2a <isr_rx_conn_pkt_ctrl+0x346>
			switch (llctrl->unknown_rsp.type) {
   17786:	7b23      	ldrb	r3, [r4, #12]
   17788:	2b12      	cmp	r3, #18
   1778a:	f47f aace 	bne.w	16d2a <isr_rx_conn_pkt_ctrl+0x346>
		_radio.conn_curr->procedure_expire = 0;
   1778e:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
   17792:	f7ff bb32 	b.w	16dfa <isr_rx_conn_pkt_ctrl+0x416>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   17796:	7a41      	ldrb	r1, [r0, #9]
   17798:	2014      	movs	r0, #20
   1779a:	f7fa fdcd 	bl	12338 <pdu_len_cmp>
   1779e:	2800      	cmp	r0, #0
   177a0:	f000 82ac 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   177a4:	2f14      	cmp	r7, #20
   177a6:	d15f      	bne.n	17868 <isr_rx_conn_pkt_ctrl+0xe84>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   177a8:	4866      	ldr	r0, [pc, #408]	; (17944 <isr_rx_conn_pkt_ctrl+0xf60>)
   177aa:	f7f9 fd9f 	bl	112ec <mem_acquire>
		if (!node_tx) {
   177ae:	4606      	mov	r6, r0
   177b0:	2800      	cmp	r0, #0
   177b2:	f43f ab3b 	beq.w	16e2c <isr_rx_conn_pkt_ctrl+0x448>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   177b6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 17930 <isr_rx_conn_pkt_ctrl+0xf4c>
   177ba:	7ae7      	ldrb	r7, [r4, #11]
   177bc:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
	    ((_radio.conn_curr->llcp_length.req ==
   177c0:	f893 e0e8 	ldrb.w	lr, [r3, #232]	; 0xe8
	if (/* Local idle, and Peer request then complete the Peer procedure
   177c4:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   177c8:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   177ca:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   177cc:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   177ce:	f8b3 c034 	ldrh.w	ip, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
   177d2:	45f0      	cmp	r8, lr
   177d4:	d14a      	bne.n	1786c <isr_rx_conn_pkt_ctrl+0xe88>
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
   177d6:	2f14      	cmp	r7, #20
   177d8:	f040 80dd 	bne.w	17996 <isr_rx_conn_pkt_ctrl+0xfb2>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   177dc:	89a7      	ldrh	r7, [r4, #12]
   177de:	2f1a      	cmp	r7, #26
   177e0:	d968      	bls.n	178b4 <isr_rx_conn_pkt_ctrl+0xed0>
			eff_tx_octets = min(lr->max_rx_octets,
   177e2:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
   177e6:	4547      	cmp	r7, r8
   177e8:	bf28      	it	cs
   177ea:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   177ec:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   177f0:	f1b8 0f1a 	cmp.w	r8, #26
		if (lr->max_rx_time >=
   177f4:	f8b4 800e 	ldrh.w	r8, [r4, #14]
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   177f8:	bf94      	ite	ls
   177fa:	4693      	movls	fp, r2
   177fc:	f04f 0b1b 	movhi.w	fp, #27
		if (lr->max_rx_time >=
   17800:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
   17804:	d358      	bcc.n	178b8 <isr_rx_conn_pkt_ctrl+0xed4>
			eff_tx_time = min(lr->max_rx_time,
   17806:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
   1780a:	45d0      	cmp	r8, sl
   1780c:	bf28      	it	cs
   1780e:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
   17810:	f8b4 a012 	ldrh.w	sl, [r4, #18]
	eff_rx_time = _radio.conn_curr->max_rx_time;
   17814:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
   17818:	bf34      	ite	cc
   1781a:	4682      	movcc	sl, r0
   1781c:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   17820:	455a      	cmp	r2, fp
   17822:	f000 8097 	beq.w	17954 <isr_rx_conn_pkt_ctrl+0xf70>
			free_count_rx = packet_rx_acquired_count_get() +
   17826:	f7fa fdd7 	bl	123d8 <packet_rx_acquired_count_get>
   1782a:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
   1782c:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
   17830:	f7f9 fd8a 	bl	11348 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
   17834:	4420      	add	r0, r4
   17836:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
   17838:	28ff      	cmp	r0, #255	; 0xff
   1783a:	d93f      	bls.n	178bc <isr_rx_conn_pkt_ctrl+0xed8>
   1783c:	4b3d      	ldr	r3, [pc, #244]	; (17934 <isr_rx_conn_pkt_ctrl+0xf50>)
   1783e:	681b      	ldr	r3, [r3, #0]
   17840:	0758      	lsls	r0, r3, #29
   17842:	f43f aa2b 	beq.w	16c9c <isr_rx_conn_pkt_ctrl+0x2b8>
   17846:	2301      	movs	r3, #1
   17848:	f04f 0200 	mov.w	r2, #0
   1784c:	f363 0202 	bfi	r2, r3, #0, #3
   17850:	4939      	ldr	r1, [pc, #228]	; (17938 <isr_rx_conn_pkt_ctrl+0xf54>)
   17852:	4b3a      	ldr	r3, [pc, #232]	; (1793c <isr_rx_conn_pkt_ctrl+0xf58>)
   17854:	483c      	ldr	r0, [pc, #240]	; (17948 <isr_rx_conn_pkt_ctrl+0xf64>)
   17856:	1a5b      	subs	r3, r3, r1
   17858:	f36f 02c5 	bfc	r2, #3, #3
   1785c:	08db      	lsrs	r3, r3, #3
   1785e:	f363 128f 	bfi	r2, r3, #6, #10
   17862:	493a      	ldr	r1, [pc, #232]	; (1794c <isr_rx_conn_pkt_ctrl+0xf68>)
   17864:	f7ff ba18 	b.w	16c98 <isr_rx_conn_pkt_ctrl+0x2b4>
	struct radio_pdu_node_tx *node_tx = NULL;
   17868:	2600      	movs	r6, #0
   1786a:	e7a4      	b.n	177b6 <isr_rx_conn_pkt_ctrl+0xdd2>
		 LLCP_LENGTH_STATE_REQ) ||
   1786c:	f893 80ea 	ldrb.w	r8, [r3, #234]	; 0xea
   17870:	f008 0803 	and.w	r8, r8, #3
	      _radio.conn_curr->llcp_length.ack) &&
   17874:	f1b8 0f01 	cmp.w	r8, #1
   17878:	d9ad      	bls.n	177d6 <isr_rx_conn_pkt_ctrl+0xdf2>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   1787a:	f1b8 0f02 	cmp.w	r8, #2
   1787e:	f040 808a 	bne.w	17996 <isr_rx_conn_pkt_ctrl+0xfb2>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   17882:	3f14      	subs	r7, #20
   17884:	2f01      	cmp	r7, #1
   17886:	d9a9      	bls.n	177dc <isr_rx_conn_pkt_ctrl+0xdf8>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
   17888:	4b2a      	ldr	r3, [pc, #168]	; (17934 <isr_rx_conn_pkt_ctrl+0xf50>)
   1788a:	681b      	ldr	r3, [r3, #0]
   1788c:	0759      	lsls	r1, r3, #29
   1788e:	f43f aa05 	beq.w	16c9c <isr_rx_conn_pkt_ctrl+0x2b8>
   17892:	2301      	movs	r3, #1
   17894:	f04f 0200 	mov.w	r2, #0
   17898:	f363 0202 	bfi	r2, r3, #0, #3
   1789c:	4926      	ldr	r1, [pc, #152]	; (17938 <isr_rx_conn_pkt_ctrl+0xf54>)
   1789e:	4b27      	ldr	r3, [pc, #156]	; (1793c <isr_rx_conn_pkt_ctrl+0xf58>)
   178a0:	482b      	ldr	r0, [pc, #172]	; (17950 <isr_rx_conn_pkt_ctrl+0xf6c>)
   178a2:	1a5b      	subs	r3, r3, r1
   178a4:	f36f 02c5 	bfc	r2, #3, #3
   178a8:	08db      	lsrs	r3, r3, #3
   178aa:	f363 128f 	bfi	r2, r3, #6, #10
   178ae:	4927      	ldr	r1, [pc, #156]	; (1794c <isr_rx_conn_pkt_ctrl+0xf68>)
   178b0:	f7ff b9f2 	b.w	16c98 <isr_rx_conn_pkt_ctrl+0x2b4>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   178b4:	460f      	mov	r7, r1
   178b6:	e799      	b.n	177ec <isr_rx_conn_pkt_ctrl+0xe08>
	eff_tx_time = _radio.conn_curr->max_tx_time;
   178b8:	46e0      	mov	r8, ip
   178ba:	e7a9      	b.n	17810 <isr_rx_conn_pkt_ctrl+0xe2c>
			if (_radio.packet_rx_data_count == free_count_rx) {
   178bc:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
   178c0:	4283      	cmp	r3, r0
   178c2:	f040 8231 	bne.w	17d28 <isr_rx_conn_pkt_ctrl+0x1344>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   178c6:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
   178ca:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   178ce:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
   178d0:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   178d2:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   178d6:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
   178da:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
   178de:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
   178e2:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   178e6:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   178ea:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   178ee:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
   178f2:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   178f6:	2303      	movs	r3, #3
   178f8:	f889 3015 	strb.w	r3, [r9, #21]
	if (node_tx) {
   178fc:	2e00      	cmp	r6, #0
   178fe:	f43f a8f9 	beq.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17902:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
   17904:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
   17908:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1790c:	f043 0303 	orr.w	r3, r3, #3
   17910:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   17912:	2309      	movs	r3, #9
   17914:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   17916:	2315      	movs	r3, #21
   17918:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
   1791a:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
   1791c:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
   17920:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
   17924:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
   17926:	f7fd fc3f 	bl	151a8 <ctrl_tx_enqueue>
   1792a:	f7ff b8e3 	b.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
   1792e:	bf00      	nop
   17930:	2000126c 	.word	0x2000126c
   17934:	2000e218 	.word	0x2000e218
   17938:	0002ef38 	.word	0x0002ef38
   1793c:	0002ef70 	.word	0x0002ef70
   17940:	0003291a 	.word	0x0003291a
   17944:	200013c8 	.word	0x200013c8
   17948:	00032df4 	.word	0x00032df4
   1794c:	00032901 	.word	0x00032901
   17950:	000331c9 	.word	0x000331c9
			_radio.conn_curr->llcp_length.pause_tx = 0;
   17954:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
			_radio.conn_curr->llcp_length.ack =
   17958:	f883 e0e9 	strb.w	lr, [r3, #233]	; 0xe9
			_radio.conn_curr->llcp_length.pause_tx = 0;
   1795c:	f36f 0282 	bfc	r2, #2, #1
   17960:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
   17964:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
   17966:	f04f 0200 	mov.w	r2, #0
   1796a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
   1796e:	d103      	bne.n	17978 <isr_rx_conn_pkt_ctrl+0xf94>
   17970:	45c4      	cmp	ip, r8
   17972:	d101      	bne.n	17978 <isr_rx_conn_pkt_ctrl+0xf94>
			    eff_rx_time == _radio.conn_curr->max_rx_time &&
   17974:	4550      	cmp	r0, sl
   17976:	d0c1      	beq.n	178fc <isr_rx_conn_pkt_ctrl+0xf18>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   17978:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   1797a:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   1797e:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
   17982:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
   17984:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
   17988:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
   1798a:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
   1798e:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
   17992:	702b      	strb	r3, [r5, #0]
   17994:	e7b2      	b.n	178fc <isr_rx_conn_pkt_ctrl+0xf18>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
   17996:	2f15      	cmp	r7, #21
   17998:	f47f af76 	bne.w	17888 <isr_rx_conn_pkt_ctrl+0xea4>
	eff_tx_time = _radio.conn_curr->max_tx_time;
   1799c:	46e0      	mov	r8, ip
	eff_rx_time = _radio.conn_curr->max_rx_time;
   1799e:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   179a0:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   179a2:	4693      	mov	fp, r2
   179a4:	e7aa      	b.n	178fc <isr_rx_conn_pkt_ctrl+0xf18>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
   179a6:	7a41      	ldrb	r1, [r0, #9]
   179a8:	2016      	movs	r0, #22
   179aa:	f7fa fcc5 	bl	12338 <pdu_len_cmp>
   179ae:	2800      	cmp	r0, #0
   179b0:	f000 81a4 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
   179b4:	48e1      	ldr	r0, [pc, #900]	; (17d3c <isr_rx_conn_pkt_ctrl+0x1358>)
		if (_radio.role == ROLE_MASTER) {
   179b6:	7d03      	ldrb	r3, [r0, #20]
   179b8:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
   179bc:	2b04      	cmp	r3, #4
   179be:	d156      	bne.n	17a6e <isr_rx_conn_pkt_ctrl+0x108a>
			if ((_radio.conn_curr->llcp_phy.ack !=
   179c0:	f895 30f5 	ldrb.w	r3, [r5, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   179c4:	f895 10f4 	ldrb.w	r1, [r5, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   179c8:	428b      	cmp	r3, r1
   179ca:	d009      	beq.n	179e0 <isr_rx_conn_pkt_ctrl+0xffc>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   179cc:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
   179d0:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
   179d4:	3a01      	subs	r2, #1
   179d6:	2a02      	cmp	r2, #2
   179d8:	d802      	bhi.n	179e0 <isr_rx_conn_pkt_ctrl+0xffc>
				nack = reject_ext_ind_send(_radio.conn_curr,
   179da:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
   179dc:	2116      	movs	r1, #22
   179de:	e4ad      	b.n	1733c <isr_rx_conn_pkt_ctrl+0x958>
			} else if (((_radio.conn_curr->llcp_req !=
   179e0:	f895 0074 	ldrb.w	r0, [r5, #116]	; 0x74
   179e4:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
   179e8:	4290      	cmp	r0, r2
   179ea:	d003      	beq.n	179f4 <isr_rx_conn_pkt_ctrl+0x1010>
				     _radio.conn_curr->llcp_ack) &&
   179ec:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
   179f0:	2a03      	cmp	r2, #3
   179f2:	d105      	bne.n	17a00 <isr_rx_conn_pkt_ctrl+0x101c>
				     LLCP_ENCRYPTION)) ||
   179f4:	f895 00c0 	ldrb.w	r0, [r5, #192]	; 0xc0
   179f8:	f895 20c1 	ldrb.w	r2, [r5, #193]	; 0xc1
   179fc:	4290      	cmp	r0, r2
   179fe:	d001      	beq.n	17a04 <isr_rx_conn_pkt_ctrl+0x1020>
				nack = reject_ext_ind_send(_radio.conn_curr,
   17a00:	222a      	movs	r2, #42	; 0x2a
   17a02:	e7eb      	b.n	179dc <isr_rx_conn_pkt_ctrl+0xff8>
				_radio.conn_curr->llcp_phy.state =
   17a04:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   17a08:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
   17a0a:	f042 0203 	orr.w	r2, r2, #3
   17a0e:	f885 20f6 	strb.w	r2, [r5, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   17a12:	d118      	bne.n	17a46 <isr_rx_conn_pkt_ctrl+0x1062>
					_radio.conn_curr->llcp_phy.ack--;
   17a14:	3b01      	subs	r3, #1
   17a16:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   17a1a:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
   17a1e:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
   17a22:	f36f 0341 	bfc	r3, #1, #1
   17a26:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   17a2a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
						_radio.conn_curr->phy_pref_tx;
   17a2e:	f3c2 0202 	ubfx	r2, r2, #0, #3
					_radio.conn_curr->llcp_phy.tx =
   17a32:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
   17a36:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   17a3a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
					_radio.conn_curr->llcp_phy.rx =
   17a3e:	f362 1347 	bfi	r3, r2, #5, #3
   17a42:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   17a46:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   17a4a:	7b62      	ldrb	r2, [r4, #13]
   17a4c:	f3c3 0182 	ubfx	r1, r3, #2, #3
   17a50:	400a      	ands	r2, r1
   17a52:	f362 0384 	bfi	r3, r2, #2, #3
   17a56:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   17a5a:	7b22      	ldrb	r2, [r4, #12]
   17a5c:	b2db      	uxtb	r3, r3
   17a5e:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   17a62:	f362 1347 	bfi	r3, r2, #5, #3
   17a66:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
   17a6a:	f7ff b843 	b.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   17a6e:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
   17a72:	f7f9 fc3b 	bl	112ec <mem_acquire>
	if (!node_tx) {
   17a76:	4601      	mov	r1, r0
   17a78:	2800      	cmp	r0, #0
   17a7a:	f43f a9d7 	beq.w	16e2c <isr_rx_conn_pkt_ctrl+0x448>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   17a7e:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
   17a82:	f895 c0f5 	ldrb.w	ip, [r5, #245]	; 0xf5
   17a86:	f895 0038 	ldrb.w	r0, [r5, #56]	; 0x38
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   17a8a:	2202      	movs	r2, #2
   17a8c:	f362 0301 	bfi	r3, r2, #0, #2
   17a90:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
   17a94:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
	if (conn->llcp_phy.ack ==
   17a98:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
   17a9c:	f3c0 0002 	ubfx	r0, r0, #0, #3
   17aa0:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   17aa4:	4563      	cmp	r3, ip
   17aa6:	b2c7      	uxtb	r7, r0
   17aa8:	b2d6      	uxtb	r6, r2
   17aaa:	d114      	bne.n	17ad6 <isr_rx_conn_pkt_ctrl+0x10f2>
		conn->llcp_phy.ack--;
   17aac:	3b01      	subs	r3, #1
   17aae:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
   17ab2:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
   17ab6:	f36f 0341 	bfc	r3, #1, #1
   17aba:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
   17abe:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   17ac2:	f367 0384 	bfi	r3, r7, #2, #3
		conn->llcp_phy.rx =
   17ac6:	f366 1347 	bfi	r3, r6, #5, #3
   17aca:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
   17ace:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
   17ad2:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
   17ad6:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   17ada:	7b66      	ldrb	r6, [r4, #13]
   17adc:	f3c3 0782 	ubfx	r7, r3, #2, #3
   17ae0:	403e      	ands	r6, r7
   17ae2:	f366 0384 	bfi	r3, r6, #2, #3
   17ae6:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
   17aea:	7b24      	ldrb	r4, [r4, #12]
   17aec:	b2db      	uxtb	r3, r3
   17aee:	ea04 1453 	and.w	r4, r4, r3, lsr #5
   17af2:	f364 1347 	bfi	r3, r4, #5, #3
   17af6:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17afa:	790b      	ldrb	r3, [r1, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   17afc:	7208      	strb	r0, [r1, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17afe:	f043 0303 	orr.w	r3, r3, #3
   17b02:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   17b04:	2303      	movs	r3, #3
   17b06:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   17b08:	2317      	movs	r3, #23
   17b0a:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   17b0c:	724a      	strb	r2, [r1, #9]
   17b0e:	f7ff b99f 	b.w	16e50 <isr_rx_conn_pkt_ctrl+0x46c>
		if (_radio.conn_curr->role ||
   17b12:	4e8a      	ldr	r6, [pc, #552]	; (17d3c <isr_rx_conn_pkt_ctrl+0x1358>)
   17b14:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
   17b18:	f995 301d 	ldrsb.w	r3, [r5, #29]
   17b1c:	2b00      	cmp	r3, #0
   17b1e:	f2c0 80ed 	blt.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
   17b22:	7a41      	ldrb	r1, [r0, #9]
   17b24:	2017      	movs	r0, #23
   17b26:	f7fa fc07 	bl	12338 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   17b2a:	2800      	cmp	r0, #0
   17b2c:	f000 80e6 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		if ((_radio.role == ROLE_MASTER) &&
   17b30:	7d33      	ldrb	r3, [r6, #20]
   17b32:	2b04      	cmp	r3, #4
   17b34:	f47e afde 	bne.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
   17b38:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
   17b3c:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
   17b40:	429a      	cmp	r2, r3
   17b42:	f43e afd7 	beq.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		    (_radio.conn_curr->llcp_phy.state ==
   17b46:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
   17b4a:	f003 0203 	and.w	r2, r3, #3
   17b4e:	2a02      	cmp	r2, #2
   17b50:	f47e afd0 	bne.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   17b54:	f043 0303 	orr.w	r3, r3, #3
   17b58:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   17b5c:	7b62      	ldrb	r2, [r4, #13]
   17b5e:	f3c3 0182 	ubfx	r1, r3, #2, #3
   17b62:	400a      	ands	r2, r1
   17b64:	f362 0384 	bfi	r3, r2, #2, #3
   17b68:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   17b6c:	7b22      	ldrb	r2, [r4, #12]
   17b6e:	b2db      	uxtb	r3, r3
   17b70:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   17b74:	f362 1347 	bfi	r3, r2, #5, #3
   17b78:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
   17b7c:	f7fe bfb3 	b.w	16ae6 <isr_rx_conn_pkt_ctrl+0x102>
		if (!_radio.conn_curr->role ||
   17b80:	4b6e      	ldr	r3, [pc, #440]	; (17d3c <isr_rx_conn_pkt_ctrl+0x1358>)
   17b82:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
   17b86:	f996 301d 	ldrsb.w	r3, [r6, #29]
   17b8a:	2b00      	cmp	r3, #0
   17b8c:	f280 80b6 	bge.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
   17b90:	7a41      	ldrb	r1, [r0, #9]
   17b92:	2018      	movs	r0, #24
   17b94:	f7fa fbd0 	bl	12338 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   17b98:	2800      	cmp	r0, #0
   17b9a:	f000 80af 	beq.w	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   17b9e:	7b27      	ldrb	r7, [r4, #12]
   17ba0:	7b62      	ldrb	r2, [r4, #13]
   17ba2:	ea47 0002 	orr.w	r0, r7, r2
   17ba6:	f010 0007 	ands.w	r0, r0, #7
   17baa:	d125      	bne.n	17bf8 <isr_rx_conn_pkt_ctrl+0x1214>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   17bac:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
   17bb0:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
   17bb4:	4293      	cmp	r3, r2
   17bb6:	f43e af9d 	beq.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   17bba:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   17bbe:	f003 0303 	and.w	r3, r3, #3
   17bc2:	2b02      	cmp	r3, #2
   17bc4:	f47e af96 	bne.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		if (!conn->llcp_phy.cmd) {
   17bc8:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   17bcc:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
   17bd0:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
   17bd2:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   17bd6:	f57e af8d 	bpl.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   17bda:	230c      	movs	r3, #12
		upd->status = 0;
   17bdc:	7220      	strb	r0, [r4, #8]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   17bde:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
   17be0:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   17be4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   17be8:	7263      	strb	r3, [r4, #9]
		upd->rx = conn->phy_rx;
   17bea:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
   17bee:	f3c3 0302 	ubfx	r3, r3, #0, #3
   17bf2:	72a3      	strb	r3, [r4, #10]
   17bf4:	f7ff b9de 	b.w	16fb4 <isr_rx_conn_pkt_ctrl+0x5d0>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   17bf8:	89e0      	ldrh	r0, [r4, #14]
   17bfa:	8c73      	ldrh	r3, [r6, #34]	; 0x22
   17bfc:	1ac3      	subs	r3, r0, r3
   17bfe:	041b      	lsls	r3, r3, #16
   17c00:	d441      	bmi.n	17c86 <isr_rx_conn_pkt_ctrl+0x12a2>
	if (conn->llcp_req != conn->llcp_ack) {
   17c02:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
   17c06:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
   17c0a:	428b      	cmp	r3, r1
   17c0c:	d140      	bne.n	17c90 <isr_rx_conn_pkt_ctrl+0x12ac>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   17c0e:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
   17c12:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
   17c16:	42a3      	cmp	r3, r4
   17c18:	d014      	beq.n	17c44 <isr_rx_conn_pkt_ctrl+0x1260>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   17c1a:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   17c1e:	f003 0303 	and.w	r3, r3, #3
   17c22:	2b02      	cmp	r3, #2
   17c24:	d10e      	bne.n	17c44 <isr_rx_conn_pkt_ctrl+0x1260>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   17c26:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   17c2a:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   17c2e:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   17c32:	f3c3 0340 	ubfx	r3, r3, #1, #1
   17c36:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
   17c3a:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   17c3c:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
   17c40:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   17c44:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
   17c48:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   17c4c:	f002 0207 	and.w	r2, r2, #7
   17c50:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
   17c54:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
   17c58:	f36f 0300 	bfc	r3, #0, #1
   17c5c:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   17c60:	2008      	movs	r0, #8
	conn->llcp_ack--;
   17c62:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
   17c64:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   17c68:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
   17c6c:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   17c70:	2b00      	cmp	r3, #0
   17c72:	f43e af3f 	beq.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   17c76:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
   17c7a:	f362 0302 	bfi	r3, r2, #0, #3
   17c7e:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
   17c82:	f7fe bf37 	b.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		return BT_HCI_ERR_INSTANT_PASSED;
   17c86:	2328      	movs	r3, #40	; 0x28
			_radio.conn_curr->llcp_terminate.reason_peer = err;
   17c88:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
   17c8c:	f7fe bf32 	b.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   17c90:	232a      	movs	r3, #42	; 0x2a
   17c92:	e7f9      	b.n	17c88 <isr_rx_conn_pkt_ctrl+0x12a4>
		if (_radio.conn_curr->role ||
   17c94:	4e29      	ldr	r6, [pc, #164]	; (17d3c <isr_rx_conn_pkt_ctrl+0x1358>)
   17c96:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
   17c9a:	f995 301d 	ldrsb.w	r3, [r5, #29]
   17c9e:	2b00      	cmp	r3, #0
   17ca0:	db2c      	blt.n	17cfc <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
   17ca2:	7a41      	ldrb	r1, [r0, #9]
   17ca4:	2019      	movs	r0, #25
   17ca6:	f7fa fb47 	bl	12338 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   17caa:	b338      	cbz	r0, 17cfc <isr_rx_conn_pkt_ctrl+0x1318>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   17cac:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   17cb0:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   17cb4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   17cb8:	f3c2 0202 	ubfx	r2, r2, #0, #3
   17cbc:	4313      	orrs	r3, r2
   17cbe:	7b22      	ldrb	r2, [r4, #12]
   17cc0:	4213      	tst	r3, r2
   17cc2:	f43e af17 	beq.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
			if (conn->llcp_req != conn->llcp_ack) {
   17cc6:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   17cca:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   17cce:	429a      	cmp	r2, r3
   17cd0:	f47e af10 	bne.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
			memcpy(&conn->llcp.chan_map.chm[0],
   17cd4:	2205      	movs	r2, #5
   17cd6:	f506 718d 	add.w	r1, r6, #282	; 0x11a
   17cda:	f105 0079 	add.w	r0, r5, #121	; 0x79
   17cde:	f7ee ffd3 	bl	6c88 <memcpy>
			conn->llcp.chan_map.initiate = 1;
   17ce2:	2301      	movs	r3, #1
   17ce4:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   17ce8:	2302      	movs	r3, #2
   17cea:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   17cee:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   17cf2:	3b01      	subs	r3, #1
   17cf4:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
   17cf8:	f7fe befc 	b.w	16af4 <isr_rx_conn_pkt_ctrl+0x110>
		nack = unknown_rsp_send(_radio.conn_curr,
   17cfc:	480f      	ldr	r0, [pc, #60]	; (17d3c <isr_rx_conn_pkt_ctrl+0x1358>)
   17cfe:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   17d02:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
   17d06:	f7f9 faf1 	bl	112ec <mem_acquire>
	if (!node_tx) {
   17d0a:	4601      	mov	r1, r0
   17d0c:	2800      	cmp	r0, #0
   17d0e:	f43f a88d 	beq.w	16e2c <isr_rx_conn_pkt_ctrl+0x448>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17d12:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
   17d14:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17d16:	f043 0303 	orr.w	r3, r3, #3
   17d1a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   17d1c:	2302      	movs	r3, #2
   17d1e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   17d20:	2307      	movs	r3, #7
   17d22:	71c3      	strb	r3, [r0, #7]
   17d24:	f7ff b8be 	b.w	16ea4 <isr_rx_conn_pkt_ctrl+0x4c0>
	if (node_tx) {
   17d28:	2e00      	cmp	r6, #0
   17d2a:	f43f a87f 	beq.w	16e2c <isr_rx_conn_pkt_ctrl+0x448>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   17d2e:	4904      	ldr	r1, [pc, #16]	; (17d40 <isr_rx_conn_pkt_ctrl+0x135c>)
   17d30:	4630      	mov	r0, r6
   17d32:	f7f9 faf4 	bl	1131e <mem_release>
   17d36:	f7ff b879 	b.w	16e2c <isr_rx_conn_pkt_ctrl+0x448>
   17d3a:	bf00      	nop
   17d3c:	2000126c 	.word	0x2000126c
   17d40:	200013c8 	.word	0x200013c8
   17d44:	00000000 	.word	0x00000000

00017d48 <isr>:
{
   17d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d4c:	b095      	sub	sp, #84	; 0x54
	trx_done = radio_is_done();
   17d4e:	f006 fdc3 	bl	1e8d8 <radio_is_done>
   17d52:	b2c6      	uxtb	r6, r0
	if (trx_done) {
   17d54:	b366      	cbz	r6, 17db0 <isr+0x68>
		crc_ok = radio_crc_is_valid();
   17d56:	f006 fddf 	bl	1e918 <radio_crc_is_valid>
   17d5a:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
   17d5c:	f006 fe60 	bl	1ea20 <radio_filter_has_match>
   17d60:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
   17d64:	f006 fe66 	bl	1ea34 <radio_filter_match_get>
   17d68:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
   17d6c:	f007 f84c 	bl	1ee08 <radio_ar_has_match>
   17d70:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
   17d74:	f007 f836 	bl	1ede4 <radio_ar_match_get>
   17d78:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
   17d7c:	f006 fe1a 	bl	1e9b4 <radio_rssi_is_ready>
   17d80:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
   17d82:	4ca5      	ldr	r4, [pc, #660]	; (18018 <isr+0x2d0>)
	radio_status_reset();
   17d84:	f006 fd92 	bl	1e8ac <radio_status_reset>
	radio_tmr_status_reset();
   17d88:	f006 fe66 	bl	1ea58 <radio_tmr_status_reset>
	radio_filter_status_reset();
   17d8c:	f006 fe40 	bl	1ea10 <radio_filter_status_reset>
	radio_ar_status_reset();
   17d90:	f007 f82e 	bl	1edf0 <radio_ar_status_reset>
	radio_rssi_status_reset();
   17d94:	f006 fe06 	bl	1e9a4 <radio_rssi_status_reset>
	switch (_radio.state) {
   17d98:	7d63      	ldrb	r3, [r4, #21]
   17d9a:	2b05      	cmp	r3, #5
   17d9c:	f201 8553 	bhi.w	19846 <isr+0x1afe>
   17da0:	e8df f013 	tbh	[pc, r3, lsl #1]
   17da4:	00e70089 	.word	0x00e70089
   17da8:	0ad1000e 	.word	0x0ad1000e
   17dac:	0ad10ad1 	.word	0x0ad10ad1
		devmatch_id = irkmatch_id = 0xFF;
   17db0:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
   17db4:	4635      	mov	r5, r6
   17db6:	46b2      	mov	sl, r6
   17db8:	46b1      	mov	r9, r6
   17dba:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
   17dbc:	46d8      	mov	r8, fp
   17dbe:	e7e0      	b.n	17d82 <isr+0x3a>
	_radio.state = STATE_RX;
   17dc0:	2301      	movs	r3, #1
   17dc2:	7563      	strb	r3, [r4, #21]
	hcto = radio_tmr_tifs_base_get()
   17dc4:	f006 ff4c 	bl	1ec60 <radio_tmr_tifs_base_get>
   17dc8:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
   17dca:	2096      	movs	r0, #150	; 0x96
   17dcc:	f006 fe52 	bl	1ea74 <radio_tmr_tifs_set>
	switch (_radio.role) {
   17dd0:	7d23      	ldrb	r3, [r4, #20]
   17dd2:	3b01      	subs	r3, #1
   17dd4:	2b03      	cmp	r3, #3
   17dd6:	f200 80b7 	bhi.w	17f48 <isr+0x200>
   17dda:	e8df f003 	tbb	[pc, r3]
   17dde:	3f02      	.short	0x3f02
   17de0:	6f6f      	.short	0x6f6f
		radio_switch_complete_and_tx(0, 0, 0, 0);
   17de2:	2300      	movs	r3, #0
   17de4:	461a      	mov	r2, r3
   17de6:	4619      	mov	r1, r3
   17de8:	4618      	mov	r0, r3
   17dea:	f006 fdb3 	bl	1e954 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
   17dee:	f006 fda1 	bl	1e934 <radio_pkt_scratch_get>
   17df2:	f006 fd23 	bl	1e83c <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   17df6:	f006 fd65 	bl	1e8c4 <radio_is_ready>
   17dfa:	b1a0      	cbz	r0, 17e26 <isr+0xde>
		LL_ASSERT(!radio_is_ready());
   17dfc:	4b87      	ldr	r3, [pc, #540]	; (1801c <isr+0x2d4>)
   17dfe:	681b      	ldr	r3, [r3, #0]
   17e00:	0759      	lsls	r1, r3, #29
   17e02:	f000 838f 	beq.w	18524 <isr+0x7dc>
   17e06:	2301      	movs	r3, #1
   17e08:	f04f 0200 	mov.w	r2, #0
   17e0c:	f363 0202 	bfi	r2, r3, #0, #3
   17e10:	4983      	ldr	r1, [pc, #524]	; (18020 <isr+0x2d8>)
   17e12:	4b84      	ldr	r3, [pc, #528]	; (18024 <isr+0x2dc>)
   17e14:	1a5b      	subs	r3, r3, r1
   17e16:	f36f 02c5 	bfc	r2, #3, #3
   17e1a:	08db      	lsrs	r3, r3, #3
   17e1c:	4982      	ldr	r1, [pc, #520]	; (18028 <isr+0x2e0>)
   17e1e:	f363 128f 	bfi	r2, r3, #6, #10
	LL_ASSERT(!radio_is_ready());
   17e22:	4882      	ldr	r0, [pc, #520]	; (1802c <isr+0x2e4>)
   17e24:	e37c      	b.n	18520 <isr+0x7d8>
		if (ctrl_rl_enabled()) {
   17e26:	f005 fee9 	bl	1dbfc <ctrl_rl_enabled>
   17e2a:	b138      	cbz	r0, 17e3c <isr+0xf4>
			u8_t count, *irks = ctrl_irks_get(&count);
   17e2c:	a812      	add	r0, sp, #72	; 0x48
   17e2e:	f005 fb77 	bl	1d520 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   17e32:	4601      	mov	r1, r0
   17e34:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   17e38:	f006 ffa2 	bl	1ed80 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
   17e3c:	2100      	movs	r1, #0
   17e3e:	4608      	mov	r0, r1
   17e40:	f006 fd11 	bl	1e866 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
   17e44:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
   17e46:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
   17e48:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   17e4a:	4608      	mov	r0, r1
   17e4c:	f006 fd07 	bl	1e85e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   17e50:	1a28      	subs	r0, r5, r0
   17e52:	f006 fe9b 	bl	1eb8c <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
   17e56:	f006 feeb 	bl	1ec30 <radio_tmr_end_capture>
   17e5a:	e02c      	b.n	17eb6 <isr+0x16e>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   17e5c:	2300      	movs	r3, #0
   17e5e:	461a      	mov	r2, r3
   17e60:	4619      	mov	r1, r3
   17e62:	4618      	mov	r0, r3
   17e64:	f006 fd76 	bl	1e954 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   17e68:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   17e6c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
   17e70:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   17e74:	3008      	adds	r0, #8
   17e76:	f006 fce1 	bl	1e83c <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   17e7a:	f006 fd23 	bl	1e8c4 <radio_is_ready>
   17e7e:	2800      	cmp	r0, #0
   17e80:	d1bc      	bne.n	17dfc <isr+0xb4>
		if (ctrl_rl_enabled()) {
   17e82:	f005 febb 	bl	1dbfc <ctrl_rl_enabled>
   17e86:	b138      	cbz	r0, 17e98 <isr+0x150>
			u8_t count, *irks = ctrl_irks_get(&count);
   17e88:	a812      	add	r0, sp, #72	; 0x48
   17e8a:	f005 fb49 	bl	1d520 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   17e8e:	4601      	mov	r1, r0
   17e90:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   17e94:	f006 ff74 	bl	1ed80 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
   17e98:	2100      	movs	r1, #0
   17e9a:	4608      	mov	r0, r1
   17e9c:	f006 fce3 	bl	1e866 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
   17ea0:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
   17ea2:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
   17ea4:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   17ea6:	4608      	mov	r0, r1
   17ea8:	f006 fcd9 	bl	1e85e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   17eac:	1a28      	subs	r0, r5, r0
   17eae:	f006 fe6d 	bl	1eb8c <radio_tmr_hcto_configure>
		radio_rssi_measure();
   17eb2:	f006 fd67 	bl	1e984 <radio_rssi_measure>
}
   17eb6:	b015      	add	sp, #84	; 0x54
   17eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   17ebc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
   17ec0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   17ec4:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   17ec8:	2100      	movs	r1, #0
   17eca:	09d3      	lsrs	r3, r2, #7
   17ecc:	f000 0007 	and.w	r0, r0, #7
   17ed0:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   17ed4:	f006 fd3e 	bl	1e954 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   17ed8:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   17edc:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
   17ee0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   17ee4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
   17ee8:	3108      	adds	r1, #8
   17eea:	f7fa fec3 	bl	12c74 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
   17eee:	f006 fce9 	bl	1e8c4 <radio_is_ready>
   17ef2:	2800      	cmp	r0, #0
   17ef4:	d182      	bne.n	17dfc <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
   17ef6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17efa:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   17efe:	2101      	movs	r1, #1
   17f00:	f000 0007 	and.w	r0, r0, #7
   17f04:	f006 fcaf 	bl	1e866 <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   17f08:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   17f0c:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
   17f10:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
   17f14:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
   17f16:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
   17f18:	4405      	add	r5, r0
	switch (phy) {
   17f1a:	d013      	beq.n	17f44 <isr+0x1fc>
		return 40;
   17f1c:	2b04      	cmp	r3, #4
   17f1e:	bf0c      	ite	eq
   17f20:	f44f 70bc 	moveq.w	r0, #376	; 0x178
   17f24:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   17f26:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
   17f28:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
   17f2c:	09c1      	lsrs	r1, r0, #7
   17f2e:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   17f32:	f006 fc94 	bl	1e85e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   17f36:	1a28      	subs	r0, r5, r0
   17f38:	f006 fe28 	bl	1eb8c <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
   17f3c:	2001      	movs	r0, #1
   17f3e:	f7fb fdb7 	bl	13ab0 <packet_tx_enqueue>
   17f42:	e7b8      	b.n	17eb6 <isr+0x16e>
		return 24;
   17f44:	2018      	movs	r0, #24
   17f46:	e7ee      	b.n	17f26 <isr+0x1de>
		LL_ASSERT(0);
   17f48:	4b34      	ldr	r3, [pc, #208]	; (1801c <isr+0x2d4>)
   17f4a:	681b      	ldr	r3, [r3, #0]
   17f4c:	075a      	lsls	r2, r3, #29
   17f4e:	f000 82e9 	beq.w	18524 <isr+0x7dc>
   17f52:	2301      	movs	r3, #1
   17f54:	f04f 0200 	mov.w	r2, #0
   17f58:	f363 0202 	bfi	r2, r3, #0, #3
   17f5c:	4930      	ldr	r1, [pc, #192]	; (18020 <isr+0x2d8>)
   17f5e:	4b31      	ldr	r3, [pc, #196]	; (18024 <isr+0x2dc>)
   17f60:	1a5b      	subs	r3, r3, r1
   17f62:	f36f 02c5 	bfc	r2, #3, #3
   17f66:	08db      	lsrs	r3, r3, #3
   17f68:	492f      	ldr	r1, [pc, #188]	; (18028 <isr+0x2e0>)
   17f6a:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(0);
   17f6e:	4830      	ldr	r0, [pc, #192]	; (18030 <isr+0x2e8>)
   17f70:	e2d6      	b.n	18520 <isr+0x7d8>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
   17f72:	b926      	cbnz	r6, 17f7e <isr+0x236>
		_radio.state = STATE_CLOSE;
   17f74:	2303      	movs	r3, #3
   17f76:	7563      	strb	r3, [r4, #21]
		radio_disable();
   17f78:	f006 fc86 	bl	1e888 <radio_disable>
   17f7c:	e79b      	b.n	17eb6 <isr+0x16e>
	switch (_radio.role) {
   17f7e:	7d23      	ldrb	r3, [r4, #20]
   17f80:	3b01      	subs	r3, #1
   17f82:	2b03      	cmp	r3, #3
   17f84:	f201 81ca 	bhi.w	1931c <isr+0x15d4>
   17f88:	e8df f013 	tbh	[pc, r3, lsl #1]
   17f8c:	02d20004 	.word	0x02d20004
   17f90:	06420642 	.word	0x06420642
		if (crc_ok) {
   17f94:	2f00      	cmp	r7, #0
   17f96:	d0ed      	beq.n	17f74 <isr+0x22c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   17f98:	f1ba 0f00 	cmp.w	sl, #0
   17f9c:	d039      	beq.n	18012 <isr+0x2ca>
   17f9e:	4658      	mov	r0, fp
   17fa0:	f005 fb4c 	bl	1d63c <ctrl_rl_irk_idx>
   17fa4:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
	pdu_adv = (void *)radio_pkt_scratch_get();
   17fa8:	f006 fcc4 	bl	1e934 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   17fac:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
   17fb0:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   17fb2:	2127      	movs	r1, #39	; 0x27
   17fb4:	232b      	movs	r3, #43	; 0x2b
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   17fb6:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   17fb8:	fb11 3302 	smlabb	r3, r1, r2, r3
   17fbc:	930a      	str	r3, [sp, #40]	; 0x28
   17fbe:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   17fc0:	f000 030f 	and.w	r3, r0, #15
   17fc4:	2b03      	cmp	r3, #3
   17fc6:	d10a      	bne.n	17fde <isr+0x296>
   17fc8:	7873      	ldrb	r3, [r6, #1]
   17fca:	2b0c      	cmp	r3, #12
   17fcc:	d107      	bne.n	17fde <isr+0x296>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   17fce:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17fd2:	065b      	lsls	r3, r3, #25
   17fd4:	d52e      	bpl.n	18034 <isr+0x2ec>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   17fd6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
   17fda:	065f      	lsls	r7, r3, #25
   17fdc:	d468      	bmi.n	180b0 <isr+0x368>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   17fde:	7830      	ldrb	r0, [r6, #0]
   17fe0:	f000 030f 	and.w	r3, r0, #15
   17fe4:	2b05      	cmp	r3, #5
   17fe6:	d1c5      	bne.n	17f74 <isr+0x22c>
   17fe8:	7873      	ldrb	r3, [r6, #1]
   17fea:	2b22      	cmp	r3, #34	; 0x22
   17fec:	d1c2      	bne.n	17f74 <isr+0x22c>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   17fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17ff0:	5ce3      	ldrb	r3, [r4, r3]
   17ff2:	f003 030f 	and.w	r3, r3, #15
   17ff6:	2b01      	cmp	r3, #1
   17ff8:	f040 8167 	bne.w	182ca <isr+0x582>
					    ci->connect_ind.init_addr,
   17ffc:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
   17ffe:	aa12      	add	r2, sp, #72	; 0x48
   18000:	4639      	mov	r1, r7
   18002:	f3c0 1080 	ubfx	r0, r0, #6, #1
   18006:	f005 fd9d 	bl	1db44 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   1800a:	2800      	cmp	r0, #0
   1800c:	d15a      	bne.n	180c4 <isr+0x37c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1800e:	2000      	movs	r0, #0
   18010:	e068      	b.n	180e4 <isr+0x39c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   18012:	20ff      	movs	r0, #255	; 0xff
   18014:	e7c6      	b.n	17fa4 <isr+0x25c>
   18016:	bf00      	nop
   18018:	2000126c 	.word	0x2000126c
   1801c:	2000e218 	.word	0x2000e218
   18020:	0002ef38 	.word	0x0002ef38
   18024:	0002ef70 	.word	0x0002ef70
   18028:	0003288e 	.word	0x0003288e
   1802c:	00032f82 	.word	0x00032f82
   18030:	0003146d 	.word	0x0003146d
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
   18034:	aa12      	add	r2, sp, #72	; 0x48
   18036:	1cb1      	adds	r1, r6, #2
   18038:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1803c:	f005 fd82 	bl	1db44 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   18040:	2800      	cmp	r0, #0
   18042:	d0c8      	beq.n	17fd6 <isr+0x28e>
	return (adv->tx_addr == sr->rx_addr) &&
   18044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18046:	7832      	ldrb	r2, [r6, #0]
   18048:	5ce3      	ldrb	r3, [r4, r3]
   1804a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1804e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   18052:	d1c4      	bne.n	17fde <isr+0x296>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   18054:	2206      	movs	r2, #6
   18056:	f106 0108 	add.w	r1, r6, #8
   1805a:	1ca8      	adds	r0, r5, #2
   1805c:	f7ee fded 	bl	6c3a <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
   18060:	4607      	mov	r7, r0
   18062:	2800      	cmp	r0, #0
   18064:	d1bb      	bne.n	17fde <isr+0x296>
		_radio.state = STATE_CLOSE;
   18066:	2303      	movs	r3, #3
   18068:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
   1806a:	f006 fc7d 	bl	1e968 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
   1806e:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
   18072:	2327      	movs	r3, #39	; 0x27
   18074:	fb03 4000 	mla	r0, r3, r0, r4
   18078:	307b      	adds	r0, #123	; 0x7b
   1807a:	f006 fbe5 	bl	1e848 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1807e:	f006 fc21 	bl	1e8c4 <radio_is_ready>
   18082:	2800      	cmp	r0, #0
   18084:	f43f af17 	beq.w	17eb6 <isr+0x16e>
   18088:	4ba6      	ldr	r3, [pc, #664]	; (18324 <isr+0x5dc>)
   1808a:	681b      	ldr	r3, [r3, #0]
   1808c:	075e      	lsls	r6, r3, #29
   1808e:	f000 8249 	beq.w	18524 <isr+0x7dc>
   18092:	2301      	movs	r3, #1
   18094:	f04f 0200 	mov.w	r2, #0
   18098:	f363 0202 	bfi	r2, r3, #0, #3
   1809c:	49a2      	ldr	r1, [pc, #648]	; (18328 <isr+0x5e0>)
   1809e:	4ba3      	ldr	r3, [pc, #652]	; (1832c <isr+0x5e4>)
   180a0:	1a5b      	subs	r3, r3, r1
   180a2:	f367 02c5 	bfi	r2, r7, #3, #3
   180a6:	08db      	lsrs	r3, r3, #3
   180a8:	f363 128f 	bfi	r2, r3, #6, #10
   180ac:	49a0      	ldr	r1, [pc, #640]	; (18330 <isr+0x5e8>)
   180ae:	e6b8      	b.n	17e22 <isr+0xda>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   180b0:	f1b9 0f00 	cmp.w	r9, #0
   180b4:	d1c6      	bne.n	18044 <isr+0x2fc>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   180b6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   180ba:	f005 fb27 	bl	1d70c <ctrl_irk_whitelisted>
   180be:	2800      	cmp	r0, #0
   180c0:	d1c0      	bne.n	18044 <isr+0x2fc>
   180c2:	e78c      	b.n	17fde <isr+0x296>
		       isr_adv_ci_adva_check(adv, ci) &&
   180c4:	4631      	mov	r1, r6
   180c6:	4628      	mov	r0, r5
   180c8:	f7fb f8da 	bl	13280 <isr_adv_ci_adva_check>
					    rl_idx) &&
   180cc:	2800      	cmp	r0, #0
   180ce:	d09e      	beq.n	1800e <isr+0x2c6>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   180d0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
   180d4:	2bff      	cmp	r3, #255	; 0xff
   180d6:	f000 80e5 	beq.w	182a4 <isr+0x55c>
		return rl_idx == _radio.advertiser.rl_idx;
   180da:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   180de:	1ac5      	subs	r5, r0, r3
   180e0:	4268      	negs	r0, r5
   180e2:	4168      	adcs	r0, r5
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   180e4:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
   180e8:	2800      	cmp	r0, #0
   180ea:	f43f af43 	beq.w	17f74 <isr+0x22c>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   180ee:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   180f2:	b133      	cbz	r3, 18102 <isr+0x3ba>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   180f4:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
   180f8:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
   180fc:	429a      	cmp	r2, r3
   180fe:	f47f af39 	bne.w	17f74 <isr+0x22c>
   18102:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   18106:	2b00      	cmp	r3, #0
   18108:	f43f af34 	beq.w	17f74 <isr+0x22c>
			node_rx = packet_rx_reserve_get(4);
   1810c:	2004      	movs	r0, #4
   1810e:	f7fa f979 	bl	12404 <packet_rx_reserve_get>
		if (!node_rx) {
   18112:	4607      	mov	r7, r0
   18114:	2800      	cmp	r0, #0
   18116:	f43f af2d 	beq.w	17f74 <isr+0x22c>
		_radio.state = STATE_STOP;
   1811a:	f04f 0904 	mov.w	r9, #4
   1811e:	f884 9015 	strb.w	r9, [r4, #21]
		radio_disable();
   18122:	f006 fbb1 	bl	1e888 <radio_disable>
		conn = _radio.advertiser.conn;
   18126:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   1812a:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
   1812e:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   18130:	f44f 72aa 	mov.w	r2, #340	; 0x154
   18134:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
   18136:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   1813a:	f7f9 f90e 	bl	1135a <mem_index_get>
		memcpy(&conn->access_addr[0],
   1813e:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   18142:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
   18144:	2203      	movs	r2, #3
   18146:	f106 0112 	add.w	r1, r6, #18
   1814a:	f105 0014 	add.w	r0, r5, #20
   1814e:	f7ee fd9b 	bl	6c88 <memcpy>
		memcpy(&conn->data_chan_map[0],
   18152:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
   18156:	464a      	mov	r2, r9
   18158:	f106 010e 	add.w	r1, r6, #14
   1815c:	4650      	mov	r0, sl
   1815e:	f7ee fd93 	bl	6c88 <memcpy>
		memcpy(&conn->data_chan_map[0],
   18162:	2205      	movs	r2, #5
   18164:	f106 011e 	add.w	r1, r6, #30
   18168:	4640      	mov	r0, r8
   1816a:	f7ee fd8d 	bl	6c88 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   1816e:	2105      	movs	r1, #5
   18170:	4640      	mov	r0, r8
   18172:	f7f9 fa63 	bl	1163c <util_ones_count_get>
		conn->data_chan_count =
   18176:	7f6b      	ldrb	r3, [r5, #29]
   18178:	f360 0305 	bfi	r3, r0, #0, #6
   1817c:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
   1817e:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   18182:	f3c3 0304 	ubfx	r3, r3, #0, #5
   18186:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
   18188:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
   1818a:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
   1818c:	f240 48e2 	movw	r8, #1250	; 0x4e2
   18190:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
   18194:	7ef2      	ldrb	r2, [r6, #27]
   18196:	7eb3      	ldrb	r3, [r6, #26]
   18198:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   1819c:	4651      	mov	r1, sl
   1819e:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
   181a0:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   181a2:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   181a6:	f7ee fd6f 	bl	6c88 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
   181aa:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   181ac:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
   181ae:	f242 7210 	movw	r2, #10000	; 0x2710
   181b2:	fb02 8303 	mla	r3, r2, r3, r8
   181b6:	3b01      	subs	r3, #1
   181b8:	fbb3 f3f8 	udiv	r3, r3, r8
   181bc:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   181be:	4b5d      	ldr	r3, [pc, #372]	; (18334 <isr+0x5ec>)
   181c0:	4443      	add	r3, r8
   181c2:	fbb3 f3f8 	udiv	r3, r3, r8
   181c6:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   181ca:	4b5b      	ldr	r3, [pc, #364]	; (18338 <isr+0x5f0>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   181cc:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   181ce:	4443      	add	r3, r8
   181d0:	fbb3 f3f8 	udiv	r3, r3, r8
   181d4:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   181d6:	4282      	cmp	r2, r0
   181d8:	4613      	mov	r3, r2
   181da:	bfc4      	itt	gt
   181dc:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
   181e0:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   181e2:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   181e6:	bfc4      	itt	gt
   181e8:	18d2      	addgt	r2, r2, r3
   181ea:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
   181ec:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   181ee:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   181f2:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
   181f4:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
   181f6:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
   181f8:	2300      	movs	r3, #0
   181fa:	723b      	strb	r3, [r7, #8]
		radio_le_conn_cmplt->role = 0x01;
   181fc:	727a      	strb	r2, [r7, #9]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   181fe:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
   18202:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   18204:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   18208:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   1820c:	75fa      	strb	r2, [r7, #23]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1820e:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   18212:	464a      	mov	r2, r9
   18214:	f107 0018 	add.w	r0, r7, #24
   18218:	f7ee fd36 	bl	6c88 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   1821c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   18220:	f107 030b 	add.w	r3, r7, #11
   18224:	28ff      	cmp	r0, #255	; 0xff
   18226:	930b      	str	r3, [sp, #44]	; 0x2c
   18228:	f107 0b11 	add.w	fp, r7, #17
   1822c:	f106 0a02 	add.w	sl, r6, #2
   18230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18232:	d069      	beq.n	18308 <isr+0x5c0>
			ll_rl_id_addr_get(rl_idx,
   18234:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18236:	f107 010a 	add.w	r1, r7, #10
   1823a:	f005 fc2d 	bl	1da98 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   1823e:	7abb      	ldrb	r3, [r7, #10]
   18240:	3302      	adds	r3, #2
   18242:	72bb      	strb	r3, [r7, #10]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   18244:	464a      	mov	r2, r9
   18246:	4651      	mov	r1, sl
   18248:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   1824a:	f7ee fd1d 	bl	6c88 <memcpy>
			pdu_adv->connect_ind.interval;
   1824e:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
   18250:	83fb      	strh	r3, [r7, #30]
			pdu_adv->connect_ind.latency;
   18252:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
   18254:	843b      	strh	r3, [r7, #32]
			pdu_adv->connect_ind.timeout;
   18256:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
   18258:	847b      	strh	r3, [r7, #34]	; 0x22
			pdu_adv->connect_ind.sca;
   1825a:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   1825e:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   18262:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		rx_fc_lock(conn->handle);
   18266:	8c28      	ldrh	r0, [r5, #32]
   18268:	f7fb f93e 	bl	134e8 <rx_fc_lock>
		packet_rx_enqueue();
   1826c:	f7fb f82c 	bl	132c8 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   18270:	2003      	movs	r0, #3
   18272:	f7fa f8c7 	bl	12404 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   18276:	2800      	cmp	r0, #0
   18278:	d162      	bne.n	18340 <isr+0x5f8>
   1827a:	4b2a      	ldr	r3, [pc, #168]	; (18324 <isr+0x5dc>)
   1827c:	681b      	ldr	r3, [r3, #0]
   1827e:	075c      	lsls	r4, r3, #29
   18280:	f000 8150 	beq.w	18524 <isr+0x7dc>
   18284:	2301      	movs	r3, #1
   18286:	f04f 0200 	mov.w	r2, #0
   1828a:	f363 0202 	bfi	r2, r3, #0, #3
   1828e:	4926      	ldr	r1, [pc, #152]	; (18328 <isr+0x5e0>)
   18290:	4b26      	ldr	r3, [pc, #152]	; (1832c <isr+0x5e4>)
   18292:	1a5b      	subs	r3, r3, r1
   18294:	f360 02c5 	bfi	r2, r0, #3, #3
   18298:	08db      	lsrs	r3, r3, #3
   1829a:	4925      	ldr	r1, [pc, #148]	; (18330 <isr+0x5e8>)
   1829c:	f363 128f 	bfi	r2, r3, #6, #10
			LL_ASSERT(node_rx);
   182a0:	4826      	ldr	r0, [pc, #152]	; (1833c <isr+0x5f4>)
   182a2:	e13d      	b.n	18520 <isr+0x7d8>
	return (adv->rx_addr == ci->tx_addr) &&
   182a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   182a6:	5ce2      	ldrb	r2, [r4, r3]
   182a8:	7833      	ldrb	r3, [r6, #0]
   182aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
   182ae:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   182b2:	f47f aeac 	bne.w	1800e <isr+0x2c6>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   182b6:	2206      	movs	r2, #6
   182b8:	4639      	mov	r1, r7
   182ba:	f105 0008 	add.w	r0, r5, #8
   182be:	f7ee fcbc 	bl	6c3a <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   182c2:	fab0 f080 	clz	r0, r0
   182c6:	0940      	lsrs	r0, r0, #5
   182c8:	e70c      	b.n	180e4 <isr+0x39c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   182ca:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   182ce:	09db      	lsrs	r3, r3, #7
   182d0:	d00d      	beq.n	182ee <isr+0x5a6>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   182d2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
   182d6:	09db      	lsrs	r3, r3, #7
   182d8:	f43f ae99 	beq.w	1800e <isr+0x2c6>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   182dc:	f1b9 0f00 	cmp.w	r9, #0
   182e0:	d10d      	bne.n	182fe <isr+0x5b6>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   182e2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   182e6:	f005 fa11 	bl	1d70c <ctrl_irk_whitelisted>
   182ea:	b940      	cbnz	r0, 182fe <isr+0x5b6>
   182ec:	e68f      	b.n	1800e <isr+0x2c6>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
   182ee:	aa12      	add	r2, sp, #72	; 0x48
   182f0:	1cb1      	adds	r1, r6, #2
   182f2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   182f6:	f005 fc25 	bl	1db44 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   182fa:	2800      	cmp	r0, #0
   182fc:	d0e9      	beq.n	182d2 <isr+0x58a>
	       isr_adv_ci_adva_check(adv, ci);
   182fe:	4631      	mov	r1, r6
   18300:	4628      	mov	r0, r5
   18302:	f7fa ffbd 	bl	13280 <isr_adv_ci_adva_check>
   18306:	e6ed      	b.n	180e4 <isr+0x39c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   18308:	4619      	mov	r1, r3
   1830a:	464a      	mov	r2, r9
   1830c:	4658      	mov	r0, fp
   1830e:	f7ee fce8 	bl	6ce2 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   18312:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   18314:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   18316:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1831a:	72bb      	strb	r3, [r7, #10]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   1831c:	464a      	mov	r2, r9
   1831e:	4651      	mov	r1, sl
   18320:	e793      	b.n	1824a <isr+0x502>
   18322:	bf00      	nop
   18324:	2000e218 	.word	0x2000e218
   18328:	0002ef38 	.word	0x0002ef38
   1832c:	0002ef70 	.word	0x0002ef70
   18330:	000328a1 	.word	0x000328a1
   18334:	026259ff 	.word	0x026259ff
   18338:	01c9c37f 	.word	0x01c9c37f
   1833c:	00033346 	.word	0x00033346
			node_rx->hdr.handle = conn->handle;
   18340:	8c2b      	ldrh	r3, [r5, #32]
   18342:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   18344:	230b      	movs	r3, #11
   18346:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
   18348:	7833      	ldrb	r3, [r6, #0]
   1834a:	f013 0320 	ands.w	r3, r3, #32
   1834e:	d00e      	beq.n	1836e <isr+0x626>
					((u16_t)conn->access_addr[1] << 8) |
   18350:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
   18352:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
   18354:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
   18356:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   1835a:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
   1835c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   18360:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   18362:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   18364:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   18368:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
   1836a:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   1836c:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   1836e:	7203      	strb	r3, [r0, #8]
			packet_rx_enqueue();
   18370:	f7fa ffaa 	bl	132c8 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
   18374:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   18378:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   1837c:	49c8      	ldr	r1, [pc, #800]	; (186a0 <isr+0x958>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
   1837e:	0952      	lsrs	r2, r2, #5
   18380:	f362 0384 	bfi	r3, r2, #2, #3
   18384:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   18388:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
   1838c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   18390:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   18394:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   18396:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   1839a:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   1839e:	4ac1      	ldr	r2, [pc, #772]	; (186a4 <isr+0x95c>)
   183a0:	f203 233f 	addw	r3, r3, #575	; 0x23f
   183a4:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
   183a8:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   183aa:	ea4f 0358 	mov.w	r3, r8, lsr #1
   183ae:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   183b0:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
   183b2:	7d73      	ldrb	r3, [r6, #21]
   183b4:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
   183b8:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
   183ba:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   183be:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   183c0:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
   183c2:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   183c4:	4638      	mov	r0, r7
   183c6:	f006 fa4c 	bl	1e862 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   183ca:	49b7      	ldr	r1, [pc, #732]	; (186a8 <isr+0x960>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   183cc:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   183ce:	f200 4052 	addw	r0, r0, #1106	; 0x452
   183d2:	a3b1      	add	r3, pc, #708	; (adr r3, 18698 <isr+0x950>)
   183d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   183d8:	fba0 0101 	umull	r0, r1, r0, r1
   183dc:	f7e7 ff6a 	bl	2b4 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   183e0:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
   183e4:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
   183e6:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   183e8:	4293      	cmp	r3, r2
   183ea:	bf38      	it	cc
   183ec:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   183ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   183f2:	469a      	mov	sl, r3
		conn_interval_us -=
   183f4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
   183f6:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
   183f8:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
   183fa:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
   183fc:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
   18400:	f006 fc28 	bl	1ec54 <radio_tmr_end_get>
   18404:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
   18406:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   18408:	4639      	mov	r1, r7
		conn_offset_us +=
   1840a:	fb09 9900 	mla	r9, r9, r0, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   1840e:	4638      	mov	r0, r7
   18410:	f006 fa25 	bl	1e85e <radio_tx_chain_delay_get>
   18414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18416:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   1841a:	4499      	add	r9, r3
   1841c:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   18420:	eba9 030b 	sub.w	r3, r9, fp
   18424:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18426:	f240 4382 	movw	r3, #1154	; 0x482
   1842a:	9300      	str	r3, [sp, #0]
   1842c:	2205      	movs	r2, #5
   1842e:	4b9f      	ldr	r3, [pc, #636]	; (186ac <isr+0x964>)
   18430:	f8df b274 	ldr.w	fp, [pc, #628]	; 186a8 <isr+0x960>
   18434:	4639      	mov	r1, r7
   18436:	4638      	mov	r0, r7
   18438:	f7f9 fe72 	bl	12120 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   1843c:	f240 4183 	movw	r1, #1155	; 0x483
   18440:	f7fb f894 	bl	1356c <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   18444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18446:	5ce3      	ldrb	r3, [r4, r3]
   18448:	f003 030f 	and.w	r3, r3, #15
   1844c:	2b01      	cmp	r3, #1
   1844e:	d106      	bne.n	1845e <isr+0x716>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18450:	9700      	str	r7, [sp, #0]
   18452:	463b      	mov	r3, r7
   18454:	2203      	movs	r2, #3
   18456:	4639      	mov	r1, r7
   18458:	4638      	mov	r0, r7
   1845a:	f7f9 fe61 	bl	12120 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   1845e:	fba8 890b 	umull	r8, r9, r8, fp
   18462:	a38d      	add	r3, pc, #564	; (adr r3, 18698 <isr+0x950>)
   18464:	e9d3 2300 	ldrd	r2, r3, [r3]
   18468:	4640      	mov	r0, r8
   1846a:	4649      	mov	r1, r9
   1846c:	f7e7 ff22 	bl	2b4 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18470:	f895 3020 	ldrb.w	r3, [r5, #32]
   18474:	68a4      	ldr	r4, [r4, #8]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   18476:	4a8e      	ldr	r2, [pc, #568]	; (186b0 <isr+0x968>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18478:	3307      	adds	r3, #7
   1847a:	b2db      	uxtb	r3, r3
   1847c:	930a      	str	r3, [sp, #40]	; 0x28
   1847e:	f240 439a 	movw	r3, #1178	; 0x49a
   18482:	9308      	str	r3, [sp, #32]
   18484:	4b8b      	ldr	r3, [pc, #556]	; (186b4 <isr+0x96c>)
   18486:	e9cd 5306 	strd	r5, r3, [sp, #24]
   1848a:	4b8b      	ldr	r3, [pc, #556]	; (186b8 <isr+0x970>)
   1848c:	9305      	str	r3, [sp, #20]
   1848e:	68eb      	ldr	r3, [r5, #12]
   18490:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   18492:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18494:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   18496:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1849a:	2307      	movs	r3, #7
   1849c:	2100      	movs	r1, #0
   1849e:	4343      	muls	r3, r0
   184a0:	fb02 3301 	mla	r3, r2, r1, r3
   184a4:	fba0 1202 	umull	r1, r2, r0, r2
   184a8:	441a      	add	r2, r3
   184aa:	4608      	mov	r0, r1
   184ac:	ebb8 0000 	subs.w	r0, r8, r0
   184b0:	4611      	mov	r1, r2
   184b2:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   184b6:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   184b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   184bc:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   184be:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   184c0:	f7e7 fef8 	bl	2b4 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   184c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   184c6:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   184c8:	a373      	add	r3, pc, #460	; (adr r3, 18698 <isr+0x950>)
   184ca:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   184ce:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   184d2:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   184d6:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   184d8:	f7e7 feec 	bl	2b4 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   184dc:	eba4 040a 	sub.w	r4, r4, sl
   184e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   184e4:	9000      	str	r0, [sp, #0]
   184e6:	4623      	mov	r3, r4
   184e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   184ea:	4629      	mov	r1, r5
   184ec:	4628      	mov	r0, r5
   184ee:	f7f9 fd83 	bl	11ff8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   184f2:	f030 0302 	bics.w	r3, r0, #2
   184f6:	f43f acde 	beq.w	17eb6 <isr+0x16e>
   184fa:	4b70      	ldr	r3, [pc, #448]	; (186bc <isr+0x974>)
   184fc:	681b      	ldr	r3, [r3, #0]
   184fe:	0759      	lsls	r1, r3, #29
   18500:	d010      	beq.n	18524 <isr+0x7dc>
   18502:	2301      	movs	r3, #1
   18504:	f04f 0200 	mov.w	r2, #0
   18508:	f363 0202 	bfi	r2, r3, #0, #3
   1850c:	496c      	ldr	r1, [pc, #432]	; (186c0 <isr+0x978>)
   1850e:	4b6d      	ldr	r3, [pc, #436]	; (186c4 <isr+0x97c>)
   18510:	1a5b      	subs	r3, r3, r1
   18512:	f365 02c5 	bfi	r2, r5, #3, #3
   18516:	08db      	lsrs	r3, r3, #3
   18518:	496b      	ldr	r1, [pc, #428]	; (186c8 <isr+0x980>)
   1851a:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1851e:	486b      	ldr	r0, [pc, #428]	; (186cc <isr+0x984>)
		LL_ASSERT(0);
   18520:	f7e9 fde4 	bl	20ec <log_1>
   18524:	4040      	eors	r0, r0
   18526:	f380 8811 	msr	BASEPRI, r0
   1852a:	f04f 0004 	mov.w	r0, #4
   1852e:	df02      	svc	2
		rl_idx = devmatch_ok ?
   18530:	f1b9 0f00 	cmp.w	r9, #0
   18534:	d01c      	beq.n	18570 <isr+0x828>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
   18536:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
   1853a:	4641      	mov	r1, r8
   1853c:	f3c0 1000 	ubfx	r0, r0, #4, #1
   18540:	f004 fff8 	bl	1d534 <ctrl_rl_idx>
   18544:	4680      	mov	r8, r0
		if (crc_ok &&
   18546:	b147      	cbz	r7, 1855a <isr+0x812>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   18548:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   1854c:	06da      	lsls	r2, r3, #27
   1854e:	d519      	bpl.n	18584 <isr+0x83c>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   18550:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   18554:	06db      	lsls	r3, r3, #27
   18556:	f100 8094 	bmi.w	18682 <isr+0x93a>
			_radio.state = STATE_CLOSE;
   1855a:	2303      	movs	r3, #3
   1855c:	7563      	strb	r3, [r4, #21]
			radio_disable();
   1855e:	f006 f993 	bl	1e888 <radio_disable>
			_radio.scanner.state = 0;
   18562:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   18566:	f36f 0341 	bfc	r3, #1, #1
   1856a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   1856e:	e4a2      	b.n	17eb6 <isr+0x16e>
		rl_idx = devmatch_ok ?
   18570:	f1ba 0f00 	cmp.w	sl, #0
   18574:	d003      	beq.n	1857e <isr+0x836>
   18576:	4658      	mov	r0, fp
   18578:	f005 f860 	bl	1d63c <ctrl_rl_irk_idx>
   1857c:	e7e2      	b.n	18544 <isr+0x7fc>
   1857e:	f04f 08ff 	mov.w	r8, #255	; 0xff
   18582:	e7e0      	b.n	18546 <isr+0x7fe>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   18584:	f1b9 0f00 	cmp.w	r9, #0
   18588:	d173      	bne.n	18672 <isr+0x92a>
	bool dir_report = false;
   1858a:	2300      	movs	r3, #0
   1858c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   18590:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   18594:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   18598:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   1859c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   185a0:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   185a4:	2b00      	cmp	r3, #0
   185a6:	f040 8093 	bne.w	186d0 <isr+0x988>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   185aa:	f899 3008 	ldrb.w	r3, [r9, #8]
   185ae:	f013 030f 	ands.w	r3, r3, #15
   185b2:	d002      	beq.n	185ba <isr+0x872>
   185b4:	2b06      	cmp	r3, #6
   185b6:	f040 82f5 	bne.w	18ba4 <isr+0xe5c>
		 (_radio.scanner.type != 0) &&
   185ba:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   185be:	0712      	lsls	r2, r2, #28
   185c0:	f140 82da 	bpl.w	18b78 <isr+0xe30>
		 (_radio.scanner.type != 0) &&
   185c4:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   185c8:	2a00      	cmp	r2, #0
   185ca:	f040 82d5 	bne.w	18b78 <isr+0xe30>
		err = isr_rx_scan_report(rssi_ready,
   185ce:	f1ba 0f00 	cmp.w	sl, #0
   185d2:	bf14      	ite	ne
   185d4:	4641      	movne	r1, r8
   185d6:	21ff      	moveq	r1, #255	; 0xff
   185d8:	4628      	mov	r0, r5
   185da:	f7fa ff25 	bl	13428 <isr_rx_scan_report>
		if (err) {
   185de:	2800      	cmp	r0, #0
   185e0:	d1bb      	bne.n	1855a <isr+0x812>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   185e2:	f006 f9a7 	bl	1e934 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   185e6:	7803      	ldrb	r3, [r0, #0]
   185e8:	2203      	movs	r2, #3
   185ea:	f362 0303 	bfi	r3, r2, #0, #4
   185ee:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   185f0:	f899 3008 	ldrb.w	r3, [r9, #8]
   185f4:	7802      	ldrb	r2, [r0, #0]
   185f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   185fa:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
   185fe:	230c      	movs	r3, #12
   18600:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   18602:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   18604:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   18606:	4640      	mov	r0, r8
   18608:	f004 ff76 	bl	1d4f8 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   1860c:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
   18610:	4601      	mov	r1, r0
   18612:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   18614:	f013 0f01 	tst.w	r3, #1
   18618:	f810 3b02 	ldrb.w	r3, [r0], #2
   1861c:	f000 82a3 	beq.w	18b66 <isr+0xe1e>
   18620:	2900      	cmp	r1, #0
   18622:	f000 82a0 	beq.w	18b66 <isr+0xe1e>
			pdu_adv_tx->tx_addr = 1;
   18626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1862a:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   1862c:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   1862e:	f7ee fb2b 	bl	6c88 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
   18632:	2206      	movs	r2, #6
   18634:	f109 010a 	add.w	r1, r9, #10
   18638:	f105 0008 	add.w	r0, r5, #8
   1863c:	f7ee fb24 	bl	6c88 <memcpy>
		_radio.scanner.state = 1;
   18640:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   18644:	f043 0302 	orr.w	r3, r3, #2
   18648:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
   1864c:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   1864e:	2302      	movs	r3, #2
   18650:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
   18652:	f006 fa0f 	bl	1ea74 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   18656:	2000      	movs	r0, #0
   18658:	f006 f970 	bl	1e93c <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   1865c:	4628      	mov	r0, r5
   1865e:	f006 f8f3 	bl	1e848 <radio_pkt_tx_set>
		radio_tmr_end_capture();
   18662:	f006 fae5 	bl	1ec30 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   18666:	f006 f92d 	bl	1e8c4 <radio_is_ready>
   1866a:	2800      	cmp	r0, #0
   1866c:	f43f ac23 	beq.w	17eb6 <isr+0x16e>
   18670:	e103      	b.n	1887a <isr+0xb32>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   18672:	4641      	mov	r1, r8
   18674:	4650      	mov	r0, sl
   18676:	f005 f9d1 	bl	1da1c <ctrl_rl_idx_allowed>
   1867a:	2800      	cmp	r0, #0
   1867c:	f43f af68 	beq.w	18550 <isr+0x808>
   18680:	e783      	b.n	1858a <isr+0x842>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   18682:	f1b9 0f00 	cmp.w	r9, #0
   18686:	d180      	bne.n	1858a <isr+0x842>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
   18688:	4640      	mov	r0, r8
   1868a:	f005 f83f 	bl	1d70c <ctrl_irk_whitelisted>
		if (crc_ok &&
   1868e:	2800      	cmp	r0, #0
   18690:	f43f af63 	beq.w	1855a <isr+0x812>
   18694:	e779      	b.n	1858a <isr+0x842>
   18696:	bf00      	nop
   18698:	1afd498d 	.word	0x1afd498d
   1869c:	00000007 	.word	0x00000007
   186a0:	00032f72 	.word	0x00032f72
   186a4:	000f4240 	.word	0x000f4240
   186a8:	3b9aca00 	.word	0x3b9aca00
   186ac:	0001356d 	.word	0x0001356d
   186b0:	1afd498d 	.word	0x1afd498d
   186b4:	0001351d 	.word	0x0001351d
   186b8:	00016705 	.word	0x00016705
   186bc:	2000e218 	.word	0x2000e218
   186c0:	0002ef38 	.word	0x0002ef38
   186c4:	0002ef70 	.word	0x0002ef70
   186c8:	000328a1 	.word	0x000328a1
   186cc:	00032d7f 	.word	0x00032d7f
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   186d0:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   186d4:	b133      	cbz	r3, 186e4 <isr+0x99c>
				      (_radio.fc_req == _radio.fc_ack)) &&
   186d6:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   186da:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
   186de:	429a      	cmp	r2, r3
   186e0:	f47f af63 	bne.w	185aa <isr+0x862>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   186e4:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   186e8:	f3c3 1000 	ubfx	r0, r3, #4, #1
   186ec:	2800      	cmp	r0, #0
   186ee:	f000 80d9 	beq.w	188a4 <isr+0xb5c>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   186f2:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   186f6:	f010 000f 	ands.w	r0, r0, #15
   186fa:	f040 80f2 	bne.w	188e2 <isr+0xb9a>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   186fe:	f006 faa9 	bl	1ec54 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   18702:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   18706:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   1870a:	48c3      	ldr	r0, [pc, #780]	; (18a18 <isr+0xcd0>)
   1870c:	2207      	movs	r2, #7
   1870e:	fba3 0100 	umull	r0, r1, r3, r0
   18712:	fb02 1103 	mla	r1, r2, r3, r1
   18716:	a3be      	add	r3, pc, #760	; (adr r3, 18a10 <isr+0xcc8>)
   18718:	e9d3 2300 	ldrd	r2, r3, [r3]
   1871c:	f7e7 fdca 	bl	2b4 <__aeabi_uldivmod>
   18720:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   18724:	4287      	cmp	r7, r0
   18726:	f4bf af40 	bcs.w	185aa <isr+0x862>
			node_rx = packet_rx_reserve_get(4);
   1872a:	2004      	movs	r0, #4
   1872c:	f7f9 fe6a 	bl	12404 <packet_rx_reserve_get>
		if (node_rx == 0) {
   18730:	4607      	mov	r7, r0
   18732:	2800      	cmp	r0, #0
   18734:	f43f af11 	beq.w	1855a <isr+0x812>
		_radio.state = STATE_STOP;
   18738:	2304      	movs	r3, #4
   1873a:	7563      	strb	r3, [r4, #21]
		_radio.scanner.conn = NULL;
   1873c:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
   1873e:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
   18742:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   18746:	f006 f8f5 	bl	1e934 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1874a:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
   1874c:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
   18750:	f043 0325 	orr.w	r3, r3, #37	; 0x25
   18754:	7003      	strb	r3, [r0, #0]
			pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
   18756:	f899 3008 	ldrb.w	r3, [r9, #8]
   1875a:	f3c3 1240 	ubfx	r2, r3, #5, #1
   1875e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   18762:	b2d2      	uxtb	r2, r2
   18764:	920d      	str	r2, [sp, #52]	; 0x34
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   18766:	7802      	ldrb	r2, [r0, #0]
   18768:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1876c:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
   18770:	2322      	movs	r3, #34	; 0x22
   18772:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   18774:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   18776:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   18778:	4640      	mov	r0, r8
   1877a:	f004 febd 	bl	1d4f8 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   1877e:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
   18782:	4601      	mov	r1, r0
   18784:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   18786:	f013 0f01 	tst.w	r3, #1
   1878a:	f810 3b02 	ldrb.w	r3, [r0], #2
   1878e:	f000 80b4 	beq.w	188fa <isr+0xbb2>
   18792:	2900      	cmp	r1, #0
   18794:	f000 80b1 	beq.w	188fa <isr+0xbb2>
			pdu_adv_tx->tx_addr = 1;
   18798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1879c:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   1879e:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   187a0:	f7ee fa72 	bl	6c88 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
   187a4:	f105 0308 	add.w	r3, r5, #8
   187a8:	4618      	mov	r0, r3
   187aa:	f109 010a 	add.w	r1, r9, #10
   187ae:	2206      	movs	r2, #6
   187b0:	930a      	str	r3, [sp, #40]	; 0x28
   187b2:	f7ee fa69 	bl	6c88 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
   187b6:	2204      	movs	r2, #4
   187b8:	f106 0110 	add.w	r1, r6, #16
   187bc:	f105 000e 	add.w	r0, r5, #14
   187c0:	f7ee fa62 	bl	6c88 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
   187c4:	2203      	movs	r2, #3
   187c6:	f106 0114 	add.w	r1, r6, #20
   187ca:	f105 0012 	add.w	r0, r5, #18
   187ce:	f7ee fa5b 	bl	6c88 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
   187d2:	2301      	movs	r3, #1
   187d4:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   187d6:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
   187da:	f240 42e2 	movw	r2, #1250	; 0x4e2
   187de:	4353      	muls	r3, r2
   187e0:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   187e2:	f006 fa37 	bl	1ec54 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
   187e6:	68e3      	ldr	r3, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
   187e8:	f8d4 9104 	ldr.w	r9, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
   187ec:	2b00      	cmp	r3, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   187ee:	bfcc      	ite	gt
   187f0:	f500 60db 	addgt.w	r0, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
   187f4:	f200 60ba 	addwle	r0, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
   187f8:	f1b9 0f00 	cmp.w	r9, #0
   187fc:	f040 8088 	bne.w	18910 <isr+0xbc8>
			pdu_adv_tx->connect_ind.win_offset = 0;
   18800:	f885 9016 	strb.w	r9, [r5, #22]
   18804:	f885 9017 	strb.w	r9, [r5, #23]
   18808:	4681      	mov	r9, r0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   1880a:	2100      	movs	r1, #0
   1880c:	4608      	mov	r0, r1
   1880e:	f006 f821 	bl	1e854 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   18812:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   18814:	eba9 0900 	sub.w	r9, r9, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   18818:	4608      	mov	r0, r1
   1881a:	f006 f820 	bl	1e85e <radio_tx_chain_delay_get>
   1881e:	eba9 0900 	sub.w	r9, r9, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
   18822:	f109 031e 	add.w	r3, r9, #30
			_radio.scanner.conn_interval;
   18826:	f8df 920c 	ldr.w	r9, [pc, #524]	; 18a34 <isr+0xcec>
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
   1882a:	930e      	str	r3, [sp, #56]	; 0x38
		pdu_adv_tx->connect_ind.interval =
   1882c:	f8b9 30f4 	ldrh.w	r3, [r9, #244]	; 0xf4
   18830:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
   18832:	f8b9 30f6 	ldrh.w	r3, [r9, #246]	; 0xf6
   18836:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
   18838:	f8b9 30f8 	ldrh.w	r3, [r9, #248]	; 0xf8
   1883c:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
   1883e:	f106 0117 	add.w	r1, r6, #23
   18842:	2205      	movs	r2, #5
   18844:	f105 001e 	add.w	r0, r5, #30
   18848:	f7ee fa1e 	bl	6c88 <memcpy>
		pdu_adv_tx->connect_ind.hop =
   1884c:	7fb2      	ldrb	r2, [r6, #30]
   1884e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   18852:	f362 0304 	bfi	r3, r2, #0, #5
   18856:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
   1885a:	f899 2120 	ldrb.w	r2, [r9, #288]	; 0x120
   1885e:	f362 1347 	bfi	r3, r2, #5, #3
   18862:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
   18866:	f006 f87f 	bl	1e968 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   1886a:	4628      	mov	r0, r5
   1886c:	f005 ffec 	bl	1e848 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   18870:	f006 f828 	bl	1e8c4 <radio_is_ready>
   18874:	4683      	mov	fp, r0
   18876:	2800      	cmp	r0, #0
   18878:	d05a      	beq.n	18930 <isr+0xbe8>
		LL_ASSERT(!radio_is_ready());
   1887a:	4b68      	ldr	r3, [pc, #416]	; (18a1c <isr+0xcd4>)
   1887c:	681b      	ldr	r3, [r3, #0]
   1887e:	075f      	lsls	r7, r3, #29
   18880:	f43f ae50 	beq.w	18524 <isr+0x7dc>
   18884:	2301      	movs	r3, #1
   18886:	f04f 0200 	mov.w	r2, #0
   1888a:	f363 0202 	bfi	r2, r3, #0, #3
   1888e:	4964      	ldr	r1, [pc, #400]	; (18a20 <isr+0xcd8>)
   18890:	4b64      	ldr	r3, [pc, #400]	; (18a24 <isr+0xcdc>)
   18892:	1a5b      	subs	r3, r3, r1
   18894:	f36f 02c5 	bfc	r2, #3, #3
   18898:	08db      	lsrs	r3, r3, #3
   1889a:	f363 128f 	bfi	r2, r3, #6, #10
   1889e:	4962      	ldr	r1, [pc, #392]	; (18a28 <isr+0xce0>)
   188a0:	f7ff babf 	b.w	17e22 <isr+0xda>
	if (rl_idx != FILTER_IDX_NONE) {
   188a4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   188a8:	d009      	beq.n	188be <isr+0xb76>
		return (rl_idx == _radio.scanner.rl_idx);
   188aa:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
   188ae:	eba0 0708 	sub.w	r7, r0, r8
   188b2:	4278      	negs	r0, r7
   188b4:	4178      	adcs	r0, r7
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   188b6:	2800      	cmp	r0, #0
   188b8:	f47f af1b 	bne.w	186f2 <isr+0x9aa>
   188bc:	e675      	b.n	185aa <isr+0x862>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   188be:	f899 2008 	ldrb.w	r2, [r9, #8]
   188c2:	f3c3 1380 	ubfx	r3, r3, #6, #1
   188c6:	f3c2 1280 	ubfx	r2, r2, #6, #1
   188ca:	4293      	cmp	r3, r2
   188cc:	d1f3      	bne.n	188b6 <isr+0xb6e>
		(memcmp(&_radio.scanner.adv_addr[0],
   188ce:	2206      	movs	r2, #6
   188d0:	f109 010a 	add.w	r1, r9, #10
   188d4:	4855      	ldr	r0, [pc, #340]	; (18a2c <isr+0xce4>)
   188d6:	f7ee f9b0 	bl	6c3a <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   188da:	fab0 f080 	clz	r0, r0
   188de:	0940      	lsrs	r0, r0, #5
   188e0:	e7e9      	b.n	188b6 <isr+0xb6e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   188e2:	2801      	cmp	r0, #1
   188e4:	f47f ae61 	bne.w	185aa <isr+0x862>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
   188e8:	2300      	movs	r3, #0
   188ea:	4642      	mov	r2, r8
   188ec:	4631      	mov	r1, r6
   188ee:	f7fa fd4f 	bl	13390 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
   188f2:	2800      	cmp	r0, #0
   188f4:	f47f af03 	bne.w	186fe <isr+0x9b6>
   188f8:	e657      	b.n	185aa <isr+0x862>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   188fa:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   188fe:	494c      	ldr	r1, [pc, #304]	; (18a30 <isr+0xce8>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   18900:	09d2      	lsrs	r2, r2, #7
   18902:	f362 1386 	bfi	r3, r2, #6, #1
   18906:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   18908:	2206      	movs	r2, #6
   1890a:	e749      	b.n	187a0 <isr+0xa58>
				conn_space_us += conn_interval_us;
   1890c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1890e:	4499      	add	r9, r3
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   18910:	f1b9 0f00 	cmp.w	r9, #0
   18914:	dbfa      	blt.n	1890c <isr+0xbc4>
   18916:	4581      	cmp	r9, r0
   18918:	d3f8      	bcc.n	1890c <isr+0xbc4>
			pdu_adv_tx->connect_ind.win_offset =
   1891a:	f240 43e2 	movw	r3, #1250	; 0x4e2
				(conn_space_us - conn_offset_us) / 1250;
   1891e:	eba9 0000 	sub.w	r0, r9, r0
			pdu_adv_tx->connect_ind.win_offset =
   18922:	fbb0 f0f3 	udiv	r0, r0, r3
			pdu_adv_tx->connect_ind.win_size++;
   18926:	7d6b      	ldrb	r3, [r5, #21]
			pdu_adv_tx->connect_ind.win_offset =
   18928:	82e8      	strh	r0, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
   1892a:	3301      	adds	r3, #1
   1892c:	756b      	strb	r3, [r5, #21]
   1892e:	e76c      	b.n	1880a <isr+0xac2>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   18930:	f44f 72aa 	mov.w	r2, #340	; 0x154
   18934:	f8d9 1108 	ldr.w	r1, [r9, #264]	; 0x108
   18938:	4630      	mov	r0, r6
   1893a:	f7f8 fd0e 	bl	1135a <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   1893e:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   18940:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   18942:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
   18946:	f887 b008 	strb.w	fp, [r7, #8]
		radio_le_conn_cmplt->role = 0x00;
   1894a:	f887 b009 	strb.w	fp, [r7, #9]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1894e:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   18950:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
   18954:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   18956:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1895a:	75fb      	strb	r3, [r7, #23]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   1895c:	2206      	movs	r2, #6
   1895e:	f107 0018 	add.w	r0, r7, #24
   18962:	f7ee f991 	bl	6c88 <memcpy>
   18966:	f107 0b0b 	add.w	fp, r7, #11
   1896a:	f107 0311 	add.w	r3, r7, #17
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   1896e:	f1ba 0f00 	cmp.w	sl, #0
   18972:	d03f      	beq.n	189f4 <isr+0xcac>
   18974:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   18978:	d03c      	beq.n	189f4 <isr+0xcac>
			ll_rl_id_addr_get(rl_idx,
   1897a:	465a      	mov	r2, fp
   1897c:	f107 010a 	add.w	r1, r7, #10
   18980:	4640      	mov	r0, r8
   18982:	930f      	str	r3, [sp, #60]	; 0x3c
   18984:	f005 f888 	bl	1da98 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   18988:	7aba      	ldrb	r2, [r7, #10]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   1898a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1898c:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
   1898e:	3202      	adds	r2, #2
   18990:	72ba      	strb	r2, [r7, #10]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   18992:	4618      	mov	r0, r3
   18994:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   18996:	f7ee f977 	bl	6c88 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   1899a:	f8b9 30f4 	ldrh.w	r3, [r9, #244]	; 0xf4
   1899e:	83fb      	strh	r3, [r7, #30]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
   189a0:	f8b9 30f6 	ldrh.w	r3, [r9, #246]	; 0xf6
   189a4:	843b      	strh	r3, [r7, #32]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   189a6:	f8b9 30f8 	ldrh.w	r3, [r9, #248]	; 0xf8
   189aa:	847b      	strh	r3, [r7, #34]	; 0x22
			pdu_adv_tx->connect_ind.sca;
   189ac:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   189b0:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   189b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		rx_fc_lock(conn->handle);
   189b8:	8c30      	ldrh	r0, [r6, #32]
   189ba:	f7fa fd95 	bl	134e8 <rx_fc_lock>
		packet_rx_enqueue();
   189be:	f7fa fc83 	bl	132c8 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   189c2:	2003      	movs	r0, #3
   189c4:	f7f9 fd1e 	bl	12404 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   189c8:	2800      	cmp	r0, #0
   189ca:	d135      	bne.n	18a38 <isr+0xcf0>
   189cc:	4b13      	ldr	r3, [pc, #76]	; (18a1c <isr+0xcd4>)
   189ce:	681b      	ldr	r3, [r3, #0]
   189d0:	075c      	lsls	r4, r3, #29
   189d2:	f43f ada7 	beq.w	18524 <isr+0x7dc>
   189d6:	2301      	movs	r3, #1
   189d8:	f04f 0200 	mov.w	r2, #0
   189dc:	f363 0202 	bfi	r2, r3, #0, #3
   189e0:	490f      	ldr	r1, [pc, #60]	; (18a20 <isr+0xcd8>)
   189e2:	4b10      	ldr	r3, [pc, #64]	; (18a24 <isr+0xcdc>)
   189e4:	1a5b      	subs	r3, r3, r1
   189e6:	f360 02c5 	bfi	r2, r0, #3, #3
   189ea:	08db      	lsrs	r3, r3, #3
   189ec:	f363 128f 	bfi	r2, r3, #6, #10
   189f0:	490d      	ldr	r1, [pc, #52]	; (18a28 <isr+0xce0>)
   189f2:	e455      	b.n	182a0 <isr+0x558>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   189f4:	2206      	movs	r2, #6
   189f6:	2100      	movs	r1, #0
   189f8:	4618      	mov	r0, r3
   189fa:	f7ee f972 	bl	6ce2 <memset>
				pdu_adv_tx->rx_addr;
   189fe:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   18a00:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
   18a02:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   18a06:	72bb      	strb	r3, [r7, #10]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   18a08:	2206      	movs	r2, #6
   18a0a:	4658      	mov	r0, fp
   18a0c:	e7c3      	b.n	18996 <isr+0xc4e>
   18a0e:	bf00      	nop
   18a10:	3b9aca00 	.word	0x3b9aca00
   18a14:	00000000 	.word	0x00000000
   18a18:	1afd498d 	.word	0x1afd498d
   18a1c:	2000e218 	.word	0x2000e218
   18a20:	0002ef38 	.word	0x0002ef38
   18a24:	0002ef70 	.word	0x0002ef70
   18a28:	000328bf 	.word	0x000328bf
   18a2c:	20001356 	.word	0x20001356
   18a30:	20001350 	.word	0x20001350
   18a34:	2000126c 	.word	0x2000126c
			node_rx->hdr.handle = conn->handle;
   18a38:	8c33      	ldrh	r3, [r6, #32]
   18a3a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   18a3c:	230b      	movs	r3, #11
   18a3e:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx_chan_sel) {
   18a40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18a42:	2b00      	cmp	r3, #0
   18a44:	f000 808c 	beq.w	18b60 <isr+0xe18>
					((u16_t)conn->access_addr[1] << 8) |
   18a48:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
   18a4a:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
   18a4c:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
   18a4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   18a52:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
   18a54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   18a58:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   18a5a:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   18a5c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   18a60:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
   18a62:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   18a64:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   18a66:	7203      	strb	r3, [r0, #8]
			packet_rx_enqueue();
   18a68:	f7fa fc2e 	bl	132c8 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   18a6c:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   18a6e:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   18a72:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   18a74:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   18a78:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   18a7a:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18a7c:	f240 633a 	movw	r3, #1594	; 0x63a
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   18a80:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   18a82:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18a84:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   18a88:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18a8a:	4629      	mov	r1, r5
   18a8c:	9300      	str	r3, [sp, #0]
   18a8e:	4628      	mov	r0, r5
   18a90:	4bab      	ldr	r3, [pc, #684]	; (18d40 <isr+0xff8>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   18a92:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 18d64 <isr+0x101c>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   18a96:	bf38      	it	cc
   18a98:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18a9a:	f7f9 fb41 	bl	12120 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   18a9e:	f240 613b 	movw	r1, #1595	; 0x63b
   18aa2:	f7fa fdad 	bl	13600 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18aa6:	462b      	mov	r3, r5
   18aa8:	2204      	movs	r2, #4
   18aaa:	4629      	mov	r1, r5
   18aac:	9500      	str	r5, [sp, #0]
   18aae:	4628      	mov	r0, r5
   18ab0:	f7f9 fb36 	bl	12120 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   18ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18ab6:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18aba:	68a3      	ldr	r3, [r4, #8]
   18abc:	f896 4020 	ldrb.w	r4, [r6, #32]
   18ac0:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
   18ac4:	f240 6352 	movw	r3, #1618	; 0x652
   18ac8:	9308      	str	r3, [sp, #32]
   18aca:	4b9e      	ldr	r3, [pc, #632]	; (18d44 <isr+0xffc>)
   18acc:	e9cd 6306 	strd	r6, r3, [sp, #24]
   18ad0:	4b9d      	ldr	r3, [pc, #628]	; (18d48 <isr+0x1000>)
   18ad2:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18ad4:	68f3      	ldr	r3, [r6, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   18ad6:	4640      	mov	r0, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18ad8:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
   18ada:	4649      	mov	r1, r9
   18adc:	a396      	add	r3, pc, #600	; (adr r3, 18d38 <isr+0xff0>)
   18ade:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status =
   18ae2:	e9cd 5703 	strd	r5, r7, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   18ae6:	f7e7 fbe5 	bl	2b4 <__aeabi_uldivmod>
   18aea:	4610      	mov	r0, r2
   18aec:	4619      	mov	r1, r3
   18aee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18af2:	2300      	movs	r3, #0
   18af4:	f7e7 fbde 	bl	2b4 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   18af8:	a38f      	add	r3, pc, #572	; (adr r3, 18d38 <isr+0xff0>)
   18afa:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18afe:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   18b00:	4649      	mov	r1, r9
   18b02:	4640      	mov	r0, r8
   18b04:	f7e7 fbd6 	bl	2b4 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   18b08:	990e      	ldr	r1, [sp, #56]	; 0x38
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   18b0a:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   18b0c:	a38a      	add	r3, pc, #552	; (adr r3, 18d38 <isr+0xff0>)
   18b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   18b12:	fba1 010a 	umull	r0, r1, r1, sl
   18b16:	f7e7 fbcd 	bl	2b4 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18b1a:	3407      	adds	r4, #7
   18b1c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
   18b20:	b2e4      	uxtb	r4, r4
   18b22:	9000      	str	r0, [sp, #0]
   18b24:	465b      	mov	r3, fp
   18b26:	4622      	mov	r2, r4
   18b28:	4629      	mov	r1, r5
   18b2a:	4628      	mov	r0, r5
   18b2c:	f7f9 fa64 	bl	11ff8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18b30:	f030 0302 	bics.w	r3, r0, #2
   18b34:	f43f a9bf 	beq.w	17eb6 <isr+0x16e>
   18b38:	4b84      	ldr	r3, [pc, #528]	; (18d4c <isr+0x1004>)
   18b3a:	681b      	ldr	r3, [r3, #0]
   18b3c:	0759      	lsls	r1, r3, #29
   18b3e:	f43f acf1 	beq.w	18524 <isr+0x7dc>
   18b42:	2301      	movs	r3, #1
   18b44:	f04f 0200 	mov.w	r2, #0
   18b48:	f363 0202 	bfi	r2, r3, #0, #3
   18b4c:	4980      	ldr	r1, [pc, #512]	; (18d50 <isr+0x1008>)
   18b4e:	4b81      	ldr	r3, [pc, #516]	; (18d54 <isr+0x100c>)
   18b50:	1a5b      	subs	r3, r3, r1
   18b52:	f365 02c5 	bfi	r2, r5, #3, #3
   18b56:	08db      	lsrs	r3, r3, #3
   18b58:	f363 128f 	bfi	r2, r3, #6, #10
   18b5c:	497e      	ldr	r1, [pc, #504]	; (18d58 <isr+0x1010>)
   18b5e:	e4de      	b.n	1851e <isr+0x7d6>
				le_chan_sel_algo->chan_sel_algo = 0x00;
   18b60:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   18b64:	e77f      	b.n	18a66 <isr+0xd1e>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   18b66:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   18b6a:	497c      	ldr	r1, [pc, #496]	; (18d5c <isr+0x1014>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   18b6c:	09d2      	lsrs	r2, r2, #7
   18b6e:	f362 1386 	bfi	r3, r2, #6, #1
   18b72:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   18b74:	2206      	movs	r2, #6
   18b76:	e55a      	b.n	1862e <isr+0x8e6>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   18b78:	b9a3      	cbnz	r3, 18ba4 <isr+0xe5c>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   18b7a:	f899 3009 	ldrb.w	r3, [r9, #9]
   18b7e:	2b00      	cmp	r3, #0
   18b80:	f43f aceb 	beq.w	1855a <isr+0x812>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   18b84:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   18b88:	2b00      	cmp	r3, #0
   18b8a:	f47f ace6 	bne.w	1855a <isr+0x812>
		err = isr_rx_scan_report(rssi_ready,
   18b8e:	f1ba 0f00 	cmp.w	sl, #0
   18b92:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   18b96:	bf14      	ite	ne
   18b98:	4641      	movne	r1, r8
   18b9a:	21ff      	moveq	r1, #255	; 0xff
   18b9c:	4628      	mov	r0, r5
   18b9e:	f7fa fc43 	bl	13428 <isr_rx_scan_report>
   18ba2:	e4da      	b.n	1855a <isr+0x812>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   18ba4:	2b01      	cmp	r3, #1
   18ba6:	d00e      	beq.n	18bc6 <isr+0xe7e>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   18ba8:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
   18bac:	f003 020b 	and.w	r2, r3, #11
   18bb0:	2a02      	cmp	r2, #2
   18bb2:	d0e2      	beq.n	18b7a <isr+0xe32>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   18bb4:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   18bb8:	2b07      	cmp	r3, #7
   18bba:	d10d      	bne.n	18bd8 <isr+0xe90>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   18bbc:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   18bc0:	075e      	lsls	r6, r3, #29
   18bc2:	d1da      	bne.n	18b7a <isr+0xe32>
   18bc4:	e4c9      	b.n	1855a <isr+0x812>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
   18bc6:	ab12      	add	r3, sp, #72	; 0x48
   18bc8:	4642      	mov	r2, r8
   18bca:	4631      	mov	r1, r6
   18bcc:	2000      	movs	r0, #0
   18bce:	f7fa fbdf 	bl	13390 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18bd2:	2800      	cmp	r0, #0
   18bd4:	d1d1      	bne.n	18b7a <isr+0xe32>
   18bd6:	e7e7      	b.n	18ba8 <isr+0xe60>
		   (_radio.scanner.phy)) ||
   18bd8:	2b04      	cmp	r3, #4
   18bda:	f47f acbe 	bne.w	1855a <isr+0x812>
		   (_radio.scanner.state != 0) &&
   18bde:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   18be2:	0798      	lsls	r0, r3, #30
   18be4:	f57f acb9 	bpl.w	1855a <isr+0x812>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   18be8:	f005 fea4 	bl	1e934 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   18bec:	f899 3008 	ldrb.w	r3, [r9, #8]
   18bf0:	7802      	ldrb	r2, [r0, #0]
   18bf2:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18bf6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   18bfa:	f47f acae 	bne.w	1855a <isr+0x812>
		(memcmp(&sreq->scan_req.adv_addr[0],
   18bfe:	2206      	movs	r2, #6
   18c00:	f109 010a 	add.w	r1, r9, #10
   18c04:	3008      	adds	r0, #8
   18c06:	f7ee f818 	bl	6c3a <memcmp>
		   (_radio.scanner.state != 0) &&
   18c0a:	2800      	cmp	r0, #0
   18c0c:	d0b5      	beq.n	18b7a <isr+0xe32>
   18c0e:	e4a4      	b.n	1855a <isr+0x812>
	_radio.packet_counter++;
   18c10:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   18c14:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   18c18:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
	_radio.packet_counter++;
   18c1c:	3301      	adds	r3, #1
   18c1e:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
   18c22:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   18c24:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
   18c28:	f88d 6047 	strb.w	r6, [sp, #71]	; 0x47
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   18c2c:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   18c30:	2301      	movs	r3, #1
   18c32:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
   18c36:	2f00      	cmp	r7, #0
   18c38:	f000 82ea 	beq.w	19210 <isr+0x14c8>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   18c3c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   18c40:	f898 1008 	ldrb.w	r1, [r8, #8]
   18c44:	f003 0201 	and.w	r2, r3, #1
   18c48:	f3c1 0180 	ubfx	r1, r1, #2, #1
   18c4c:	4291      	cmp	r1, r2
   18c4e:	f000 8198 	beq.w	18f82 <isr+0x123a>
		_radio.conn_curr->sn++;
   18c52:	f082 0201 	eor.w	r2, r2, #1
   18c56:	f362 0300 	bfi	r3, r2, #0, #1
   18c5a:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   18c5e:	7d23      	ldrb	r3, [r4, #20]
   18c60:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
   18c62:	bf02      	ittt	eq
   18c64:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
   18c68:	f043 0301 	orreq.w	r3, r3, #1
   18c6c:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
   18c70:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   18c74:	0619      	lsls	r1, r3, #24
   18c76:	f100 817f 	bmi.w	18f78 <isr+0x1230>
			node_tx = _radio.conn_curr->pkt_tx_head;
   18c7a:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
   18c7e:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
   18c82:	1d30      	adds	r0, r6, #4
   18c84:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
   18c88:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
   18c8c:	f1b9 0f00 	cmp.w	r9, #0
   18c90:	f000 80cd 	beq.w	18e2e <isr+0x10e6>
				if (_radio.conn_curr->enc_tx) {
   18c94:	069a      	lsls	r2, r3, #26
   18c96:	d50b      	bpl.n	18cb0 <isr+0xf68>
					_radio.conn_curr->ccm_tx.counter++;
   18c98:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
   18c9c:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
   18ca0:	f11b 0201 	adds.w	r2, fp, #1
   18ca4:	f14c 0300 	adc.w	r3, ip, #0
   18ca8:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
   18cac:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   18cb0:	5c43      	ldrb	r3, [r0, r1]
   18cb2:	f003 0303 	and.w	r3, r3, #3
   18cb6:	2b03      	cmp	r3, #3
   18cb8:	f040 80b9 	bne.w	18e2e <isr+0x10e6>
	switch (pdu_data_tx->llctrl.opcode) {
   18cbc:	f89a 3003 	ldrb.w	r3, [sl, #3]
   18cc0:	3b02      	subs	r3, #2
   18cc2:	2b16      	cmp	r3, #22
   18cc4:	f200 80b3 	bhi.w	18e2e <isr+0x10e6>
   18cc8:	e8df f013 	tbh	[pc, r3, lsl #1]
   18ccc:	00950017 	.word	0x00950017
   18cd0:	00b100dd 	.word	0x00b100dd
   18cd4:	00b100b1 	.word	0x00b100b1
   18cd8:	00b100b1 	.word	0x00b100b1
   18cdc:	00be00b3 	.word	0x00be00b3
   18ce0:	00e400b1 	.word	0x00e400b1
   18ce4:	00b100b1 	.word	0x00b100b1
   18ce8:	00b100b1 	.word	0x00b100b1
   18cec:	00b100b1 	.word	0x00b100b1
   18cf0:	00b100ee 	.word	0x00b100ee
   18cf4:	01090102 	.word	0x01090102
   18cf8:	0126      	.short	0x0126
		_radio.state = STATE_CLOSE;
   18cfa:	2303      	movs	r3, #3
   18cfc:	7563      	strb	r3, [r4, #21]
		radio_disable();
   18cfe:	f005 fdc3 	bl	1e888 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   18d02:	f005 fddf 	bl	1e8c4 <radio_is_ready>
   18d06:	b378      	cbz	r0, 18d68 <isr+0x1020>
   18d08:	4b10      	ldr	r3, [pc, #64]	; (18d4c <isr+0x1004>)
   18d0a:	681b      	ldr	r3, [r3, #0]
   18d0c:	075b      	lsls	r3, r3, #29
   18d0e:	f43f ac09 	beq.w	18524 <isr+0x7dc>
   18d12:	2301      	movs	r3, #1
   18d14:	f04f 0200 	mov.w	r2, #0
   18d18:	f363 0202 	bfi	r2, r3, #0, #3
   18d1c:	490c      	ldr	r1, [pc, #48]	; (18d50 <isr+0x1008>)
   18d1e:	4b0d      	ldr	r3, [pc, #52]	; (18d54 <isr+0x100c>)
   18d20:	1a5b      	subs	r3, r3, r1
   18d22:	f36f 02c5 	bfc	r2, #3, #3
   18d26:	08db      	lsrs	r3, r3, #3
   18d28:	f363 128f 	bfi	r2, r3, #6, #10
   18d2c:	490c      	ldr	r1, [pc, #48]	; (18d60 <isr+0x1018>)
   18d2e:	f7ff b878 	b.w	17e22 <isr+0xda>
   18d32:	bf00      	nop
   18d34:	f3af 8000 	nop.w
   18d38:	1afd498d 	.word	0x1afd498d
   18d3c:	00000007 	.word	0x00000007
   18d40:	00013601 	.word	0x00013601
   18d44:	0001351d 	.word	0x0001351d
   18d48:	00016709 	.word	0x00016709
   18d4c:	2000e218 	.word	0x2000e218
   18d50:	0002ef38 	.word	0x0002ef38
   18d54:	0002ef70 	.word	0x0002ef70
   18d58:	000328bf 	.word	0x000328bf
   18d5c:	20001350 	.word	0x20001350
   18d60:	000328cb 	.word	0x000328cb
   18d64:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code ==
   18d68:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   18d6c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18d70:	2913      	cmp	r1, #19
   18d72:	bf08      	it	eq
   18d74:	2116      	moveq	r1, #22
   18d76:	f7fb fa4f 	bl	14218 <terminate_ind_rx_enqueue>
		ret = ERR_TERMINATE;
   18d7a:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   18d7c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18d80:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   18d84:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
   18d86:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   18d8a:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
   18d8e:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   18d90:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
   18d94:	f000 80c7 	beq.w	18f26 <isr+0x11de>
	return NULL;
   18d98:	2600      	movs	r6, #0
	if (ret == ERR_TERMINATE) {
   18d9a:	2d00      	cmp	r5, #0
   18d9c:	f000 80f1 	beq.w	18f82 <isr+0x123a>
		connection_release(_radio.conn_curr);
   18da0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18da4:	f7fa fed4 	bl	13b50 <connection_release>
		_radio.conn_curr = NULL;
   18da8:	2300      	movs	r3, #0
   18daa:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
   18dae:	f005 ff33 	bl	1ec18 <radio_tmr_aa_restore>
   18db2:	b918      	cbnz	r0, 18dbc <isr+0x1074>
		radio_tmr_aa_save(radio_tmr_aa_get());
   18db4:	f005 ff24 	bl	1ec00 <radio_tmr_aa_get>
   18db8:	f005 ff28 	bl	1ec0c <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
   18dbc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   18dc0:	2b00      	cmp	r3, #0
   18dc2:	f43f a878 	beq.w	17eb6 <isr+0x16e>
	if (tx_release) {
   18dc6:	b11e      	cbz	r6, 18dd0 <isr+0x1088>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   18dc8:	4631      	mov	r1, r6
   18dca:	8c18      	ldrh	r0, [r3, #32]
   18dcc:	f7fa fe28 	bl	13a20 <pdu_node_tx_release>
	if (rx_enqueue) {
   18dd0:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   18dd4:	2b00      	cmp	r3, #0
   18dd6:	f43f a86e 	beq.w	17eb6 <isr+0x16e>
		rx_fc_lock(_radio.conn_curr->handle);
   18dda:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   18dde:	8c18      	ldrh	r0, [r3, #32]
   18de0:	f7fa fb82 	bl	134e8 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
   18de4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   18de8:	8c1b      	ldrh	r3, [r3, #32]
   18dea:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
   18dee:	f7fa fa6b 	bl	132c8 <packet_rx_enqueue>
   18df2:	f7ff b860 	b.w	17eb6 <isr+0x16e>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   18df6:	2208      	movs	r2, #8
   18df8:	f10a 010e 	add.w	r1, sl, #14
   18dfc:	f105 0094 	add.w	r0, r5, #148	; 0x94
   18e00:	f7ed ff42 	bl	6c88 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   18e04:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18e08:	2204      	movs	r2, #4
   18e0a:	f10a 0116 	add.w	r1, sl, #22
   18e0e:	f500 7089 	add.w	r0, r0, #274	; 0x112
   18e12:	f7ed ff39 	bl	6c88 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   18e16:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   18e1a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   18e1e:	f042 0208 	orr.w	r2, r2, #8
   18e22:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   18e26:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   18e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u32_t ret = 0;
   18e2e:	2500      	movs	r5, #0
   18e30:	e7a4      	b.n	18d7c <isr+0x1034>
		_radio.conn_curr->pause_tx = 1;
   18e32:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   18e36:	f043 0348 	orr.w	r3, r3, #72	; 0x48
   18e3a:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   18e3e:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
   18e42:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
   18e46:	e7f2      	b.n	18e2e <isr+0x10e6>
		if (_radio.role == ROLE_MASTER) {
   18e48:	7d23      	ldrb	r3, [r4, #20]
   18e4a:	2b04      	cmp	r3, #4
   18e4c:	d11b      	bne.n	18e86 <isr+0x113e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18e4e:	7933      	ldrb	r3, [r6, #4]
   18e50:	f043 0303 	orr.w	r3, r3, #3
   18e54:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   18e56:	2317      	movs	r3, #23
   18e58:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   18e5a:	2303      	movs	r3, #3
   18e5c:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
   18e5e:	2208      	movs	r2, #8
   18e60:	f105 017a 	add.w	r1, r5, #122	; 0x7a
   18e64:	3004      	adds	r0, #4
   18e66:	f7ed ff0f 	bl	6c88 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
   18e6a:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
   18e6e:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
   18e70:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
   18e74:	7473      	strb	r3, [r6, #17]
	entropy_get_entropy_isr(_radio.entropy,
   18e76:	f106 0112 	add.w	r1, r6, #18
   18e7a:	220c      	movs	r2, #12
   18e7c:	6860      	ldr	r0, [r4, #4]
   18e7e:	f7fb ffc5 	bl	14e0c <entropy_get_entropy_isr.constprop.35>
			*node_tx = NULL;
   18e82:	2600      	movs	r6, #0
   18e84:	e7d3      	b.n	18e2e <isr+0x10e6>
			_radio.conn_curr->pause_tx = 1;
   18e86:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   18e8a:	f043 0308 	orr.w	r3, r3, #8
   18e8e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   18e92:	e7cc      	b.n	18e2e <isr+0x10e6>
		_radio.conn_curr->pause_rx = 0;
   18e94:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   18e98:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   18e9c:	f36f 03c3 	bfc	r3, #3, #1
   18ea0:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   18ea4:	2300      	movs	r3, #0
   18ea6:	e7cc      	b.n	18e42 <isr+0x10fa>
		if ((_radio.conn_curr->llcp_length.req !=
   18ea8:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   18eac:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   18eb0:	429a      	cmp	r2, r3
   18eb2:	d0bc      	beq.n	18e2e <isr+0x10e6>
		    (_radio.conn_curr->llcp_length.state ==
   18eb4:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
   18eb8:	f003 0203 	and.w	r2, r3, #3
   18ebc:	2a01      	cmp	r2, #1
   18ebe:	d1b6      	bne.n	18e2e <isr+0x10e6>
			_radio.conn_curr->llcp_length.state =
   18ec0:	f043 0304 	orr.w	r3, r3, #4
   18ec4:	2202      	movs	r2, #2
   18ec6:	f362 0301 	bfi	r3, r2, #0, #2
   18eca:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
   18ece:	e7ae      	b.n	18e2e <isr+0x10e6>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   18ed0:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   18ed4:	2202      	movs	r2, #2
   18ed6:	f362 0301 	bfi	r3, r2, #0, #2
   18eda:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   18ede:	7d23      	ldrb	r3, [r4, #20]
   18ee0:	2b03      	cmp	r3, #3
   18ee2:	d1a4      	bne.n	18e2e <isr+0x10e6>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   18ee4:	f8df c324 	ldr.w	ip, [pc, #804]	; 1920c <isr+0x14c4>
   18ee8:	f04f 3304 	mov.w	r3, #67372036	; 0x4040404
   18eec:	e9cd c312 	strd	ip, r3, [sp, #72]	; 0x48
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   18ef0:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   18ef4:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
   18ef8:	f3c3 0382 	ubfx	r3, r3, #2, #3
   18efc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	conn->phy_tx_time = phy_tx_time[phys];
   18f00:	4313      	orrs	r3, r2
   18f02:	aa14      	add	r2, sp, #80	; 0x50
   18f04:	4413      	add	r3, r2
   18f06:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   18f0a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
   18f0e:	f363 0202 	bfi	r2, r3, #0, #3
   18f12:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
   18f16:	e78a      	b.n	18e2e <isr+0x10e6>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   18f18:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
   18f1c:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   18f20:	f3c3 0382 	ubfx	r3, r3, #2, #3
   18f24:	e7f3      	b.n	18f0e <isr+0x11c6>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   18f26:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   18f2a:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
   18f2e:	f04f 0c00 	mov.w	ip, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   18f32:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
   18f34:	f8a0 c150 	strh.w	ip, [r0, #336]	; 0x150
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   18f38:	d114      	bne.n	18f64 <isr+0x121c>
		if (node_tx) {
   18f3a:	2e00      	cmp	r6, #0
   18f3c:	f43f af2c 	beq.w	18d98 <isr+0x1050>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   18f40:	f8d0 2144 	ldr.w	r2, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   18f44:	6819      	ldr	r1, [r3, #0]
   18f46:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   18f4a:	4293      	cmp	r3, r2
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   18f4c:	bf12      	itee	ne
   18f4e:	f8c0 1140 	strne.w	r1, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl = NULL;
   18f52:	f8c0 c140 	streq.w	ip, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   18f56:	f8c0 c144 	streq.w	ip, [r0, #324]	; 0x144
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   18f5a:	49a4      	ldr	r1, [pc, #656]	; (191ec <isr+0x14a4>)
   18f5c:	4630      	mov	r0, r6
   18f5e:	f7f8 f9de 	bl	1131e <mem_release>
   18f62:	e719      	b.n	18d98 <isr+0x1050>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   18f64:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   18f68:	6819      	ldr	r1, [r3, #0]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   18f6a:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   18f6e:	4293      	cmp	r3, r2
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   18f70:	bf08      	it	eq
   18f72:	f8c0 1148 	streq.w	r1, [r0, #328]	; 0x148
   18f76:	e710      	b.n	18d9a <isr+0x1052>
			_radio.conn_curr->empty = 0;
   18f78:	f36f 13c7 	bfc	r3, #7, #1
   18f7c:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	struct radio_pdu_node_tx *tx_release = NULL;
   18f80:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   18f82:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   18f86:	f898 2008 	ldrb.w	r2, [r8, #8]
   18f8a:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   18f8e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   18f92:	f3c3 0340 	ubfx	r3, r3, #1, #1
   18f96:	429a      	cmp	r2, r3
   18f98:	f040 80fa 	bne.w	19190 <isr+0x1448>
	    (packet_rx_reserve_get(3) != 0) &&
   18f9c:	2003      	movs	r0, #3
   18f9e:	f7f9 fa31 	bl	12404 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   18fa2:	2800      	cmp	r0, #0
   18fa4:	f000 80f4 	beq.w	19190 <isr+0x1448>
	    (packet_rx_reserve_get(3) != 0) &&
   18fa8:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   18fac:	b383      	cbz	r3, 19010 <isr+0x12c8>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   18fae:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   18fb2:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
   18fb6:	4293      	cmp	r3, r2
   18fb8:	d105      	bne.n	18fc6 <isr+0x127e>
	      (_radio.fc_req == _radio.fc_ack)) ||
   18fba:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   18fbe:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
   18fc2:	4291      	cmp	r1, r2
   18fc4:	d024      	beq.n	19010 <isr+0x12c8>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   18fc6:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
   18fca:	4293      	cmp	r3, r2
   18fcc:	f000 80e0 	beq.w	19190 <isr+0x1448>
	      (_radio.fc_req != _radio.fc_ack) &&
   18fd0:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   18fd4:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
   18fd8:	429a      	cmp	r2, r3
   18fda:	f000 80d9 	beq.w	19190 <isr+0x1448>
		(((_radio.fc_req == 0) &&
   18fde:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
   18fe2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
	      (_radio.fc_req != _radio.fc_ack) &&
   18fe6:	b923      	cbnz	r3, 18ff2 <isr+0x12aa>
		(((_radio.fc_req == 0) &&
   18fe8:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
   18fec:	8c13      	ldrh	r3, [r2, #32]
   18fee:	4299      	cmp	r1, r3
   18ff0:	d00e      	beq.n	19010 <isr+0x12c8>
		 ((_radio.fc_req != 0) &&
   18ff2:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
   18ff6:	2b00      	cmp	r3, #0
   18ff8:	f000 80ca 	beq.w	19190 <isr+0x1448>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   18ffc:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
   19000:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
   19004:	f8b3 1178 	ldrh.w	r1, [r3, #376]	; 0x178
   19008:	8c13      	ldrh	r3, [r2, #32]
   1900a:	4299      	cmp	r1, r3
   1900c:	f040 80c0 	bne.w	19190 <isr+0x1448>
   19010:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		if (pdu_data_rx->len != 0) {
   19014:	f898 5009 	ldrb.w	r5, [r8, #9]
   19018:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   1901c:	2d00      	cmp	r5, #0
   1901e:	f000 80c0 	beq.w	191a2 <isr+0x145a>
			if (_radio.conn_curr->enc_rx) {
   19022:	f013 0310 	ands.w	r3, r3, #16
   19026:	d019      	beq.n	1905c <isr+0x1314>
				done = radio_ccm_is_done();
   19028:	f005 fe82 	bl	1ed30 <radio_ccm_is_done>
				LL_ASSERT(done);
   1902c:	2800      	cmp	r0, #0
   1902e:	d149      	bne.n	190c4 <isr+0x137c>
   19030:	4b6f      	ldr	r3, [pc, #444]	; (191f0 <isr+0x14a8>)
   19032:	681b      	ldr	r3, [r3, #0]
   19034:	075c      	lsls	r4, r3, #29
   19036:	f43f aa75 	beq.w	18524 <isr+0x7dc>
   1903a:	2301      	movs	r3, #1
   1903c:	f04f 0200 	mov.w	r2, #0
   19040:	f363 0202 	bfi	r2, r3, #0, #3
   19044:	496b      	ldr	r1, [pc, #428]	; (191f4 <isr+0x14ac>)
   19046:	4b6c      	ldr	r3, [pc, #432]	; (191f8 <isr+0x14b0>)
   19048:	1a5b      	subs	r3, r3, r1
   1904a:	f360 02c5 	bfi	r2, r0, #3, #3
   1904e:	08db      	lsrs	r3, r3, #3
   19050:	f363 128f 	bfi	r2, r3, #6, #10
   19054:	4969      	ldr	r1, [pc, #420]	; (191fc <isr+0x14b4>)
   19056:	486a      	ldr	r0, [pc, #424]	; (19200 <isr+0x14b8>)
   19058:	f7ff ba62 	b.w	18520 <isr+0x7d8>
		u8_t ccm_rx_increment = 0;
   1905c:	461d      	mov	r5, r3
			if ((_radio.conn_curr->enc_rx &&
   1905e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   19062:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   19066:	06d9      	lsls	r1, r3, #27
   19068:	d42e      	bmi.n	190c8 <isr+0x1380>
			    (_radio.conn_curr->pause_rx &&
   1906a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1906e:	f898 3008 	ldrb.w	r3, [r8, #8]
   19072:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   19076:	f012 0f04 	tst.w	r2, #4
   1907a:	d147      	bne.n	1910c <isr+0x13c4>
			_radio.conn_curr->appto_expire = 0;
   1907c:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
   1907e:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
   19082:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   19086:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   1908a:	d004      	beq.n	19096 <isr+0x134e>
   1908c:	2b02      	cmp	r3, #2
   1908e:	d878      	bhi.n	19182 <isr+0x143a>
				*rx_enqueue = 1;
   19090:	2301      	movs	r3, #1
   19092:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
			_radio.conn_curr->nesn++;
   19096:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1909a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1909e:	f082 0202 	eor.w	r2, r2, #2
   190a2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
   190a6:	2d00      	cmp	r5, #0
   190a8:	d072      	beq.n	19190 <isr+0x1448>
				_radio.conn_curr->ccm_rx.counter++;
   190aa:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
   190ae:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
   190b2:	f119 0001 	adds.w	r0, r9, #1
   190b6:	f14a 0100 	adc.w	r1, sl, #0
   190ba:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
   190be:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
   190c2:	e065      	b.n	19190 <isr+0x1448>
				ccm_rx_increment = 1;
   190c4:	2501      	movs	r5, #1
   190c6:	e7ca      	b.n	1905e <isr+0x1316>
			     !radio_ccm_mic_is_valid()) ||
   190c8:	f005 fe50 	bl	1ed6c <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   190cc:	2800      	cmp	r0, #0
   190ce:	d1cc      	bne.n	1906a <isr+0x1322>
				_radio.state = STATE_CLOSE;
   190d0:	2303      	movs	r3, #3
   190d2:	7563      	strb	r3, [r4, #21]
				radio_disable();
   190d4:	f005 fbd8 	bl	1e888 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   190d8:	f005 fbf4 	bl	1e8c4 <radio_is_ready>
   190dc:	4605      	mov	r5, r0
   190de:	2800      	cmp	r0, #0
   190e0:	d043      	beq.n	1916a <isr+0x1422>
   190e2:	4b43      	ldr	r3, [pc, #268]	; (191f0 <isr+0x14a8>)
   190e4:	681b      	ldr	r3, [r3, #0]
   190e6:	075b      	lsls	r3, r3, #29
   190e8:	f43f aa1c 	beq.w	18524 <isr+0x7dc>
   190ec:	2301      	movs	r3, #1
   190ee:	f04f 0200 	mov.w	r2, #0
   190f2:	f363 0202 	bfi	r2, r3, #0, #3
   190f6:	493f      	ldr	r1, [pc, #252]	; (191f4 <isr+0x14ac>)
   190f8:	4b3f      	ldr	r3, [pc, #252]	; (191f8 <isr+0x14b0>)
   190fa:	1a5b      	subs	r3, r3, r1
   190fc:	f36f 02c5 	bfc	r2, #3, #3
   19100:	08db      	lsrs	r3, r3, #3
   19102:	f363 128f 	bfi	r2, r3, #6, #10
   19106:	493d      	ldr	r1, [pc, #244]	; (191fc <isr+0x14b4>)
   19108:	f7fe be8b 	b.w	17e22 <isr+0xda>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1910c:	f003 0103 	and.w	r1, r3, #3
   19110:	2903      	cmp	r1, #3
   19112:	d1dd      	bne.n	190d0 <isr+0x1388>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   19114:	f990 c01d 	ldrsb.w	ip, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
   19118:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   1911c:	f1bc 0f00 	cmp.w	ip, #0
   19120:	f002 0240 	and.w	r2, r2, #64	; 0x40
   19124:	db15      	blt.n	19152 <isr+0x140a>
	       (!conn->role &&
   19126:	b922      	cbnz	r2, 19132 <isr+0x13ea>
		((!conn->refresh &&
   19128:	2902      	cmp	r1, #2
   1912a:	d0a7      	beq.n	1907c <isr+0x1334>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1912c:	2911      	cmp	r1, #17
   1912e:	d8cf      	bhi.n	190d0 <isr+0x1388>
   19130:	e009      	b.n	19146 <isr+0x13fe>
		 (conn->refresh &&
   19132:	1e8a      	subs	r2, r1, #2
   19134:	b2d2      	uxtb	r2, r2
   19136:	2a09      	cmp	r2, #9
   19138:	d8f8      	bhi.n	1912c <isr+0x13e4>
   1913a:	f240 2c05 	movw	ip, #517	; 0x205
   1913e:	fa2c f202 	lsr.w	r2, ip, r2
   19142:	07d2      	lsls	r2, r2, #31
   19144:	d49a      	bmi.n	1907c <isr+0x1334>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   19146:	4a2f      	ldr	r2, [pc, #188]	; (19204 <isr+0x14bc>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   19148:	fa22 f101 	lsr.w	r1, r2, r1
   1914c:	07ca      	lsls	r2, r1, #31
   1914e:	d5bf      	bpl.n	190d0 <isr+0x1388>
   19150:	e794      	b.n	1907c <isr+0x1334>
	       (conn->role &&
   19152:	b92a      	cbnz	r2, 19160 <isr+0x1418>
		((!conn->refresh &&
   19154:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   19156:	d091      	beq.n	1907c <isr+0x1334>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   19158:	2911      	cmp	r1, #17
   1915a:	d8b9      	bhi.n	190d0 <isr+0x1388>
   1915c:	4a2a      	ldr	r2, [pc, #168]	; (19208 <isr+0x14c0>)
   1915e:	e7f3      	b.n	19148 <isr+0x1400>
		 (conn->refresh &&
   19160:	1e8a      	subs	r2, r1, #2
   19162:	2a01      	cmp	r2, #1
   19164:	d98a      	bls.n	1907c <isr+0x1334>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   19166:	290b      	cmp	r1, #11
   19168:	e7f5      	b.n	19156 <isr+0x140e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   1916a:	213d      	movs	r1, #61	; 0x3d
   1916c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   19170:	f7fb f852 	bl	14218 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   19174:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   19178:	f7fa fcea 	bl	13b50 <connection_release>
				_radio.conn_curr = NULL;
   1917c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   19180:	e615      	b.n	18dae <isr+0x1066>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
   19182:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   19186:	4640      	mov	r0, r8
   19188:	f7fd fc2c 	bl	169e4 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
   1918c:	2800      	cmp	r0, #0
   1918e:	d082      	beq.n	19096 <isr+0x134e>
		_radio.conn_curr->supervision_expire = 0;
   19190:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
   19194:	2300      	movs	r3, #0
   19196:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
   1919a:	4699      	mov	r9, r3
		_radio.conn_curr->supervision_expire = 0;
   1919c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
   191a0:	e04d      	b.n	1923e <isr+0x14f6>
		} else if ((_radio.conn_curr->enc_rx) ||
   191a2:	f013 0f14 	tst.w	r3, #20
   191a6:	f43f af76 	beq.w	19096 <isr+0x134e>
					    (conn->latency + 6)) ?
   191aa:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
   191ac:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
   191b0:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   191b2:	4299      	cmp	r1, r3
   191b4:	bfc4      	itt	gt
   191b6:	1f8b      	subgt	r3, r1, #6
   191b8:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   191ba:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
   191be:	bfcc      	ite	gt
   191c0:	b29b      	uxthgt	r3, r3
   191c2:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   191c4:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
   191c6:	bf1e      	ittt	ne
   191c8:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
   191cc:	2300      	movne	r3, #0
   191ce:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   191d2:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   191d6:	2b00      	cmp	r3, #0
   191d8:	f47f af5d 	bne.w	19096 <isr+0x134e>
				conn->appto_expire = conn->appto_reload;
   191dc:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
   191e0:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   191e4:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
   191e8:	e755      	b.n	19096 <isr+0x134e>
   191ea:	bf00      	nop
   191ec:	200013c8 	.word	0x200013c8
   191f0:	2000e218 	.word	0x2000e218
   191f4:	0002ef38 	.word	0x0002ef38
   191f8:	0002ef70 	.word	0x0002ef70
   191fc:	0003292f 	.word	0x0003292f
   19200:	00032fa9 	.word	0x00032fa9
   19204:	00022060 	.word	0x00022060
   19208:	00022040 	.word	0x00022040
   1920c:	01020101 	.word	0x01020101
		if (_radio.crc_expire == 0) {
   19210:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   19214:	b913      	cbnz	r3, 1921c <isr+0x14d4>
			_radio.crc_expire = 2;
   19216:	2302      	movs	r3, #2
   19218:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
   1921c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   19220:	3b01      	subs	r3, #1
   19222:	b2db      	uxtb	r3, r3
   19224:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
   19228:	f8b5 6040 	ldrh.w	r6, [r5, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
   1922c:	fab3 f983 	clz	r9, r3
   19230:	ea4f 1959 	mov.w	r9, r9, lsr #5
		if (!_radio.conn_curr->supervision_expire) {
   19234:	2e00      	cmp	r6, #0
   19236:	d15c      	bne.n	192f2 <isr+0x15aa>
			_radio.conn_curr->supervision_expire =
   19238:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   1923a:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   1923e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   19242:	a912      	add	r1, sp, #72	; 0x48
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   19244:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   19248:	f7fd fa60 	bl	1670c <prepare_pdu_data_tx>
			STATE_CLOSE : STATE_TX;
   1924c:	7d63      	ldrb	r3, [r4, #21]
   1924e:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   19250:	ea4f 15d5 	mov.w	r5, r5, lsr #7
			STATE_CLOSE : STATE_TX;
   19254:	d051      	beq.n	192fa <isr+0x15b2>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   19256:	f1b9 0f00 	cmp.w	r9, #0
   1925a:	d14c      	bne.n	192f6 <isr+0x15ae>
   1925c:	b13f      	cbz	r7, 1926e <isr+0x1526>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   1925e:	f898 3008 	ldrb.w	r3, [r8, #8]
   19262:	06df      	lsls	r7, r3, #27
   19264:	d403      	bmi.n	1926e <isr+0x1526>
			 ((pdu_data_tx->len == 0) ||
   19266:	9b12      	ldr	r3, [sp, #72]	; 0x48
			((crc_ok) && (pdu_data_rx->md == 0) &&
   19268:	785b      	ldrb	r3, [r3, #1]
   1926a:	2b00      	cmp	r3, #0
   1926c:	d043      	beq.n	192f6 <isr+0x15ae>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   1926e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			  (0))) ||
   19272:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
   19276:	2b00      	cmp	r3, #0
   19278:	d13d      	bne.n	192f6 <isr+0x15ae>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1927a:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
   1927c:	2096      	movs	r0, #150	; 0x96
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1927e:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
   19280:	f005 fbf8 	bl	1ea74 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   19284:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   19288:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   1928c:	f000 0007 	and.w	r0, r0, #7
   19290:	f005 fb54 	bl	1e93c <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   19294:	f005 fccc 	bl	1ec30 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   19298:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1929c:	9912      	ldr	r1, [sp, #72]	; 0x48
   1929e:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
   192a2:	780b      	ldrb	r3, [r1, #0]
   192a4:	f3c2 0200 	ubfx	r2, r2, #0, #1
   192a8:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   192ac:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
   192b0:	f3c2 0240 	ubfx	r2, r2, #1, #1
   192b4:	f362 0382 	bfi	r3, r2, #2, #1
   192b8:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   192ba:	f7f9 fd03 	bl	12cc4 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   192be:	f005 fb01 	bl	1e8c4 <radio_is_ready>
   192c2:	2800      	cmp	r0, #0
   192c4:	f43f ad73 	beq.w	18dae <isr+0x1066>
   192c8:	4bc3      	ldr	r3, [pc, #780]	; (195d8 <isr+0x1890>)
   192ca:	681b      	ldr	r3, [r3, #0]
   192cc:	075d      	lsls	r5, r3, #29
   192ce:	f43f a929 	beq.w	18524 <isr+0x7dc>
   192d2:	2301      	movs	r3, #1
   192d4:	f04f 0200 	mov.w	r2, #0
   192d8:	f363 0202 	bfi	r2, r3, #0, #3
   192dc:	49bf      	ldr	r1, [pc, #764]	; (195dc <isr+0x1894>)
   192de:	4bc0      	ldr	r3, [pc, #768]	; (195e0 <isr+0x1898>)
   192e0:	1a5b      	subs	r3, r3, r1
   192e2:	f36f 02c5 	bfc	r2, #3, #3
   192e6:	08db      	lsrs	r3, r3, #3
   192e8:	f363 128f 	bfi	r2, r3, #6, #10
   192ec:	49bd      	ldr	r1, [pc, #756]	; (195e4 <isr+0x189c>)
   192ee:	f7fe bd98 	b.w	17e22 <isr+0xda>
	struct radio_pdu_node_tx *tx_release = NULL;
   192f2:	2600      	movs	r6, #0
   192f4:	e7a3      	b.n	1923e <isr+0x14f6>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   192f6:	2303      	movs	r3, #3
   192f8:	7563      	strb	r3, [r4, #21]
		if ((_radio.role == ROLE_MASTER) ||
   192fa:	7d23      	ldrb	r3, [r4, #20]
   192fc:	2b04      	cmp	r3, #4
   192fe:	d10a      	bne.n	19316 <isr+0x15ce>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   19300:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   19304:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   19308:	f365 12c7 	bfi	r2, r5, #7, #1
   1930c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   19310:	f005 faba 	bl	1e888 <radio_disable>
   19314:	e54b      	b.n	18dae <isr+0x1066>
			radio_switch_complete_and_disable();
   19316:	f005 fb27 	bl	1e968 <radio_switch_complete_and_disable>
   1931a:	e7bd      	b.n	19298 <isr+0x1550>
		LL_ASSERT(0);
   1931c:	4bae      	ldr	r3, [pc, #696]	; (195d8 <isr+0x1890>)
   1931e:	681b      	ldr	r3, [r3, #0]
   19320:	075c      	lsls	r4, r3, #29
   19322:	f43f a8ff 	beq.w	18524 <isr+0x7dc>
   19326:	2301      	movs	r3, #1
   19328:	f04f 0200 	mov.w	r2, #0
   1932c:	f363 0202 	bfi	r2, r3, #0, #3
   19330:	49aa      	ldr	r1, [pc, #680]	; (195dc <isr+0x1894>)
   19332:	4bab      	ldr	r3, [pc, #684]	; (195e0 <isr+0x1898>)
   19334:	1a5b      	subs	r3, r3, r1
   19336:	f36f 02c5 	bfc	r2, #3, #3
   1933a:	08db      	lsrs	r3, r3, #3
   1933c:	f363 128f 	bfi	r2, r3, #6, #10
   19340:	49a9      	ldr	r1, [pc, #676]	; (195e8 <isr+0x18a0>)
   19342:	f7fe be14 	b.w	17f6e <isr+0x226>
	switch (_radio.role) {
   19346:	7d22      	ldrb	r2, [r4, #20]
   19348:	2a04      	cmp	r2, #4
   1934a:	f200 825b 	bhi.w	19804 <isr+0x1abc>
   1934e:	e8df f012 	tbh	[pc, r2, lsl #1]
   19352:	023c      	.short	0x023c
   19354:	00570005 	.word	0x00570005
   19358:	00b000b0 	.word	0x00b000b0
	if ((_radio.state == STATE_CLOSE) &&
   1935c:	2b03      	cmp	r3, #3
   1935e:	d109      	bne.n	19374 <isr+0x162c>
	    (_radio.advertiser.chan_map_current != 0)) {
   19360:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
   19364:	0758      	lsls	r0, r3, #29
   19366:	d005      	beq.n	19374 <isr+0x162c>
		adv_setup();
   19368:	f7fa fcf6 	bl	13d58 <adv_setup>
		radio_tx_enable();
   1936c:	f005 fa86 	bl	1e87c <radio_tx_enable>
   19370:	f7fe bd71 	b.w	17e56 <isr+0x10e>
		radio_filter_disable();
   19374:	f005 fb42 	bl	1e9fc <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
   19378:	7d63      	ldrb	r3, [r4, #21]
   1937a:	2b03      	cmp	r3, #3
   1937c:	d173      	bne.n	19466 <isr+0x171e>
		    (!_radio.advertiser.is_hdcd)) {
   1937e:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
   19382:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   19386:	d16e      	bne.n	19466 <isr+0x171e>
			entropy_get_entropy_isr(_radio.entropy,
   19388:	2202      	movs	r2, #2
   1938a:	a912      	add	r1, sp, #72	; 0x48
   1938c:	6860      	ldr	r0, [r4, #4]
   1938e:	f7fb fd3d 	bl	14e0c <entropy_get_entropy_isr.constprop.35>
			random_delay %= HAL_TICKER_US_TO_TICKS(10000);
   19392:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   19396:	f240 1247 	movw	r2, #327	; 0x147
   1939a:	fbb1 f3f2 	udiv	r3, r1, r2
   1939e:	fb02 1313 	mls	r3, r2, r3, r1
			ticker_status =
   193a2:	f640 726a 	movw	r2, #3946	; 0xf6a
   193a6:	9206      	str	r2, [sp, #24]
   193a8:	4a90      	ldr	r2, [pc, #576]	; (195ec <isr+0x18a4>)
			random_delay += 1;
   193aa:	3301      	adds	r3, #1
   193ac:	b29b      	uxth	r3, r3
			ticker_status =
   193ae:	e9cd 5204 	strd	r5, r2, [sp, #16]
   193b2:	e9cd 5502 	strd	r5, r5, [sp, #8]
   193b6:	e9cd 5500 	strd	r5, r5, [sp]
   193ba:	2205      	movs	r2, #5
   193bc:	4629      	mov	r1, r5
   193be:	4628      	mov	r0, r5
			random_delay += 1;
   193c0:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
			ticker_status =
   193c4:	f7f8 fe62 	bl	1208c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   193c8:	f030 0302 	bics.w	r3, r0, #2
   193cc:	d04b      	beq.n	19466 <isr+0x171e>
   193ce:	7ce3      	ldrb	r3, [r4, #19]
   193d0:	2b05      	cmp	r3, #5
   193d2:	d048      	beq.n	19466 <isr+0x171e>
   193d4:	4b80      	ldr	r3, [pc, #512]	; (195d8 <isr+0x1890>)
   193d6:	681b      	ldr	r3, [r3, #0]
   193d8:	0759      	lsls	r1, r3, #29
   193da:	f43f a8a3 	beq.w	18524 <isr+0x7dc>
   193de:	2301      	movs	r3, #1
   193e0:	f04f 0200 	mov.w	r2, #0
   193e4:	f363 0202 	bfi	r2, r3, #0, #3
   193e8:	497c      	ldr	r1, [pc, #496]	; (195dc <isr+0x1894>)
   193ea:	4b7d      	ldr	r3, [pc, #500]	; (195e0 <isr+0x1898>)
   193ec:	4880      	ldr	r0, [pc, #512]	; (195f0 <isr+0x18a8>)
   193ee:	1a5b      	subs	r3, r3, r1
   193f0:	f365 02c5 	bfi	r2, r5, #3, #3
   193f4:	08db      	lsrs	r3, r3, #3
   193f6:	f363 128f 	bfi	r2, r3, #6, #10
   193fa:	497e      	ldr	r1, [pc, #504]	; (195f4 <isr+0x18ac>)
   193fc:	f7ff b890 	b.w	18520 <isr+0x7d8>
	if (_radio.state == STATE_CLOSE) {
   19400:	2b03      	cmp	r3, #3
   19402:	d124      	bne.n	1944e <isr+0x1706>
		radio_tmr_tifs_set(RADIO_TIFS);
   19404:	2096      	movs	r0, #150	; 0x96
   19406:	f005 fb35 	bl	1ea74 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1940a:	2300      	movs	r3, #0
   1940c:	4619      	mov	r1, r3
   1940e:	461a      	mov	r2, r3
   19410:	4618      	mov	r0, r3
   19412:	f005 fa9f 	bl	1e954 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   19416:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   1941a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
   1941e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   19422:	3008      	adds	r0, #8
   19424:	f005 fa0a 	bl	1e83c <radio_pkt_rx_set>
		radio_rssi_measure();
   19428:	f005 faac 	bl	1e984 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   1942c:	f004 fbe6 	bl	1dbfc <ctrl_rl_enabled>
   19430:	b138      	cbz	r0, 19442 <isr+0x16fa>
			u8_t count, *irks = ctrl_irks_get(&count);
   19432:	a812      	add	r0, sp, #72	; 0x48
   19434:	f004 f874 	bl	1d520 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   19438:	4601      	mov	r1, r0
   1943a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   1943e:	f005 fc9f 	bl	1ed80 <radio_ar_configure>
		_radio.state = STATE_RX;
   19442:	2301      	movs	r3, #1
   19444:	7563      	strb	r3, [r4, #21]
		radio_rx_enable();
   19446:	f005 fa13 	bl	1e870 <radio_rx_enable>
   1944a:	f7fe bd04 	b.w	17e56 <isr+0x10e>
		radio_filter_disable();
   1944e:	f005 fad5 	bl	1e9fc <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   19452:	7d63      	ldrb	r3, [r4, #21]
   19454:	2b05      	cmp	r3, #5
   19456:	d106      	bne.n	19466 <isr+0x171e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   19458:	2300      	movs	r3, #0
   1945a:	9300      	str	r3, [sp, #0]
   1945c:	2204      	movs	r2, #4
   1945e:	4619      	mov	r1, r3
   19460:	4618      	mov	r0, r3
   19462:	f7f8 fe5d 	bl	12120 <ticker_stop>
	_radio.role = ROLE_NONE;
   19466:	2500      	movs	r5, #0
   19468:	7525      	strb	r5, [r4, #20]
	_radio.state = STATE_NONE;
   1946a:	7565      	strb	r5, [r4, #21]
	_radio.ticker_id_event = 0;
   1946c:	74a5      	strb	r5, [r4, #18]
	radio_tmr_stop();
   1946e:	f005 fb81 	bl	1eb74 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   19472:	4b61      	ldr	r3, [pc, #388]	; (195f8 <isr+0x18b0>)
   19474:	462a      	mov	r2, r5
   19476:	4629      	mov	r1, r5
   19478:	4628      	mov	r0, r5
   1947a:	f7f7 ffff 	bl	1147c <mayfly_enqueue>
	LL_ASSERT(!retval);
   1947e:	4606      	mov	r6, r0
   19480:	2800      	cmp	r0, #0
   19482:	f000 81d4 	beq.w	1982e <isr+0x1ae6>
   19486:	4b54      	ldr	r3, [pc, #336]	; (195d8 <isr+0x1890>)
   19488:	681b      	ldr	r3, [r3, #0]
   1948a:	075a      	lsls	r2, r3, #29
   1948c:	f43f a84a 	beq.w	18524 <isr+0x7dc>
   19490:	2301      	movs	r3, #1
   19492:	f04f 0200 	mov.w	r2, #0
   19496:	f363 0202 	bfi	r2, r3, #0, #3
   1949a:	4950      	ldr	r1, [pc, #320]	; (195dc <isr+0x1894>)
   1949c:	4b50      	ldr	r3, [pc, #320]	; (195e0 <isr+0x1898>)
   1949e:	4857      	ldr	r0, [pc, #348]	; (195fc <isr+0x18b4>)
   194a0:	1a5b      	subs	r3, r3, r1
   194a2:	f365 02c5 	bfi	r2, r5, #3, #3
   194a6:	08db      	lsrs	r3, r3, #3
   194a8:	f363 128f 	bfi	r2, r3, #6, #10
   194ac:	4954      	ldr	r1, [pc, #336]	; (19600 <isr+0x18b8>)
   194ae:	f7ff b837 	b.w	18520 <isr+0x7d8>
	if (_radio.conn_curr == 0) {
   194b2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   194b6:	2800      	cmp	r0, #0
   194b8:	d0d5      	beq.n	19466 <isr+0x171e>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   194ba:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   194be:	b181      	cbz	r1, 194e2 <isr+0x179a>
   194c0:	7d23      	ldrb	r3, [r4, #20]
   194c2:	2b03      	cmp	r3, #3
   194c4:	d003      	beq.n	194ce <isr+0x1786>
   194c6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   194ca:	07da      	lsls	r2, r3, #31
   194cc:	d509      	bpl.n	194e2 <isr+0x179a>
			terminate_ind_rx_enqueue(_radio.conn_curr,
   194ce:	f7fa fea3 	bl	14218 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   194d2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   194d6:	f7fa fb3b 	bl	13b50 <connection_release>
			_radio.conn_curr = NULL;
   194da:	2300      	movs	r3, #0
   194dc:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   194e0:	e7c1      	b.n	19466 <isr+0x171e>
	latency_event = _radio.conn_curr->latency_event;
   194e2:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
   194e6:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
   194ea:	f10b 0601 	add.w	r6, fp, #1
   194ee:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
   194f0:	2f00      	cmp	r7, #0
   194f2:	f000 80a4 	beq.w	1963e <isr+0x18f6>
		if (_radio.role == ROLE_SLAVE) {
   194f6:	7d23      	ldrb	r3, [r4, #20]
   194f8:	2b03      	cmp	r3, #3
   194fa:	f040 8093 	bne.w	19624 <isr+0x18dc>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   194fe:	f005 fb8b 	bl	1ec18 <radio_tmr_aa_restore>
   19502:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
   19504:	f005 fb8e 	bl	1ec24 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
   19508:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
   1950c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
   19510:	f003 0307 	and.w	r3, r3, #7
   19514:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
   19516:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
   1951a:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
   1951c:	d053      	beq.n	195c6 <isr+0x187e>
		return 40;
   1951e:	2b04      	cmp	r3, #4
   19520:	bf0c      	ite	eq
   19522:	f44f 78bc 	moveq.w	r8, #376	; 0x178
   19526:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   1952a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1952e:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
   19530:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   19532:	930a      	str	r3, [sp, #40]	; 0x28
   19534:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 19604 <isr+0x18bc>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   19538:	a325      	add	r3, pc, #148	; (adr r3, 195d0 <isr+0x1888>)
   1953a:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
   1953e:	d863      	bhi.n	19608 <isr+0x18c0>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   19540:	fba0 010a 	umull	r0, r1, r0, sl
   19544:	f7e6 feb6 	bl	2b4 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   19548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   1954a:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   1954c:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   19550:	a31f      	add	r3, pc, #124	; (adr r3, 195d0 <isr+0x1888>)
   19552:	e9d3 2300 	ldrd	r2, r3, [r3]
   19556:	fba0 010a 	umull	r0, r1, r0, sl
   1955a:	f7e6 feab 	bl	2b4 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
   1955e:	2300      	movs	r3, #0
   19560:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   19562:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   19564:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   19568:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
   1956c:	2b00      	cmp	r3, #0
   1956e:	d053      	beq.n	19618 <isr+0x18d0>
				if (pdu_data_tx->len ||
   19570:	795b      	ldrb	r3, [r3, #5]
   19572:	b913      	cbnz	r3, 1957a <isr+0x1832>
   19574:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
   19578:	b10b      	cbz	r3, 1957e <isr+0x1836>
					_radio.conn_curr->latency_event = 0;
   1957a:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
   1957c:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
   1957e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   19582:	2200      	movs	r2, #0
   19584:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   19586:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1958a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   1958e:	b1c3      	cbz	r3, 195c2 <isr+0x187a>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   19590:	429e      	cmp	r6, r3
   19592:	f080 80db 	bcs.w	1974c <isr+0x1a04>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   19596:	1b9b      	subs	r3, r3, r6
   19598:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
   1959a:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
   1959c:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
   1959e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   195a2:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   195a4:	f240 80d4 	bls.w	19750 <isr+0x1a08>
			else if (_radio.role == ROLE_SLAVE) {
   195a8:	7d23      	ldrb	r3, [r4, #20]
   195aa:	2b03      	cmp	r3, #3
   195ac:	d109      	bne.n	195c2 <isr+0x187a>
				if (latency_event != 0) {
   195ae:	f1bb 0f00 	cmp.w	fp, #0
   195b2:	f040 80cd 	bne.w	19750 <isr+0x1a08>
					force = _radio.conn_curr->slave.force & 0x01;
   195b6:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   195b8:	087b      	lsrs	r3, r7, #1
					if (force) {
   195ba:	f017 0701 	ands.w	r7, r7, #1
   195be:	d15b      	bne.n	19678 <isr+0x1930>
					_radio.conn_curr->slave.force >>= 1;
   195c0:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
   195c2:	2700      	movs	r7, #0
   195c4:	e05b      	b.n	1967e <isr+0x1936>
		return 24;
   195c6:	f04f 0818 	mov.w	r8, #24
   195ca:	e7ae      	b.n	1952a <isr+0x17e2>
   195cc:	f3af 8000 	nop.w
   195d0:	1afd498d 	.word	0x1afd498d
   195d4:	00000007 	.word	0x00000007
   195d8:	2000e218 	.word	0x2000e218
   195dc:	0002ef38 	.word	0x0002ef38
   195e0:	0002ef70 	.word	0x0002ef70
   195e4:	0003293f 	.word	0x0003293f
   195e8:	0003294b 	.word	0x0003294b
   195ec:	00013695 	.word	0x00013695
   195f0:	00032fc3 	.word	0x00032fc3
   195f4:	0003295e 	.word	0x0003295e
   195f8:	2000daa4 	.word	0x2000daa4
   195fc:	000333ea 	.word	0x000333ea
   19600:	00032a2f 	.word	0x00032a2f
   19604:	3b9aca00 	.word	0x3b9aca00
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   19608:	fba9 010a 	umull	r0, r1, r9, sl
   1960c:	f7e6 fe52 	bl	2b4 <__aeabi_uldivmod>
   19610:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   19612:	f108 0030 	add.w	r0, r8, #48	; 0x30
   19616:	e79b      	b.n	19550 <isr+0x1808>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   19618:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   1961c:	07db      	lsls	r3, r3, #31
   1961e:	d5ae      	bpl.n	1957e <isr+0x1836>
				_radio.conn_curr->latency_event =
   19620:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   19622:	e7ab      	b.n	1957c <isr+0x1834>
		} else if (reason_peer) {
   19624:	b149      	cbz	r1, 1963a <isr+0x18f2>
			_radio.conn_curr->master.terminate_ack = 1;
   19626:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   1962a:	f043 0301 	orr.w	r3, r3, #1
   1962e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   19632:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
   19636:	4645      	mov	r5, r8
   19638:	e7a1      	b.n	1957e <isr+0x1836>
	ticks_drift_minus = 0;
   1963a:	4688      	mov	r8, r1
   1963c:	e7fb      	b.n	19636 <isr+0x18ee>
	else if (_radio.conn_curr->connect_expire) {
   1963e:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   19640:	b185      	cbz	r5, 19664 <isr+0x191c>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   19642:	42ae      	cmp	r6, r5
   19644:	d204      	bcs.n	19650 <isr+0x1908>
			_radio.conn_curr->connect_expire -= elapsed_event;
   19646:	1bad      	subs	r5, r5, r6
   19648:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   1964a:	463d      	mov	r5, r7
   1964c:	46a8      	mov	r8, r5
   1964e:	e79a      	b.n	19586 <isr+0x183e>
			terminate_ind_rx_enqueue(_radio.conn_curr,
   19650:	213e      	movs	r1, #62	; 0x3e
   19652:	f7fa fde1 	bl	14218 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   19656:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1965a:	f7fa fa79 	bl	13b50 <connection_release>
			_radio.conn_curr = NULL;
   1965e:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
   19662:	e700      	b.n	19466 <isr+0x171e>
		if (!_radio.conn_curr->supervision_expire) {
   19664:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
   19668:	f1b8 0f00 	cmp.w	r8, #0
   1966c:	d1ee      	bne.n	1964c <isr+0x1904>
			_radio.conn_curr->supervision_expire =
   1966e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   19670:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   19674:	4645      	mov	r5, r8
   19676:	e786      	b.n	19586 <isr+0x183e>
						_radio.conn_curr->slave.force |=
   19678:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1967c:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
   1967e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   19682:	b123      	cbz	r3, 1968e <isr+0x1946>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   19684:	429e      	cmp	r6, r3
   19686:	d265      	bcs.n	19754 <isr+0x1a0c>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   19688:	1b9b      	subs	r3, r3, r6
   1968a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   1968e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   19692:	b123      	cbz	r3, 1969e <isr+0x1956>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   19694:	429e      	cmp	r6, r3
   19696:	d25f      	bcs.n	19758 <isr+0x1a10>
			_radio.conn_curr->apto_expire -= elapsed_event;
   19698:	1b9b      	subs	r3, r3, r6
   1969a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   1969e:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   196a2:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   196a6:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   196aa:	b123      	cbz	r3, 196b6 <isr+0x196e>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   196ac:	429e      	cmp	r6, r3
   196ae:	d278      	bcs.n	197a2 <isr+0x1a5a>
			_radio.conn_curr->appto_expire -= elapsed_event;
   196b0:	1b9e      	subs	r6, r3, r6
   196b2:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   196b6:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   196ba:	428b      	cmp	r3, r1
   196bc:	d006      	beq.n	196cc <isr+0x1984>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   196be:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   196c2:	3b01      	subs	r3, #1
   196c4:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
   196c6:	bf9c      	itt	ls
   196c8:	2300      	movls	r3, #0
   196ca:	8553      	strhls	r3, [r2, #42]	; 0x2a
   196cc:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   196ce:	b90f      	cbnz	r7, 196d4 <isr+0x198c>
   196d0:	459b      	cmp	fp, r3
   196d2:	d078      	beq.n	197c6 <isr+0x1a7e>
		lazy = _radio.conn_curr->latency_event + 1;
   196d4:	3301      	adds	r3, #1
   196d6:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   196d8:	b935      	cbnz	r5, 196e8 <isr+0x19a0>
   196da:	f1b8 0f00 	cmp.w	r8, #0
   196de:	d103      	bne.n	196e8 <isr+0x19a0>
   196e0:	b913      	cbnz	r3, 196e8 <isr+0x19a0>
	    (lazy != 0) || (force != 0)) {
   196e2:	2f00      	cmp	r7, #0
   196e4:	f43f aebf 	beq.w	19466 <isr+0x171e>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   196e8:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
   196ec:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   196ee:	3207      	adds	r2, #7
   196f0:	b2d6      	uxtb	r6, r2
		ticker_status =
   196f2:	4a5f      	ldr	r2, [pc, #380]	; (19870 <isr+0x1b28>)
				      (void *)(u32_t)ticker_id);
   196f4:	9606      	str	r6, [sp, #24]
		ticker_status =
   196f6:	e9cd 7204 	strd	r7, r2, [sp, #16]
   196fa:	2700      	movs	r7, #0
   196fc:	462b      	mov	r3, r5
   196fe:	e9cd 7701 	strd	r7, r7, [sp, #4]
   19702:	f8cd 8000 	str.w	r8, [sp]
   19706:	4632      	mov	r2, r6
   19708:	4639      	mov	r1, r7
   1970a:	4638      	mov	r0, r7
   1970c:	f7f8 fcbe 	bl	1208c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   19710:	f030 0302 	bics.w	r3, r0, #2
   19714:	f43f aea7 	beq.w	19466 <isr+0x171e>
   19718:	7ce3      	ldrb	r3, [r4, #19]
   1971a:	429e      	cmp	r6, r3
   1971c:	f43f aea3 	beq.w	19466 <isr+0x171e>
   19720:	4b54      	ldr	r3, [pc, #336]	; (19874 <isr+0x1b2c>)
   19722:	681b      	ldr	r3, [r3, #0]
   19724:	075c      	lsls	r4, r3, #29
   19726:	f43e aefd 	beq.w	18524 <isr+0x7dc>
   1972a:	2301      	movs	r3, #1
   1972c:	f04f 0200 	mov.w	r2, #0
   19730:	f363 0202 	bfi	r2, r3, #0, #3
   19734:	4950      	ldr	r1, [pc, #320]	; (19878 <isr+0x1b30>)
   19736:	4b51      	ldr	r3, [pc, #324]	; (1987c <isr+0x1b34>)
   19738:	4851      	ldr	r0, [pc, #324]	; (19880 <isr+0x1b38>)
   1973a:	1a5b      	subs	r3, r3, r1
   1973c:	f367 02c5 	bfi	r2, r7, #3, #3
   19740:	08db      	lsrs	r3, r3, #3
   19742:	f363 128f 	bfi	r2, r3, #6, #10
   19746:	494f      	ldr	r1, [pc, #316]	; (19884 <isr+0x1b3c>)
   19748:	f7fe beea 	b.w	18520 <isr+0x7d8>
			terminate_ind_rx_enqueue(_radio.conn_curr,
   1974c:	2108      	movs	r1, #8
   1974e:	e6be      	b.n	194ce <isr+0x1786>
				force = 1;
   19750:	2701      	movs	r7, #1
   19752:	e794      	b.n	1967e <isr+0x1936>
			terminate_ind_rx_enqueue(_radio.conn_curr,
   19754:	2122      	movs	r1, #34	; 0x22
   19756:	e6ba      	b.n	194ce <isr+0x1786>
			_radio.conn_curr->apto_expire = 0;
   19758:	2300      	movs	r3, #0
   1975a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
   1975e:	2002      	movs	r0, #2
   19760:	f7f8 fe50 	bl	12404 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   19764:	b9a0      	cbnz	r0, 19790 <isr+0x1a48>
   19766:	4b43      	ldr	r3, [pc, #268]	; (19874 <isr+0x1b2c>)
   19768:	681b      	ldr	r3, [r3, #0]
   1976a:	075d      	lsls	r5, r3, #29
   1976c:	f43e aeda 	beq.w	18524 <isr+0x7dc>
   19770:	2301      	movs	r3, #1
   19772:	f04f 0200 	mov.w	r2, #0
   19776:	f363 0202 	bfi	r2, r3, #0, #3
   1977a:	493f      	ldr	r1, [pc, #252]	; (19878 <isr+0x1b30>)
   1977c:	4b3f      	ldr	r3, [pc, #252]	; (1987c <isr+0x1b34>)
   1977e:	1a5b      	subs	r3, r3, r1
   19780:	f360 02c5 	bfi	r2, r0, #3, #3
   19784:	08db      	lsrs	r3, r3, #3
   19786:	f363 128f 	bfi	r2, r3, #6, #10
   1978a:	493e      	ldr	r1, [pc, #248]	; (19884 <isr+0x1b3c>)
   1978c:	f7fe bd88 	b.w	182a0 <isr+0x558>
			node_rx->hdr.handle = _radio.conn_curr->handle;
   19790:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   19794:	8c1b      	ldrh	r3, [r3, #32]
   19796:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
   19798:	230a      	movs	r3, #10
   1979a:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
   1979c:	f7f9 fd94 	bl	132c8 <packet_rx_enqueue>
   197a0:	e77d      	b.n	1969e <isr+0x1956>
			_radio.conn_curr->appto_expire = 0;
   197a2:	2000      	movs	r0, #0
   197a4:	f8a2 0048 	strh.w	r0, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   197a8:	f8b2 0044 	ldrh.w	r0, [r2, #68]	; 0x44
   197ac:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   197b0:	2800      	cmp	r0, #0
   197b2:	d180      	bne.n	196b6 <isr+0x196e>
   197b4:	428b      	cmp	r3, r1
   197b6:	d182      	bne.n	196be <isr+0x1976>
				_radio.conn_curr->llcp_type = LLCP_PING;
   197b8:	2307      	movs	r3, #7
   197ba:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   197be:	1e4b      	subs	r3, r1, #1
   197c0:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   197c4:	e777      	b.n	196b6 <isr+0x196e>
	lazy = 0;
   197c6:	463b      	mov	r3, r7
   197c8:	e786      	b.n	196d8 <isr+0x1990>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   197ca:	3b04      	subs	r3, #4
   197cc:	2b01      	cmp	r3, #1
   197ce:	d915      	bls.n	197fc <isr+0x1ab4>
   197d0:	4b28      	ldr	r3, [pc, #160]	; (19874 <isr+0x1b2c>)
   197d2:	681b      	ldr	r3, [r3, #0]
   197d4:	0758      	lsls	r0, r3, #29
   197d6:	f43e aea5 	beq.w	18524 <isr+0x7dc>
   197da:	2301      	movs	r3, #1
   197dc:	f04f 0200 	mov.w	r2, #0
   197e0:	f363 0202 	bfi	r2, r3, #0, #3
   197e4:	4924      	ldr	r1, [pc, #144]	; (19878 <isr+0x1b30>)
   197e6:	4b25      	ldr	r3, [pc, #148]	; (1987c <isr+0x1b34>)
   197e8:	4827      	ldr	r0, [pc, #156]	; (19888 <isr+0x1b40>)
   197ea:	1a5b      	subs	r3, r3, r1
   197ec:	f36f 02c5 	bfc	r2, #3, #3
   197f0:	08db      	lsrs	r3, r3, #3
   197f2:	f363 128f 	bfi	r2, r3, #6, #10
   197f6:	4925      	ldr	r1, [pc, #148]	; (1988c <isr+0x1b44>)
   197f8:	f7fe be92 	b.w	18520 <isr+0x7d8>
		_radio.state = STATE_NONE;
   197fc:	2300      	movs	r3, #0
   197fe:	7563      	strb	r3, [r4, #21]
   19800:	f7fe bb59 	b.w	17eb6 <isr+0x16e>
		LL_ASSERT(0);
   19804:	4b1b      	ldr	r3, [pc, #108]	; (19874 <isr+0x1b2c>)
   19806:	681b      	ldr	r3, [r3, #0]
   19808:	0759      	lsls	r1, r3, #29
   1980a:	f43e ae8b 	beq.w	18524 <isr+0x7dc>
   1980e:	2301      	movs	r3, #1
   19810:	f04f 0200 	mov.w	r2, #0
   19814:	f363 0202 	bfi	r2, r3, #0, #3
   19818:	4917      	ldr	r1, [pc, #92]	; (19878 <isr+0x1b30>)
   1981a:	4b18      	ldr	r3, [pc, #96]	; (1987c <isr+0x1b34>)
   1981c:	1a5b      	subs	r3, r3, r1
   1981e:	f36f 02c5 	bfc	r2, #3, #3
   19822:	08db      	lsrs	r3, r3, #3
   19824:	f363 128f 	bfi	r2, r3, #6, #10
   19828:	4918      	ldr	r1, [pc, #96]	; (1988c <isr+0x1b44>)
   1982a:	f7fe bba0 	b.w	17f6e <isr+0x226>
	clock_control_off(_radio.hf_clock, NULL);
   1982e:	6820      	ldr	r0, [r4, #0]
   19830:	6843      	ldr	r3, [r0, #4]
   19832:	4631      	mov	r1, r6
   19834:	685b      	ldr	r3, [r3, #4]
   19836:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   19838:	2201      	movs	r2, #1
   1983a:	4611      	mov	r1, r2
   1983c:	4630      	mov	r0, r6
   1983e:	f7f7 fdf5 	bl	1142c <mayfly_enable>
   19842:	f7fe bb38 	b.w	17eb6 <isr+0x16e>
		LL_ASSERT(0);
   19846:	4b0b      	ldr	r3, [pc, #44]	; (19874 <isr+0x1b2c>)
   19848:	681b      	ldr	r3, [r3, #0]
   1984a:	075b      	lsls	r3, r3, #29
   1984c:	f43e ae6a 	beq.w	18524 <isr+0x7dc>
   19850:	2301      	movs	r3, #1
   19852:	f04f 0200 	mov.w	r2, #0
   19856:	f363 0202 	bfi	r2, r3, #0, #3
   1985a:	4907      	ldr	r1, [pc, #28]	; (19878 <isr+0x1b30>)
   1985c:	4b07      	ldr	r3, [pc, #28]	; (1987c <isr+0x1b34>)
   1985e:	1a5b      	subs	r3, r3, r1
   19860:	f36f 02c5 	bfc	r2, #3, #3
   19864:	08db      	lsrs	r3, r3, #3
   19866:	f363 128f 	bfi	r2, r3, #6, #10
   1986a:	4909      	ldr	r1, [pc, #36]	; (19890 <isr+0x1b48>)
   1986c:	f7fe bb7f 	b.w	17f6e <isr+0x226>
   19870:	000136f1 	.word	0x000136f1
   19874:	2000e218 	.word	0x2000e218
   19878:	0002ef38 	.word	0x0002ef38
   1987c:	0002ef70 	.word	0x0002ef70
   19880:	00033025 	.word	0x00033025
   19884:	0003296c 	.word	0x0003296c
   19888:	0003308f 	.word	0x0003308f
   1988c:	0003297b 	.word	0x0003297b
   19890:	00032991 	.word	0x00032991

00019894 <radio_init>:
{
   19894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   19898:	4c3e      	ldr	r4, [pc, #248]	; (19994 <radio_init+0x100>)
{
   1989a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1989c:	f89d c018 	ldrb.w	ip, [sp, #24]
   198a0:	f89d 801c 	ldrb.w	r8, [sp, #28]
   198a4:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
	_radio.hf_clock = hf_clock;
   198a8:	6020      	str	r0, [r4, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   198aa:	f44f 70aa 	mov.w	r0, #340	; 0x154
{
   198ae:	f8bd e020 	ldrh.w	lr, [sp, #32]
	_radio.sca = sca;
   198b2:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
	_radio.conn_pool = mem_radio;
   198b6:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   198ba:	fb00 7003 	mla	r0, r0, r3, r7
	mem_radio_end = mem_radio + mem_size;
   198be:	197e      	adds	r6, r7, r5
	rx_count_max += 3;
   198c0:	f10c 0103 	add.w	r1, ip, #3
	tx_count_max += 1;
   198c4:	f108 0701 	add.w	r7, r8, #1
	_radio.packet_rx_count = (rx_count_max + 1);
   198c8:	f10c 0c04 	add.w	ip, ip, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   198cc:	f108 0802 	add.w	r8, r8, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   198d0:	fa5f fc8c 	uxtb.w	ip, ip
	_radio.packet_tx_count = (tx_count_max + 1);
   198d4:	fa5f f888 	uxtb.w	r8, r8
	_radio.entropy = entropy;
   198d8:	6062      	str	r2, [r4, #4]
	_radio.packet_tx_count = (tx_count_max + 1);
   198da:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
	    (offsetof(struct pdu_data, lldata) +
   198de:	f10e 0203 	add.w	r2, lr, #3
	_radio.packet_rx = (void *)mem_radio;
   198e2:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	rx_count_max += 3;
   198e6:	b2c9      	uxtb	r1, r1
	mem_radio +=
   198e8:	eb00 008c 	add.w	r0, r0, ip, lsl #2
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   198ec:	ea4f 08c8 	mov.w	r8, r8, lsl #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   198f0:	2a2a      	cmp	r2, #42	; 0x2a
	_radio.link_rx_data_quota = rx_count_max;
   198f2:	f884 1154 	strb.w	r1, [r4, #340]	; 0x154
	_radio.pkt_tx = (void *)mem_radio;
   198f6:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
   198fa:	b289      	uxth	r1, r1
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   198fc:	4440      	add	r0, r8
   198fe:	4622      	mov	r2, r4
	_radio.packet_data_octets_max = packet_data_octets_max;
   19900:	f8a4 e134 	strh.w	lr, [r4, #308]	; 0x134
	_radio.pkt_release = (void *)mem_radio;
   19904:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
		_radio.packet_rx_data_pool_size =
   19908:	bf88      	it	hi
   1990a:	f10e 0e0e 	addhi.w	lr, lr, #14
	_radio.connection_count = connection_count_max;
   1990e:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
   19912:	f884 c140 	strb.w	ip, [r4, #320]	; 0x140
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   19916:	bf99      	ittee	ls
   19918:	eb01 0441 	addls.w	r4, r1, r1, lsl #1
   1991c:	eb01 0184 	addls.w	r1, r1, r4, lsl #2
		_radio.packet_rx_data_pool_size =
   19920:	f02e 0e03 	bichi.w	lr, lr, #3
   19924:	fb1e f101 	smulbbhi	r1, lr, r1
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   19928:	bf98      	it	ls
   1992a:	0089      	lslls	r1, r1, #2
		_radio.packet_rx_data_pool_size =
   1992c:	f8a2 1136 	strh.w	r1, [r2, #310]	; 0x136
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   19930:	f8b2 4136 	ldrh.w	r4, [r2, #310]	; 0x136
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   19934:	4440      	add	r0, r8
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   19936:	2134      	movs	r1, #52	; 0x34
   19938:	f8a2 1138 	strh.w	r1, [r2, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
   1993c:	f8c2 012c 	str.w	r0, [r2, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   19940:	fbb4 f1f1 	udiv	r1, r4, r1
	mem_radio += _radio.packet_rx_data_pool_size;
   19944:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   19946:	eb0c 0403 	add.w	r4, ip, r3
	_radio.link_rx_pool = mem_radio;
   1994a:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   1994e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   19952:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   19956:	f8c2 0158 	str.w	r0, [r2, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1995a:	340a      	adds	r4, #10
   1995c:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   19960:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   19962:	b2a4      	uxth	r4, r4
	tx_count_max += 1;
   19964:	b2ff      	uxtb	r7, r7
	_radio.packet_tx_data_size =
   19966:	f8a2 4168 	strh.w	r4, [r2, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   1996a:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   1996e:	1ba4      	subs	r4, r4, r6
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   19970:	f882 113a 	strb.w	r1, [r2, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
   19974:	f8c2 0160 	str.w	r0, [r2, #352]	; 0x160
	if (retcode) {
   19978:	d003      	beq.n	19982 <radio_init+0xee>
		return (retcode + mem_size);
   1997a:	442c      	add	r4, r5
}
   1997c:	4620      	mov	r0, r4
   1997e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   19982:	2301      	movs	r3, #1
   19984:	f882 3182 	strb.w	r3, [r2, #386]	; 0x182
	common_init();
   19988:	f7f8 fe02 	bl	12590 <common_init>
	radio_setup();
   1998c:	f004 fea6 	bl	1e6dc <radio_setup>
	return retcode;
   19990:	e7f4      	b.n	1997c <radio_init+0xe8>
   19992:	bf00      	nop
   19994:	2000126c 	.word	0x2000126c

00019998 <ll_reset>:
{
   19998:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   1999a:	2103      	movs	r1, #3
   1999c:	2005      	movs	r0, #5
   1999e:	f7f8 fee9 	bl	12774 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   199a2:	2104      	movs	r1, #4
   199a4:	2006      	movs	r0, #6
   199a6:	f7f8 fee5 	bl	12774 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   199aa:	4c21      	ldr	r4, [pc, #132]	; (19a30 <ll_reset+0x98>)
   199ac:	2500      	movs	r5, #0
   199ae:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   199b2:	b2ab      	uxth	r3, r5
   199b4:	429a      	cmp	r2, r3
   199b6:	f105 0501 	add.w	r5, r5, #1
   199ba:	d832      	bhi.n	19a22 <ll_reset+0x8a>
	_radio.advertiser.is_enabled = 0;
   199bc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   199c0:	f36f 13c7 	bfc	r3, #7, #1
   199c4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   199c8:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
   199cc:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   199ce:	f360 0300 	bfi	r3, r0, #0, #1
   199d2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   199d6:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   199d8:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   199dc:	fbb3 f3f2 	udiv	r3, r3, r2
   199e0:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   199e4:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
   199e8:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   199ec:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   199ee:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
   199f2:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   199f6:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
   199fa:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
   199fe:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
   19a02:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   19a06:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
   19a0a:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
   19a0e:	f8a4 0176 	strh.w	r0, [r4, #374]	; 0x176
	_radio.fc_ack = _radio.fc_req;
   19a12:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
   19a16:	f004 fc8f 	bl	1e338 <ll_filter_reset>
}
   19a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   19a1e:	f7f8 bdb7 	b.w	12590 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   19a22:	1da8      	adds	r0, r5, #6
   19a24:	21ff      	movs	r1, #255	; 0xff
   19a26:	b2c0      	uxtb	r0, r0
   19a28:	f7f8 fea4 	bl	12774 <role_disable>
   19a2c:	e7bf      	b.n	199ae <ll_reset+0x16>
   19a2e:	bf00      	nop
   19a30:	2000126c 	.word	0x2000126c

00019a34 <radio_adv_data_get>:
}
   19a34:	4800      	ldr	r0, [pc, #0]	; (19a38 <radio_adv_data_get+0x4>)
   19a36:	4770      	bx	lr
   19a38:	20001297 	.word	0x20001297

00019a3c <radio_scan_data_get>:
}
   19a3c:	4800      	ldr	r0, [pc, #0]	; (19a40 <radio_scan_data_get+0x4>)
   19a3e:	4770      	bx	lr
   19a40:	200012e7 	.word	0x200012e7

00019a44 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   19a44:	4b02      	ldr	r3, [pc, #8]	; (19a50 <ll_adv_is_enabled+0xc>)
   19a46:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   19a4a:	09c0      	lsrs	r0, r0, #7
   19a4c:	4770      	bx	lr
   19a4e:	bf00      	nop
   19a50:	2000126c 	.word	0x2000126c

00019a54 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   19a54:	4b04      	ldr	r3, [pc, #16]	; (19a68 <radio_adv_filter_pol_get+0x14>)
   19a56:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   19a5a:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   19a5c:	bfba      	itte	lt
   19a5e:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
   19a62:	0980      	lsrlt	r0, r0, #6
	return 0;
   19a64:	2000      	movge	r0, #0
}
   19a66:	4770      	bx	lr
   19a68:	2000126c 	.word	0x2000126c

00019a6c <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   19a6c:	4a09      	ldr	r2, [pc, #36]	; (19a94 <ll_scan_is_enabled+0x28>)
   19a6e:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
   19a72:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
   19a76:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   19a7a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   19a7e:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   19a80:	f003 0301 	and.w	r3, r3, #1
   19a84:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   19a88:	bf14      	ite	ne
   19a8a:	2004      	movne	r0, #4
   19a8c:	2000      	moveq	r0, #0
}
   19a8e:	4318      	orrs	r0, r3
   19a90:	4770      	bx	lr
   19a92:	bf00      	nop
   19a94:	2000126c 	.word	0x2000126c

00019a98 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   19a98:	4b05      	ldr	r3, [pc, #20]	; (19ab0 <radio_scan_filter_pol_get+0x18>)
   19a9a:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   19a9e:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   19aa2:	bf1c      	itt	ne
   19aa4:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
   19aa8:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   19aac:	4770      	bx	lr
   19aae:	bf00      	nop
   19ab0:	2000126c 	.word	0x2000126c
   19ab4:	00000000 	.word	0x00000000

00019ab8 <radio_connect_enable>:
{
   19ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   19abc:	f8df 83a8 	ldr.w	r8, [pc, #936]	; 19e68 <radio_connect_enable+0x3b0>
{
   19ac0:	b085      	sub	sp, #20
	if (_radio.scanner.conn) {
   19ac2:	f8d8 5100 	ldr.w	r5, [r8, #256]	; 0x100
{
   19ac6:	9301      	str	r3, [sp, #4]
   19ac8:	4683      	mov	fp, r0
   19aca:	468a      	mov	sl, r1
   19acc:	4691      	mov	r9, r2
   19ace:	4646      	mov	r6, r8
	if (_radio.scanner.conn) {
   19ad0:	2d00      	cmp	r5, #0
   19ad2:	f040 81ae 	bne.w	19e32 <radio_connect_enable+0x37a>
	link = mem_acquire(&_radio.link_rx_free);
   19ad6:	f508 70a4 	add.w	r0, r8, #328	; 0x148
   19ada:	f7f7 fc07 	bl	112ec <mem_acquire>
	if (!link) {
   19ade:	4607      	mov	r7, r0
   19ae0:	b150      	cbz	r0, 19af8 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   19ae2:	f508 7086 	add.w	r0, r8, #268	; 0x10c
   19ae6:	f7f7 fc01 	bl	112ec <mem_acquire>
	if (!conn) {
   19aea:	4604      	mov	r4, r0
   19aec:	b930      	cbnz	r0, 19afc <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   19aee:	f508 71a4 	add.w	r1, r8, #328	; 0x148
   19af2:	4638      	mov	r0, r7
   19af4:	f7f7 fc13 	bl	1131e <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   19af8:	2007      	movs	r0, #7
   19afa:	e185      	b.n	19e08 <radio_connect_enable+0x350>
	_radio.scanner.adv_addr_type = adv_addr_type;
   19afc:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
   19b00:	f36b 1386 	bfi	r3, fp, #6, #1
   19b04:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   19b08:	2206      	movs	r2, #6
   19b0a:	4651      	mov	r1, sl
   19b0c:	f108 00ea 	add.w	r0, r8, #234	; 0xea
   19b10:	f7ed f8ba 	bl	6c88 <memcpy>
	_radio.scanner.conn_latency = latency;
   19b14:	9b01      	ldr	r3, [sp, #4]
   19b16:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   19b1a:	4629      	mov	r1, r5
	_radio.scanner.conn_timeout = timeout;
   19b1c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	_radio.scanner.conn_interval = interval;
   19b20:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   19b24:	4628      	mov	r0, r5
	_radio.scanner.conn_timeout = timeout;
   19b26:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   19b2a:	f004 fe93 	bl	1e854 <radio_tx_ready_delay_get>
   19b2e:	49c4      	ldr	r1, [pc, #784]	; (19e40 <radio_connect_enable+0x388>)
   19b30:	f200 4052 	addw	r0, r0, #1106	; 0x452
   19b34:	a3c0      	add	r3, pc, #768	; (adr r3, 19e38 <radio_connect_enable+0x380>)
   19b36:	e9d3 2300 	ldrd	r2, r3, [r3]
   19b3a:	fba0 0101 	umull	r0, r1, r0, r1
   19b3e:	f7e6 fbb9 	bl	2b4 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   19b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   19b46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   19b4a:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
   19b4e:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   19b50:	f8df 8318 	ldr.w	r8, [pc, #792]	; 19e6c <radio_connect_enable+0x3b4>
	conn->llcp_features = RADIO_BLE_FEAT;
   19b54:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   19b58:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   19b5c:	f04f 0903 	mov.w	r9, #3
	consecutive_cnt = 1;
   19b60:	2501      	movs	r5, #1
	bt_rand(&access_addr, sizeof(u32_t));
   19b62:	2104      	movs	r1, #4
   19b64:	a803      	add	r0, sp, #12
   19b66:	f003 f92f 	bl	1cdc8 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   19b6a:	9903      	ldr	r1, [sp, #12]
   19b6c:	f04f 0a00 	mov.w	sl, #0
   19b70:	0fca      	lsrs	r2, r1, #31
	bit_idx = 31;
   19b72:	231f      	movs	r3, #31
	transitions = 0;
   19b74:	4650      	mov	r0, sl
	consecutive_cnt = 1;
   19b76:	f04f 0b01 	mov.w	fp, #1
	while (bit_idx--) {
   19b7a:	3b01      	subs	r3, #1
   19b7c:	b2db      	uxtb	r3, r3
   19b7e:	2bff      	cmp	r3, #255	; 0xff
   19b80:	d124      	bne.n	19bcc <radio_connect_enable+0x114>
   19b82:	f1ba 0f00 	cmp.w	sl, #0
   19b86:	d064      	beq.n	19c52 <radio_connect_enable+0x19a>
   19b88:	9103      	str	r1, [sp, #12]
   19b8a:	e062      	b.n	19c52 <radio_connect_enable+0x19a>
   19b8c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
	LL_ASSERT(retry);
   19b90:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
   19b94:	d1e5      	bne.n	19b62 <radio_connect_enable+0xaa>
   19b96:	4bab      	ldr	r3, [pc, #684]	; (19e44 <radio_connect_enable+0x38c>)
   19b98:	681b      	ldr	r3, [r3, #0]
   19b9a:	075b      	lsls	r3, r3, #29
   19b9c:	d010      	beq.n	19bc0 <radio_connect_enable+0x108>
   19b9e:	2301      	movs	r3, #1
   19ba0:	f04f 0200 	mov.w	r2, #0
   19ba4:	f363 0202 	bfi	r2, r3, #0, #3
   19ba8:	49a7      	ldr	r1, [pc, #668]	; (19e48 <radio_connect_enable+0x390>)
   19baa:	4ba8      	ldr	r3, [pc, #672]	; (19e4c <radio_connect_enable+0x394>)
   19bac:	48a8      	ldr	r0, [pc, #672]	; (19e50 <radio_connect_enable+0x398>)
   19bae:	1a5b      	subs	r3, r3, r1
   19bb0:	f369 02c5 	bfi	r2, r9, #3, #3
   19bb4:	08db      	lsrs	r3, r3, #3
   19bb6:	f363 128f 	bfi	r2, r3, #6, #10
   19bba:	49a6      	ldr	r1, [pc, #664]	; (19e54 <radio_connect_enable+0x39c>)
   19bbc:	f7e8 fa96 	bl	20ec <log_1>
   19bc0:	4040      	eors	r0, r0
   19bc2:	f380 8811 	msr	BASEPRI, r0
   19bc6:	f04f 0004 	mov.w	r0, #4
   19bca:	df02      	svc	2
		bit = (access_addr >> bit_idx) & 0x01;
   19bcc:	fa21 fe03 	lsr.w	lr, r1, r3
   19bd0:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   19bd4:	4596      	cmp	lr, r2
   19bd6:	d124      	bne.n	19c22 <radio_connect_enable+0x16a>
			consecutive_cnt++;
   19bd8:	f10b 0c01 	add.w	ip, fp, #1
   19bdc:	fa5f fc8c 	uxtb.w	ip, ip
		if ((consecutive_cnt > 6) ||
   19be0:	f1bc 0f06 	cmp.w	ip, #6
   19be4:	f200 8113 	bhi.w	19e0e <radio_connect_enable+0x356>
   19be8:	f000 811e 	beq.w	19e28 <radio_connect_enable+0x370>
		    ((consecutive_cnt < 6) &&
   19bec:	2b1c      	cmp	r3, #28
		     (((bit_idx < 29) && (transitions < 1)) ||
   19bee:	4602      	mov	r2, r0
		    ((consecutive_cnt < 6) &&
   19bf0:	d81d      	bhi.n	19c2e <radio_connect_enable+0x176>
		     (((bit_idx < 29) && (transitions < 1)) ||
   19bf2:	b118      	cbz	r0, 19bfc <radio_connect_enable+0x144>
   19bf4:	2b1c      	cmp	r3, #28
   19bf6:	d01a      	beq.n	19c2e <radio_connect_enable+0x176>
		      ((bit_idx < 28) && (transitions < 2))))) {
   19bf8:	2a01      	cmp	r2, #1
   19bfa:	d118      	bne.n	19c2e <radio_connect_enable+0x176>
   19bfc:	fa05 fc03 	lsl.w	ip, r5, r3
			if (consecutive_bit) {
   19c00:	f1be 0f00 	cmp.w	lr, #0
   19c04:	f000 8105 	beq.w	19e12 <radio_connect_enable+0x35a>
				access_addr &= ~BIT(bit_idx);
   19c08:	ea21 010c 	bic.w	r1, r1, ip
				consecutive_bit = 0;
   19c0c:	f04f 0e00 	mov.w	lr, #0
			if (transitions != transitions_prev) {
   19c10:	4290      	cmp	r0, r2
   19c12:	f040 8106 	bne.w	19e22 <radio_connect_enable+0x36a>
				transitions++;
   19c16:	3201      	adds	r2, #1
   19c18:	f04f 0a01 	mov.w	sl, #1
   19c1c:	b2d2      	uxtb	r2, r2
				consecutive_cnt = 1;
   19c1e:	46d4      	mov	ip, sl
   19c20:	e005      	b.n	19c2e <radio_connect_enable+0x176>
			transitions++;
   19c22:	1c42      	adds	r2, r0, #1
		    ((consecutive_cnt < 6) &&
   19c24:	2b1c      	cmp	r3, #28
			transitions++;
   19c26:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   19c28:	f04f 0c01 	mov.w	ip, #1
		    ((consecutive_cnt < 6) &&
   19c2c:	d9e2      	bls.n	19bf4 <radio_connect_enable+0x13c>
		if ((transitions > 24) ||
   19c2e:	2a19      	cmp	r2, #25
   19c30:	f040 80fd 	bne.w	19e2e <radio_connect_enable+0x376>
   19c34:	f1ba 0f00 	cmp.w	sl, #0
   19c38:	d000      	beq.n	19c3c <radio_connect_enable+0x184>
   19c3a:	9103      	str	r1, [sp, #12]
   19c3c:	3301      	adds	r3, #1
   19c3e:	fa05 f303 	lsl.w	r3, r5, r3
   19c42:	9a03      	ldr	r2, [sp, #12]
			if (consecutive_bit) {
   19c44:	f1be 0f00 	cmp.w	lr, #0
   19c48:	f000 80e8 	beq.w	19e1c <radio_connect_enable+0x364>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   19c4c:	425b      	negs	r3, r3
   19c4e:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   19c50:	9303      	str	r3, [sp, #12]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   19c52:	9b03      	ldr	r3, [sp, #12]
   19c54:	a804      	add	r0, sp, #16
   19c56:	ea83 0308 	eor.w	r3, r3, r8
   19c5a:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   19c5e:	2104      	movs	r1, #4
   19c60:	f7f7 fcec 	bl	1163c <util_ones_count_get>
   19c64:	2801      	cmp	r0, #1
   19c66:	d991      	bls.n	19b8c <radio_connect_enable+0xd4>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   19c68:	9b03      	ldr	r3, [sp, #12]
   19c6a:	b29a      	uxth	r2, r3
   19c6c:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   19c70:	d103      	bne.n	19c7a <radio_connect_enable+0x1c2>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   19c72:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   19c74:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   19c78:	d088      	beq.n	19b8c <radio_connect_enable+0xd4>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   19c7a:	2204      	movs	r2, #4
   19c7c:	a903      	add	r1, sp, #12
   19c7e:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   19c82:	9303      	str	r3, [sp, #12]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   19c84:	f7ed f800 	bl	6c88 <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   19c88:	2103      	movs	r1, #3
   19c8a:	f104 0014 	add.w	r0, r4, #20
   19c8e:	f003 f89b 	bl	1cdc8 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   19c92:	2205      	movs	r2, #5
   19c94:	4970      	ldr	r1, [pc, #448]	; (19e58 <radio_connect_enable+0x3a0>)
   19c96:	f104 0017 	add.w	r0, r4, #23
   19c9a:	f7ec fff5 	bl	6c88 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   19c9e:	f896 211f 	ldrb.w	r2, [r6, #287]	; 0x11f
   19ca2:	7f63      	ldrb	r3, [r4, #29]
	conn->phy_pref_tx = _radio.default_phy_tx;
   19ca4:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->data_chan_count = _radio.data_chan_count;
   19ca8:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   19cac:	f36f 1386 	bfc	r3, #6, #1
   19cb0:	7763      	strb	r3, [r4, #29]
	conn->event_counter = 0;
   19cb2:	2500      	movs	r5, #0
	conn->conn_interval = _radio.scanner.conn_interval;
   19cb4:	f8b6 20f4 	ldrh.w	r2, [r6, #244]	; 0xf4
	conn->latency_prepare = 0;
   19cb8:	62a5      	str	r5, [r4, #40]	; 0x28
	conn->default_tx_octets = _radio.default_tx_octets;
   19cba:	f8b6 3122 	ldrh.w	r3, [r6, #290]	; 0x122
	conn->latency = _radio.scanner.conn_latency;
   19cbe:	f8b6 00f6 	ldrh.w	r0, [r6, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
   19cc2:	85a3      	strh	r3, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   19cc4:	231b      	movs	r3, #27
   19cc6:	85e3      	strh	r3, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   19cc8:	8623      	strh	r3, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   19cca:	f8b6 3124 	ldrh.w	r3, [r6, #292]	; 0x124
   19cce:	8663      	strh	r3, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   19cd0:	4b62      	ldr	r3, [pc, #392]	; (19e5c <radio_connect_enable+0x3a4>)
   19cd2:	6363      	str	r3, [r4, #52]	; 0x34
	conn->phy_pref_tx = _radio.default_phy_tx;
   19cd4:	f8b6 3126 	ldrh.w	r3, [r6, #294]	; 0x126
	conn->conn_interval = _radio.scanner.conn_interval;
   19cd8:	84a2      	strh	r2, [r4, #36]	; 0x24
	conn->phy_pref_tx = _radio.default_phy_tx;
   19cda:	f363 0102 	bfi	r1, r3, #0, #3
	conn->phy_tx = BIT(0);
   19cde:	2301      	movs	r3, #1
   19ce0:	f363 01c5 	bfi	r1, r3, #3, #3
	conn->phy_flags = 0;
   19ce4:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   19ce8:	f365 11c7 	bfi	r1, r5, #7, #1
   19cec:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   19cf0:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->latency = _radio.scanner.conn_latency;
   19cf4:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->phy_tx_time = BIT(0);
   19cf6:	f363 0102 	bfi	r1, r3, #0, #3
   19cfa:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   19cfe:	f8b6 e128 	ldrh.w	lr, [r6, #296]	; 0x128
	conn->event_counter = 0;
   19d02:	8465      	strh	r5, [r4, #34]	; 0x22
	conn->phy_pref_rx = _radio.default_phy_rx;
   19d04:	f36e 01c5 	bfi	r1, lr, #3, #3
   19d08:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   19d0c:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
   19d10:	f363 0102 	bfi	r1, r3, #0, #3
	conn->role = 0;
   19d14:	7f63      	ldrb	r3, [r4, #29]
	conn->phy_rx = BIT(0);
   19d16:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->common.fex_valid = 0;
   19d1a:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->role = 0;
   19d1e:	f365 13c7 	bfi	r3, r5, #7, #1
   19d22:	7763      	strb	r3, [r4, #29]
	conn->master.terminate_ack = 0;
   19d24:	f001 01df 	and.w	r1, r1, #223	; 0xdf
	conn_interval_us =
   19d28:	f240 43e2 	movw	r3, #1250	; 0x4e2
   19d2c:	435a      	muls	r2, r3
	conn->data_chan_hop = 6;
   19d2e:	f04f 0c06 	mov.w	ip, #6
	conn->master.terminate_ack = 0;
   19d32:	f365 0100 	bfi	r1, r5, #0, #1
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   19d36:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
	conn->data_chan_hop = 6;
   19d3a:	f8a4 c01e 	strh.w	ip, [r4, #30]
	conn->connect_expire = 6;
   19d3e:	f8a4 c03c 	strh.w	ip, [r4, #60]	; 0x3c
	conn->master.terminate_ack = 0;
   19d42:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   19d46:	f242 7c10 	movw	ip, #10000	; 0x2710
   19d4a:	1e51      	subs	r1, r2, #1
   19d4c:	fb0c 1303 	mla	r3, ip, r3, r1
   19d50:	fbb3 f3f2 	udiv	r3, r3, r2
   19d54:	87e3      	strh	r3, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   19d56:	4b42      	ldr	r3, [pc, #264]	; (19e60 <radio_connect_enable+0x3a8>)
	conn->supervision_expire = 0;
   19d58:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   19d5c:	4413      	add	r3, r2
   19d5e:	fbb3 f3f2 	udiv	r3, r3, r2
   19d62:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   19d66:	4b3f      	ldr	r3, [pc, #252]	; (19e64 <radio_connect_enable+0x3ac>)
	conn->procedure_expire = 0;
   19d68:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   19d6c:	1d81      	adds	r1, r0, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   19d6e:	4413      	add	r3, r2
   19d70:	fbb3 f3f2 	udiv	r3, r3, r2
   19d74:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   19d76:	428a      	cmp	r2, r1
   19d78:	4613      	mov	r3, r2
   19d7a:	bfc4      	itt	gt
   19d7c:	f5c0 437f 	rsbgt	r3, r0, #65280	; 0xff00
   19d80:	33fa      	addgt	r3, #250	; 0xfa
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   19d82:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   19d86:	bfc8      	it	gt
   19d88:	18d2      	addgt	r2, r2, r3
	conn->llcp_version.tx = 0;
   19d8a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   19d8e:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->apto_expire = 0;
   19d92:	f04f 0500 	mov.w	r5, #0
	conn->llcp_version.rx = 0;
   19d96:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   19d9a:	f365 0341 	bfi	r3, r5, #1, #1
   19d9e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   19da2:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   19da6:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   19daa:	f365 1304 	bfi	r3, r5, #4, #1
   19dae:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->llcp_length.pause_tx = 0;
   19db2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
	conn->appto_expire = 0;
   19db6:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   19dba:	bfc8      	it	gt
   19dbc:	b292      	uxthgt	r2, r2
	conn->llcp_length.pause_tx = 0;
   19dbe:	f365 0382 	bfi	r3, r5, #2, #1
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   19dc2:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->llcp_req = 0;
   19dc6:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
	conn->llcp_terminate.req = 0;
   19dca:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
	conn->llcp_terminate.reason_peer = 0;
   19dce:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
	conn->llcp_conn_param.req = 0;
   19dd2:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
	conn->llcp_length.req = 0;
   19dd6:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
	conn->llcp_length.pause_tx = 0;
   19dda:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
	conn->llcp_phy.req = 0;
   19dde:	f8a4 50f4 	strh.w	r5, [r4, #244]	; 0xf4
	conn->sn = 0;
   19de2:	f884 50f8 	strb.w	r5, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   19de6:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
   19dea:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl = NULL;
   19dee:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
	conn->pkt_tx_ctrl_last = NULL;
   19df2:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
	conn->pkt_tx_data = NULL;
   19df6:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
	conn->pkt_tx_last = NULL;
   19dfa:	f8a4 5150 	strh.w	r5, [r4, #336]	; 0x150
	k32src_wait();
   19dfe:	f7fb f811 	bl	14e24 <k32src_wait>
	_radio.scanner.conn = conn;
   19e02:	f8c6 4100 	str.w	r4, [r6, #256]	; 0x100
	return 0;
   19e06:	4628      	mov	r0, r5
}
   19e08:	b005      	add	sp, #20
   19e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((consecutive_cnt > 6) ||
   19e0e:	4602      	mov	r2, r0
   19e10:	e6f4      	b.n	19bfc <radio_connect_enable+0x144>
				access_addr |= BIT(bit_idx);
   19e12:	ea41 010c 	orr.w	r1, r1, ip
				consecutive_bit = 1;
   19e16:	f04f 0e01 	mov.w	lr, #1
   19e1a:	e6f9      	b.n	19c10 <radio_connect_enable+0x158>
				access_addr |= (BIT(bit_idx + 1) - 1);
   19e1c:	3b01      	subs	r3, #1
   19e1e:	4313      	orrs	r3, r2
   19e20:	e716      	b.n	19c50 <radio_connect_enable+0x198>
			if (transitions != transitions_prev) {
   19e22:	46dc      	mov	ip, fp
   19e24:	f04f 0a01 	mov.w	sl, #1
		if ((transitions > 24) ||
   19e28:	4672      	mov	r2, lr
   19e2a:	46e3      	mov	fp, ip
   19e2c:	e6a5      	b.n	19b7a <radio_connect_enable+0xc2>
   19e2e:	4610      	mov	r0, r2
   19e30:	e7fa      	b.n	19e28 <radio_connect_enable+0x370>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19e32:	200c      	movs	r0, #12
   19e34:	e7e8      	b.n	19e08 <radio_connect_enable+0x350>
   19e36:	bf00      	nop
   19e38:	1afd498d 	.word	0x1afd498d
   19e3c:	00000007 	.word	0x00000007
   19e40:	3b9aca00 	.word	0x3b9aca00
   19e44:	2000e218 	.word	0x2000e218
   19e48:	0002ef38 	.word	0x0002ef38
   19e4c:	0002ef70 	.word	0x0002ef70
   19e50:	000334c3 	.word	0x000334c3
   19e54:	00032b27 	.word	0x00032b27
   19e58:	20001386 	.word	0x20001386
   19e5c:	01480148 	.word	0x01480148
   19e60:	026259ff 	.word	0x026259ff
   19e64:	01c9c37f 	.word	0x01c9c37f
   19e68:	2000126c 	.word	0x2000126c
   19e6c:	8e89bed6 	.word	0x8e89bed6

00019e70 <ll_conn_update>:
{
   19e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e74:	460c      	mov	r4, r1
   19e76:	4690      	mov	r8, r2
   19e78:	461d      	mov	r5, r3
   19e7a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   19e7e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
	conn = connection_get(handle);
   19e82:	f7f8 fc61 	bl	12748 <connection_get>
	if (!conn) {
   19e86:	2800      	cmp	r0, #0
   19e88:	d068      	beq.n	19f5c <ll_conn_update+0xec>
	if (!cmd) {
   19e8a:	bb94      	cbnz	r4, 19ef2 <ll_conn_update+0x82>
		if (!conn->llcp_conn_param.disabled &&
   19e8c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   19e90:	06d9      	lsls	r1, r3, #27
   19e92:	d407      	bmi.n	19ea4 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   19e94:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   19e98:	069a      	lsls	r2, r3, #26
   19e9a:	d529      	bpl.n	19ef0 <ll_conn_update+0x80>
		     (conn->llcp_features &
   19e9c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   19ea0:	079b      	lsls	r3, r3, #30
   19ea2:	d425      	bmi.n	19ef0 <ll_conn_update+0x80>
		} else if (conn->role) {
   19ea4:	f990 301d 	ldrsb.w	r3, [r0, #29]
   19ea8:	2b00      	cmp	r3, #0
   19eaa:	db55      	blt.n	19f58 <ll_conn_update+0xe8>
		if (conn->llcp_req != conn->llcp_ack) {
   19eac:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   19eb0:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   19eb4:	429a      	cmp	r2, r3
   19eb6:	d151      	bne.n	19f5c <ll_conn_update+0xec>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   19eb8:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   19ebc:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   19ec0:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   19ec2:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   19ec4:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   19ec8:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   19ecc:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   19ece:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   19ed2:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   19ed6:	f8a0 707c 	strh.w	r7, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   19eda:	f8a0 607e 	strh.w	r6, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   19ede:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   19ee2:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   19ee6:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   19eea:	2000      	movs	r0, #0
}
   19eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   19ef0:	2401      	movs	r4, #1
		cmd--;
   19ef2:	3c01      	subs	r4, #1
		if (cmd) {
   19ef4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   19ef8:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
   19efc:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   19f00:	d011      	beq.n	19f26 <ll_conn_update+0xb6>
			if ((conn->llcp_conn_param.req ==
   19f02:	4299      	cmp	r1, r3
   19f04:	d02a      	beq.n	19f5c <ll_conn_update+0xec>
			    (conn->llcp_conn_param.state !=
   19f06:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   19f0a:	f003 0207 	and.w	r2, r3, #7
   19f0e:	2a03      	cmp	r2, #3
   19f10:	d124      	bne.n	19f5c <ll_conn_update+0xec>
			conn->llcp_conn_param.state = cmd;
   19f12:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   19f16:	b2db      	uxtb	r3, r3
   19f18:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   19f1c:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   19f20:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   19f24:	e7e1      	b.n	19eea <ll_conn_update+0x7a>
			if (conn->llcp_conn_param.req !=
   19f26:	4299      	cmp	r1, r3
   19f28:	d118      	bne.n	19f5c <ll_conn_update+0xec>
			conn->llcp_conn_param.state = cmd;
   19f2a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   19f2e:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   19f32:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   19f36:	b2db      	uxtb	r3, r3
   19f38:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   19f3c:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval_min = interval;
   19f3e:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.interval_max = interval;
   19f42:	f8a0 50c6 	strh.w	r5, [r0, #198]	; 0xc6
			conn->llcp_conn_param.latency = latency;
   19f46:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.timeout = timeout;
   19f4a:	f8a0 60ca 	strh.w	r6, [r0, #202]	; 0xca
			conn->llcp_conn_param.cmd = 1;
   19f4e:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   19f52:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   19f56:	e7c8      	b.n	19eea <ll_conn_update+0x7a>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   19f58:	201a      	movs	r0, #26
   19f5a:	e7c7      	b.n	19eec <ll_conn_update+0x7c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19f5c:	200c      	movs	r0, #12
   19f5e:	e7c5      	b.n	19eec <ll_conn_update+0x7c>

00019f60 <ll_chm_update>:
{
   19f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   19f64:	4c1e      	ldr	r4, [pc, #120]	; (19fe0 <ll_chm_update+0x80>)
   19f66:	4601      	mov	r1, r0
   19f68:	2205      	movs	r2, #5
{
   19f6a:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   19f6c:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   19f70:	f7ec fe8a 	bl	6c88 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   19f74:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   19f78:	2105      	movs	r1, #5
   19f7a:	f7f7 fb5f 	bl	1163c <util_ones_count_get>
	_radio.data_chan_count =
   19f7e:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   19f82:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   19f86:	3c01      	subs	r4, #1
   19f88:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   19f8a:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   19f8c:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   19f90:	2cff      	cmp	r4, #255	; 0xff
   19f92:	d102      	bne.n	19f9a <ll_chm_update+0x3a>
	return 0;
   19f94:	2000      	movs	r0, #0
}
   19f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   19f9a:	4620      	mov	r0, r4
   19f9c:	f7f8 fbd4 	bl	12748 <connection_get>
		if (!conn || conn->role) {
   19fa0:	4606      	mov	r6, r0
   19fa2:	b1b8      	cbz	r0, 19fd4 <ll_chm_update+0x74>
   19fa4:	f990 301d 	ldrsb.w	r3, [r0, #29]
   19fa8:	2b00      	cmp	r3, #0
   19faa:	db13      	blt.n	19fd4 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   19fac:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   19fb0:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   19fb4:	429a      	cmp	r2, r3
   19fb6:	d110      	bne.n	19fda <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   19fb8:	2205      	movs	r2, #5
   19fba:	4629      	mov	r1, r5
   19fbc:	3079      	adds	r0, #121	; 0x79
   19fbe:	f7ec fe63 	bl	6c88 <memcpy>
		conn->llcp_req++;
   19fc2:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   19fc6:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   19fca:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   19fcc:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   19fd0:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   19fd4:	3c01      	subs	r4, #1
   19fd6:	b2e4      	uxtb	r4, r4
   19fd8:	e7da      	b.n	19f90 <ll_chm_update+0x30>
			return 1;
   19fda:	2001      	movs	r0, #1
   19fdc:	e7db      	b.n	19f96 <ll_chm_update+0x36>
   19fde:	bf00      	nop
   19fe0:	2000126c 	.word	0x2000126c

00019fe4 <ll_chm_get>:
{
   19fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19fe6:	460d      	mov	r5, r1
	conn = connection_get(handle);
   19fe8:	f7f8 fbae 	bl	12748 <connection_get>
	if (!conn) {
   19fec:	4604      	mov	r4, r0
   19fee:	b160      	cbz	r0, 1a00a <ll_chm_get+0x26>
		conn->chm_update = 0;
   19ff0:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   19ff2:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   19ff6:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   19ff8:	2205      	movs	r2, #5
   19ffa:	4631      	mov	r1, r6
   19ffc:	4628      	mov	r0, r5
   19ffe:	f7ec fe43 	bl	6c88 <memcpy>
	} while (conn->chm_update);
   1a002:	7f20      	ldrb	r0, [r4, #28]
   1a004:	2800      	cmp	r0, #0
   1a006:	d1f6      	bne.n	19ff6 <ll_chm_get+0x12>
}
   1a008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   1a00a:	2001      	movs	r0, #1
   1a00c:	e7fc      	b.n	1a008 <ll_chm_get+0x24>

0001a00e <ll_start_enc_req_send>:
{
   1a00e:	b570      	push	{r4, r5, r6, lr}
   1a010:	460d      	mov	r5, r1
   1a012:	4616      	mov	r6, r2
	conn = connection_get(handle);
   1a014:	f7f8 fb98 	bl	12748 <connection_get>
	if (!conn) {
   1a018:	4604      	mov	r4, r0
   1a01a:	b908      	cbnz	r0, 1a020 <ll_start_enc_req_send+0x12>
		return 1;
   1a01c:	2001      	movs	r0, #1
}
   1a01e:	bd70      	pop	{r4, r5, r6, pc}
	if (error_code) {
   1a020:	b315      	cbz	r5, 1a068 <ll_start_enc_req_send+0x5a>
		if (conn->refresh == 0) {
   1a022:	f890 00f8 	ldrb.w	r0, [r0, #248]	; 0xf8
   1a026:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   1a02a:	d110      	bne.n	1a04e <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   1a02c:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   1a030:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   1a034:	4293      	cmp	r3, r2
   1a036:	d1f1      	bne.n	1a01c <ll_start_enc_req_send+0xe>
			conn->llcp_type = LLCP_ENCRYPTION;
   1a038:	2203      	movs	r2, #3
			conn->llcp_req++;
   1a03a:	3301      	adds	r3, #1
			conn->llcp.encryption.error_code = error_code;
   1a03c:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
			conn->llcp.encryption.initiate = 0;
   1a040:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
			conn->llcp_type = LLCP_ENCRYPTION;
   1a044:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
			conn->llcp_req++;
   1a048:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   1a04c:	e7e7      	b.n	1a01e <ll_start_enc_req_send+0x10>
			if (conn->llcp_terminate.ack !=
   1a04e:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   1a052:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   1a056:	4293      	cmp	r3, r2
   1a058:	d1e0      	bne.n	1a01c <ll_start_enc_req_send+0xe>
			conn->llcp_terminate.req++;
   1a05a:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   1a05c:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
			conn->llcp_terminate.req++;
   1a060:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	return 0;
   1a064:	2000      	movs	r0, #0
   1a066:	e7da      	b.n	1a01e <ll_start_enc_req_send+0x10>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   1a068:	2210      	movs	r2, #16
   1a06a:	4631      	mov	r1, r6
   1a06c:	3084      	adds	r0, #132	; 0x84
   1a06e:	f7ec fe0b 	bl	6c88 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   1a072:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   1a076:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   1a07a:	4293      	cmp	r3, r2
   1a07c:	d1ce      	bne.n	1a01c <ll_start_enc_req_send+0xe>
		conn->llcp_type = LLCP_ENCRYPTION;
   1a07e:	2203      	movs	r2, #3
		conn->llcp_req++;
   1a080:	3301      	adds	r3, #1
		conn->llcp.encryption.initiate = 0;
   1a082:	f8a4 5078 	strh.w	r5, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   1a086:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   1a08a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
	return 0;
   1a08e:	4628      	mov	r0, r5
   1a090:	e7c5      	b.n	1a01e <ll_start_enc_req_send+0x10>

0001a092 <ll_feature_req_send>:
{
   1a092:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   1a094:	f7f8 fb58 	bl	12748 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1a098:	b168      	cbz	r0, 1a0b6 <ll_feature_req_send+0x24>
   1a09a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1a09e:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1a0a2:	4293      	cmp	r3, r2
   1a0a4:	d107      	bne.n	1a0b6 <ll_feature_req_send+0x24>
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   1a0a6:	2204      	movs	r2, #4
	conn->llcp_req++;
   1a0a8:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   1a0aa:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	conn->llcp_req++;
   1a0ae:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   1a0b2:	2000      	movs	r0, #0
}
   1a0b4:	bd08      	pop	{r3, pc}
		return 1;
   1a0b6:	2001      	movs	r0, #1
   1a0b8:	e7fc      	b.n	1a0b4 <ll_feature_req_send+0x22>

0001a0ba <ll_version_ind_send>:
{
   1a0ba:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   1a0bc:	f7f8 fb44 	bl	12748 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1a0c0:	b168      	cbz	r0, 1a0de <ll_version_ind_send+0x24>
   1a0c2:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1a0c6:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1a0ca:	4293      	cmp	r3, r2
   1a0cc:	d107      	bne.n	1a0de <ll_version_ind_send+0x24>
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   1a0ce:	2205      	movs	r2, #5
	conn->llcp_req++;
   1a0d0:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   1a0d2:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	conn->llcp_req++;
   1a0d6:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   1a0da:	2000      	movs	r0, #0
}
   1a0dc:	bd08      	pop	{r3, pc}
		return 1;
   1a0de:	2001      	movs	r0, #1
   1a0e0:	e7fc      	b.n	1a0dc <ll_version_ind_send+0x22>

0001a0e2 <ll_terminate_ind_send>:
{
   1a0e2:	b510      	push	{r4, lr}
   1a0e4:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1a0e6:	f7f8 fb2f 	bl	12748 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   1a0ea:	b160      	cbz	r0, 1a106 <ll_terminate_ind_send+0x24>
   1a0ec:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   1a0f0:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   1a0f4:	4293      	cmp	r3, r2
   1a0f6:	d106      	bne.n	1a106 <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   1a0f8:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   1a0fa:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   1a0fe:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   1a102:	2000      	movs	r0, #0
}
   1a104:	bd10      	pop	{r4, pc}
		return 1;
   1a106:	2001      	movs	r0, #1
   1a108:	e7fc      	b.n	1a104 <ll_terminate_ind_send+0x22>

0001a10a <ll_tx_pwr_lvl_get>:
{
   1a10a:	b510      	push	{r4, lr}
   1a10c:	4614      	mov	r4, r2
	conn = connection_get(handle);
   1a10e:	f7f8 fb1b 	bl	12748 <connection_get>
	if (!conn) {
   1a112:	b110      	cbz	r0, 1a11a <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   1a114:	2000      	movs	r0, #0
   1a116:	7020      	strb	r0, [r4, #0]
}
   1a118:	bd10      	pop	{r4, pc}
		return 1;
   1a11a:	2001      	movs	r0, #1
   1a11c:	e7fc      	b.n	1a118 <ll_tx_pwr_lvl_get+0xe>

0001a11e <ll_apto_get>:
{
   1a11e:	b510      	push	{r4, lr}
   1a120:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1a122:	f7f8 fb11 	bl	12748 <connection_get>
	if (!conn) {
   1a126:	b160      	cbz	r0, 1a142 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   1a128:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   1a12a:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   1a12e:	435a      	muls	r2, r3
   1a130:	237d      	movs	r3, #125	; 0x7d
   1a132:	4353      	muls	r3, r2
	return 0;
   1a134:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   1a136:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a13a:	fb93 f3f2 	sdiv	r3, r3, r2
   1a13e:	8023      	strh	r3, [r4, #0]
}
   1a140:	bd10      	pop	{r4, pc}
		return 1;
   1a142:	2001      	movs	r0, #1
   1a144:	e7fc      	b.n	1a140 <ll_apto_get+0x22>

0001a146 <ll_apto_set>:
{
   1a146:	b510      	push	{r4, lr}
   1a148:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1a14a:	f7f8 fafd 	bl	12748 <connection_get>
	if (!conn) {
   1a14e:	b170      	cbz	r0, 1a16e <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   1a150:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   1a152:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1a156:	4353      	muls	r3, r2
   1a158:	f242 7110 	movw	r1, #10000	; 0x2710
   1a15c:	fb01 3404 	mla	r4, r1, r4, r3
   1a160:	3c01      	subs	r4, #1
   1a162:	fb94 f4f3 	sdiv	r4, r4, r3
   1a166:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   1a16a:	2000      	movs	r0, #0
}
   1a16c:	bd10      	pop	{r4, pc}
		return 1;
   1a16e:	2001      	movs	r0, #1
   1a170:	e7fc      	b.n	1a16c <ll_apto_set+0x26>

0001a172 <ll_length_req_send>:
{
   1a172:	b570      	push	{r4, r5, r6, lr}
   1a174:	460e      	mov	r6, r1
   1a176:	4615      	mov	r5, r2
	conn = connection_get(handle);
   1a178:	f7f8 fae6 	bl	12748 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1a17c:	b1d0      	cbz	r0, 1a1b4 <ll_length_req_send+0x42>
   1a17e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1a182:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1a186:	429a      	cmp	r2, r3
   1a188:	d114      	bne.n	1a1b4 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   1a18a:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1a18e:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1a192:	4293      	cmp	r3, r2
   1a194:	d10e      	bne.n	1a1b4 <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1a196:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   1a19a:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1a19e:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   1a1a2:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1a1a4:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   1a1a8:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	conn->llcp_length.req++;
   1a1ac:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	return 0;
   1a1b0:	2000      	movs	r0, #0
}
   1a1b2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   1a1b4:	2001      	movs	r0, #1
   1a1b6:	e7fc      	b.n	1a1b2 <ll_length_req_send+0x40>

0001a1b8 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   1a1b8:	4b03      	ldr	r3, [pc, #12]	; (1a1c8 <ll_length_default_get+0x10>)
   1a1ba:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   1a1be:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   1a1c0:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   1a1c4:	800b      	strh	r3, [r1, #0]
}
   1a1c6:	4770      	bx	lr
   1a1c8:	2000126c 	.word	0x2000126c

0001a1cc <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   1a1cc:	4b03      	ldr	r3, [pc, #12]	; (1a1dc <ll_length_default_set+0x10>)
   1a1ce:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   1a1d2:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   1a1d6:	2000      	movs	r0, #0
   1a1d8:	4770      	bx	lr
   1a1da:	bf00      	nop
   1a1dc:	2000126c 	.word	0x2000126c

0001a1e0 <ll_length_max_get>:
{
   1a1e0:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   1a1e2:	241b      	movs	r4, #27
   1a1e4:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1a1e6:	f44f 70a4 	mov.w	r0, #328	; 0x148
   1a1ea:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   1a1ec:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1a1ee:	8018      	strh	r0, [r3, #0]
}
   1a1f0:	bd10      	pop	{r4, pc}

0001a1f2 <ll_phy_get>:
{
   1a1f2:	b538      	push	{r3, r4, r5, lr}
   1a1f4:	460d      	mov	r5, r1
   1a1f6:	4614      	mov	r4, r2
	conn = connection_get(handle);
   1a1f8:	f7f8 faa6 	bl	12748 <connection_get>
	if (!conn) {
   1a1fc:	b158      	cbz	r0, 1a216 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   1a1fe:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1a202:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1a206:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   1a208:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1a20c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1a210:	7023      	strb	r3, [r4, #0]
	return 0;
   1a212:	2000      	movs	r0, #0
}
   1a214:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   1a216:	2001      	movs	r0, #1
   1a218:	e7fc      	b.n	1a214 <ll_phy_get+0x22>
	...

0001a21c <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   1a21c:	4b03      	ldr	r3, [pc, #12]	; (1a22c <ll_phy_default_set+0x10>)
   1a21e:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   1a222:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   1a226:	2000      	movs	r0, #0
   1a228:	4770      	bx	lr
   1a22a:	bf00      	nop
   1a22c:	2000126c 	.word	0x2000126c

0001a230 <ll_phy_req_send>:
{
   1a230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a234:	4689      	mov	r9, r1
   1a236:	4690      	mov	r8, r2
   1a238:	461f      	mov	r7, r3
	conn = connection_get(handle);
   1a23a:	f7f8 fa85 	bl	12748 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1a23e:	b320      	cbz	r0, 1a28a <ll_phy_req_send+0x5a>
   1a240:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1a244:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1a248:	429a      	cmp	r2, r3
   1a24a:	d11e      	bne.n	1a28a <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   1a24c:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1a250:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   1a254:	429d      	cmp	r5, r3
   1a256:	d118      	bne.n	1a28a <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1a258:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   1a25c:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   1a260:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   1a264:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   1a268:	f046 0102 	orr.w	r1, r6, #2
	conn->llcp_phy.rx = rx;
   1a26c:	4622      	mov	r2, r4
	conn->llcp_phy.flags = flags;
   1a26e:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   1a272:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   1a276:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   1a278:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   1a27c:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	conn->llcp_phy.req++;
   1a280:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	return 0;
   1a284:	2000      	movs	r0, #0
}
   1a286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   1a28a:	2001      	movs	r0, #1
   1a28c:	e7fb      	b.n	1a286 <ll_phy_req_send+0x56>
	...

0001a290 <ll_rx_get>:
{
   1a290:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a294:	4605      	mov	r5, r0
   1a296:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   1a298:	4918      	ldr	r1, [pc, #96]	; (1a2fc <ll_rx_get+0x6c>)
   1a29a:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   1a29e:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   1a2a2:	4293      	cmp	r3, r2
   1a2a4:	460f      	mov	r7, r1
   1a2a6:	d01f      	beq.n	1a2e8 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   1a2a8:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   1a2ac:	f201 1177 	addw	r1, r1, #375	; 0x177
   1a2b0:	f898 2000 	ldrb.w	r2, [r8]
   1a2b4:	f7f8 f9fe 	bl	126b4 <tx_cmplt_get>
		if (!cmplt) {
   1a2b8:	4604      	mov	r4, r0
   1a2ba:	b9e0      	cbnz	r0, 1a2f6 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   1a2bc:	ae02      	add	r6, sp, #8
   1a2be:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   1a2c2:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   1a2c6:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   1a2ca:	4631      	mov	r1, r6
   1a2cc:	f10d 0006 	add.w	r0, sp, #6
   1a2d0:	f7f8 f9f0 	bl	126b4 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   1a2d4:	b934      	cbnz	r4, 1a2e4 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   1a2d6:	b928      	cbnz	r0, 1a2e4 <ll_rx_get+0x54>
			*node_rx = _node_rx;
   1a2d8:	f8c5 8000 	str.w	r8, [r5]
}
   1a2dc:	4620      	mov	r0, r4
   1a2de:	b002      	add	sp, #8
   1a2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1a2e4:	4604      	mov	r4, r0
   1a2e6:	e7ee      	b.n	1a2c6 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   1a2e8:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   1a2ec:	f201 1177 	addw	r1, r1, #375	; 0x177
   1a2f0:	f7f8 f9e0 	bl	126b4 <tx_cmplt_get>
   1a2f4:	4604      	mov	r4, r0
		*node_rx = NULL;
   1a2f6:	2300      	movs	r3, #0
   1a2f8:	602b      	str	r3, [r5, #0]
   1a2fa:	e7ef      	b.n	1a2dc <ll_rx_get+0x4c>
   1a2fc:	2000126c 	.word	0x2000126c

0001a300 <do_radio_rx_fc_set>:
	if (req == ack) {
   1a300:	4291      	cmp	r1, r2
{
   1a302:	b510      	push	{r4, lr}
   1a304:	4b14      	ldr	r3, [pc, #80]	; (1a358 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   1a306:	d119      	bne.n	1a33c <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   1a308:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   1a30c:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   1a310:	4294      	cmp	r4, r2
   1a312:	d111      	bne.n	1a338 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   1a314:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   1a316:	bf14      	ite	ne
   1a318:	460a      	movne	r2, r1
   1a31a:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   1a31c:	3a01      	subs	r2, #1
   1a31e:	b2d2      	uxtb	r2, r2
   1a320:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   1a324:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   1a328:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   1a32c:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   1a330:	4291      	cmp	r1, r2
   1a332:	d00f      	beq.n	1a354 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   1a334:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   1a338:	2001      	movs	r0, #1
   1a33a:	e005      	b.n	1a348 <do_radio_rx_fc_set+0x48>
	} else if (((req == 0) &&
   1a33c:	b929      	cbnz	r1, 1a34a <do_radio_rx_fc_set+0x4a>
   1a33e:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   1a342:	1a18      	subs	r0, r3, r0
   1a344:	bf18      	it	ne
   1a346:	2001      	movne	r0, #1
}
   1a348:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   1a34a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   1a34e:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   1a352:	e7f6      	b.n	1a342 <do_radio_rx_fc_set+0x42>
	return 0;
   1a354:	2000      	movs	r0, #0
   1a356:	e7f7      	b.n	1a348 <do_radio_rx_fc_set+0x48>
   1a358:	2000126c 	.word	0x2000126c

0001a35c <radio_rx_fc_set>:
{
   1a35c:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   1a35e:	4b14      	ldr	r3, [pc, #80]	; (1a3b0 <radio_rx_fc_set+0x54>)
   1a360:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   1a364:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   1a366:	b302      	cbz	r2, 1a3aa <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   1a368:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   1a36c:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   1a36e:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   1a372:	b135      	cbz	r5, 1a382 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   1a374:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a378:	4298      	cmp	r0, r3
   1a37a:	d016      	beq.n	1a3aa <radio_rx_fc_set+0x4e>
}
   1a37c:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   1a37e:	f7ff bfbf 	b.w	1a300 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   1a382:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   1a386:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   1a38a:	42a0      	cmp	r0, r4
   1a38c:	d10d      	bne.n	1a3aa <radio_rx_fc_set+0x4e>
   1a38e:	4291      	cmp	r1, r2
   1a390:	d00b      	beq.n	1a3aa <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1a392:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   1a396:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1a39a:	42a0      	cmp	r0, r4
   1a39c:	d005      	beq.n	1a3aa <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   1a39e:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1a3a2:	4288      	cmp	r0, r1
				_radio.fc_ack = ack;
   1a3a4:	bf08      	it	eq
   1a3a6:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   1a3aa:	2000      	movs	r0, #0
   1a3ac:	bc30      	pop	{r4, r5}
   1a3ae:	4770      	bx	lr
   1a3b0:	2000126c 	.word	0x2000126c

0001a3b4 <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   1a3b4:	4801      	ldr	r0, [pc, #4]	; (1a3bc <ll_tx_mem_acquire+0x8>)
   1a3b6:	f7f6 bf99 	b.w	112ec <mem_acquire>
   1a3ba:	bf00      	nop
   1a3bc:	200013d0 	.word	0x200013d0

0001a3c0 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   1a3c0:	4901      	ldr	r1, [pc, #4]	; (1a3c8 <ll_tx_mem_release+0x8>)
   1a3c2:	f7f6 bfac 	b.w	1131e <mem_release>
   1a3c6:	bf00      	nop
   1a3c8:	200013d0 	.word	0x200013d0

0001a3cc <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   1a3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   1a3ce:	4d3f      	ldr	r5, [pc, #252]	; (1a4cc <ll_tx_mem_enqueue+0x100>)
   1a3d0:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   1a3d4:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   1a3d8:	3401      	adds	r4, #1
{
   1a3da:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   1a3dc:	b2e4      	uxtb	r4, r4
{
   1a3de:	4607      	mov	r7, r0
   1a3e0:	460e      	mov	r6, r1
		last = 0;
   1a3e2:	42a3      	cmp	r3, r4
   1a3e4:	bf08      	it	eq
   1a3e6:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   1a3e8:	f7f8 f9ae 	bl	12748 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   1a3ec:	2800      	cmp	r0, #0
   1a3ee:	d06a      	beq.n	1a4c6 <ll_tx_mem_enqueue+0xfa>
   1a3f0:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   1a3f4:	42a3      	cmp	r3, r4
   1a3f6:	d066      	beq.n	1a4c6 <ll_tx_mem_enqueue+0xfa>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   1a3f8:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   1a3fc:	7972      	ldrb	r2, [r6, #5]
   1a3fe:	3b07      	subs	r3, #7
   1a400:	429a      	cmp	r2, r3
   1a402:	d91a      	bls.n	1a43a <ll_tx_mem_enqueue+0x6e>
   1a404:	4b32      	ldr	r3, [pc, #200]	; (1a4d0 <ll_tx_mem_enqueue+0x104>)
   1a406:	681b      	ldr	r3, [r3, #0]
   1a408:	075a      	lsls	r2, r3, #29
   1a40a:	d010      	beq.n	1a42e <ll_tx_mem_enqueue+0x62>
   1a40c:	2301      	movs	r3, #1
   1a40e:	f04f 0200 	mov.w	r2, #0
   1a412:	f363 0202 	bfi	r2, r3, #0, #3
   1a416:	492f      	ldr	r1, [pc, #188]	; (1a4d4 <ll_tx_mem_enqueue+0x108>)
   1a418:	4b2f      	ldr	r3, [pc, #188]	; (1a4d8 <ll_tx_mem_enqueue+0x10c>)
   1a41a:	4830      	ldr	r0, [pc, #192]	; (1a4dc <ll_tx_mem_enqueue+0x110>)
   1a41c:	1a5b      	subs	r3, r3, r1
   1a41e:	f36f 02c5 	bfc	r2, #3, #3
   1a422:	08db      	lsrs	r3, r3, #3
   1a424:	492e      	ldr	r1, [pc, #184]	; (1a4e0 <ll_tx_mem_enqueue+0x114>)
   1a426:	f363 128f 	bfi	r2, r3, #6, #10
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1a42a:	f7e7 fe5f 	bl	20ec <log_1>
   1a42e:	4040      	eors	r0, r0
   1a430:	f380 8811 	msr	BASEPRI, r0
   1a434:	f04f 0004 	mov.w	r0, #4
   1a438:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   1a43a:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   1a43e:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   1a442:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   1a446:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   1a44a:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   1a44c:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   1a450:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1a454:	2b00      	cmp	r3, #0
   1a456:	db02      	blt.n	1a45e <ll_tx_mem_enqueue+0x92>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   1a458:	2000      	movs	r0, #0
}
   1a45a:	b009      	add	sp, #36	; 0x24
   1a45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   1a45e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   1a460:	2b00      	cmp	r3, #0
   1a462:	d0f9      	beq.n	1a458 <ll_tx_mem_enqueue+0x8c>
   1a464:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   1a468:	f013 0402 	ands.w	r4, r3, #2
   1a46c:	d1f4      	bne.n	1a458 <ll_tx_mem_enqueue+0x8c>
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a46e:	f890 2020 	ldrb.w	r2, [r0, #32]
		conn->slave.latency_cancel = 1;
   1a472:	f043 0302 	orr.w	r3, r3, #2
   1a476:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a47a:	4b1a      	ldr	r3, [pc, #104]	; (1a4e4 <ll_tx_mem_enqueue+0x118>)
   1a47c:	9006      	str	r0, [sp, #24]
   1a47e:	3207      	adds	r2, #7
   1a480:	2501      	movs	r5, #1
   1a482:	e9cd 4304 	strd	r4, r3, [sp, #16]
   1a486:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1a48a:	4623      	mov	r3, r4
   1a48c:	e9cd 4400 	strd	r4, r4, [sp]
   1a490:	b2d2      	uxtb	r2, r2
   1a492:	2103      	movs	r1, #3
   1a494:	4620      	mov	r0, r4
   1a496:	f7f7 fdf9 	bl	1208c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1a49a:	f030 0302 	bics.w	r3, r0, #2
   1a49e:	d0db      	beq.n	1a458 <ll_tx_mem_enqueue+0x8c>
   1a4a0:	4b0b      	ldr	r3, [pc, #44]	; (1a4d0 <ll_tx_mem_enqueue+0x104>)
   1a4a2:	681b      	ldr	r3, [r3, #0]
   1a4a4:	075b      	lsls	r3, r3, #29
   1a4a6:	d0c2      	beq.n	1a42e <ll_tx_mem_enqueue+0x62>
   1a4a8:	490a      	ldr	r1, [pc, #40]	; (1a4d4 <ll_tx_mem_enqueue+0x108>)
   1a4aa:	4b0b      	ldr	r3, [pc, #44]	; (1a4d8 <ll_tx_mem_enqueue+0x10c>)
   1a4ac:	480e      	ldr	r0, [pc, #56]	; (1a4e8 <ll_tx_mem_enqueue+0x11c>)
   1a4ae:	f04f 0200 	mov.w	r2, #0
   1a4b2:	1a5b      	subs	r3, r3, r1
   1a4b4:	f365 0202 	bfi	r2, r5, #0, #3
   1a4b8:	f364 02c5 	bfi	r2, r4, #3, #3
   1a4bc:	08db      	lsrs	r3, r3, #3
   1a4be:	f363 128f 	bfi	r2, r3, #6, #10
   1a4c2:	4907      	ldr	r1, [pc, #28]	; (1a4e0 <ll_tx_mem_enqueue+0x114>)
   1a4c4:	e7b1      	b.n	1a42a <ll_tx_mem_enqueue+0x5e>
		return 1;
   1a4c6:	2001      	movs	r0, #1
   1a4c8:	e7c7      	b.n	1a45a <ll_tx_mem_enqueue+0x8e>
   1a4ca:	bf00      	nop
   1a4cc:	2000126c 	.word	0x2000126c
   1a4d0:	2000e218 	.word	0x2000e218
   1a4d4:	0002ef38 	.word	0x0002ef38
   1a4d8:	0002ef70 	.word	0x0002ef70
   1a4dc:	0003329a 	.word	0x0003329a
   1a4e0:	00032d53 	.word	0x00032d53
   1a4e4:	00013751 	.word	0x00013751
   1a4e8:	00032d7f 	.word	0x00032d7f

0001a4ec <ll_enc_req_send>:
{
   1a4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a4f0:	4607      	mov	r7, r0
   1a4f2:	4688      	mov	r8, r1
   1a4f4:	4616      	mov	r6, r2
   1a4f6:	4699      	mov	r9, r3
	conn = connection_get(handle);
   1a4f8:	f7f8 f926 	bl	12748 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1a4fc:	4605      	mov	r5, r0
   1a4fe:	b910      	cbnz	r0, 1a506 <ll_enc_req_send+0x1a>
			return 1;
   1a500:	2001      	movs	r0, #1
}
   1a502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1a506:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1a50a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1a50e:	429a      	cmp	r2, r3
   1a510:	d1f6      	bne.n	1a500 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   1a512:	f7ff ff4f 	bl	1a3b4 <ll_tx_mem_acquire>
	if (node_tx) {
   1a516:	4604      	mov	r4, r0
   1a518:	2800      	cmp	r0, #0
   1a51a:	d0f1      	beq.n	1a500 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   1a51c:	2210      	movs	r2, #16
   1a51e:	4649      	mov	r1, r9
   1a520:	f105 0084 	add.w	r0, r5, #132	; 0x84
   1a524:	f7ec fbb0 	bl	6c88 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   1a528:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1a52c:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   1a530:	d124      	bne.n	1a57c <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a532:	7923      	ldrb	r3, [r4, #4]
   1a534:	f043 0303 	orr.w	r3, r3, #3
   1a538:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   1a53a:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   1a53c:	2208      	movs	r2, #8
			pdu_data_tx->len =
   1a53e:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   1a540:	2303      	movs	r3, #3
   1a542:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   1a544:	4641      	mov	r1, r8
   1a546:	18a0      	adds	r0, r4, r2
   1a548:	f7ec fb9e 	bl	6c88 <memcpy>
			enc_req->ediv[0] = ediv[0];
   1a54c:	7833      	ldrb	r3, [r6, #0]
   1a54e:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   1a550:	7873      	ldrb	r3, [r6, #1]
   1a552:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   1a554:	2108      	movs	r1, #8
   1a556:	f104 0012 	add.w	r0, r4, #18
   1a55a:	f002 fc35 	bl	1cdc8 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   1a55e:	2104      	movs	r1, #4
   1a560:	f104 001a 	add.w	r0, r4, #26
   1a564:	f002 fc30 	bl	1cdc8 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   1a568:	4621      	mov	r1, r4
   1a56a:	4638      	mov	r0, r7
   1a56c:	f7ff ff2e 	bl	1a3cc <ll_tx_mem_enqueue>
   1a570:	2601      	movs	r6, #1
   1a572:	b1d0      	cbz	r0, 1a5aa <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   1a574:	4620      	mov	r0, r4
   1a576:	f7ff ff23 	bl	1a3c0 <ll_tx_mem_release>
   1a57a:	e7c1      	b.n	1a500 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   1a57c:	2b30      	cmp	r3, #48	; 0x30
   1a57e:	d1f9      	bne.n	1a574 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   1a580:	2208      	movs	r2, #8
   1a582:	4641      	mov	r1, r8
   1a584:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   1a588:	f7ec fb7e 	bl	6c88 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   1a58c:	7833      	ldrb	r3, [r6, #0]
   1a58e:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   1a592:	7873      	ldrb	r3, [r6, #1]
   1a594:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a598:	7923      	ldrb	r3, [r4, #4]
   1a59a:	f043 0303 	orr.w	r3, r3, #3
   1a59e:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1a5a0:	2301      	movs	r3, #1
   1a5a2:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   1a5a4:	230a      	movs	r3, #10
   1a5a6:	71e3      	strb	r3, [r4, #7]
   1a5a8:	e7de      	b.n	1a568 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   1a5aa:	2303      	movs	r3, #3
   1a5ac:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   1a5b0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   1a5b4:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   1a5b8:	3301      	adds	r3, #1
   1a5ba:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
		return 0;
   1a5be:	e7a0      	b.n	1a502 <ll_enc_req_send+0x16>

0001a5c0 <radio_adv_enable>:
{
   1a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.advertiser.is_enabled) {
   1a5c4:	4fca      	ldr	r7, [pc, #808]	; (1a8f0 <radio_adv_enable+0x330>)
{
   1a5c6:	b08f      	sub	sp, #60	; 0x3c
   1a5c8:	469a      	mov	sl, r3
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1a5ca:	2302      	movs	r3, #2
   1a5cc:	930d      	str	r3, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
   1a5ce:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
{
   1a5d2:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	if (_radio.advertiser.is_enabled) {
   1a5d6:	2b00      	cmp	r3, #0
{
   1a5d8:	4683      	mov	fp, r0
   1a5da:	4688      	mov	r8, r1
   1a5dc:	463d      	mov	r5, r7
	if (_radio.advertiser.is_enabled) {
   1a5de:	da01      	bge.n	1a5e4 <radio_adv_enable+0x24>
	return BT_HCI_ERR_CMD_DISALLOWED;
   1a5e0:	200c      	movs	r0, #12
   1a5e2:	e17b      	b.n	1a8dc <radio_adv_enable+0x31c>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
   1a5e4:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
   1a5e8:	232b      	movs	r3, #43	; 0x2b
   1a5ea:	f04f 0927 	mov.w	r9, #39	; 0x27
   1a5ee:	fb19 3902 	smlabb	r9, r9, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   1a5f2:	f817 3009 	ldrb.w	r3, [r7, r9]
   1a5f6:	f003 030f 	and.w	r3, r3, #15
   1a5fa:	2b01      	cmp	r3, #1
   1a5fc:	f200 8127 	bhi.w	1a84e <radio_adv_enable+0x28e>
		if (_radio.advertiser.conn) {
   1a600:	f8d7 60cc 	ldr.w	r6, [r7, #204]	; 0xcc
   1a604:	2e00      	cmp	r6, #0
   1a606:	d1eb      	bne.n	1a5e0 <radio_adv_enable+0x20>
		link = mem_acquire(&_radio.link_rx_free);
   1a608:	f507 70a4 	add.w	r0, r7, #328	; 0x148
   1a60c:	f7f6 fe6e 	bl	112ec <mem_acquire>
		if (!link) {
   1a610:	900a      	str	r0, [sp, #40]	; 0x28
   1a612:	b158      	cbz	r0, 1a62c <radio_adv_enable+0x6c>
		conn = mem_acquire(&_radio.conn_free);
   1a614:	f507 7086 	add.w	r0, r7, #268	; 0x10c
   1a618:	f7f6 fe68 	bl	112ec <mem_acquire>
		if (!conn) {
   1a61c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a61e:	4604      	mov	r4, r0
   1a620:	b930      	cbnz	r0, 1a630 <radio_adv_enable+0x70>
			mem_release(link, &_radio.link_rx_free);
   1a622:	f507 71a4 	add.w	r1, r7, #328	; 0x148
   1a626:	4610      	mov	r0, r2
   1a628:	f7f6 fe79 	bl	1131e <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1a62c:	2007      	movs	r0, #7
   1a62e:	e155      	b.n	1a8dc <radio_adv_enable+0x31c>
		conn->handle = 0xFFFF;
   1a630:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a634:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   1a636:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   1a63a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   1a63e:	7f43      	ldrb	r3, [r0, #29]
		conn->latency_prepare = 0;
   1a640:	6286      	str	r6, [r0, #40]	; 0x28
		conn->data_chan_sel = 0;
   1a642:	f366 1386 	bfi	r3, r6, #6, #1
   1a646:	7743      	strb	r3, [r0, #29]
		conn->default_tx_octets = _radio.default_tx_octets;
   1a648:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
   1a64c:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1a64e:	231b      	movs	r3, #27
   1a650:	85c3      	strh	r3, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1a652:	8603      	strh	r3, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   1a654:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
   1a658:	8643      	strh	r3, [r0, #50]	; 0x32
		conn->max_tx_time =
   1a65a:	4ba6      	ldr	r3, [pc, #664]	; (1a8f4 <radio_adv_enable+0x334>)
   1a65c:	6343      	str	r3, [r0, #52]	; 0x34
		conn->phy_pref_tx = _radio.default_phy_tx;
   1a65e:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
   1a662:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		conn->data_chan_use = 0;
   1a666:	77c6      	strb	r6, [r0, #31]
		conn->phy_pref_tx = _radio.default_phy_tx;
   1a668:	f361 0302 	bfi	r3, r1, #0, #3
		conn->phy_tx = BIT(0);
   1a66c:	2101      	movs	r1, #1
   1a66e:	f361 03c5 	bfi	r3, r1, #3, #3
		conn->phy_pref_flags = 0;
   1a672:	f366 1386 	bfi	r3, r6, #6, #1
		conn->phy_flags = 0;
   1a676:	f366 13c7 	bfi	r3, r6, #7, #1
   1a67a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   1a67e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
		conn->event_counter = 0;
   1a682:	8446      	strh	r6, [r0, #34]	; 0x22
		conn->phy_tx_time = BIT(0);
   1a684:	f361 0302 	bfi	r3, r1, #0, #3
   1a688:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   1a68c:	f8b7 0128 	ldrh.w	r0, [r7, #296]	; 0x128
		conn->supervision_expire = 0;
   1a690:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
		conn->phy_pref_rx = _radio.default_phy_rx;
   1a694:	f360 03c5 	bfi	r3, r0, #3, #3
   1a698:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->phy_rx = BIT(0);
   1a69c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		conn->procedure_expire = 0;
   1a6a0:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
		conn->phy_rx = BIT(0);
   1a6a4:	f361 0302 	bfi	r3, r1, #0, #3
   1a6a8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		conn->role = 1;
   1a6ac:	7f63      	ldrb	r3, [r4, #29]
   1a6ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a6b2:	7763      	strb	r3, [r4, #29]
		conn->connect_expire = 6;
   1a6b4:	2306      	movs	r3, #6
   1a6b6:	87a3      	strh	r3, [r4, #60]	; 0x3c
		conn->common.fex_valid = 0;
   1a6b8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1a6bc:	f366 1345 	bfi	r3, r6, #5, #1
		conn->slave.latency_enabled = 0;
   1a6c0:	f366 0300 	bfi	r3, r6, #0, #1
		conn->slave.latency_cancel = 0;
   1a6c4:	f366 0341 	bfi	r3, r6, #1, #1
   1a6c8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		conn->slave.window_widening_event_us = 0;
   1a6cc:	e9c4 6617 	strd	r6, r6, [r4, #92]	; 0x5c
		conn->apto_expire = 0;
   1a6d0:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
		conn->llcp_version.tx = 0;
   1a6d4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
		conn->appto_expire = 0;
   1a6d8:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
		conn->llcp_version.tx = 0;
   1a6dc:	f366 0300 	bfi	r3, r6, #0, #1
		conn->llcp_version.rx = 0;
   1a6e0:	f366 0341 	bfi	r3, r6, #1, #1
   1a6e4:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
		conn->llcp_conn_param.disabled = 0;
   1a6e8:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->slave.ticks_to_offset = 0;
   1a6ec:	6726      	str	r6, [r4, #112]	; 0x70
		conn->llcp_conn_param.disabled = 0;
   1a6ee:	f366 1304 	bfi	r3, r6, #4, #1
   1a6f2:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp_length.pause_tx = 0;
   1a6f6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->slave.ticks_to_offset = 0;
   1a6fa:	f8a4 6074 	strh.w	r6, [r4, #116]	; 0x74
		conn->llcp_length.pause_tx = 0;
   1a6fe:	f366 0382 	bfi	r3, r6, #2, #1
		conn->llcp_terminate.req = 0;
   1a702:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
		conn->llcp_terminate.reason_peer = 0;
   1a706:	f884 60b3 	strb.w	r6, [r4, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   1a70a:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   1a70e:	f8a4 60c0 	strh.w	r6, [r4, #192]	; 0xc0
		conn->llcp_length.req = 0;
   1a712:	f8a4 60e8 	strh.w	r6, [r4, #232]	; 0xe8
		conn->llcp_length.pause_tx = 0;
   1a716:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->llcp_phy.req = 0;
   1a71a:	f8a4 60f4 	strh.w	r6, [r4, #244]	; 0xf4
		conn->sn = 0;
   1a71e:	f884 60f8 	strb.w	r6, [r4, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   1a722:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
   1a726:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
		conn->pkt_tx_ctrl = NULL;
   1a72a:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
		conn->pkt_tx_ctrl_last = NULL;
   1a72e:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
		conn->pkt_tx_data = NULL;
   1a732:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
		conn->pkt_tx_last = NULL;
   1a736:	f8a4 6150 	strh.w	r6, [r4, #336]	; 0x150
		k32src_wait();
   1a73a:	f7fa fb73 	bl	14e24 <k32src_wait>
		_radio.advertiser.conn = conn;
   1a73e:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
	_radio.advertiser.chan_map = chan_map;
   1a742:	a80e      	add	r0, sp, #56	; 0x38
	_radio.advertiser.phy_p = phy_p;
   1a744:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;
   1a748:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p;
   1a74c:	f36b 0302 	bfi	r3, fp, #0, #3
	_radio.advertiser.chan_map = chan_map;
   1a750:	f362 03c5 	bfi	r3, r2, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
   1a754:	f36a 1387 	bfi	r3, sl, #6, #2
   1a758:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.rl_idx = rl_idx;
   1a75c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   1a760:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	_radio.advertiser.hdr.ticks_active_to_start =
   1a764:	f8d5 3184 	ldr.w	r3, [r5, #388]	; 0x184
   1a768:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   1a76a:	2327      	movs	r3, #39	; 0x27
   1a76c:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   1a76e:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
   1a770:	2300      	movs	r3, #0
   1a772:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   1a774:	f7f6 ff62 	bl	1163c <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1a778:	f817 6009 	ldrb.w	r6, [r7, r9]
   1a77c:	f006 060f 	and.w	r6, r6, #15
   1a780:	2e01      	cmp	r6, #1
   1a782:	d166      	bne.n	1a852 <radio_adv_enable+0x292>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   1a784:	f44f 7327 	mov.w	r3, #668	; 0x29c
   1a788:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
   1a78a:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   1a78e:	495a      	ldr	r1, [pc, #360]	; (1a8f8 <radio_adv_enable+0x338>)
   1a790:	a355      	add	r3, pc, #340	; (adr r3, 1a8e8 <radio_adv_enable+0x328>)
   1a792:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a796:	fba0 0101 	umull	r0, r1, r0, r1
   1a79a:	f7e5 fd8b 	bl	2b4 <__aeabi_uldivmod>
	ticks_slot_offset =
   1a79e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   1a7a2:	429f      	cmp	r7, r3
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   1a7a4:	6268      	str	r0, [r5, #36]	; 0x24
	ticks_slot_offset =
   1a7a6:	bf38      	it	cc
   1a7a8:	461f      	movcc	r7, r3
	_radio.advertiser.is_hdcd = !interval &&
   1a7aa:	f1b8 0f00 	cmp.w	r8, #0
   1a7ae:	d158      	bne.n	1a862 <radio_adv_enable+0x2a2>
   1a7b0:	1e72      	subs	r2, r6, #1
   1a7b2:	4253      	negs	r3, r2
   1a7b4:	4153      	adcs	r3, r2
   1a7b6:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
   1a7ba:	f8df 9150 	ldr.w	r9, [pc, #336]	; 1a90c <radio_adv_enable+0x34c>
   1a7be:	f8df b150 	ldr.w	fp, [pc, #336]	; 1a910 <radio_adv_enable+0x350>
   1a7c2:	f363 1686 	bfi	r6, r3, #6, #1
   1a7c6:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
   1a7ca:	f016 0640 	ands.w	r6, r6, #64	; 0x40
   1a7ce:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   1a7d2:	d04e      	beq.n	1a872 <radio_adv_enable+0x2b2>
		u32_t ticks_now = ticker_ticks_now_get();
   1a7d4:	f7f7 fd6c 	bl	122b0 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a7d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		u32_t ticks_now = ticker_ticks_now_get();
   1a7da:	4606      	mov	r6, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a7dc:	441f      	add	r7, r3
   1a7de:	2000      	movs	r0, #0
   1a7e0:	e9cd 9a07 	strd	r9, sl, [sp, #28]
   1a7e4:	e9cd b005 	strd	fp, r0, [sp, #20]
   1a7e8:	e9cd 0703 	strd	r0, r7, [sp, #12]
   1a7ec:	e9cd 7001 	strd	r7, r0, [sp, #4]
   1a7f0:	9000      	str	r0, [sp, #0]
   1a7f2:	4633      	mov	r3, r6
   1a7f4:	2205      	movs	r2, #5
   1a7f6:	2103      	movs	r1, #3
   1a7f8:	f7f7 fbfe 	bl	11ff8 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   1a7fc:	2802      	cmp	r0, #2
   1a7fe:	d034      	beq.n	1a86a <radio_adv_enable+0x2aa>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   1a800:	980d      	ldr	r0, [sp, #52]	; 0x34
   1a802:	b9b8      	cbnz	r0, 1a834 <radio_adv_enable+0x274>
		ret_cb = TICKER_STATUS_BUSY;
   1a804:	2302      	movs	r3, #2
   1a806:	930d      	str	r3, [sp, #52]	; 0x34
		ret =
   1a808:	4b3c      	ldr	r3, [pc, #240]	; (1a8fc <radio_adv_enable+0x33c>)
   1a80a:	9006      	str	r0, [sp, #24]
   1a80c:	e9cd 9a07 	strd	r9, sl, [sp, #28]
   1a810:	e9cd 0002 	strd	r0, r0, [sp, #8]
   1a814:	e9cd 0304 	strd	r0, r3, [sp, #16]
   1a818:	2203      	movs	r2, #3
   1a81a:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   1a81e:	9300      	str	r3, [sp, #0]
   1a820:	9001      	str	r0, [sp, #4]
   1a822:	4633      	mov	r3, r6
   1a824:	4611      	mov	r1, r2
		ret =
   1a826:	f7f7 fbe7 	bl	11ff8 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   1a82a:	2802      	cmp	r0, #2
   1a82c:	d043      	beq.n	1a8b6 <radio_adv_enable+0x2f6>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   1a82e:	980d      	ldr	r0, [sp, #52]	; 0x34
   1a830:	2800      	cmp	r0, #0
   1a832:	d044      	beq.n	1a8be <radio_adv_enable+0x2fe>
	if (conn) {
   1a834:	2c00      	cmp	r4, #0
   1a836:	f43f aed3 	beq.w	1a5e0 <radio_adv_enable+0x20>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   1a83a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1a83e:	4930      	ldr	r1, [pc, #192]	; (1a900 <radio_adv_enable+0x340>)
   1a840:	f7f6 fd6d 	bl	1131e <mem_release>
		mem_release(conn, &_radio.conn_free);
   1a844:	492f      	ldr	r1, [pc, #188]	; (1a904 <radio_adv_enable+0x344>)
   1a846:	4620      	mov	r0, r4
   1a848:	f7f6 fd69 	bl	1131e <mem_release>
   1a84c:	e6c8      	b.n	1a5e0 <radio_adv_enable+0x20>
		conn = NULL;
   1a84e:	2400      	movs	r4, #0
   1a850:	e777      	b.n	1a742 <radio_adv_enable+0x182>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   1a852:	2e02      	cmp	r6, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   1a854:	bf0c      	ite	eq
   1a856:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
   1a85a:	f240 53fc 	movwne	r3, #1532	; 0x5fc
   1a85e:	4358      	muls	r0, r3
   1a860:	e795      	b.n	1a78e <radio_adv_enable+0x1ce>
	_radio.advertiser.is_hdcd = !interval &&
   1a862:	2300      	movs	r3, #0
   1a864:	e7a7      	b.n	1a7b6 <radio_adv_enable+0x1f6>
				cpu_sleep();
   1a866:	f7f7 fd63 	bl	12330 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1a86a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a86c:	2b02      	cmp	r3, #2
   1a86e:	d0fa      	beq.n	1a866 <radio_adv_enable+0x2a6>
   1a870:	e7c6      	b.n	1a800 <radio_adv_enable+0x240>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a872:	f7f7 fd1d 	bl	122b0 <ticker_ticks_now_get>
		ret =
   1a876:	e9cd 9a07 	strd	r9, sl, [sp, #28]
   1a87a:	e9cd b605 	strd	fp, r6, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a87e:	900a      	str	r0, [sp, #40]	; 0x28
   1a880:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   1a882:	4821      	ldr	r0, [pc, #132]	; (1a908 <radio_adv_enable+0x348>)
		ret =
   1a884:	9602      	str	r6, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   1a886:	fa1f f888 	uxth.w	r8, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a88a:	441f      	add	r7, r3
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   1a88c:	fba8 0100 	umull	r0, r1, r8, r0
   1a890:	2391      	movs	r3, #145	; 0x91
   1a892:	fb03 1108 	mla	r1, r3, r8, r1
   1a896:	a314      	add	r3, pc, #80	; (adr r3, 1a8e8 <radio_adv_enable+0x328>)
   1a898:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret =
   1a89c:	e9cd 6703 	strd	r6, r7, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   1a8a0:	f7e5 fd08 	bl	2b4 <__aeabi_uldivmod>
		ret =
   1a8a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a8a6:	e9cd 6000 	strd	r6, r0, [sp]
   1a8aa:	2205      	movs	r2, #5
   1a8ac:	2103      	movs	r1, #3
   1a8ae:	4630      	mov	r0, r6
   1a8b0:	e7b9      	b.n	1a826 <radio_adv_enable+0x266>
			cpu_sleep();
   1a8b2:	f7f7 fd3d 	bl	12330 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   1a8b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a8b8:	2b02      	cmp	r3, #2
   1a8ba:	d0fa      	beq.n	1a8b2 <radio_adv_enable+0x2f2>
   1a8bc:	e7b7      	b.n	1a82e <radio_adv_enable+0x26e>
		_radio.advertiser.is_enabled = 1;
   1a8be:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1a8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a8c6:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   1a8ca:	f895 30e0 	ldrb.w	r3, [r5, #224]	; 0xe0
   1a8ce:	f013 0401 	ands.w	r4, r3, #1
   1a8d2:	d103      	bne.n	1a8dc <radio_adv_enable+0x31c>
			ll_adv_scan_state_cb(BIT(0));
   1a8d4:	2001      	movs	r0, #1
   1a8d6:	f003 fb31 	bl	1df3c <ll_adv_scan_state_cb>
		return 0;
   1a8da:	4620      	mov	r0, r4
}
   1a8dc:	b00f      	add	sp, #60	; 0x3c
   1a8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8e2:	bf00      	nop
   1a8e4:	f3af 8000 	nop.w
   1a8e8:	1afd498d 	.word	0x1afd498d
   1a8ec:	00000007 	.word	0x00000007
   1a8f0:	2000126c 	.word	0x2000126c
   1a8f4:	01480148 	.word	0x01480148
   1a8f8:	3b9aca00 	.word	0x3b9aca00
   1a8fc:	00014d99 	.word	0x00014d99
   1a900:	200013b4 	.word	0x200013b4
   1a904:	20001378 	.word	0x20001378
   1a908:	84e72a00 	.word	0x84e72a00
   1a90c:	00012375 	.word	0x00012375
   1a910:	00014c35 	.word	0x00014c35

0001a914 <radio_adv_disable>:
{
   1a914:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   1a916:	2103      	movs	r1, #3
   1a918:	2005      	movs	r0, #5
   1a91a:	f7f7 ff2b 	bl	12774 <role_disable>
	if (!status) {
   1a91e:	4605      	mov	r5, r0
   1a920:	b9e8      	cbnz	r0, 1a95e <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
   1a922:	4c10      	ldr	r4, [pc, #64]	; (1a964 <radio_adv_disable+0x50>)
   1a924:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   1a928:	f360 12c7 	bfi	r2, r0, #7, #1
   1a92c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   1a930:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   1a934:	07d3      	lsls	r3, r2, #31
   1a936:	d401      	bmi.n	1a93c <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
   1a938:	f003 fb00 	bl	1df3c <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
   1a93c:	f8d4 60cc 	ldr.w	r6, [r4, #204]	; 0xcc
		if (conn) {
   1a940:	b15e      	cbz	r6, 1a95a <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
   1a942:	2300      	movs	r3, #0
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   1a944:	4908      	ldr	r1, [pc, #32]	; (1a968 <radio_adv_disable+0x54>)
   1a946:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
			_radio.advertiser.conn = NULL;
   1a94a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   1a94e:	f7f6 fce6 	bl	1131e <mem_release>
			mem_release(conn, &_radio.conn_free);
   1a952:	4906      	ldr	r1, [pc, #24]	; (1a96c <radio_adv_disable+0x58>)
   1a954:	4630      	mov	r0, r6
   1a956:	f7f6 fce2 	bl	1131e <mem_release>
}
   1a95a:	4628      	mov	r0, r5
   1a95c:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   1a95e:	250c      	movs	r5, #12
   1a960:	e7fb      	b.n	1a95a <radio_adv_disable+0x46>
   1a962:	bf00      	nop
   1a964:	2000126c 	.word	0x2000126c
   1a968:	200013b4 	.word	0x200013b4
   1a96c:	20001378 	.word	0x20001378

0001a970 <radio_scan_enable>:
{
   1a970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   1a974:	4c68      	ldr	r4, [pc, #416]	; (1ab18 <radio_scan_enable+0x1a8>)
   1a976:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   1a97a:	b08e      	sub	sp, #56	; 0x38
   1a97c:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   1a97e:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1a982:	f04f 0302 	mov.w	r3, #2
{
   1a986:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1a988:	930b      	str	r3, [sp, #44]	; 0x2c
{
   1a98a:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   1a98c:	d003      	beq.n	1a996 <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a98e:	200c      	movs	r0, #12
}
   1a990:	b00e      	add	sp, #56	; 0x38
   1a992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   1a996:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   1a99a:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   1a99e:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   1a9a2:	0840      	lsrs	r0, r0, #1
   1a9a4:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   1a9a8:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   1a9ac:	f360 0200 	bfi	r2, r0, #0, #1
   1a9b0:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   1a9b4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   1a9b8:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   1a9bc:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   1a9c0:	2206      	movs	r2, #6
   1a9c2:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   1a9c6:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   1a9ca:	4e54      	ldr	r6, [pc, #336]	; (1ab1c <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   1a9cc:	f7ec f95c 	bl	6c88 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   1a9d0:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   1a9d4:	f04f 0991 	mov.w	r9, #145	; 0x91
   1a9d8:	fba2 0106 	umull	r0, r1, r2, r6
   1a9dc:	fb09 1102 	mla	r1, r9, r2, r1
   1a9e0:	a34b      	add	r3, pc, #300	; (adr r3, 1ab10 <radio_scan_enable+0x1a0>)
   1a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a9e6:	f7e5 fc65 	bl	2b4 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   1a9ea:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1a9ee:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   1a9f2:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   1a9f6:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   1a9fa:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   1a9fe:	b2ba      	uxth	r2, r7
   1aa00:	fba2 6706 	umull	r6, r7, r2, r6
   1aa04:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   1aa08:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   1aa0c:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   1aa0e:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   1aa12:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   1aa16:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   1aa1a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   1aa1e:	a33c      	add	r3, pc, #240	; (adr r3, 1ab10 <radio_scan_enable+0x1a0>)
   1aa20:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa24:	4630      	mov	r0, r6
   1aa26:	4639      	mov	r1, r7
   1aa28:	f7e5 fc44 	bl	2b4 <__aeabi_uldivmod>
	    (ticks_interval -
   1aa2c:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   1aa30:	459a      	cmp	sl, r3
   1aa32:	bf94      	ite	ls
   1aa34:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   1aa38:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   1aa3c:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   1aa40:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   1aa42:	bf38      	it	cc
   1aa44:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   1aa48:	f7f7 fc32 	bl	122b0 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   1aa4c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   1aa50:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   1aa52:	2b00      	cmp	r3, #0
   1aa54:	d045      	beq.n	1aae2 <radio_scan_enable+0x172>
		us_offset = 0;
   1aa56:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   1aa58:	980c      	ldr	r0, [sp, #48]	; 0x30
   1aa5a:	4931      	ldr	r1, [pc, #196]	; (1ab20 <radio_scan_enable+0x1b0>)
   1aa5c:	a32c      	add	r3, pc, #176	; (adr r3, 1ab10 <radio_scan_enable+0x1a0>)
   1aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa62:	fba0 0101 	umull	r0, r1, r0, r1
   1aa66:	f7e5 fc25 	bl	2b4 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1aa6a:	ab0b      	add	r3, sp, #44	; 0x2c
   1aa6c:	9308      	str	r3, [sp, #32]
   1aa6e:	4b2d      	ldr	r3, [pc, #180]	; (1ab24 <radio_scan_enable+0x1b4>)
   1aa70:	9307      	str	r3, [sp, #28]
   1aa72:	4b2d      	ldr	r3, [pc, #180]	; (1ab28 <radio_scan_enable+0x1b8>)
   1aa74:	9305      	str	r3, [sp, #20]
   1aa76:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
   1aa7a:	2500      	movs	r5, #0
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   1aa7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1aa80:	4443      	add	r3, r8
   1aa82:	4482      	add	sl, r0
   1aa84:	e9cd 5303 	strd	r5, r3, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   1aa88:	4630      	mov	r0, r6
   1aa8a:	a321      	add	r3, pc, #132	; (adr r3, 1ab10 <radio_scan_enable+0x1a0>)
   1aa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa90:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1aa92:	9506      	str	r5, [sp, #24]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   1aa94:	f7e5 fc0e 	bl	2b4 <__aeabi_uldivmod>
   1aa98:	4610      	mov	r0, r2
   1aa9a:	4619      	mov	r1, r3
   1aa9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1aaa0:	2300      	movs	r3, #0
   1aaa2:	f7e5 fc07 	bl	2b4 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1aaa6:	9500      	str	r5, [sp, #0]
   1aaa8:	e9cd 9001 	strd	r9, r0, [sp, #4]
   1aaac:	4653      	mov	r3, sl
   1aaae:	2206      	movs	r2, #6
   1aab0:	2103      	movs	r1, #3
   1aab2:	4628      	mov	r0, r5
   1aab4:	f7f7 faa0 	bl	11ff8 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   1aab8:	2802      	cmp	r0, #2
   1aaba:	d023      	beq.n	1ab04 <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   1aabc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1aabe:	2d00      	cmp	r5, #0
   1aac0:	f47f af65 	bne.w	1a98e <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   1aac4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1aac8:	f043 0301 	orr.w	r3, r3, #1
   1aacc:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   1aad0:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   1aad4:	2b00      	cmp	r3, #0
   1aad6:	db02      	blt.n	1aade <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   1aad8:	2002      	movs	r0, #2
   1aada:	f003 fa2f 	bl	1df3c <ll_adv_scan_state_cb>
	return 0;
   1aade:	4628      	mov	r0, r5
   1aae0:	e756      	b.n	1a990 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   1aae2:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   1aae6:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   1aae8:	aa0d      	add	r2, sp, #52	; 0x34
   1aaea:	ab0c      	add	r3, sp, #48	; 0x30
   1aaec:	4441      	add	r1, r8
   1aaee:	2003      	movs	r0, #3
   1aaf0:	f7f8 fb16 	bl	13120 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   1aaf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1aaf6:	2b00      	cmp	r3, #0
   1aaf8:	d0ae      	beq.n	1aa58 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   1aafa:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   1aafe:	e7ab      	b.n	1aa58 <radio_scan_enable+0xe8>
			cpu_sleep();
   1ab00:	f7f7 fc16 	bl	12330 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   1ab04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ab06:	2b02      	cmp	r3, #2
   1ab08:	d0fa      	beq.n	1ab00 <radio_scan_enable+0x190>
   1ab0a:	e7d7      	b.n	1aabc <radio_scan_enable+0x14c>
   1ab0c:	f3af 8000 	nop.w
   1ab10:	1afd498d 	.word	0x1afd498d
   1ab14:	00000007 	.word	0x00000007
   1ab18:	2000126c 	.word	0x2000126c
   1ab1c:	84e72a00 	.word	0x84e72a00
   1ab20:	3b9aca00 	.word	0x3b9aca00
   1ab24:	00012375 	.word	0x00012375
   1ab28:	00014cb1 	.word	0x00014cb1

0001ab2c <radio_scan_disable>:
{
   1ab2c:	b510      	push	{r4, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   1ab2e:	2104      	movs	r1, #4
   1ab30:	2006      	movs	r0, #6
   1ab32:	f7f7 fe1f 	bl	12774 <role_disable>
	if (!status && !_radio.scanner.conn) {
   1ab36:	4604      	mov	r4, r0
   1ab38:	b988      	cbnz	r0, 1ab5e <radio_scan_disable+0x32>
   1ab3a:	4b0a      	ldr	r3, [pc, #40]	; (1ab64 <radio_scan_disable+0x38>)
   1ab3c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1ab40:	b95a      	cbnz	r2, 1ab5a <radio_scan_disable+0x2e>
		_radio.scanner.is_enabled = 0;
   1ab42:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
   1ab46:	f360 0200 	bfi	r2, r0, #0, #1
   1ab4a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   1ab4e:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
   1ab52:	2b00      	cmp	r3, #0
   1ab54:	db01      	blt.n	1ab5a <radio_scan_disable+0x2e>
			ll_adv_scan_state_cb(0);
   1ab56:	f003 f9f1 	bl	1df3c <ll_adv_scan_state_cb>
}
   1ab5a:	4620      	mov	r0, r4
   1ab5c:	bd10      	pop	{r4, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   1ab5e:	240c      	movs	r4, #12
   1ab60:	e7fb      	b.n	1ab5a <radio_scan_disable+0x2e>
   1ab62:	bf00      	nop
   1ab64:	2000126c 	.word	0x2000126c

0001ab68 <ll_connect_disable>:
{
   1ab68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.scanner.conn == 0) {
   1ab6a:	4e10      	ldr	r6, [pc, #64]	; (1abac <ll_connect_disable+0x44>)
   1ab6c:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
{
   1ab70:	4607      	mov	r7, r0
	if (_radio.scanner.conn == 0) {
   1ab72:	b1cb      	cbz	r3, 1aba8 <ll_connect_disable+0x40>
	status = radio_scan_disable();
   1ab74:	f7ff ffda 	bl	1ab2c <radio_scan_disable>
	if (!status) {
   1ab78:	4605      	mov	r5, r0
   1ab7a:	b998      	cbnz	r0, 1aba4 <ll_connect_disable+0x3c>
		struct connection *conn = _radio.scanner.conn;
   1ab7c:	f8d6 4100 	ldr.w	r4, [r6, #256]	; 0x100
		mem_release(rx->hdr.onion.link, &_radio.link_rx_free);
   1ab80:	f506 71a4 	add.w	r1, r6, #328	; 0x148
   1ab84:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1ab88:	f7f6 fbc9 	bl	1131e <mem_release>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1ab8c:	2306      	movs	r3, #6
   1ab8e:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
		rx->hdr.handle = 0xffff;
   1ab92:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ab96:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
		*((u8_t *)rx->pdu_data) = BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ab9a:	2302      	movs	r3, #2
   1ab9c:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
   1aba0:	34b4      	adds	r4, #180	; 0xb4
		*node_rx = rx;
   1aba2:	603c      	str	r4, [r7, #0]
}
   1aba4:	4628      	mov	r0, r5
   1aba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1aba8:	250c      	movs	r5, #12
   1abaa:	e7fb      	b.n	1aba4 <ll_connect_disable+0x3c>
   1abac:	2000126c 	.word	0x2000126c

0001abb0 <ll_rx_dequeue>:
{
   1abb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   1abb2:	4d67      	ldr	r5, [pc, #412]	; (1ad50 <ll_rx_dequeue+0x1a0>)
	struct radio_pdu_node_rx *node_rx = NULL;
   1abb4:	aa02      	add	r2, sp, #8
   1abb6:	2600      	movs	r6, #0
   1abb8:	f842 6d04 	str.w	r6, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   1abbc:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   1abc0:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   1abc4:	f7f6 fbfa 	bl	113bc <memq_dequeue>
   1abc8:	462c      	mov	r4, r5
	LL_ASSERT(link);
   1abca:	b9d0      	cbnz	r0, 1ac02 <ll_rx_dequeue+0x52>
   1abcc:	4a61      	ldr	r2, [pc, #388]	; (1ad54 <ll_rx_dequeue+0x1a4>)
   1abce:	6812      	ldr	r2, [r2, #0]
   1abd0:	0756      	lsls	r6, r2, #29
   1abd2:	d010      	beq.n	1abf6 <ll_rx_dequeue+0x46>
   1abd4:	2101      	movs	r1, #1
   1abd6:	f04f 0200 	mov.w	r2, #0
   1abda:	f361 0202 	bfi	r2, r1, #0, #3
   1abde:	4b5e      	ldr	r3, [pc, #376]	; (1ad58 <ll_rx_dequeue+0x1a8>)
   1abe0:	495e      	ldr	r1, [pc, #376]	; (1ad5c <ll_rx_dequeue+0x1ac>)
   1abe2:	1a5b      	subs	r3, r3, r1
   1abe4:	f360 02c5 	bfi	r2, r0, #3, #3
   1abe8:	08db      	lsrs	r3, r3, #3
   1abea:	495d      	ldr	r1, [pc, #372]	; (1ad60 <ll_rx_dequeue+0x1b0>)
   1abec:	485d      	ldr	r0, [pc, #372]	; (1ad64 <ll_rx_dequeue+0x1b4>)
   1abee:	f363 128f 	bfi	r2, r3, #6, #10
			LL_ASSERT(_radio.scanner.is_enabled);
   1abf2:	f7e7 fa7b 	bl	20ec <log_1>
   1abf6:	4040      	eors	r0, r0
   1abf8:	f380 8811 	msr	BASEPRI, r0
   1abfc:	f04f 0004 	mov.w	r0, #4
   1ac00:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   1ac02:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   1ac06:	f7f6 fb8a 	bl	1131e <mem_release>
	switch (node_rx->hdr.type) {
   1ac0a:	9a01      	ldr	r2, [sp, #4]
   1ac0c:	7911      	ldrb	r1, [r2, #4]
   1ac0e:	290c      	cmp	r1, #12
   1ac10:	d808      	bhi.n	1ac24 <ll_rx_dequeue+0x74>
   1ac12:	2701      	movs	r7, #1
   1ac14:	fa07 f301 	lsl.w	r3, r7, r1
   1ac18:	f641 707e 	movw	r0, #8062	; 0x1f7e
   1ac1c:	4203      	tst	r3, r0
   1ac1e:	d115      	bne.n	1ac4c <ll_rx_dequeue+0x9c>
   1ac20:	061d      	lsls	r5, r3, #24
   1ac22:	d430      	bmi.n	1ac86 <ll_rx_dequeue+0xd6>
		LL_ASSERT(0);
   1ac24:	4b4b      	ldr	r3, [pc, #300]	; (1ad54 <ll_rx_dequeue+0x1a4>)
   1ac26:	681b      	ldr	r3, [r3, #0]
   1ac28:	0759      	lsls	r1, r3, #29
   1ac2a:	d0e4      	beq.n	1abf6 <ll_rx_dequeue+0x46>
   1ac2c:	2301      	movs	r3, #1
   1ac2e:	f04f 0200 	mov.w	r2, #0
   1ac32:	f363 0202 	bfi	r2, r3, #0, #3
   1ac36:	4949      	ldr	r1, [pc, #292]	; (1ad5c <ll_rx_dequeue+0x1ac>)
   1ac38:	4b47      	ldr	r3, [pc, #284]	; (1ad58 <ll_rx_dequeue+0x1a8>)
   1ac3a:	484b      	ldr	r0, [pc, #300]	; (1ad68 <ll_rx_dequeue+0x1b8>)
   1ac3c:	1a5b      	subs	r3, r3, r1
   1ac3e:	f36f 02c5 	bfc	r2, #3, #3
   1ac42:	08db      	lsrs	r3, r3, #3
   1ac44:	f363 128f 	bfi	r2, r3, #6, #10
   1ac48:	4945      	ldr	r1, [pc, #276]	; (1ad60 <ll_rx_dequeue+0x1b0>)
   1ac4a:	e7d2      	b.n	1abf2 <ll_rx_dequeue+0x42>
		LL_ASSERT(_radio.link_rx_data_quota <
   1ac4c:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   1ac50:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   1ac54:	3801      	subs	r0, #1
   1ac56:	4283      	cmp	r3, r0
   1ac58:	db12      	blt.n	1ac80 <ll_rx_dequeue+0xd0>
   1ac5a:	4b3e      	ldr	r3, [pc, #248]	; (1ad54 <ll_rx_dequeue+0x1a4>)
   1ac5c:	681b      	ldr	r3, [r3, #0]
   1ac5e:	0758      	lsls	r0, r3, #29
   1ac60:	d0c9      	beq.n	1abf6 <ll_rx_dequeue+0x46>
   1ac62:	493e      	ldr	r1, [pc, #248]	; (1ad5c <ll_rx_dequeue+0x1ac>)
   1ac64:	4b3c      	ldr	r3, [pc, #240]	; (1ad58 <ll_rx_dequeue+0x1a8>)
   1ac66:	4841      	ldr	r0, [pc, #260]	; (1ad6c <ll_rx_dequeue+0x1bc>)
   1ac68:	f04f 0200 	mov.w	r2, #0
   1ac6c:	1a5b      	subs	r3, r3, r1
   1ac6e:	f367 0202 	bfi	r2, r7, #0, #3
   1ac72:	f366 02c5 	bfi	r2, r6, #3, #3
   1ac76:	08db      	lsrs	r3, r3, #3
   1ac78:	f363 128f 	bfi	r2, r3, #6, #10
   1ac7c:	4938      	ldr	r1, [pc, #224]	; (1ad60 <ll_rx_dequeue+0x1b0>)
   1ac7e:	e7b8      	b.n	1abf2 <ll_rx_dequeue+0x42>
		_radio.link_rx_data_quota++;
   1ac80:	3301      	adds	r3, #1
   1ac82:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   1ac86:	2906      	cmp	r1, #6
   1ac88:	d151      	bne.n	1ad2e <ll_rx_dequeue+0x17e>
		if ((radio_le_conn_cmplt->status == BT_HCI_ERR_ADV_TIMEOUT) ||
   1ac8a:	7a13      	ldrb	r3, [r2, #8]
   1ac8c:	2b3c      	cmp	r3, #60	; 0x3c
   1ac8e:	d01b      	beq.n	1acc8 <ll_rx_dequeue+0x118>
   1ac90:	7a52      	ldrb	r2, [r2, #9]
   1ac92:	2a00      	cmp	r2, #0
   1ac94:	d135      	bne.n	1ad02 <ll_rx_dequeue+0x152>
			LL_ASSERT(_radio.scanner.is_enabled);
   1ac96:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1ac9a:	f013 0101 	ands.w	r1, r3, #1
   1ac9e:	d148      	bne.n	1ad32 <ll_rx_dequeue+0x182>
   1aca0:	4b2c      	ldr	r3, [pc, #176]	; (1ad54 <ll_rx_dequeue+0x1a4>)
   1aca2:	681b      	ldr	r3, [r3, #0]
   1aca4:	075b      	lsls	r3, r3, #29
   1aca6:	d0a6      	beq.n	1abf6 <ll_rx_dequeue+0x46>
   1aca8:	2301      	movs	r3, #1
   1acaa:	f04f 0200 	mov.w	r2, #0
   1acae:	f363 0202 	bfi	r2, r3, #0, #3
   1acb2:	f361 02c5 	bfi	r2, r1, #3, #3
   1acb6:	4b28      	ldr	r3, [pc, #160]	; (1ad58 <ll_rx_dequeue+0x1a8>)
   1acb8:	4928      	ldr	r1, [pc, #160]	; (1ad5c <ll_rx_dequeue+0x1ac>)
   1acba:	482d      	ldr	r0, [pc, #180]	; (1ad70 <ll_rx_dequeue+0x1c0>)
   1acbc:	1a5b      	subs	r3, r3, r1
   1acbe:	08db      	lsrs	r3, r3, #3
   1acc0:	f363 128f 	bfi	r2, r3, #6, #10
   1acc4:	4926      	ldr	r1, [pc, #152]	; (1ad60 <ll_rx_dequeue+0x1b0>)
   1acc6:	e794      	b.n	1abf2 <ll_rx_dequeue+0x42>
				_radio.advertiser.conn = NULL;
   1acc8:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   1acca:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   1acce:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   1acd2:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   1acd6:	2b00      	cmp	r3, #0
   1acd8:	db15      	blt.n	1ad06 <ll_rx_dequeue+0x156>
   1acda:	4b1e      	ldr	r3, [pc, #120]	; (1ad54 <ll_rx_dequeue+0x1a4>)
   1acdc:	681b      	ldr	r3, [r3, #0]
   1acde:	075a      	lsls	r2, r3, #29
   1ace0:	d089      	beq.n	1abf6 <ll_rx_dequeue+0x46>
   1ace2:	2301      	movs	r3, #1
   1ace4:	f04f 0200 	mov.w	r2, #0
   1ace8:	f363 0202 	bfi	r2, r3, #0, #3
   1acec:	491b      	ldr	r1, [pc, #108]	; (1ad5c <ll_rx_dequeue+0x1ac>)
   1acee:	4b1a      	ldr	r3, [pc, #104]	; (1ad58 <ll_rx_dequeue+0x1a8>)
   1acf0:	4820      	ldr	r0, [pc, #128]	; (1ad74 <ll_rx_dequeue+0x1c4>)
   1acf2:	1a5b      	subs	r3, r3, r1
   1acf4:	f36f 02c5 	bfc	r2, #3, #3
   1acf8:	08db      	lsrs	r3, r3, #3
   1acfa:	f363 128f 	bfi	r2, r3, #6, #10
   1acfe:	4918      	ldr	r1, [pc, #96]	; (1ad60 <ll_rx_dequeue+0x1b0>)
   1ad00:	e777      	b.n	1abf2 <ll_rx_dequeue+0x42>
		struct connection *conn = NULL;
   1ad02:	2500      	movs	r5, #0
   1ad04:	e7e5      	b.n	1acd2 <ll_rx_dequeue+0x122>
			_radio.advertiser.is_enabled = 0;
   1ad06:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1ad0a:	f36f 13c7 	bfc	r3, #7, #1
   1ad0e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   1ad12:	b99d      	cbnz	r5, 1ad3c <ll_rx_dequeue+0x18c>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   1ad14:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   1ad18:	f000 0301 	and.w	r3, r0, #1
		     _radio.advertiser.is_enabled;
   1ad1c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   1ad20:	f3c0 10c0 	ubfx	r0, r0, #7, #1
		if (!bm) {
   1ad24:	ea50 0043 	orrs.w	r0, r0, r3, lsl #1
   1ad28:	d101      	bne.n	1ad2e <ll_rx_dequeue+0x17e>
			ll_adv_scan_state_cb(0);
   1ad2a:	f003 f907 	bl	1df3c <ll_adv_scan_state_cb>
}
   1ad2e:	b003      	add	sp, #12
   1ad30:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_radio.scanner.is_enabled = 0;
   1ad32:	f362 0300 	bfi	r3, r2, #0, #1
   1ad36:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   1ad3a:	e7eb      	b.n	1ad14 <ll_rx_dequeue+0x164>
			mem_release(node_rx->hdr.onion.link,
   1ad3c:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   1ad40:	490d      	ldr	r1, [pc, #52]	; (1ad78 <ll_rx_dequeue+0x1c8>)
   1ad42:	f7f6 faec 	bl	1131e <mem_release>
			mem_release(conn, &_radio.conn_free);
   1ad46:	490d      	ldr	r1, [pc, #52]	; (1ad7c <ll_rx_dequeue+0x1cc>)
   1ad48:	4628      	mov	r0, r5
   1ad4a:	f7f6 fae8 	bl	1131e <mem_release>
   1ad4e:	e7e1      	b.n	1ad14 <ll_rx_dequeue+0x164>
   1ad50:	2000126c 	.word	0x2000126c
   1ad54:	2000e218 	.word	0x2000e218
   1ad58:	0002ef70 	.word	0x0002ef70
   1ad5c:	0002ef38 	.word	0x0002ef38
   1ad60:	00032d17 	.word	0x00032d17
   1ad64:	00032d65 	.word	0x00032d65
   1ad68:	0003146d 	.word	0x0003146d
   1ad6c:	00032e1f 	.word	0x00032e1f
   1ad70:	0003326b 	.word	0x0003326b
   1ad74:	00033239 	.word	0x00033239
   1ad78:	200013b4 	.word	0x200013b4
   1ad7c:	20001378 	.word	0x20001378

0001ad80 <ll_rx_mem_release>:
{
   1ad80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(_node_rx_free,
   1ad84:	4e2e      	ldr	r6, [pc, #184]	; (1ae40 <ll_rx_mem_release+0xc0>)
{
   1ad86:	4607      	mov	r7, r0
	_node_rx = *node_rx;
   1ad88:	6800      	ldr	r0, [r0, #0]
					conn = _radio.scanner.conn;
   1ad8a:	f5a6 7498 	sub.w	r4, r6, #304	; 0x130
					mem_release(conn, &_radio.conn_free);
   1ad8e:	f1a6 0824 	sub.w	r8, r6, #36	; 0x24
	while (_node_rx) {
   1ad92:	b928      	cbnz	r0, 1ada0 <ll_rx_mem_release+0x20>
	*node_rx = _node_rx;
   1ad94:	6038      	str	r0, [r7, #0]
	packet_rx_allocate(0xff);
   1ad96:	20ff      	movs	r0, #255	; 0xff
}
   1ad98:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	packet_rx_allocate(0xff);
   1ad9c:	f7f7 bbac 	b.w	124f8 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   1ada0:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   1ada2:	f8d0 9000 	ldr.w	r9, [r0]
   1ada6:	2a0c      	cmp	r2, #12
   1ada8:	d809      	bhi.n	1adbe <ll_rx_mem_release+0x3e>
   1adaa:	2301      	movs	r3, #1
   1adac:	4093      	lsls	r3, r2
   1adae:	f641 753e 	movw	r5, #7998	; 0x1f3e
   1adb2:	401d      	ands	r5, r3
   1adb4:	d137      	bne.n	1ae26 <ll_rx_mem_release+0xa6>
   1adb6:	0659      	lsls	r1, r3, #25
   1adb8:	d41c      	bmi.n	1adf4 <ll_rx_mem_release+0x74>
   1adba:	061a      	lsls	r2, r3, #24
   1adbc:	d437      	bmi.n	1ae2e <ll_rx_mem_release+0xae>
			LL_ASSERT(0);
   1adbe:	4b21      	ldr	r3, [pc, #132]	; (1ae44 <ll_rx_mem_release+0xc4>)
   1adc0:	681b      	ldr	r3, [r3, #0]
   1adc2:	075b      	lsls	r3, r3, #29
   1adc4:	d010      	beq.n	1ade8 <ll_rx_mem_release+0x68>
   1adc6:	2301      	movs	r3, #1
   1adc8:	f04f 0200 	mov.w	r2, #0
   1adcc:	f363 0202 	bfi	r2, r3, #0, #3
   1add0:	491d      	ldr	r1, [pc, #116]	; (1ae48 <ll_rx_mem_release+0xc8>)
   1add2:	4b1e      	ldr	r3, [pc, #120]	; (1ae4c <ll_rx_mem_release+0xcc>)
   1add4:	481e      	ldr	r0, [pc, #120]	; (1ae50 <ll_rx_mem_release+0xd0>)
   1add6:	1a5b      	subs	r3, r3, r1
   1add8:	f36f 02c5 	bfc	r2, #3, #3
   1addc:	08db      	lsrs	r3, r3, #3
   1adde:	f363 128f 	bfi	r2, r3, #6, #10
   1ade2:	491c      	ldr	r1, [pc, #112]	; (1ae54 <ll_rx_mem_release+0xd4>)
   1ade4:	f7e7 f982 	bl	20ec <log_1>
   1ade8:	4040      	eors	r0, r0
   1adea:	f380 8811 	msr	BASEPRI, r0
   1adee:	f04f 0004 	mov.w	r0, #4
   1adf2:	df02      	svc	2
				if (*((u8_t *)_node_rx_free->pdu_data) ==
   1adf4:	7a03      	ldrb	r3, [r0, #8]
   1adf6:	2b02      	cmp	r3, #2
   1adf8:	d115      	bne.n	1ae26 <ll_rx_mem_release+0xa6>
					conn = _radio.scanner.conn;
   1adfa:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
					_radio.scanner.conn = NULL;
   1adfe:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
					mem_release(conn, &_radio.conn_free);
   1ae02:	4641      	mov	r1, r8
   1ae04:	f7f6 fa8b 	bl	1131e <mem_release>
					_radio.scanner.is_enabled = 0;
   1ae08:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1ae0c:	f365 0300 	bfi	r3, r5, #0, #1
   1ae10:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
					if (!_radio.advertiser.is_enabled) {
   1ae14:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   1ae18:	2b00      	cmp	r3, #0
   1ae1a:	db02      	blt.n	1ae22 <ll_rx_mem_release+0xa2>
						ll_adv_scan_state_cb(0);
   1ae1c:	4628      	mov	r0, r5
   1ae1e:	f003 f88d 	bl	1df3c <ll_adv_scan_state_cb>
{
   1ae22:	4648      	mov	r0, r9
   1ae24:	e7b5      	b.n	1ad92 <ll_rx_mem_release+0x12>
			mem_release(_node_rx_free,
   1ae26:	4631      	mov	r1, r6
			mem_release(conn, &_radio.conn_free);
   1ae28:	f7f6 fa79 	bl	1131e <mem_release>
			break;
   1ae2c:	e7f9      	b.n	1ae22 <ll_rx_mem_release+0xa2>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1ae2e:	88c2      	ldrh	r2, [r0, #6]
   1ae30:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
   1ae34:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1ae38:	f7f6 fa8c 	bl	11354 <mem_get>
			mem_release(conn, &_radio.conn_free);
   1ae3c:	4641      	mov	r1, r8
   1ae3e:	e7f3      	b.n	1ae28 <ll_rx_mem_release+0xa8>
   1ae40:	2000139c 	.word	0x2000139c
   1ae44:	2000e218 	.word	0x2000e218
   1ae48:	0002ef38 	.word	0x0002ef38
   1ae4c:	0002ef70 	.word	0x0002ef70
   1ae50:	0003146d 	.word	0x0003146d
   1ae54:	00032d25 	.word	0x00032d25

0001ae58 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   1ae58:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   1ae5a:	4c0b      	ldr	r4, [pc, #44]	; (1ae88 <rtc0_nrf5_isr+0x30>)
   1ae5c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   1ae60:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   1ae64:	b122      	cbz	r2, 1ae70 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1ae66:	2000      	movs	r0, #0
   1ae68:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   1ae6c:	f7f7 f8b2 	bl	11fd4 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   1ae70:	b12d      	cbz	r5, 1ae7e <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   1ae72:	2300      	movs	r3, #0
   1ae74:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   1ae78:	2001      	movs	r0, #1
   1ae7a:	f7f7 f8ab 	bl	11fd4 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   1ae7e:	2000      	movs	r0, #0
}
   1ae80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   1ae84:	f7f6 bb48 	b.w	11518 <mayfly_run>
   1ae88:	4000b000 	.word	0x4000b000

0001ae8c <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   1ae8c:	2001      	movs	r0, #1
   1ae8e:	f7f6 bb43 	b.w	11518 <mayfly_run>

0001ae92 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1ae92:	4668      	mov	r0, sp
   1ae94:	f020 0107 	bic.w	r1, r0, #7
   1ae98:	468d      	mov	sp, r1
   1ae9a:	b501      	push	{r0, lr}
   1ae9c:	f7eb fbfa 	bl	6694 <_arch_isr_direct_header>
	isr_radio();
   1aea0:	f003 fc00 	bl	1e6a4 <isr_radio>
	ISR_DIRECT_PM();
   1aea4:	f7eb fbe8 	bl	6678 <_arch_isr_direct_pm>
	if (maybe_swap) {

#ifdef CONFIG_TRACING
		z_sys_trace_isr_exit_to_scheduler();
#endif
		_IntExit();
   1aea8:	f7eb f9f2 	bl	6290 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1aeac:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1aeb0:	4685      	mov	sp, r0
   1aeb2:	4770      	bx	lr

0001aeb4 <radio_active_callback>:
}
   1aeb4:	4770      	bx	lr
	...

0001aeb8 <radio_event_callback>:
	k_sem_give(sem_recv);
   1aeb8:	4b01      	ldr	r3, [pc, #4]	; (1aec0 <radio_event_callback+0x8>)
   1aeba:	6818      	ldr	r0, [r3, #0]
   1aebc:	f013 b9dd 	b.w	2e27a <_impl_k_sem_give>
   1aec0:	20001bf0 	.word	0x20001bf0

0001aec4 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   1aec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   1aec8:	4b4f      	ldr	r3, [pc, #316]	; (1b008 <ll_init+0x144>)
{
   1aeca:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   1aecc:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   1aece:	484f      	ldr	r0, [pc, #316]	; (1b00c <ll_init+0x148>)
   1aed0:	f012 fada 	bl	2d488 <device_get_binding>
	if (!clk_k32) {
   1aed4:	b920      	cbnz	r0, 1aee0 <ll_init+0x1c>
		return -ENODEV;
   1aed6:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   1aeda:	b006      	add	sp, #24
   1aedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->on(dev, sys);
   1aee0:	6843      	ldr	r3, [r0, #4]
   1aee2:	2101      	movs	r1, #1
   1aee4:	681b      	ldr	r3, [r3, #0]
   1aee6:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   1aee8:	4849      	ldr	r0, [pc, #292]	; (1b010 <ll_init+0x14c>)
   1aeea:	f012 facd 	bl	2d488 <device_get_binding>
	if (!entropy) {
   1aeee:	4680      	mov	r8, r0
   1aef0:	2800      	cmp	r0, #0
   1aef2:	d0f0      	beq.n	1aed6 <ll_init+0x12>
	cntr_init();
   1aef4:	f003 faa8 	bl	1e448 <cntr_init>
	mayfly_init();
   1aef8:	f7f6 fa6e 	bl	113d8 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1aefc:	4b45      	ldr	r3, [pc, #276]	; (1b014 <ll_init+0x150>)
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1aefe:	2202      	movs	r2, #2
   1af00:	761a      	strb	r2, [r3, #24]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1af02:	2108      	movs	r1, #8
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   1af04:	2400      	movs	r4, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   1af06:	4a44      	ldr	r2, [pc, #272]	; (1b018 <ll_init+0x154>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1af08:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   1af0a:	2503      	movs	r5, #3
   1af0c:	721d      	strb	r5, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   1af0e:	741c      	strb	r4, [r3, #16]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   1af10:	9205      	str	r2, [sp, #20]
   1af12:	4a42      	ldr	r2, [pc, #264]	; (1b01c <ll_init+0x158>)
   1af14:	9204      	str	r2, [sp, #16]
   1af16:	4a42      	ldr	r2, [pc, #264]	; (1b020 <ll_init+0x15c>)
   1af18:	9203      	str	r2, [sp, #12]
   1af1a:	4a42      	ldr	r2, [pc, #264]	; (1b024 <ll_init+0x160>)
   1af1c:	9202      	str	r2, [sp, #8]
   1af1e:	220d      	movs	r2, #13
   1af20:	e9cd 3200 	strd	r3, r2, [sp]
   1af24:	4620      	mov	r0, r4
   1af26:	2304      	movs	r3, #4
   1af28:	4a3f      	ldr	r2, [pc, #252]	; (1b028 <ll_init+0x164>)
   1af2a:	f7f7 f817 	bl	11f5c <ticker_init>
	LL_ASSERT(!err);
   1af2e:	4607      	mov	r7, r0
   1af30:	b1d0      	cbz	r0, 1af68 <ll_init+0xa4>
   1af32:	4b3e      	ldr	r3, [pc, #248]	; (1b02c <ll_init+0x168>)
   1af34:	681b      	ldr	r3, [r3, #0]
   1af36:	075a      	lsls	r2, r3, #29
   1af38:	d010      	beq.n	1af5c <ll_init+0x98>
   1af3a:	2301      	movs	r3, #1
   1af3c:	f04f 0200 	mov.w	r2, #0
   1af40:	f363 0202 	bfi	r2, r3, #0, #3
   1af44:	493a      	ldr	r1, [pc, #232]	; (1b030 <ll_init+0x16c>)
   1af46:	4b3b      	ldr	r3, [pc, #236]	; (1b034 <ll_init+0x170>)
   1af48:	483b      	ldr	r0, [pc, #236]	; (1b038 <ll_init+0x174>)
   1af4a:	1a5b      	subs	r3, r3, r1
   1af4c:	f364 02c5 	bfi	r2, r4, #3, #3
   1af50:	40eb      	lsrs	r3, r5
   1af52:	f363 128f 	bfi	r2, r3, #6, #10
   1af56:	4939      	ldr	r1, [pc, #228]	; (1b03c <ll_init+0x178>)
   1af58:	f7e7 f8c8 	bl	20ec <log_1>
   1af5c:	4040      	eors	r0, r0
   1af5e:	f380 8811 	msr	BASEPRI, r0
   1af62:	f04f 0004 	mov.w	r0, #4
   1af66:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   1af68:	4835      	ldr	r0, [pc, #212]	; (1b040 <ll_init+0x17c>)
   1af6a:	f012 fa8d 	bl	2d488 <device_get_binding>
	if (!clk_m16) {
   1af6e:	2800      	cmp	r0, #0
   1af70:	d0b1      	beq.n	1aed6 <ll_init+0x12>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   1af72:	4b34      	ldr	r3, [pc, #208]	; (1b044 <ll_init+0x180>)
   1af74:	9304      	str	r3, [sp, #16]
   1af76:	9501      	str	r5, [sp, #4]
   1af78:	231b      	movs	r3, #27
   1af7a:	2501      	movs	r5, #1
   1af7c:	f44f 7664 	mov.w	r6, #912	; 0x390
   1af80:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1af84:	9605      	str	r6, [sp, #20]
   1af86:	9500      	str	r5, [sp, #0]
   1af88:	462b      	mov	r3, r5
   1af8a:	4642      	mov	r2, r8
   1af8c:	2107      	movs	r1, #7
   1af8e:	f7fe fc81 	bl	19894 <radio_init>
	if (err) {
   1af92:	4604      	mov	r4, r0
   1af94:	b1d0      	cbz	r0, 1afcc <ll_init+0x108>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   1af96:	4b25      	ldr	r3, [pc, #148]	; (1b02c <ll_init+0x168>)
   1af98:	681b      	ldr	r3, [r3, #0]
   1af9a:	075b      	lsls	r3, r3, #29
   1af9c:	d013      	beq.n	1afc6 <ll_init+0x102>
   1af9e:	4924      	ldr	r1, [pc, #144]	; (1b030 <ll_init+0x16c>)
   1afa0:	4b24      	ldr	r3, [pc, #144]	; (1b034 <ll_init+0x170>)
   1afa2:	f04f 0200 	mov.w	r2, #0
   1afa6:	1a5b      	subs	r3, r3, r1
   1afa8:	f365 0202 	bfi	r2, r5, #0, #3
   1afac:	08db      	lsrs	r3, r3, #3
   1afae:	f367 02c5 	bfi	r2, r7, #3, #3
   1afb2:	f363 128f 	bfi	r2, r3, #6, #10
   1afb6:	f8ad 2000 	strh.w	r2, [sp]
   1afba:	4633      	mov	r3, r6
   1afbc:	4602      	mov	r2, r0
   1afbe:	491f      	ldr	r1, [pc, #124]	; (1b03c <ll_init+0x178>)
   1afc0:	4821      	ldr	r0, [pc, #132]	; (1b048 <ll_init+0x184>)
   1afc2:	f7e7 f8bf 	bl	2144 <log_3>
		return -ENOMEM;
   1afc6:	f06f 000b 	mvn.w	r0, #11
   1afca:	e786      	b.n	1aeda <ll_init+0x16>
	ll_filter_reset(true);
   1afcc:	4628      	mov	r0, r5
   1afce:	f003 f9b3 	bl	1e338 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1afd2:	4622      	mov	r2, r4
   1afd4:	4621      	mov	r1, r4
   1afd6:	4628      	mov	r0, r5
   1afd8:	f7eb fb34 	bl	6644 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1afdc:	4622      	mov	r2, r4
   1afde:	4621      	mov	r1, r4
   1afe0:	200b      	movs	r0, #11
   1afe2:	f7eb fb2f 	bl	6644 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   1afe6:	4622      	mov	r2, r4
   1afe8:	4621      	mov	r1, r4
   1afea:	2018      	movs	r0, #24
   1afec:	f7eb fb2a 	bl	6644 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   1aff0:	4628      	mov	r0, r5
   1aff2:	f7eb faf5 	bl	65e0 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   1aff6:	200b      	movs	r0, #11
   1aff8:	f7eb faf2 	bl	65e0 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   1affc:	2018      	movs	r0, #24
   1affe:	f7eb faef 	bl	65e0 <_arch_irq_enable>
	return 0;
   1b002:	4620      	mov	r0, r4
   1b004:	e769      	b.n	1aeda <ll_init+0x16>
   1b006:	bf00      	nop
   1b008:	20001bf0 	.word	0x20001bf0
   1b00c:	0003075c 	.word	0x0003075c
   1b010:	00030737 	.word	0x00030737
   1b014:	20001bd0 	.word	0x20001bd0
   1b018:	0001f0c1 	.word	0x0001f0c1
   1b01c:	0001f009 	.word	0x0001f009
   1b020:	0001ef81 	.word	0x0001ef81
   1b024:	20001960 	.word	0x20001960
   1b028:	20001820 	.word	0x20001820
   1b02c:	2000e21c 	.word	0x2000e21c
   1b030:	0002ef38 	.word	0x0002ef38
   1b034:	0002ef78 	.word	0x0002ef78
   1b038:	00033884 	.word	0x00033884
   1b03c:	0003387c 	.word	0x0003387c
   1b040:	00030767 	.word	0x00030767
   1b044:	20001490 	.word	0x20001490
   1b048:	0003389e 	.word	0x0003389e

0001b04c <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
   1b04c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   1b04e:	4802      	ldr	r0, [pc, #8]	; (1b058 <_hci_driver_init+0xc>)
   1b050:	f7ee fcc4 	bl	99dc <bt_hci_driver_register>

	return 0;
}
   1b054:	2000      	movs	r0, #0
   1b056:	bd08      	pop	{r3, pc}
   1b058:	00033904 	.word	0x00033904

0001b05c <stack_analyze>:
{
   1b05c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	size_t unused = 0;
   1b05e:	2300      	movs	r3, #0
		if (checked_stack[i] == 0xaaU) {
   1b060:	5ccc      	ldrb	r4, [r1, r3]
   1b062:	2caa      	cmp	r4, #170	; 0xaa
   1b064:	d102      	bne.n	1b06c <stack_analyze+0x10>
			unused++;
   1b066:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   1b068:	429a      	cmp	r2, r3
   1b06a:	d1f9      	bne.n	1b060 <stack_analyze+0x4>
	pcnt = ((size - unused) * 100) / size;
   1b06c:	1ad4      	subs	r4, r2, r3
   1b06e:	2164      	movs	r1, #100	; 0x64
   1b070:	4361      	muls	r1, r4
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   1b072:	9400      	str	r4, [sp, #0]
	pcnt = ((size - unused) * 100) / size;
   1b074:	fbb1 f1f2 	udiv	r1, r1, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   1b078:	e9cd 2101 	strd	r2, r1, [sp, #4]
   1b07c:	4601      	mov	r1, r0
   1b07e:	4802      	ldr	r0, [pc, #8]	; (1b088 <stack_analyze+0x2c>)
   1b080:	f7e6 fa00 	bl	1484 <printk>
}
   1b084:	b004      	add	sp, #16
   1b086:	bd10      	pop	{r4, pc}
   1b088:	00031679 	.word	0x00031679

0001b08c <recv_thread>:
{
   1b08c:	b573      	push	{r0, r1, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1b08e:	4e37      	ldr	r6, [pc, #220]	; (1b16c <recv_thread+0xe0>)
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
   1b090:	4d37      	ldr	r5, [pc, #220]	; (1b170 <recv_thread+0xe4>)
   1b092:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b096:	4630      	mov	r0, r6
   1b098:	f012 fdf4 	bl	2dc84 <_impl_k_queue_get>
		if (node_rx && !buf) {
   1b09c:	4604      	mov	r4, r0
   1b09e:	2800      	cmp	r0, #0
   1b0a0:	d043      	beq.n	1b12a <recv_thread+0x9e>
	s8_t class = hci_get_class(node_rx);
   1b0a2:	f001 fe5b 	bl	1cd5c <hci_get_class>
	switch (class) {
   1b0a6:	1e03      	subs	r3, r0, #0
   1b0a8:	9401      	str	r4, [sp, #4]
   1b0aa:	db03      	blt.n	1b0b4 <recv_thread+0x28>
   1b0ac:	2b02      	cmp	r3, #2
   1b0ae:	dd1c      	ble.n	1b0ea <recv_thread+0x5e>
   1b0b0:	2b03      	cmp	r3, #3
   1b0b2:	d04e      	beq.n	1b152 <recv_thread+0xc6>
		LL_ASSERT(0);
   1b0b4:	4b2f      	ldr	r3, [pc, #188]	; (1b174 <recv_thread+0xe8>)
   1b0b6:	681b      	ldr	r3, [r3, #0]
   1b0b8:	075b      	lsls	r3, r3, #29
   1b0ba:	d010      	beq.n	1b0de <recv_thread+0x52>
   1b0bc:	2301      	movs	r3, #1
   1b0be:	f04f 0200 	mov.w	r2, #0
   1b0c2:	f363 0202 	bfi	r2, r3, #0, #3
   1b0c6:	492c      	ldr	r1, [pc, #176]	; (1b178 <recv_thread+0xec>)
   1b0c8:	4b2c      	ldr	r3, [pc, #176]	; (1b17c <recv_thread+0xf0>)
   1b0ca:	482d      	ldr	r0, [pc, #180]	; (1b180 <recv_thread+0xf4>)
   1b0cc:	1a5b      	subs	r3, r3, r1
   1b0ce:	f36f 02c5 	bfc	r2, #3, #3
   1b0d2:	08db      	lsrs	r3, r3, #3
   1b0d4:	f363 128f 	bfi	r2, r3, #6, #10
   1b0d8:	492a      	ldr	r1, [pc, #168]	; (1b184 <recv_thread+0xf8>)
   1b0da:	f7e7 f807 	bl	20ec <log_1>
   1b0de:	4040      	eors	r0, r0
   1b0e0:	f380 8811 	msr	BASEPRI, r0
   1b0e4:	f04f 0004 	mov.w	r0, #4
   1b0e8:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   1b0ea:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
   1b0ec:	bf0e      	itee	eq
   1b0ee:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1b0f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1b0f4:	2001      	movne	r0, #1
   1b0f6:	f7ef fa99 	bl	a62c <bt_buf_get_rx>
   1b0fa:	4604      	mov	r4, r0
		if (buf) {
   1b0fc:	b118      	cbz	r0, 1b106 <recv_thread+0x7a>
			hci_evt_encode(node_rx, buf);
   1b0fe:	4601      	mov	r1, r0
   1b100:	9801      	ldr	r0, [sp, #4]
   1b102:	f001 f989 	bl	1c418 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
   1b106:	9b01      	ldr	r3, [sp, #4]
   1b108:	2100      	movs	r1, #0
   1b10a:	88d8      	ldrh	r0, [r3, #6]
   1b10c:	f7ff f926 	bl	1a35c <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
   1b110:	a802      	add	r0, sp, #8
   1b112:	2200      	movs	r2, #0
   1b114:	f850 3d04 	ldr.w	r3, [r0, #-4]!
   1b118:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   1b11a:	f7ff fe31 	bl	1ad80 <ll_rx_mem_release>
		if (buf) {
   1b11e:	b124      	cbz	r4, 1b12a <recv_thread+0x9e>
			if (buf->len) {
   1b120:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   1b122:	4620      	mov	r0, r4
			if (buf->len) {
   1b124:	b1fb      	cbz	r3, 1b166 <recv_thread+0xda>
				bt_recv(buf);
   1b126:	f7ed fd61 	bl	8bec <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   1b12a:	f013 f807 	bl	2e13c <_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1b12e:	f013 fc4d 	bl	2e9cc <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
   1b132:	682b      	ldr	r3, [r5, #0]
   1b134:	1ac0      	subs	r0, r0, r3
   1b136:	f241 3388 	movw	r3, #5000	; 0x1388
   1b13a:	4298      	cmp	r0, r3
   1b13c:	d9a9      	bls.n	1b092 <recv_thread+0x6>
			STACK_ANALYZE("recv thread stack", recv_thread_stack);
   1b13e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b142:	4911      	ldr	r1, [pc, #68]	; (1b188 <recv_thread+0xfc>)
   1b144:	4811      	ldr	r0, [pc, #68]	; (1b18c <recv_thread+0x100>)
   1b146:	f7ff ff89 	bl	1b05c <stack_analyze>
   1b14a:	f013 fc3f 	bl	2e9cc <_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
   1b14e:	6028      	str	r0, [r5, #0]
   1b150:	e79f      	b.n	1b092 <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1b152:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b156:	f7ef fa69 	bl	a62c <bt_buf_get_rx>
   1b15a:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   1b15c:	4601      	mov	r1, r0
   1b15e:	9801      	ldr	r0, [sp, #4]
   1b160:	f001 f910 	bl	1c384 <hci_acl_encode>
   1b164:	e7cf      	b.n	1b106 <recv_thread+0x7a>
				net_buf_unref(buf);
   1b166:	f004 f875 	bl	1f254 <net_buf_unref>
   1b16a:	e7de      	b.n	1b12a <recv_thread+0x9e>
   1b16c:	2000e420 	.word	0x2000e420
   1b170:	20001bf8 	.word	0x20001bf8
   1b174:	2000e214 	.word	0x2000e214
   1b178:	0002ef38 	.word	0x0002ef38
   1b17c:	0002ef68 	.word	0x0002ef68
   1b180:	0003146d 	.word	0x0003146d
   1b184:	000338d7 	.word	0x000338d7
   1b188:	20008538 	.word	0x20008538
   1b18c:	0003396b 	.word	0x0003396b

0001b190 <hci_driver_send>:
	if (!buf->len) {
   1b190:	8983      	ldrh	r3, [r0, #12]
{
   1b192:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b194:	4605      	mov	r5, r0
	if (!buf->len) {
   1b196:	b9bb      	cbnz	r3, 1b1c8 <hci_driver_send+0x38>
		BT_ERR("Empty HCI packet");
   1b198:	4a28      	ldr	r2, [pc, #160]	; (1b23c <hci_driver_send+0xac>)
   1b19a:	6812      	ldr	r2, [r2, #0]
   1b19c:	0752      	lsls	r2, r2, #29
   1b19e:	d010      	beq.n	1b1c2 <hci_driver_send+0x32>
   1b1a0:	2101      	movs	r1, #1
   1b1a2:	f04f 0200 	mov.w	r2, #0
   1b1a6:	f361 0202 	bfi	r2, r1, #0, #3
   1b1aa:	f363 02c5 	bfi	r2, r3, #3, #3
   1b1ae:	4924      	ldr	r1, [pc, #144]	; (1b240 <hci_driver_send+0xb0>)
   1b1b0:	4b24      	ldr	r3, [pc, #144]	; (1b244 <hci_driver_send+0xb4>)
   1b1b2:	4825      	ldr	r0, [pc, #148]	; (1b248 <hci_driver_send+0xb8>)
   1b1b4:	1a5b      	subs	r3, r3, r1
   1b1b6:	08db      	lsrs	r3, r3, #3
   1b1b8:	f363 128f 	bfi	r2, r3, #6, #10
   1b1bc:	4923      	ldr	r1, [pc, #140]	; (1b24c <hci_driver_send+0xbc>)
   1b1be:	f7e6 ff95 	bl	20ec <log_1>
		return -EINVAL;
   1b1c2:	f06f 0415 	mvn.w	r4, #21
   1b1c6:	e010      	b.n	1b1ea <hci_driver_send+0x5a>
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
   1b1c8:	7d02      	ldrb	r2, [r0, #20]
	switch (type) {
   1b1ca:	b18a      	cbz	r2, 1b1f0 <hci_driver_send+0x60>
   1b1cc:	2a02      	cmp	r2, #2
   1b1ce:	d11f      	bne.n	1b210 <hci_driver_send+0x80>
	err = hci_acl_handle(buf, &evt);
   1b1d0:	a901      	add	r1, sp, #4
   1b1d2:	f001 f815 	bl	1c200 <hci_acl_handle>
   1b1d6:	4604      	mov	r4, r0
	if (evt) {
   1b1d8:	9801      	ldr	r0, [sp, #4]
   1b1da:	b108      	cbz	r0, 1b1e0 <hci_driver_send+0x50>
		bt_recv_prio(evt);
   1b1dc:	f7ee facc 	bl	9778 <bt_recv_prio>
	if (!err) {
   1b1e0:	b91c      	cbnz	r4, 1b1ea <hci_driver_send+0x5a>
		net_buf_unref(buf);
   1b1e2:	4628      	mov	r0, r5
   1b1e4:	f004 f836 	bl	1f254 <net_buf_unref>
   1b1e8:	2400      	movs	r4, #0
}
   1b1ea:	4620      	mov	r0, r4
   1b1ec:	b003      	add	sp, #12
   1b1ee:	bd30      	pop	{r4, r5, pc}
	void *node_rx = NULL;
   1b1f0:	a902      	add	r1, sp, #8
   1b1f2:	f841 2d04 	str.w	r2, [r1, #-4]!
	evt = hci_cmd_handle(buf, &node_rx);
   1b1f6:	f000 fa7d 	bl	1b6f4 <hci_cmd_handle>
	if (evt) {
   1b1fa:	2800      	cmp	r0, #0
   1b1fc:	d0f1      	beq.n	1b1e2 <hci_driver_send+0x52>
		bt_recv_prio(evt);
   1b1fe:	f7ee fabb 	bl	9778 <bt_recv_prio>
		if (node_rx) {
   1b202:	9901      	ldr	r1, [sp, #4]
   1b204:	2900      	cmp	r1, #0
   1b206:	d0ec      	beq.n	1b1e2 <hci_driver_send+0x52>
			k_fifo_put(&recv_fifo, node_rx);
   1b208:	4811      	ldr	r0, [pc, #68]	; (1b250 <hci_driver_send+0xc0>)
   1b20a:	f012 fd17 	bl	2dc3c <k_queue_append>
   1b20e:	e7e8      	b.n	1b1e2 <hci_driver_send+0x52>
		BT_ERR("Unknown HCI type %u", type);
   1b210:	4b0a      	ldr	r3, [pc, #40]	; (1b23c <hci_driver_send+0xac>)
   1b212:	681b      	ldr	r3, [r3, #0]
   1b214:	075b      	lsls	r3, r3, #29
   1b216:	d0d4      	beq.n	1b1c2 <hci_driver_send+0x32>
   1b218:	2101      	movs	r1, #1
   1b21a:	f04f 0300 	mov.w	r3, #0
   1b21e:	f361 0302 	bfi	r3, r1, #0, #3
   1b222:	4807      	ldr	r0, [pc, #28]	; (1b240 <hci_driver_send+0xb0>)
   1b224:	4907      	ldr	r1, [pc, #28]	; (1b244 <hci_driver_send+0xb4>)
   1b226:	1a09      	subs	r1, r1, r0
   1b228:	08c9      	lsrs	r1, r1, #3
   1b22a:	f36f 03c5 	bfc	r3, #3, #3
   1b22e:	f361 138f 	bfi	r3, r1, #6, #10
   1b232:	4808      	ldr	r0, [pc, #32]	; (1b254 <hci_driver_send+0xc4>)
   1b234:	4905      	ldr	r1, [pc, #20]	; (1b24c <hci_driver_send+0xbc>)
   1b236:	f7e6 ff6d 	bl	2114 <log_2>
   1b23a:	e7c2      	b.n	1b1c2 <hci_driver_send+0x32>
   1b23c:	2000e214 	.word	0x2000e214
   1b240:	0002ef38 	.word	0x0002ef38
   1b244:	0002ef68 	.word	0x0002ef68
   1b248:	00033939 	.word	0x00033939
   1b24c:	000338e3 	.word	0x000338e3
   1b250:	2000e420 	.word	0x2000e420
   1b254:	0003394e 	.word	0x0003394e

0001b258 <prio_recv_thread>:
{
   1b258:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1b25c:	4f1d      	ldr	r7, [pc, #116]	; (1b2d4 <prio_recv_thread+0x7c>)
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
   1b25e:	4c1e      	ldr	r4, [pc, #120]	; (1b2d8 <prio_recv_thread+0x80>)
			STACK_ANALYZE("prio recv thread stack",
   1b260:	4e1e      	ldr	r6, [pc, #120]	; (1b2dc <prio_recv_thread+0x84>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
   1b262:	f10d 0102 	add.w	r1, sp, #2
   1b266:	a801      	add	r0, sp, #4
   1b268:	f7ff f812 	bl	1a290 <ll_rx_get>
   1b26c:	4605      	mov	r5, r0
   1b26e:	b940      	cbnz	r0, 1b282 <prio_recv_thread+0x2a>
		if (node_rx) {
   1b270:	9b01      	ldr	r3, [sp, #4]
   1b272:	b1bb      	cbz	r3, 1b2a4 <prio_recv_thread+0x4c>
			ll_rx_dequeue();
   1b274:	f7ff fc9c 	bl	1abb0 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
   1b278:	9901      	ldr	r1, [sp, #4]
   1b27a:	4819      	ldr	r0, [pc, #100]	; (1b2e0 <prio_recv_thread+0x88>)
   1b27c:	f012 fcde 	bl	2dc3c <k_queue_append>
   1b280:	e7ef      	b.n	1b262 <prio_recv_thread+0xa>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1b282:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b286:	2001      	movs	r0, #1
   1b288:	f7ef f9d0 	bl	a62c <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   1b28c:	462a      	mov	r2, r5
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1b28e:	4680      	mov	r8, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   1b290:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1b294:	f001 fd4e 	bl	1cd34 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   1b298:	4640      	mov	r0, r8
   1b29a:	f7ee fa6d 	bl	9778 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   1b29e:	f012 ff4d 	bl	2e13c <_impl_k_yield>
   1b2a2:	e7de      	b.n	1b262 <prio_recv_thread+0xa>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1b2a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b2a8:	4638      	mov	r0, r7
   1b2aa:	f013 f80d 	bl	2e2c8 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1b2ae:	f013 fb8d 	bl	2e9cc <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
   1b2b2:	6823      	ldr	r3, [r4, #0]
   1b2b4:	1ac0      	subs	r0, r0, r3
   1b2b6:	f241 3388 	movw	r3, #5000	; 0x1388
   1b2ba:	4298      	cmp	r0, r3
   1b2bc:	d9d1      	bls.n	1b262 <prio_recv_thread+0xa>
			STACK_ANALYZE("prio recv thread stack",
   1b2be:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1b2c2:	4631      	mov	r1, r6
   1b2c4:	4807      	ldr	r0, [pc, #28]	; (1b2e4 <prio_recv_thread+0x8c>)
   1b2c6:	f7ff fec9 	bl	1b05c <stack_analyze>
   1b2ca:	f013 fb7f 	bl	2e9cc <_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
   1b2ce:	6020      	str	r0, [r4, #0]
   1b2d0:	e7c7      	b.n	1b262 <prio_recv_thread+0xa>
   1b2d2:	bf00      	nop
   1b2d4:	2000e3b0 	.word	0x2000e3b0
   1b2d8:	20001bf4 	.word	0x20001bf4
   1b2dc:	20008378 	.word	0x20008378
   1b2e0:	2000e420 	.word	0x2000e420
   1b2e4:	00033966 	.word	0x00033966

0001b2e8 <hci_driver_open>:
{
   1b2e8:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
   1b2ea:	4820      	ldr	r0, [pc, #128]	; (1b36c <hci_driver_open+0x84>)
{
   1b2ec:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
   1b2ee:	f7ff fde9 	bl	1aec4 <ll_init>
	if (err) {
   1b2f2:	4604      	mov	r4, r0
   1b2f4:	b1c0      	cbz	r0, 1b328 <hci_driver_open+0x40>
		BT_ERR("LL initialization failed: %u", err);
   1b2f6:	4b1e      	ldr	r3, [pc, #120]	; (1b370 <hci_driver_open+0x88>)
   1b2f8:	681b      	ldr	r3, [r3, #0]
   1b2fa:	075b      	lsls	r3, r3, #29
   1b2fc:	d011      	beq.n	1b322 <hci_driver_open+0x3a>
   1b2fe:	2201      	movs	r2, #1
   1b300:	f04f 0300 	mov.w	r3, #0
   1b304:	f362 0302 	bfi	r3, r2, #0, #3
   1b308:	491a      	ldr	r1, [pc, #104]	; (1b374 <hci_driver_open+0x8c>)
   1b30a:	4a1b      	ldr	r2, [pc, #108]	; (1b378 <hci_driver_open+0x90>)
   1b30c:	1a52      	subs	r2, r2, r1
   1b30e:	08d2      	lsrs	r2, r2, #3
   1b310:	f36f 03c5 	bfc	r3, #3, #3
   1b314:	f362 138f 	bfi	r3, r2, #6, #10
   1b318:	4918      	ldr	r1, [pc, #96]	; (1b37c <hci_driver_open+0x94>)
   1b31a:	4602      	mov	r2, r0
   1b31c:	4818      	ldr	r0, [pc, #96]	; (1b380 <hci_driver_open+0x98>)
   1b31e:	f7e6 fef9 	bl	2114 <log_2>
}
   1b322:	4620      	mov	r0, r4
   1b324:	b006      	add	sp, #24
   1b326:	bd10      	pop	{r4, pc}
	hci_init(NULL);
   1b328:	f001 fd30 	bl	1cd8c <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   1b32c:	f06f 0309 	mvn.w	r3, #9
   1b330:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1b334:	e9cd 4404 	strd	r4, r4, [sp, #16]
   1b338:	e9cd 4400 	strd	r4, r4, [sp]
   1b33c:	4b11      	ldr	r3, [pc, #68]	; (1b384 <hci_driver_open+0x9c>)
   1b33e:	4912      	ldr	r1, [pc, #72]	; (1b388 <hci_driver_open+0xa0>)
   1b340:	4812      	ldr	r0, [pc, #72]	; (1b38c <hci_driver_open+0xa4>)
   1b342:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1b346:	f013 f869 	bl	2e41c <_impl_k_thread_create>
   1b34a:	f06f 0307 	mvn.w	r3, #7
   1b34e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1b352:	e9cd 4404 	strd	r4, r4, [sp, #16]
   1b356:	e9cd 4400 	strd	r4, r4, [sp]
   1b35a:	4b0d      	ldr	r3, [pc, #52]	; (1b390 <hci_driver_open+0xa8>)
   1b35c:	490d      	ldr	r1, [pc, #52]	; (1b394 <hci_driver_open+0xac>)
   1b35e:	480e      	ldr	r0, [pc, #56]	; (1b398 <hci_driver_open+0xb0>)
   1b360:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b364:	f013 f85a 	bl	2e41c <_impl_k_thread_create>
   1b368:	e7db      	b.n	1b322 <hci_driver_open+0x3a>
   1b36a:	bf00      	nop
   1b36c:	2000e3b0 	.word	0x2000e3b0
   1b370:	2000e214 	.word	0x2000e214
   1b374:	0002ef38 	.word	0x0002ef38
   1b378:	0002ef68 	.word	0x0002ef68
   1b37c:	000338f3 	.word	0x000338f3
   1b380:	00033918 	.word	0x00033918
   1b384:	0001b259 	.word	0x0001b259
   1b388:	20008378 	.word	0x20008378
   1b38c:	200036e0 	.word	0x200036e0
   1b390:	0001b08d 	.word	0x0001b08d
   1b394:	20008538 	.word	0x20008538
   1b398:	20003674 	.word	0x20003674

0001b39c <sys_put_le32>:
   1b39c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1b3a0:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1b3a2:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   1b3a4:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   1b3a6:	0a00      	lsrs	r0, r0, #8
   1b3a8:	704b      	strb	r3, [r1, #1]
   1b3aa:	70c8      	strb	r0, [r1, #3]
}
   1b3ac:	4770      	bx	lr

0001b3ae <evt_create>:
static void le_conn_complete(struct pdu_data *pdu_data, u16_t handle,
			     struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
   1b3ae:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
   1b3b0:	3008      	adds	r0, #8
{
   1b3b2:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1b3b4:	2102      	movs	r1, #2
{
   1b3b6:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   1b3b8:	f003 ffaa 	bl	1f310 <net_buf_simple_add>
	hdr->evt = evt;
   1b3bc:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
   1b3be:	7044      	strb	r4, [r0, #1]
}
   1b3c0:	bd38      	pop	{r3, r4, r5, pc}
	...

0001b3c4 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
   1b3c4:	b538      	push	{r3, r4, r5, lr}
   1b3c6:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
   1b3c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b3cc:	f7ef f93e 	bl	a64c <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1b3d0:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
   1b3d2:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1b3d4:	210f      	movs	r1, #15
   1b3d6:	f7ff ffea 	bl	1b3ae <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
   1b3da:	2104      	movs	r1, #4
   1b3dc:	f104 0008 	add.w	r0, r4, #8
   1b3e0:	f003 ff96 	bl	1f310 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
   1b3e4:	2301      	movs	r3, #1
   1b3e6:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
   1b3e8:	4b02      	ldr	r3, [pc, #8]	; (1b3f4 <cmd_status+0x30>)
	cs->status = status;
   1b3ea:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
   1b3ec:	881b      	ldrh	r3, [r3, #0]
   1b3ee:	8043      	strh	r3, [r0, #2]

	return buf;
}
   1b3f0:	4620      	mov	r0, r4
   1b3f2:	bd38      	pop	{r3, r4, r5, pc}
   1b3f4:	20001bfc 	.word	0x20001bfc

0001b3f8 <cmd_complete>:
{
   1b3f8:	b538      	push	{r3, r4, r5, lr}
   1b3fa:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   1b3fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
   1b400:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   1b402:	f7ef f923 	bl	a64c <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1b406:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   1b408:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1b40a:	b2d2      	uxtb	r2, r2
   1b40c:	210e      	movs	r1, #14
   1b40e:	f7ff ffce 	bl	1b3ae <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
   1b412:	6820      	ldr	r0, [r4, #0]
   1b414:	2103      	movs	r1, #3
   1b416:	3008      	adds	r0, #8
   1b418:	f003 ff7a 	bl	1f310 <net_buf_simple_add>
	cc->ncmd = 1;
   1b41c:	2301      	movs	r3, #1
   1b41e:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
   1b420:	4b05      	ldr	r3, [pc, #20]	; (1b438 <cmd_complete+0x40>)
   1b422:	881b      	ldrh	r3, [r3, #0]
   1b424:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
   1b428:	6820      	ldr	r0, [r4, #0]
   1b42a:	4629      	mov	r1, r5
   1b42c:	3008      	adds	r0, #8
}
   1b42e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
   1b432:	f003 bf6d 	b.w	1f310 <net_buf_simple_add>
   1b436:	bf00      	nop
   1b438:	20001bfc 	.word	0x20001bfc

0001b43c <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
   1b43c:	b570      	push	{r4, r5, r6, lr}
   1b43e:	4604      	mov	r4, r0
   1b440:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1b442:	3201      	adds	r2, #1
{
   1b444:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
   1b446:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1b448:	b2d2      	uxtb	r2, r2
   1b44a:	213e      	movs	r1, #62	; 0x3e
   1b44c:	f7ff ffaf 	bl	1b3ae <evt_create>
	me = net_buf_add(buf, sizeof(*me));
   1b450:	2101      	movs	r1, #1
   1b452:	4620      	mov	r0, r4
   1b454:	f003 ff5c 	bl	1f310 <net_buf_simple_add>
	me->subevent = subevt;
   1b458:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
   1b45a:	4629      	mov	r1, r5
   1b45c:	4620      	mov	r0, r4
}
   1b45e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   1b462:	f003 bf55 	b.w	1f310 <net_buf_simple_add>
	...

0001b468 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1b468:	4b0f      	ldr	r3, [pc, #60]	; (1b4a8 <encrypt_change+0x40>)
{
   1b46a:	b570      	push	{r4, r5, r6, lr}
   1b46c:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
{
   1b472:	4604      	mov	r4, r0
   1b474:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1b476:	f002 0080 	and.w	r0, r2, #128	; 0x80
   1b47a:	2100      	movs	r1, #0
   1b47c:	ea50 0301 	orrs.w	r3, r0, r1
   1b480:	d010      	beq.n	1b4a4 <encrypt_change+0x3c>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
   1b482:	2204      	movs	r2, #4
   1b484:	2108      	movs	r1, #8
   1b486:	4628      	mov	r0, r5
   1b488:	f7ff ff91 	bl	1b3ae <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   1b48c:	2104      	movs	r1, #4
   1b48e:	f105 0008 	add.w	r0, r5, #8
   1b492:	f003 ff3d 	bl	1f310 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
   1b496:	fab4 f384 	clz	r3, r4
   1b49a:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   1b49c:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1b49e:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   1b4a2:	70c3      	strb	r3, [r0, #3]
}
   1b4a4:	bd70      	pop	{r4, r5, r6, pc}
   1b4a6:	bf00      	nop
   1b4a8:	2000dba8 	.word	0x2000dba8

0001b4ac <le_remote_feat_complete>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
   1b4ac:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
   1b4b0:	4604      	mov	r4, r0
   1b4b2:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1b4b4:	4b15      	ldr	r3, [pc, #84]	; (1b50c <le_remote_feat_complete+0x60>)
{
   1b4b6:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1b4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b4bc:	f04f 0b00 	mov.w	fp, #0
   1b4c0:	f003 5c00 	and.w	ip, r3, #536870912	; 0x20000000
   1b4c4:	ea5b 030c 	orrs.w	r3, fp, ip
{
   1b4c8:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1b4ca:	d01d      	beq.n	1b508 <le_remote_feat_complete+0x5c>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   1b4cc:	4b10      	ldr	r3, [pc, #64]	; (1b510 <le_remote_feat_complete+0x64>)
   1b4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b4d2:	f04f 0c00 	mov.w	ip, #0
   1b4d6:	f002 0b08 	and.w	fp, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1b4da:	ea5b 030c 	orrs.w	r3, fp, ip
   1b4de:	d013      	beq.n	1b508 <le_remote_feat_complete+0x5c>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   1b4e0:	220b      	movs	r2, #11
   1b4e2:	2104      	movs	r1, #4
   1b4e4:	f7ff ffaa 	bl	1b43c <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
   1b4e8:	2208      	movs	r2, #8
	sep->status = status;
   1b4ea:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   1b4ec:	f8a0 6001 	strh.w	r6, [r0, #1]
   1b4f0:	3003      	adds	r0, #3
	if (!status) {
   1b4f2:	b924      	cbnz	r4, 1b4fe <le_remote_feat_complete+0x52>
		memcpy(&sep->features[0],
   1b4f4:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   1b4f6:	e8bd 4878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, lr}
		memcpy(&sep->features[0],
   1b4fa:	f7eb bbc5 	b.w	6c88 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   1b4fe:	2100      	movs	r1, #0
}
   1b500:	e8bd 4878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   1b504:	f7eb bbed 	b.w	6ce2 <memset>
}
   1b508:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
   1b50c:	2000dba8 	.word	0x2000dba8
   1b510:	2000dbb0 	.word	0x2000dbb0

0001b514 <bt_addr_le_to_str.constprop.77>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   1b514:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
   1b516:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   1b518:	b08a      	sub	sp, #40	; 0x28
   1b51a:	4604      	mov	r4, r0
   1b51c:	460e      	mov	r6, r1
   1b51e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   1b520:	2b03      	cmp	r3, #3
   1b522:	d820      	bhi.n	1b566 <bt_addr_le_to_str.constprop.77+0x52>
   1b524:	e8df f003 	tbb	[pc, r3]
   1b528:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
   1b52c:	4911      	ldr	r1, [pc, #68]	; (1b574 <bt_addr_le_to_str.constprop.77+0x60>)
		strcpy(type, "random");
   1b52e:	4628      	mov	r0, r5
   1b530:	f7eb fb1c 	bl	6b6c <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1b534:	7862      	ldrb	r2, [r4, #1]
   1b536:	9204      	str	r2, [sp, #16]
   1b538:	78a2      	ldrb	r2, [r4, #2]
   1b53a:	9203      	str	r2, [sp, #12]
   1b53c:	78e2      	ldrb	r2, [r4, #3]
   1b53e:	9202      	str	r2, [sp, #8]
   1b540:	7922      	ldrb	r2, [r4, #4]
   1b542:	9201      	str	r2, [sp, #4]
   1b544:	7962      	ldrb	r2, [r4, #5]
   1b546:	9200      	str	r2, [sp, #0]
   1b548:	79a3      	ldrb	r3, [r4, #6]
   1b54a:	9505      	str	r5, [sp, #20]
   1b54c:	4a0a      	ldr	r2, [pc, #40]	; (1b578 <bt_addr_le_to_str.constprop.77+0x64>)
   1b54e:	211b      	movs	r1, #27
   1b550:	4630      	mov	r0, r6
   1b552:	f7e5 ffa5 	bl	14a0 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   1b556:	b00a      	add	sp, #40	; 0x28
   1b558:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   1b55a:	4908      	ldr	r1, [pc, #32]	; (1b57c <bt_addr_le_to_str.constprop.77+0x68>)
   1b55c:	e7e7      	b.n	1b52e <bt_addr_le_to_str.constprop.77+0x1a>
		strcpy(type, "public id");
   1b55e:	4908      	ldr	r1, [pc, #32]	; (1b580 <bt_addr_le_to_str.constprop.77+0x6c>)
   1b560:	e7e5      	b.n	1b52e <bt_addr_le_to_str.constprop.77+0x1a>
		strcpy(type, "random id");
   1b562:	4908      	ldr	r1, [pc, #32]	; (1b584 <bt_addr_le_to_str.constprop.77+0x70>)
   1b564:	e7e3      	b.n	1b52e <bt_addr_le_to_str.constprop.77+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1b566:	4a08      	ldr	r2, [pc, #32]	; (1b588 <bt_addr_le_to_str.constprop.77+0x74>)
   1b568:	210a      	movs	r1, #10
   1b56a:	4628      	mov	r0, r5
   1b56c:	f7e5 ff98 	bl	14a0 <snprintk>
   1b570:	e7e0      	b.n	1b534 <bt_addr_le_to_str.constprop.77+0x20>
   1b572:	bf00      	nop
   1b574:	00030b9f 	.word	0x00030b9f
   1b578:	00030bc1 	.word	0x00030bc1
   1b57c:	00030ba6 	.word	0x00030ba6
   1b580:	00030bad 	.word	0x00030bad
   1b584:	00030bb7 	.word	0x00030bb7
   1b588:	00033ba3 	.word	0x00033ba3

0001b58c <le_adv_ext_report.isra.73>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
   1b58c:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
   1b58e:	4d4f      	ldr	r5, [pc, #316]	; (1b6cc <le_adv_ext_report.isra.73+0x140>)
   1b590:	682b      	ldr	r3, [r5, #0]
   1b592:	f003 0307 	and.w	r3, r3, #7
   1b596:	2b01      	cmp	r3, #1
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
   1b598:	b08d      	sub	sp, #52	; 0x34
   1b59a:	4604      	mov	r4, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
   1b59c:	d924      	bls.n	1b5e8 <le_adv_ext_report.isra.73+0x5c>
		  offsetof(struct pdu_adv, payload) + adv->len];
   1b59e:	7846      	ldrb	r6, [r0, #1]
   1b5a0:	4f4b      	ldr	r7, [pc, #300]	; (1b6d0 <le_adv_ext_report.isra.73+0x144>)
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
   1b5a2:	2002      	movs	r0, #2
   1b5a4:	f04f 0300 	mov.w	r3, #0
   1b5a8:	f360 0302 	bfi	r3, r0, #0, #3
   1b5ac:	4849      	ldr	r0, [pc, #292]	; (1b6d4 <le_adv_ext_report.isra.73+0x148>)
   1b5ae:	1bc0      	subs	r0, r0, r7
   1b5b0:	08c0      	lsrs	r0, r0, #3
   1b5b2:	f36f 03c5 	bfc	r3, #3, #3
   1b5b6:	f360 138f 	bfi	r3, r0, #6, #10
   1b5ba:	4847      	ldr	r0, [pc, #284]	; (1b6d8 <le_adv_ext_report.isra.73+0x14c>)
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1b5bc:	4431      	add	r1, r6
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
   1b5be:	e9cd 0205 	strd	r0, r2, [sp, #20]
   1b5c2:	7822      	ldrb	r2, [r4, #0]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1b5c4:	7a89      	ldrb	r1, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
   1b5c6:	f002 000f 	and.w	r0, r2, #15
   1b5ca:	e9cd 0607 	strd	r0, r6, [sp, #28]
   1b5ce:	f3c2 1080 	ubfx	r0, r2, #6, #1
   1b5d2:	09d2      	lsrs	r2, r2, #7
   1b5d4:	920a      	str	r2, [sp, #40]	; 0x28
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1b5d6:	424a      	negs	r2, r1
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
   1b5d8:	b252      	sxtb	r2, r2
   1b5da:	9009      	str	r0, [sp, #36]	; 0x24
   1b5dc:	920b      	str	r2, [sp, #44]	; 0x2c
   1b5de:	a905      	add	r1, sp, #20
   1b5e0:	2207      	movs	r2, #7
   1b5e2:	483e      	ldr	r0, [pc, #248]	; (1b6dc <le_adv_ext_report.isra.73+0x150>)
   1b5e4:	f7e6 fdc9 	bl	217a <log_n>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
   1b5e8:	7823      	ldrb	r3, [r4, #0]
   1b5ea:	f003 030f 	and.w	r3, r3, #15
   1b5ee:	2b07      	cmp	r3, #7
   1b5f0:	d16a      	bne.n	1b6c8 <le_adv_ext_report.isra.73+0x13c>
   1b5f2:	7863      	ldrb	r3, [r4, #1]
   1b5f4:	2b00      	cmp	r3, #0
   1b5f6:	d067      	beq.n	1b6c8 <le_adv_ext_report.isra.73+0x13c>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
   1b5f8:	682b      	ldr	r3, [r5, #0]
   1b5fa:	f003 0307 	and.w	r3, r3, #7
   1b5fe:	2b01      	cmp	r3, #1
   1b600:	d916      	bls.n	1b630 <le_adv_ext_report.isra.73+0xa4>
   1b602:	2302      	movs	r3, #2
   1b604:	f04f 0100 	mov.w	r1, #0
   1b608:	f363 0102 	bfi	r1, r3, #0, #3
   1b60c:	4a30      	ldr	r2, [pc, #192]	; (1b6d0 <le_adv_ext_report.isra.73+0x144>)
   1b60e:	4b31      	ldr	r3, [pc, #196]	; (1b6d4 <le_adv_ext_report.isra.73+0x148>)
   1b610:	4833      	ldr	r0, [pc, #204]	; (1b6e0 <le_adv_ext_report.isra.73+0x154>)
   1b612:	1a9b      	subs	r3, r3, r2
   1b614:	08db      	lsrs	r3, r3, #3
   1b616:	78a2      	ldrb	r2, [r4, #2]
   1b618:	f36f 01c5 	bfc	r1, #3, #3
   1b61c:	f363 118f 	bfi	r1, r3, #6, #10
   1b620:	f8ad 1000 	strh.w	r1, [sp]
   1b624:	f002 033f 	and.w	r3, r2, #63	; 0x3f
   1b628:	492b      	ldr	r1, [pc, #172]	; (1b6d8 <le_adv_ext_report.isra.73+0x14c>)
   1b62a:	0992      	lsrs	r2, r2, #6
   1b62c:	f7e6 fd8a 	bl	2144 <log_3>
		if (!p->ext_hdr_len) {
   1b630:	78a3      	ldrb	r3, [r4, #2]
   1b632:	0699      	lsls	r1, r3, #26
   1b634:	d048      	beq.n	1b6c8 <le_adv_ext_report.isra.73+0x13c>
		if (h->adv_addr) {
   1b636:	78e3      	ldrb	r3, [r4, #3]
   1b638:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
   1b63a:	f104 0604 	add.w	r6, r4, #4
		if (h->adv_addr) {
   1b63e:	d528      	bpl.n	1b692 <le_adv_ext_report.isra.73+0x106>
			addr.type = adv->tx_addr;
   1b640:	7823      	ldrb	r3, [r4, #0]
   1b642:	af0c      	add	r7, sp, #48	; 0x30
   1b644:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1b648:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
   1b64c:	4631      	mov	r1, r6
   1b64e:	2206      	movs	r2, #6
   1b650:	f10d 000d 	add.w	r0, sp, #13
   1b654:	f7eb fb18 	bl	6c88 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
   1b658:	a905      	add	r1, sp, #20
   1b65a:	4638      	mov	r0, r7
   1b65c:	f7ff ff5a 	bl	1b514 <bt_addr_le_to_str.constprop.77>
			BT_WARN("AdvA: %s", addr_str);
   1b660:	682b      	ldr	r3, [r5, #0]
   1b662:	f003 0307 	and.w	r3, r3, #7
   1b666:	2b01      	cmp	r3, #1
			ptr += BDADDR_SIZE;
   1b668:	f104 060a 	add.w	r6, r4, #10
			BT_WARN("AdvA: %s", addr_str);
   1b66c:	d911      	bls.n	1b692 <le_adv_ext_report.isra.73+0x106>
   1b66e:	2202      	movs	r2, #2
   1b670:	f04f 0300 	mov.w	r3, #0
   1b674:	f362 0302 	bfi	r3, r2, #0, #3
   1b678:	4915      	ldr	r1, [pc, #84]	; (1b6d0 <le_adv_ext_report.isra.73+0x144>)
   1b67a:	4a16      	ldr	r2, [pc, #88]	; (1b6d4 <le_adv_ext_report.isra.73+0x148>)
   1b67c:	4819      	ldr	r0, [pc, #100]	; (1b6e4 <le_adv_ext_report.isra.73+0x158>)
   1b67e:	1a52      	subs	r2, r2, r1
   1b680:	08d2      	lsrs	r2, r2, #3
   1b682:	f36f 03c5 	bfc	r3, #3, #3
   1b686:	f362 138f 	bfi	r3, r2, #6, #10
   1b68a:	4913      	ldr	r1, [pc, #76]	; (1b6d8 <le_adv_ext_report.isra.73+0x14c>)
   1b68c:	aa05      	add	r2, sp, #20
   1b68e:	f7e6 fd41 	bl	2114 <log_2>
		if (h->tx_pwr) {
   1b692:	78e3      	ldrb	r3, [r4, #3]
   1b694:	065b      	lsls	r3, r3, #25
   1b696:	d517      	bpl.n	1b6c8 <le_adv_ext_report.isra.73+0x13c>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
   1b698:	682b      	ldr	r3, [r5, #0]
   1b69a:	f003 0307 	and.w	r3, r3, #7
   1b69e:	2b01      	cmp	r3, #1
   1b6a0:	d912      	bls.n	1b6c8 <le_adv_ext_report.isra.73+0x13c>
   1b6a2:	2202      	movs	r2, #2
   1b6a4:	f04f 0300 	mov.w	r3, #0
   1b6a8:	f362 0302 	bfi	r3, r2, #0, #3
   1b6ac:	4908      	ldr	r1, [pc, #32]	; (1b6d0 <le_adv_ext_report.isra.73+0x144>)
   1b6ae:	4a09      	ldr	r2, [pc, #36]	; (1b6d4 <le_adv_ext_report.isra.73+0x148>)
   1b6b0:	480d      	ldr	r0, [pc, #52]	; (1b6e8 <le_adv_ext_report.isra.73+0x15c>)
   1b6b2:	1a52      	subs	r2, r2, r1
   1b6b4:	08d2      	lsrs	r2, r2, #3
   1b6b6:	f36f 03c5 	bfc	r3, #3, #3
   1b6ba:	f362 138f 	bfi	r3, r2, #6, #10
   1b6be:	4906      	ldr	r1, [pc, #24]	; (1b6d8 <le_adv_ext_report.isra.73+0x14c>)
   1b6c0:	f996 2000 	ldrsb.w	r2, [r6]
   1b6c4:	f7e6 fd26 	bl	2114 <log_2>
}
   1b6c8:	b00d      	add	sp, #52	; 0x34
   1b6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b6cc:	2000e210 	.word	0x2000e210
   1b6d0:	0002ef38 	.word	0x0002ef38
   1b6d4:	0002ef60 	.word	0x0002ef60
   1b6d8:	000339da 	.word	0x000339da
   1b6dc:	00033baa 	.word	0x00033baa
   1b6e0:	00033beb 	.word	0x00033beb
   1b6e4:	00033c10 	.word	0x00033c10
   1b6e8:	00033c1d 	.word	0x00033c1d

0001b6ec <sys_get_le64>:
{
   1b6ec:	4603      	mov	r3, r0
}
   1b6ee:	6800      	ldr	r0, [r0, #0]
   1b6f0:	6859      	ldr	r1, [r3, #4]
   1b6f2:	4770      	bx	lr

0001b6f4 <hci_cmd_handle>:
{
   1b6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b6f6:	460e      	mov	r6, r1
	if (cmd->len < sizeof(*chdr)) {
   1b6f8:	8981      	ldrh	r1, [r0, #12]
{
   1b6fa:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
   1b6fc:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   1b6fe:	2902      	cmp	r1, #2
{
   1b700:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
   1b702:	950c      	str	r5, [sp, #48]	; 0x30
	if (cmd->len < sizeof(*chdr)) {
   1b704:	d818      	bhi.n	1b738 <hci_cmd_handle+0x44>
		BT_ERR("No HCI Command header");
   1b706:	4bc3      	ldr	r3, [pc, #780]	; (1ba14 <hci_cmd_handle+0x320>)
   1b708:	681b      	ldr	r3, [r3, #0]
   1b70a:	075c      	lsls	r4, r3, #29
   1b70c:	d102      	bne.n	1b714 <hci_cmd_handle+0x20>
		return NULL;
   1b70e:	2000      	movs	r0, #0
}
   1b710:	b013      	add	sp, #76	; 0x4c
   1b712:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("No HCI Command header");
   1b714:	2301      	movs	r3, #1
   1b716:	f04f 0200 	mov.w	r2, #0
   1b71a:	f363 0202 	bfi	r2, r3, #0, #3
   1b71e:	49be      	ldr	r1, [pc, #760]	; (1ba18 <hci_cmd_handle+0x324>)
   1b720:	4bbe      	ldr	r3, [pc, #760]	; (1ba1c <hci_cmd_handle+0x328>)
   1b722:	48bf      	ldr	r0, [pc, #764]	; (1ba20 <hci_cmd_handle+0x32c>)
   1b724:	1a5b      	subs	r3, r3, r1
   1b726:	f365 02c5 	bfi	r2, r5, #3, #3
   1b72a:	08db      	lsrs	r3, r3, #3
   1b72c:	49bd      	ldr	r1, [pc, #756]	; (1ba24 <hci_cmd_handle+0x330>)
   1b72e:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Invalid HCI CMD packet length");
   1b732:	f7e6 fcdb 	bl	20ec <log_1>
   1b736:	e7ea      	b.n	1b70e <hci_cmd_handle+0x1a>
	chdr = (void *)cmd->data;
   1b738:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
   1b73a:	4fbb      	ldr	r7, [pc, #748]	; (1ba28 <hci_cmd_handle+0x334>)
   1b73c:	781a      	ldrb	r2, [r3, #0]
   1b73e:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
   1b740:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
   1b742:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
   1b746:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
   1b748:	803a      	strh	r2, [r7, #0]
	if (cmd->len < chdr->param_len) {
   1b74a:	d913      	bls.n	1b774 <hci_cmd_handle+0x80>
		BT_ERR("Invalid HCI CMD packet length");
   1b74c:	4bb1      	ldr	r3, [pc, #708]	; (1ba14 <hci_cmd_handle+0x320>)
   1b74e:	681b      	ldr	r3, [r3, #0]
   1b750:	0758      	lsls	r0, r3, #29
   1b752:	d0dc      	beq.n	1b70e <hci_cmd_handle+0x1a>
   1b754:	2301      	movs	r3, #1
   1b756:	f04f 0200 	mov.w	r2, #0
   1b75a:	f363 0202 	bfi	r2, r3, #0, #3
   1b75e:	49ae      	ldr	r1, [pc, #696]	; (1ba18 <hci_cmd_handle+0x324>)
   1b760:	4bae      	ldr	r3, [pc, #696]	; (1ba1c <hci_cmd_handle+0x328>)
   1b762:	48b2      	ldr	r0, [pc, #712]	; (1ba2c <hci_cmd_handle+0x338>)
   1b764:	1a5b      	subs	r3, r3, r1
   1b766:	f365 02c5 	bfi	r2, r5, #3, #3
   1b76a:	08db      	lsrs	r3, r3, #3
   1b76c:	f363 128f 	bfi	r2, r3, #6, #10
   1b770:	49ac      	ldr	r1, [pc, #688]	; (1ba24 <hci_cmd_handle+0x330>)
   1b772:	e7de      	b.n	1b732 <hci_cmd_handle+0x3e>
	net_buf_pull(cmd, sizeof(*chdr));
   1b774:	2103      	movs	r1, #3
   1b776:	f104 0008 	add.w	r0, r4, #8
   1b77a:	f003 fe19 	bl	1f3b0 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
   1b77e:	883b      	ldrh	r3, [r7, #0]
   1b780:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
   1b784:	0a9b      	lsrs	r3, r3, #10
   1b786:	2b04      	cmp	r3, #4
   1b788:	f000 80bf 	beq.w	1b90a <hci_cmd_handle+0x216>
   1b78c:	d809      	bhi.n	1b7a2 <hci_cmd_handle+0xae>
   1b78e:	2b01      	cmp	r3, #1
   1b790:	d026      	beq.n	1b7e0 <hci_cmd_handle+0xec>
   1b792:	2b03      	cmp	r3, #3
   1b794:	d03a      	beq.n	1b80c <hci_cmd_handle+0x118>
		ccst = cmd_complete(&evt, sizeof(*ccst));
   1b796:	2101      	movs	r1, #1
   1b798:	a80c      	add	r0, sp, #48	; 0x30
   1b79a:	f7ff fe2d 	bl	1b3f8 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
   1b79e:	2301      	movs	r3, #1
   1b7a0:	e057      	b.n	1b852 <hci_cmd_handle+0x15e>
	switch (BT_OGF(_opcode)) {
   1b7a2:	2b08      	cmp	r3, #8
   1b7a4:	f000 8166 	beq.w	1ba74 <hci_cmd_handle+0x380>
   1b7a8:	2b3f      	cmp	r3, #63	; 0x3f
   1b7aa:	d1f4      	bne.n	1b796 <hci_cmd_handle+0xa2>
	switch (ocf) {
   1b7ac:	3a01      	subs	r2, #1
   1b7ae:	2a09      	cmp	r2, #9
   1b7b0:	d8f1      	bhi.n	1b796 <hci_cmd_handle+0xa2>
   1b7b2:	a301      	add	r3, pc, #4	; (adr r3, 1b7b8 <hci_cmd_handle+0xc4>)
   1b7b4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1b7b8:	0001c015 	.word	0x0001c015
   1b7bc:	0001c043 	.word	0x0001c043
   1b7c0:	0001c06b 	.word	0x0001c06b
   1b7c4:	0001b797 	.word	0x0001b797
   1b7c8:	0001b797 	.word	0x0001b797
   1b7cc:	0001c0b7 	.word	0x0001c0b7
   1b7d0:	0001b797 	.word	0x0001b797
   1b7d4:	0001c081 	.word	0x0001c081
   1b7d8:	0001c0c3 	.word	0x0001c0c3
   1b7dc:	0001c131 	.word	0x0001c131
	switch (ocf) {
   1b7e0:	2a06      	cmp	r2, #6
   1b7e2:	d006      	beq.n	1b7f2 <hci_cmd_handle+0xfe>
   1b7e4:	2a1d      	cmp	r2, #29
   1b7e6:	d1d6      	bne.n	1b796 <hci_cmd_handle+0xa2>
	handle = sys_le16_to_cpu(cmd->handle);
   1b7e8:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   1b7ea:	8818      	ldrh	r0, [r3, #0]
   1b7ec:	f7fe fc65 	bl	1a0ba <ll_version_ind_send>
   1b7f0:	e004      	b.n	1b7fc <hci_cmd_handle+0x108>
		disconnect(cmd, evt);
   1b7f2:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   1b7f4:	7899      	ldrb	r1, [r3, #2]
   1b7f6:	8818      	ldrh	r0, [r3, #0]
   1b7f8:	f7fe fc73 	bl	1a0e2 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
   1b7fc:	2800      	cmp	r0, #0
   1b7fe:	bf14      	ite	ne
   1b800:	200c      	movne	r0, #12
   1b802:	2000      	moveq	r0, #0
   1b804:	f7ff fdde 	bl	1b3c4 <cmd_status>
   1b808:	900c      	str	r0, [sp, #48]	; 0x30
   1b80a:	e03c      	b.n	1b886 <hci_cmd_handle+0x192>
	switch (ocf) {
   1b80c:	2a2d      	cmp	r2, #45	; 0x2d
   1b80e:	d03c      	beq.n	1b88a <hci_cmd_handle+0x196>
   1b810:	d821      	bhi.n	1b856 <hci_cmd_handle+0x162>
   1b812:	2a01      	cmp	r2, #1
   1b814:	d02c      	beq.n	1b870 <hci_cmd_handle+0x17c>
   1b816:	2a03      	cmp	r2, #3
   1b818:	d1bd      	bne.n	1b796 <hci_cmd_handle+0xa2>
	dup_count = -1;
   1b81a:	4b85      	ldr	r3, [pc, #532]	; (1ba30 <hci_cmd_handle+0x33c>)
   1b81c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b820:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
   1b822:	4b84      	ldr	r3, [pc, #528]	; (1ba34 <hci_cmd_handle+0x340>)
   1b824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b828:	f641 71ff 	movw	r1, #8191	; 0x1fff
   1b82c:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1b830:	4b81      	ldr	r3, [pc, #516]	; (1ba38 <hci_cmd_handle+0x344>)
   1b832:	2000      	movs	r0, #0
   1b834:	2100      	movs	r1, #0
   1b836:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1b83a:	4b80      	ldr	r3, [pc, #512]	; (1ba3c <hci_cmd_handle+0x348>)
   1b83c:	201f      	movs	r0, #31
   1b83e:	2100      	movs	r1, #0
   1b840:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   1b844:	f7fe f8a8 	bl	19998 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
   1b848:	2101      	movs	r1, #1
   1b84a:	a80c      	add	r0, sp, #48	; 0x30
   1b84c:	f7ff fdd4 	bl	1b3f8 <cmd_complete>
	ccst->status = 0x00;
   1b850:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
   1b852:	7003      	strb	r3, [r0, #0]
   1b854:	e017      	b.n	1b886 <hci_cmd_handle+0x192>
	switch (ocf) {
   1b856:	2a7b      	cmp	r2, #123	; 0x7b
   1b858:	d02d      	beq.n	1b8b6 <hci_cmd_handle+0x1c2>
   1b85a:	2a7c      	cmp	r2, #124	; 0x7c
   1b85c:	d042      	beq.n	1b8e4 <hci_cmd_handle+0x1f0>
   1b85e:	2a63      	cmp	r2, #99	; 0x63
   1b860:	d199      	bne.n	1b796 <hci_cmd_handle+0xa2>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1b862:	68a0      	ldr	r0, [r4, #8]
   1b864:	f7ff ff42 	bl	1b6ec <sys_get_le64>
   1b868:	4b73      	ldr	r3, [pc, #460]	; (1ba38 <hci_cmd_handle+0x344>)
   1b86a:	e9c3 0100 	strd	r0, r1, [r3]
   1b86e:	e7eb      	b.n	1b848 <hci_cmd_handle+0x154>
	event_mask = sys_get_le64(cmd->events);
   1b870:	68a0      	ldr	r0, [r4, #8]
   1b872:	f7ff ff3b 	bl	1b6ec <sys_get_le64>
   1b876:	4b6f      	ldr	r3, [pc, #444]	; (1ba34 <hci_cmd_handle+0x340>)
   1b878:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
   1b87c:	4611      	mov	r1, r2
   1b87e:	a80c      	add	r0, sp, #48	; 0x30
   1b880:	f7ff fdba 	bl	1b3f8 <cmd_complete>
	ccst->status = 0x00;
   1b884:	7005      	strb	r5, [r0, #0]
	return evt;
   1b886:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b888:	e742      	b.n	1b710 <hci_cmd_handle+0x1c>
		read_tx_power_level(cmd, evt);
   1b88a:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
   1b88c:	2104      	movs	r1, #4
   1b88e:	a80c      	add	r0, sp, #48	; 0x30
	handle = sys_le16_to_cpu(cmd->handle);
   1b890:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   1b892:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
   1b894:	f7ff fdb0 	bl	1b3f8 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   1b898:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
   1b89a:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
   1b89c:	1cc2      	adds	r2, r0, #3
   1b89e:	4639      	mov	r1, r7
   1b8a0:	4630      	mov	r0, r6
   1b8a2:	f7fe fc32 	bl	1a10a <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b8a6:	2800      	cmp	r0, #0
   1b8a8:	bf14      	ite	ne
   1b8aa:	2302      	movne	r3, #2
   1b8ac:	2300      	moveq	r3, #0
   1b8ae:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   1b8b0:	f8a4 5001 	strh.w	r5, [r4, #1]
   1b8b4:	e7e7      	b.n	1b886 <hci_cmd_handle+0x192>
	handle = sys_le16_to_cpu(cmd->handle);
   1b8b6:	68a3      	ldr	r3, [r4, #8]
   1b8b8:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   1b8ba:	a90d      	add	r1, sp, #52	; 0x34
   1b8bc:	4620      	mov	r0, r4
   1b8be:	f7fe fc2e 	bl	1a11e <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
   1b8c2:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   1b8c4:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
   1b8c6:	a80c      	add	r0, sp, #48	; 0x30
   1b8c8:	f7ff fd96 	bl	1b3f8 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
   1b8cc:	2d00      	cmp	r5, #0
   1b8ce:	bf14      	ite	ne
   1b8d0:	230c      	movne	r3, #12
   1b8d2:	2300      	moveq	r3, #0
   1b8d4:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   1b8d6:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   1b8da:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1b8de:	f8a0 3003 	strh.w	r3, [r0, #3]
   1b8e2:	e7d0      	b.n	1b886 <hci_cmd_handle+0x192>
		write_auth_payload_timeout(cmd, evt);
   1b8e4:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1b8e6:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   1b8e8:	8859      	ldrh	r1, [r3, #2]
   1b8ea:	4620      	mov	r0, r4
   1b8ec:	f7fe fc2b 	bl	1a146 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   1b8f0:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
   1b8f2:	2103      	movs	r1, #3
   1b8f4:	a80c      	add	r0, sp, #48	; 0x30
   1b8f6:	f7ff fd7f 	bl	1b3f8 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
   1b8fa:	2d00      	cmp	r5, #0
   1b8fc:	bf14      	ite	ne
   1b8fe:	230c      	movne	r3, #12
   1b900:	2300      	moveq	r3, #0
   1b902:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   1b904:	f8a0 4001 	strh.w	r4, [r0, #1]
   1b908:	e7bd      	b.n	1b886 <hci_cmd_handle+0x192>
	switch (ocf) {
   1b90a:	3a01      	subs	r2, #1
   1b90c:	2a08      	cmp	r2, #8
   1b90e:	f63f af42 	bhi.w	1b796 <hci_cmd_handle+0xa2>
   1b912:	a301      	add	r3, pc, #4	; (adr r3, 1b918 <hci_cmd_handle+0x224>)
   1b914:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1b918:	0001b93d 	.word	0x0001b93d
   1b91c:	0001b967 	.word	0x0001b967
   1b920:	0001ba41 	.word	0x0001ba41
   1b924:	0001b797 	.word	0x0001b797
   1b928:	0001b797 	.word	0x0001b797
   1b92c:	0001b797 	.word	0x0001b797
   1b930:	0001b797 	.word	0x0001b797
   1b934:	0001b797 	.word	0x0001b797
   1b938:	0001ba5d 	.word	0x0001ba5d
	rp = cmd_complete(evt, sizeof(*rp));
   1b93c:	2109      	movs	r1, #9
   1b93e:	a80c      	add	r0, sp, #48	; 0x30
   1b940:	f7ff fd5a 	bl	1b3f8 <cmd_complete>
	rp->status = 0x00;
   1b944:	2300      	movs	r3, #0
   1b946:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
   1b948:	7083      	strb	r3, [r0, #2]
   1b94a:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
   1b94c:	f06f 030e 	mvn.w	r3, #14
   1b950:	7143      	strb	r3, [r0, #5]
   1b952:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
   1b954:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
   1b956:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
   1b958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
   1b95c:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
   1b95e:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
   1b960:	71c3      	strb	r3, [r0, #7]
   1b962:	7203      	strb	r3, [r0, #8]
   1b964:	e78f      	b.n	1b886 <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1b966:	2141      	movs	r1, #65	; 0x41
   1b968:	a80c      	add	r0, sp, #48	; 0x30
   1b96a:	f7ff fd45 	bl	1b3f8 <cmd_complete>
	rp->status = 0x00;
   1b96e:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   1b970:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1b972:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1b974:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1b978:	f7eb f9b3 	bl	6ce2 <memset>
	rp->commands[2] |= BIT(7);
   1b97c:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1b97e:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[2] |= BIT(7);
   1b980:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b984:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
   1b986:	79a3      	ldrb	r3, [r4, #6]
   1b988:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b98c:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
   1b98e:	7ae3      	ldrb	r3, [r4, #11]
   1b990:	f043 0304 	orr.w	r3, r3, #4
   1b994:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   1b996:	7be3      	ldrb	r3, [r4, #15]
   1b998:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1b99c:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
   1b99e:	7c23      	ldrb	r3, [r4, #16]
   1b9a0:	f043 0302 	orr.w	r3, r3, #2
   1b9a4:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
   1b9a6:	7de3      	ldrb	r3, [r4, #23]
   1b9a8:	f043 0304 	orr.w	r3, r3, #4
   1b9ac:	75e3      	strb	r3, [r4, #23]
	rp->commands[28] |= BIT(3);
   1b9ae:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(1) | BIT(2);
   1b9b0:	f043 030f 	orr.w	r3, r3, #15
   1b9b4:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
   1b9b6:	7863      	ldrb	r3, [r4, #1]
   1b9b8:	f043 0320 	orr.w	r3, r3, #32
   1b9bc:	7063      	strb	r3, [r4, #1]
	rp->commands[33] |= BIT(4) | BIT(5);
   1b9be:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
   1b9c2:	f063 030f 	orn	r3, r3, #15
   1b9c6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
   1b9ca:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1b9ce:	f062 0208 	orn	r2, r2, #8
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   1b9d2:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1b9d6:	76a2      	strb	r2, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
   1b9d8:	22ff      	movs	r2, #255	; 0xff
   1b9da:	76e2      	strb	r2, [r4, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   1b9dc:	7722      	strb	r2, [r4, #28]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   1b9de:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
   1b9e2:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
   1b9e6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
   1b9ea:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
   1b9ee:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
   1b9f2:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
   1b9f6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1b9fa:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
   1b9fe:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1ba02:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
   1ba06:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1ba0a:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
   1ba0e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
   1ba12:	e738      	b.n	1b886 <hci_cmd_handle+0x192>
   1ba14:	2000e210 	.word	0x2000e210
   1ba18:	0002ef38 	.word	0x0002ef38
   1ba1c:	0002ef60 	.word	0x0002ef60
   1ba20:	00033ab9 	.word	0x00033ab9
   1ba24:	000339a6 	.word	0x000339a6
   1ba28:	20001bfc 	.word	0x20001bfc
   1ba2c:	00033ad3 	.word	0x00033ad3
   1ba30:	20001c04 	.word	0x20001c04
   1ba34:	2000dba8 	.word	0x2000dba8
   1ba38:	20001c90 	.word	0x20001c90
   1ba3c:	2000dbb0 	.word	0x2000dbb0
	rp = cmd_complete(evt, sizeof(*rp));
   1ba40:	2109      	movs	r1, #9
   1ba42:	a80c      	add	r0, sp, #48	; 0x30
   1ba44:	f7ff fcd8 	bl	1b3f8 <cmd_complete>
	rp->status = 0x00;
   1ba48:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   1ba4a:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1ba4c:	2208      	movs	r2, #8
	rp->status = 0x00;
   1ba4e:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1ba52:	f7eb f946 	bl	6ce2 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   1ba56:	2360      	movs	r3, #96	; 0x60
   1ba58:	7163      	strb	r3, [r4, #5]
   1ba5a:	e714      	b.n	1b886 <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1ba5c:	2107      	movs	r1, #7
   1ba5e:	a80c      	add	r0, sp, #48	; 0x30
   1ba60:	f7ff fcca 	bl	1b3f8 <cmd_complete>
	rp->status = 0x00;
   1ba64:	4601      	mov	r1, r0
   1ba66:	2300      	movs	r3, #0
   1ba68:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   1ba6c:	4618      	mov	r0, r3
   1ba6e:	f7f6 fc25 	bl	122bc <ll_addr_get>
   1ba72:	e708      	b.n	1b886 <hci_cmd_handle+0x192>
	switch (ocf) {
   1ba74:	3a01      	subs	r2, #1
   1ba76:	2a4d      	cmp	r2, #77	; 0x4d
   1ba78:	f63f ae8d 	bhi.w	1b796 <hci_cmd_handle+0xa2>
   1ba7c:	a301      	add	r3, pc, #4	; (adr r3, 1ba84 <hci_cmd_handle+0x390>)
   1ba7e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1ba82:	bf00      	nop
   1ba84:	0001bbbd 	.word	0x0001bbbd
   1ba88:	0001bbc7 	.word	0x0001bbc7
   1ba8c:	0001bbdf 	.word	0x0001bbdf
   1ba90:	0001b797 	.word	0x0001b797
   1ba94:	0001bc03 	.word	0x0001bc03
   1ba98:	0001bcb3 	.word	0x0001bcb3
   1ba9c:	0001c11f 	.word	0x0001c11f
   1baa0:	0001bce3 	.word	0x0001bce3
   1baa4:	0001bcef 	.word	0x0001bcef
   1baa8:	0001bcfb 	.word	0x0001bcfb
   1baac:	0001bd19 	.word	0x0001bd19
   1bab0:	0001bd31 	.word	0x0001bd31
   1bab4:	0001bd51 	.word	0x0001bd51
   1bab8:	0001bd7b 	.word	0x0001bd7b
   1babc:	0001bc19 	.word	0x0001bc19
   1bac0:	0001bc2f 	.word	0x0001bc2f
   1bac4:	0001bc41 	.word	0x0001bc41
   1bac8:	0001bc49 	.word	0x0001bc49
   1bacc:	0001bddd 	.word	0x0001bddd
   1bad0:	0001bd83 	.word	0x0001bd83
   1bad4:	0001bdb9 	.word	0x0001bdb9
   1bad8:	0001bdd3 	.word	0x0001bdd3
   1badc:	0001bc51 	.word	0x0001bc51
   1bae0:	0001bc77 	.word	0x0001bc77
   1bae4:	0001bd8b 	.word	0x0001bd8b
   1bae8:	0001bd9f 	.word	0x0001bd9f
   1baec:	0001bdaf 	.word	0x0001bdaf
   1baf0:	0001bc8d 	.word	0x0001bc8d
   1baf4:	0001b797 	.word	0x0001b797
   1baf8:	0001b797 	.word	0x0001b797
   1bafc:	0001b797 	.word	0x0001b797
   1bb00:	0001bdf7 	.word	0x0001bdf7
   1bb04:	0001be1d 	.word	0x0001be1d
   1bb08:	0001be2b 	.word	0x0001be2b
   1bb0c:	0001be3b 	.word	0x0001be3b
   1bb10:	0001be53 	.word	0x0001be53
   1bb14:	0001b797 	.word	0x0001b797
   1bb18:	0001b797 	.word	0x0001b797
   1bb1c:	0001bf5f 	.word	0x0001bf5f
   1bb20:	0001bf6d 	.word	0x0001bf6d
   1bb24:	0001bf75 	.word	0x0001bf75
   1bb28:	0001bf85 	.word	0x0001bf85
   1bb2c:	0001bf97 	.word	0x0001bf97
   1bb30:	0001bfb5 	.word	0x0001bfb5
   1bb34:	0001bfd3 	.word	0x0001bfd3
   1bb38:	0001bfe9 	.word	0x0001bfe9
   1bb3c:	0001be6f 	.word	0x0001be6f
   1bb40:	0001be95 	.word	0x0001be95
   1bb44:	0001beeb 	.word	0x0001beeb
   1bb48:	0001bf09 	.word	0x0001bf09
   1bb4c:	0001b797 	.word	0x0001b797
   1bb50:	0001b797 	.word	0x0001b797
   1bb54:	0001b797 	.word	0x0001b797
   1bb58:	0001b797 	.word	0x0001b797
   1bb5c:	0001b797 	.word	0x0001b797
   1bb60:	0001b797 	.word	0x0001b797
   1bb64:	0001b797 	.word	0x0001b797
   1bb68:	0001b797 	.word	0x0001b797
   1bb6c:	0001b797 	.word	0x0001b797
   1bb70:	0001b797 	.word	0x0001b797
   1bb74:	0001b797 	.word	0x0001b797
   1bb78:	0001b797 	.word	0x0001b797
   1bb7c:	0001b797 	.word	0x0001b797
   1bb80:	0001b797 	.word	0x0001b797
   1bb84:	0001b797 	.word	0x0001b797
   1bb88:	0001b797 	.word	0x0001b797
   1bb8c:	0001b797 	.word	0x0001b797
   1bb90:	0001b797 	.word	0x0001b797
   1bb94:	0001b797 	.word	0x0001b797
   1bb98:	0001b797 	.word	0x0001b797
   1bb9c:	0001b797 	.word	0x0001b797
   1bba0:	0001b797 	.word	0x0001b797
   1bba4:	0001b797 	.word	0x0001b797
   1bba8:	0001b797 	.word	0x0001b797
   1bbac:	0001bffd 	.word	0x0001bffd
   1bbb0:	0001b797 	.word	0x0001b797
   1bbb4:	0001b797 	.word	0x0001b797
   1bbb8:	0001bff3 	.word	0x0001bff3
	le_event_mask = sys_get_le64(cmd->events);
   1bbbc:	68a0      	ldr	r0, [r4, #8]
   1bbbe:	f7ff fd95 	bl	1b6ec <sys_get_le64>
   1bbc2:	4bb1      	ldr	r3, [pc, #708]	; (1be88 <hci_cmd_handle+0x794>)
   1bbc4:	e651      	b.n	1b86a <hci_cmd_handle+0x176>
	rp = cmd_complete(evt, sizeof(*rp));
   1bbc6:	2104      	movs	r1, #4
   1bbc8:	a80c      	add	r0, sp, #48	; 0x30
   1bbca:	f7ff fc15 	bl	1b3f8 <cmd_complete>
	rp->status = 0x00;
   1bbce:	2300      	movs	r3, #0
   1bbd0:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
   1bbd2:	221b      	movs	r2, #27
   1bbd4:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
   1bbd6:	2303      	movs	r3, #3
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
   1bbd8:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
   1bbda:	70c3      	strb	r3, [r0, #3]
   1bbdc:	e653      	b.n	1b886 <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1bbde:	2109      	movs	r1, #9
   1bbe0:	a80c      	add	r0, sp, #48	; 0x30
   1bbe2:	f7ff fc09 	bl	1b3f8 <cmd_complete>
	rp->status = 0x00;
   1bbe6:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   1bbe8:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1bbea:	2208      	movs	r2, #8
	rp->status = 0x00;
   1bbec:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1bbf0:	f7eb f877 	bl	6ce2 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
   1bbf4:	23ff      	movs	r3, #255	; 0xff
   1bbf6:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
   1bbf8:	2341      	movs	r3, #65	; 0x41
   1bbfa:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
   1bbfc:	2301      	movs	r3, #1
   1bbfe:	70e3      	strb	r3, [r4, #3]
   1bc00:	e641      	b.n	1b886 <hci_cmd_handle+0x192>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   1bc02:	68a1      	ldr	r1, [r4, #8]
   1bc04:	2001      	movs	r0, #1
   1bc06:	f7f6 fb73 	bl	122f0 <ll_addr_set>
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   1bc0a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
   1bc0c:	2101      	movs	r1, #1
   1bc0e:	a80c      	add	r0, sp, #48	; 0x30
   1bc10:	f7ff fbf2 	bl	1b3f8 <cmd_complete>
	ccst->status = status;
   1bc14:	7004      	strb	r4, [r0, #0]
   1bc16:	e636      	b.n	1b886 <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1bc18:	2102      	movs	r1, #2
   1bc1a:	a80c      	add	r0, sp, #48	; 0x30
   1bc1c:	f7ff fbec 	bl	1b3f8 <cmd_complete>
	rp->status = 0x00;
   1bc20:	2300      	movs	r3, #0
   1bc22:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
   1bc24:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   1bc26:	f001 fdb3 	bl	1d790 <ll_wl_size_get>
   1bc2a:	7060      	strb	r0, [r4, #1]
   1bc2c:	e62b      	b.n	1b886 <hci_cmd_handle+0x192>
	ccst = cmd_complete(evt, sizeof(*ccst));
   1bc2e:	2101      	movs	r1, #1
   1bc30:	a80c      	add	r0, sp, #48	; 0x30
   1bc32:	f7ff fbe1 	bl	1b3f8 <cmd_complete>
   1bc36:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
   1bc38:	f001 fdac 	bl	1d794 <ll_wl_clear>
	ccst->status = ll_rl_clear();
   1bc3c:	7020      	strb	r0, [r4, #0]
   1bc3e:	e622      	b.n	1b886 <hci_cmd_handle+0x192>
	status = ll_wl_add(&cmd->addr);
   1bc40:	68a0      	ldr	r0, [r4, #8]
   1bc42:	f001 fe93 	bl	1d96c <ll_wl_add>
   1bc46:	e7e0      	b.n	1bc0a <hci_cmd_handle+0x516>
	status = ll_wl_remove(&cmd->addr);
   1bc48:	68a0      	ldr	r0, [r4, #8]
   1bc4a:	f001 fddf 	bl	1d80c <ll_wl_remove>
   1bc4e:	e7dc      	b.n	1bc0a <hci_cmd_handle+0x516>
		le_encrypt(cmd, evt);
   1bc50:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   1bc52:	2300      	movs	r3, #0
   1bc54:	aa0d      	add	r2, sp, #52	; 0x34
   1bc56:	f100 0110 	add.w	r1, r0, #16
   1bc5a:	f002 fc83 	bl	1e564 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
   1bc5e:	2111      	movs	r1, #17
   1bc60:	a80c      	add	r0, sp, #48	; 0x30
   1bc62:	f7ff fbc9 	bl	1b3f8 <cmd_complete>
	rp->status = 0x00;
   1bc66:	2300      	movs	r3, #0
   1bc68:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   1bc6c:	2210      	movs	r2, #16
   1bc6e:	a90d      	add	r1, sp, #52	; 0x34
	memcpy(rp->info, build_info, sizeof(build_info));
   1bc70:	f7eb f80a 	bl	6c88 <memcpy>
   1bc74:	e607      	b.n	1b886 <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1bc76:	2109      	movs	r1, #9
   1bc78:	a80c      	add	r0, sp, #48	; 0x30
   1bc7a:	f7ff fbbd 	bl	1b3f8 <cmd_complete>
	rp->status = 0x00;
   1bc7e:	2300      	movs	r3, #0
   1bc80:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
   1bc84:	2108      	movs	r1, #8
   1bc86:	f001 f89f 	bl	1cdc8 <bt_rand>
   1bc8a:	e5fc      	b.n	1b886 <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1bc8c:	2109      	movs	r1, #9
   1bc8e:	a80c      	add	r0, sp, #48	; 0x30
   1bc90:	f7ff fbb2 	bl	1b3f8 <cmd_complete>
	rp->status = 0x00;
   1bc94:	4601      	mov	r1, r0
   1bc96:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
   1bc98:	4602      	mov	r2, r0
	rp->status = 0x00;
   1bc9a:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
   1bc9e:	f46f 0040 	mvn.w	r0, #12582912	; 0xc00000
   1bca2:	f7ff fb7b 	bl	1b39c <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
   1bca6:	f240 30ff 	movw	r0, #1023	; 0x3ff
   1bcaa:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
   1bcac:	f7ff fb76 	bl	1b39c <sys_put_le32>
   1bcb0:	e5e9      	b.n	1b886 <hci_cmd_handle+0x192>
		le_set_adv_param(cmd, evt);
   1bcb2:	68a0      	ldr	r0, [r4, #8]
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
   1bcb4:	2100      	movs	r1, #0
   1bcb6:	7903      	ldrb	r3, [r0, #4]
   1bcb8:	8802      	ldrh	r2, [r0, #0]
   1bcba:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
   1bcbe:	e9cd 1107 	strd	r1, r1, [sp, #28]
   1bcc2:	e9cd 1105 	strd	r1, r1, [sp, #20]
   1bcc6:	7b84      	ldrb	r4, [r0, #14]
   1bcc8:	9404      	str	r4, [sp, #16]
   1bcca:	7b44      	ldrb	r4, [r0, #13]
   1bccc:	9403      	str	r4, [sp, #12]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   1bcce:	1dc4      	adds	r4, r0, #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
   1bcd0:	9402      	str	r4, [sp, #8]
   1bcd2:	7984      	ldrb	r4, [r0, #6]
   1bcd4:	9401      	str	r4, [sp, #4]
   1bcd6:	7940      	ldrb	r0, [r0, #5]
   1bcd8:	9000      	str	r0, [sp, #0]
   1bcda:	4608      	mov	r0, r1
   1bcdc:	f001 f898 	bl	1ce10 <ll_adv_params_set>
   1bce0:	e793      	b.n	1bc0a <hci_cmd_handle+0x516>
		le_set_adv_data(cmd, evt);
   1bce2:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
   1bce4:	1c59      	adds	r1, r3, #1
   1bce6:	7818      	ldrb	r0, [r3, #0]
   1bce8:	f001 f99c 	bl	1d024 <ll_adv_data_set>
   1bcec:	e5ac      	b.n	1b848 <hci_cmd_handle+0x154>
		le_set_scan_rsp_data(cmd, evt);
   1bcee:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
   1bcf0:	1c59      	adds	r1, r3, #1
   1bcf2:	7818      	ldrb	r0, [r3, #0]
   1bcf4:	f001 f9ee 	bl	1d0d4 <ll_scan_data_set>
   1bcf8:	e5a6      	b.n	1b848 <hci_cmd_handle+0x154>
	status = ll_adv_enable(cmd->enable);
   1bcfa:	68a3      	ldr	r3, [r4, #8]
   1bcfc:	7818      	ldrb	r0, [r3, #0]
   1bcfe:	f001 fa2f 	bl	1d160 <ll_adv_enable>
	status = ll_scan_enable(cmd->enable);
   1bd02:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
   1bd04:	2101      	movs	r1, #1
   1bd06:	a80c      	add	r0, sp, #48	; 0x30
   1bd08:	f7ff fb76 	bl	1b3f8 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
   1bd0c:	2c00      	cmp	r4, #0
   1bd0e:	bf18      	it	ne
   1bd10:	230c      	movne	r3, #12
   1bd12:	bf08      	it	eq
   1bd14:	2300      	moveq	r3, #0
   1bd16:	e59c      	b.n	1b852 <hci_cmd_handle+0x15e>
		le_set_scan_param(cmd, evt);
   1bd18:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   1bd1a:	7963      	ldrb	r3, [r4, #5]
   1bd1c:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   1bd20:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   1bd24:	7820      	ldrb	r0, [r4, #0]
   1bd26:	79a4      	ldrb	r4, [r4, #6]
   1bd28:	9400      	str	r4, [sp, #0]
   1bd2a:	f001 fa97 	bl	1d25c <ll_scan_params_set>
   1bd2e:	e7e8      	b.n	1bd02 <hci_cmd_handle+0x60e>
		le_set_scan_enable(cmd, evt);
   1bd30:	68a2      	ldr	r2, [r4, #8]
   1bd32:	4b56      	ldr	r3, [pc, #344]	; (1be8c <hci_cmd_handle+0x798>)
	if (cmd->enable && cmd->filter_dup) {
   1bd34:	7810      	ldrb	r0, [r2, #0]
   1bd36:	b140      	cbz	r0, 1bd4a <hci_cmd_handle+0x656>
   1bd38:	7852      	ldrb	r2, [r2, #1]
   1bd3a:	b132      	cbz	r2, 1bd4a <hci_cmd_handle+0x656>
		dup_count = 0;
   1bd3c:	2200      	movs	r2, #0
   1bd3e:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
   1bd40:	4b53      	ldr	r3, [pc, #332]	; (1be90 <hci_cmd_handle+0x79c>)
		dup_count = -1;
   1bd42:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
   1bd44:	f001 faaa 	bl	1d29c <ll_scan_enable>
   1bd48:	e7db      	b.n	1bd02 <hci_cmd_handle+0x60e>
		dup_count = -1;
   1bd4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bd4e:	e7f8      	b.n	1bd42 <hci_cmd_handle+0x64e>
		le_create_connection(cmd, evt);
   1bd50:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
   1bd52:	f8b4 5013 	ldrh.w	r5, [r4, #19]
   1bd56:	7963      	ldrb	r3, [r4, #5]
   1bd58:	7922      	ldrb	r2, [r4, #4]
   1bd5a:	8861      	ldrh	r1, [r4, #2]
   1bd5c:	8820      	ldrh	r0, [r4, #0]
   1bd5e:	9504      	str	r5, [sp, #16]
   1bd60:	f8b4 5011 	ldrh.w	r5, [r4, #17]
   1bd64:	9503      	str	r5, [sp, #12]
   1bd66:	f8b4 500f 	ldrh.w	r5, [r4, #15]
   1bd6a:	9502      	str	r5, [sp, #8]
   1bd6c:	7b25      	ldrb	r5, [r4, #12]
   1bd6e:	9501      	str	r5, [sp, #4]
   1bd70:	3406      	adds	r4, #6
   1bd72:	9400      	str	r4, [sp, #0]
   1bd74:	f001 facc 	bl	1d310 <ll_create_connection>
   1bd78:	e540      	b.n	1b7fc <hci_cmd_handle+0x108>
	status = ll_connect_disable(node_rx);
   1bd7a:	4630      	mov	r0, r6
   1bd7c:	f7fe fef4 	bl	1ab68 <ll_connect_disable>
   1bd80:	e7bf      	b.n	1bd02 <hci_cmd_handle+0x60e>
	status = ll_chm_update(&cmd->ch_map[0]);
   1bd82:	68a0      	ldr	r0, [r4, #8]
   1bd84:	f7fe f8ec 	bl	19f60 <ll_chm_update>
   1bd88:	e7bb      	b.n	1bd02 <hci_cmd_handle+0x60e>
		le_start_encryption(cmd, evt);
   1bd8a:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
   1bd8c:	f100 030c 	add.w	r3, r0, #12
   1bd90:	f100 020a 	add.w	r2, r0, #10
   1bd94:	1c81      	adds	r1, r0, #2
   1bd96:	8800      	ldrh	r0, [r0, #0]
   1bd98:	f7fe fba8 	bl	1a4ec <ll_enc_req_send>
   1bd9c:	e52e      	b.n	1b7fc <hci_cmd_handle+0x108>
	handle = sys_le16_to_cpu(cmd->handle);
   1bd9e:	68a2      	ldr	r2, [r4, #8]
   1bda0:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   1bda4:	2100      	movs	r1, #0
   1bda6:	4620      	mov	r0, r4
   1bda8:	f7fe f931 	bl	1a00e <ll_start_enc_req_send>
   1bdac:	e5a0      	b.n	1b8f0 <hci_cmd_handle+0x1fc>
	handle = sys_le16_to_cpu(cmd->handle);
   1bdae:	68a3      	ldr	r3, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1bdb0:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
   1bdb2:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1bdb4:	2106      	movs	r1, #6
   1bdb6:	e7f6      	b.n	1bda6 <hci_cmd_handle+0x6b2>
	handle = sys_le16_to_cpu(cmd->handle);
   1bdb8:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
   1bdba:	2108      	movs	r1, #8
   1bdbc:	a80c      	add	r0, sp, #48	; 0x30
	handle = sys_le16_to_cpu(cmd->handle);
   1bdbe:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
   1bdc0:	f7ff fb1a 	bl	1b3f8 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   1bdc4:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
   1bdc6:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   1bdc8:	1cc1      	adds	r1, r0, #3
   1bdca:	4630      	mov	r0, r6
   1bdcc:	f7fe f90a 	bl	19fe4 <ll_chm_get>
   1bdd0:	e569      	b.n	1b8a6 <hci_cmd_handle+0x1b2>
	handle = sys_le16_to_cpu(cmd->handle);
   1bdd2:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   1bdd4:	8818      	ldrh	r0, [r3, #0]
   1bdd6:	f7fe f95c 	bl	1a092 <ll_feature_req_send>
   1bdda:	e50f      	b.n	1b7fc <hci_cmd_handle+0x108>
		le_conn_update(cmd, evt);
   1bddc:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
   1bdde:	8911      	ldrh	r1, [r2, #8]
   1bde0:	8893      	ldrh	r3, [r2, #4]
   1bde2:	8810      	ldrh	r0, [r2, #0]
   1bde4:	9101      	str	r1, [sp, #4]
   1bde6:	88d2      	ldrh	r2, [r2, #6]
   1bde8:	9200      	str	r2, [sp, #0]
   1bdea:	2200      	movs	r2, #0
   1bdec:	4611      	mov	r1, r2
   1bdee:	f7fe f83f 	bl	19e70 <ll_conn_update>
	*evt = cmd_status(status);
   1bdf2:	b2c0      	uxtb	r0, r0
   1bdf4:	e506      	b.n	1b804 <hci_cmd_handle+0x110>
		le_conn_param_req_reply(cmd, evt);
   1bdf6:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
   1bdf8:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1bdfa:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
   1bdfc:	8893      	ldrh	r3, [r2, #4]
   1bdfe:	9101      	str	r1, [sp, #4]
   1be00:	88d2      	ldrh	r2, [r2, #6]
   1be02:	9200      	str	r2, [sp, #0]
   1be04:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
   1be06:	2102      	movs	r1, #2
   1be08:	4620      	mov	r0, r4
   1be0a:	f7fe f831 	bl	19e70 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
   1be0e:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
   1be10:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
   1be12:	a80c      	add	r0, sp, #48	; 0x30
   1be14:	f7ff faf0 	bl	1b3f8 <cmd_complete>
	rp->status = status;
   1be18:	7005      	strb	r5, [r0, #0]
   1be1a:	e573      	b.n	1b904 <hci_cmd_handle+0x210>
		le_conn_param_req_neg_reply(cmd, evt);
   1be1c:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1be1e:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
   1be20:	789a      	ldrb	r2, [r3, #2]
   1be22:	2300      	movs	r3, #0
   1be24:	e9cd 3300 	strd	r3, r3, [sp]
   1be28:	e7ed      	b.n	1be06 <hci_cmd_handle+0x712>
		le_set_data_len(cmd, evt);
   1be2a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1be2c:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   1be2e:	889a      	ldrh	r2, [r3, #4]
   1be30:	8859      	ldrh	r1, [r3, #2]
   1be32:	4620      	mov	r0, r4
   1be34:	f7fe f99d 	bl	1a172 <ll_length_req_send>
   1be38:	e55a      	b.n	1b8f0 <hci_cmd_handle+0x1fc>
	rp = cmd_complete(evt, sizeof(*rp));
   1be3a:	2105      	movs	r1, #5
   1be3c:	a80c      	add	r0, sp, #48	; 0x30
   1be3e:	f7ff fadb 	bl	1b3f8 <cmd_complete>
   1be42:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
   1be44:	1cc1      	adds	r1, r0, #3
   1be46:	3001      	adds	r0, #1
   1be48:	f7fe f9b6 	bl	1a1b8 <ll_length_default_get>
	rp->status = 0x00;
   1be4c:	2300      	movs	r3, #0
   1be4e:	7023      	strb	r3, [r4, #0]
   1be50:	e519      	b.n	1b886 <hci_cmd_handle+0x192>
		le_write_default_data_len(cmd, evt);
   1be52:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
   1be54:	8859      	ldrh	r1, [r3, #2]
   1be56:	8818      	ldrh	r0, [r3, #0]
   1be58:	f7fe f9b8 	bl	1a1cc <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1be5c:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
   1be5e:	2101      	movs	r1, #1
   1be60:	a80c      	add	r0, sp, #48	; 0x30
   1be62:	f7ff fac9 	bl	1b3f8 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
   1be66:	2c00      	cmp	r4, #0
   1be68:	bf18      	it	ne
   1be6a:	231e      	movne	r3, #30
   1be6c:	e751      	b.n	1bd12 <hci_cmd_handle+0x61e>
	rp = cmd_complete(evt, sizeof(*rp));
   1be6e:	2109      	movs	r1, #9
   1be70:	a80c      	add	r0, sp, #48	; 0x30
   1be72:	f7ff fac1 	bl	1b3f8 <cmd_complete>
   1be76:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
   1be78:	1dc3      	adds	r3, r0, #7
   1be7a:	1d42      	adds	r2, r0, #5
   1be7c:	1cc1      	adds	r1, r0, #3
   1be7e:	3001      	adds	r0, #1
   1be80:	f7fe f9ae 	bl	1a1e0 <ll_length_max_get>
   1be84:	e7e2      	b.n	1be4c <hci_cmd_handle+0x758>
   1be86:	bf00      	nop
   1be88:	2000dbb0 	.word	0x2000dbb0
   1be8c:	20001c04 	.word	0x20001c04
   1be90:	20001c08 	.word	0x20001c08
	handle = sys_le16_to_cpu(cmd->handle);
   1be94:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
   1be96:	2105      	movs	r1, #5
   1be98:	a80c      	add	r0, sp, #48	; 0x30
	handle = sys_le16_to_cpu(cmd->handle);
   1be9a:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
   1be9c:	f7ff faac 	bl	1b3f8 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   1bea0:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
   1bea2:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1bea4:	1d02      	adds	r2, r0, #4
   1bea6:	1cc1      	adds	r1, r0, #3
   1bea8:	4630      	mov	r0, r6
   1beaa:	f7fe f9a2 	bl	1a1f2 <ll_phy_get>
	return __builtin_ffs(op);
   1beae:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
   1beb0:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
   1beb4:	2800      	cmp	r0, #0
   1beb6:	bf14      	ite	ne
   1beb8:	230c      	movne	r3, #12
   1beba:	2300      	moveq	r3, #0
   1bebc:	7023      	strb	r3, [r4, #0]
   1bebe:	2a00      	cmp	r2, #0
   1bec0:	fa92 f3a2 	rbit	r3, r2
   1bec4:	fab3 f383 	clz	r3, r3
   1bec8:	7922      	ldrb	r2, [r4, #4]
   1beca:	bf08      	it	eq
   1becc:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1bed0:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   1bed2:	70e3      	strb	r3, [r4, #3]
   1bed4:	2a00      	cmp	r2, #0
   1bed6:	fa92 f3a2 	rbit	r3, r2
   1beda:	fab3 f383 	clz	r3, r3
   1bede:	bf08      	it	eq
   1bee0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1bee4:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   1bee6:	7123      	strb	r3, [r4, #4]
   1bee8:	e4cd      	b.n	1b886 <hci_cmd_handle+0x192>
		le_set_default_phy(cmd, evt);
   1beea:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1beec:	781a      	ldrb	r2, [r3, #0]
   1beee:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   1bef0:	bf44      	itt	mi
   1bef2:	2107      	movmi	r1, #7
   1bef4:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1bef6:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   1bef8:	bf44      	itt	mi
   1befa:	2207      	movmi	r2, #7
   1befc:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1befe:	7899      	ldrb	r1, [r3, #2]
   1bf00:	7858      	ldrb	r0, [r3, #1]
   1bf02:	f7fe f98b 	bl	1a21c <ll_phy_default_set>
   1bf06:	e7a9      	b.n	1be5c <hci_cmd_handle+0x768>
		le_set_phy(cmd, evt);
   1bf08:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1bf0a:	7899      	ldrb	r1, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
   1bf0c:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   1bf0e:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1bf12:	07cf      	lsls	r7, r1, #31
		cmd->tx_phys |= mask_phys;
   1bf14:	bf42      	ittt	mi
   1bf16:	78da      	ldrbmi	r2, [r3, #3]
   1bf18:	f042 0203 	orrmi.w	r2, r2, #3
   1bf1c:	70da      	strbmi	r2, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1bf1e:	078e      	lsls	r6, r1, #30
		cmd->rx_phys |= mask_phys;
   1bf20:	bf48      	it	mi
   1bf22:	791a      	ldrbmi	r2, [r3, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   1bf24:	78d9      	ldrb	r1, [r3, #3]
		cmd->rx_phys |= mask_phys;
   1bf26:	bf44      	itt	mi
   1bf28:	f042 0203 	orrmi.w	r2, r2, #3
   1bf2c:	711a      	strbmi	r2, [r3, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   1bf2e:	791b      	ldrb	r3, [r3, #4]
   1bf30:	ea41 0203 	orr.w	r2, r1, r3
   1bf34:	f012 0ffc 	tst.w	r2, #252	; 0xfc
   1bf38:	d001      	beq.n	1bf3e <hci_cmd_handle+0x84a>
		*evt = cmd_status(BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL);
   1bf3a:	2011      	movs	r0, #17
   1bf3c:	e462      	b.n	1b804 <hci_cmd_handle+0x110>
	if (!(cmd->tx_phys & 0x07) ||
   1bf3e:	074d      	lsls	r5, r1, #29
   1bf40:	d001      	beq.n	1bf46 <hci_cmd_handle+0x852>
   1bf42:	075a      	lsls	r2, r3, #29
   1bf44:	d101      	bne.n	1bf4a <hci_cmd_handle+0x856>
		*evt = cmd_status(BT_HCI_ERR_INVALID_PARAM);
   1bf46:	2012      	movs	r0, #18
   1bf48:	e45c      	b.n	1b804 <hci_cmd_handle+0x110>
	if (phy_opts & 0x03) {
   1bf4a:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
   1bf4e:	bf1c      	itt	ne
   1bf50:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   1bf54:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   1bf58:	f7fe f96a 	bl	1a230 <ll_phy_req_send>
   1bf5c:	e44e      	b.n	1b7fc <hci_cmd_handle+0x108>
		le_add_dev_to_rl(cmd, evt);
   1bf5e:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   1bf60:	f100 0217 	add.w	r2, r0, #23
   1bf64:	1dc1      	adds	r1, r0, #7
   1bf66:	f002 f841 	bl	1dfec <ll_rl_add>
   1bf6a:	e64e      	b.n	1bc0a <hci_cmd_handle+0x516>
	status = ll_rl_remove(&cmd->peer_id_addr);
   1bf6c:	68a0      	ldr	r0, [r4, #8]
   1bf6e:	f002 f8dd 	bl	1e12c <ll_rl_remove>
   1bf72:	e64a      	b.n	1bc0a <hci_cmd_handle+0x516>
	ccst = cmd_complete(evt, sizeof(*ccst));
   1bf74:	2101      	movs	r1, #1
   1bf76:	a80c      	add	r0, sp, #48	; 0x30
   1bf78:	f7ff fa3e 	bl	1b3f8 <cmd_complete>
   1bf7c:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
   1bf7e:	f001 fff7 	bl	1df70 <ll_rl_clear>
   1bf82:	e65b      	b.n	1bc3c <hci_cmd_handle+0x548>
	rp = cmd_complete(evt, sizeof(*rp));
   1bf84:	2102      	movs	r1, #2
   1bf86:	a80c      	add	r0, sp, #48	; 0x30
   1bf88:	f7ff fa36 	bl	1b3f8 <cmd_complete>
   1bf8c:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   1bf8e:	f001 ffed 	bl	1df6c <ll_rl_size_get>
   1bf92:	7060      	strb	r0, [r4, #1]
   1bf94:	e75a      	b.n	1be4c <hci_cmd_handle+0x758>
	memcpy(dst, src, sizeof(*dst));
   1bf96:	2207      	movs	r2, #7
   1bf98:	68a1      	ldr	r1, [r4, #8]
   1bf9a:	a80d      	add	r0, sp, #52	; 0x34
   1bf9c:	f7ea fe74 	bl	6c88 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
   1bfa0:	2107      	movs	r1, #7
   1bfa2:	a80c      	add	r0, sp, #48	; 0x30
   1bfa4:	f7ff fa28 	bl	1b3f8 <cmd_complete>
   1bfa8:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   1bfaa:	1c41      	adds	r1, r0, #1
   1bfac:	a80d      	add	r0, sp, #52	; 0x34
   1bfae:	f002 f949 	bl	1e244 <ll_rl_crpa_get>
   1bfb2:	e643      	b.n	1bc3c <hci_cmd_handle+0x548>
   1bfb4:	2207      	movs	r2, #7
   1bfb6:	68a1      	ldr	r1, [r4, #8]
   1bfb8:	a80d      	add	r0, sp, #52	; 0x34
   1bfba:	f7ea fe65 	bl	6c88 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
   1bfbe:	2107      	movs	r1, #7
   1bfc0:	a80c      	add	r0, sp, #48	; 0x30
   1bfc2:	f7ff fa19 	bl	1b3f8 <cmd_complete>
   1bfc6:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   1bfc8:	1c41      	adds	r1, r0, #1
   1bfca:	a80d      	add	r0, sp, #52	; 0x34
   1bfcc:	f002 f95a 	bl	1e284 <ll_rl_lrpa_get>
   1bfd0:	e634      	b.n	1bc3c <hci_cmd_handle+0x548>
	u8_t enable = cmd->enable;
   1bfd2:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
   1bfd4:	2101      	movs	r1, #1
   1bfd6:	a80c      	add	r0, sp, #48	; 0x30
	u8_t enable = cmd->enable;
   1bfd8:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
   1bfda:	f7ff fa0d 	bl	1b3f8 <cmd_complete>
   1bfde:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
   1bfe0:	4628      	mov	r0, r5
   1bfe2:	f002 f967 	bl	1e2b4 <ll_rl_enable>
   1bfe6:	e629      	b.n	1bc3c <hci_cmd_handle+0x548>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   1bfe8:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   1bfea:	8818      	ldrh	r0, [r3, #0]
   1bfec:	f002 f974 	bl	1e2d8 <ll_rl_timeout_set>
   1bff0:	e42a      	b.n	1b848 <hci_cmd_handle+0x154>
		le_set_privacy_mode(cmd, evt);
   1bff2:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   1bff4:	79c1      	ldrb	r1, [r0, #7]
   1bff6:	f002 f977 	bl	1e2e8 <ll_priv_mode_set>
   1bffa:	e606      	b.n	1bc0a <hci_cmd_handle+0x516>
	rp = cmd_complete(evt, sizeof(*rp));
   1bffc:	2103      	movs	r1, #3
   1bffe:	a80c      	add	r0, sp, #48	; 0x30
   1c000:	f7ff f9fa 	bl	1b3f8 <cmd_complete>
	rp->status = 0x00;
   1c004:	4601      	mov	r1, r0
   1c006:	2300      	movs	r3, #0
   1c008:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   1c00c:	3001      	adds	r0, #1
   1c00e:	f7f6 f98b 	bl	12328 <ll_tx_pwr_get>
   1c012:	e438      	b.n	1b886 <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1c014:	210d      	movs	r1, #13
   1c016:	a80c      	add	r0, sp, #48	; 0x30
   1c018:	f7ff f9ee 	bl	1b3f8 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
   1c01c:	2202      	movs	r2, #2
   1c01e:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
   1c020:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   1c022:	2201      	movs	r2, #1
   1c024:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
   1c026:	220d      	movs	r2, #13
	rp->status = 0x00;
   1c028:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
   1c02a:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
   1c02c:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
   1c02e:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
   1c030:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
   1c032:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
   1c034:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
   1c036:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
   1c038:	7242      	strb	r2, [r0, #9]
   1c03a:	7283      	strb	r3, [r0, #10]
   1c03c:	72c3      	strb	r3, [r0, #11]
   1c03e:	7303      	strb	r3, [r0, #12]
   1c040:	e421      	b.n	1b886 <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1c042:	2141      	movs	r1, #65	; 0x41
   1c044:	a80c      	add	r0, sp, #48	; 0x30
   1c046:	f7ff f9d7 	bl	1b3f8 <cmd_complete>
	rp->status = 0x00;
   1c04a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   1c04c:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1c04e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1c050:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1c054:	f7ea fe45 	bl	6ce2 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   1c058:	7863      	ldrb	r3, [r4, #1]
   1c05a:	f063 0358 	orn	r3, r3, #88	; 0x58
   1c05e:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   1c060:	78a3      	ldrb	r3, [r4, #2]
   1c062:	f043 0303 	orr.w	r3, r3, #3
   1c066:	70a3      	strb	r3, [r4, #2]
   1c068:	e40d      	b.n	1b886 <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1c06a:	2109      	movs	r1, #9
   1c06c:	a80c      	add	r0, sp, #48	; 0x30
   1c06e:	f7ff f9c3 	bl	1b3f8 <cmd_complete>
	rp->status = 0x00;
   1c072:	2100      	movs	r1, #0
   1c074:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1c078:	2208      	movs	r2, #8
		(void)memset(rp->er, 0x00, sizeof(rp->er));
   1c07a:	f7ea fe32 	bl	6ce2 <memset>
   1c07e:	e402      	b.n	1b886 <hci_cmd_handle+0x192>
	const char build_info[] = HCI_VS_BUILD_INFO;
   1c080:	4b5e      	ldr	r3, [pc, #376]	; (1c1fc <hci_cmd_handle+0xb08>)
   1c082:	aa0d      	add	r2, sp, #52	; 0x34
   1c084:	f103 0610 	add.w	r6, r3, #16
   1c088:	4615      	mov	r5, r2
   1c08a:	6818      	ldr	r0, [r3, #0]
   1c08c:	6859      	ldr	r1, [r3, #4]
   1c08e:	4614      	mov	r4, r2
   1c090:	c403      	stmia	r4!, {r0, r1}
   1c092:	3308      	adds	r3, #8
   1c094:	42b3      	cmp	r3, r6
   1c096:	4622      	mov	r2, r4
   1c098:	d1f7      	bne.n	1c08a <hci_cmd_handle+0x996>
   1c09a:	8819      	ldrh	r1, [r3, #0]
   1c09c:	789b      	ldrb	r3, [r3, #2]
   1c09e:	8021      	strh	r1, [r4, #0]
   1c0a0:	70a3      	strb	r3, [r4, #2]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   1c0a2:	2114      	movs	r1, #20
   1c0a4:	a80c      	add	r0, sp, #48	; 0x30
   1c0a6:	f7ff f9a7 	bl	1b3f8 <cmd_complete>
	rp->status = 0x00;
   1c0aa:	2300      	movs	r3, #0
   1c0ac:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   1c0b0:	2213      	movs	r2, #19
   1c0b2:	4629      	mov	r1, r5
   1c0b4:	e5dc      	b.n	1bc70 <hci_cmd_handle+0x57c>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   1c0b6:	68a1      	ldr	r1, [r4, #8]
   1c0b8:	2000      	movs	r0, #0
   1c0ba:	f7f6 f919 	bl	122f0 <ll_addr_set>
   1c0be:	f7ff bbc3 	b.w	1b848 <hci_cmd_handle+0x154>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1c0c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1c0c6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1c0ca:	3201      	adds	r2, #1
   1c0cc:	d106      	bne.n	1c0dc <hci_cmd_handle+0x9e8>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1c0ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1c0d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1c0d6:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1c0d8:	4293      	cmp	r3, r2
   1c0da:	d020      	beq.n	1c11e <hci_cmd_handle+0xa2a>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1c0dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1c0e0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1c0e4:	07db      	lsls	r3, r3, #31
   1c0e6:	d51a      	bpl.n	1c11e <hci_cmd_handle+0xa2a>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
   1c0e8:	2118      	movs	r1, #24
   1c0ea:	a80c      	add	r0, sp, #48	; 0x30
   1c0ec:	f7ff f984 	bl	1b3f8 <cmd_complete>
		rp->status = 0x00;
   1c0f0:	2600      	movs	r6, #0
		rp->num_addrs = 1;
   1c0f2:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
   1c0f4:	4604      	mov	r4, r0
		rp->num_addrs = 1;
   1c0f6:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
   1c0f8:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
   1c0fa:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   1c0fe:	1ca1      	adds	r1, r4, #2
   1c100:	f7ff f94c 	bl	1b39c <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
   1c104:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
   1c108:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
   1c10a:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
   1c10e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1c112:	71e3      	strb	r3, [r4, #7]
		(void)memset(addr->ir, 0x00, sizeof(addr->ir));
   1c114:	2210      	movs	r2, #16
   1c116:	4631      	mov	r1, r6
   1c118:	f104 0008 	add.w	r0, r4, #8
   1c11c:	e7ad      	b.n	1c07a <hci_cmd_handle+0x986>
	rp = cmd_complete(evt, sizeof(*rp));
   1c11e:	2102      	movs	r1, #2
   1c120:	a80c      	add	r0, sp, #48	; 0x30
   1c122:	f7ff f969 	bl	1b3f8 <cmd_complete>
	rp->status = 0x00;
   1c126:	2300      	movs	r3, #0
   1c128:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
   1c12a:	7043      	strb	r3, [r0, #1]
   1c12c:	f7ff bbab 	b.w	1b886 <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1c130:	2121      	movs	r1, #33	; 0x21
   1c132:	a80c      	add	r0, sp, #48	; 0x30
   1c134:	f7ff f960 	bl	1b3f8 <cmd_complete>
	rp->status = 0x00;
   1c138:	4603      	mov	r3, r0
   1c13a:	2200      	movs	r2, #0
   1c13c:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1c140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
   1c144:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1c146:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   1c14a:	3101      	adds	r1, #1
   1c14c:	d04b      	beq.n	1c1e6 <hci_cmd_handle+0xaf2>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1c14e:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1c152:	3101      	adds	r1, #1
   1c154:	d047      	beq.n	1c1e6 <hci_cmd_handle+0xaf2>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1c156:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1c15a:	3101      	adds	r1, #1
   1c15c:	d043      	beq.n	1c1e6 <hci_cmd_handle+0xaf2>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1c15e:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1c162:	3101      	adds	r1, #1
   1c164:	d03f      	beq.n	1c1e6 <hci_cmd_handle+0xaf2>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
   1c166:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   1c16a:	4619      	mov	r1, r3
   1c16c:	f7ff f916 	bl	1b39c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
   1c170:	1d61      	adds	r1, r4, #5
   1c172:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   1c176:	f7ff f911 	bl	1b39c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
   1c17a:	f104 0109 	add.w	r1, r4, #9
   1c17e:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   1c182:	f7ff f90b 	bl	1b39c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
   1c186:	f104 010d 	add.w	r1, r4, #13
   1c18a:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   1c18e:	f7ff f905 	bl	1b39c <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1c192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c196:	f104 0311 	add.w	r3, r4, #17
   1c19a:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
   1c19e:	3101      	adds	r1, #1
   1c1a0:	d027      	beq.n	1c1f2 <hci_cmd_handle+0xafe>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1c1a2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1c1a6:	3101      	adds	r1, #1
   1c1a8:	d023      	beq.n	1c1f2 <hci_cmd_handle+0xafe>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1c1aa:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1c1ae:	3101      	adds	r1, #1
   1c1b0:	d01f      	beq.n	1c1f2 <hci_cmd_handle+0xafe>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1c1b2:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1c1b6:	3101      	adds	r1, #1
   1c1b8:	d01b      	beq.n	1c1f2 <hci_cmd_handle+0xafe>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
   1c1ba:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   1c1be:	4619      	mov	r1, r3
   1c1c0:	f7ff f8ec 	bl	1b39c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
   1c1c4:	f104 0115 	add.w	r1, r4, #21
   1c1c8:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   1c1cc:	f7ff f8e6 	bl	1b39c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
   1c1d0:	f104 0119 	add.w	r1, r4, #25
   1c1d4:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
   1c1d8:	f7ff f8e0 	bl	1b39c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
   1c1dc:	f104 011d 	add.w	r1, r4, #29
   1c1e0:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
   1c1e4:	e562      	b.n	1bcac <hci_cmd_handle+0x5b8>
		(void)memset(rp->ir, 0x00, sizeof(rp->ir));
   1c1e6:	2210      	movs	r2, #16
   1c1e8:	2100      	movs	r1, #0
   1c1ea:	4618      	mov	r0, r3
   1c1ec:	f7ea fd79 	bl	6ce2 <memset>
   1c1f0:	e7cf      	b.n	1c192 <hci_cmd_handle+0xa9e>
		(void)memset(rp->er, 0x00, sizeof(rp->er));
   1c1f2:	2210      	movs	r2, #16
   1c1f4:	2100      	movs	r1, #0
   1c1f6:	4618      	mov	r0, r3
   1c1f8:	e73f      	b.n	1c07a <hci_cmd_handle+0x986>
   1c1fa:	bf00      	nop
   1c1fc:	00033af5 	.word	0x00033af5

0001c200 <hci_acl_handle>:
{
   1c200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   1c204:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   1c206:	2400      	movs	r4, #0
	if (buf->len < sizeof(*acl)) {
   1c208:	2b03      	cmp	r3, #3
{
   1c20a:	4606      	mov	r6, r0
   1c20c:	460f      	mov	r7, r1
	*evt = NULL;
   1c20e:	600c      	str	r4, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   1c210:	d819      	bhi.n	1c246 <hci_acl_handle+0x46>
		BT_ERR("No HCI ACL header");
   1c212:	4b53      	ldr	r3, [pc, #332]	; (1c360 <hci_acl_handle+0x160>)
   1c214:	681b      	ldr	r3, [r3, #0]
   1c216:	0758      	lsls	r0, r3, #29
   1c218:	d103      	bne.n	1c222 <hci_acl_handle+0x22>
		return -EINVAL;
   1c21a:	f06f 0015 	mvn.w	r0, #21
}
   1c21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("No HCI ACL header");
   1c222:	2301      	movs	r3, #1
   1c224:	f04f 0200 	mov.w	r2, #0
   1c228:	f363 0202 	bfi	r2, r3, #0, #3
   1c22c:	494d      	ldr	r1, [pc, #308]	; (1c364 <hci_acl_handle+0x164>)
   1c22e:	4b4e      	ldr	r3, [pc, #312]	; (1c368 <hci_acl_handle+0x168>)
   1c230:	484e      	ldr	r0, [pc, #312]	; (1c36c <hci_acl_handle+0x16c>)
   1c232:	1a5b      	subs	r3, r3, r1
   1c234:	f364 02c5 	bfi	r2, r4, #3, #3
   1c238:	08db      	lsrs	r3, r3, #3
   1c23a:	494d      	ldr	r1, [pc, #308]	; (1c370 <hci_acl_handle+0x170>)
   1c23c:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Invalid HCI ACL packet length");
   1c240:	f7e5 ff54 	bl	20ec <log_1>
   1c244:	e7e9      	b.n	1c21a <hci_acl_handle+0x1a>
	acl = (void *)buf->data;
   1c246:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
   1c24a:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
   1c24c:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
   1c250:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
   1c252:	f003 f8ad 	bl	1f3b0 <net_buf_simple_pull>
	if (buf->len < len) {
   1c256:	89b3      	ldrh	r3, [r6, #12]
   1c258:	4543      	cmp	r3, r8
   1c25a:	d213      	bcs.n	1c284 <hci_acl_handle+0x84>
		BT_ERR("Invalid HCI ACL packet length");
   1c25c:	4b40      	ldr	r3, [pc, #256]	; (1c360 <hci_acl_handle+0x160>)
   1c25e:	681b      	ldr	r3, [r3, #0]
   1c260:	0759      	lsls	r1, r3, #29
   1c262:	d0da      	beq.n	1c21a <hci_acl_handle+0x1a>
   1c264:	2301      	movs	r3, #1
   1c266:	f04f 0200 	mov.w	r2, #0
   1c26a:	f363 0202 	bfi	r2, r3, #0, #3
   1c26e:	493d      	ldr	r1, [pc, #244]	; (1c364 <hci_acl_handle+0x164>)
   1c270:	4b3d      	ldr	r3, [pc, #244]	; (1c368 <hci_acl_handle+0x168>)
   1c272:	4840      	ldr	r0, [pc, #256]	; (1c374 <hci_acl_handle+0x174>)
   1c274:	1a5b      	subs	r3, r3, r1
   1c276:	f364 02c5 	bfi	r2, r4, #3, #3
   1c27a:	08db      	lsrs	r3, r3, #3
   1c27c:	f363 128f 	bfi	r2, r3, #6, #10
   1c280:	493b      	ldr	r1, [pc, #236]	; (1c370 <hci_acl_handle+0x170>)
   1c282:	e7dd      	b.n	1c240 <hci_acl_handle+0x40>
	node_tx = ll_tx_mem_acquire();
   1c284:	f7fe f896 	bl	1a3b4 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   1c288:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
   1c28c:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
   1c28e:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
   1c292:	bb88      	cbnz	r0, 1c2f8 <hci_acl_handle+0xf8>
		BT_ERR("Tx Buffer Overflow");
   1c294:	4b32      	ldr	r3, [pc, #200]	; (1c360 <hci_acl_handle+0x160>)
   1c296:	681b      	ldr	r3, [r3, #0]
   1c298:	075a      	lsls	r2, r3, #29
   1c29a:	d010      	beq.n	1c2be <hci_acl_handle+0xbe>
   1c29c:	2301      	movs	r3, #1
   1c29e:	f04f 0200 	mov.w	r2, #0
   1c2a2:	f363 0202 	bfi	r2, r3, #0, #3
   1c2a6:	492f      	ldr	r1, [pc, #188]	; (1c364 <hci_acl_handle+0x164>)
   1c2a8:	4b2f      	ldr	r3, [pc, #188]	; (1c368 <hci_acl_handle+0x168>)
   1c2aa:	1a5b      	subs	r3, r3, r1
   1c2ac:	f360 02c5 	bfi	r2, r0, #3, #3
   1c2b0:	08db      	lsrs	r3, r3, #3
   1c2b2:	f363 128f 	bfi	r2, r3, #6, #10
   1c2b6:	492e      	ldr	r1, [pc, #184]	; (1c370 <hci_acl_handle+0x170>)
   1c2b8:	482f      	ldr	r0, [pc, #188]	; (1c378 <hci_acl_handle+0x178>)
   1c2ba:	f7e5 ff17 	bl	20ec <log_1>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   1c2be:	4b2f      	ldr	r3, [pc, #188]	; (1c37c <hci_acl_handle+0x17c>)
   1c2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c2c4:	2100      	movs	r1, #0
   1c2c6:	f002 7000 	and.w	r0, r2, #33554432	; 0x2000000
   1c2ca:	ea50 0301 	orrs.w	r3, r0, r1
   1c2ce:	d010      	beq.n	1c2f2 <hci_acl_handle+0xf2>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1c2d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c2d4:	2001      	movs	r0, #1
   1c2d6:	f7ee f9a9 	bl	a62c <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
   1c2da:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1c2dc:	6038      	str	r0, [r7, #0]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
   1c2de:	211a      	movs	r1, #26
   1c2e0:	f7ff f865 	bl	1b3ae <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
   1c2e4:	6838      	ldr	r0, [r7, #0]
   1c2e6:	2101      	movs	r1, #1
   1c2e8:	3008      	adds	r0, #8
   1c2ea:	f003 f811 	bl	1f310 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   1c2ee:	2301      	movs	r3, #1
   1c2f0:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
   1c2f2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c2f6:	e792      	b.n	1c21e <hci_acl_handle+0x1e>
   1c2f8:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
   1c2fa:	f1b9 0f00 	cmp.w	r9, #0
   1c2fe:	d002      	beq.n	1c306 <hci_acl_handle+0x106>
   1c300:	f1b9 0f02 	cmp.w	r9, #2
   1c304:	d12a      	bne.n	1c35c <hci_acl_handle+0x15c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   1c306:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1c308:	f362 0301 	bfi	r3, r2, #0, #2
	memcpy(&pdu_data->lldata[0], buf->data, len);
   1c30c:	68b1      	ldr	r1, [r6, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1c30e:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
   1c310:	f884 8005 	strb.w	r8, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   1c314:	4642      	mov	r2, r8
   1c316:	1de0      	adds	r0, r4, #7
   1c318:	f7ea fcb6 	bl	6c88 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   1c31c:	4621      	mov	r1, r4
   1c31e:	4628      	mov	r0, r5
   1c320:	f7fe f854 	bl	1a3cc <ll_tx_mem_enqueue>
   1c324:	2800      	cmp	r0, #0
   1c326:	f43f af7a 	beq.w	1c21e <hci_acl_handle+0x1e>
		BT_ERR("Invalid Tx Enqueue");
   1c32a:	4b0d      	ldr	r3, [pc, #52]	; (1c360 <hci_acl_handle+0x160>)
   1c32c:	681b      	ldr	r3, [r3, #0]
   1c32e:	075b      	lsls	r3, r3, #29
   1c330:	d010      	beq.n	1c354 <hci_acl_handle+0x154>
   1c332:	2301      	movs	r3, #1
   1c334:	f04f 0200 	mov.w	r2, #0
   1c338:	f363 0202 	bfi	r2, r3, #0, #3
   1c33c:	4909      	ldr	r1, [pc, #36]	; (1c364 <hci_acl_handle+0x164>)
   1c33e:	4b0a      	ldr	r3, [pc, #40]	; (1c368 <hci_acl_handle+0x168>)
   1c340:	480f      	ldr	r0, [pc, #60]	; (1c380 <hci_acl_handle+0x180>)
   1c342:	1a5b      	subs	r3, r3, r1
   1c344:	f36f 02c5 	bfc	r2, #3, #3
   1c348:	08db      	lsrs	r3, r3, #3
   1c34a:	f363 128f 	bfi	r2, r3, #6, #10
   1c34e:	4908      	ldr	r1, [pc, #32]	; (1c370 <hci_acl_handle+0x170>)
   1c350:	f7e5 fecc 	bl	20ec <log_1>
		ll_tx_mem_release(node_tx);
   1c354:	4620      	mov	r0, r4
   1c356:	f7fe f833 	bl	1a3c0 <ll_tx_mem_release>
   1c35a:	e75e      	b.n	1c21a <hci_acl_handle+0x1a>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1c35c:	2201      	movs	r2, #1
   1c35e:	e7d3      	b.n	1c308 <hci_acl_handle+0x108>
   1c360:	2000e210 	.word	0x2000e210
   1c364:	0002ef38 	.word	0x0002ef38
   1c368:	0002ef60 	.word	0x0002ef60
   1c36c:	00033a53 	.word	0x00033a53
   1c370:	000339b5 	.word	0x000339b5
   1c374:	00033a69 	.word	0x00033a69
   1c378:	00033a8b 	.word	0x00033a8b
   1c37c:	2000dba8 	.word	0x2000dba8
   1c380:	00033aa2 	.word	0x00033aa2

0001c384 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   1c384:	7a03      	ldrb	r3, [r0, #8]
   1c386:	f003 0303 	and.w	r3, r3, #3
   1c38a:	3b01      	subs	r3, #1
   1c38c:	2b01      	cmp	r3, #1
{
   1c38e:	b570      	push	{r4, r5, r6, lr}
   1c390:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
   1c392:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
   1c394:	d81b      	bhi.n	1c3ce <hci_acl_encode+0x4a>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   1c396:	f101 0608 	add.w	r6, r1, #8
   1c39a:	4630      	mov	r0, r6
   1c39c:	2104      	movs	r1, #4
   1c39e:	f002 ffb7 	bl	1f310 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   1c3a2:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
   1c3a4:	7a61      	ldrb	r1, [r4, #9]
   1c3a6:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   1c3a8:	f003 0303 	and.w	r3, r3, #3
   1c3ac:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   1c3ae:	bf0c      	ite	eq
   1c3b0:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   1c3b4:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   1c3b8:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
   1c3ba:	4630      	mov	r0, r6
   1c3bc:	f002 ffa8 	bl	1f310 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1c3c0:	7a62      	ldrb	r2, [r4, #9]
   1c3c2:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
   1c3c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1c3ca:	f7ea bc5d 	b.w	6c88 <memcpy>
		LL_ASSERT(0);
   1c3ce:	4b0d      	ldr	r3, [pc, #52]	; (1c404 <hci_acl_encode+0x80>)
   1c3d0:	681b      	ldr	r3, [r3, #0]
   1c3d2:	075b      	lsls	r3, r3, #29
   1c3d4:	d010      	beq.n	1c3f8 <hci_acl_encode+0x74>
   1c3d6:	2301      	movs	r3, #1
   1c3d8:	f04f 0200 	mov.w	r2, #0
   1c3dc:	f363 0202 	bfi	r2, r3, #0, #3
   1c3e0:	4909      	ldr	r1, [pc, #36]	; (1c408 <hci_acl_encode+0x84>)
   1c3e2:	4b0a      	ldr	r3, [pc, #40]	; (1c40c <hci_acl_encode+0x88>)
   1c3e4:	480a      	ldr	r0, [pc, #40]	; (1c410 <hci_acl_encode+0x8c>)
   1c3e6:	1a5b      	subs	r3, r3, r1
   1c3e8:	f36f 02c5 	bfc	r2, #3, #3
   1c3ec:	08db      	lsrs	r3, r3, #3
   1c3ee:	f363 128f 	bfi	r2, r3, #6, #10
   1c3f2:	4908      	ldr	r1, [pc, #32]	; (1c414 <hci_acl_encode+0x90>)
   1c3f4:	f7e5 fe7a 	bl	20ec <log_1>
   1c3f8:	4040      	eors	r0, r0
   1c3fa:	f380 8811 	msr	BASEPRI, r0
   1c3fe:	f04f 0004 	mov.w	r0, #4
   1c402:	df02      	svc	2
   1c404:	2000e210 	.word	0x2000e210
   1c408:	0002ef38 	.word	0x0002ef38
   1c40c:	0002ef60 	.word	0x0002ef60
   1c410:	0003146d 	.word	0x0003146d
   1c414:	00033a44 	.word	0x00033a44

0001c418 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
   1c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1c41c:	7903      	ldrb	r3, [r0, #4]
   1c41e:	88c6      	ldrh	r6, [r0, #6]
   1c420:	2b01      	cmp	r3, #1
{
   1c422:	b093      	sub	sp, #76	; 0x4c
   1c424:	4604      	mov	r4, r0
   1c426:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
   1c428:	f100 0908 	add.w	r9, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1c42c:	f000 835a 	beq.w	1cae4 <hci_evt_encode+0x6cc>
	switch (node_rx->hdr.type) {
   1c430:	3b02      	subs	r3, #2
   1c432:	2b0a      	cmp	r3, #10
   1c434:	f200 832b 	bhi.w	1ca8e <hci_evt_encode+0x676>
   1c438:	e8df f013 	tbh	[pc, r3, lsl #1]
   1c43c:	013a000b 	.word	0x013a000b
   1c440:	01420140 	.word	0x01420140
   1c444:	022f01b9 	.word	0x022f01b9
   1c448:	0278024e 	.word	0x0278024e
   1c44c:	02a70291 	.word	0x02a70291
   1c450:	02c4      	.short	0x02c4
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   1c452:	4bc0      	ldr	r3, [pc, #768]	; (1c754 <hci_evt_encode+0x33c>)
   1c454:	930b      	str	r3, [sp, #44]	; 0x2c
   1c456:	f64f 7304 	movw	r3, #65284	; 0xff04
   1c45a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   1c45e:	2302      	movs	r3, #2
   1c460:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1c464:	7a43      	ldrb	r3, [r0, #9]
   1c466:	4403      	add	r3, r0
   1c468:	f893 b00b 	ldrb.w	fp, [r3, #11]
	if (adv->tx_addr) {
   1c46c:	7a03      	ldrb	r3, [r0, #8]
   1c46e:	065e      	lsls	r6, r3, #25
   1c470:	d506      	bpl.n	1c480 <hci_evt_encode+0x68>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   1c472:	2100      	movs	r1, #0
   1c474:	f100 030a 	add.w	r3, r0, #10
   1c478:	465a      	mov	r2, fp
   1c47a:	4608      	mov	r0, r1
   1c47c:	f001 fec0 	bl	1e200 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
   1c480:	4bb5      	ldr	r3, [pc, #724]	; (1c758 <hci_evt_encode+0x340>)
   1c482:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c486:	2000      	movs	r0, #0
   1c488:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1c48c:	ea50 0301 	orrs.w	r3, r0, r1
   1c490:	f000 80c9 	beq.w	1c626 <hci_evt_encode+0x20e>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1c494:	7a63      	ldrb	r3, [r4, #9]
   1c496:	4423      	add	r3, r4
   1c498:	7b1b      	ldrb	r3, [r3, #12]
   1c49a:	9302      	str	r3, [sp, #8]
   1c49c:	4baf      	ldr	r3, [pc, #700]	; (1c75c <hci_evt_encode+0x344>)
   1c49e:	e9d3 0100 	ldrd	r0, r1, [r3]
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
   1c4a2:	9b02      	ldr	r3, [sp, #8]
   1c4a4:	2b00      	cmp	r3, #0
   1c4a6:	d13e      	bne.n	1c526 <hci_evt_encode+0x10e>
   1c4a8:	f000 0202 	and.w	r2, r0, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
   1c4ac:	2300      	movs	r3, #0
   1c4ae:	4313      	orrs	r3, r2
   1c4b0:	f000 80b9 	beq.w	1c626 <hci_evt_encode+0x20e>
	if (dup_count >= 0) {
   1c4b4:	4faa      	ldr	r7, [pc, #680]	; (1c760 <hci_evt_encode+0x348>)
   1c4b6:	683b      	ldr	r3, [r7, #0]
   1c4b8:	2b00      	cmp	r3, #0
   1c4ba:	f280 808c 	bge.w	1c5d6 <hci_evt_encode+0x1be>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   1c4be:	f894 8008 	ldrb.w	r8, [r4, #8]
   1c4c2:	7a63      	ldrb	r3, [r4, #9]
   1c4c4:	f008 080f 	and.w	r8, r8, #15
   1c4c8:	f1b8 0f01 	cmp.w	r8, #1
		data_len = (adv->len - BDADDR_SIZE);
   1c4cc:	bf18      	it	ne
   1c4ce:	1f9e      	subne	r6, r3, #6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1c4d0:	4423      	add	r3, r4
		data_len = (adv->len - BDADDR_SIZE);
   1c4d2:	bf18      	it	ne
   1c4d4:	b2f6      	uxtbne	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1c4d6:	7a9f      	ldrb	r7, [r3, #10]
	if (direct) {
   1c4d8:	9b02      	ldr	r3, [sp, #8]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1c4da:	f1c7 0700 	rsb	r7, r7, #0
		data_len = 0;
   1c4de:	bf08      	it	eq
   1c4e0:	2600      	moveq	r6, #0
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1c4e2:	b27f      	sxtb	r7, r7
	if (direct) {
   1c4e4:	2b00      	cmp	r3, #0
   1c4e6:	f000 80ab 	beq.w	1c640 <hci_evt_encode+0x228>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   1c4ea:	f1b8 0f01 	cmp.w	r8, #1
   1c4ee:	d078      	beq.n	1c5e2 <hci_evt_encode+0x1ca>
   1c4f0:	4b9c      	ldr	r3, [pc, #624]	; (1c764 <hci_evt_encode+0x34c>)
   1c4f2:	681b      	ldr	r3, [r3, #0]
   1c4f4:	0759      	lsls	r1, r3, #29
   1c4f6:	d010      	beq.n	1c51a <hci_evt_encode+0x102>
   1c4f8:	2301      	movs	r3, #1
   1c4fa:	f04f 0200 	mov.w	r2, #0
   1c4fe:	f363 0202 	bfi	r2, r3, #0, #3
   1c502:	4999      	ldr	r1, [pc, #612]	; (1c768 <hci_evt_encode+0x350>)
   1c504:	4b99      	ldr	r3, [pc, #612]	; (1c76c <hci_evt_encode+0x354>)
   1c506:	489a      	ldr	r0, [pc, #616]	; (1c770 <hci_evt_encode+0x358>)
   1c508:	1a5b      	subs	r3, r3, r1
   1c50a:	f36f 02c5 	bfc	r2, #3, #3
   1c50e:	08db      	lsrs	r3, r3, #3
   1c510:	4998      	ldr	r1, [pc, #608]	; (1c774 <hci_evt_encode+0x35c>)
   1c512:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(0);
   1c516:	f7e5 fde9 	bl	20ec <log_1>
   1c51a:	4040      	eors	r0, r0
   1c51c:	f380 8811 	msr	BASEPRI, r0
   1c520:	f04f 0004 	mov.w	r0, #4
   1c524:	df02      	svc	2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
   1c526:	f000 020b 	and.w	r2, r0, #11
   1c52a:	e7bf      	b.n	1c4ac <hci_evt_encode+0x94>
			if (!memcmp(&adv->adv_ind.addr[0],
   1c52c:	4992      	ldr	r1, [pc, #584]	; (1c778 <hci_evt_encode+0x360>)
   1c52e:	9303      	str	r3, [sp, #12]
   1c530:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
   1c534:	4618      	mov	r0, r3
   1c536:	2206      	movs	r2, #6
   1c538:	4451      	add	r1, sl
   1c53a:	f7ea fb7e 	bl	6c3a <memcmp>
   1c53e:	9b03      	ldr	r3, [sp, #12]
   1c540:	b9b8      	cbnz	r0, 1c572 <hci_evt_encode+0x15a>
			    adv->tx_addr == dup_filter[i].addr.type) {
   1c542:	44b2      	add	sl, r6
   1c544:	7a21      	ldrb	r1, [r4, #8]
   1c546:	f89a 0001 	ldrb.w	r0, [sl, #1]
   1c54a:	460a      	mov	r2, r1
   1c54c:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
   1c550:	4281      	cmp	r1, r0
   1c552:	d10e      	bne.n	1c572 <hci_evt_encode+0x15a>
				if (dup_filter[i].mask & BIT(adv->type)) {
   1c554:	f816 3038 	ldrb.w	r3, [r6, r8, lsl #3]
   1c558:	f002 020f 	and.w	r2, r2, #15
   1c55c:	fa23 f102 	lsr.w	r1, r3, r2
   1c560:	07c8      	lsls	r0, r1, #31
   1c562:	d460      	bmi.n	1c626 <hci_evt_encode+0x20e>
				dup_filter[i].mask |= BIT(adv->type);
   1c564:	2101      	movs	r1, #1
   1c566:	fa01 f202 	lsl.w	r2, r1, r2
   1c56a:	4313      	orrs	r3, r2
   1c56c:	f806 3038 	strb.w	r3, [r6, r8, lsl #3]
   1c570:	e7a5      	b.n	1c4be <hci_evt_encode+0xa6>
		for (i = 0; i < dup_count; i++) {
   1c572:	f108 0801 	add.w	r8, r8, #1
   1c576:	683a      	ldr	r2, [r7, #0]
   1c578:	4590      	cmp	r8, r2
   1c57a:	dbd7      	blt.n	1c52c <hci_evt_encode+0x114>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   1c57c:	f8df 8208 	ldr.w	r8, [pc, #520]	; 1c788 <hci_evt_encode+0x370>
   1c580:	f8d8 0000 	ldr.w	r0, [r8]
   1c584:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
   1c588:	4619      	mov	r1, r3
   1c58a:	2206      	movs	r2, #6
   1c58c:	3002      	adds	r0, #2
   1c58e:	f7ea fb7b 	bl	6c88 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   1c592:	f8d8 2000 	ldr.w	r2, [r8]
   1c596:	7a23      	ldrb	r3, [r4, #8]
   1c598:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
   1c59c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1c5a0:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
   1c5a2:	7a23      	ldrb	r3, [r4, #8]
   1c5a4:	f003 010f 	and.w	r1, r3, #15
   1c5a8:	2301      	movs	r3, #1
   1c5aa:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   1c5ac:	6839      	ldr	r1, [r7, #0]
		dup_filter[dup_curr].mask = BIT(adv->type);
   1c5ae:	f806 3032 	strb.w	r3, [r6, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   1c5b2:	290f      	cmp	r1, #15
			dup_count++;
   1c5b4:	bfd5      	itete	le
   1c5b6:	3101      	addle	r1, #1
			dup_curr++;
   1c5b8:	3201      	addgt	r2, #1
			dup_curr = dup_count;
   1c5ba:	f8c8 1000 	strle.w	r1, [r8]
			dup_curr++;
   1c5be:	f8c8 2000 	strgt.w	r2, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   1c5c2:	f8d8 2000 	ldr.w	r2, [r8]
			dup_count++;
   1c5c6:	bfd8      	it	le
   1c5c8:	6039      	strle	r1, [r7, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   1c5ca:	2a10      	cmp	r2, #16
			dup_curr = 0;
   1c5cc:	bf04      	itt	eq
   1c5ce:	2200      	moveq	r2, #0
   1c5d0:	f8c8 2000 	streq.w	r2, [r8]
   1c5d4:	e773      	b.n	1c4be <hci_evt_encode+0xa6>
		for (i = 0; i < dup_count; i++) {
   1c5d6:	f04f 0800 	mov.w	r8, #0
   1c5da:	f104 030a 	add.w	r3, r4, #10
   1c5de:	4e67      	ldr	r6, [pc, #412]	; (1c77c <hci_evt_encode+0x364>)
   1c5e0:	e7c9      	b.n	1c576 <hci_evt_encode+0x15e>
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   1c5e2:	2211      	movs	r2, #17
   1c5e4:	210b      	movs	r1, #11
   1c5e6:	4628      	mov	r0, r5
   1c5e8:	f7fe ff28 	bl	1b43c <meta_evt>
		drp->num_reports = 1;
   1c5ec:	f880 8000 	strb.w	r8, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
   1c5f0:	f880 8001 	strb.w	r8, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   1c5f4:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
   1c5f6:	f001 fcb9 	bl	1df6c <ll_rl_size_get>
   1c5fa:	4583      	cmp	fp, r0
   1c5fc:	f105 0003 	add.w	r0, r5, #3
   1c600:	d214      	bcs.n	1c62c <hci_evt_encode+0x214>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   1c602:	4602      	mov	r2, r0
   1c604:	1ca9      	adds	r1, r5, #2
   1c606:	4658      	mov	r0, fp
   1c608:	f001 fa46 	bl	1da98 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
   1c60c:	78ab      	ldrb	r3, [r5, #2]
   1c60e:	3302      	adds	r3, #2
   1c610:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
   1c612:	2301      	movs	r3, #1
   1c614:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
   1c616:	2206      	movs	r2, #6
   1c618:	f109 0108 	add.w	r1, r9, #8
   1c61c:	f105 000a 	add.w	r0, r5, #10
   1c620:	f7ea fb32 	bl	6c88 <memcpy>
		dir_info->rssi = rssi;
   1c624:	742f      	strb	r7, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   1c626:	b013      	add	sp, #76	; 0x4c
   1c628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
   1c62c:	7a23      	ldrb	r3, [r4, #8]
   1c62e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1c632:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
   1c634:	2206      	movs	r2, #6
   1c636:	f104 010a 	add.w	r1, r4, #10
   1c63a:	f7ea fb25 	bl	6c88 <memcpy>
   1c63e:	e7e8      	b.n	1c612 <hci_evt_encode+0x1fa>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   1c640:	f106 020b 	add.w	r2, r6, #11
   1c644:	b2d2      	uxtb	r2, r2
   1c646:	2102      	movs	r1, #2
   1c648:	4628      	mov	r0, r5
   1c64a:	f7fe fef7 	bl	1b43c <meta_evt>
	sep->num_reports = 1;
   1c64e:	2301      	movs	r3, #1
   1c650:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   1c652:	7a23      	ldrb	r3, [r4, #8]
   1c654:	aa12      	add	r2, sp, #72	; 0x48
   1c656:	f003 030f 	and.w	r3, r3, #15
   1c65a:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   1c65c:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
   1c65e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
   1c662:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1c664:	7a63      	ldrb	r3, [r4, #9]
   1c666:	4423      	add	r3, r4
   1c668:	f893 800b 	ldrb.w	r8, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
   1c66c:	f001 fc7e 	bl	1df6c <ll_rl_size_get>
   1c670:	4580      	cmp	r8, r0
   1c672:	f105 0003 	add.w	r0, r5, #3
   1c676:	d211      	bcs.n	1c69c <hci_evt_encode+0x284>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   1c678:	4602      	mov	r2, r0
   1c67a:	1ca9      	adds	r1, r5, #2
   1c67c:	4640      	mov	r0, r8
   1c67e:	f001 fa0b 	bl	1da98 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
   1c682:	78ab      	ldrb	r3, [r5, #2]
   1c684:	3302      	adds	r3, #2
   1c686:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
   1c688:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   1c68a:	350a      	adds	r5, #10
   1c68c:	4632      	mov	r2, r6
   1c68e:	f109 0108 	add.w	r1, r9, #8
   1c692:	4628      	mov	r0, r5
   1c694:	f7ea faf8 	bl	6c88 <memcpy>
	*prssi = rssi;
   1c698:	55af      	strb	r7, [r5, r6]
   1c69a:	e7c4      	b.n	1c626 <hci_evt_encode+0x20e>
		adv_info->addr.type = adv->tx_addr;
   1c69c:	7a23      	ldrb	r3, [r4, #8]
   1c69e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1c6a2:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   1c6a4:	2206      	movs	r2, #6
   1c6a6:	f104 010a 	add.w	r1, r4, #10
   1c6aa:	f7ea faed 	bl	6c88 <memcpy>
   1c6ae:	e7eb      	b.n	1c688 <hci_evt_encode+0x270>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
   1c6b0:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
   1c6b2:	4621      	mov	r1, r4
   1c6b4:	4648      	mov	r0, r9
   1c6b6:	f7fe ff69 	bl	1b58c <le_adv_ext_report.isra.73>
   1c6ba:	e7b4      	b.n	1c626 <hci_evt_encode+0x20e>
   1c6bc:	2204      	movs	r2, #4
   1c6be:	e7f8      	b.n	1c6b2 <hci_evt_encode+0x29a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1c6c0:	4b25      	ldr	r3, [pc, #148]	; (1c758 <hci_evt_encode+0x340>)
   1c6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c6c6:	f100 060a 	add.w	r6, r0, #10
   1c6ca:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1c6ce:	2000      	movs	r0, #0
   1c6d0:	ea50 0301 	orrs.w	r3, r0, r1
   1c6d4:	d008      	beq.n	1c6e8 <hci_evt_encode+0x2d0>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
   1c6d6:	4b21      	ldr	r3, [pc, #132]	; (1c75c <hci_evt_encode+0x344>)
   1c6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c6dc:	2100      	movs	r1, #0
   1c6de:	f402 2080 	and.w	r0, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1c6e2:	ea50 0301 	orrs.w	r3, r0, r1
   1c6e6:	d151      	bne.n	1c78c <hci_evt_encode+0x374>
		addr.type = adv->tx_addr;
   1c6e8:	7a23      	ldrb	r3, [r4, #8]
   1c6ea:	ad12      	add	r5, sp, #72	; 0x48
   1c6ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
   1c6f0:	4631      	mov	r1, r6
   1c6f2:	2206      	movs	r2, #6
   1c6f4:	f10d 0015 	add.w	r0, sp, #21
		addr.type = adv->tx_addr;
   1c6f8:	f805 3d34 	strb.w	r3, [r5, #-52]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
   1c6fc:	f7ea fac4 	bl	6c88 <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
   1c700:	7a63      	ldrb	r3, [r4, #9]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
   1c702:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1c704:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
   1c706:	4631      	mov	r1, r6
   1c708:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1c70a:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
   1c70c:	f7fe ff02 	bl	1b514 <bt_addr_le_to_str.constprop.77>
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
   1c710:	4b14      	ldr	r3, [pc, #80]	; (1c764 <hci_evt_encode+0x34c>)
   1c712:	681b      	ldr	r3, [r3, #0]
   1c714:	f003 0307 	and.w	r3, r3, #7
   1c718:	2b01      	cmp	r3, #1
   1c71a:	d984      	bls.n	1c626 <hci_evt_encode+0x20e>
   1c71c:	2202      	movs	r2, #2
   1c71e:	f04f 0300 	mov.w	r3, #0
   1c722:	f362 0302 	bfi	r3, r2, #0, #3
   1c726:	4910      	ldr	r1, [pc, #64]	; (1c768 <hci_evt_encode+0x350>)
   1c728:	4a10      	ldr	r2, [pc, #64]	; (1c76c <hci_evt_encode+0x354>)
   1c72a:	4815      	ldr	r0, [pc, #84]	; (1c780 <hci_evt_encode+0x368>)
   1c72c:	1a52      	subs	r2, r2, r1
   1c72e:	08d2      	lsrs	r2, r2, #3
   1c730:	f36f 03c5 	bfc	r3, #3, #3
   1c734:	f362 138f 	bfi	r3, r2, #6, #10
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1c738:	4264      	negs	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
   1c73a:	4a12      	ldr	r2, [pc, #72]	; (1c784 <hci_evt_encode+0x36c>)
   1c73c:	9207      	str	r2, [sp, #28]
   1c73e:	b264      	sxtb	r4, r4
   1c740:	2200      	movs	r2, #0
   1c742:	e9cd 2608 	strd	r2, r6, [sp, #32]
   1c746:	940a      	str	r4, [sp, #40]	; 0x28
   1c748:	2204      	movs	r2, #4
   1c74a:	a907      	add	r1, sp, #28
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   1c74c:	f7e5 fd15 	bl	217a <log_n>
   1c750:	e769      	b.n	1c626 <hci_evt_encode+0x20e>
   1c752:	bf00      	nop
   1c754:	ff030100 	.word	0xff030100
   1c758:	2000dba8 	.word	0x2000dba8
   1c75c:	2000dbb0 	.word	0x2000dbb0
   1c760:	20001c04 	.word	0x20001c04
   1c764:	2000e210 	.word	0x2000e210
   1c768:	0002ef38 	.word	0x0002ef38
   1c76c:	0002ef60 	.word	0x0002ef60
   1c770:	00033b08 	.word	0x00033b08
   1c774:	000339c4 	.word	0x000339c4
   1c778:	20001c0e 	.word	0x20001c0e
   1c77c:	20001c0c 	.word	0x20001c0c
   1c780:	00033b42 	.word	0x00033b42
   1c784:	000339ec 	.word	0x000339ec
   1c788:	20001c08 	.word	0x20001c08
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
   1c78c:	2208      	movs	r2, #8
   1c78e:	2113      	movs	r1, #19
   1c790:	4628      	mov	r0, r5
   1c792:	f7fe fe53 	bl	1b43c <meta_evt>
	sep->handle = 0;
   1c796:	2300      	movs	r3, #0
   1c798:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
   1c79a:	7a23      	ldrb	r3, [r4, #8]
   1c79c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1c7a0:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
   1c7a2:	2206      	movs	r2, #6
   1c7a4:	4631      	mov	r1, r6
   1c7a6:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
   1c7a8:	f7ea fa6e 	bl	6c88 <memcpy>
   1c7ac:	e73b      	b.n	1c626 <hci_evt_encode+0x20e>
	u8_t status = radio_cc->status;
   1c7ae:	7a07      	ldrb	r7, [r0, #8]
	if (!status) {
   1c7b0:	b93f      	cbnz	r7, 1c7c2 <hci_evt_encode+0x3aa>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
   1c7b2:	f100 0311 	add.w	r3, r0, #17
   1c7b6:	f100 010b 	add.w	r1, r0, #11
   1c7ba:	22ff      	movs	r2, #255	; 0xff
   1c7bc:	7a80      	ldrb	r0, [r0, #10]
   1c7be:	f001 fd1f 	bl	1e200 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1c7c2:	4bbd      	ldr	r3, [pc, #756]	; (1cab8 <hci_evt_encode+0x6a0>)
   1c7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c7c8:	2000      	movs	r0, #0
   1c7ca:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1c7ce:	ea50 0301 	orrs.w	r3, r0, r1
   1c7d2:	f43f af28 	beq.w	1c626 <hci_evt_encode+0x20e>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1c7d6:	4bb9      	ldr	r3, [pc, #740]	; (1cabc <hci_evt_encode+0x6a4>)
   1c7d8:	e9d3 ab00 	ldrd	sl, fp, [r3]
   1c7dc:	f240 2001 	movw	r0, #513	; 0x201
   1c7e0:	2100      	movs	r1, #0
   1c7e2:	ea0a 0200 	and.w	r2, sl, r0
   1c7e6:	ea0b 0301 	and.w	r3, fp, r1
   1c7ea:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   1c7ec:	f40a 7800 	and.w	r8, sl, #512	; 0x200
   1c7f0:	f04f 0900 	mov.w	r9, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1c7f4:	f43f af17 	beq.w	1c626 <hci_evt_encode+0x20e>
	if (!status) {
   1c7f8:	2f00      	cmp	r7, #0
   1c7fa:	f040 825d 	bne.w	1ccb8 <hci_evt_encode+0x8a0>
		conn_count++;
   1c7fe:	4ab0      	ldr	r2, [pc, #704]	; (1cac0 <hci_evt_encode+0x6a8>)
   1c800:	6813      	ldr	r3, [r2, #0]
   1c802:	3301      	adds	r3, #1
   1c804:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1c806:	ea58 0309 	orrs.w	r3, r8, r9
   1c80a:	f040 8265 	bne.w	1ccd8 <hci_evt_encode+0x8c0>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   1c80e:	4628      	mov	r0, r5
   1c810:	2212      	movs	r2, #18
   1c812:	2101      	movs	r1, #1
   1c814:	f7fe fe12 	bl	1b43c <meta_evt>
   1c818:	4605      	mov	r5, r0
	if (status) {
   1c81a:	b327      	cbz	r7, 1c866 <hci_evt_encode+0x44e>
		(void)memset(lecc, 0x00, sizeof(*lecc));
   1c81c:	2212      	movs	r2, #18
   1c81e:	2100      	movs	r1, #0
   1c820:	f7ea fa5f 	bl	6ce2 <memset>
		lecc->status = status;
   1c824:	702f      	strb	r7, [r5, #0]
   1c826:	e6fe      	b.n	1c626 <hci_evt_encode+0x20e>
		if ((radio_cc->own_addr_type) &&
   1c828:	7f63      	ldrb	r3, [r4, #29]
   1c82a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c82e:	2b40      	cmp	r3, #64	; 0x40
   1c830:	f040 826b 	bne.w	1cd0a <hci_evt_encode+0x8f2>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
   1c834:	2206      	movs	r2, #6
   1c836:	f104 0118 	add.w	r1, r4, #24
   1c83a:	f7ea fa25 	bl	6c88 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
   1c83e:	2206      	movs	r2, #6
   1c840:	f104 0111 	add.w	r1, r4, #17
   1c844:	f105 0011 	add.w	r0, r5, #17
   1c848:	f7ea fa1e 	bl	6c88 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
   1c84c:	8be3      	ldrh	r3, [r4, #30]
   1c84e:	f8a5 3017 	strh.w	r3, [r5, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
   1c852:	8c23      	ldrh	r3, [r4, #32]
   1c854:	f8a5 3019 	strh.w	r3, [r5, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
   1c858:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1c85a:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = radio_cc->mca;
   1c85e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1c862:	776b      	strb	r3, [r5, #29]
   1c864:	e6df      	b.n	1c626 <hci_evt_encode+0x20e>
	lecc->status = 0x00;
   1c866:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   1c868:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
   1c86c:	7a63      	ldrb	r3, [r4, #9]
   1c86e:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
   1c870:	7aa3      	ldrb	r3, [r4, #10]
   1c872:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
   1c874:	2206      	movs	r2, #6
   1c876:	f104 010b 	add.w	r1, r4, #11
   1c87a:	3005      	adds	r0, #5
   1c87c:	f7ea fa04 	bl	6c88 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
   1c880:	8be3      	ldrh	r3, [r4, #30]
   1c882:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
   1c886:	8c23      	ldrh	r3, [r4, #32]
   1c888:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
   1c88c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1c88e:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = radio_cc->mca;
   1c892:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1c896:	746b      	strb	r3, [r5, #17]
   1c898:	e6c5      	b.n	1c626 <hci_evt_encode+0x20e>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   1c89a:	4b87      	ldr	r3, [pc, #540]	; (1cab8 <hci_evt_encode+0x6a0>)
   1c89c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c8a0:	2100      	movs	r1, #0
   1c8a2:	f002 0010 	and.w	r0, r2, #16
   1c8a6:	ea50 0301 	orrs.w	r3, r0, r1
   1c8aa:	f43f aebc 	beq.w	1c626 <hci_evt_encode+0x20e>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
   1c8ae:	2204      	movs	r2, #4
   1c8b0:	2105      	movs	r1, #5
   1c8b2:	4628      	mov	r0, r5
   1c8b4:	f7fe fd7b 	bl	1b3ae <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   1c8b8:	2104      	movs	r1, #4
   1c8ba:	f105 0008 	add.w	r0, r5, #8
   1c8be:	f002 fd27 	bl	1f310 <net_buf_simple_add>
	ep->status = 0x00;
   1c8c2:	2300      	movs	r3, #0
	conn_count--;
   1c8c4:	4a7e      	ldr	r2, [pc, #504]	; (1cac0 <hci_evt_encode+0x6a8>)
	ep->status = 0x00;
   1c8c6:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1c8c8:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
   1c8cc:	7a23      	ldrb	r3, [r4, #8]
   1c8ce:	70c3      	strb	r3, [r0, #3]
	conn_count--;
   1c8d0:	6813      	ldr	r3, [r2, #0]
   1c8d2:	3b01      	subs	r3, #1
   1c8d4:	6013      	str	r3, [r2, #0]
   1c8d6:	e6a6      	b.n	1c626 <hci_evt_encode+0x20e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1c8d8:	4b77      	ldr	r3, [pc, #476]	; (1cab8 <hci_evt_encode+0x6a0>)
   1c8da:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c8de:	2000      	movs	r0, #0
   1c8e0:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1c8e4:	ea50 0301 	orrs.w	r3, r0, r1
   1c8e8:	f43f ae9d 	beq.w	1c626 <hci_evt_encode+0x20e>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   1c8ec:	4b73      	ldr	r3, [pc, #460]	; (1cabc <hci_evt_encode+0x6a4>)
   1c8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c8f2:	2100      	movs	r1, #0
   1c8f4:	f002 0004 	and.w	r0, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1c8f8:	ea50 0301 	orrs.w	r3, r0, r1
   1c8fc:	f43f ae93 	beq.w	1c626 <hci_evt_encode+0x20e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   1c900:	2209      	movs	r2, #9
   1c902:	2103      	movs	r1, #3
   1c904:	4628      	mov	r0, r5
   1c906:	f7fe fd99 	bl	1b43c <meta_evt>
	sep->status = radio_cu->status;
   1c90a:	7a23      	ldrb	r3, [r4, #8]
   1c90c:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
   1c90e:	f8b4 3009 	ldrh.w	r3, [r4, #9]
	sep->handle = sys_cpu_to_le16(handle);
   1c912:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
   1c916:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
   1c91a:	f8b4 300b 	ldrh.w	r3, [r4, #11]
   1c91e:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
   1c922:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   1c926:	f8a0 3007 	strh.w	r3, [r0, #7]
   1c92a:	e67c      	b.n	1c626 <hci_evt_encode+0x20e>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   1c92c:	4b62      	ldr	r3, [pc, #392]	; (1cab8 <hci_evt_encode+0x6a0>)
   1c92e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c932:	2000      	movs	r0, #0
   1c934:	f403 4100 	and.w	r1, r3, #32768	; 0x8000
   1c938:	ea50 0301 	orrs.w	r3, r0, r1
   1c93c:	f43f ae73 	beq.w	1c626 <hci_evt_encode+0x20e>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
   1c940:	2203      	movs	r2, #3
   1c942:	2130      	movs	r1, #48	; 0x30
   1c944:	4628      	mov	r0, r5
   1c946:	f7fe fd32 	bl	1b3ae <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   1c94a:	2103      	movs	r1, #3
   1c94c:	f105 0008 	add.w	r0, r5, #8
   1c950:	f002 fcde 	bl	1f310 <net_buf_simple_add>
	ep->status = 0x00;
   1c954:	2300      	movs	r3, #0
   1c956:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1c958:	f8a0 6001 	strh.w	r6, [r0, #1]
   1c95c:	e663      	b.n	1c626 <hci_evt_encode+0x20e>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   1c95e:	4b59      	ldr	r3, [pc, #356]	; (1cac4 <hci_evt_encode+0x6ac>)
   1c960:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c964:	2100      	movs	r1, #0
   1c966:	f402 0000 	and.w	r0, r2, #8388608	; 0x800000
   1c96a:	ea50 0301 	orrs.w	r3, r0, r1
   1c96e:	f43f ae5a 	beq.w	1c626 <hci_evt_encode+0x20e>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
   1c972:	2202      	movs	r2, #2
   1c974:	2157      	movs	r1, #87	; 0x57
   1c976:	4628      	mov	r0, r5
   1c978:	f7fe fd19 	bl	1b3ae <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   1c97c:	2102      	movs	r1, #2
   1c97e:	f105 0008 	add.w	r0, r5, #8
   1c982:	f002 fcc5 	bl	1f310 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   1c986:	8006      	strh	r6, [r0, #0]
   1c988:	e64d      	b.n	1c626 <hci_evt_encode+0x20e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1c98a:	4b4b      	ldr	r3, [pc, #300]	; (1cab8 <hci_evt_encode+0x6a0>)
   1c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c990:	2000      	movs	r0, #0
   1c992:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1c996:	ea50 0301 	orrs.w	r3, r0, r1
   1c99a:	f43f ae44 	beq.w	1c626 <hci_evt_encode+0x20e>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   1c99e:	4b47      	ldr	r3, [pc, #284]	; (1cabc <hci_evt_encode+0x6a4>)
   1c9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c9a4:	2100      	movs	r1, #0
   1c9a6:	f402 2000 	and.w	r0, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1c9aa:	ea50 0301 	orrs.w	r3, r0, r1
   1c9ae:	f43f ae3a 	beq.w	1c626 <hci_evt_encode+0x20e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
   1c9b2:	2203      	movs	r2, #3
   1c9b4:	2114      	movs	r1, #20
   1c9b6:	4628      	mov	r0, r5
   1c9b8:	f7fe fd40 	bl	1b43c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   1c9bc:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
   1c9be:	7a23      	ldrb	r3, [r4, #8]
   1c9c0:	7083      	strb	r3, [r0, #2]
   1c9c2:	e630      	b.n	1c626 <hci_evt_encode+0x20e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1c9c4:	4b3c      	ldr	r3, [pc, #240]	; (1cab8 <hci_evt_encode+0x6a0>)
   1c9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c9ca:	2000      	movs	r0, #0
   1c9cc:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1c9d0:	ea50 0301 	orrs.w	r3, r0, r1
   1c9d4:	d008      	beq.n	1c9e8 <hci_evt_encode+0x5d0>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   1c9d6:	4b39      	ldr	r3, [pc, #228]	; (1cabc <hci_evt_encode+0x6a4>)
   1c9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c9dc:	2100      	movs	r1, #0
   1c9de:	f402 6000 	and.w	r0, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1c9e2:	ea50 0301 	orrs.w	r3, r0, r1
   1c9e6:	d132      	bne.n	1ca4e <hci_evt_encode+0x636>
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   1c9e8:	4b37      	ldr	r3, [pc, #220]	; (1cac8 <hci_evt_encode+0x6b0>)
   1c9ea:	681b      	ldr	r3, [r3, #0]
   1c9ec:	f003 0307 	and.w	r3, r3, #7
   1c9f0:	2b01      	cmp	r3, #1
   1c9f2:	f67f ae18 	bls.w	1c626 <hci_evt_encode+0x20e>
   1c9f6:	2202      	movs	r2, #2
   1c9f8:	f04f 0300 	mov.w	r3, #0
   1c9fc:	f362 0302 	bfi	r3, r2, #0, #3
   1ca00:	4932      	ldr	r1, [pc, #200]	; (1cacc <hci_evt_encode+0x6b4>)
   1ca02:	4a33      	ldr	r2, [pc, #204]	; (1cad0 <hci_evt_encode+0x6b8>)
   1ca04:	4833      	ldr	r0, [pc, #204]	; (1cad4 <hci_evt_encode+0x6bc>)
   1ca06:	1a52      	subs	r2, r2, r1
   1ca08:	08d2      	lsrs	r2, r2, #3
   1ca0a:	f36f 03c5 	bfc	r3, #3, #3
   1ca0e:	f362 138f 	bfi	r3, r2, #6, #10
   1ca12:	4a31      	ldr	r2, [pc, #196]	; (1cad8 <hci_evt_encode+0x6c0>)
   1ca14:	7a61      	ldrb	r1, [r4, #9]
   1ca16:	e9cd 260b 	strd	r2, r6, [sp, #44]	; 0x2c
   1ca1a:	7a22      	ldrb	r2, [r4, #8]
   1ca1c:	920d      	str	r2, [sp, #52]	; 0x34
   1ca1e:	2900      	cmp	r1, #0
   1ca20:	fa91 f2a1 	rbit	r2, r1
   1ca24:	fab2 f282 	clz	r2, r2
   1ca28:	7aa1      	ldrb	r1, [r4, #10]
   1ca2a:	bf08      	it	eq
   1ca2c:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1ca30:	3201      	adds	r2, #1
   1ca32:	2900      	cmp	r1, #0
   1ca34:	920e      	str	r2, [sp, #56]	; 0x38
   1ca36:	fa91 f2a1 	rbit	r2, r1
   1ca3a:	fab2 f282 	clz	r2, r2
   1ca3e:	bf08      	it	eq
   1ca40:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1ca44:	3201      	adds	r2, #1
   1ca46:	920f      	str	r2, [sp, #60]	; 0x3c
   1ca48:	a90b      	add	r1, sp, #44	; 0x2c
   1ca4a:	2205      	movs	r2, #5
   1ca4c:	e67e      	b.n	1c74c <hci_evt_encode+0x334>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
   1ca4e:	2205      	movs	r2, #5
   1ca50:	210c      	movs	r1, #12
   1ca52:	4628      	mov	r0, r5
   1ca54:	f7fe fcf2 	bl	1b43c <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
   1ca58:	7a23      	ldrb	r3, [r4, #8]
   1ca5a:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   1ca5c:	f8a0 6001 	strh.w	r6, [r0, #1]
   1ca60:	7a62      	ldrb	r2, [r4, #9]
   1ca62:	2a00      	cmp	r2, #0
   1ca64:	fa92 f3a2 	rbit	r3, r2
   1ca68:	fab3 f383 	clz	r3, r3
   1ca6c:	bf08      	it	eq
   1ca6e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1ca72:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
   1ca74:	70c3      	strb	r3, [r0, #3]
   1ca76:	7aa2      	ldrb	r2, [r4, #10]
   1ca78:	fa92 f3a2 	rbit	r3, r2
   1ca7c:	2a00      	cmp	r2, #0
   1ca7e:	fab3 f383 	clz	r3, r3
   1ca82:	bf08      	it	eq
   1ca84:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1ca88:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
   1ca8a:	7103      	strb	r3, [r0, #4]
   1ca8c:	e5cb      	b.n	1c626 <hci_evt_encode+0x20e>
		LL_ASSERT(0);
   1ca8e:	4b0e      	ldr	r3, [pc, #56]	; (1cac8 <hci_evt_encode+0x6b0>)
   1ca90:	681b      	ldr	r3, [r3, #0]
   1ca92:	075a      	lsls	r2, r3, #29
   1ca94:	f43f ad41 	beq.w	1c51a <hci_evt_encode+0x102>
   1ca98:	2301      	movs	r3, #1
   1ca9a:	f04f 0200 	mov.w	r2, #0
   1ca9e:	f363 0202 	bfi	r2, r3, #0, #3
   1caa2:	490a      	ldr	r1, [pc, #40]	; (1cacc <hci_evt_encode+0x6b4>)
   1caa4:	4b0a      	ldr	r3, [pc, #40]	; (1cad0 <hci_evt_encode+0x6b8>)
   1caa6:	1a5b      	subs	r3, r3, r1
   1caa8:	f36f 02c5 	bfc	r2, #3, #3
   1caac:	08db      	lsrs	r3, r3, #3
   1caae:	490b      	ldr	r1, [pc, #44]	; (1cadc <hci_evt_encode+0x6c4>)
   1cab0:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(0);
   1cab4:	480a      	ldr	r0, [pc, #40]	; (1cae0 <hci_evt_encode+0x6c8>)
   1cab6:	e52e      	b.n	1c516 <hci_evt_encode+0xfe>
   1cab8:	2000dba8 	.word	0x2000dba8
   1cabc:	2000dbb0 	.word	0x2000dbb0
   1cac0:	20001c00 	.word	0x20001c00
   1cac4:	20001c90 	.word	0x20001c90
   1cac8:	2000e210 	.word	0x2000e210
   1cacc:	0002ef38 	.word	0x0002ef38
   1cad0:	0002ef60 	.word	0x0002ef60
   1cad4:	00033b69 	.word	0x00033b69
   1cad8:	00033a01 	.word	0x00033a01
   1cadc:	00033a15 	.word	0x00033a15
   1cae0:	0003146d 	.word	0x0003146d
	switch (pdu_data->llctrl.opcode) {
   1cae4:	7ac3      	ldrb	r3, [r0, #11]
   1cae6:	3b03      	subs	r3, #3
   1cae8:	2b12      	cmp	r3, #18
   1caea:	f200 80d1 	bhi.w	1cc90 <hci_evt_encode+0x878>
   1caee:	e8df f003 	tbb	[pc, r3]
   1caf2:	cf0a      	.short	0xcf0a
   1caf4:	cfae31cf 	.word	0xcfae31cf
   1caf8:	3ecfcf37 	.word	0x3ecfcf37
   1cafc:	cf62cf5e 	.word	0xcf62cf5e
   1cb00:	8ccfcfcf 	.word	0x8ccfcfcf
   1cb04:	8c          	.byte	0x8c
   1cb05:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1cb06:	4b83      	ldr	r3, [pc, #524]	; (1cd14 <hci_evt_encode+0x8fc>)
   1cb08:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cb0c:	2000      	movs	r0, #0
   1cb0e:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1cb12:	ea50 0301 	orrs.w	r3, r0, r1
   1cb16:	f43f ad86 	beq.w	1c626 <hci_evt_encode+0x20e>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   1cb1a:	4b7f      	ldr	r3, [pc, #508]	; (1cd18 <hci_evt_encode+0x900>)
   1cb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cb20:	2100      	movs	r1, #0
   1cb22:	f002 0010 	and.w	r0, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1cb26:	ea50 0301 	orrs.w	r3, r0, r1
   1cb2a:	f43f ad7c 	beq.w	1c626 <hci_evt_encode+0x20e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   1cb2e:	220c      	movs	r2, #12
   1cb30:	2105      	movs	r1, #5
   1cb32:	4628      	mov	r0, r5
   1cb34:	f7fe fc82 	bl	1b43c <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
   1cb38:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   1cb3a:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
   1cb3c:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
   1cb40:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
   1cb44:	f7ea f8a0 	bl	6c88 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
   1cb48:	2202      	movs	r2, #2
   1cb4a:	f104 0114 	add.w	r1, r4, #20
   1cb4e:	f105 000a 	add.w	r0, r5, #10
   1cb52:	e629      	b.n	1c7a8 <hci_evt_encode+0x390>
		encrypt_change(0x00, handle, buf);
   1cb54:	460a      	mov	r2, r1
   1cb56:	2000      	movs	r0, #0
   1cb58:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   1cb5a:	f7fe fc85 	bl	1b468 <encrypt_change>
   1cb5e:	e562      	b.n	1c626 <hci_evt_encode+0x20e>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   1cb60:	460b      	mov	r3, r1
   1cb62:	4632      	mov	r2, r6
   1cb64:	4649      	mov	r1, r9
   1cb66:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1cb68:	f7fe fca0 	bl	1b4ac <le_remote_feat_complete>
   1cb6c:	e55b      	b.n	1c626 <hci_evt_encode+0x20e>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
   1cb6e:	4b69      	ldr	r3, [pc, #420]	; (1cd14 <hci_evt_encode+0x8fc>)
   1cb70:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cb74:	2100      	movs	r1, #0
   1cb76:	f402 6000 	and.w	r0, r2, #2048	; 0x800
   1cb7a:	ea50 0301 	orrs.w	r3, r0, r1
   1cb7e:	f43f ad52 	beq.w	1c626 <hci_evt_encode+0x20e>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
   1cb82:	2208      	movs	r2, #8
   1cb84:	210c      	movs	r1, #12
   1cb86:	4628      	mov	r0, r5
   1cb88:	f7fe fc11 	bl	1b3ae <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   1cb8c:	2108      	movs	r1, #8
   1cb8e:	1868      	adds	r0, r5, r1
   1cb90:	f002 fbbe 	bl	1f310 <net_buf_simple_add>
	ep->status = 0x00;
   1cb94:	2300      	movs	r3, #0
   1cb96:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1cb98:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
   1cb9c:	7b23      	ldrb	r3, [r4, #12]
   1cb9e:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
   1cba0:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   1cba4:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
   1cba6:	f8b4 300f 	ldrh.w	r3, [r4, #15]
   1cbaa:	80c3      	strh	r3, [r0, #6]
   1cbac:	e53b      	b.n	1c626 <hci_evt_encode+0x20e>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   1cbae:	460a      	mov	r2, r1
   1cbb0:	7b00      	ldrb	r0, [r0, #12]
   1cbb2:	4631      	mov	r1, r6
   1cbb4:	e7d1      	b.n	1cb5a <hci_evt_encode+0x742>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1cbb6:	4b57      	ldr	r3, [pc, #348]	; (1cd14 <hci_evt_encode+0x8fc>)
   1cbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cbbc:	2000      	movs	r0, #0
   1cbbe:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1cbc2:	ea50 0301 	orrs.w	r3, r0, r1
   1cbc6:	d008      	beq.n	1cbda <hci_evt_encode+0x7c2>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   1cbc8:	4b53      	ldr	r3, [pc, #332]	; (1cd18 <hci_evt_encode+0x900>)
   1cbca:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cbce:	2100      	movs	r1, #0
   1cbd0:	f002 0020 	and.w	r0, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1cbd4:	ea50 0301 	orrs.w	r3, r0, r1
   1cbd8:	d108      	bne.n	1cbec <hci_evt_encode+0x7d4>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1cbda:	2300      	movs	r3, #0
   1cbdc:	e9cd 3300 	strd	r3, r3, [sp]
   1cbe0:	221a      	movs	r2, #26
   1cbe2:	2102      	movs	r1, #2
   1cbe4:	4630      	mov	r0, r6
   1cbe6:	f7fd f943 	bl	19e70 <ll_conn_update>
   1cbea:	e51c      	b.n	1c626 <hci_evt_encode+0x20e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   1cbec:	220a      	movs	r2, #10
   1cbee:	2106      	movs	r1, #6
   1cbf0:	4628      	mov	r0, r5
   1cbf2:	f7fe fc23 	bl	1b43c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   1cbf6:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   1cbf8:	89a3      	ldrh	r3, [r4, #12]
   1cbfa:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   1cbfc:	89e3      	ldrh	r3, [r4, #14]
   1cbfe:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   1cc00:	8a23      	ldrh	r3, [r4, #16]
   1cc02:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   1cc04:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   1cc06:	8103      	strh	r3, [r0, #8]
   1cc08:	e50d      	b.n	1c626 <hci_evt_encode+0x20e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1cc0a:	4b42      	ldr	r3, [pc, #264]	; (1cd14 <hci_evt_encode+0x8fc>)
   1cc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cc10:	2000      	movs	r0, #0
   1cc12:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1cc16:	ea50 0301 	orrs.w	r3, r0, r1
   1cc1a:	f43f ad04 	beq.w	1c626 <hci_evt_encode+0x20e>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   1cc1e:	4b3e      	ldr	r3, [pc, #248]	; (1cd18 <hci_evt_encode+0x900>)
   1cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cc24:	2100      	movs	r1, #0
   1cc26:	f002 0040 	and.w	r0, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1cc2a:	ea50 0301 	orrs.w	r3, r0, r1
   1cc2e:	f43f acfa 	beq.w	1c626 <hci_evt_encode+0x20e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
   1cc32:	220a      	movs	r2, #10
   1cc34:	2107      	movs	r1, #7
   1cc36:	4628      	mov	r0, r5
   1cc38:	f7fe fc00 	bl	1b43c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   1cc3c:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   1cc3e:	8a23      	ldrh	r3, [r4, #16]
   1cc40:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   1cc42:	8a63      	ldrh	r3, [r4, #18]
   1cc44:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   1cc46:	89a3      	ldrh	r3, [r4, #12]
   1cc48:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   1cc4a:	89e3      	ldrh	r3, [r4, #14]
   1cc4c:	e7db      	b.n	1cc06 <hci_evt_encode+0x7ee>
		le_unknown_rsp(pdu_data, handle, buf);
   1cc4e:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   1cc50:	2a0e      	cmp	r2, #14
   1cc52:	d104      	bne.n	1cc5e <hci_evt_encode+0x846>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1cc54:	460b      	mov	r3, r1
   1cc56:	4632      	mov	r2, r6
   1cc58:	2100      	movs	r1, #0
   1cc5a:	201a      	movs	r0, #26
   1cc5c:	e784      	b.n	1cb68 <hci_evt_encode+0x750>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1cc5e:	4b2f      	ldr	r3, [pc, #188]	; (1cd1c <hci_evt_encode+0x904>)
   1cc60:	681b      	ldr	r3, [r3, #0]
   1cc62:	f003 0307 	and.w	r3, r3, #7
   1cc66:	2b01      	cmp	r3, #1
   1cc68:	f67f acdd 	bls.w	1c626 <hci_evt_encode+0x20e>
   1cc6c:	2102      	movs	r1, #2
   1cc6e:	f04f 0300 	mov.w	r3, #0
   1cc72:	f361 0302 	bfi	r3, r1, #0, #3
   1cc76:	482a      	ldr	r0, [pc, #168]	; (1cd20 <hci_evt_encode+0x908>)
   1cc78:	492a      	ldr	r1, [pc, #168]	; (1cd24 <hci_evt_encode+0x90c>)
   1cc7a:	1a09      	subs	r1, r1, r0
   1cc7c:	08c9      	lsrs	r1, r1, #3
   1cc7e:	f36f 03c5 	bfc	r3, #3, #3
   1cc82:	f361 138f 	bfi	r3, r1, #6, #10
   1cc86:	4828      	ldr	r0, [pc, #160]	; (1cd28 <hci_evt_encode+0x910>)
   1cc88:	4928      	ldr	r1, [pc, #160]	; (1cd2c <hci_evt_encode+0x914>)
   1cc8a:	f7e5 fa43 	bl	2114 <log_2>
   1cc8e:	e4ca      	b.n	1c626 <hci_evt_encode+0x20e>
		LL_ASSERT(0);
   1cc90:	4b22      	ldr	r3, [pc, #136]	; (1cd1c <hci_evt_encode+0x904>)
   1cc92:	681b      	ldr	r3, [r3, #0]
   1cc94:	075b      	lsls	r3, r3, #29
   1cc96:	f43f ac40 	beq.w	1c51a <hci_evt_encode+0x102>
   1cc9a:	2301      	movs	r3, #1
   1cc9c:	f04f 0200 	mov.w	r2, #0
   1cca0:	f363 0202 	bfi	r2, r3, #0, #3
   1cca4:	491e      	ldr	r1, [pc, #120]	; (1cd20 <hci_evt_encode+0x908>)
   1cca6:	4b1f      	ldr	r3, [pc, #124]	; (1cd24 <hci_evt_encode+0x90c>)
   1cca8:	1a5b      	subs	r3, r3, r1
   1ccaa:	f36f 02c5 	bfc	r2, #3, #3
   1ccae:	08db      	lsrs	r3, r3, #3
   1ccb0:	f363 128f 	bfi	r2, r3, #6, #10
   1ccb4:	491e      	ldr	r1, [pc, #120]	; (1cd30 <hci_evt_encode+0x918>)
   1ccb6:	e6fd      	b.n	1cab4 <hci_evt_encode+0x69c>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1ccb8:	ea58 0309 	orrs.w	r3, r8, r9
   1ccbc:	f43f ada7 	beq.w	1c80e <hci_evt_encode+0x3f6>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   1ccc0:	221e      	movs	r2, #30
   1ccc2:	210a      	movs	r1, #10
   1ccc4:	4628      	mov	r0, r5
   1ccc6:	f7fe fbb9 	bl	1b43c <meta_evt>
   1ccca:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   1cccc:	221e      	movs	r2, #30
   1ccce:	2100      	movs	r1, #0
   1ccd0:	f7ea f807 	bl	6ce2 <memset>
			leecc->status = status;
   1ccd4:	7027      	strb	r7, [r4, #0]
   1ccd6:	e4a6      	b.n	1c626 <hci_evt_encode+0x20e>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   1ccd8:	221e      	movs	r2, #30
   1ccda:	210a      	movs	r1, #10
   1ccdc:	4628      	mov	r0, r5
   1ccde:	f7fe fbad 	bl	1b43c <meta_evt>
		leecc->status = 0x00;
   1cce2:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   1cce4:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
   1cce8:	7a63      	ldrb	r3, [r4, #9]
   1ccea:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
   1ccec:	7aa3      	ldrb	r3, [r4, #10]
   1ccee:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   1ccf0:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
   1ccf2:	2206      	movs	r2, #6
   1ccf4:	f104 010b 	add.w	r1, r4, #11
   1ccf8:	3005      	adds	r0, #5
   1ccfa:	f7e9 ffc5 	bl	6c88 <memcpy>
		if ((radio_cc->own_addr_type) &&
   1ccfe:	7de3      	ldrb	r3, [r4, #23]
   1cd00:	f105 000b 	add.w	r0, r5, #11
   1cd04:	2b00      	cmp	r3, #0
   1cd06:	f47f ad8f 	bne.w	1c828 <hci_evt_encode+0x410>
			(void)memset(&leecc->local_rpa.val[0], 0x0,
   1cd0a:	2206      	movs	r2, #6
   1cd0c:	2100      	movs	r1, #0
   1cd0e:	f7e9 ffe8 	bl	6ce2 <memset>
   1cd12:	e594      	b.n	1c83e <hci_evt_encode+0x426>
   1cd14:	2000dba8 	.word	0x2000dba8
   1cd18:	2000dbb0 	.word	0x2000dbb0
   1cd1c:	2000e210 	.word	0x2000e210
   1cd20:	0002ef38 	.word	0x0002ef38
   1cd24:	0002ef60 	.word	0x0002ef60
   1cd28:	00033b99 	.word	0x00033b99
   1cd2c:	00033a24 	.word	0x00033a24
   1cd30:	00033a33 	.word	0x00033a33

0001cd34 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
   1cd34:	b570      	push	{r4, r5, r6, lr}
   1cd36:	4606      	mov	r6, r0
   1cd38:	460d      	mov	r5, r1
   1cd3a:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
   1cd3c:	2113      	movs	r1, #19
   1cd3e:	2205      	movs	r2, #5
   1cd40:	f7fe fb35 	bl	1b3ae <evt_create>

	ep = net_buf_add(buf, len);
   1cd44:	2105      	movs	r1, #5
   1cd46:	f106 0008 	add.w	r0, r6, #8
   1cd4a:	f002 fae1 	bl	1f310 <net_buf_simple_add>
	ep->num_handles = num_handles;
   1cd4e:	2301      	movs	r3, #1
   1cd50:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   1cd52:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   1cd56:	f8a0 4003 	strh.w	r4, [r0, #3]
}
   1cd5a:	bd70      	pop	{r4, r5, r6, pc}

0001cd5c <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1cd5c:	7903      	ldrb	r3, [r0, #4]
   1cd5e:	2b01      	cmp	r3, #1
   1cd60:	d006      	beq.n	1cd70 <hci_get_class+0x14>
   1cd62:	3b02      	subs	r3, #2
   1cd64:	b2db      	uxtb	r3, r3
   1cd66:	2b0a      	cmp	r3, #10
   1cd68:	d80a      	bhi.n	1cd80 <hci_get_class+0x24>
   1cd6a:	4a07      	ldr	r2, [pc, #28]	; (1cd88 <hci_get_class+0x2c>)
   1cd6c:	56d0      	ldrsb	r0, [r2, r3]
   1cd6e:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   1cd70:	7a03      	ldrb	r3, [r0, #8]
   1cd72:	f003 0303 	and.w	r3, r3, #3
   1cd76:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
   1cd78:	bf0c      	ite	eq
   1cd7a:	2002      	moveq	r0, #2
   1cd7c:	2003      	movne	r0, #3
   1cd7e:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1cd80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
   1cd84:	4770      	bx	lr
   1cd86:	bf00      	nop
   1cd88:	0003399b 	.word	0x0003399b

0001cd8c <hci_init>:
	dup_count = -1;
   1cd8c:	4b0a      	ldr	r3, [pc, #40]	; (1cdb8 <hci_init+0x2c>)
   1cd8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cd92:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
   1cd94:	4b09      	ldr	r3, [pc, #36]	; (1cdbc <hci_init+0x30>)
   1cd96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cd9a:	f641 71ff 	movw	r1, #8191	; 0x1fff
   1cd9e:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1cda2:	4b07      	ldr	r3, [pc, #28]	; (1cdc0 <hci_init+0x34>)
   1cda4:	2000      	movs	r0, #0
   1cda6:	2100      	movs	r1, #0
   1cda8:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1cdac:	4b05      	ldr	r3, [pc, #20]	; (1cdc4 <hci_init+0x38>)
   1cdae:	201f      	movs	r0, #31
   1cdb0:	2100      	movs	r1, #0
   1cdb2:	e9c3 0100 	strd	r0, r1, [r3]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   1cdb6:	4770      	bx	lr
   1cdb8:	20001c04 	.word	0x20001c04
   1cdbc:	2000dba8 	.word	0x2000dba8
   1cdc0:	20001c90 	.word	0x20001c90
   1cdc4:	2000dbb0 	.word	0x2000dbb0

0001cdc8 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
   1cdc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1cdca:	460c      	mov	r4, r1
   1cdcc:	1846      	adds	r6, r0, r1
   1cdce:	1b35      	subs	r5, r6, r4
	u8_t *buf8 = buf;

	while (len) {
   1cdd0:	b18c      	cbz	r4, 1cdf6 <bt_rand+0x2e>
		u32_t v = sys_rand32_get();
   1cdd2:	f7e8 ffdf 	bl	5d94 <sys_rand32_get>

		if (len >= sizeof(v)) {
   1cdd6:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
   1cdd8:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
   1cdda:	d907      	bls.n	1cdec <bt_rand+0x24>
			memcpy(buf8, &v, sizeof(v));
   1cddc:	2204      	movs	r2, #4
   1cdde:	eb0d 0102 	add.w	r1, sp, r2
   1cde2:	4628      	mov	r0, r5
   1cde4:	f7e9 ff50 	bl	6c88 <memcpy>

			buf8 += sizeof(v);
			len -= sizeof(v);
   1cde8:	3c04      	subs	r4, #4
   1cdea:	e7f0      	b.n	1cdce <bt_rand+0x6>
		} else {
			memcpy(buf8, &v, len);
   1cdec:	4622      	mov	r2, r4
   1cdee:	a901      	add	r1, sp, #4
   1cdf0:	4628      	mov	r0, r5
   1cdf2:	f7e9 ff49 	bl	6c88 <memcpy>
			break;
		}
	}

	return 0;
}
   1cdf6:	2000      	movs	r0, #0
   1cdf8:	b002      	add	sp, #8
   1cdfa:	bd70      	pop	{r4, r5, r6, pc}

0001cdfc <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   1cdfc:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   1cdfe:	2300      	movs	r3, #0
   1ce00:	f001 fbb0 	bl	1e564 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   1ce04:	2000      	movs	r0, #0
   1ce06:	bd08      	pop	{r3, pc}

0001ce08 <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   1ce08:	4800      	ldr	r0, [pc, #0]	; (1ce0c <ll_adv_set_get+0x4>)
   1ce0a:	4770      	bx	lr
   1ce0c:	20001c98 	.word	0x20001c98

0001ce10 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   1ce10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce14:	b087      	sub	sp, #28
   1ce16:	4698      	mov	r8, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1ce18:	4b7e      	ldr	r3, [pc, #504]	; (1d014 <ll_adv_params_set+0x204>)
   1ce1a:	9304      	str	r3, [sp, #16]
   1ce1c:	f240 7301 	movw	r3, #1793	; 0x701
{
   1ce20:	460e      	mov	r6, r1
   1ce22:	4614      	mov	r4, r2
   1ce24:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
   1ce28:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1ce2c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1ce30:	f8ad 3014 	strh.w	r3, [sp, #20]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled()) {
   1ce34:	f7fc fe06 	bl	19a44 <ll_adv_is_enabled>
   1ce38:	4607      	mov	r7, r0
   1ce3a:	2800      	cmp	r0, #0
   1ce3c:	f040 80e5 	bne.w	1d00a <ll_adv_params_set+0x1fa>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
   1ce40:	4975      	ldr	r1, [pc, #468]	; (1d018 <ll_adv_params_set+0x208>)
   1ce42:	7a0b      	ldrb	r3, [r1, #8]
   1ce44:	2001      	movs	r0, #1
   1ce46:	f360 0302 	bfi	r3, r0, #0, #3

	/* extended */
	if (adv_type > 0x04) {
   1ce4a:	f1b8 0f04 	cmp.w	r8, #4
	ll_adv.phy_p = BIT(0);
   1ce4e:	720b      	strb	r3, [r1, #8]
	if (adv_type > 0x04) {
   1ce50:	d90b      	bls.n	1ce6a <ll_adv_params_set+0x5a>
		/* legacy */
		if (evt_prop & BIT(4)) {
   1ce52:	06f2      	lsls	r2, r6, #27
   1ce54:	f006 0303 	and.w	r3, r6, #3
   1ce58:	d50f      	bpl.n	1ce7a <ll_adv_params_set+0x6a>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   1ce5a:	4a70      	ldr	r2, [pc, #448]	; (1d01c <ll_adv_params_set+0x20c>)
   1ce5c:	9203      	str	r2, [sp, #12]

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
   1ce5e:	0735      	lsls	r5, r6, #28
   1ce60:	d406      	bmi.n	1ce70 <ll_adv_params_set+0x60>
			adv_type = leg_adv_type[evt_prop & 0x03];
   1ce62:	aa06      	add	r2, sp, #24
   1ce64:	4413      	add	r3, r2
   1ce66:	f813 8c0c 	ldrb.w	r8, [r3, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
   1ce6a:	f1b8 0f01 	cmp.w	r8, #1
   1ce6e:	d112      	bne.n	1ce96 <ll_adv_params_set+0x86>
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
   1ce70:	2300      	movs	r3, #0
   1ce72:	60cb      	str	r3, [r1, #12]
   1ce74:	f04f 0801 	mov.w	r8, #1
   1ce78:	e00e      	b.n	1ce98 <ll_adv_params_set+0x88>
			if (((evt_prop & 0x03) == 0x03) ||
   1ce7a:	2b03      	cmp	r3, #3
   1ce7c:	f000 80c7 	beq.w	1d00e <ll_adv_params_set+0x1fe>
   1ce80:	f006 030c 	and.w	r3, r6, #12
   1ce84:	2b0c      	cmp	r3, #12
   1ce86:	f000 80c2 	beq.w	1d00e <ll_adv_params_set+0x1fe>
			ll_adv.phy_p = phy_p;
   1ce8a:	7a0b      	ldrb	r3, [r1, #8]
   1ce8c:	f369 0302 	bfi	r3, r9, #0, #3
   1ce90:	720b      	strb	r3, [r1, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   1ce92:	f04f 0805 	mov.w	r8, #5
		ll_adv.interval = interval;
   1ce96:	60cc      	str	r4, [r1, #12]
	}
	ll_adv.chan_map = chan_map;
   1ce98:	780b      	ldrb	r3, [r1, #0]
   1ce9a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
	ll_adv.filter_policy = filter_policy;
   1ce9e:	9101      	str	r1, [sp, #4]
	ll_adv.chan_map = chan_map;
   1cea0:	f360 0302 	bfi	r3, r0, #0, #3
	ll_adv.filter_policy = filter_policy;
   1cea4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
   1cea8:	f360 03c4 	bfi	r3, r0, #3, #2
   1ceac:	700b      	strb	r3, [r1, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
   1ceae:	f7fc fdc1 	bl	19a34 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1ceb2:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
	pdu->type = pdu_adv_type[adv_type];
	pdu->rfu = 0;

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1ceb6:	9901      	ldr	r1, [sp, #4]
	radio_adv_data = radio_adv_data_get();
   1ceb8:	4603      	mov	r3, r0
	pdu->type = pdu_adv_type[adv_type];
   1ceba:	aa06      	add	r2, sp, #24
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1cebc:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1cec0:	ebc5 05c0 	rsb	r5, r5, r0, lsl #3
	pdu->type = pdu_adv_type[adv_type];
   1cec4:	eb02 0008 	add.w	r0, r2, r8
   1cec8:	5d5a      	ldrb	r2, [r3, r5]
   1ceca:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   1cece:	f360 0203 	bfi	r2, r0, #0, #4
	pdu->rfu = 0;
   1ced2:	f36f 1204 	bfc	r2, #4, #1
   1ced6:	555a      	strb	r2, [r3, r5]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1ced8:	b2d2      	uxtb	r2, r2
   1ceda:	f002 000f 	and.w	r0, r2, #15
   1cede:	2801      	cmp	r0, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
   1cee0:	bf94      	ite	ls
   1cee2:	f042 0220 	orrls.w	r2, r2, #32
	} else {
		pdu->chan_sel = 0;
   1cee6:	f36f 1245 	bfchi	r2, #5, #1
   1ceea:	555a      	strb	r2, [r3, r5]
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
   1ceec:	780a      	ldrb	r2, [r1, #0]
   1ceee:	f36b 1246 	bfi	r2, fp, #5, #2
   1cef2:	700a      	strb	r2, [r1, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1cef4:	b2d2      	uxtb	r2, r2
   1cef6:	0650      	lsls	r0, r2, #25
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1cef8:	eb03 0405 	add.w	r4, r3, r5
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1cefc:	d509      	bpl.n	1cf12 <ll_adv_params_set+0x102>
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   1cefe:	f36a 12c7 	bfi	r2, sl, #7, #1
   1cf02:	700a      	strb	r2, [r1, #0]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   1cf04:	4846      	ldr	r0, [pc, #280]	; (1d020 <ll_adv_params_set+0x210>)
   1cf06:	9912      	ldr	r1, [sp, #72]	; 0x48
   1cf08:	9301      	str	r3, [sp, #4]
   1cf0a:	2206      	movs	r2, #6
   1cf0c:	f7e9 febc 	bl	6c88 <memcpy>
   1cf10:	9b01      	ldr	r3, [sp, #4]
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
   1cf12:	5d5a      	ldrb	r2, [r3, r5]
   1cf14:	f00b 0b01 	and.w	fp, fp, #1
   1cf18:	f36b 1286 	bfi	r2, fp, #6, #1
	pdu->rx_addr = 0;
   1cf1c:	f36f 12c7 	bfc	r2, #7, #1
   1cf20:	555a      	strb	r2, [r3, r5]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1cf22:	b2d2      	uxtb	r2, r2
   1cf24:	f002 010f 	and.w	r1, r2, #15
   1cf28:	2901      	cmp	r1, #1
   1cf2a:	d10b      	bne.n	1cf44 <ll_adv_params_set+0x134>
		pdu->rx_addr = direct_addr_type;
   1cf2c:	f36a 12c7 	bfi	r2, sl, #7, #1
   1cf30:	555a      	strb	r2, [r3, r5]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   1cf32:	9912      	ldr	r1, [sp, #72]	; 0x48
   1cf34:	2206      	movs	r2, #6
   1cf36:	f104 0008 	add.w	r0, r4, #8
   1cf3a:	f7e9 fea5 	bl	6c88 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   1cf3e:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
   1cf40:	7063      	strb	r3, [r4, #1]
   1cf42:	e03f      	b.n	1cfc4 <ll_adv_params_set+0x1b4>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   1cf44:	2907      	cmp	r1, #7
   1cf46:	d15b      	bne.n	1d000 <ll_adv_params_set+0x1f0>
		p->ext_hdr_len = 0;
   1cf48:	78a1      	ldrb	r1, [r4, #2]
		p->adv_mode = evt_prop & 0x03;
   1cf4a:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
   1cf4e:	f366 1187 	bfi	r1, r6, #6, #2
   1cf52:	70a1      	strb	r1, [r4, #2]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   1cf54:	06b0      	lsls	r0, r6, #26
		*(u8_t *)h = 0;
   1cf56:	f04f 0100 	mov.w	r1, #0
		p = (void *)&pdu->adv_ext_ind;
   1cf5a:	f104 0302 	add.w	r3, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
   1cf5e:	f104 0204 	add.w	r2, r4, #4
		*(u8_t *)h = 0;
   1cf62:	70e1      	strb	r1, [r4, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   1cf64:	d40a      	bmi.n	1cf7c <ll_adv_params_set+0x16c>
   1cf66:	78a1      	ldrb	r1, [r4, #2]
   1cf68:	f011 0fc0 	tst.w	r1, #192	; 0xc0
   1cf6c:	d106      	bne.n	1cf7c <ll_adv_params_set+0x16c>
   1cf6e:	f1b9 0f04 	cmp.w	r9, #4
			h->adv_addr = 1;
   1cf72:	bf1e      	ittt	ne
   1cf74:	2201      	movne	r2, #1
   1cf76:	70e2      	strbne	r2, [r4, #3]
			ptr += BDADDR_SIZE;
   1cf78:	f104 020a 	addne.w	r2, r4, #10
		if (evt_prop & BIT(6)) {
   1cf7c:	0671      	lsls	r1, r6, #25
			h->tx_pwr = 1;
   1cf7e:	bf44      	itt	mi
   1cf80:	78e1      	ldrbmi	r1, [r4, #3]
			ptr++;
   1cf82:	3201      	addmi	r2, #1
		len = ptr - (u8_t *)p;
   1cf84:	eba2 0303 	sub.w	r3, r2, r3
			h->tx_pwr = 1;
   1cf88:	bf48      	it	mi
   1cf8a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
		len = ptr - (u8_t *)p;
   1cf8e:	b2db      	uxtb	r3, r3
			h->tx_pwr = 1;
   1cf90:	bf48      	it	mi
   1cf92:	70e1      	strbmi	r1, [r4, #3]
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
   1cf94:	2b02      	cmp	r3, #2
			p->ext_hdr_len = len -
   1cf96:	bf8a      	itet	hi
   1cf98:	78a1      	ldrbhi	r1, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   1cf9a:	2301      	movls	r3, #1
			p->ext_hdr_len = len -
   1cf9c:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   1cfa0:	7063      	strb	r3, [r4, #1]
		if (h->tx_pwr) {
   1cfa2:	78e3      	ldrb	r3, [r4, #3]
			p->ext_hdr_len = len -
   1cfa4:	bf84      	itt	hi
   1cfa6:	f360 0105 	bfihi	r1, r0, #0, #6
   1cfaa:	70a1      	strbhi	r1, [r4, #2]
		if (h->tx_pwr) {
   1cfac:	065b      	lsls	r3, r3, #25
   1cfae:	d509      	bpl.n	1cfc4 <ll_adv_params_set+0x1b4>
			if (tx_pwr) {
   1cfb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1cfb2:	b31b      	cbz	r3, 1cffc <ll_adv_params_set+0x1ec>
				if (*tx_pwr != 0x7F) {
   1cfb4:	781b      	ldrb	r3, [r3, #0]
   1cfb6:	2b7f      	cmp	r3, #127	; 0x7f
   1cfb8:	d102      	bne.n	1cfc0 <ll_adv_params_set+0x1b0>
					*tx_pwr = _tx_pwr;
   1cfba:	9915      	ldr	r1, [sp, #84]	; 0x54
   1cfbc:	2300      	movs	r3, #0
   1cfbe:	700b      	strb	r3, [r1, #0]
			*ptr = _tx_pwr;
   1cfc0:	f802 3c01 	strb.w	r3, [r2, #-1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   1cfc4:	f7fc fd3a 	bl	19a3c <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1cfc8:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   1cfcc:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   1cfd0:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1cfd4:	2404      	movs	r4, #4
   1cfd6:	5c83      	ldrb	r3, [r0, r2]
   1cfd8:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   1cfdc:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   1cfe0:	f36b 1386 	bfi	r3, fp, #6, #1
	pdu->rx_addr = 0;
   1cfe4:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1cfe8:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
   1cfea:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   1cfec:	784b      	ldrb	r3, [r1, #1]
   1cfee:	b90b      	cbnz	r3, 1cff4 <ll_adv_params_set+0x1e4>
		pdu->len = BDADDR_SIZE;
   1cff0:	2306      	movs	r3, #6
   1cff2:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
   1cff4:	4638      	mov	r0, r7
   1cff6:	b007      	add	sp, #28
   1cff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_tx_pwr = 0;
   1cffc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1cffe:	e7df      	b.n	1cfc0 <ll_adv_params_set+0x1b0>
	} else if (pdu->len == 0) {
   1d000:	7863      	ldrb	r3, [r4, #1]
   1d002:	2b00      	cmp	r3, #0
   1d004:	d1de      	bne.n	1cfc4 <ll_adv_params_set+0x1b4>
		pdu->len = BDADDR_SIZE;
   1d006:	2306      	movs	r3, #6
   1d008:	e79a      	b.n	1cf40 <ll_adv_params_set+0x130>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d00a:	270c      	movs	r7, #12
   1d00c:	e7f2      	b.n	1cff4 <ll_adv_params_set+0x1e4>
				return 0x12; /* invalid HCI cmd param */
   1d00e:	2712      	movs	r7, #18
   1d010:	e7f0      	b.n	1cff4 <ll_adv_params_set+0x1e4>
   1d012:	bf00      	nop
   1d014:	02060100 	.word	0x02060100
   1d018:	20001c98 	.word	0x20001c98
   1d01c:	00020403 	.word	0x00020403
   1d020:	20001c9a 	.word	0x20001c9a

0001d024 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   1d024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d028:	460f      	mov	r7, r1
   1d02a:	4606      	mov	r6, r0
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   1d02c:	f7fc fd02 	bl	19a34 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1d030:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   1d034:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1d038:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	radio_adv_data = radio_adv_data_get();
   1d03c:	4604      	mov	r4, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1d03e:	f810 c002 	ldrb.w	ip, [r0, r2]
   1d042:	f00c 030f 	and.w	r3, ip, #15
   1d046:	2b01      	cmp	r3, #1
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1d048:	eb00 0102 	add.w	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1d04c:	d040      	beq.n	1d0d0 <ll_adv_data_set+0xac>
   1d04e:	2b07      	cmp	r3, #7
   1d050:	d03e      	beq.n	1d0d0 <ll_adv_data_set+0xac>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   1d052:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1d056:	42ab      	cmp	r3, r5
   1d058:	d104      	bne.n	1d064 <ll_adv_data_set+0x40>
		last = radio_adv_data->last + 1;
   1d05a:	3501      	adds	r5, #1
   1d05c:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
   1d05e:	2d02      	cmp	r5, #2
   1d060:	bf08      	it	eq
   1d062:	2500      	moveq	r5, #0
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1d064:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1d068:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   1d06c:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   1d070:	5ce0      	ldrb	r0, [r4, r3]
   1d072:	f36c 0003 	bfi	r0, ip, #0, #4
	pdu->rfu = 0;
   1d076:	f36f 1004 	bfc	r0, #4, #1
   1d07a:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   1d07c:	5ca0      	ldrb	r0, [r4, r2]
   1d07e:	f814 c003 	ldrb.w	ip, [r4, r3]
   1d082:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1d086:	f360 1c45 	bfi	ip, r0, #5, #1
   1d08a:	f804 c003 	strb.w	ip, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   1d08e:	5ca0      	ldrb	r0, [r4, r2]
   1d090:	fa5f fc8c 	uxtb.w	ip, ip
   1d094:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1d098:	f360 1c86 	bfi	ip, r0, #6, #1
   1d09c:	f804 c003 	strb.w	ip, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
   1d0a0:	5ca2      	ldrb	r2, [r4, r2]
   1d0a2:	fa5f f08c 	uxtb.w	r0, ip
   1d0a6:	09d2      	lsrs	r2, r2, #7
   1d0a8:	f362 10c7 	bfi	r0, r2, #7, #1
   1d0ac:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   1d0ae:	2206      	movs	r2, #6
   1d0b0:	3102      	adds	r1, #2
   1d0b2:	f108 0002 	add.w	r0, r8, #2
   1d0b6:	f7e9 fde7 	bl	6c88 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   1d0ba:	4632      	mov	r2, r6
   1d0bc:	4639      	mov	r1, r7
   1d0be:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
   1d0c2:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   1d0c4:	f7e9 fde0 	bl	6c88 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1d0c8:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   1d0cc:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
}
   1d0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d0d4 <ll_scan_data_set>:

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   1d0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d0d8:	4606      	mov	r6, r0
   1d0da:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   1d0dc:	f7fc fcae 	bl	19a3c <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   1d0e0:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   1d0e4:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   1d0e8:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
   1d0ea:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   1d0ec:	d136      	bne.n	1d15c <ll_scan_data_set+0x88>
		last = radio_scan_data->last + 1;
   1d0ee:	1c5d      	adds	r5, r3, #1
   1d0f0:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1d0f2:	2d02      	cmp	r5, #2
			last = 0;
   1d0f4:	bf08      	it	eq
   1d0f6:	2500      	moveq	r5, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   1d0f8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1d0fc:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1d100:	b22b      	sxth	r3, r5
   1d102:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1d106:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1d10a:	f04f 0c04 	mov.w	ip, #4
   1d10e:	5ce0      	ldrb	r0, [r4, r3]
   1d110:	f36c 0003 	bfi	r0, ip, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   1d114:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   1d118:	f36f 1045 	bfc	r0, #5, #1
   1d11c:	54e0      	strb	r0, [r4, r3]
	pdu->tx_addr = prev->tx_addr;
   1d11e:	5ca0      	ldrb	r0, [r4, r2]
	prev = (struct pdu_adv *)
   1d120:	18a1      	adds	r1, r4, r2
	pdu->tx_addr = prev->tx_addr;
   1d122:	5ce2      	ldrb	r2, [r4, r3]
   1d124:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1d128:	f360 1286 	bfi	r2, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1d12c:	eb04 0803 	add.w	r8, r4, r3
	pdu->rx_addr = 0;
   1d130:	f36f 12c7 	bfc	r2, #7, #1
   1d134:	54e2      	strb	r2, [r4, r3]
	pdu->len = BDADDR_SIZE + len;
   1d136:	1db3      	adds	r3, r6, #6
   1d138:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1d13c:	2206      	movs	r2, #6
   1d13e:	3102      	adds	r1, #2
   1d140:	f108 0002 	add.w	r0, r8, #2
   1d144:	f7e9 fda0 	bl	6c88 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   1d148:	4632      	mov	r2, r6
   1d14a:	4639      	mov	r1, r7
   1d14c:	f108 0008 	add.w	r0, r8, #8
   1d150:	f7e9 fd9a 	bl	6c88 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   1d154:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
}
   1d158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d15c:	461d      	mov	r5, r3
   1d15e:	e7cb      	b.n	1d0f8 <ll_scan_data_set+0x24>

0001d160 <ll_adv_enable>:

u32_t ll_adv_enable(u8_t enable)
{
   1d160:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   1d164:	b920      	cbnz	r0, 1d170 <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   1d166:	b002      	add	sp, #8
   1d168:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return radio_adv_disable();
   1d16c:	f7fd bbd2 	b.w	1a914 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
   1d170:	f7fc fc68 	bl	19a44 <ll_adv_is_enabled>
   1d174:	4681      	mov	r9, r0
   1d176:	2800      	cmp	r0, #0
   1d178:	d16b      	bne.n	1d252 <ll_adv_enable+0xf2>
	radio_adv_data = radio_adv_data_get();
   1d17a:	f7fc fc5b 	bl	19a34 <radio_adv_data_get>
   1d17e:	4607      	mov	r7, r0
	radio_scan_data = radio_scan_data_get();
   1d180:	f7fc fc5c 	bl	19a3c <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   1d184:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
   1d188:	4d33      	ldr	r5, [pc, #204]	; (1d258 <ll_adv_enable+0xf8>)
   1d18a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d18e:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
   1d192:	eb07 0804 	add.w	r8, r7, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   1d196:	5d3b      	ldrb	r3, [r7, r4]
   1d198:	f003 020f 	and.w	r2, r3, #15
   1d19c:	2a07      	cmp	r2, #7
   1d19e:	d110      	bne.n	1d1c2 <ll_adv_enable+0x62>
		if (h->adv_addr) {
   1d1a0:	f898 2003 	ldrb.w	r2, [r8, #3]
   1d1a4:	07d2      	lsls	r2, r2, #31
   1d1a6:	d50a      	bpl.n	1d1be <ll_adv_enable+0x5e>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   1d1a8:	4649      	mov	r1, r9
   1d1aa:	f3c3 1080 	ubfx	r0, r3, #6, #1
   1d1ae:	f7f5 f885 	bl	122bc <ll_addr_get>
   1d1b2:	2206      	movs	r2, #6
   1d1b4:	4601      	mov	r1, r0
   1d1b6:	f108 0004 	add.w	r0, r8, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
   1d1ba:	f7e9 fd65 	bl	6c88 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1d1be:	24ff      	movs	r4, #255	; 0xff
   1d1c0:	e038      	b.n	1d234 <ll_adv_enable+0xd4>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   1d1c2:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   1d1c6:	eb03 0683 	add.w	r6, r3, r3, lsl #2
   1d1ca:	ebc3 03c6 	rsb	r3, r3, r6, lsl #3
   1d1ce:	18c6      	adds	r6, r0, r3
		ll_filters_adv_update(ll_adv.filter_policy);
   1d1d0:	7828      	ldrb	r0, [r5, #0]
   1d1d2:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1d1d6:	f000 fb4f 	bl	1d878 <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1d1da:	7828      	ldrb	r0, [r5, #0]
   1d1dc:	f010 0a40 	ands.w	sl, r0, #64	; 0x40
   1d1e0:	d115      	bne.n	1d20e <ll_adv_enable+0xae>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   1d1e2:	5d38      	ldrb	r0, [r7, r4]
   1d1e4:	4651      	mov	r1, sl
   1d1e6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1d1ea:	f7f5 f867 	bl	122bc <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
   1d1ee:	2206      	movs	r2, #6
   1d1f0:	4601      	mov	r1, r0
   1d1f2:	f108 0002 	add.w	r0, r8, #2
   1d1f6:	f7e9 fd47 	bl	6c88 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   1d1fa:	5d38      	ldrb	r0, [r7, r4]
   1d1fc:	4651      	mov	r1, sl
   1d1fe:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1d202:	f7f5 f85b 	bl	122bc <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
   1d206:	2206      	movs	r2, #6
   1d208:	4601      	mov	r1, r0
   1d20a:	1cb0      	adds	r0, r6, #2
   1d20c:	e7d5      	b.n	1d1ba <ll_adv_enable+0x5a>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   1d20e:	464a      	mov	r2, r9
   1d210:	1ca9      	adds	r1, r5, #2
   1d212:	09c0      	lsrs	r0, r0, #7
   1d214:	f000 fb74 	bl	1d900 <ll_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
   1d218:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   1d21a:	4604      	mov	r4, r0
			if (rl_idx != FILTER_IDX_NONE) {
   1d21c:	d002      	beq.n	1d224 <ll_adv_enable+0xc4>
				ll_rl_rpa_update(false);
   1d21e:	4648      	mov	r0, r9
   1d220:	f000 fd6a 	bl	1dcf8 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   1d224:	4641      	mov	r1, r8
   1d226:	4620      	mov	r0, r4
   1d228:	f000 fcf0 	bl	1dc0c <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   1d22c:	4631      	mov	r1, r6
   1d22e:	4620      	mov	r0, r4
   1d230:	f000 fcec 	bl	1dc0c <ll_rl_pdu_adv_update>
				  ll_adv.chan_map, ll_adv.filter_policy,
   1d234:	782a      	ldrb	r2, [r5, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1d236:	7a28      	ldrb	r0, [r5, #8]
   1d238:	89a9      	ldrh	r1, [r5, #12]
   1d23a:	9400      	str	r4, [sp, #0]
   1d23c:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   1d240:	f000 0007 	and.w	r0, r0, #7
   1d244:	f002 0207 	and.w	r2, r2, #7
   1d248:	f7fd f9ba 	bl	1a5c0 <radio_adv_enable>
}
   1d24c:	b002      	add	sp, #8
   1d24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   1d252:	2000      	movs	r0, #0
   1d254:	e7fa      	b.n	1d24c <ll_adv_enable+0xec>
   1d256:	bf00      	nop
   1d258:	20001c98 	.word	0x20001c98

0001d25c <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   1d25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d260:	4681      	mov	r9, r0
   1d262:	4688      	mov	r8, r1
   1d264:	4617      	mov	r7, r2
   1d266:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   1d268:	f7fc fc00 	bl	19a6c <ll_scan_is_enabled>
   1d26c:	b988      	cbnz	r0, 1d292 <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   1d26e:	4d0a      	ldr	r5, [pc, #40]	; (1d298 <ll_scan_params_set+0x3c>)
   1d270:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   1d272:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   1d276:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   1d27a:	4622      	mov	r2, r4
   1d27c:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   1d280:	4613      	mov	r3, r2
   1d282:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   1d286:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   1d288:	f362 1387 	bfi	r3, r2, #6, #2
   1d28c:	712b      	strb	r3, [r5, #4]

	return 0;
}
   1d28e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d292:	200c      	movs	r0, #12
   1d294:	e7fb      	b.n	1d28e <ll_scan_params_set+0x32>
   1d296:	bf00      	nop
   1d298:	20001ca8 	.word	0x20001ca8

0001d29c <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   1d29c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d29e:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   1d2a0:	b920      	cbnz	r0, 1d2ac <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   1d2a2:	b005      	add	sp, #20
   1d2a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   1d2a8:	f7fd bc40 	b.w	1ab2c <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   1d2ac:	f7fc fbde 	bl	19a6c <ll_scan_is_enabled>
   1d2b0:	4606      	mov	r6, r0
   1d2b2:	bb40      	cbnz	r0, 1d306 <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   1d2b4:	4c15      	ldr	r4, [pc, #84]	; (1d30c <ll_scan_enable+0x70>)
   1d2b6:	7920      	ldrb	r0, [r4, #4]
   1d2b8:	0980      	lsrs	r0, r0, #6
   1d2ba:	f000 faff 	bl	1d8bc <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   1d2be:	7923      	ldrb	r3, [r4, #4]
   1d2c0:	f013 0501 	ands.w	r5, r3, #1
   1d2c4:	d006      	beq.n	1d2d4 <ll_scan_enable+0x38>
   1d2c6:	f013 0520 	ands.w	r5, r3, #32
   1d2ca:	d003      	beq.n	1d2d4 <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   1d2cc:	4630      	mov	r0, r6
   1d2ce:	f000 fd13 	bl	1dcf8 <ll_rl_rpa_update>
		rpa_gen = 1;
   1d2d2:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1d2d4:	7926      	ldrb	r6, [r4, #4]
   1d2d6:	f006 070f 	and.w	r7, r6, #15
   1d2da:	f3c6 1600 	ubfx	r6, r6, #4, #1
   1d2de:	2100      	movs	r1, #0
   1d2e0:	4630      	mov	r0, r6
   1d2e2:	f7f4 ffeb 	bl	122bc <ll_addr_get>
   1d2e6:	22ff      	movs	r2, #255	; 0xff
   1d2e8:	e9cd 5202 	strd	r5, r2, [sp, #8]
				   ll_scan.filter_policy, rpa_gen,
   1d2ec:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1d2ee:	8823      	ldrh	r3, [r4, #0]
   1d2f0:	0992      	lsrs	r2, r2, #6
   1d2f2:	9201      	str	r2, [sp, #4]
   1d2f4:	8862      	ldrh	r2, [r4, #2]
   1d2f6:	9200      	str	r2, [sp, #0]
   1d2f8:	4631      	mov	r1, r6
   1d2fa:	4602      	mov	r2, r0
   1d2fc:	4638      	mov	r0, r7
   1d2fe:	f7fd fb37 	bl	1a970 <radio_scan_enable>
}
   1d302:	b005      	add	sp, #20
   1d304:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   1d306:	2000      	movs	r0, #0
   1d308:	e7fb      	b.n	1d302 <ll_scan_enable+0x66>
   1d30a:	bf00      	nop
   1d30c:	20001ca8 	.word	0x20001ca8

0001d310 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   1d310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d314:	b085      	sub	sp, #20
   1d316:	461e      	mov	r6, r3
   1d318:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1d31c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1d31e:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   1d322:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   1d326:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
   1d32a:	9303      	str	r3, [sp, #12]
   1d32c:	4680      	mov	r8, r0
   1d32e:	4689      	mov	r9, r1
   1d330:	4615      	mov	r5, r2
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   1d332:	f7fc fb9b 	bl	19a6c <ll_scan_is_enabled>
   1d336:	bba0      	cbnz	r0, 1d3a2 <ll_create_connection+0x92>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   1d338:	9b03      	ldr	r3, [sp, #12]
   1d33a:	9300      	str	r3, [sp, #0]
   1d33c:	4652      	mov	r2, sl
   1d33e:	465b      	mov	r3, fp
   1d340:	4639      	mov	r1, r7
   1d342:	4630      	mov	r0, r6
   1d344:	f7fc fbb8 	bl	19ab8 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   1d348:	bb60      	cbnz	r0, 1d3a4 <ll_create_connection+0x94>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   1d34a:	4628      	mov	r0, r5
   1d34c:	f000 fab6 	bl	1d8bc <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   1d350:	b1d5      	cbz	r5, 1d388 <ll_create_connection+0x78>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1d352:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1d354:	1ea3      	subs	r3, r4, #2
   1d356:	2b01      	cmp	r3, #1
   1d358:	d821      	bhi.n	1d39e <ll_create_connection+0x8e>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   1d35a:	2000      	movs	r0, #0
   1d35c:	f000 fccc 	bl	1dcf8 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   1d360:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   1d364:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   1d366:	2100      	movs	r1, #0
   1d368:	4620      	mov	r0, r4
   1d36a:	f7f4 ffa7 	bl	122bc <ll_addr_get>
   1d36e:	4643      	mov	r3, r8
   1d370:	4602      	mov	r2, r0
   1d372:	4621      	mov	r1, r4
   1d374:	2000      	movs	r0, #0
   1d376:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   1d37a:	e9cd 950e 	strd	r9, r5, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   1d37e:	b005      	add	sp, #20
   1d380:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   1d384:	f7fd baf4 	b.w	1a970 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   1d388:	f000 fc38 	bl	1dbfc <ctrl_rl_enabled>
   1d38c:	2800      	cmp	r0, #0
   1d38e:	d0e0      	beq.n	1d352 <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   1d390:	4639      	mov	r1, r7
   1d392:	462a      	mov	r2, r5
   1d394:	4630      	mov	r0, r6
   1d396:	f000 fab3 	bl	1d900 <ll_rl_find>
   1d39a:	4607      	mov	r7, r0
   1d39c:	e7da      	b.n	1d354 <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   1d39e:	2600      	movs	r6, #0
   1d3a0:	e7e1      	b.n	1d366 <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d3a2:	200c      	movs	r0, #12
}
   1d3a4:	b005      	add	sp, #20
   1d3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0001d3ac <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   1d3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d3b0:	4688      	mov	r8, r1
	int i;

	if (free) {
   1d3b2:	4615      	mov	r5, r2
   1d3b4:	b10a      	cbz	r2, 1d3ba <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   1d3b6:	23ff      	movs	r3, #255	; 0xff
   1d3b8:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1d3ba:	4f14      	ldr	r7, [pc, #80]	; (1d40c <wl_find+0x60>)
{
   1d3bc:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1d3be:	f000 0601 	and.w	r6, r0, #1
   1d3c2:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1d3c6:	07da      	lsls	r2, r3, #31
   1d3c8:	d51c      	bpl.n	1d404 <wl_find+0x58>
   1d3ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1d3ce:	42b3      	cmp	r3, r6
   1d3d0:	d113      	bne.n	1d3fa <wl_find+0x4e>
   1d3d2:	480f      	ldr	r0, [pc, #60]	; (1d410 <wl_find+0x64>)
   1d3d4:	2206      	movs	r2, #6
   1d3d6:	4641      	mov	r1, r8
   1d3d8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1d3dc:	f7e9 fc2d 	bl	6c3a <memcmp>
   1d3e0:	b910      	cbnz	r0, 1d3e8 <wl_find+0x3c>
			return i;
   1d3e2:	b2e0      	uxtb	r0, r4
			*free = i;
		}
	}

	return FILTER_IDX_NONE;
}
   1d3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1d3e8:	b13d      	cbz	r5, 1d3fa <wl_find+0x4e>
   1d3ea:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1d3ee:	07db      	lsls	r3, r3, #31
   1d3f0:	d403      	bmi.n	1d3fa <wl_find+0x4e>
   1d3f2:	782b      	ldrb	r3, [r5, #0]
   1d3f4:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1d3f6:	bf08      	it	eq
   1d3f8:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   1d3fa:	3401      	adds	r4, #1
   1d3fc:	2c08      	cmp	r4, #8
   1d3fe:	d1e0      	bne.n	1d3c2 <wl_find+0x16>
	return FILTER_IDX_NONE;
   1d400:	20ff      	movs	r0, #255	; 0xff
   1d402:	e7ef      	b.n	1d3e4 <wl_find+0x38>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1d404:	2d00      	cmp	r5, #0
   1d406:	d1f4      	bne.n	1d3f2 <wl_find+0x46>
   1d408:	e7f7      	b.n	1d3fa <wl_find+0x4e>
   1d40a:	bf00      	nop
   1d40c:	20001edb 	.word	0x20001edb
   1d410:	20001edd 	.word	0x20001edd

0001d414 <filter_rl_update>:
		}
	}
}

static void filter_rl_update(void)
{
   1d414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	filter->enable_bitmask |= BIT(index);
   1d416:	4d10      	ldr	r5, [pc, #64]	; (1d458 <filter_rl_update+0x44>)
	u8_t i;

	/* Populate filter from rl peers */
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if (rl[i].taken) {
   1d418:	4e10      	ldr	r6, [pc, #64]	; (1d45c <filter_rl_update+0x48>)
{
   1d41a:	2400      	movs	r4, #0
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1d41c:	1caf      	adds	r7, r5, #2
		if (rl[i].taken) {
   1d41e:	2128      	movs	r1, #40	; 0x28
   1d420:	4361      	muls	r1, r4
   1d422:	5c73      	ldrb	r3, [r6, r1]
   1d424:	07da      	lsls	r2, r3, #31
   1d426:	d512      	bpl.n	1d44e <filter_rl_update+0x3a>
	filter->enable_bitmask |= BIT(index);
   1d428:	2201      	movs	r2, #1
   1d42a:	fa02 f004 	lsl.w	r0, r2, r4
   1d42e:	782a      	ldrb	r2, [r5, #0]
   1d430:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1d432:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   1d436:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1d438:	786a      	ldrb	r2, [r5, #1]
   1d43a:	40a3      	lsls	r3, r4
   1d43c:	4313      	orrs	r3, r2
   1d43e:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1d440:	4b07      	ldr	r3, [pc, #28]	; (1d460 <filter_rl_update+0x4c>)
   1d442:	2206      	movs	r2, #6
   1d444:	4419      	add	r1, r3
   1d446:	fb02 7004 	mla	r0, r2, r4, r7
   1d44a:	f7e9 fc1d 	bl	6c88 <memcpy>
   1d44e:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d450:	2c08      	cmp	r4, #8
   1d452:	d1e4      	bne.n	1d41e <filter_rl_update+0xa>
				      rl[i].id_addr.val);
		}
	}
}
   1d454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d456:	bf00      	nop
   1d458:	20001ea9 	.word	0x20001ea9
   1d45c:	20001d68 	.word	0x20001d68
   1d460:	20001d69 	.word	0x20001d69

0001d464 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   1d464:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   1d466:	f7fc faed 	bl	19a44 <ll_adv_is_enabled>
   1d46a:	b928      	cbnz	r0, 1d478 <rl_access_check.constprop.1+0x14>
   1d46c:	f7fc fafe 	bl	19a6c <ll_scan_is_enabled>
   1d470:	fab0 f080 	clz	r0, r0
   1d474:	0940      	lsrs	r0, r0, #5
}
   1d476:	bd08      	pop	{r3, pc}
	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   1d478:	2000      	movs	r0, #0
   1d47a:	e7fc      	b.n	1d476 <rl_access_check.constprop.1+0x12>

0001d47c <filter_wl_update>:
{
   1d47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!wl[i].taken) {
   1d47e:	4d19      	ldr	r5, [pc, #100]	; (1d4e4 <filter_wl_update+0x68>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1d480:	4f19      	ldr	r7, [pc, #100]	; (1d4e8 <filter_wl_update+0x6c>)
{
   1d482:	2400      	movs	r4, #0
   1d484:	462e      	mov	r6, r5
		if (!wl[i].taken) {
   1d486:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1d48a:	07d9      	lsls	r1, r3, #31
   1d48c:	d526      	bpl.n	1d4dc <filter_wl_update+0x60>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1d48e:	783b      	ldrb	r3, [r7, #0]
   1d490:	00e1      	lsls	r1, r4, #3
   1d492:	b15b      	cbz	r3, 1d4ac <filter_wl_update+0x30>
		j = wl[i].rl_idx;
   1d494:	186b      	adds	r3, r5, r1
   1d496:	785a      	ldrb	r2, [r3, #1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1d498:	2a07      	cmp	r2, #7
   1d49a:	d807      	bhi.n	1d4ac <filter_wl_update+0x30>
   1d49c:	2328      	movs	r3, #40	; 0x28
   1d49e:	4353      	muls	r3, r2
   1d4a0:	4a12      	ldr	r2, [pc, #72]	; (1d4ec <filter_wl_update+0x70>)
   1d4a2:	5cd3      	ldrb	r3, [r2, r3]
   1d4a4:	075a      	lsls	r2, r3, #29
   1d4a6:	d501      	bpl.n	1d4ac <filter_wl_update+0x30>
   1d4a8:	06db      	lsls	r3, r3, #27
   1d4aa:	d517      	bpl.n	1d4dc <filter_wl_update+0x60>
	filter->enable_bitmask |= BIT(index);
   1d4ac:	4810      	ldr	r0, [pc, #64]	; (1d4f0 <filter_wl_update+0x74>)
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1d4ae:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1d4b2:	2201      	movs	r2, #1
   1d4b4:	fa02 fc04 	lsl.w	ip, r2, r4
   1d4b8:	7802      	ldrb	r2, [r0, #0]
   1d4ba:	ea42 020c 	orr.w	r2, r2, ip
   1d4be:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1d4c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1d4c4:	7842      	ldrb	r2, [r0, #1]
   1d4c6:	40a3      	lsls	r3, r4
   1d4c8:	4313      	orrs	r3, r2
   1d4ca:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1d4cc:	4b09      	ldr	r3, [pc, #36]	; (1d4f4 <filter_wl_update+0x78>)
   1d4ce:	3002      	adds	r0, #2
   1d4d0:	2206      	movs	r2, #6
   1d4d2:	4419      	add	r1, r3
   1d4d4:	fb02 0004 	mla	r0, r2, r4, r0
   1d4d8:	f7e9 fbd6 	bl	6c88 <memcpy>
   1d4dc:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   1d4de:	2c08      	cmp	r4, #8
   1d4e0:	d1d1      	bne.n	1d486 <filter_wl_update+0xa>
}
   1d4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d4e4:	20001edb 	.word	0x20001edb
   1d4e8:	20001ea8 	.word	0x20001ea8
   1d4ec:	20001d68 	.word	0x20001d68
   1d4f0:	20001f1b 	.word	0x20001f1b
   1d4f4:	20001edd 	.word	0x20001edd

0001d4f8 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1d4f8:	2807      	cmp	r0, #7
   1d4fa:	d80c      	bhi.n	1d516 <ctrl_lrpa_get+0x1e>
   1d4fc:	2328      	movs	r3, #40	; 0x28
   1d4fe:	4358      	muls	r0, r3
   1d500:	4a06      	ldr	r2, [pc, #24]	; (1d51c <ctrl_lrpa_get+0x24>)
   1d502:	5c13      	ldrb	r3, [r2, r0]
   1d504:	1811      	adds	r1, r2, r0
   1d506:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1d50a:	b128      	cbz	r0, 1d518 <ctrl_lrpa_get+0x20>
   1d50c:	f3c3 0040 	ubfx	r0, r3, #1, #1
   1d510:	b110      	cbz	r0, 1d518 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   1d512:	6a48      	ldr	r0, [r1, #36]	; 0x24
   1d514:	4770      	bx	lr
		return NULL;
   1d516:	2000      	movs	r0, #0
}
   1d518:	4770      	bx	lr
   1d51a:	bf00      	nop
   1d51c:	20001d68 	.word	0x20001d68

0001d520 <ctrl_irks_get>:
	*count = peer_irk_count;
   1d520:	4b02      	ldr	r3, [pc, #8]	; (1d52c <ctrl_irks_get+0xc>)
   1d522:	781b      	ldrb	r3, [r3, #0]
   1d524:	7003      	strb	r3, [r0, #0]
}
   1d526:	4802      	ldr	r0, [pc, #8]	; (1d530 <ctrl_irks_get+0x10>)
   1d528:	4770      	bx	lr
   1d52a:	bf00      	nop
   1d52c:	20001cde 	.word	0x20001cde
   1d530:	20001ce7 	.word	0x20001ce7

0001d534 <ctrl_rl_idx>:
{
   1d534:	b508      	push	{r3, lr}
	if (whitelist) {
   1d536:	2800      	cmp	r0, #0
   1d538:	d03b      	beq.n	1d5b2 <ctrl_rl_idx+0x7e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1d53a:	2907      	cmp	r1, #7
   1d53c:	d91a      	bls.n	1d574 <ctrl_rl_idx+0x40>
   1d53e:	4b35      	ldr	r3, [pc, #212]	; (1d614 <ctrl_rl_idx+0xe0>)
   1d540:	681b      	ldr	r3, [r3, #0]
   1d542:	075a      	lsls	r2, r3, #29
   1d544:	d010      	beq.n	1d568 <ctrl_rl_idx+0x34>
   1d546:	2301      	movs	r3, #1
   1d548:	f04f 0200 	mov.w	r2, #0
   1d54c:	f363 0202 	bfi	r2, r3, #0, #3
   1d550:	4931      	ldr	r1, [pc, #196]	; (1d618 <ctrl_rl_idx+0xe4>)
   1d552:	4b32      	ldr	r3, [pc, #200]	; (1d61c <ctrl_rl_idx+0xe8>)
   1d554:	4832      	ldr	r0, [pc, #200]	; (1d620 <ctrl_rl_idx+0xec>)
   1d556:	1a5b      	subs	r3, r3, r1
   1d558:	f36f 02c5 	bfc	r2, #3, #3
   1d55c:	08db      	lsrs	r3, r3, #3
   1d55e:	4931      	ldr	r1, [pc, #196]	; (1d624 <ctrl_rl_idx+0xf0>)
   1d560:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(rl[i].taken);
   1d564:	f7e4 fdc2 	bl	20ec <log_1>
   1d568:	4040      	eors	r0, r0
   1d56a:	f380 8811 	msr	BASEPRI, r0
   1d56e:	f04f 0004 	mov.w	r0, #4
   1d572:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   1d574:	4b2c      	ldr	r3, [pc, #176]	; (1d628 <ctrl_rl_idx+0xf4>)
   1d576:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   1d57a:	f012 0001 	ands.w	r0, r2, #1
   1d57e:	d113      	bne.n	1d5a8 <ctrl_rl_idx+0x74>
   1d580:	4b24      	ldr	r3, [pc, #144]	; (1d614 <ctrl_rl_idx+0xe0>)
   1d582:	681b      	ldr	r3, [r3, #0]
   1d584:	075b      	lsls	r3, r3, #29
   1d586:	d0ef      	beq.n	1d568 <ctrl_rl_idx+0x34>
   1d588:	2301      	movs	r3, #1
   1d58a:	f04f 0200 	mov.w	r2, #0
   1d58e:	f363 0202 	bfi	r2, r3, #0, #3
   1d592:	4921      	ldr	r1, [pc, #132]	; (1d618 <ctrl_rl_idx+0xe4>)
   1d594:	4b21      	ldr	r3, [pc, #132]	; (1d61c <ctrl_rl_idx+0xe8>)
   1d596:	1a5b      	subs	r3, r3, r1
   1d598:	f360 02c5 	bfi	r2, r0, #3, #3
   1d59c:	08db      	lsrs	r3, r3, #3
   1d59e:	f363 128f 	bfi	r2, r3, #6, #10
   1d5a2:	4920      	ldr	r1, [pc, #128]	; (1d624 <ctrl_rl_idx+0xf0>)
   1d5a4:	4821      	ldr	r0, [pc, #132]	; (1d62c <ctrl_rl_idx+0xf8>)
   1d5a6:	e7dd      	b.n	1d564 <ctrl_rl_idx+0x30>
		i = wl[devmatch_id].rl_idx;
   1d5a8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1d5ac:	7849      	ldrb	r1, [r1, #1]
}
   1d5ae:	4608      	mov	r0, r1
   1d5b0:	bd08      	pop	{r3, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1d5b2:	2907      	cmp	r1, #7
   1d5b4:	d913      	bls.n	1d5de <ctrl_rl_idx+0xaa>
   1d5b6:	4b17      	ldr	r3, [pc, #92]	; (1d614 <ctrl_rl_idx+0xe0>)
   1d5b8:	681b      	ldr	r3, [r3, #0]
   1d5ba:	0759      	lsls	r1, r3, #29
   1d5bc:	d0d4      	beq.n	1d568 <ctrl_rl_idx+0x34>
   1d5be:	2301      	movs	r3, #1
   1d5c0:	f04f 0200 	mov.w	r2, #0
   1d5c4:	f363 0202 	bfi	r2, r3, #0, #3
   1d5c8:	4913      	ldr	r1, [pc, #76]	; (1d618 <ctrl_rl_idx+0xe4>)
   1d5ca:	4b14      	ldr	r3, [pc, #80]	; (1d61c <ctrl_rl_idx+0xe8>)
   1d5cc:	1a5b      	subs	r3, r3, r1
   1d5ce:	f360 02c5 	bfi	r2, r0, #3, #3
   1d5d2:	08db      	lsrs	r3, r3, #3
   1d5d4:	f363 128f 	bfi	r2, r3, #6, #10
   1d5d8:	4912      	ldr	r1, [pc, #72]	; (1d624 <ctrl_rl_idx+0xf0>)
   1d5da:	4815      	ldr	r0, [pc, #84]	; (1d630 <ctrl_rl_idx+0xfc>)
   1d5dc:	e7c2      	b.n	1d564 <ctrl_rl_idx+0x30>
		LL_ASSERT(rl[i].taken);
   1d5de:	2328      	movs	r3, #40	; 0x28
   1d5e0:	434b      	muls	r3, r1
   1d5e2:	4a14      	ldr	r2, [pc, #80]	; (1d634 <ctrl_rl_idx+0x100>)
   1d5e4:	5cd3      	ldrb	r3, [r2, r3]
   1d5e6:	f013 0301 	ands.w	r3, r3, #1
   1d5ea:	d1e0      	bne.n	1d5ae <ctrl_rl_idx+0x7a>
   1d5ec:	4a09      	ldr	r2, [pc, #36]	; (1d614 <ctrl_rl_idx+0xe0>)
   1d5ee:	6812      	ldr	r2, [r2, #0]
   1d5f0:	0752      	lsls	r2, r2, #29
   1d5f2:	d0b9      	beq.n	1d568 <ctrl_rl_idx+0x34>
   1d5f4:	2101      	movs	r1, #1
   1d5f6:	f04f 0200 	mov.w	r2, #0
   1d5fa:	f361 0202 	bfi	r2, r1, #0, #3
   1d5fe:	f363 02c5 	bfi	r2, r3, #3, #3
   1d602:	4905      	ldr	r1, [pc, #20]	; (1d618 <ctrl_rl_idx+0xe4>)
   1d604:	4b05      	ldr	r3, [pc, #20]	; (1d61c <ctrl_rl_idx+0xe8>)
   1d606:	480c      	ldr	r0, [pc, #48]	; (1d638 <ctrl_rl_idx+0x104>)
   1d608:	1a5b      	subs	r3, r3, r1
   1d60a:	08db      	lsrs	r3, r3, #3
   1d60c:	f363 128f 	bfi	r2, r3, #6, #10
   1d610:	4904      	ldr	r1, [pc, #16]	; (1d624 <ctrl_rl_idx+0xf0>)
   1d612:	e7a7      	b.n	1d564 <ctrl_rl_idx+0x30>
   1d614:	2000e220 	.word	0x2000e220
   1d618:	0002ef38 	.word	0x0002ef38
   1d61c:	0002ef80 	.word	0x0002ef80
   1d620:	00033cfd 	.word	0x00033cfd
   1d624:	00033c4a 	.word	0x00033c4a
   1d628:	20001edb 	.word	0x20001edb
   1d62c:	00033dbe 	.word	0x00033dbe
   1d630:	00033de9 	.word	0x00033de9
   1d634:	20001d68 	.word	0x20001d68
   1d638:	00033eaa 	.word	0x00033eaa

0001d63c <ctrl_rl_irk_idx>:
{
   1d63c:	b508      	push	{r3, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1d63e:	4b29      	ldr	r3, [pc, #164]	; (1d6e4 <ctrl_rl_irk_idx+0xa8>)
   1d640:	781b      	ldrb	r3, [r3, #0]
   1d642:	4283      	cmp	r3, r0
   1d644:	d81a      	bhi.n	1d67c <ctrl_rl_irk_idx+0x40>
   1d646:	4b28      	ldr	r3, [pc, #160]	; (1d6e8 <ctrl_rl_irk_idx+0xac>)
   1d648:	681b      	ldr	r3, [r3, #0]
   1d64a:	0758      	lsls	r0, r3, #29
   1d64c:	d010      	beq.n	1d670 <ctrl_rl_irk_idx+0x34>
   1d64e:	2301      	movs	r3, #1
   1d650:	f04f 0200 	mov.w	r2, #0
   1d654:	f363 0202 	bfi	r2, r3, #0, #3
   1d658:	4924      	ldr	r1, [pc, #144]	; (1d6ec <ctrl_rl_irk_idx+0xb0>)
   1d65a:	4b25      	ldr	r3, [pc, #148]	; (1d6f0 <ctrl_rl_irk_idx+0xb4>)
   1d65c:	4825      	ldr	r0, [pc, #148]	; (1d6f4 <ctrl_rl_irk_idx+0xb8>)
   1d65e:	1a5b      	subs	r3, r3, r1
   1d660:	f36f 02c5 	bfc	r2, #3, #3
   1d664:	08db      	lsrs	r3, r3, #3
   1d666:	4924      	ldr	r1, [pc, #144]	; (1d6f8 <ctrl_rl_irk_idx+0xbc>)
   1d668:	f363 128f 	bfi	r2, r3, #6, #10
	LL_ASSERT(rl[i].taken);
   1d66c:	f7e4 fd3e 	bl	20ec <log_1>
   1d670:	4040      	eors	r0, r0
   1d672:	f380 8811 	msr	BASEPRI, r0
   1d676:	f04f 0004 	mov.w	r0, #4
   1d67a:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1d67c:	4b1f      	ldr	r3, [pc, #124]	; (1d6fc <ctrl_rl_irk_idx+0xc0>)
   1d67e:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1d680:	2807      	cmp	r0, #7
   1d682:	d913      	bls.n	1d6ac <ctrl_rl_irk_idx+0x70>
   1d684:	4b18      	ldr	r3, [pc, #96]	; (1d6e8 <ctrl_rl_irk_idx+0xac>)
   1d686:	681b      	ldr	r3, [r3, #0]
   1d688:	0759      	lsls	r1, r3, #29
   1d68a:	d0f1      	beq.n	1d670 <ctrl_rl_irk_idx+0x34>
   1d68c:	2301      	movs	r3, #1
   1d68e:	f04f 0200 	mov.w	r2, #0
   1d692:	f363 0202 	bfi	r2, r3, #0, #3
   1d696:	4915      	ldr	r1, [pc, #84]	; (1d6ec <ctrl_rl_irk_idx+0xb0>)
   1d698:	4b15      	ldr	r3, [pc, #84]	; (1d6f0 <ctrl_rl_irk_idx+0xb4>)
   1d69a:	4819      	ldr	r0, [pc, #100]	; (1d700 <ctrl_rl_irk_idx+0xc4>)
   1d69c:	1a5b      	subs	r3, r3, r1
   1d69e:	f36f 02c5 	bfc	r2, #3, #3
   1d6a2:	08db      	lsrs	r3, r3, #3
   1d6a4:	f363 128f 	bfi	r2, r3, #6, #10
   1d6a8:	4913      	ldr	r1, [pc, #76]	; (1d6f8 <ctrl_rl_irk_idx+0xbc>)
   1d6aa:	e7df      	b.n	1d66c <ctrl_rl_irk_idx+0x30>
	LL_ASSERT(rl[i].taken);
   1d6ac:	2328      	movs	r3, #40	; 0x28
   1d6ae:	4343      	muls	r3, r0
   1d6b0:	4a14      	ldr	r2, [pc, #80]	; (1d704 <ctrl_rl_irk_idx+0xc8>)
   1d6b2:	5cd3      	ldrb	r3, [r2, r3]
   1d6b4:	f013 0301 	ands.w	r3, r3, #1
   1d6b8:	d113      	bne.n	1d6e2 <ctrl_rl_irk_idx+0xa6>
   1d6ba:	4a0b      	ldr	r2, [pc, #44]	; (1d6e8 <ctrl_rl_irk_idx+0xac>)
   1d6bc:	6812      	ldr	r2, [r2, #0]
   1d6be:	0752      	lsls	r2, r2, #29
   1d6c0:	d0d6      	beq.n	1d670 <ctrl_rl_irk_idx+0x34>
   1d6c2:	2101      	movs	r1, #1
   1d6c4:	f04f 0200 	mov.w	r2, #0
   1d6c8:	f361 0202 	bfi	r2, r1, #0, #3
   1d6cc:	f363 02c5 	bfi	r2, r3, #3, #3
   1d6d0:	4906      	ldr	r1, [pc, #24]	; (1d6ec <ctrl_rl_irk_idx+0xb0>)
   1d6d2:	4b07      	ldr	r3, [pc, #28]	; (1d6f0 <ctrl_rl_irk_idx+0xb4>)
   1d6d4:	480c      	ldr	r0, [pc, #48]	; (1d708 <ctrl_rl_irk_idx+0xcc>)
   1d6d6:	1a5b      	subs	r3, r3, r1
   1d6d8:	08db      	lsrs	r3, r3, #3
   1d6da:	f363 128f 	bfi	r2, r3, #6, #10
   1d6de:	4906      	ldr	r1, [pc, #24]	; (1d6f8 <ctrl_rl_irk_idx+0xbc>)
   1d6e0:	e7c4      	b.n	1d66c <ctrl_rl_irk_idx+0x30>
}
   1d6e2:	bd08      	pop	{r3, pc}
   1d6e4:	20001cde 	.word	0x20001cde
   1d6e8:	2000e220 	.word	0x2000e220
   1d6ec:	0002ef38 	.word	0x0002ef38
   1d6f0:	0002ef80 	.word	0x0002ef80
   1d6f4:	00033ecb 	.word	0x00033ecb
   1d6f8:	00033c56 	.word	0x00033c56
   1d6fc:	20001cdf 	.word	0x20001cdf
   1d700:	00033efd 	.word	0x00033efd
   1d704:	20001d68 	.word	0x20001d68
   1d708:	00033eaa 	.word	0x00033eaa

0001d70c <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1d70c:	2807      	cmp	r0, #7
{
   1d70e:	b508      	push	{r3, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1d710:	d824      	bhi.n	1d75c <ctrl_irk_whitelisted+0x50>
	LL_ASSERT(rl[rl_idx].taken);
   1d712:	2328      	movs	r3, #40	; 0x28
   1d714:	4358      	muls	r0, r3
   1d716:	4b12      	ldr	r3, [pc, #72]	; (1d760 <ctrl_irk_whitelisted+0x54>)
   1d718:	5c18      	ldrb	r0, [r3, r0]
   1d71a:	f010 0301 	ands.w	r3, r0, #1
   1d71e:	d11a      	bne.n	1d756 <ctrl_irk_whitelisted+0x4a>
   1d720:	4a10      	ldr	r2, [pc, #64]	; (1d764 <ctrl_irk_whitelisted+0x58>)
   1d722:	6812      	ldr	r2, [r2, #0]
   1d724:	0752      	lsls	r2, r2, #29
   1d726:	d010      	beq.n	1d74a <ctrl_irk_whitelisted+0x3e>
   1d728:	2101      	movs	r1, #1
   1d72a:	f04f 0200 	mov.w	r2, #0
   1d72e:	f361 0202 	bfi	r2, r1, #0, #3
   1d732:	f363 02c5 	bfi	r2, r3, #3, #3
   1d736:	490c      	ldr	r1, [pc, #48]	; (1d768 <ctrl_irk_whitelisted+0x5c>)
   1d738:	4b0c      	ldr	r3, [pc, #48]	; (1d76c <ctrl_irk_whitelisted+0x60>)
   1d73a:	480d      	ldr	r0, [pc, #52]	; (1d770 <ctrl_irk_whitelisted+0x64>)
   1d73c:	1a5b      	subs	r3, r3, r1
   1d73e:	08db      	lsrs	r3, r3, #3
   1d740:	f363 128f 	bfi	r2, r3, #6, #10
   1d744:	490b      	ldr	r1, [pc, #44]	; (1d774 <ctrl_irk_whitelisted+0x68>)
   1d746:	f7e4 fcd1 	bl	20ec <log_1>
   1d74a:	4040      	eors	r0, r0
   1d74c:	f380 8811 	msr	BASEPRI, r0
   1d750:	f04f 0004 	mov.w	r0, #4
   1d754:	df02      	svc	2
	return rl[rl_idx].wl;
   1d756:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1d75a:	bd08      	pop	{r3, pc}
		return false;
   1d75c:	2000      	movs	r0, #0
   1d75e:	e7fc      	b.n	1d75a <ctrl_irk_whitelisted+0x4e>
   1d760:	20001d68 	.word	0x20001d68
   1d764:	2000e220 	.word	0x2000e220
   1d768:	0002ef38 	.word	0x0002ef38
   1d76c:	0002ef80 	.word	0x0002ef80
   1d770:	00033cd7 	.word	0x00033cd7
   1d774:	00033c66 	.word	0x00033c66

0001d778 <ctrl_filter_get>:
}
   1d778:	4a03      	ldr	r2, [pc, #12]	; (1d788 <ctrl_filter_get+0x10>)
   1d77a:	4b04      	ldr	r3, [pc, #16]	; (1d78c <ctrl_filter_get+0x14>)
   1d77c:	2800      	cmp	r0, #0
   1d77e:	bf14      	ite	ne
   1d780:	4610      	movne	r0, r2
   1d782:	4618      	moveq	r0, r3
   1d784:	4770      	bx	lr
   1d786:	bf00      	nop
   1d788:	20001f1b 	.word	0x20001f1b
   1d78c:	20001ea9 	.word	0x20001ea9

0001d790 <ll_wl_size_get>:
}
   1d790:	2008      	movs	r0, #8
   1d792:	4770      	bx	lr

0001d794 <ll_wl_clear>:
{
   1d794:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1d796:	f7fc f95d 	bl	19a54 <radio_adv_filter_pol_get>
   1d79a:	4604      	mov	r4, r0
   1d79c:	b110      	cbz	r0, 1d7a4 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d79e:	240c      	movs	r4, #12
}
   1d7a0:	4620      	mov	r0, r4
   1d7a2:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1d7a4:	f7fc f978 	bl	19a98 <radio_scan_filter_pol_get>
   1d7a8:	07c3      	lsls	r3, r0, #31
   1d7aa:	d4f8      	bmi.n	1d79e <ll_wl_clear+0xa>
		wl[i].taken = 0;
   1d7ac:	4b15      	ldr	r3, [pc, #84]	; (1d804 <ll_wl_clear+0x70>)
   1d7ae:	781a      	ldrb	r2, [r3, #0]
   1d7b0:	f364 0200 	bfi	r2, r4, #0, #1
   1d7b4:	701a      	strb	r2, [r3, #0]
   1d7b6:	7a1a      	ldrb	r2, [r3, #8]
   1d7b8:	f364 0200 	bfi	r2, r4, #0, #1
   1d7bc:	721a      	strb	r2, [r3, #8]
   1d7be:	7c1a      	ldrb	r2, [r3, #16]
   1d7c0:	f364 0200 	bfi	r2, r4, #0, #1
   1d7c4:	741a      	strb	r2, [r3, #16]
   1d7c6:	7e1a      	ldrb	r2, [r3, #24]
   1d7c8:	f364 0200 	bfi	r2, r4, #0, #1
   1d7cc:	761a      	strb	r2, [r3, #24]
   1d7ce:	f893 2020 	ldrb.w	r2, [r3, #32]
   1d7d2:	f364 0200 	bfi	r2, r4, #0, #1
   1d7d6:	f883 2020 	strb.w	r2, [r3, #32]
   1d7da:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   1d7de:	f364 0200 	bfi	r2, r4, #0, #1
   1d7e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   1d7e6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   1d7ea:	f364 0200 	bfi	r2, r4, #0, #1
   1d7ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   1d7f2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1d7f6:	f364 0200 	bfi	r2, r4, #0, #1
   1d7fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	wl_anon = 0;
   1d7fe:	4b02      	ldr	r3, [pc, #8]	; (1d808 <ll_wl_clear+0x74>)
   1d800:	701c      	strb	r4, [r3, #0]
	return 0;
   1d802:	e7cd      	b.n	1d7a0 <ll_wl_clear+0xc>
   1d804:	20001edb 	.word	0x20001edb
   1d808:	20003758 	.word	0x20003758

0001d80c <ll_wl_remove>:
{
   1d80c:	b538      	push	{r3, r4, r5, lr}
   1d80e:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1d810:	f7fc f920 	bl	19a54 <radio_adv_filter_pol_get>
   1d814:	4604      	mov	r4, r0
   1d816:	b110      	cbz	r0, 1d81e <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d818:	240c      	movs	r4, #12
}
   1d81a:	4620      	mov	r0, r4
   1d81c:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1d81e:	f7fc f93b 	bl	19a98 <radio_scan_filter_pol_get>
   1d822:	07c3      	lsls	r3, r0, #31
   1d824:	d4f8      	bmi.n	1d818 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   1d826:	7828      	ldrb	r0, [r5, #0]
   1d828:	28ff      	cmp	r0, #255	; 0xff
   1d82a:	d102      	bne.n	1d832 <ll_wl_remove+0x26>
		wl_anon = 0;
   1d82c:	4b0f      	ldr	r3, [pc, #60]	; (1d86c <ll_wl_remove+0x60>)
   1d82e:	701c      	strb	r4, [r3, #0]
		return 0;
   1d830:	e7f3      	b.n	1d81a <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   1d832:	4622      	mov	r2, r4
   1d834:	1c69      	adds	r1, r5, #1
   1d836:	f7ff fdb9 	bl	1d3ac <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1d83a:	2807      	cmp	r0, #7
   1d83c:	d813      	bhi.n	1d866 <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   1d83e:	4b0c      	ldr	r3, [pc, #48]	; (1d870 <ll_wl_remove+0x64>)
   1d840:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   1d844:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1d846:	2d07      	cmp	r5, #7
   1d848:	d806      	bhi.n	1d858 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   1d84a:	2228      	movs	r2, #40	; 0x28
   1d84c:	4909      	ldr	r1, [pc, #36]	; (1d874 <ll_wl_remove+0x68>)
   1d84e:	436a      	muls	r2, r5
   1d850:	5c8d      	ldrb	r5, [r1, r2]
   1d852:	f364 1545 	bfi	r5, r4, #5, #1
   1d856:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   1d858:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   1d85c:	f36f 0200 	bfc	r2, #0, #1
   1d860:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   1d864:	e7d9      	b.n	1d81a <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1d866:	2402      	movs	r4, #2
   1d868:	e7d7      	b.n	1d81a <ll_wl_remove+0xe>
   1d86a:	bf00      	nop
   1d86c:	20003758 	.word	0x20003758
   1d870:	20001edb 	.word	0x20001edb
   1d874:	20001d68 	.word	0x20001d68

0001d878 <ll_filters_adv_update>:
{
   1d878:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1d87a:	4b0d      	ldr	r3, [pc, #52]	; (1d8b0 <ll_filters_adv_update+0x38>)
   1d87c:	2200      	movs	r2, #0
   1d87e:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   1d880:	705a      	strb	r2, [r3, #1]
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   1d882:	b128      	cbz	r0, 1d890 <ll_filters_adv_update+0x18>
   1d884:	f7fc f908 	bl	19a98 <radio_scan_filter_pol_get>
   1d888:	07c3      	lsls	r3, r0, #31
   1d88a:	d401      	bmi.n	1d890 <ll_filters_adv_update+0x18>
		filter_wl_update();
   1d88c:	f7ff fdf6 	bl	1d47c <filter_wl_update>
	filter->enable_bitmask = 0;
   1d890:	4b08      	ldr	r3, [pc, #32]	; (1d8b4 <ll_filters_adv_update+0x3c>)
   1d892:	2200      	movs	r2, #0
   1d894:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   1d896:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_scan_is_enabled()) {
   1d898:	4b07      	ldr	r3, [pc, #28]	; (1d8b8 <ll_filters_adv_update+0x40>)
   1d89a:	781b      	ldrb	r3, [r3, #0]
   1d89c:	b133      	cbz	r3, 1d8ac <ll_filters_adv_update+0x34>
   1d89e:	f7fc f8e5 	bl	19a6c <ll_scan_is_enabled>
   1d8a2:	b918      	cbnz	r0, 1d8ac <ll_filters_adv_update+0x34>
}
   1d8a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   1d8a8:	f7ff bdb4 	b.w	1d414 <filter_rl_update>
}
   1d8ac:	bd08      	pop	{r3, pc}
   1d8ae:	bf00      	nop
   1d8b0:	20001f1b 	.word	0x20001f1b
   1d8b4:	20001ea9 	.word	0x20001ea9
   1d8b8:	20001ea8 	.word	0x20001ea8

0001d8bc <ll_filters_scan_update>:
{
   1d8bc:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1d8be:	4b0d      	ldr	r3, [pc, #52]	; (1d8f4 <ll_filters_scan_update+0x38>)
   1d8c0:	2200      	movs	r2, #0
   1d8c2:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   1d8c4:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   1d8c6:	07c3      	lsls	r3, r0, #31
   1d8c8:	d504      	bpl.n	1d8d4 <ll_filters_scan_update+0x18>
   1d8ca:	f7fc f8c3 	bl	19a54 <radio_adv_filter_pol_get>
   1d8ce:	b908      	cbnz	r0, 1d8d4 <ll_filters_scan_update+0x18>
		filter_wl_update();
   1d8d0:	f7ff fdd4 	bl	1d47c <filter_wl_update>
	filter->enable_bitmask = 0;
   1d8d4:	4b08      	ldr	r3, [pc, #32]	; (1d8f8 <ll_filters_scan_update+0x3c>)
   1d8d6:	2200      	movs	r2, #0
   1d8d8:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   1d8da:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   1d8dc:	4b07      	ldr	r3, [pc, #28]	; (1d8fc <ll_filters_scan_update+0x40>)
   1d8de:	781b      	ldrb	r3, [r3, #0]
   1d8e0:	b133      	cbz	r3, 1d8f0 <ll_filters_scan_update+0x34>
   1d8e2:	f7fc f8af 	bl	19a44 <ll_adv_is_enabled>
   1d8e6:	b918      	cbnz	r0, 1d8f0 <ll_filters_scan_update+0x34>
}
   1d8e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   1d8ec:	f7ff bd92 	b.w	1d414 <filter_rl_update>
}
   1d8f0:	bd08      	pop	{r3, pc}
   1d8f2:	bf00      	nop
   1d8f4:	20001f1b 	.word	0x20001f1b
   1d8f8:	20001ea9 	.word	0x20001ea9
   1d8fc:	20001ea8 	.word	0x20001ea8

0001d900 <ll_rl_find>:
{
   1d900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d904:	468a      	mov	sl, r1
	if (free) {
   1d906:	4614      	mov	r4, r2
   1d908:	b10a      	cbz	r2, 1d90e <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   1d90a:	23ff      	movs	r3, #255	; 0xff
   1d90c:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d90e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1d968 <ll_rl_find+0x68>
{
   1d912:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d914:	f000 0801 	and.w	r8, r0, #1
   1d918:	2628      	movs	r6, #40	; 0x28
   1d91a:	436e      	muls	r6, r5
   1d91c:	b2ef      	uxtb	r7, r5
   1d91e:	f819 3006 	ldrb.w	r3, [r9, r6]
   1d922:	07da      	lsls	r2, r3, #31
   1d924:	d51a      	bpl.n	1d95c <ll_rl_find+0x5c>
   1d926:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1d92a:	4543      	cmp	r3, r8
   1d92c:	d10f      	bne.n	1d94e <ll_rl_find+0x4e>
   1d92e:	480d      	ldr	r0, [pc, #52]	; (1d964 <ll_rl_find+0x64>)
   1d930:	2206      	movs	r2, #6
   1d932:	4651      	mov	r1, sl
   1d934:	4430      	add	r0, r6
   1d936:	f7e9 f980 	bl	6c3a <memcmp>
   1d93a:	b160      	cbz	r0, 1d956 <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1d93c:	b13c      	cbz	r4, 1d94e <ll_rl_find+0x4e>
   1d93e:	f819 3006 	ldrb.w	r3, [r9, r6]
   1d942:	07db      	lsls	r3, r3, #31
   1d944:	d403      	bmi.n	1d94e <ll_rl_find+0x4e>
   1d946:	7823      	ldrb	r3, [r4, #0]
   1d948:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1d94a:	bf08      	it	eq
   1d94c:	7027      	strbeq	r7, [r4, #0]
   1d94e:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d950:	2d08      	cmp	r5, #8
   1d952:	d1e1      	bne.n	1d918 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   1d954:	27ff      	movs	r7, #255	; 0xff
}
   1d956:	4638      	mov	r0, r7
   1d958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1d95c:	2c00      	cmp	r4, #0
   1d95e:	d1f2      	bne.n	1d946 <ll_rl_find+0x46>
   1d960:	e7f5      	b.n	1d94e <ll_rl_find+0x4e>
   1d962:	bf00      	nop
   1d964:	20001d69 	.word	0x20001d69
   1d968:	20001d68 	.word	0x20001d68

0001d96c <ll_wl_add>:
{
   1d96c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d970:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1d972:	f7fc f86f 	bl	19a54 <radio_adv_filter_pol_get>
   1d976:	4605      	mov	r5, r0
   1d978:	b120      	cbz	r0, 1d984 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d97a:	250c      	movs	r5, #12
}
   1d97c:	4628      	mov	r0, r5
   1d97e:	b002      	add	sp, #8
   1d980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1d984:	f7fc f888 	bl	19a98 <radio_scan_filter_pol_get>
   1d988:	07c3      	lsls	r3, r0, #31
   1d98a:	d4f6      	bmi.n	1d97a <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   1d98c:	7838      	ldrb	r0, [r7, #0]
   1d98e:	28ff      	cmp	r0, #255	; 0xff
   1d990:	d103      	bne.n	1d99a <ll_wl_add+0x2e>
		wl_anon = 1;
   1d992:	4b1f      	ldr	r3, [pc, #124]	; (1da10 <ll_wl_add+0xa4>)
   1d994:	2201      	movs	r2, #1
   1d996:	701a      	strb	r2, [r3, #0]
		return 0;
   1d998:	e7f0      	b.n	1d97c <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1d99a:	f107 0801 	add.w	r8, r7, #1
   1d99e:	f10d 0207 	add.w	r2, sp, #7
   1d9a2:	4641      	mov	r1, r8
   1d9a4:	f7ff fd02 	bl	1d3ac <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1d9a8:	2807      	cmp	r0, #7
   1d9aa:	d92d      	bls.n	1da08 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   1d9ac:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1d9b0:	2e07      	cmp	r6, #7
   1d9b2:	d82b      	bhi.n	1da0c <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   1d9b4:	4c17      	ldr	r4, [pc, #92]	; (1da14 <ll_wl_add+0xa8>)
   1d9b6:	783a      	ldrb	r2, [r7, #0]
   1d9b8:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   1d9bc:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   1d9c0:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   1d9c4:	4641      	mov	r1, r8
   1d9c6:	2206      	movs	r2, #6
   1d9c8:	3002      	adds	r0, #2
   1d9ca:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   1d9ce:	f7e9 f95b 	bl	6c88 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1d9d2:	462a      	mov	r2, r5
   1d9d4:	4641      	mov	r1, r8
   1d9d6:	7838      	ldrb	r0, [r7, #0]
   1d9d8:	f7ff ff92 	bl	1d900 <ll_rl_find>
   1d9dc:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   1d9de:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   1d9e0:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   1d9e2:	d80e      	bhi.n	1da02 <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   1d9e4:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   1d9e6:	2328      	movs	r3, #40	; 0x28
   1d9e8:	4a0b      	ldr	r2, [pc, #44]	; (1da18 <ll_wl_add+0xac>)
   1d9ea:	4358      	muls	r0, r3
   1d9ec:	5c13      	ldrb	r3, [r2, r0]
   1d9ee:	f043 0320 	orr.w	r3, r3, #32
   1d9f2:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   1d9f4:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   1d9f8:	f043 0301 	orr.w	r3, r3, #1
   1d9fc:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   1da00:	e7bc      	b.n	1d97c <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1da02:	22ff      	movs	r2, #255	; 0xff
   1da04:	705a      	strb	r2, [r3, #1]
   1da06:	e7f5      	b.n	1d9f4 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   1da08:	2512      	movs	r5, #18
   1da0a:	e7b7      	b.n	1d97c <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1da0c:	2507      	movs	r5, #7
	return wl_add(addr);
   1da0e:	e7b5      	b.n	1d97c <ll_wl_add+0x10>
   1da10:	20003758 	.word	0x20003758
   1da14:	20001edb 	.word	0x20001edb
   1da18:	20001d68 	.word	0x20001d68

0001da1c <ctrl_rl_idx_allowed>:
{
   1da1c:	b508      	push	{r3, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1da1e:	4b17      	ldr	r3, [pc, #92]	; (1da7c <ctrl_rl_idx_allowed+0x60>)
   1da20:	781b      	ldrb	r3, [r3, #0]
   1da22:	b34b      	cbz	r3, 1da78 <ctrl_rl_idx_allowed+0x5c>
   1da24:	2907      	cmp	r1, #7
   1da26:	d827      	bhi.n	1da78 <ctrl_rl_idx_allowed+0x5c>
   1da28:	bb30      	cbnz	r0, 1da78 <ctrl_rl_idx_allowed+0x5c>
	LL_ASSERT(rl[rl_idx].taken);
   1da2a:	2328      	movs	r3, #40	; 0x28
   1da2c:	4359      	muls	r1, r3
   1da2e:	4b14      	ldr	r3, [pc, #80]	; (1da80 <ctrl_rl_idx_allowed+0x64>)
   1da30:	5c58      	ldrb	r0, [r3, r1]
   1da32:	f010 0301 	ands.w	r3, r0, #1
   1da36:	d11a      	bne.n	1da6e <ctrl_rl_idx_allowed+0x52>
   1da38:	4a12      	ldr	r2, [pc, #72]	; (1da84 <ctrl_rl_idx_allowed+0x68>)
   1da3a:	6812      	ldr	r2, [r2, #0]
   1da3c:	0752      	lsls	r2, r2, #29
   1da3e:	d010      	beq.n	1da62 <ctrl_rl_idx_allowed+0x46>
   1da40:	2101      	movs	r1, #1
   1da42:	f04f 0200 	mov.w	r2, #0
   1da46:	f361 0202 	bfi	r2, r1, #0, #3
   1da4a:	f363 02c5 	bfi	r2, r3, #3, #3
   1da4e:	490e      	ldr	r1, [pc, #56]	; (1da88 <ctrl_rl_idx_allowed+0x6c>)
   1da50:	4b0e      	ldr	r3, [pc, #56]	; (1da8c <ctrl_rl_idx_allowed+0x70>)
   1da52:	480f      	ldr	r0, [pc, #60]	; (1da90 <ctrl_rl_idx_allowed+0x74>)
   1da54:	1a5b      	subs	r3, r3, r1
   1da56:	08db      	lsrs	r3, r3, #3
   1da58:	f363 128f 	bfi	r2, r3, #6, #10
   1da5c:	490d      	ldr	r1, [pc, #52]	; (1da94 <ctrl_rl_idx_allowed+0x78>)
   1da5e:	f7e4 fb45 	bl	20ec <log_1>
   1da62:	4040      	eors	r0, r0
   1da64:	f380 8811 	msr	BASEPRI, r0
   1da68:	f04f 0004 	mov.w	r0, #4
   1da6c:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1da6e:	0743      	lsls	r3, r0, #29
   1da70:	d502      	bpl.n	1da78 <ctrl_rl_idx_allowed+0x5c>
   1da72:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   1da76:	bd08      	pop	{r3, pc}
		return true;
   1da78:	2001      	movs	r0, #1
   1da7a:	e7fc      	b.n	1da76 <ctrl_rl_idx_allowed+0x5a>
   1da7c:	20001ea8 	.word	0x20001ea8
   1da80:	20001d68 	.word	0x20001d68
   1da84:	2000e220 	.word	0x2000e220
   1da88:	0002ef38 	.word	0x0002ef38
   1da8c:	0002ef80 	.word	0x0002ef80
   1da90:	00033cd7 	.word	0x00033cd7
   1da94:	00033c7b 	.word	0x00033c7b

0001da98 <ll_rl_id_addr_get>:
{
   1da98:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1da9a:	2b07      	cmp	r3, #7
{
   1da9c:	b570      	push	{r4, r5, r6, lr}
   1da9e:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1daa0:	d91a      	bls.n	1dad8 <ll_rl_id_addr_get+0x40>
   1daa2:	4b21      	ldr	r3, [pc, #132]	; (1db28 <ll_rl_id_addr_get+0x90>)
   1daa4:	681b      	ldr	r3, [r3, #0]
   1daa6:	075a      	lsls	r2, r3, #29
   1daa8:	d010      	beq.n	1dacc <ll_rl_id_addr_get+0x34>
   1daaa:	2301      	movs	r3, #1
   1daac:	f04f 0200 	mov.w	r2, #0
   1dab0:	f363 0202 	bfi	r2, r3, #0, #3
   1dab4:	491d      	ldr	r1, [pc, #116]	; (1db2c <ll_rl_id_addr_get+0x94>)
   1dab6:	4b1e      	ldr	r3, [pc, #120]	; (1db30 <ll_rl_id_addr_get+0x98>)
   1dab8:	481e      	ldr	r0, [pc, #120]	; (1db34 <ll_rl_id_addr_get+0x9c>)
   1daba:	1a5b      	subs	r3, r3, r1
   1dabc:	f36f 02c5 	bfc	r2, #3, #3
   1dac0:	08db      	lsrs	r3, r3, #3
   1dac2:	491d      	ldr	r1, [pc, #116]	; (1db38 <ll_rl_id_addr_get+0xa0>)
   1dac4:	f363 128f 	bfi	r2, r3, #6, #10
	LL_ASSERT(rl[rl_idx].taken);
   1dac8:	f7e4 fb10 	bl	20ec <log_1>
   1dacc:	4040      	eors	r0, r0
   1dace:	f380 8811 	msr	BASEPRI, r0
   1dad2:	f04f 0004 	mov.w	r0, #4
   1dad6:	df02      	svc	2
   1dad8:	2528      	movs	r5, #40	; 0x28
   1dada:	4c18      	ldr	r4, [pc, #96]	; (1db3c <ll_rl_id_addr_get+0xa4>)
   1dadc:	fb05 f203 	mul.w	r2, r5, r3
   1dae0:	5ca2      	ldrb	r2, [r4, r2]
   1dae2:	f012 0601 	ands.w	r6, r2, #1
   1dae6:	d113      	bne.n	1db10 <ll_rl_id_addr_get+0x78>
   1dae8:	4b0f      	ldr	r3, [pc, #60]	; (1db28 <ll_rl_id_addr_get+0x90>)
   1daea:	681b      	ldr	r3, [r3, #0]
   1daec:	075b      	lsls	r3, r3, #29
   1daee:	d0ed      	beq.n	1dacc <ll_rl_id_addr_get+0x34>
   1daf0:	2301      	movs	r3, #1
   1daf2:	f04f 0200 	mov.w	r2, #0
   1daf6:	f363 0202 	bfi	r2, r3, #0, #3
   1dafa:	490c      	ldr	r1, [pc, #48]	; (1db2c <ll_rl_id_addr_get+0x94>)
   1dafc:	4b0c      	ldr	r3, [pc, #48]	; (1db30 <ll_rl_id_addr_get+0x98>)
   1dafe:	4810      	ldr	r0, [pc, #64]	; (1db40 <ll_rl_id_addr_get+0xa8>)
   1db00:	1a5b      	subs	r3, r3, r1
   1db02:	f366 02c5 	bfi	r2, r6, #3, #3
   1db06:	08db      	lsrs	r3, r3, #3
   1db08:	f363 128f 	bfi	r2, r3, #6, #10
   1db0c:	490a      	ldr	r1, [pc, #40]	; (1db38 <ll_rl_id_addr_get+0xa0>)
   1db0e:	e7db      	b.n	1dac8 <ll_rl_id_addr_get+0x30>
	*id_addr_type = rl[rl_idx].id_addr_type;
   1db10:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1db14:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1db16:	fb05 4103 	mla	r1, r5, r3, r4
   1db1a:	2206      	movs	r2, #6
   1db1c:	3101      	adds	r1, #1
}
   1db1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1db22:	f7e9 b8b1 	b.w	6c88 <memcpy>
   1db26:	bf00      	nop
   1db28:	2000e220 	.word	0x2000e220
   1db2c:	0002ef38 	.word	0x0002ef38
   1db30:	0002ef80 	.word	0x0002ef80
   1db34:	00033f18 	.word	0x00033f18
   1db38:	00033c8f 	.word	0x00033c8f
   1db3c:	20001d68 	.word	0x20001d68
   1db40:	00033cd7 	.word	0x00033cd7

0001db44 <ctrl_rl_addr_allowed>:
{
   1db44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1db48:	4b1a      	ldr	r3, [pc, #104]	; (1dbb4 <ctrl_rl_addr_allowed+0x70>)
   1db4a:	781b      	ldrb	r3, [r3, #0]
   1db4c:	b383      	cbz	r3, 1dbb0 <ctrl_rl_addr_allowed+0x6c>
   1db4e:	7813      	ldrb	r3, [r2, #0]
   1db50:	2bff      	cmp	r3, #255	; 0xff
   1db52:	d12d      	bne.n	1dbb0 <ctrl_rl_addr_allowed+0x6c>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1db54:	4e18      	ldr	r6, [pc, #96]	; (1dbb8 <ctrl_rl_addr_allowed+0x74>)
   1db56:	2300      	movs	r3, #0
   1db58:	f04f 0828 	mov.w	r8, #40	; 0x28
   1db5c:	46b4      	mov	ip, r6
   1db5e:	f106 0906 	add.w	r9, r6, #6
   1db62:	fb08 f403 	mul.w	r4, r8, r3
   1db66:	fa5f fe83 	uxtb.w	lr, r3
   1db6a:	5d37      	ldrb	r7, [r6, r4]
   1db6c:	f017 0f01 	tst.w	r7, #1
   1db70:	eb06 0504 	add.w	r5, r6, r4
   1db74:	d019      	beq.n	1dbaa <ctrl_rl_addr_allowed+0x66>
   1db76:	f3c7 1780 	ubfx	r7, r7, #6, #1
   1db7a:	4287      	cmp	r7, r0
   1db7c:	d115      	bne.n	1dbaa <ctrl_rl_addr_allowed+0x66>
   1db7e:	1e4f      	subs	r7, r1, #1
   1db80:	444c      	add	r4, r9
				if (addr[j] != id_addr[j]) {
   1db82:	f815 bf01 	ldrb.w	fp, [r5, #1]!
   1db86:	f817 af01 	ldrb.w	sl, [r7, #1]!
   1db8a:	45d3      	cmp	fp, sl
   1db8c:	d10d      	bne.n	1dbaa <ctrl_rl_addr_allowed+0x66>
			for (j = 0; j < BDADDR_SIZE; j++) {
   1db8e:	42a5      	cmp	r5, r4
   1db90:	d1f7      	bne.n	1db82 <ctrl_rl_addr_allowed+0x3e>
				*rl_idx = i;
   1db92:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   1db96:	2228      	movs	r2, #40	; 0x28
   1db98:	4353      	muls	r3, r2
   1db9a:	f81c 0003 	ldrb.w	r0, [ip, r3]
   1db9e:	0743      	lsls	r3, r0, #29
   1dba0:	d506      	bpl.n	1dbb0 <ctrl_rl_addr_allowed+0x6c>
   1dba2:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   1dba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbaa:	3301      	adds	r3, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1dbac:	2b08      	cmp	r3, #8
   1dbae:	d1d8      	bne.n	1db62 <ctrl_rl_addr_allowed+0x1e>
				return !rl[i].pirk || rl[i].dev;
   1dbb0:	2001      	movs	r0, #1
   1dbb2:	e7f8      	b.n	1dba6 <ctrl_rl_addr_allowed+0x62>
   1dbb4:	20001ea8 	.word	0x20001ea8
   1dbb8:	20001d68 	.word	0x20001d68

0001dbbc <ctrl_rl_addr_resolve>:
{
   1dbbc:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1dbbe:	4c0d      	ldr	r4, [pc, #52]	; (1dbf4 <ctrl_rl_addr_resolve+0x38>)
   1dbc0:	7824      	ldrb	r4, [r4, #0]
   1dbc2:	b1a4      	cbz	r4, 1dbee <ctrl_rl_addr_resolve+0x32>
   1dbc4:	2a07      	cmp	r2, #7
   1dbc6:	d812      	bhi.n	1dbee <ctrl_rl_addr_resolve+0x32>
   1dbc8:	2528      	movs	r5, #40	; 0x28
   1dbca:	4c0b      	ldr	r4, [pc, #44]	; (1dbf8 <ctrl_rl_addr_resolve+0x3c>)
   1dbcc:	fb05 f602 	mul.w	r6, r5, r2
   1dbd0:	5da6      	ldrb	r6, [r4, r6]
   1dbd2:	0736      	lsls	r6, r6, #28
   1dbd4:	d50b      	bpl.n	1dbee <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   1dbd6:	b150      	cbz	r0, 1dbee <ctrl_rl_addr_resolve+0x32>
   1dbd8:	794b      	ldrb	r3, [r1, #5]
   1dbda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1dbde:	2b40      	cmp	r3, #64	; 0x40
   1dbe0:	d105      	bne.n	1dbee <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1dbe2:	fb05 4202 	mla	r2, r5, r2, r4
   1dbe6:	1dd0      	adds	r0, r2, #7
}
   1dbe8:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1dbea:	f7e9 bda2 	b.w	7732 <bt_rpa_irk_matches>
}
   1dbee:	2000      	movs	r0, #0
   1dbf0:	bc70      	pop	{r4, r5, r6}
   1dbf2:	4770      	bx	lr
   1dbf4:	20001ea8 	.word	0x20001ea8
   1dbf8:	20001d68 	.word	0x20001d68

0001dbfc <ctrl_rl_enabled>:
	return rl_enable;
   1dbfc:	4b02      	ldr	r3, [pc, #8]	; (1dc08 <ctrl_rl_enabled+0xc>)
   1dbfe:	7818      	ldrb	r0, [r3, #0]
}
   1dc00:	3000      	adds	r0, #0
   1dc02:	bf18      	it	ne
   1dc04:	2001      	movne	r0, #1
   1dc06:	4770      	bx	lr
   1dc08:	20001ea8 	.word	0x20001ea8

0001dc0c <ll_rl_pdu_adv_update>:
{
   1dc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc0e:	4605      	mov	r5, r0
   1dc10:	460c      	mov	r4, r1
   1dc12:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   1dc14:	f7ff f8f8 	bl	1ce08 <ll_adv_set_get>
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   1dc18:	2d07      	cmp	r5, #7
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   1dc1a:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   1dc1c:	d848      	bhi.n	1dcb0 <ll_rl_pdu_adv_update+0xa4>
   1dc1e:	2328      	movs	r3, #40	; 0x28
   1dc20:	4a2f      	ldr	r2, [pc, #188]	; (1dce0 <ll_rl_pdu_adv_update+0xd4>)
   1dc22:	436b      	muls	r3, r5
   1dc24:	18d1      	adds	r1, r2, r3
   1dc26:	5cd3      	ldrb	r3, [r2, r3]
   1dc28:	0718      	lsls	r0, r3, #28
   1dc2a:	d541      	bpl.n	1dcb0 <ll_rl_pdu_adv_update+0xa4>
		LL_ASSERT(rl[idx].rpas_ready);
   1dc2c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1dc30:	b9d3      	cbnz	r3, 1dc68 <ll_rl_pdu_adv_update+0x5c>
   1dc32:	4a2c      	ldr	r2, [pc, #176]	; (1dce4 <ll_rl_pdu_adv_update+0xd8>)
   1dc34:	6812      	ldr	r2, [r2, #0]
   1dc36:	0752      	lsls	r2, r2, #29
   1dc38:	d010      	beq.n	1dc5c <ll_rl_pdu_adv_update+0x50>
   1dc3a:	2101      	movs	r1, #1
   1dc3c:	f04f 0200 	mov.w	r2, #0
   1dc40:	f361 0202 	bfi	r2, r1, #0, #3
   1dc44:	f363 02c5 	bfi	r2, r3, #3, #3
   1dc48:	4927      	ldr	r1, [pc, #156]	; (1dce8 <ll_rl_pdu_adv_update+0xdc>)
   1dc4a:	4b28      	ldr	r3, [pc, #160]	; (1dcec <ll_rl_pdu_adv_update+0xe0>)
   1dc4c:	4828      	ldr	r0, [pc, #160]	; (1dcf0 <ll_rl_pdu_adv_update+0xe4>)
   1dc4e:	1a5b      	subs	r3, r3, r1
   1dc50:	08db      	lsrs	r3, r3, #3
   1dc52:	f363 128f 	bfi	r2, r3, #6, #10
   1dc56:	4927      	ldr	r1, [pc, #156]	; (1dcf4 <ll_rl_pdu_adv_update+0xe8>)
   1dc58:	f7e4 fa48 	bl	20ec <log_1>
   1dc5c:	4040      	eors	r0, r0
   1dc5e:	f380 8811 	msr	BASEPRI, r0
   1dc62:	f04f 0004 	mov.w	r0, #4
   1dc66:	df02      	svc	2
		pdu->tx_addr = 1;
   1dc68:	7823      	ldrb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   1dc6a:	6a49      	ldr	r1, [r1, #36]	; 0x24
		pdu->tx_addr = 1;
   1dc6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1dc70:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   1dc72:	2206      	movs	r2, #6
   1dc74:	4638      	mov	r0, r7
   1dc76:	f7e9 f807 	bl	6c88 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1dc7a:	7823      	ldrb	r3, [r4, #0]
   1dc7c:	f003 020f 	and.w	r2, r3, #15
   1dc80:	2a01      	cmp	r2, #1
   1dc82:	d12c      	bne.n	1dcde <ll_rl_pdu_adv_update+0xd2>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   1dc84:	2d07      	cmp	r5, #7
   1dc86:	f104 0008 	add.w	r0, r4, #8
   1dc8a:	d81e      	bhi.n	1dcca <ll_rl_pdu_adv_update+0xbe>
   1dc8c:	2228      	movs	r2, #40	; 0x28
   1dc8e:	4914      	ldr	r1, [pc, #80]	; (1dce0 <ll_rl_pdu_adv_update+0xd4>)
   1dc90:	fb02 f705 	mul.w	r7, r2, r5
   1dc94:	5dcf      	ldrb	r7, [r1, r7]
   1dc96:	077f      	lsls	r7, r7, #29
   1dc98:	d517      	bpl.n	1dcca <ll_rl_pdu_adv_update+0xbe>
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   1dc9a:	fb02 1105 	mla	r1, r2, r5, r1
			pdu->rx_addr = 1;
   1dc9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1dca2:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   1dca4:	2206      	movs	r2, #6
   1dca6:	311e      	adds	r1, #30
}
   1dca8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   1dcac:	f7e8 bfec 	b.w	6c88 <memcpy>
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   1dcb0:	7830      	ldrb	r0, [r6, #0]
   1dcb2:	7823      	ldrb	r3, [r4, #0]
   1dcb4:	f3c0 1041 	ubfx	r0, r0, #5, #2
   1dcb8:	f360 1386 	bfi	r3, r0, #6, #1
   1dcbc:	7023      	strb	r3, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   1dcbe:	4639      	mov	r1, r7
   1dcc0:	f000 0001 	and.w	r0, r0, #1
   1dcc4:	f7f4 fafa 	bl	122bc <ll_addr_get>
   1dcc8:	e7d7      	b.n	1dc7a <ll_rl_pdu_adv_update+0x6e>
			pdu->rx_addr = ll_adv->id_addr_type;
   1dcca:	4631      	mov	r1, r6
   1dccc:	7822      	ldrb	r2, [r4, #0]
   1dcce:	f811 3b02 	ldrb.w	r3, [r1], #2
   1dcd2:	09db      	lsrs	r3, r3, #7
   1dcd4:	f363 12c7 	bfi	r2, r3, #7, #1
   1dcd8:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   1dcda:	2206      	movs	r2, #6
   1dcdc:	e7e4      	b.n	1dca8 <ll_rl_pdu_adv_update+0x9c>
}
   1dcde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dce0:	20001d68 	.word	0x20001d68
   1dce4:	2000e220 	.word	0x2000e220
   1dce8:	0002ef38 	.word	0x0002ef38
   1dcec:	0002ef80 	.word	0x0002ef80
   1dcf0:	00033f38 	.word	0x00033f38
   1dcf4:	00033ca1 	.word	0x00033ca1

0001dcf8 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   1dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcfc:	b087      	sub	sp, #28
   1dcfe:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   1dd00:	f010 fe7a 	bl	2e9f8 <_impl_k_uptime_get>
   1dd04:	e9cd 0100 	strd	r0, r1, [sp]
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   1dd08:	f1b9 0f00 	cmp.w	r9, #0
   1dd0c:	d15a      	bne.n	1ddc4 <ll_rl_rpa_update+0xcc>
   1dd0e:	4b75      	ldr	r3, [pc, #468]	; (1dee4 <ll_rl_rpa_update+0x1ec>)
   1dd10:	e9d3 0100 	ldrd	r0, r1, [r3]
   1dd14:	1c4b      	adds	r3, r1, #1
   1dd16:	bf08      	it	eq
   1dd18:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1dd1c:	d052      	beq.n	1ddc4 <ll_rl_rpa_update+0xcc>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1dd1e:	e9dd 3400 	ldrd	r3, r4, [sp]
   1dd22:	1a1b      	subs	r3, r3, r0
   1dd24:	4618      	mov	r0, r3
   1dd26:	4b70      	ldr	r3, [pc, #448]	; (1dee8 <ll_rl_rpa_update+0x1f0>)
   1dd28:	681a      	ldr	r2, [r3, #0]
   1dd2a:	eb64 0401 	sbc.w	r4, r4, r1
   1dd2e:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   1dd30:	4290      	cmp	r0, r2
   1dd32:	eb74 0303 	sbcs.w	r3, r4, r3
   1dd36:	bfac      	ite	ge
   1dd38:	2601      	movge	r6, #1
   1dd3a:	2600      	movlt	r6, #0
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1dd3c:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 1df14 <ll_rl_rpa_update+0x21c>
	bool all = timeout || (rpa_last_ms == -1) ||
   1dd40:	2400      	movs	r4, #0
   1dd42:	4645      	mov	r5, r8
			}

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1dd44:	f108 0b07 	add.w	fp, r8, #7
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1dd48:	2328      	movs	r3, #40	; 0x28
   1dd4a:	4363      	muls	r3, r4
   1dd4c:	f818 3003 	ldrb.w	r3, [r8, r3]
   1dd50:	07df      	lsls	r7, r3, #31
   1dd52:	d559      	bpl.n	1de08 <ll_rl_rpa_update+0x110>
   1dd54:	b90e      	cbnz	r6, 1dd5a <ll_rl_rpa_update+0x62>
   1dd56:	0798      	lsls	r0, r3, #30
   1dd58:	d456      	bmi.n	1de08 <ll_rl_rpa_update+0x110>
			if (rl[i].pirk) {
   1dd5a:	2328      	movs	r3, #40	; 0x28
   1dd5c:	4363      	muls	r3, r4
   1dd5e:	18ea      	adds	r2, r5, r3
   1dd60:	5ce9      	ldrb	r1, [r5, r3]
   1dd62:	0749      	lsls	r1, r1, #29
   1dd64:	d530      	bpl.n	1ddc8 <ll_rl_rpa_update+0xd0>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   1dd66:	7dd1      	ldrb	r1, [r2, #23]
   1dd68:	4a60      	ldr	r2, [pc, #384]	; (1deec <ll_rl_rpa_update+0x1f4>)
   1dd6a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
   1dd6e:	f102 0110 	add.w	r1, r2, #16
   1dd72:	f10d 0007 	add.w	r0, sp, #7
		*pdst++ = *psrc--;
   1dd76:	f811 7d01 	ldrb.w	r7, [r1, #-1]!
   1dd7a:	f800 7f01 	strb.w	r7, [r0, #1]!
	for (; length > 0; length--) {
   1dd7e:	4291      	cmp	r1, r2
   1dd80:	d1f9      	bne.n	1dd76 <ll_rl_rpa_update+0x7e>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1dd82:	495b      	ldr	r1, [pc, #364]	; (1def0 <ll_rl_rpa_update+0x1f8>)
   1dd84:	a802      	add	r0, sp, #8
   1dd86:	4419      	add	r1, r3
   1dd88:	f7e9 fce6 	bl	7758 <bt_rpa_create>
				LL_ASSERT(!err);
   1dd8c:	b1e0      	cbz	r0, 1ddc8 <ll_rl_rpa_update+0xd0>
				LL_ASSERT(!err);
   1dd8e:	4b59      	ldr	r3, [pc, #356]	; (1def4 <ll_rl_rpa_update+0x1fc>)
   1dd90:	681b      	ldr	r3, [r3, #0]
   1dd92:	0759      	lsls	r1, r3, #29
   1dd94:	d010      	beq.n	1ddb8 <ll_rl_rpa_update+0xc0>
   1dd96:	2301      	movs	r3, #1
   1dd98:	f04f 0200 	mov.w	r2, #0
   1dd9c:	f363 0202 	bfi	r2, r3, #0, #3
   1dda0:	4955      	ldr	r1, [pc, #340]	; (1def8 <ll_rl_rpa_update+0x200>)
   1dda2:	4b56      	ldr	r3, [pc, #344]	; (1defc <ll_rl_rpa_update+0x204>)
   1dda4:	4856      	ldr	r0, [pc, #344]	; (1df00 <ll_rl_rpa_update+0x208>)
   1dda6:	1a5b      	subs	r3, r3, r1
   1dda8:	f36f 02c5 	bfc	r2, #3, #3
   1ddac:	08db      	lsrs	r3, r3, #3
   1ddae:	4955      	ldr	r1, [pc, #340]	; (1df04 <ll_rl_rpa_update+0x20c>)
   1ddb0:	f363 128f 	bfi	r2, r3, #6, #10
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   1ddb4:	f7e4 f99a 	bl	20ec <log_1>
   1ddb8:	4040      	eors	r0, r0
   1ddba:	f380 8811 	msr	BASEPRI, r0
   1ddbe:	f04f 0004 	mov.w	r0, #4
   1ddc2:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   1ddc4:	2601      	movs	r6, #1
   1ddc6:	e7b9      	b.n	1dd3c <ll_rl_rpa_update+0x44>
			if (rl[i].lirk) {
   1ddc8:	2028      	movs	r0, #40	; 0x28
   1ddca:	4360      	muls	r0, r4
   1ddcc:	eb05 0a00 	add.w	sl, r5, r0
   1ddd0:	5c2b      	ldrb	r3, [r5, r0]
   1ddd2:	071f      	lsls	r7, r3, #28
   1ddd4:	d512      	bpl.n	1ddfc <ll_rl_rpa_update+0x104>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1ddd6:	a902      	add	r1, sp, #8
   1ddd8:	4458      	add	r0, fp
   1ddda:	f7e9 fcbd 	bl	7758 <bt_rpa_create>
				LL_ASSERT(!err);
   1ddde:	2800      	cmp	r0, #0
   1dde0:	d1d5      	bne.n	1dd8e <ll_rl_rpa_update+0x96>
   1dde2:	4f49      	ldr	r7, [pc, #292]	; (1df08 <ll_rl_rpa_update+0x210>)
   1dde4:	2206      	movs	r2, #6
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   1dde6:	ab02      	add	r3, sp, #8
   1dde8:	fb02 7704 	mla	r7, r2, r4, r7
   1ddec:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
   1ddf0:	4619      	mov	r1, r3
   1ddf2:	4638      	mov	r0, r7
   1ddf4:	f7e8 ff48 	bl	6c88 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   1ddf8:	f8ca 7024 	str.w	r7, [sl, #36]	; 0x24
			}

			rl[i].rpas_ready = 1;
   1ddfc:	2328      	movs	r3, #40	; 0x28
   1ddfe:	4363      	muls	r3, r4
   1de00:	5cea      	ldrb	r2, [r5, r3]
   1de02:	f042 0202 	orr.w	r2, r2, #2
   1de06:	54ea      	strb	r2, [r5, r3]
   1de08:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1de0a:	2c08      	cmp	r4, #8
   1de0c:	d19c      	bne.n	1dd48 <ll_rl_rpa_update+0x50>
		}
	}

	if (all) {
   1de0e:	b126      	cbz	r6, 1de1a <ll_rl_rpa_update+0x122>
		rpa_last_ms = now;
   1de10:	e9dd 1200 	ldrd	r1, r2, [sp]
   1de14:	4b33      	ldr	r3, [pc, #204]	; (1dee4 <ll_rl_rpa_update+0x1ec>)
   1de16:	e9c3 1200 	strd	r1, r2, [r3]
	}

	if (timeout) {
   1de1a:	f1b9 0f00 	cmp.w	r9, #0
   1de1e:	d05d      	beq.n	1dedc <ll_rl_rpa_update+0x1e4>
#if defined(CONFIG_BT_BROADCASTER)
		if (ll_adv_is_enabled()) {
   1de20:	f7fb fe10 	bl	19a44 <ll_adv_is_enabled>
   1de24:	2800      	cmp	r0, #0
   1de26:	d059      	beq.n	1dedc <ll_rl_rpa_update+0x1e4>
	ll_adv = ll_adv_set_get();
   1de28:	f7fe ffee 	bl	1ce08 <ll_adv_set_get>
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1de2c:	7803      	ldrb	r3, [r0, #0]
   1de2e:	065a      	lsls	r2, r3, #25
	ll_adv = ll_adv_set_get();
   1de30:	4680      	mov	r8, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1de32:	d553      	bpl.n	1dedc <ll_rl_rpa_update+0x1e4>
	radio_adv_data = radio_adv_data_get();
   1de34:	f7fb fdfe 	bl	19a34 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1de38:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
	if (radio_adv_data->first == radio_adv_data->last) {
   1de3c:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1de40:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1de44:	ebc4 02c2 	rsb	r2, r4, r2, lsl #3
	if (radio_adv_data->first == radio_adv_data->last) {
   1de48:	42a3      	cmp	r3, r4
	radio_adv_data = radio_adv_data_get();
   1de4a:	4605      	mov	r5, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1de4c:	eb00 0702 	add.w	r7, r0, r2
	if (radio_adv_data->first == radio_adv_data->last) {
   1de50:	d104      	bne.n	1de5c <ll_rl_rpa_update+0x164>
		last = radio_adv_data->last + 1;
   1de52:	3401      	adds	r4, #1
   1de54:	b2e4      	uxtb	r4, r4
			last = 0;
   1de56:	2c02      	cmp	r4, #2
   1de58:	bf08      	it	eq
   1de5a:	2400      	moveq	r4, #0
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1de5c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1de60:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
	pdu->type = prev->type;
   1de64:	5ca9      	ldrb	r1, [r5, r2]
   1de66:	5ce8      	ldrb	r0, [r5, r3]
   1de68:	f361 0003 	bfi	r0, r1, #0, #4
	pdu->rfu = 0;
   1de6c:	f36f 1004 	bfc	r0, #4, #1
   1de70:	54e8      	strb	r0, [r5, r3]
		pdu->chan_sel = prev->chan_sel;
   1de72:	5caa      	ldrb	r2, [r5, r2]
   1de74:	b2c1      	uxtb	r1, r0
   1de76:	f3c2 1240 	ubfx	r2, r2, #5, #1
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   1de7a:	f898 0000 	ldrb.w	r0, [r8]
		pdu->chan_sel = prev->chan_sel;
   1de7e:	f362 1145 	bfi	r1, r2, #5, #1
   1de82:	54e9      	strb	r1, [r5, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   1de84:	2200      	movs	r2, #0
   1de86:	f108 0102 	add.w	r1, r8, #2
   1de8a:	09c0      	lsrs	r0, r0, #7
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1de8c:	18ee      	adds	r6, r5, r3
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   1de8e:	f7ff fd37 	bl	1d900 <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   1de92:	2807      	cmp	r0, #7
   1de94:	d913      	bls.n	1debe <ll_rl_rpa_update+0x1c6>
   1de96:	4b17      	ldr	r3, [pc, #92]	; (1def4 <ll_rl_rpa_update+0x1fc>)
   1de98:	681b      	ldr	r3, [r3, #0]
   1de9a:	075b      	lsls	r3, r3, #29
   1de9c:	d08c      	beq.n	1ddb8 <ll_rl_rpa_update+0xc0>
   1de9e:	2301      	movs	r3, #1
   1dea0:	f04f 0200 	mov.w	r2, #0
   1dea4:	f363 0202 	bfi	r2, r3, #0, #3
   1dea8:	4913      	ldr	r1, [pc, #76]	; (1def8 <ll_rl_rpa_update+0x200>)
   1deaa:	4b14      	ldr	r3, [pc, #80]	; (1defc <ll_rl_rpa_update+0x204>)
   1deac:	4817      	ldr	r0, [pc, #92]	; (1df0c <ll_rl_rpa_update+0x214>)
   1deae:	1a5b      	subs	r3, r3, r1
   1deb0:	f36f 02c5 	bfc	r2, #3, #3
   1deb4:	08db      	lsrs	r3, r3, #3
   1deb6:	f363 128f 	bfi	r2, r3, #6, #10
   1deba:	4915      	ldr	r1, [pc, #84]	; (1df10 <ll_rl_rpa_update+0x218>)
   1debc:	e77a      	b.n	1ddb4 <ll_rl_rpa_update+0xbc>
	ll_rl_pdu_adv_update(idx, pdu);
   1debe:	4631      	mov	r1, r6
   1dec0:	f7ff fea4 	bl	1dc0c <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   1dec4:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   1dec6:	f107 0108 	add.w	r1, r7, #8
   1deca:	3a06      	subs	r2, #6
   1decc:	f106 0008 	add.w	r0, r6, #8
   1ded0:	f7e8 feda 	bl	6c88 <memcpy>
	pdu->len = prev->len;
   1ded4:	787b      	ldrb	r3, [r7, #1]
   1ded6:	7073      	strb	r3, [r6, #1]
	radio_adv_data->last = last;
   1ded8:	f885 404f 	strb.w	r4, [r5, #79]	; 0x4f
			rpa_adv_refresh();
		}
#endif
	}
}
   1dedc:	b007      	add	sp, #28
   1dede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dee2:	bf00      	nop
   1dee4:	20003750 	.word	0x20003750
   1dee8:	2000377c 	.word	0x2000377c
   1deec:	20001ce7 	.word	0x20001ce7
   1def0:	20001d86 	.word	0x20001d86
   1def4:	2000e220 	.word	0x2000e220
   1def8:	0002ef38 	.word	0x0002ef38
   1defc:	0002ef80 	.word	0x0002ef80
   1df00:	00033884 	.word	0x00033884
   1df04:	00033cc6 	.word	0x00033cc6
   1df08:	20001cae 	.word	0x20001cae
   1df0c:	00033f60 	.word	0x00033f60
   1df10:	00033cb6 	.word	0x00033cb6
   1df14:	20001d68 	.word	0x20001d68

0001df18 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   1df18:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   1df1a:	2001      	movs	r0, #1
   1df1c:	f7ff feec 	bl	1dcf8 <ll_rl_rpa_update>
   1df20:	4b03      	ldr	r3, [pc, #12]	; (1df30 <rpa_timeout+0x18>)
   1df22:	4904      	ldr	r1, [pc, #16]	; (1df34 <rpa_timeout+0x1c>)
   1df24:	681a      	ldr	r2, [r3, #0]
   1df26:	4804      	ldr	r0, [pc, #16]	; (1df38 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   1df28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1df2c:	f010 bbee 	b.w	2e70c <k_delayed_work_submit_to_queue>
   1df30:	2000377c 	.word	0x2000377c
   1df34:	2000375c 	.word	0x2000375c
   1df38:	200037b0 	.word	0x200037b0

0001df3c <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   1df3c:	4b07      	ldr	r3, [pc, #28]	; (1df5c <ll_adv_scan_state_cb+0x20>)
   1df3e:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   1df40:	b130      	cbz	r0, 1df50 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   1df42:	b14b      	cbz	r3, 1df58 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   1df44:	4b06      	ldr	r3, [pc, #24]	; (1df60 <ll_adv_scan_state_cb+0x24>)
   1df46:	4907      	ldr	r1, [pc, #28]	; (1df64 <ll_adv_scan_state_cb+0x28>)
   1df48:	681a      	ldr	r2, [r3, #0]
   1df4a:	4807      	ldr	r0, [pc, #28]	; (1df68 <ll_adv_scan_state_cb+0x2c>)
   1df4c:	f010 bbde 	b.w	2e70c <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   1df50:	b113      	cbz	r3, 1df58 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   1df52:	4804      	ldr	r0, [pc, #16]	; (1df64 <ll_adv_scan_state_cb+0x28>)
   1df54:	f010 bb8b 	b.w	2e66e <k_delayed_work_cancel>
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
	}
}
   1df58:	4770      	bx	lr
   1df5a:	bf00      	nop
   1df5c:	20001ea8 	.word	0x20001ea8
   1df60:	2000377c 	.word	0x2000377c
   1df64:	2000375c 	.word	0x2000375c
   1df68:	200037b0 	.word	0x200037b0

0001df6c <ll_rl_size_get>:
   1df6c:	2008      	movs	r0, #8
   1df6e:	4770      	bx	lr

0001df70 <ll_rl_clear>:
{
	return CONFIG_BT_CTLR_RL_SIZE;
}

u32_t ll_rl_clear(void)
{
   1df70:	b508      	push	{r3, lr}
	if (!rl_access_check(false)) {
   1df72:	f7ff fa77 	bl	1d464 <rl_access_check.constprop.1>
   1df76:	b390      	cbz	r0, 1dfde <ll_rl_clear+0x6e>
		rl[i].taken = 0;
   1df78:	4b1a      	ldr	r3, [pc, #104]	; (1dfe4 <ll_rl_clear+0x74>)
   1df7a:	781a      	ldrb	r2, [r3, #0]
   1df7c:	f36f 0200 	bfc	r2, #0, #1
   1df80:	701a      	strb	r2, [r3, #0]
   1df82:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   1df86:	f36f 0200 	bfc	r2, #0, #1
   1df8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   1df8e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   1df92:	f36f 0200 	bfc	r2, #0, #1
   1df96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   1df9a:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   1df9e:	f36f 0200 	bfc	r2, #0, #1
   1dfa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   1dfa6:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
   1dfaa:	f36f 0200 	bfc	r2, #0, #1
   1dfae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
   1dfb2:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   1dfb6:	f36f 0200 	bfc	r2, #0, #1
   1dfba:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   1dfbe:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
   1dfc2:	f36f 0200 	bfc	r2, #0, #1
   1dfc6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
   1dfca:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   1dfce:	f36f 0200 	bfc	r2, #0, #1
   1dfd2:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	peer_irk_count = 0;
   1dfd6:	4b04      	ldr	r3, [pc, #16]	; (1dfe8 <ll_rl_clear+0x78>)
   1dfd8:	2000      	movs	r0, #0
   1dfda:	7018      	strb	r0, [r3, #0]
	}

	rl_clear();

	return 0;
}
   1dfdc:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1dfde:	200c      	movs	r0, #12
   1dfe0:	e7fc      	b.n	1dfdc <ll_rl_clear+0x6c>
   1dfe2:	bf00      	nop
   1dfe4:	20001d68 	.word	0x20001d68
   1dfe8:	20001cde 	.word	0x20001cde

0001dfec <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   1dfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dff0:	b085      	sub	sp, #20
   1dff2:	4607      	mov	r7, r0
   1dff4:	4689      	mov	r9, r1
   1dff6:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   1dff8:	f7ff fa34 	bl	1d464 <rl_access_check.constprop.1>
   1dffc:	2800      	cmp	r0, #0
   1dffe:	f000 8085 	beq.w	1e10c <ll_rl_add+0x120>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   1e002:	f107 0801 	add.w	r8, r7, #1
   1e006:	f10d 020f 	add.w	r2, sp, #15
   1e00a:	4641      	mov	r1, r8
   1e00c:	7838      	ldrb	r0, [r7, #0]
   1e00e:	f7ff fc77 	bl	1d900 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   1e012:	2807      	cmp	r0, #7
   1e014:	d97c      	bls.n	1e110 <ll_rl_add+0x124>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   1e016:	f89d 500f 	ldrb.w	r5, [sp, #15]
   1e01a:	2d07      	cmp	r5, #7
   1e01c:	d87a      	bhi.n	1e114 <ll_rl_add+0x128>
   1e01e:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1e022:	4c3d      	ldr	r4, [pc, #244]	; (1e118 <ll_rl_add+0x12c>)
   1e024:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   1e028:	2628      	movs	r6, #40	; 0x28
   1e02a:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1e02c:	f10b 0001 	add.w	r0, fp, #1
   1e030:	2206      	movs	r2, #6
   1e032:	4641      	mov	r1, r8
   1e034:	4420      	add	r0, r4
   1e036:	f7e8 fe27 	bl	6c88 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1e03a:	7839      	ldrb	r1, [r7, #0]
   1e03c:	5da3      	ldrb	r3, [r4, r6]
   1e03e:	19a2      	adds	r2, r4, r6
   1e040:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1e044:	4648      	mov	r0, r9
   1e046:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   1e048:	9201      	str	r2, [sp, #4]
   1e04a:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1e04c:	f7f3 f999 	bl	11382 <mem_nz>
   1e050:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1e052:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1e054:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1e058:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1e05a:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1e05c:	f7f3 f991 	bl	11382 <mem_nz>
   1e060:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   1e062:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1e064:	f000 0001 	and.w	r0, r0, #1
   1e068:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   1e06c:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1e070:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   1e072:	d012      	beq.n	1e09a <ll_rl_add+0xae>
		/* cross-reference */
		rl[i].pirk_idx = peer_irk_count;
   1e074:	4b29      	ldr	r3, [pc, #164]	; (1e11c <ll_rl_add+0x130>)
   1e076:	7819      	ldrb	r1, [r3, #0]
   1e078:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1e07a:	4a29      	ldr	r2, [pc, #164]	; (1e120 <ll_rl_add+0x134>)
   1e07c:	5455      	strb	r5, [r2, r1]
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   1e07e:	1c4a      	adds	r2, r1, #1
   1e080:	701a      	strb	r2, [r3, #0]
   1e082:	4b28      	ldr	r3, [pc, #160]	; (1e124 <ll_rl_add+0x138>)
   1e084:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   1e088:	f109 0210 	add.w	r2, r9, #16
   1e08c:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   1e08e:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   1e092:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1e096:	454a      	cmp	r2, r9
   1e098:	d1f9      	bne.n	1e08e <ll_rl_add+0xa2>
	}
	if (rl[i].lirk) {
   1e09a:	b158      	cbz	r0, 1e0b4 <ll_rl_add+0xc8>
		memcpy(rl[i].local_irk, lirk, 16);
   1e09c:	f10b 0007 	add.w	r0, fp, #7
   1e0a0:	2210      	movs	r2, #16
   1e0a2:	4651      	mov	r1, sl
   1e0a4:	4420      	add	r0, r4
   1e0a6:	f7e8 fdef 	bl	6c88 <memcpy>
		rl[i].local_rpa = NULL;
   1e0aa:	2328      	movs	r3, #40	; 0x28
   1e0ac:	fb03 4305 	mla	r3, r3, r5, r4
   1e0b0:	2200      	movs	r2, #0
   1e0b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	(void)memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   1e0b4:	2628      	movs	r6, #40	; 0x28
   1e0b6:	436e      	muls	r6, r5
	(void)memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1e0b8:	f10b 0018 	add.w	r0, fp, #24
   1e0bc:	2206      	movs	r2, #6
   1e0be:	2100      	movs	r1, #0
   1e0c0:	4420      	add	r0, r4
   1e0c2:	f7e8 fe0e 	bl	6ce2 <memset>
	rl[i].rpas_ready = 0;
   1e0c6:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   1e0c8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1e0cc:	f36f 1304 	bfc	r3, #4, #1
   1e0d0:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1e0d2:	2200      	movs	r2, #0
   1e0d4:	4641      	mov	r1, r8
   1e0d6:	7838      	ldrb	r0, [r7, #0]
   1e0d8:	f7ff f968 	bl	1d3ac <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   1e0dc:	2807      	cmp	r0, #7
   1e0de:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   1e0e0:	bf9d      	ittte	ls
   1e0e2:	4a11      	ldrls	r2, [pc, #68]	; (1e128 <ll_rl_add+0x13c>)
		rl[i].wl = 1;
   1e0e4:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   1e0e8:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   1e0ec:	f36f 1345 	bfchi	r3, #5, #1
   1e0f0:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   1e0f2:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   1e0f6:	bf98      	it	ls
   1e0f8:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   1e0fa:	435d      	muls	r5, r3

	return 0;
   1e0fc:	2000      	movs	r0, #0
	rl[i].taken = 1;
   1e0fe:	5d63      	ldrb	r3, [r4, r5]
   1e100:	f043 0301 	orr.w	r3, r3, #1
   1e104:	5563      	strb	r3, [r4, r5]
}
   1e106:	b005      	add	sp, #20
   1e108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1e10c:	200c      	movs	r0, #12
   1e10e:	e7fa      	b.n	1e106 <ll_rl_add+0x11a>
		return BT_HCI_ERR_INVALID_PARAM;
   1e110:	2012      	movs	r0, #18
   1e112:	e7f8      	b.n	1e106 <ll_rl_add+0x11a>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1e114:	2007      	movs	r0, #7
   1e116:	e7f6      	b.n	1e106 <ll_rl_add+0x11a>
   1e118:	20001d68 	.word	0x20001d68
   1e11c:	20001cde 	.word	0x20001cde
   1e120:	20001cdf 	.word	0x20001cdf
   1e124:	20001ce7 	.word	0x20001ce7
   1e128:	20001edb 	.word	0x20001edb

0001e12c <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   1e12c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e130:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   1e132:	f7ff f997 	bl	1d464 <rl_access_check.constprop.1>
   1e136:	2800      	cmp	r0, #0
   1e138:	d053      	beq.n	1e1e2 <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1e13a:	f109 0a01 	add.w	sl, r9, #1
   1e13e:	2200      	movs	r2, #0
   1e140:	4651      	mov	r1, sl
   1e142:	f899 0000 	ldrb.w	r0, [r9]
   1e146:	f7ff fbdb 	bl	1d900 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1e14a:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1e14c:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   1e14e:	d84a      	bhi.n	1e1e6 <ll_rl_remove+0xba>
		u8_t j, k;

		if (rl[i].pirk) {
   1e150:	f04f 0b28 	mov.w	fp, #40	; 0x28
   1e154:	4c25      	ldr	r4, [pc, #148]	; (1e1ec <ll_rl_remove+0xc0>)
   1e156:	fb0b f300 	mul.w	r3, fp, r0
   1e15a:	18e2      	adds	r2, r4, r3
   1e15c:	5ce3      	ldrb	r3, [r4, r3]
   1e15e:	075b      	lsls	r3, r3, #29
   1e160:	d524      	bpl.n	1e1ac <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1e162:	4e23      	ldr	r6, [pc, #140]	; (1e1f0 <ll_rl_remove+0xc4>)
   1e164:	7835      	ldrb	r5, [r6, #0]
   1e166:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   1e168:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1e16c:	d01b      	beq.n	1e1a6 <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1e16e:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   1e170:	42af      	cmp	r7, r5
   1e172:	d018      	beq.n	1e1a6 <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   1e174:	481f      	ldr	r0, [pc, #124]	; (1e1f4 <ll_rl_remove+0xc8>)
   1e176:	2210      	movs	r2, #16
   1e178:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   1e17c:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   1e180:	f7e8 fd82 	bl	6c88 <memcpy>
   1e184:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   1e186:	fb0b f103 	mul.w	r1, fp, r3
   1e18a:	1862      	adds	r2, r4, r1
   1e18c:	5c61      	ldrb	r1, [r4, r1]
   1e18e:	f011 0f01 	tst.w	r1, #1
   1e192:	b2d8      	uxtb	r0, r3
   1e194:	d021      	beq.n	1e1da <ll_rl_remove+0xae>
   1e196:	0749      	lsls	r1, r1, #29
   1e198:	d51f      	bpl.n	1e1da <ll_rl_remove+0xae>
   1e19a:	7dd1      	ldrb	r1, [r2, #23]
   1e19c:	42a9      	cmp	r1, r5
   1e19e:	d11c      	bne.n	1e1da <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   1e1a0:	4b15      	ldr	r3, [pc, #84]	; (1e1f8 <ll_rl_remove+0xcc>)
						rl[k].pirk_idx = pi;
   1e1a2:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   1e1a4:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   1e1a6:	7833      	ldrb	r3, [r6, #0]
   1e1a8:	3b01      	subs	r3, #1
   1e1aa:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1e1ac:	2200      	movs	r2, #0
   1e1ae:	4651      	mov	r1, sl
   1e1b0:	f899 0000 	ldrb.w	r0, [r9]
   1e1b4:	f7ff f8fa 	bl	1d3ac <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1e1b8:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   1e1ba:	bf9f      	itttt	ls
   1e1bc:	4b0f      	ldrls	r3, [pc, #60]	; (1e1fc <ll_rl_remove+0xd0>)
   1e1be:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   1e1c2:	23ff      	movls	r3, #255	; 0xff
   1e1c4:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   1e1c6:	2028      	movs	r0, #40	; 0x28
   1e1c8:	fb00 f008 	mul.w	r0, r0, r8
   1e1cc:	5c23      	ldrb	r3, [r4, r0]
   1e1ce:	f36f 0300 	bfc	r3, #0, #1
   1e1d2:	5423      	strb	r3, [r4, r0]
		return 0;
   1e1d4:	2000      	movs	r0, #0
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}
   1e1d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1da:	3301      	adds	r3, #1
				for (k = 0;
   1e1dc:	2b08      	cmp	r3, #8
   1e1de:	d1d2      	bne.n	1e186 <ll_rl_remove+0x5a>
   1e1e0:	e7e1      	b.n	1e1a6 <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1e1e2:	200c      	movs	r0, #12
   1e1e4:	e7f7      	b.n	1e1d6 <ll_rl_remove+0xaa>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1e1e6:	2002      	movs	r0, #2
   1e1e8:	e7f5      	b.n	1e1d6 <ll_rl_remove+0xaa>
   1e1ea:	bf00      	nop
   1e1ec:	20001d68 	.word	0x20001d68
   1e1f0:	20001cde 	.word	0x20001cde
   1e1f4:	20001ce7 	.word	0x20001ce7
   1e1f8:	20001cdf 	.word	0x20001cdf
   1e1fc:	20001edb 	.word	0x20001edb

0001e200 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   1e200:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   1e202:	795c      	ldrb	r4, [r3, #5]
   1e204:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   1e208:	2c40      	cmp	r4, #64	; 0x40
{
   1e20a:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   1e20c:	d117      	bne.n	1e23e <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   1e20e:	b119      	cbz	r1, 1e218 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   1e210:	2200      	movs	r2, #0
   1e212:	f7ff fb75 	bl	1d900 <ll_rl_find>
   1e216:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1e218:	2a07      	cmp	r2, #7
   1e21a:	d810      	bhi.n	1e23e <ll_rl_crpa_set+0x3e>
   1e21c:	2128      	movs	r1, #40	; 0x28
   1e21e:	4c08      	ldr	r4, [pc, #32]	; (1e240 <ll_rl_crpa_set+0x40>)
   1e220:	fb01 f302 	mul.w	r3, r1, r2
   1e224:	5ce3      	ldrb	r3, [r4, r3]
   1e226:	07db      	lsls	r3, r3, #31
   1e228:	d509      	bpl.n	1e23e <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1e22a:	2018      	movs	r0, #24
   1e22c:	fb11 0002 	smlabb	r0, r1, r2, r0
   1e230:	4420      	add	r0, r4
   1e232:	4629      	mov	r1, r5
   1e234:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   1e236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1e23a:	f7e8 bd25 	b.w	6c88 <memcpy>
}
   1e23e:	bd70      	pop	{r4, r5, r6, pc}
   1e240:	20001d68 	.word	0x20001d68

0001e244 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   1e244:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1e246:	2200      	movs	r2, #0
{
   1e248:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1e24a:	1c41      	adds	r1, r0, #1
   1e24c:	7800      	ldrb	r0, [r0, #0]
   1e24e:	f7ff fb57 	bl	1d900 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1e252:	2807      	cmp	r0, #7
   1e254:	d901      	bls.n	1e25a <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1e256:	2002      	movs	r0, #2
}
   1e258:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1e25a:	2428      	movs	r4, #40	; 0x28
   1e25c:	2318      	movs	r3, #24
   1e25e:	fb14 3000 	smlabb	r0, r4, r0, r3
   1e262:	4c07      	ldr	r4, [pc, #28]	; (1e280 <ll_rl_crpa_get+0x3c>)
   1e264:	4404      	add	r4, r0
   1e266:	2106      	movs	r1, #6
   1e268:	4620      	mov	r0, r4
   1e26a:	f7f3 f88a 	bl	11382 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1e26e:	2800      	cmp	r0, #0
   1e270:	d0f1      	beq.n	1e256 <ll_rl_crpa_get+0x12>
   1e272:	2206      	movs	r2, #6
   1e274:	4621      	mov	r1, r4
   1e276:	4628      	mov	r0, r5
   1e278:	f7e8 fd06 	bl	6c88 <memcpy>
			return 0;
   1e27c:	2000      	movs	r0, #0
   1e27e:	e7eb      	b.n	1e258 <ll_rl_crpa_get+0x14>
   1e280:	20001d68 	.word	0x20001d68

0001e284 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   1e284:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1e286:	2200      	movs	r2, #0
{
   1e288:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1e28a:	1c41      	adds	r1, r0, #1
   1e28c:	7800      	ldrb	r0, [r0, #0]
   1e28e:	f7ff fb37 	bl	1d900 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1e292:	2807      	cmp	r0, #7
   1e294:	d80a      	bhi.n	1e2ac <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1e296:	4b06      	ldr	r3, [pc, #24]	; (1e2b0 <ll_rl_lrpa_get+0x2c>)
   1e298:	2228      	movs	r2, #40	; 0x28
   1e29a:	fb02 3000 	mla	r0, r2, r0, r3
   1e29e:	2206      	movs	r2, #6
   1e2a0:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1e2a2:	4620      	mov	r0, r4
   1e2a4:	f7e8 fcf0 	bl	6c88 <memcpy>
		return 0;
   1e2a8:	2000      	movs	r0, #0
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}
   1e2aa:	bd10      	pop	{r4, pc}
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1e2ac:	2002      	movs	r0, #2
   1e2ae:	e7fc      	b.n	1e2aa <ll_rl_lrpa_get+0x26>
   1e2b0:	20001d68 	.word	0x20001d68

0001e2b4 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   1e2b4:	b510      	push	{r4, lr}
   1e2b6:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   1e2b8:	f7ff f8d4 	bl	1d464 <rl_access_check.constprop.1>
   1e2bc:	b140      	cbz	r0, 1e2d0 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   1e2be:	b11c      	cbz	r4, 1e2c8 <ll_rl_enable+0x14>
   1e2c0:	2c01      	cmp	r4, #1
   1e2c2:	d001      	beq.n	1e2c8 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   1e2c4:	2012      	movs	r0, #18
   1e2c6:	e002      	b.n	1e2ce <ll_rl_enable+0x1a>
		rl_enable = 1;
   1e2c8:	4b02      	ldr	r3, [pc, #8]	; (1e2d4 <ll_rl_enable+0x20>)
	}

	return 0;
   1e2ca:	2000      	movs	r0, #0
		rl_enable = 1;
   1e2cc:	701c      	strb	r4, [r3, #0]
}
   1e2ce:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1e2d0:	200c      	movs	r0, #12
   1e2d2:	e7fc      	b.n	1e2ce <ll_rl_enable+0x1a>
   1e2d4:	20001ea8 	.word	0x20001ea8

0001e2d8 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   1e2d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1e2dc:	4358      	muls	r0, r3
   1e2de:	4b01      	ldr	r3, [pc, #4]	; (1e2e4 <ll_rl_timeout_set+0xc>)
   1e2e0:	6018      	str	r0, [r3, #0]
}
   1e2e2:	4770      	bx	lr
   1e2e4:	2000377c 	.word	0x2000377c

0001e2e8 <ll_priv_mode_set>:

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   1e2e8:	b538      	push	{r3, r4, r5, lr}
   1e2ea:	4605      	mov	r5, r0
   1e2ec:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   1e2ee:	f7ff f8b9 	bl	1d464 <rl_access_check.constprop.1>
   1e2f2:	b1d8      	cbz	r0, 1e32c <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1e2f4:	2200      	movs	r2, #0
   1e2f6:	1c69      	adds	r1, r5, #1
   1e2f8:	7828      	ldrb	r0, [r5, #0]
   1e2fa:	f7ff fb01 	bl	1d900 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1e2fe:	2807      	cmp	r0, #7
   1e300:	d816      	bhi.n	1e330 <ll_priv_mode_set+0x48>
		switch (mode) {
   1e302:	b11c      	cbz	r4, 1e30c <ll_priv_mode_set+0x24>
   1e304:	2c01      	cmp	r4, #1
   1e306:	d00a      	beq.n	1e31e <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   1e308:	2012      	movs	r0, #18
   1e30a:	e007      	b.n	1e31c <ll_priv_mode_set+0x34>
			rl[i].dev = 0;
   1e30c:	2328      	movs	r3, #40	; 0x28
   1e30e:	4a09      	ldr	r2, [pc, #36]	; (1e334 <ll_priv_mode_set+0x4c>)
   1e310:	4358      	muls	r0, r3
   1e312:	5c13      	ldrb	r3, [r2, r0]
   1e314:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   1e318:	5413      	strb	r3, [r2, r0]
		}
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
   1e31a:	2000      	movs	r0, #0
}
   1e31c:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   1e31e:	2328      	movs	r3, #40	; 0x28
   1e320:	4a04      	ldr	r2, [pc, #16]	; (1e334 <ll_priv_mode_set+0x4c>)
   1e322:	4358      	muls	r0, r3
   1e324:	5c13      	ldrb	r3, [r2, r0]
   1e326:	f043 0310 	orr.w	r3, r3, #16
   1e32a:	e7f5      	b.n	1e318 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1e32c:	200c      	movs	r0, #12
   1e32e:	e7f5      	b.n	1e31c <ll_priv_mode_set+0x34>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1e330:	2002      	movs	r0, #2
   1e332:	e7f3      	b.n	1e31c <ll_priv_mode_set+0x34>
   1e334:	20001d68 	.word	0x20001d68

0001e338 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   1e338:	4a39      	ldr	r2, [pc, #228]	; (1e420 <ll_filter_reset+0xe8>)
   1e33a:	2300      	movs	r3, #0
{
   1e33c:	b430      	push	{r4, r5}
	wl_anon = 0;
   1e33e:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   1e340:	4a38      	ldr	r2, [pc, #224]	; (1e424 <ll_filter_reset+0xec>)
   1e342:	7811      	ldrb	r1, [r2, #0]
   1e344:	f363 0100 	bfi	r1, r3, #0, #1
   1e348:	7011      	strb	r1, [r2, #0]
   1e34a:	7a11      	ldrb	r1, [r2, #8]
   1e34c:	f363 0100 	bfi	r1, r3, #0, #1
   1e350:	7211      	strb	r1, [r2, #8]
   1e352:	7c11      	ldrb	r1, [r2, #16]
   1e354:	f363 0100 	bfi	r1, r3, #0, #1
   1e358:	7411      	strb	r1, [r2, #16]
   1e35a:	7e11      	ldrb	r1, [r2, #24]
   1e35c:	f363 0100 	bfi	r1, r3, #0, #1
   1e360:	7611      	strb	r1, [r2, #24]
   1e362:	f892 1020 	ldrb.w	r1, [r2, #32]
   1e366:	f363 0100 	bfi	r1, r3, #0, #1
   1e36a:	f882 1020 	strb.w	r1, [r2, #32]
   1e36e:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
   1e372:	f363 0100 	bfi	r1, r3, #0, #1
   1e376:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   1e37a:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   1e37e:	f363 0100 	bfi	r1, r3, #0, #1
   1e382:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
   1e386:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   1e38a:	f363 0100 	bfi	r1, r3, #0, #1
   1e38e:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   1e392:	4a25      	ldr	r2, [pc, #148]	; (1e428 <ll_filter_reset+0xf0>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1e394:	4925      	ldr	r1, [pc, #148]	; (1e42c <ll_filter_reset+0xf4>)
	rl_enable = 0;
   1e396:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1e398:	4a25      	ldr	r2, [pc, #148]	; (1e430 <ll_filter_reset+0xf8>)
   1e39a:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   1e39c:	4a25      	ldr	r2, [pc, #148]	; (1e434 <ll_filter_reset+0xfc>)
   1e39e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1e3a2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1e3a6:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   1e3aa:	4a23      	ldr	r2, [pc, #140]	; (1e438 <ll_filter_reset+0x100>)
   1e3ac:	7811      	ldrb	r1, [r2, #0]
   1e3ae:	f363 0100 	bfi	r1, r3, #0, #1
   1e3b2:	7011      	strb	r1, [r2, #0]
   1e3b4:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
   1e3b8:	f363 0100 	bfi	r1, r3, #0, #1
   1e3bc:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   1e3c0:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
   1e3c4:	f363 0100 	bfi	r1, r3, #0, #1
   1e3c8:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
   1e3cc:	f892 1078 	ldrb.w	r1, [r2, #120]	; 0x78
   1e3d0:	f363 0100 	bfi	r1, r3, #0, #1
   1e3d4:	f882 1078 	strb.w	r1, [r2, #120]	; 0x78
   1e3d8:	f892 10a0 	ldrb.w	r1, [r2, #160]	; 0xa0
   1e3dc:	f363 0100 	bfi	r1, r3, #0, #1
   1e3e0:	f882 10a0 	strb.w	r1, [r2, #160]	; 0xa0
   1e3e4:	f892 10c8 	ldrb.w	r1, [r2, #200]	; 0xc8
   1e3e8:	f363 0100 	bfi	r1, r3, #0, #1
   1e3ec:	f882 10c8 	strb.w	r1, [r2, #200]	; 0xc8
   1e3f0:	f892 10f0 	ldrb.w	r1, [r2, #240]	; 0xf0
   1e3f4:	f363 0100 	bfi	r1, r3, #0, #1
   1e3f8:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0
   1e3fc:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
   1e400:	f363 0100 	bfi	r1, r3, #0, #1
   1e404:	f882 1118 	strb.w	r1, [r2, #280]	; 0x118
	peer_irk_count = 0;
   1e408:	4a0c      	ldr	r2, [pc, #48]	; (1e43c <ll_filter_reset+0x104>)
   1e40a:	7013      	strb	r3, [r2, #0]
	rl_clear();
	if (init) {
   1e40c:	b120      	cbz	r0, 1e418 <ll_filter_reset+0xe0>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1e40e:	490c      	ldr	r1, [pc, #48]	; (1e440 <ll_filter_reset+0x108>)
   1e410:	480c      	ldr	r0, [pc, #48]	; (1e444 <ll_filter_reset+0x10c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   1e412:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1e414:	f010 b922 	b.w	2e65c <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   1e418:	480a      	ldr	r0, [pc, #40]	; (1e444 <ll_filter_reset+0x10c>)
}
   1e41a:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   1e41c:	f010 b927 	b.w	2e66e <k_delayed_work_cancel>
   1e420:	20003758 	.word	0x20003758
   1e424:	20001edb 	.word	0x20001edb
   1e428:	20001ea8 	.word	0x20001ea8
   1e42c:	000dbba0 	.word	0x000dbba0
   1e430:	2000377c 	.word	0x2000377c
   1e434:	20003750 	.word	0x20003750
   1e438:	20001d68 	.word	0x20001d68
   1e43c:	20001cde 	.word	0x20001cde
   1e440:	0001df19 	.word	0x0001df19
   1e444:	2000375c 	.word	0x2000375c

0001e448 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1e448:	4b05      	ldr	r3, [pc, #20]	; (1e460 <cntr_init+0x18>)
   1e44a:	2200      	movs	r2, #0
   1e44c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_rtc->EVTENSET = mask;
   1e450:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   1e454:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_rtc->INTENSET = mask;
   1e458:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk |
			     RTC_EVTENSET_COMPARE1_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk |
			     RTC_INTENSET_COMPARE1_Msk);
}
   1e45c:	4770      	bx	lr
   1e45e:	bf00      	nop
   1e460:	4000b000 	.word	0x4000b000

0001e464 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
   1e464:	4a04      	ldr	r2, [pc, #16]	; (1e478 <cntr_start+0x14>)
   1e466:	7813      	ldrb	r3, [r2, #0]
   1e468:	1c59      	adds	r1, r3, #1
   1e46a:	7011      	strb	r1, [r2, #0]
   1e46c:	2001      	movs	r0, #1
   1e46e:	b913      	cbnz	r3, 1e476 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
   1e470:	4a02      	ldr	r2, [pc, #8]	; (1e47c <cntr_start+0x18>)
   1e472:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1e474:	4618      	mov	r0, r3
}
   1e476:	4770      	bx	lr
   1e478:	20001f4d 	.word	0x20001f4d
   1e47c:	4000b000 	.word	0x4000b000

0001e480 <cntr_stop>:

u32_t cntr_stop(void)
{
   1e480:	b508      	push	{r3, lr}
	LL_ASSERT(_refcount);
   1e482:	4b14      	ldr	r3, [pc, #80]	; (1e4d4 <cntr_stop+0x54>)
   1e484:	7818      	ldrb	r0, [r3, #0]
   1e486:	b9d0      	cbnz	r0, 1e4be <cntr_stop+0x3e>
   1e488:	4b13      	ldr	r3, [pc, #76]	; (1e4d8 <cntr_stop+0x58>)
   1e48a:	681b      	ldr	r3, [r3, #0]
   1e48c:	075b      	lsls	r3, r3, #29
   1e48e:	d010      	beq.n	1e4b2 <cntr_stop+0x32>
   1e490:	2301      	movs	r3, #1
   1e492:	f04f 0200 	mov.w	r2, #0
   1e496:	f363 0202 	bfi	r2, r3, #0, #3
   1e49a:	4910      	ldr	r1, [pc, #64]	; (1e4dc <cntr_stop+0x5c>)
   1e49c:	4b10      	ldr	r3, [pc, #64]	; (1e4e0 <cntr_stop+0x60>)
   1e49e:	1a5b      	subs	r3, r3, r1
   1e4a0:	f360 02c5 	bfi	r2, r0, #3, #3
   1e4a4:	08db      	lsrs	r3, r3, #3
   1e4a6:	f363 128f 	bfi	r2, r3, #6, #10
   1e4aa:	490e      	ldr	r1, [pc, #56]	; (1e4e4 <cntr_stop+0x64>)
   1e4ac:	480e      	ldr	r0, [pc, #56]	; (1e4e8 <cntr_stop+0x68>)
   1e4ae:	f7e3 fe1d 	bl	20ec <log_1>
   1e4b2:	4040      	eors	r0, r0
   1e4b4:	f380 8811 	msr	BASEPRI, r0
   1e4b8:	f04f 0004 	mov.w	r0, #4
   1e4bc:	df02      	svc	2

	if (--_refcount) {
   1e4be:	3801      	subs	r0, #1
   1e4c0:	b2c0      	uxtb	r0, r0
   1e4c2:	7018      	strb	r0, [r3, #0]
   1e4c4:	2301      	movs	r3, #1
   1e4c6:	b910      	cbnz	r0, 1e4ce <cntr_stop+0x4e>
   1e4c8:	4a08      	ldr	r2, [pc, #32]	; (1e4ec <cntr_stop+0x6c>)
   1e4ca:	6013      	str	r3, [r2, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1e4cc:	bd08      	pop	{r3, pc}
		return 1;
   1e4ce:	4618      	mov	r0, r3
   1e4d0:	e7fc      	b.n	1e4cc <cntr_stop+0x4c>
   1e4d2:	bf00      	nop
   1e4d4:	20001f4d 	.word	0x20001f4d
   1e4d8:	2000e208 	.word	0x2000e208
   1e4dc:	0002ef38 	.word	0x0002ef38
   1e4e0:	0002ef50 	.word	0x0002ef50
   1e4e4:	0003402f 	.word	0x0003402f
   1e4e8:	00034039 	.word	0x00034039
   1e4ec:	4000b004 	.word	0x4000b004

0001e4f0 <cntr_cnt_get>:
     return p_rtc->COUNTER;
   1e4f0:	4b01      	ldr	r3, [pc, #4]	; (1e4f8 <cntr_cnt_get+0x8>)
   1e4f2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

u32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1e4f6:	4770      	bx	lr
   1e4f8:	4000b000 	.word	0x4000b000

0001e4fc <cntr_cmp_set>:
    p_rtc->CC[ch] = cc_val;
   1e4fc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1e500:	4b01      	ldr	r3, [pc, #4]	; (1e508 <cntr_cmp_set+0xc>)
   1e502:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1e506:	4770      	bx	lr
   1e508:	4000b000 	.word	0x4000b000

0001e50c <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1e50c:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   1e50e:	4b13      	ldr	r3, [pc, #76]	; (1e55c <do_ecb+0x50>)

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e510:	4c13      	ldr	r4, [pc, #76]	; (1e560 <do_ecb+0x54>)
   1e512:	2501      	movs	r5, #1
{
   1e514:	4684      	mov	ip, r0
   1e516:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
   1e518:	2700      	movs	r7, #0
   1e51a:	46a6      	mov	lr, r4
   1e51c:	461a      	mov	r2, r3
   1e51e:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   1e520:	f8c3 c504 	str.w	ip, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1e524:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1e528:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
   1e52c:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1e52e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   1e532:	b931      	cbnz	r1, 1e542 <do_ecb+0x36>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1e534:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1e538:	b919      	cbnz	r1, 1e542 <do_ecb+0x36>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1e53a:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1e53e:	2900      	cmp	r1, #0
   1e540:	d1f5      	bne.n	1e52e <do_ecb+0x22>
   1e542:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1e546:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   1e54a:	2900      	cmp	r1, #0
   1e54c:	d1e7      	bne.n	1e51e <do_ecb+0x12>
   1e54e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
   1e552:	2800      	cmp	r0, #0
   1e554:	d0e3      	beq.n	1e51e <do_ecb+0x12>

	NRF_ECB->ECBDATAPTR = 0;
   1e556:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   1e55a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e55c:	4000e000 	.word	0x4000e000
   1e560:	4000e004 	.word	0x4000e004

0001e564 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   1e564:	b570      	push	{r4, r5, r6, lr}
   1e566:	b08c      	sub	sp, #48	; 0x30
   1e568:	460e      	mov	r6, r1
   1e56a:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1e56c:	4601      	mov	r1, r0
   1e56e:	2210      	movs	r2, #16
   1e570:	4668      	mov	r0, sp
{
   1e572:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1e574:	f7f2 fef6 	bl	11364 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1e578:	2210      	movs	r2, #16
   1e57a:	eb0d 0002 	add.w	r0, sp, r2
   1e57e:	4631      	mov	r1, r6
   1e580:	f7f2 fef0 	bl	11364 <mem_rcopy>

	do_ecb(&ecb);
   1e584:	4668      	mov	r0, sp
   1e586:	f7ff ffc1 	bl	1e50c <do_ecb>

	if (cipher_text_le) {
   1e58a:	b125      	cbz	r5, 1e596 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1e58c:	2210      	movs	r2, #16
   1e58e:	a908      	add	r1, sp, #32
   1e590:	4628      	mov	r0, r5
   1e592:	f7f2 fee7 	bl	11364 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1e596:	b124      	cbz	r4, 1e5a2 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1e598:	2210      	movs	r2, #16
   1e59a:	a908      	add	r1, sp, #32
   1e59c:	4620      	mov	r0, r4
   1e59e:	f7e8 fb73 	bl	6c88 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1e5a2:	b00c      	add	sp, #48	; 0x30
   1e5a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0001e5a8 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	nrf_ppi_channel_endpoint_setup(HAL_RADIO_ENABLE_ON_TICK_PPI,
   1e5a8:	4b09      	ldr	r3, [pc, #36]	; (1e5d0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   1e5aa:	4a0a      	ldr	r2, [pc, #40]	; (1e5d4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   1e5ac:	2800      	cmp	r0, #0
   1e5ae:	bf14      	ite	ne
   1e5b0:	4618      	movne	r0, r3
   1e5b2:	4610      	moveq	r0, r2

__STATIC_INLINE void nrf_ppi_channel_endpoint_setup(nrf_ppi_channel_t channel,
                                                    uint32_t          eep,
                                                    uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1e5b4:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1e5b8:	f502 42e2 	add.w	r2, r2, #28928	; 0x7100
   1e5bc:	323c      	adds	r2, #60	; 0x3c
   1e5be:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    NRF_PPI->CHENSET = mask;
   1e5c2:	2201      	movs	r2, #1
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1e5c4:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    NRF_PPI->CHENSET = mask;
   1e5c8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
					HAL_RADIO_ENABLE_ON_TICK_PPI_EVT,
				(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
					HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX);
	nrf_ppi_channels_enable(HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE);
}
   1e5cc:	4770      	bx	lr
   1e5ce:	bf00      	nop
   1e5d0:	40001000 	.word	0x40001000
   1e5d4:	40001004 	.word	0x40001004

0001e5d8 <sw_switch.isra.10>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   1e5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1e5da:	4e2d      	ldr	r6, [pc, #180]	; (1e690 <sw_switch.isra.10+0xb8>)
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1e5dc:	4f2d      	ldr	r7, [pc, #180]	; (1e694 <sw_switch.isra.10+0xbc>)
   1e5de:	7835      	ldrb	r5, [r6, #0]
   1e5e0:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 1e6a0 <sw_switch.isra.10+0xc8>
   1e5e4:	f8c7 c560 	str.w	ip, [r7, #1376]	; 0x560
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	nrf_ppi_channel_endpoint_setup(HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
   1e5e8:	b22b      	sxth	r3, r5
   1e5ea:	00dc      	lsls	r4, r3, #3
   1e5ec:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1e5f0:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1e5f4:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1e5f8:	f105 040b 	add.w	r4, r5, #11
   1e5fc:	b2e4      	uxtb	r4, r4
   1e5fe:	00e4      	lsls	r4, r4, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle));

	nrf_ppi_event_endpoint_setup(ppi,
   1e600:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   1e604:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1e608:	3fc0      	subs	r7, #192	; 0xc0
   1e60a:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1e60e:	eb07 0783 	add.w	r7, r7, r3, lsl #2
}

__STATIC_INLINE void nrf_ppi_event_endpoint_setup(nrf_ppi_channel_t channel,
                                                  uint32_t          eep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1e612:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc));

	if (dir) {
   1e616:	2800      	cmp	r0, #0
   1e618:	d034      	beq.n	1e684 <sw_switch.isra.10+0xac>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   1e61a:	f649 4040 	movw	r0, #40000	; 0x9c40
   1e61e:	f24a 075a 	movw	r7, #41050	; 0xa05a
   1e622:	2a02      	cmp	r2, #2
   1e624:	bf0c      	ite	eq
   1e626:	4602      	moveq	r2, r0
   1e628:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   1e62a:	f241 504a 	movw	r0, #5450	; 0x154a
   1e62e:	f242 47b8 	movw	r7, #9400	; 0x24b8
   1e632:	2902      	cmp	r1, #2
   1e634:	bf18      	it	ne
   1e636:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   1e638:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   1e63c:	4401      	add	r1, r0
   1e63e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e642:	fbb1 f1f2 	udiv	r1, r1, r2
}

__STATIC_INLINE void nrf_ppi_task_endpoint_setup(nrf_ppi_channel_t channel,
                                                 uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1e646:	4a14      	ldr	r2, [pc, #80]	; (1e698 <sw_switch.isra.10+0xc0>)
   1e648:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   1e64c:	009b      	lsls	r3, r3, #2
   1e64e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e652:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   1e656:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   1e65a:	428a      	cmp	r2, r1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
				   SW_SWITCH_TIMER->CC[cc] - delay);
   1e65c:	bf8b      	itete	hi
   1e65e:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540

__STATIC_INLINE void nrf_timer_cc_write(NRF_TIMER_Type * p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1e662:	2201      	movls	r2, #1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
   1e664:	1a51      	subhi	r1, r2, r1
   1e666:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
   1e66a:	bf88      	it	hi
   1e66c:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
    NRF_PPI->CHENSET = mask;
   1e670:	4b08      	ldr	r3, [pc, #32]	; (1e694 <sw_switch.isra.10+0xbc>)
   1e672:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1e676:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   1e67a:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   1e67c:	f003 0301 	and.w	r3, r3, #1
   1e680:	7033      	strb	r3, [r6, #0]
}
   1e682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1e684:	4a05      	ldr	r2, [pc, #20]	; (1e69c <sw_switch.isra.10+0xc4>)
   1e686:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1e68a:	212d      	movs	r1, #45	; 0x2d
   1e68c:	e7de      	b.n	1e64c <sw_switch.isra.10+0x74>
   1e68e:	bf00      	nop
   1e690:	20002170 	.word	0x20002170
   1e694:	4001f000 	.word	0x4001f000
   1e698:	40001000 	.word	0x40001000
   1e69c:	40001004 	.word	0x40001004
   1e6a0:	4000110c 	.word	0x4000110c

0001e6a4 <isr_radio>:
	if (sfp_radio_isr) {
   1e6a4:	4b02      	ldr	r3, [pc, #8]	; (1e6b0 <isr_radio+0xc>)
   1e6a6:	681b      	ldr	r3, [r3, #0]
   1e6a8:	b103      	cbz	r3, 1e6ac <isr_radio+0x8>
		sfp_radio_isr();
   1e6aa:	4718      	bx	r3
}
   1e6ac:	4770      	bx	lr
   1e6ae:	bf00      	nop
   1e6b0:	2000216c 	.word	0x2000216c

0001e6b4 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   1e6b4:	4b06      	ldr	r3, [pc, #24]	; (1e6d0 <radio_isr_set+0x1c>)
   1e6b6:	6018      	str	r0, [r3, #0]
    return NRF_RADIO->SHORTS;
}

__STATIC_INLINE void nrf_radio_int_enable(uint32_t radio_int_mask)
{
    NRF_RADIO->INTENSET = radio_int_mask;
   1e6b8:	4b06      	ldr	r3, [pc, #24]	; (1e6d4 <radio_isr_set+0x20>)
   1e6ba:	2210      	movs	r2, #16
   1e6bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e6c0:	4b05      	ldr	r3, [pc, #20]	; (1e6d8 <radio_isr_set+0x24>)
   1e6c2:	2202      	movs	r2, #2
   1e6c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1e6c8:	2001      	movs	r0, #1
   1e6ca:	f7e7 bf89 	b.w	65e0 <_arch_irq_enable>
   1e6ce:	bf00      	nop
   1e6d0:	2000216c 	.word	0x2000216c
   1e6d4:	40001000 	.word	0x40001000
   1e6d8:	e000e100 	.word	0xe000e100

0001e6dc <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1e6dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e6e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1e6e4:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1e6e6:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1e6ea:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1e6ee:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1e6f2:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1e6f6:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1e6fa:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1e6fe:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1e702:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1e706:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1e70a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1e70e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1e712:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1e716:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1e71a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1e71e:	4770      	bx	lr

0001e720 <radio_reset>:
{
   1e720:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1e722:	2001      	movs	r0, #1
   1e724:	f7e7 ff6c 	bl	6600 <_arch_irq_disable>
}
#endif

__STATIC_INLINE void nrf_radio_power_set(bool radio_power)
{
    NRF_RADIO->POWER = (uint32_t) radio_power;
   1e728:	4b08      	ldr	r3, [pc, #32]	; (1e74c <radio_reset+0x2c>)
   1e72a:	2200      	movs	r2, #0
   1e72c:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
   1e730:	2201      	movs	r2, #1
   1e732:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1e736:	4a06      	ldr	r2, [pc, #24]	; (1e750 <radio_reset+0x30>)
   1e738:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   1e73a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1e73e:	f023 0301 	bic.w	r3, r3, #1
   1e742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1e746:	6013      	str	r3, [r2, #0]
}
   1e748:	bd08      	pop	{r3, pc}
   1e74a:	bf00      	nop
   1e74c:	40001000 	.word	0x40001000
   1e750:	40001774 	.word	0x40001774

0001e754 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1e754:	4b06      	ldr	r3, [pc, #24]	; (1e770 <radio_phy_set+0x1c>)
	switch (phy) {
   1e756:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   1e758:	bf0c      	ite	eq
   1e75a:	2204      	moveq	r2, #4
   1e75c:	2203      	movne	r2, #3
   1e75e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1e762:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1e766:	f042 0201 	orr.w	r2, r2, #1
   1e76a:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1e76e:	4770      	bx	lr
   1e770:	40001000 	.word	0x40001000

0001e774 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   1e774:	4b01      	ldr	r3, [pc, #4]	; (1e77c <radio_tx_power_set+0x8>)
   1e776:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1e77a:	4770      	bx	lr
   1e77c:	40001000 	.word	0x40001000

0001e780 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1e780:	4b01      	ldr	r3, [pc, #4]	; (1e788 <radio_freq_chan_set+0x8>)
   1e782:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1e786:	4770      	bx	lr
   1e788:	40001000 	.word	0x40001000

0001e78c <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1e78c:	4b07      	ldr	r3, [pc, #28]	; (1e7ac <radio_whiten_iv_set+0x20>)
   1e78e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1e792:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1e796:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1e79a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1e79e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1e7a2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1e7a6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1e7aa:	4770      	bx	lr
   1e7ac:	40001000 	.word	0x40001000

0001e7b0 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1e7b0:	4a0a      	ldr	r2, [pc, #40]	; (1e7dc <radio_aa_set+0x2c>)
   1e7b2:	2300      	movs	r3, #0
   1e7b4:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1e7b8:	2301      	movs	r3, #1
   1e7ba:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1e7be:	78c3      	ldrb	r3, [r0, #3]
   1e7c0:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1e7c4:	7843      	ldrb	r3, [r0, #1]
   1e7c6:	7881      	ldrb	r1, [r0, #2]
   1e7c8:	041b      	lsls	r3, r3, #16
   1e7ca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1e7ce:	7801      	ldrb	r1, [r0, #0]
   1e7d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1e7d4:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1e7d8:	4770      	bx	lr
   1e7da:	bf00      	nop
   1e7dc:	40001000 	.word	0x40001000

0001e7e0 <radio_pkt_configure>:
	switch (phy) {
   1e7e0:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   1e7e4:	2b02      	cmp	r3, #2
{
   1e7e6:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   1e7e8:	bf0c      	ite	eq
   1e7ea:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   1e7ee:	2400      	movne	r4, #0
	if (dc) {
   1e7f0:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1e7f2:	f1c0 0308 	rsb	r3, r0, #8
   1e7f6:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1e7fa:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1e7fe:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1e802:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1e806:	4a0b      	ldr	r2, [pc, #44]	; (1e834 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   1e808:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1e80c:	bf48      	it	mi
   1e80e:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   1e812:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1e814:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1e818:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1e81c:	4b06      	ldr	r3, [pc, #24]	; (1e838 <radio_pkt_configure+0x58>)
   1e81e:	4003      	ands	r3, r0
   1e820:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1e824:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1e828:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   1e82c:	4319      	orrs	r1, r3
   1e82e:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1e832:	bd10      	pop	{r4, pc}
   1e834:	40001000 	.word	0x40001000
   1e838:	fef80000 	.word	0xfef80000

0001e83c <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
   1e83c:	4b01      	ldr	r3, [pc, #4]	; (1e844 <radio_pkt_rx_set+0x8>)
   1e83e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1e842:	4770      	bx	lr
   1e844:	40001000 	.word	0x40001000

0001e848 <radio_pkt_tx_set>:
   1e848:	4b01      	ldr	r3, [pc, #4]	; (1e850 <radio_pkt_tx_set+0x8>)
   1e84a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1e84e:	4770      	bx	lr
   1e850:	40001000 	.word	0x40001000

0001e854 <radio_tx_ready_delay_get>:
	switch (phy) {
   1e854:	2802      	cmp	r0, #2
}
   1e856:	bf0c      	ite	eq
   1e858:	2028      	moveq	r0, #40	; 0x28
   1e85a:	2029      	movne	r0, #41	; 0x29
   1e85c:	4770      	bx	lr

0001e85e <radio_tx_chain_delay_get>:
}
   1e85e:	2001      	movs	r0, #1
   1e860:	4770      	bx	lr

0001e862 <radio_rx_ready_delay_get>:
}
   1e862:	2029      	movs	r0, #41	; 0x29
   1e864:	4770      	bx	lr

0001e866 <radio_rx_chain_delay_get>:
	switch (phy) {
   1e866:	2802      	cmp	r0, #2
}
   1e868:	bf0c      	ite	eq
   1e86a:	2006      	moveq	r0, #6
   1e86c:	200a      	movne	r0, #10
   1e86e:	4770      	bx	lr

0001e870 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)NRF_RADIO + radio_task)) = 0x1UL;
   1e870:	4b01      	ldr	r3, [pc, #4]	; (1e878 <radio_rx_enable+0x8>)
   1e872:	2201      	movs	r2, #1
   1e874:	601a      	str	r2, [r3, #0]
}
   1e876:	4770      	bx	lr
   1e878:	40001004 	.word	0x40001004

0001e87c <radio_tx_enable>:
   1e87c:	4b01      	ldr	r3, [pc, #4]	; (1e884 <radio_tx_enable+0x8>)
   1e87e:	2201      	movs	r2, #1
   1e880:	601a      	str	r2, [r3, #0]
}
   1e882:	4770      	bx	lr
   1e884:	40001000 	.word	0x40001000

0001e888 <radio_disable>:
    NRF_PPI->CHENCLR = mask;
   1e888:	4a07      	ldr	r2, [pc, #28]	; (1e8a8 <radio_disable+0x20>)
   1e88a:	f44f 6390 	mov.w	r3, #1152	; 0x480
   1e88e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    NRF_PPI->TASKS_CHG[(uint32_t) group].EN = NRF_PPI_TASK_SET;
}

__STATIC_INLINE void nrf_ppi_group_disable(nrf_ppi_channel_group_t group)
{
    NRF_PPI->TASKS_CHG[(uint32_t) group].DIS = NRF_PPI_TASK_SET;
   1e892:	2301      	movs	r3, #1
   1e894:	6053      	str	r3, [r2, #4]
   1e896:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1e898:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   1e89c:	2100      	movs	r1, #0
   1e89e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   1e8a2:	6113      	str	r3, [r2, #16]
}
   1e8a4:	4770      	bx	lr
   1e8a6:	bf00      	nop
   1e8a8:	4001f000 	.word	0x4001f000

0001e8ac <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1e8ac:	4b04      	ldr	r3, [pc, #16]	; (1e8c0 <radio_status_reset+0x14>)
   1e8ae:	2200      	movs	r2, #0
   1e8b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1e8b4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1e8b8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1e8bc:	4770      	bx	lr
   1e8be:	bf00      	nop
   1e8c0:	40001000 	.word	0x40001000

0001e8c4 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1e8c4:	4b03      	ldr	r3, [pc, #12]	; (1e8d4 <radio_is_ready+0x10>)
   1e8c6:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1e8ca:	3000      	adds	r0, #0
   1e8cc:	bf18      	it	ne
   1e8ce:	2001      	movne	r0, #1
   1e8d0:	4770      	bx	lr
   1e8d2:	bf00      	nop
   1e8d4:	40001000 	.word	0x40001000

0001e8d8 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1e8d8:	4b03      	ldr	r3, [pc, #12]	; (1e8e8 <radio_is_done+0x10>)
   1e8da:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1e8de:	3000      	adds	r0, #0
   1e8e0:	bf18      	it	ne
   1e8e2:	2001      	movne	r0, #1
   1e8e4:	4770      	bx	lr
   1e8e6:	bf00      	nop
   1e8e8:	40001000 	.word	0x40001000

0001e8ec <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1e8ec:	4b03      	ldr	r3, [pc, #12]	; (1e8fc <radio_is_idle+0x10>)
   1e8ee:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1e8f2:	fab0 f080 	clz	r0, r0
   1e8f6:	0940      	lsrs	r0, r0, #5
   1e8f8:	4770      	bx	lr
   1e8fa:	bf00      	nop
   1e8fc:	40001000 	.word	0x40001000

0001e900 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1e900:	4b04      	ldr	r3, [pc, #16]	; (1e914 <radio_crc_configure+0x14>)
   1e902:	f240 1203 	movw	r2, #259	; 0x103
   1e906:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1e90a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1e90e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1e912:	4770      	bx	lr
   1e914:	40001000 	.word	0x40001000

0001e918 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1e918:	4b03      	ldr	r3, [pc, #12]	; (1e928 <radio_crc_is_valid+0x10>)
   1e91a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1e91e:	3000      	adds	r0, #0
   1e920:	bf18      	it	ne
   1e922:	2001      	movne	r0, #1
   1e924:	4770      	bx	lr
   1e926:	bf00      	nop
   1e928:	40001000 	.word	0x40001000

0001e92c <radio_pkt_empty_get>:
}
   1e92c:	4800      	ldr	r0, [pc, #0]	; (1e930 <radio_pkt_empty_get+0x4>)
   1e92e:	4770      	bx	lr
   1e930:	20002060 	.word	0x20002060

0001e934 <radio_pkt_scratch_get>:
}
   1e934:	4800      	ldr	r0, [pc, #0]	; (1e938 <radio_pkt_scratch_get+0x4>)
   1e936:	4770      	bx	lr
   1e938:	20002064 	.word	0x20002064

0001e93c <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1e93c:	4b04      	ldr	r3, [pc, #16]	; (1e950 <radio_switch_complete_and_rx+0x14>)
   1e93e:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1e940:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1e942:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1e946:	4602      	mov	r2, r0
   1e948:	4608      	mov	r0, r1
   1e94a:	f7ff be45 	b.w	1e5d8 <sw_switch.isra.10>
   1e94e:	bf00      	nop
   1e950:	40001000 	.word	0x40001000

0001e954 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1e954:	4b03      	ldr	r3, [pc, #12]	; (1e964 <radio_switch_complete_and_tx+0x10>)
   1e956:	2103      	movs	r1, #3
   1e958:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1e95c:	4601      	mov	r1, r0
   1e95e:	2001      	movs	r0, #1
   1e960:	f7ff be3a 	b.w	1e5d8 <sw_switch.isra.10>
   1e964:	40001000 	.word	0x40001000

0001e968 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1e968:	4b05      	ldr	r3, [pc, #20]	; (1e980 <radio_switch_complete_and_disable+0x18>)
   1e96a:	2203      	movs	r2, #3
   1e96c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_PPI->CHENCLR = mask;
   1e970:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1e974:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1e978:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_ppi_channels_disable(HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
				 HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_DISABLE);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1e97c:	4770      	bx	lr
   1e97e:	bf00      	nop
   1e980:	40001000 	.word	0x40001000

0001e984 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1e984:	4a03      	ldr	r2, [pc, #12]	; (1e994 <radio_rssi_measure+0x10>)
   1e986:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1e98a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1e98e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1e992:	4770      	bx	lr
   1e994:	40001000 	.word	0x40001000

0001e998 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1e998:	4b01      	ldr	r3, [pc, #4]	; (1e9a0 <radio_rssi_get+0x8>)
   1e99a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1e99e:	4770      	bx	lr
   1e9a0:	40001000 	.word	0x40001000

0001e9a4 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1e9a4:	4b02      	ldr	r3, [pc, #8]	; (1e9b0 <radio_rssi_status_reset+0xc>)
   1e9a6:	2200      	movs	r2, #0
   1e9a8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1e9ac:	4770      	bx	lr
   1e9ae:	bf00      	nop
   1e9b0:	40001000 	.word	0x40001000

0001e9b4 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1e9b4:	4b03      	ldr	r3, [pc, #12]	; (1e9c4 <radio_rssi_is_ready+0x10>)
   1e9b6:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1e9ba:	3000      	adds	r0, #0
   1e9bc:	bf18      	it	ne
   1e9be:	2001      	movne	r0, #1
   1e9c0:	4770      	bx	lr
   1e9c2:	bf00      	nop
   1e9c4:	40001000 	.word	0x40001000

0001e9c8 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   1e9c8:	b530      	push	{r4, r5, lr}
   1e9ca:	2400      	movs	r4, #0
   1e9cc:	00a3      	lsls	r3, r4, #2
   1e9ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e9d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   1e9d6:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   1e9d8:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   1e9dc:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   1e9de:	8895      	ldrh	r5, [r2, #4]
   1e9e0:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   1e9e4:	2c08      	cmp	r4, #8
		bdaddr += 6;
   1e9e6:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   1e9ea:	d1ef      	bne.n	1e9cc <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   1e9ec:	4b02      	ldr	r3, [pc, #8]	; (1e9f8 <radio_filter_configure+0x30>)
   1e9ee:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1e9f2:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1e9f6:	bd30      	pop	{r4, r5, pc}
   1e9f8:	40001000 	.word	0x40001000

0001e9fc <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1e9fc:	4a03      	ldr	r2, [pc, #12]	; (1ea0c <radio_filter_disable+0x10>)
   1e9fe:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1ea02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1ea06:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1ea0a:	4770      	bx	lr
   1ea0c:	40001000 	.word	0x40001000

0001ea10 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1ea10:	4b02      	ldr	r3, [pc, #8]	; (1ea1c <radio_filter_status_reset+0xc>)
   1ea12:	2200      	movs	r2, #0
   1ea14:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1ea18:	4770      	bx	lr
   1ea1a:	bf00      	nop
   1ea1c:	40001000 	.word	0x40001000

0001ea20 <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1ea20:	4b03      	ldr	r3, [pc, #12]	; (1ea30 <radio_filter_has_match+0x10>)
   1ea22:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1ea26:	3000      	adds	r0, #0
   1ea28:	bf18      	it	ne
   1ea2a:	2001      	movne	r0, #1
   1ea2c:	4770      	bx	lr
   1ea2e:	bf00      	nop
   1ea30:	40001000 	.word	0x40001000

0001ea34 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1ea34:	4b01      	ldr	r3, [pc, #4]	; (1ea3c <radio_filter_match_get+0x8>)
   1ea36:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1ea3a:	4770      	bx	lr
   1ea3c:	40001000 	.word	0x40001000

0001ea40 <radio_bc_configure>:
    NRF_RADIO->BCC = radio_bcc;
   1ea40:	4b04      	ldr	r3, [pc, #16]	; (1ea54 <radio_bc_configure+0x14>)
   1ea42:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560

void radio_bc_configure(u32_t n)
{
	nrf_radio_bcc_set(n);
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1ea46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1ea4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1ea4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   1ea52:	4770      	bx	lr
   1ea54:	40001000 	.word	0x40001000

0001ea58 <radio_tmr_status_reset>:
}
__STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_rtc, uint32_t mask)
{
    p_rtc->EVTENCLR = mask;
   1ea58:	4b05      	ldr	r3, [pc, #20]	; (1ea70 <radio_tmr_status_reset+0x18>)
   1ea5a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1ea5e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   1ea62:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1ea66:	227f      	movs	r2, #127	; 0x7f
   1ea68:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_DISABLE |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			HAL_TRIGGER_CRYPT_PPI_DISABLE);
}
   1ea6c:	4770      	bx	lr
   1ea6e:	bf00      	nop
   1ea70:	4000b000 	.word	0x4000b000

0001ea74 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_write(SW_SWITCH_TIMER,
   1ea74:	4b03      	ldr	r3, [pc, #12]	; (1ea84 <radio_tmr_tifs_set+0x10>)
   1ea76:	4a04      	ldr	r2, [pc, #16]	; (1ea88 <radio_tmr_tifs_set+0x14>)
   1ea78:	781b      	ldrb	r3, [r3, #0]
   1ea7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1ea7e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			   SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1ea82:	4770      	bx	lr
   1ea84:	20002170 	.word	0x20002170
   1ea88:	40009000 	.word	0x40009000

0001ea8c <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   1ea8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1ea8e:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1ea92:	4c31      	ldr	r4, [pc, #196]	; (1eb58 <radio_tmr_start+0xcc>)
    p_rtc->CC[ch] = cc_val;
   1ea94:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 1eb70 <radio_tmr_start+0xe4>
   1ea98:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1ea9c:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   1ea9e:	bf88      	it	hi
   1eaa0:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eaa4:	4b2d      	ldr	r3, [pc, #180]	; (1eb5c <radio_tmr_start+0xd0>)
	}
	remainder /= 1000000UL;
   1eaa6:	4c2e      	ldr	r4, [pc, #184]	; (1eb60 <radio_tmr_start+0xd4>)
		remainder += 30517578UL;
   1eaa8:	bf82      	ittt	hi
   1eaaa:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1eaae:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   1eab2:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   1eab6:	2501      	movs	r5, #1
	remainder /= 1000000UL;
   1eab8:	fbb2 f4f4 	udiv	r4, r2, r4

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1eabc:	2600      	movs	r6, #0
	EVENT_TIMER->PRESCALER = 4;
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1eabe:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   1eac0:	2704      	movs	r7, #4
   1eac2:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
   1eac4:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
   1eac8:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1eacc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[cc_channel] = cc_value;
   1ead0:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
   1ead4:	f8cc 1548 	str.w	r1, [ip, #1352]	; 0x548
    p_rtc->EVTENSET = mask;
   1ead8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1eadc:	f8cc 1344 	str.w	r1, [ip, #836]	; 0x344
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1eae0:	4920      	ldr	r1, [pc, #128]	; (1eb64 <radio_tmr_start+0xd8>)
	EVENT_TIMER->MODE = 0;
   1eae2:	3b0c      	subs	r3, #12
   1eae4:	f50c 7ca4 	add.w	ip, ip, #328	; 0x148
   1eae8:	f8c1 c518 	str.w	ip, [r1, #1304]	; 0x518
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1eaec:	f8c1 351c 	str.w	r3, [r1, #1308]	; 0x51c
    NRF_PPI->CHENSET = mask;
   1eaf0:	f8c1 2504 	str.w	r2, [r1, #1284]	; 0x504
	nrf_ppi_channel_endpoint_setup(HAL_EVENT_TIMER_START_PPI,
				       HAL_EVENT_TIMER_START_EVT,
				       HAL_EVENT_TIMER_START_TASK);
	nrf_ppi_channels_enable(HAL_EVENT_TIMER_START_PPI_ENABLE);

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1eaf4:	f7ff fd58 	bl	1e5a8 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1eaf8:	4b1b      	ldr	r3, [pc, #108]	; (1eb68 <radio_tmr_start+0xdc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eafa:	4a1c      	ldr	r2, [pc, #112]	; (1eb6c <radio_tmr_start+0xe0>)
   1eafc:	6015      	str	r5, [r2, #0]
   1eafe:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1eb02:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1eb06:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   1eb0a:	601d      	str	r5, [r3, #0]
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1eb0c:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1eb10:	3b74      	subs	r3, #116	; 0x74
   1eb12:	f8c1 3548 	str.w	r3, [r1, #1352]	; 0x548
   1eb16:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1eb1a:	3334      	adds	r3, #52	; 0x34
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1eb1c:	f8c1 254c 	str.w	r2, [r1, #1356]	; 0x54c
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1eb20:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1eb24:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1eb28:	33c4      	adds	r3, #196	; 0xc4
   1eb2a:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1eb2e:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   1eb32:	3bc0      	subs	r3, #192	; 0xc0
   1eb34:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1eb38:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1eb3c:	33c8      	adds	r3, #200	; 0xc8
   1eb3e:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
			SW_SWITCH_TIMER_EVTS_COMP(1)),
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1));

#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1eb42:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1eb46:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1eb4a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   1eb4e:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_1_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_1_INCLUDE;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1eb52:	4620      	mov	r0, r4
   1eb54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1eb56:	bf00      	nop
   1eb58:	7ff0bdbf 	.word	0x7ff0bdbf
   1eb5c:	4000800c 	.word	0x4000800c
   1eb60:	000f4240 	.word	0x000f4240
   1eb64:	4001f000 	.word	0x4001f000
   1eb68:	40009000 	.word	0x40009000
   1eb6c:	4000900c 	.word	0x4000900c
   1eb70:	4000b000 	.word	0x4000b000

0001eb74 <radio_tmr_stop>:
   1eb74:	4a04      	ldr	r2, [pc, #16]	; (1eb88 <radio_tmr_stop+0x14>)
   1eb76:	2301      	movs	r3, #1
   1eb78:	6013      	str	r3, [r2, #0]
   1eb7a:	60d3      	str	r3, [r2, #12]
   1eb7c:	320c      	adds	r2, #12
   1eb7e:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
   1eb82:	6013      	str	r3, [r2, #0]
   1eb84:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1eb86:	4770      	bx	lr
   1eb88:	40008004 	.word	0x40008004

0001eb8c <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1eb8c:	4b0c      	ldr	r3, [pc, #48]	; (1ebc0 <radio_tmr_hcto_configure+0x34>)
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1eb8e:	4a0d      	ldr	r2, [pc, #52]	; (1ebc4 <radio_tmr_hcto_configure+0x38>)
   1eb90:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
   1eb94:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1eb98:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1eb9c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1eba0:	3240      	adds	r2, #64	; 0x40
   1eba2:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1eba6:	f502 7280 	add.w	r2, r2, #256	; 0x100
   1ebaa:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1ebae:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   1ebb2:	3a34      	subs	r2, #52	; 0x34
   1ebb4:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    NRF_PPI->CHENSET = mask;
   1ebb8:	2218      	movs	r2, #24
   1ebba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
				       HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT,
				       HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK);

	nrf_ppi_channels_enable(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE |
				HAL_RADIO_DISABLE_ON_HCTO_PPI_ENABLE);
}
   1ebbe:	4770      	bx	lr
   1ebc0:	40008000 	.word	0x40008000
   1ebc4:	40001104 	.word	0x40001104

0001ebc8 <radio_tmr_aa_capture>:
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1ebc8:	4b0b      	ldr	r3, [pc, #44]	; (1ebf8 <radio_tmr_aa_capture+0x30>)
   1ebca:	4a0c      	ldr	r2, [pc, #48]	; (1ebfc <radio_tmr_aa_capture+0x34>)
   1ebcc:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1ebd0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1ebd4:	3240      	adds	r2, #64	; 0x40
   1ebd6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1ebda:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   1ebde:	3a3c      	subs	r2, #60	; 0x3c
   1ebe0:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1ebe4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1ebe8:	3240      	adds	r2, #64	; 0x40
   1ebea:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    NRF_PPI->CHENSET = mask;
   1ebee:	220c      	movs	r2, #12
   1ebf0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
				       HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK);

	nrf_ppi_channels_enable(
		HAL_RADIO_READY_TIME_CAPTURE_PPI_ENABLE |
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE);
}
   1ebf4:	4770      	bx	lr
   1ebf6:	bf00      	nop
   1ebf8:	4001f000 	.word	0x4001f000
   1ebfc:	40001100 	.word	0x40001100

0001ec00 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1ec00:	4b01      	ldr	r3, [pc, #4]	; (1ec08 <radio_tmr_aa_get+0x8>)
   1ec02:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1ec06:	4770      	bx	lr
   1ec08:	40008000 	.word	0x40008000

0001ec0c <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   1ec0c:	4b01      	ldr	r3, [pc, #4]	; (1ec14 <radio_tmr_aa_save+0x8>)
   1ec0e:	6018      	str	r0, [r3, #0]
}
   1ec10:	4770      	bx	lr
   1ec12:	bf00      	nop
   1ec14:	20002168 	.word	0x20002168

0001ec18 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   1ec18:	4b01      	ldr	r3, [pc, #4]	; (1ec20 <radio_tmr_aa_restore+0x8>)
   1ec1a:	6818      	ldr	r0, [r3, #0]
   1ec1c:	4770      	bx	lr
   1ec1e:	bf00      	nop
   1ec20:	20002168 	.word	0x20002168

0001ec24 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1ec24:	4b01      	ldr	r3, [pc, #4]	; (1ec2c <radio_tmr_ready_get+0x8>)
   1ec26:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1ec2a:	4770      	bx	lr
   1ec2c:	40008000 	.word	0x40008000

0001ec30 <radio_tmr_end_capture>:
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1ec30:	4b06      	ldr	r3, [pc, #24]	; (1ec4c <radio_tmr_end_capture+0x1c>)
   1ec32:	4a07      	ldr	r2, [pc, #28]	; (1ec50 <radio_tmr_end_capture+0x20>)
   1ec34:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1ec38:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1ec3c:	323c      	adds	r2, #60	; 0x3c
   1ec3e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    NRF_PPI->CHENSET = mask;
   1ec42:	2220      	movs	r2, #32
   1ec44:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_ppi_channel_endpoint_setup(HAL_RADIO_END_TIME_CAPTURE_PPI,
				       HAL_RADIO_END_TIME_CAPTURE_PPI_EVT,
				       HAL_RADIO_END_TIME_CAPTURE_PPI_TASK);

	nrf_ppi_channels_enable(HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE);
}
   1ec48:	4770      	bx	lr
   1ec4a:	bf00      	nop
   1ec4c:	4001f000 	.word	0x4001f000
   1ec50:	4000110c 	.word	0x4000110c

0001ec54 <radio_tmr_end_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1ec54:	4b01      	ldr	r3, [pc, #4]	; (1ec5c <radio_tmr_end_get+0x8>)
   1ec56:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1ec5a:	4770      	bx	lr
   1ec5c:	40008000 	.word	0x40008000

0001ec60 <radio_tmr_tifs_base_get>:
   1ec60:	4b01      	ldr	r3, [pc, #4]	; (1ec68 <radio_tmr_tifs_base_get+0x8>)
   1ec62:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1ec66:	4770      	bx	lr
   1ec68:	40008000 	.word	0x40008000

0001ec6c <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ec6c:	4b16      	ldr	r3, [pc, #88]	; (1ecc8 <radio_ccm_rx_pkt_set+0x5c>)
{
   1ec6e:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ec70:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1ec72:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ec74:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1ec78:	4e14      	ldr	r6, [pc, #80]	; (1eccc <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1ec7a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1ec7e:	4d14      	ldr	r5, [pc, #80]	; (1ecd0 <radio_ccm_rx_pkt_set+0x64>)
   1ec80:	2902      	cmp	r1, #2
   1ec82:	bf0c      	ite	eq
   1ec84:	4629      	moveq	r1, r5
   1ec86:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   1ec88:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1ec8c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   1ec90:	4810      	ldr	r0, [pc, #64]	; (1ecd4 <radio_ccm_rx_pkt_set+0x68>)
   1ec92:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   1ec96:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1ec9a:	4a0f      	ldr	r2, [pc, #60]	; (1ecd8 <radio_ccm_rx_pkt_set+0x6c>)
   1ec9c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1eca0:	490e      	ldr	r1, [pc, #56]	; (1ecdc <radio_ccm_rx_pkt_set+0x70>)
   1eca2:	4a0f      	ldr	r2, [pc, #60]	; (1ece0 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   1eca4:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1eca8:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1ecac:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1ecb0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1ecb4:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   1ecb8:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
    NRF_PPI->CHENSET = mask;
   1ecbc:	2140      	movs	r1, #64	; 0x40
   1ecbe:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                          nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ecc2:	2201      	movs	r2, #1
   1ecc4:	601a      	str	r2, [r3, #0]
	nrf_ppi_channels_enable(HAL_TRIGGER_CRYPT_PPI_ENABLE);

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1ecc6:	bd70      	pop	{r4, r5, r6, pc}
   1ecc8:	4000f000 	.word	0x4000f000
   1eccc:	01000001 	.word	0x01000001
   1ecd0:	01010001 	.word	0x01010001
   1ecd4:	20002064 	.word	0x20002064
   1ecd8:	20001f54 	.word	0x20001f54
   1ecdc:	40001104 	.word	0x40001104
   1ece0:	4001f000 	.word	0x4001f000

0001ece4 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   1ece4:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ece6:	4b0e      	ldr	r3, [pc, #56]	; (1ed20 <radio_ccm_tx_pkt_set+0x3c>)
   1ece8:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1ecea:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ecec:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1ecf0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   1ecf4:	4c0b      	ldr	r4, [pc, #44]	; (1ed24 <radio_ccm_tx_pkt_set+0x40>)
   1ecf6:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1ecfa:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   1ecfe:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1ed02:	4809      	ldr	r0, [pc, #36]	; (1ed28 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1ed04:	4909      	ldr	r1, [pc, #36]	; (1ed2c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1ed06:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1ed0a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1ed0e:	2101      	movs	r1, #1
   1ed10:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1ed14:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1ed18:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1ed1c:	6019      	str	r1, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1ed1e:	bd10      	pop	{r4, pc}
   1ed20:	4000f000 	.word	0x4000f000
   1ed24:	01010000 	.word	0x01010000
   1ed28:	20002064 	.word	0x20002064
   1ed2c:	20001f54 	.word	0x20001f54

0001ed30 <radio_ccm_is_done>:
    return ((uint32_t)p_reg + (uint32_t)event);
}

__STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1ed30:	4b0c      	ldr	r3, [pc, #48]	; (1ed64 <radio_ccm_is_done+0x34>)
   1ed32:	2202      	movs	r2, #2
   1ed34:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

u32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1ed38:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1ed3c:	b16a      	cbz	r2, 1ed5a <radio_ccm_is_done+0x2a>
}

__STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1ed3e:	2202      	movs	r2, #2
   1ed40:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   1ed44:	4a08      	ldr	r2, [pc, #32]	; (1ed68 <radio_ccm_is_done+0x38>)
   1ed46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1ed4a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
		__WFE();
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   1ed4e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1ed52:	fab0 f080 	clz	r0, r0
   1ed56:	0940      	lsrs	r0, r0, #5
   1ed58:	4770      	bx	lr
		__WFE();
   1ed5a:	bf20      	wfe
		__SEV();
   1ed5c:	bf40      	sev
		__WFE();
   1ed5e:	bf20      	wfe
   1ed60:	e7ea      	b.n	1ed38 <radio_ccm_is_done+0x8>
   1ed62:	bf00      	nop
   1ed64:	4000f000 	.word	0x4000f000
   1ed68:	e000e100 	.word	0xe000e100

0001ed6c <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1ed6c:	4b03      	ldr	r3, [pc, #12]	; (1ed7c <radio_ccm_mic_is_valid+0x10>)
   1ed6e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1ed72:	3000      	adds	r0, #0
   1ed74:	bf18      	it	ne
   1ed76:	2001      	movne	r0, #1
   1ed78:	4770      	bx	lr
   1ed7a:	bf00      	nop
   1ed7c:	4000f000 	.word	0x4000f000

0001ed80 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   1ed80:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1ed82:	4c13      	ldr	r4, [pc, #76]	; (1edd0 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   1ed84:	4d13      	ldr	r5, [pc, #76]	; (1edd4 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1ed86:	2303      	movs	r3, #3
   1ed88:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   1ed8c:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   1ed90:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   1ed94:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   1ed98:	3b01      	subs	r3, #1
   1ed9a:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   1ed9e:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   1eda0:	4b0d      	ldr	r3, [pc, #52]	; (1edd8 <radio_ar_configure+0x58>)
   1eda2:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   1eda6:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   1eda8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1edac:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1edb0:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   1edb4:	f7ff fe44 	bl	1ea40 <radio_bc_configure>
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1edb8:	4b08      	ldr	r3, [pc, #32]	; (1eddc <radio_ar_configure+0x5c>)
   1edba:	4a09      	ldr	r2, [pc, #36]	; (1ede0 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1edbc:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
   1edc0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    NRF_PPI->CHENSET = mask;
   1edc4:	2240      	movs	r2, #64	; 0x40
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1edc6:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = mask;
   1edca:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

	nrf_ppi_channel_endpoint_setup(HAL_TRIGGER_AAR_PPI,
				       HAL_TRIGGER_AAR_PPI_EVT,
				       HAL_TRIGGER_AAR_PPI_TASK);
	nrf_ppi_channels_enable(HAL_TRIGGER_AAR_PPI_ENABLE);
}
   1edce:	bd38      	pop	{r3, r4, r5, pc}
   1edd0:	4000f000 	.word	0x4000f000
   1edd4:	40001000 	.word	0x40001000
   1edd8:	20001f50 	.word	0x20001f50
   1eddc:	4001f000 	.word	0x4001f000
   1ede0:	40001128 	.word	0x40001128

0001ede4 <radio_ar_match_get>:

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1ede4:	4b01      	ldr	r3, [pc, #4]	; (1edec <radio_ar_match_get+0x8>)
   1ede6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1edea:	4770      	bx	lr
   1edec:	4000f000 	.word	0x4000f000

0001edf0 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1edf0:	4a04      	ldr	r2, [pc, #16]	; (1ee04 <radio_ar_status_reset+0x14>)
   1edf2:	2300      	movs	r3, #0
   1edf4:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1edf8:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1edfc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   1ee00:	4770      	bx	lr
   1ee02:	bf00      	nop
   1ee04:	40001000 	.word	0x40001000

0001ee08 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1ee08:	4b08      	ldr	r3, [pc, #32]	; (1ee2c <radio_ar_has_match+0x24>)
   1ee0a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1ee0e:	b160      	cbz	r0, 1ee2a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1ee10:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1ee14:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1ee18:	b138      	cbz	r0, 1ee2a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1ee1a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1ee1e:	b120      	cbz	r0, 1ee2a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1ee20:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1ee24:	fab0 f080 	clz	r0, r0
   1ee28:	0940      	lsrs	r0, r0, #5
}
   1ee2a:	4770      	bx	lr
   1ee2c:	40001000 	.word	0x40001000

0001ee30 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1ee30:	2901      	cmp	r1, #1
{
   1ee32:	b508      	push	{r3, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1ee34:	d01a      	beq.n	1ee6c <mayfly_enable_cb+0x3c>
   1ee36:	4b12      	ldr	r3, [pc, #72]	; (1ee80 <mayfly_enable_cb+0x50>)
   1ee38:	681b      	ldr	r3, [r3, #0]
   1ee3a:	075b      	lsls	r3, r3, #29
   1ee3c:	d010      	beq.n	1ee60 <mayfly_enable_cb+0x30>
   1ee3e:	2301      	movs	r3, #1
   1ee40:	f04f 0200 	mov.w	r2, #0
   1ee44:	f363 0202 	bfi	r2, r3, #0, #3
   1ee48:	490e      	ldr	r1, [pc, #56]	; (1ee84 <mayfly_enable_cb+0x54>)
   1ee4a:	4b0f      	ldr	r3, [pc, #60]	; (1ee88 <mayfly_enable_cb+0x58>)
   1ee4c:	480f      	ldr	r0, [pc, #60]	; (1ee8c <mayfly_enable_cb+0x5c>)
   1ee4e:	1a5b      	subs	r3, r3, r1
   1ee50:	f36f 02c5 	bfc	r2, #3, #3
   1ee54:	08db      	lsrs	r3, r3, #3
   1ee56:	f363 128f 	bfi	r2, r3, #6, #10
   1ee5a:	490d      	ldr	r1, [pc, #52]	; (1ee90 <mayfly_enable_cb+0x60>)
   1ee5c:	f7e3 f946 	bl	20ec <log_1>
   1ee60:	4040      	eors	r0, r0
   1ee62:	f380 8811 	msr	BASEPRI, r0
   1ee66:	f04f 0004 	mov.w	r0, #4
   1ee6a:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   1ee6c:	2018      	movs	r0, #24
	if (enable) {
   1ee6e:	b11a      	cbz	r2, 1ee78 <mayfly_enable_cb+0x48>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   1ee70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_enable(SWI4_IRQn);
   1ee74:	f7e7 bbb4 	b.w	65e0 <_arch_irq_enable>
}
   1ee78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_disable(SWI4_IRQn);
   1ee7c:	f7e7 bbc0 	b.w	6600 <_arch_irq_disable>
   1ee80:	2000e228 	.word	0x2000e228
   1ee84:	0002ef38 	.word	0x0002ef38
   1ee88:	0002ef90 	.word	0x0002ef90
   1ee8c:	000340a5 	.word	0x000340a5
   1ee90:	00034076 	.word	0x00034076

0001ee94 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   1ee94:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
   1ee96:	b1e1      	cbz	r1, 1eed2 <mayfly_is_enabled+0x3e>
   1ee98:	2901      	cmp	r1, #1
   1ee9a:	d01f      	beq.n	1eedc <mayfly_is_enabled+0x48>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   1ee9c:	4b10      	ldr	r3, [pc, #64]	; (1eee0 <mayfly_is_enabled+0x4c>)
   1ee9e:	681b      	ldr	r3, [r3, #0]
   1eea0:	075b      	lsls	r3, r3, #29
   1eea2:	d010      	beq.n	1eec6 <mayfly_is_enabled+0x32>
   1eea4:	2301      	movs	r3, #1
   1eea6:	f04f 0200 	mov.w	r2, #0
   1eeaa:	f363 0202 	bfi	r2, r3, #0, #3
   1eeae:	490d      	ldr	r1, [pc, #52]	; (1eee4 <mayfly_is_enabled+0x50>)
   1eeb0:	4b0d      	ldr	r3, [pc, #52]	; (1eee8 <mayfly_is_enabled+0x54>)
   1eeb2:	480e      	ldr	r0, [pc, #56]	; (1eeec <mayfly_is_enabled+0x58>)
   1eeb4:	1a5b      	subs	r3, r3, r1
   1eeb6:	f36f 02c5 	bfc	r2, #3, #3
   1eeba:	08db      	lsrs	r3, r3, #3
   1eebc:	f363 128f 	bfi	r2, r3, #6, #10
   1eec0:	490b      	ldr	r1, [pc, #44]	; (1eef0 <mayfly_is_enabled+0x5c>)
   1eec2:	f7e3 f913 	bl	20ec <log_1>
   1eec6:	4040      	eors	r0, r0
   1eec8:	f380 8811 	msr	BASEPRI, r0
   1eecc:	f04f 0004 	mov.w	r0, #4
   1eed0:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   1eed2:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   1eed4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(SWI4_IRQn);
   1eed8:	f7e7 bba6 	b.w	6628 <_arch_irq_is_enabled>
   1eedc:	2018      	movs	r0, #24
   1eede:	e7f9      	b.n	1eed4 <mayfly_is_enabled+0x40>
   1eee0:	2000e228 	.word	0x2000e228
   1eee4:	0002ef38 	.word	0x0002ef38
   1eee8:	0002ef90 	.word	0x0002ef90
   1eeec:	0003146d 	.word	0x0003146d
   1eef0:	00034087 	.word	0x00034087

0001eef4 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1eef4:	4288      	cmp	r0, r1
   1eef6:	d00a      	beq.n	1ef0e <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   1eef8:	b918      	cbnz	r0, 1ef02 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1eefa:	1e4b      	subs	r3, r1, #1
   1eefc:	4258      	negs	r0, r3
   1eefe:	4158      	adcs	r0, r3
   1ef00:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1ef02:	2801      	cmp	r0, #1
   1ef04:	d105      	bne.n	1ef12 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1ef06:	fab1 f081 	clz	r0, r1
   1ef0a:	0940      	lsrs	r0, r0, #5
   1ef0c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1ef0e:	2001      	movs	r0, #1
   1ef10:	4770      	bx	lr
   1ef12:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   1ef14:	4770      	bx	lr
	...

0001ef18 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   1ef18:	b508      	push	{r3, lr}
   1ef1a:	4b13      	ldr	r3, [pc, #76]	; (1ef68 <mayfly_pend+0x50>)
	(void)caller_id;

	switch (callee_id) {
   1ef1c:	b1e1      	cbz	r1, 1ef58 <mayfly_pend+0x40>
   1ef1e:	2901      	cmp	r1, #1
   1ef20:	d01f      	beq.n	1ef62 <mayfly_pend+0x4a>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   1ef22:	4b12      	ldr	r3, [pc, #72]	; (1ef6c <mayfly_pend+0x54>)
   1ef24:	681b      	ldr	r3, [r3, #0]
   1ef26:	075b      	lsls	r3, r3, #29
   1ef28:	d010      	beq.n	1ef4c <mayfly_pend+0x34>
   1ef2a:	2301      	movs	r3, #1
   1ef2c:	f04f 0200 	mov.w	r2, #0
   1ef30:	f363 0202 	bfi	r2, r3, #0, #3
   1ef34:	490e      	ldr	r1, [pc, #56]	; (1ef70 <mayfly_pend+0x58>)
   1ef36:	4b0f      	ldr	r3, [pc, #60]	; (1ef74 <mayfly_pend+0x5c>)
   1ef38:	480f      	ldr	r0, [pc, #60]	; (1ef78 <mayfly_pend+0x60>)
   1ef3a:	1a5b      	subs	r3, r3, r1
   1ef3c:	f36f 02c5 	bfc	r2, #3, #3
   1ef40:	08db      	lsrs	r3, r3, #3
   1ef42:	f363 128f 	bfi	r2, r3, #6, #10
   1ef46:	490d      	ldr	r1, [pc, #52]	; (1ef7c <mayfly_pend+0x64>)
   1ef48:	f7e3 f8d0 	bl	20ec <log_1>
   1ef4c:	4040      	eors	r0, r0
   1ef4e:	f380 8811 	msr	BASEPRI, r0
   1ef52:	f04f 0004 	mov.w	r0, #4
   1ef56:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ef58:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1ef5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   1ef60:	bd08      	pop	{r3, pc}
   1ef62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1ef66:	e7f9      	b.n	1ef5c <mayfly_pend+0x44>
   1ef68:	e000e100 	.word	0xe000e100
   1ef6c:	2000e228 	.word	0x2000e228
   1ef70:	0002ef38 	.word	0x0002ef38
   1ef74:	0002ef90 	.word	0x0002ef90
   1ef78:	0003146d 	.word	0x0003146d
   1ef7c:	00034099 	.word	0x00034099

0001ef80 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1ef80:	2803      	cmp	r0, #3
{
   1ef82:	b508      	push	{r3, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1ef84:	d91a      	bls.n	1efbc <hal_ticker_instance0_caller_id_get+0x3c>
   1ef86:	4b19      	ldr	r3, [pc, #100]	; (1efec <hal_ticker_instance0_caller_id_get+0x6c>)
   1ef88:	681b      	ldr	r3, [r3, #0]
   1ef8a:	075a      	lsls	r2, r3, #29
   1ef8c:	d010      	beq.n	1efb0 <hal_ticker_instance0_caller_id_get+0x30>
   1ef8e:	2301      	movs	r3, #1
   1ef90:	f04f 0200 	mov.w	r2, #0
   1ef94:	f363 0202 	bfi	r2, r3, #0, #3
   1ef98:	4915      	ldr	r1, [pc, #84]	; (1eff0 <hal_ticker_instance0_caller_id_get+0x70>)
   1ef9a:	4b16      	ldr	r3, [pc, #88]	; (1eff4 <hal_ticker_instance0_caller_id_get+0x74>)
   1ef9c:	4816      	ldr	r0, [pc, #88]	; (1eff8 <hal_ticker_instance0_caller_id_get+0x78>)
   1ef9e:	1a5b      	subs	r3, r3, r1
   1efa0:	f36f 02c5 	bfc	r2, #3, #3
   1efa4:	08db      	lsrs	r3, r3, #3
   1efa6:	4915      	ldr	r1, [pc, #84]	; (1effc <hal_ticker_instance0_caller_id_get+0x7c>)
   1efa8:	f363 128f 	bfi	r2, r3, #6, #10

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1efac:	f7e3 f89e 	bl	20ec <log_1>
   1efb0:	4040      	eors	r0, r0
   1efb2:	f380 8811 	msr	BASEPRI, r0
   1efb6:	f04f 0004 	mov.w	r0, #4
   1efba:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1efbc:	4b10      	ldr	r3, [pc, #64]	; (1f000 <hal_ticker_instance0_caller_id_get+0x80>)
   1efbe:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1efc0:	b998      	cbnz	r0, 1efea <hal_ticker_instance0_caller_id_get+0x6a>
   1efc2:	4b0a      	ldr	r3, [pc, #40]	; (1efec <hal_ticker_instance0_caller_id_get+0x6c>)
   1efc4:	681b      	ldr	r3, [r3, #0]
   1efc6:	075b      	lsls	r3, r3, #29
   1efc8:	d0f2      	beq.n	1efb0 <hal_ticker_instance0_caller_id_get+0x30>
   1efca:	2301      	movs	r3, #1
   1efcc:	f04f 0200 	mov.w	r2, #0
   1efd0:	f363 0202 	bfi	r2, r3, #0, #3
   1efd4:	4906      	ldr	r1, [pc, #24]	; (1eff0 <hal_ticker_instance0_caller_id_get+0x70>)
   1efd6:	4b07      	ldr	r3, [pc, #28]	; (1eff4 <hal_ticker_instance0_caller_id_get+0x74>)
   1efd8:	1a5b      	subs	r3, r3, r1
   1efda:	f360 02c5 	bfi	r2, r0, #3, #3
   1efde:	08db      	lsrs	r3, r3, #3
   1efe0:	f363 128f 	bfi	r2, r3, #6, #10
   1efe4:	4905      	ldr	r1, [pc, #20]	; (1effc <hal_ticker_instance0_caller_id_get+0x7c>)
   1efe6:	4807      	ldr	r0, [pc, #28]	; (1f004 <hal_ticker_instance0_caller_id_get+0x84>)
   1efe8:	e7e0      	b.n	1efac <hal_ticker_instance0_caller_id_get+0x2c>

	return caller_id;
}
   1efea:	bd08      	pop	{r3, pc}
   1efec:	2000e22c 	.word	0x2000e22c
   1eff0:	0002ef38 	.word	0x0002ef38
   1eff4:	0002ef98 	.word	0x0002ef98
   1eff8:	0003411f 	.word	0x0003411f
   1effc:	000340dd 	.word	0x000340dd
   1f000:	0003411b 	.word	0x0003411b
   1f004:	00034154 	.word	0x00034154

0001f008 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1f008:	3802      	subs	r0, #2
{
   1f00a:	b510      	push	{r4, lr}
   1f00c:	461c      	mov	r4, r3
	switch (caller_id) {
   1f00e:	2803      	cmp	r0, #3
   1f010:	d817      	bhi.n	1f042 <hal_ticker_instance0_sched+0x3a>
   1f012:	e8df f000 	tbb	[pc, r0]
   1f016:	0c02      	.short	0x0c02
   1f018:	3a12      	.short	0x3a12
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   1f01a:	2903      	cmp	r1, #3
   1f01c:	d111      	bne.n	1f042 <hal_ticker_instance0_sched+0x3a>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   1f01e:	4b1e      	ldr	r3, [pc, #120]	; (1f098 <hal_ticker_instance0_sched+0x90>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1f020:	2100      	movs	r1, #0
			m.param = instance;
   1f022:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1f024:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   1f026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1f02a:	f7f2 ba27 	b.w	1147c <mayfly_enqueue>
		switch (callee_id) {
   1f02e:	2904      	cmp	r1, #4
   1f030:	d107      	bne.n	1f042 <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
   1f032:	4b1a      	ldr	r3, [pc, #104]	; (1f09c <hal_ticker_instance0_sched+0x94>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1f034:	2101      	movs	r1, #1
			m.param = instance;
   1f036:	609c      	str	r4, [r3, #8]
   1f038:	e7f4      	b.n	1f024 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   1f03a:	2903      	cmp	r1, #3
   1f03c:	d01c      	beq.n	1f078 <hal_ticker_instance0_sched+0x70>
   1f03e:	2904      	cmp	r1, #4
   1f040:	d01f      	beq.n	1f082 <hal_ticker_instance0_sched+0x7a>
		LL_ASSERT(0);
   1f042:	4b17      	ldr	r3, [pc, #92]	; (1f0a0 <hal_ticker_instance0_sched+0x98>)
   1f044:	681b      	ldr	r3, [r3, #0]
   1f046:	075b      	lsls	r3, r3, #29
   1f048:	d010      	beq.n	1f06c <hal_ticker_instance0_sched+0x64>
   1f04a:	2301      	movs	r3, #1
   1f04c:	f04f 0200 	mov.w	r2, #0
   1f050:	f363 0202 	bfi	r2, r3, #0, #3
   1f054:	4913      	ldr	r1, [pc, #76]	; (1f0a4 <hal_ticker_instance0_sched+0x9c>)
   1f056:	4b14      	ldr	r3, [pc, #80]	; (1f0a8 <hal_ticker_instance0_sched+0xa0>)
   1f058:	4814      	ldr	r0, [pc, #80]	; (1f0ac <hal_ticker_instance0_sched+0xa4>)
   1f05a:	1a5b      	subs	r3, r3, r1
   1f05c:	f36f 02c5 	bfc	r2, #3, #3
   1f060:	08db      	lsrs	r3, r3, #3
   1f062:	f363 128f 	bfi	r2, r3, #6, #10
   1f066:	4912      	ldr	r1, [pc, #72]	; (1f0b0 <hal_ticker_instance0_sched+0xa8>)
   1f068:	f7e3 f840 	bl	20ec <log_1>
   1f06c:	4040      	eors	r0, r0
   1f06e:	f380 8811 	msr	BASEPRI, r0
   1f072:	f04f 0004 	mov.w	r0, #4
   1f076:	df02      	svc	2
			m.param = instance;
   1f078:	4b0e      	ldr	r3, [pc, #56]	; (1f0b4 <hal_ticker_instance0_sched+0xac>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1f07a:	2100      	movs	r1, #0
			m.param = instance;
   1f07c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1f07e:	2001      	movs	r0, #1
   1f080:	e7d1      	b.n	1f026 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   1f082:	4b0d      	ldr	r3, [pc, #52]	; (1f0b8 <hal_ticker_instance0_sched+0xb0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1f084:	2101      	movs	r1, #1
			m.param = instance;
   1f086:	609c      	str	r4, [r3, #8]
   1f088:	e7f9      	b.n	1f07e <hal_ticker_instance0_sched+0x76>
		switch (callee_id) {
   1f08a:	2904      	cmp	r1, #4
   1f08c:	d1d9      	bne.n	1f042 <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
   1f08e:	4b0b      	ldr	r3, [pc, #44]	; (1f0bc <hal_ticker_instance0_sched+0xb4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1f090:	2101      	movs	r1, #1
			m.param = instance;
   1f092:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1f094:	2003      	movs	r0, #3
   1f096:	e7c6      	b.n	1f026 <hal_ticker_instance0_sched+0x1e>
   1f098:	2000dbb8 	.word	0x2000dbb8
   1f09c:	2000dbc8 	.word	0x2000dbc8
   1f0a0:	2000e22c 	.word	0x2000e22c
   1f0a4:	0002ef38 	.word	0x0002ef38
   1f0a8:	0002ef98 	.word	0x0002ef98
   1f0ac:	0003146d 	.word	0x0003146d
   1f0b0:	00034100 	.word	0x00034100
   1f0b4:	2000dbd8 	.word	0x2000dbd8
   1f0b8:	2000dbe8 	.word	0x2000dbe8
   1f0bc:	2000dbf8 	.word	0x2000dbf8

0001f0c0 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   1f0c0:	4601      	mov	r1, r0
   1f0c2:	2000      	movs	r0, #0
   1f0c4:	f7ff ba1a 	b.w	1e4fc <cntr_cmp_set>

0001f0c8 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   1f0c8:	4770      	bx	lr
	...

0001f0cc <net_buf_pool_get>:
}
   1f0cc:	4b01      	ldr	r3, [pc, #4]	; (1f0d4 <net_buf_pool_get+0x8>)
   1f0ce:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1f0d2:	4770      	bx	lr
   1f0d4:	2000e474 	.word	0x2000e474

0001f0d8 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f0d8:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   1f0da:	4b04      	ldr	r3, [pc, #16]	; (1f0ec <net_buf_id+0x14>)
   1f0dc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   1f0e0:	69db      	ldr	r3, [r3, #28]
   1f0e2:	1ac0      	subs	r0, r0, r3
}
   1f0e4:	4b02      	ldr	r3, [pc, #8]	; (1f0f0 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   1f0e6:	10c0      	asrs	r0, r0, #3
}
   1f0e8:	4358      	muls	r0, r3
   1f0ea:	4770      	bx	lr
   1f0ec:	2000e474 	.word	0x2000e474
   1f0f0:	aaaaaaab 	.word	0xaaaaaaab

0001f0f4 <fixed_data_alloc>:
{
   1f0f4:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f0f6:	4b09      	ldr	r3, [pc, #36]	; (1f11c <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f0f8:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f0fa:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   1f0fe:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f100:	699b      	ldr	r3, [r3, #24]
   1f102:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   1f104:	6823      	ldr	r3, [r4, #0]
   1f106:	429a      	cmp	r2, r3
   1f108:	bf94      	ite	ls
   1f10a:	600a      	strls	r2, [r1, #0]
   1f10c:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1f10e:	f7ff ffe3 	bl	1f0d8 <net_buf_id>
   1f112:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1f116:	fb02 3000 	mla	r0, r2, r0, r3
   1f11a:	bd10      	pop	{r4, pc}
   1f11c:	2000e474 	.word	0x2000e474

0001f120 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   1f120:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f124:	4605      	mov	r5, r0
   1f126:	9101      	str	r1, [sp, #4]
   1f128:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1f12a:	f00f fc4f 	bl	2e9cc <_impl_k_uptime_get_32>
   1f12e:	4607      	mov	r7, r0
	__asm__ volatile(
   1f130:	f04f 0320 	mov.w	r3, #32
   1f134:	f3ef 8811 	mrs	r8, BASEPRI
   1f138:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1f13c:	8a6b      	ldrh	r3, [r5, #18]
   1f13e:	2b00      	cmp	r3, #0
   1f140:	d03d      	beq.n	1f1be <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1f142:	8a2a      	ldrh	r2, [r5, #16]
   1f144:	429a      	cmp	r2, r3
   1f146:	d92a      	bls.n	1f19e <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1f148:	2100      	movs	r1, #0
   1f14a:	4628      	mov	r0, r5
   1f14c:	f00e fd9a 	bl	2dc84 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1f150:	4604      	mov	r4, r0
   1f152:	b320      	cbz	r0, 1f19e <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1f154:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1f158:	9b01      	ldr	r3, [sp, #4]
   1f15a:	2b00      	cmp	r3, #0
   1f15c:	d03c      	beq.n	1f1d8 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   1f15e:	1c73      	adds	r3, r6, #1
   1f160:	2b01      	cmp	r3, #1
   1f162:	d906      	bls.n	1f172 <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1f164:	f00f fc32 	bl	2e9cc <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   1f168:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   1f16a:	42b0      	cmp	r0, r6
   1f16c:	bf94      	ite	ls
   1f16e:	1a36      	subls	r6, r6, r0
   1f170:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f172:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1f174:	4f1e      	ldr	r7, [pc, #120]	; (1f1f0 <net_buf_alloc_len+0xd0>)
   1f176:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   1f17a:	4632      	mov	r2, r6
   1f17c:	699b      	ldr	r3, [r3, #24]
   1f17e:	681b      	ldr	r3, [r3, #0]
   1f180:	a901      	add	r1, sp, #4
   1f182:	681b      	ldr	r3, [r3, #0]
   1f184:	4620      	mov	r0, r4
   1f186:	4798      	blx	r3
   1f188:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1f18a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1f18c:	bb28      	cbnz	r0, 1f1da <net_buf_alloc_len+0xba>
	k_lifo_put(&pool->free, buf);
   1f18e:	79a0      	ldrb	r0, [r4, #6]
   1f190:	4621      	mov	r1, r4
   1f192:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1f196:	f00e fd56 	bl	2dc46 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1f19a:	462c      	mov	r4, r5
   1f19c:	e018      	b.n	1f1d0 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   1f19e:	8a6b      	ldrh	r3, [r5, #18]
   1f1a0:	1e5a      	subs	r2, r3, #1
   1f1a2:	826a      	strh	r2, [r5, #18]
   1f1a4:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1f1a8:	8a2c      	ldrh	r4, [r5, #16]
   1f1aa:	1ae4      	subs	r4, r4, r3
   1f1ac:	69eb      	ldr	r3, [r5, #28]
   1f1ae:	2218      	movs	r2, #24
   1f1b0:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   1f1b4:	4b0e      	ldr	r3, [pc, #56]	; (1f1f0 <net_buf_alloc_len+0xd0>)
   1f1b6:	1aed      	subs	r5, r5, r3
   1f1b8:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   1f1ba:	71a5      	strb	r5, [r4, #6]
		goto success;
   1f1bc:	e7cc      	b.n	1f158 <net_buf_alloc_len+0x38>
   1f1be:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1f1c2:	4631      	mov	r1, r6
   1f1c4:	4628      	mov	r0, r5
   1f1c6:	f00e fd5d 	bl	2dc84 <_impl_k_queue_get>
	if (!buf) {
   1f1ca:	4604      	mov	r4, r0
   1f1cc:	2800      	cmp	r0, #0
   1f1ce:	d1c3      	bne.n	1f158 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1f1d0:	4620      	mov	r0, r4
   1f1d2:	b002      	add	sp, #8
   1f1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   1f1d8:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1f1da:	2300      	movs	r3, #0
   1f1dc:	6023      	str	r3, [r4, #0]
   1f1de:	2201      	movs	r2, #1
   1f1e0:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0;
   1f1e2:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1f1e4:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1f1e6:	6923      	ldr	r3, [r4, #16]
   1f1e8:	81e2      	strh	r2, [r4, #14]
   1f1ea:	60a3      	str	r3, [r4, #8]
	return buf;
   1f1ec:	e7f0      	b.n	1f1d0 <net_buf_alloc_len+0xb0>
   1f1ee:	bf00      	nop
   1f1f0:	2000e474 	.word	0x2000e474

0001f1f4 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f1f4:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1f1f6:	685b      	ldr	r3, [r3, #4]
   1f1f8:	460a      	mov	r2, r1
   1f1fa:	6819      	ldr	r1, [r3, #0]
   1f1fc:	f7ff bf90 	b.w	1f120 <net_buf_alloc_len>

0001f200 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   1f200:	b570      	push	{r4, r5, r6, lr}
   1f202:	4606      	mov	r6, r0
   1f204:	f00e fd3e 	bl	2dc84 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1f208:	4605      	mov	r5, r0
   1f20a:	b128      	cbz	r0, 1f218 <net_buf_get+0x18>
   1f20c:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1f20e:	7963      	ldrb	r3, [r4, #5]
   1f210:	f013 0301 	ands.w	r3, r3, #1
   1f214:	d102      	bne.n	1f21c <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1f216:	6023      	str	r3, [r4, #0]

	return buf;
}
   1f218:	4628      	mov	r0, r5
   1f21a:	bd70      	pop	{r4, r5, r6, pc}
   1f21c:	2100      	movs	r1, #0
   1f21e:	4630      	mov	r0, r6
   1f220:	f00e fd30 	bl	2dc84 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1f224:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1f226:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1f228:	f023 0301 	bic.w	r3, r3, #1
   1f22c:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1f22e:	4604      	mov	r4, r0
   1f230:	e7ed      	b.n	1f20e <net_buf_get+0xe>

0001f232 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1f232:	6883      	ldr	r3, [r0, #8]
   1f234:	4419      	add	r1, r3
   1f236:	6001      	str	r1, [r0, #0]
}
   1f238:	4770      	bx	lr

0001f23a <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1f23a:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1f23c:	460a      	mov	r2, r1
   1f23e:	6814      	ldr	r4, [r2, #0]
   1f240:	b914      	cbnz	r4, 1f248 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   1f242:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1f244:	f00e bd04 	b.w	2dc50 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1f248:	7953      	ldrb	r3, [r2, #5]
   1f24a:	f043 0301 	orr.w	r3, r3, #1
   1f24e:	7153      	strb	r3, [r2, #5]
   1f250:	4622      	mov	r2, r4
   1f252:	e7f4      	b.n	1f23e <net_buf_put+0x4>

0001f254 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1f254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f256:	4d15      	ldr	r5, [pc, #84]	; (1f2ac <net_buf_unref+0x58>)
   1f258:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1f25a:	2600      	movs	r6, #0
	while (buf) {
   1f25c:	b904      	cbnz	r4, 1f260 <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1f25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   1f260:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1f262:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   1f264:	3b01      	subs	r3, #1
   1f266:	b2db      	uxtb	r3, r3
   1f268:	7123      	strb	r3, [r4, #4]
   1f26a:	2b00      	cmp	r3, #0
   1f26c:	d1f7      	bne.n	1f25e <net_buf_unref+0xa>
		if (buf->__buf) {
   1f26e:	6921      	ldr	r1, [r4, #16]
   1f270:	b159      	cbz	r1, 1f28a <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1f272:	7963      	ldrb	r3, [r4, #5]
   1f274:	079b      	lsls	r3, r3, #30
   1f276:	d407      	bmi.n	1f288 <net_buf_unref+0x34>
	pool->alloc->cb->unref(buf, data);
   1f278:	79a3      	ldrb	r3, [r4, #6]
   1f27a:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   1f27e:	4620      	mov	r0, r4
   1f280:	699b      	ldr	r3, [r3, #24]
   1f282:	681b      	ldr	r3, [r3, #0]
   1f284:	689b      	ldr	r3, [r3, #8]
   1f286:	4798      	blx	r3
			buf->__buf = NULL;
   1f288:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1f28a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1f28c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1f28e:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   1f292:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1f294:	695b      	ldr	r3, [r3, #20]
   1f296:	b11b      	cbz	r3, 1f2a0 <net_buf_unref+0x4c>
			pool->destroy(buf);
   1f298:	4620      	mov	r0, r4
   1f29a:	4798      	blx	r3
{
   1f29c:	463c      	mov	r4, r7
   1f29e:	e7dd      	b.n	1f25c <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   1f2a0:	4621      	mov	r1, r4
   1f2a2:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   1f2a6:	f00e fcce 	bl	2dc46 <k_queue_prepend>
   1f2aa:	e7f7      	b.n	1f29c <net_buf_unref+0x48>
   1f2ac:	2000e474 	.word	0x2000e474

0001f2b0 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1f2b0:	7903      	ldrb	r3, [r0, #4]
   1f2b2:	3301      	adds	r3, #1
   1f2b4:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1f2b6:	4770      	bx	lr

0001f2b8 <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   1f2b8:	6803      	ldr	r3, [r0, #0]
   1f2ba:	b903      	cbnz	r3, 1f2be <net_buf_frag_last+0x6>
		buf = buf->frags;
	}

	return buf;
}
   1f2bc:	4770      	bx	lr
   1f2be:	4618      	mov	r0, r3
   1f2c0:	e7fa      	b.n	1f2b8 <net_buf_frag_last>

0001f2c2 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   1f2c2:	6802      	ldr	r2, [r0, #0]
{
   1f2c4:	b510      	push	{r4, lr}
	if (parent->frags) {
   1f2c6:	b11a      	cbz	r2, 1f2d0 <net_buf_frag_insert+0xe>
   1f2c8:	460b      	mov	r3, r1
	while (buf->frags) {
   1f2ca:	681c      	ldr	r4, [r3, #0]
   1f2cc:	b914      	cbnz	r4, 1f2d4 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   1f2ce:	601a      	str	r2, [r3, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1f2d0:	6001      	str	r1, [r0, #0]
}
   1f2d2:	bd10      	pop	{r4, pc}
	while (buf->frags) {
   1f2d4:	4623      	mov	r3, r4
   1f2d6:	e7f8      	b.n	1f2ca <net_buf_frag_insert+0x8>

0001f2d8 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1f2d8:	b510      	push	{r4, lr}
	NET_BUF_ASSERT(frag);

	if (!head) {
   1f2da:	4604      	mov	r4, r0
   1f2dc:	b928      	cbnz	r0, 1f2ea <net_buf_frag_add+0x12>
	buf->ref++;
   1f2de:	790b      	ldrb	r3, [r1, #4]
   1f2e0:	3301      	adds	r3, #1
   1f2e2:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1f2e4:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1f2e6:	bd10      	pop	{r4, pc}
	while (buf->frags) {
   1f2e8:	4618      	mov	r0, r3
   1f2ea:	6803      	ldr	r3, [r0, #0]
   1f2ec:	2b00      	cmp	r3, #0
   1f2ee:	d1fb      	bne.n	1f2e8 <net_buf_frag_add+0x10>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1f2f0:	f7ff ffe7 	bl	1f2c2 <net_buf_frag_insert>
   1f2f4:	4620      	mov	r0, r4
   1f2f6:	e7f6      	b.n	1f2e6 <net_buf_frag_add+0xe>

0001f2f8 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1f2f8:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   1f2fa:	b108      	cbz	r0, 1f300 <net_buf_frag_del+0x8>
   1f2fc:	680b      	ldr	r3, [r1, #0]
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   1f2fe:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   1f300:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1f302:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1f304:	4608      	mov	r0, r1
	frag->frags = NULL;
   1f306:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   1f308:	f7ff ffa4 	bl	1f254 <net_buf_unref>
#endif

	return next_frag;
}
   1f30c:	4620      	mov	r0, r4
   1f30e:	bd10      	pop	{r4, pc}

0001f310 <net_buf_simple_add>:
	return buf->data + buf->len;
   1f310:	8883      	ldrh	r3, [r0, #4]
   1f312:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1f314:	4419      	add	r1, r3
   1f316:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1f318:	18d0      	adds	r0, r2, r3
   1f31a:	4770      	bx	lr

0001f31c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1f31c:	b430      	push	{r4, r5}
   1f31e:	8883      	ldrh	r3, [r0, #4]
   1f320:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   1f322:	189d      	adds	r5, r3, r2
   1f324:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1f326:	18e0      	adds	r0, r4, r3
}
   1f328:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1f32a:	f7e7 bcad 	b.w	6c88 <memcpy>

0001f32e <net_buf_simple_add_u8>:
   1f32e:	8883      	ldrh	r3, [r0, #4]
   1f330:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1f332:	b510      	push	{r4, lr}
	buf->len += len;
   1f334:	1c5c      	adds	r4, r3, #1
   1f336:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1f338:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1f33a:	18d0      	adds	r0, r2, r3
   1f33c:	bd10      	pop	{r4, pc}

0001f33e <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1f33e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f340:	ab02      	add	r3, sp, #8
   1f342:	8884      	ldrh	r4, [r0, #4]
   1f344:	f823 1d02 	strh.w	r1, [r3, #-2]!
   1f348:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1f34a:	1ca2      	adds	r2, r4, #2
   1f34c:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1f34e:	4619      	mov	r1, r3
   1f350:	2202      	movs	r2, #2
   1f352:	1928      	adds	r0, r5, r4
   1f354:	f7e7 fc98 	bl	6c88 <memcpy>
}
   1f358:	b003      	add	sp, #12
   1f35a:	bd30      	pop	{r4, r5, pc}

0001f35c <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   1f35c:	b513      	push	{r0, r1, r4, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   1f35e:	020b      	lsls	r3, r1, #8
   1f360:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   1f364:	a902      	add	r1, sp, #8
   1f366:	6804      	ldr	r4, [r0, #0]
   1f368:	f821 3d02 	strh.w	r3, [r1, #-2]!
   1f36c:	8883      	ldrh	r3, [r0, #4]
	buf->len += len;
   1f36e:	1c9a      	adds	r2, r3, #2
   1f370:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1f372:	2202      	movs	r2, #2
   1f374:	18e0      	adds	r0, r4, r3
   1f376:	f7e7 fc87 	bl	6c88 <memcpy>
}
   1f37a:	b002      	add	sp, #8
   1f37c:	bd10      	pop	{r4, pc}

0001f37e <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1f37e:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   1f380:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   1f382:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   1f384:	4411      	add	r1, r2
	buf->data -= len;
   1f386:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1f388:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1f38a:	4618      	mov	r0, r3
   1f38c:	4770      	bx	lr

0001f38e <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   1f38e:	b513      	push	{r0, r1, r4, lr}
   1f390:	ac02      	add	r4, sp, #8
	buf->data -= len;
   1f392:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   1f394:	8882      	ldrh	r2, [r0, #4]
{
   1f396:	f824 1d02 	strh.w	r1, [r4, #-2]!
	buf->data -= len;
   1f39a:	3b02      	subs	r3, #2
	buf->len += len;
   1f39c:	3202      	adds	r2, #2
	buf->data -= len;
   1f39e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1f3a0:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   1f3a2:	4621      	mov	r1, r4
   1f3a4:	2202      	movs	r2, #2
   1f3a6:	4618      	mov	r0, r3
   1f3a8:	f7e7 fc6e 	bl	6c88 <memcpy>
}
   1f3ac:	b002      	add	sp, #8
   1f3ae:	bd10      	pop	{r4, pc}

0001f3b0 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1f3b0:	8883      	ldrh	r3, [r0, #4]
   1f3b2:	1a5b      	subs	r3, r3, r1
   1f3b4:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1f3b6:	6803      	ldr	r3, [r0, #0]
   1f3b8:	4419      	add	r1, r3
   1f3ba:	6001      	str	r1, [r0, #0]
}
   1f3bc:	4608      	mov	r0, r1
   1f3be:	4770      	bx	lr

0001f3c0 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1f3c0:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   1f3c2:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1f3c4:	2101      	movs	r1, #1
	val = buf->data[0];
   1f3c6:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1f3c8:	f7ff fff2 	bl	1f3b0 <net_buf_simple_pull>

	return val;
}
   1f3cc:	4610      	mov	r0, r2
   1f3ce:	bd08      	pop	{r3, pc}

0001f3d0 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1f3d0:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1f3d2:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1f3d4:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   1f3d6:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1f3d8:	f7ff ffea 	bl	1f3b0 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1f3dc:	4610      	mov	r0, r2
   1f3de:	bd08      	pop	{r3, pc}

0001f3e0 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1f3e0:	6802      	ldr	r2, [r0, #0]
   1f3e2:	6880      	ldr	r0, [r0, #8]
}
   1f3e4:	1a10      	subs	r0, r2, r0
   1f3e6:	4770      	bx	lr

0001f3e8 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   1f3e8:	6802      	ldr	r2, [r0, #0]
   1f3ea:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1f3ec:	88c3      	ldrh	r3, [r0, #6]
   1f3ee:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   1f3f0:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1f3f2:	1a9b      	subs	r3, r3, r2
}
   1f3f4:	1a18      	subs	r0, r3, r0
   1f3f6:	4770      	bx	lr

0001f3f8 <net_buf_append_bytes>:
{
   1f3f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1f3fe:	4681      	mov	r9, r0
   1f400:	460f      	mov	r7, r1
   1f402:	4690      	mov	r8, r2
   1f404:	469a      	mov	sl, r3
   1f406:	4604      	mov	r4, r0
	while (buf->frags) {
   1f408:	6825      	ldr	r5, [r4, #0]
   1f40a:	b9ed      	cbnz	r5, 1f448 <net_buf_append_bytes+0x50>
		u16_t count = min(len, net_buf_tailroom(frag));
   1f40c:	3408      	adds	r4, #8
   1f40e:	4620      	mov	r0, r4
   1f410:	f7ff ffea 	bl	1f3e8 <net_buf_simple_tailroom>
   1f414:	42b8      	cmp	r0, r7
   1f416:	bf94      	ite	ls
   1f418:	fa1f fb80 	uxthls.w	fp, r0
   1f41c:	fa1f fb87 	uxthhi.w	fp, r7
		net_buf_add_mem(frag, value8, count);
   1f420:	4641      	mov	r1, r8
   1f422:	465a      	mov	r2, fp
   1f424:	4620      	mov	r0, r4
   1f426:	f7ff ff79 	bl	1f31c <net_buf_simple_add_mem>
		if (len == 0) {
   1f42a:	ebb7 070b 	subs.w	r7, r7, fp
		added_len += count;
   1f42e:	445d      	add	r5, fp
		value8 += count;
   1f430:	44d8      	add	r8, fp
		if (len == 0) {
   1f432:	d00b      	beq.n	1f44c <net_buf_append_bytes+0x54>
		frag = allocate_cb(timeout, user_data);
   1f434:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f436:	4650      	mov	r0, sl
   1f438:	47b0      	blx	r6
		if (!frag) {
   1f43a:	4604      	mov	r4, r0
   1f43c:	b130      	cbz	r0, 1f44c <net_buf_append_bytes+0x54>
		net_buf_frag_add(buf, frag);
   1f43e:	4601      	mov	r1, r0
   1f440:	4648      	mov	r0, r9
   1f442:	f7ff ff49 	bl	1f2d8 <net_buf_frag_add>
	do {
   1f446:	e7e1      	b.n	1f40c <net_buf_append_bytes+0x14>
	while (buf->frags) {
   1f448:	462c      	mov	r4, r5
   1f44a:	e7dd      	b.n	1f408 <net_buf_append_bytes+0x10>
}
   1f44c:	4628      	mov	r0, r5
   1f44e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001f452 <net_bt_reserve>:
{
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	return 0;
}
   1f452:	2000      	movs	r0, #0
   1f454:	4770      	bx	lr

0001f456 <net_bt_enable>:
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1f456:	b151      	cbz	r1, 1f46e <net_bt_enable+0x18>
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   1f458:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1f45a:	681b      	ldr	r3, [r3, #0]
	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1f45c:	689b      	ldr	r3, [r3, #8]
   1f45e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   1f462:	2b03      	cmp	r3, #3
		return -ENETDOWN;
   1f464:	bf0c      	ite	eq
   1f466:	2000      	moveq	r0, #0
   1f468:	f06f 003d 	mvnne.w	r0, #61	; 0x3d
   1f46c:	4770      	bx	lr
	}

	return 0;
   1f46e:	4608      	mov	r0, r1
}
   1f470:	4770      	bx	lr

0001f472 <net_bt_flags>:

static enum net_l2_flags net_bt_flags(struct net_if *iface)
{
	return NET_L2_MULTICAST | NET_L2_MULTICAST_SKIP_JOIN_SOLICIT_NODE;
}
   1f472:	2003      	movs	r0, #3
   1f474:	4770      	bx	lr

0001f476 <bt_iface_init>:
   1f476:	6803      	ldr	r3, [r0, #0]
	return ret;
}

static void bt_iface_init(struct net_if *iface)
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1f478:	681b      	ldr	r3, [r3, #0]

	NET_DBG("iface %p", iface);

	ctxt->iface = iface;
   1f47a:	689b      	ldr	r3, [r3, #8]
   1f47c:	6018      	str	r0, [r3, #0]
	/* Workaround Linux bug, see:
	 * https://github.com/zephyrproject-rtos/zephyr/issues/3111
	 */
	atomic_set_bit(iface->if_dev->flags, NET_IF_POINTOPOINT);
#endif
}
   1f47e:	4770      	bx	lr

0001f480 <net_bt_send>:
{
   1f480:	b538      	push	{r3, r4, r5, lr}
#endif
}

static inline u8_t net_pkt_family(struct net_pkt *pkt)
{
	return pkt->family;
   1f482:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
	if (net_pkt_family(pkt) != AF_INET6) {
   1f486:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1f48a:	2b0a      	cmp	r3, #10
{
   1f48c:	460c      	mov	r4, r1
	if (net_pkt_family(pkt) != AF_INET6) {
   1f48e:	d001      	beq.n	1f494 <net_bt_send+0x14>
		return NET_DROP;
   1f490:	2002      	movs	r0, #2
}
   1f492:	bd38      	pop	{r3, r4, r5, pc}
   1f494:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1f496:	681b      	ldr	r3, [r3, #0]
	if (!net_6lo_compress(pkt, true, NULL)) {
   1f498:	2200      	movs	r2, #0
   1f49a:	2101      	movs	r1, #1
   1f49c:	4620      	mov	r0, r4
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1f49e:	689d      	ldr	r5, [r3, #8]
	if (!net_6lo_compress(pkt, true, NULL)) {
   1f4a0:	f004 f8f6 	bl	23690 <net_6lo_compress>
   1f4a4:	2800      	cmp	r0, #0
   1f4a6:	d0f3      	beq.n	1f490 <net_bt_send+0x10>
	net_if_queue_tx(ctxt->iface, pkt);
   1f4a8:	6828      	ldr	r0, [r5, #0]
   1f4aa:	4621      	mov	r1, r4
   1f4ac:	f001 fc06 	bl	20cbc <net_if_queue_tx>
	return NET_OK;
   1f4b0:	2000      	movs	r0, #0
   1f4b2:	e7ee      	b.n	1f492 <net_bt_send+0x12>

0001f4b4 <net_bt_recv>:
{
   1f4b4:	b508      	push	{r3, lr}
	if (!net_6lo_uncompress(pkt)) {
   1f4b6:	4608      	mov	r0, r1
   1f4b8:	f004 fb9a 	bl	23bf0 <net_6lo_uncompress>
   1f4bc:	2800      	cmp	r0, #0
}
   1f4be:	bf0c      	ite	eq
   1f4c0:	2002      	moveq	r0, #2
   1f4c2:	2001      	movne	r0, #1
   1f4c4:	bd08      	pop	{r3, pc}

0001f4c6 <ipsp_recv>:
{
   1f4c6:	b570      	push	{r4, r5, r6, lr}
   1f4c8:	4605      	mov	r5, r0
   1f4ca:	460e      	mov	r6, r1
	pkt = net_pkt_get_reserve_rx(0, BUF_TIMEOUT);
   1f4cc:	2000      	movs	r0, #0
   1f4ce:	2132      	movs	r1, #50	; 0x32
   1f4d0:	f002 ffb4 	bl	2243c <net_pkt_get_reserve_rx>
	if (!pkt) {
   1f4d4:	4604      	mov	r4, r0
   1f4d6:	b1e0      	cbz	r0, 1f512 <ipsp_recv+0x4c>
	net_pkt_lladdr_dst(pkt)->addr = ctxt->src.val;
   1f4d8:	f105 0394 	add.w	r3, r5, #148	; 0x94
	net_pkt_lladdr_src(pkt)->addr = ctxt->dst.val;
   1f4dc:	f105 029a 	add.w	r2, r5, #154	; 0x9a
	net_pkt_lladdr_dst(pkt)->addr = ctxt->src.val;
   1f4e0:	6343      	str	r3, [r0, #52]	; 0x34
	net_pkt_lladdr_dst(pkt)->len = sizeof(ctxt->src);
   1f4e2:	f240 2306 	movw	r3, #518	; 0x206
   1f4e6:	8703      	strh	r3, [r0, #56]	; 0x38
	net_pkt_lladdr_src(pkt)->addr = ctxt->dst.val;
   1f4e8:	62c2      	str	r2, [r0, #44]	; 0x2c
	net_pkt_lladdr_src(pkt)->len = sizeof(ctxt->dst);
   1f4ea:	8603      	strh	r3, [r0, #48]	; 0x30
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   1f4ec:	4630      	mov	r0, r6
   1f4ee:	f7ff fedf 	bl	1f2b0 <net_buf_ref>
   1f4f2:	4601      	mov	r1, r0
   1f4f4:	4620      	mov	r0, r4
   1f4f6:	f003 f8a9 	bl	2264c <net_pkt_frag_add>
	if (net_recv_data(ctxt->iface, pkt) < 0) {
   1f4fa:	4621      	mov	r1, r4
   1f4fc:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1f500:	f001 fa14 	bl	2092c <net_recv_data>
   1f504:	2800      	cmp	r0, #0
   1f506:	da02      	bge.n	1f50e <ipsp_recv+0x48>
		net_pkt_unref(pkt);
   1f508:	4620      	mov	r0, r4
   1f50a:	f003 f878 	bl	225fe <net_pkt_unref>
	return 0;
   1f50e:	2000      	movs	r0, #0
   1f510:	e001      	b.n	1f516 <ipsp_recv+0x50>
		return -ENOMEM;
   1f512:	f06f 000b 	mvn.w	r0, #11
}
   1f516:	bd70      	pop	{r4, r5, r6, pc}

0001f518 <ipsp_alloc_buf>:
	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   1f518:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f51c:	2000      	movs	r0, #0
   1f51e:	f002 bf9d 	b.w	2245c <net_pkt_get_reserve_rx_data>
	...

0001f524 <ipsp_disconnected>:
{
   1f524:	b510      	push	{r4, lr}
   1f526:	4604      	mov	r4, r0
	net_if_carrier_down(ctxt->iface);
   1f528:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1f52c:	f002 fd22 	bl	21f74 <net_if_carrier_down>
	if (chan->conn != default_conn) {
   1f530:	6820      	ldr	r0, [r4, #0]
   1f532:	4c04      	ldr	r4, [pc, #16]	; (1f544 <ipsp_disconnected+0x20>)
   1f534:	6823      	ldr	r3, [r4, #0]
   1f536:	4298      	cmp	r0, r3
   1f538:	d103      	bne.n	1f542 <ipsp_disconnected+0x1e>
	bt_conn_unref(default_conn);
   1f53a:	f7eb fe71 	bl	b220 <bt_conn_unref>
	default_conn = NULL;
   1f53e:	2300      	movs	r3, #0
   1f540:	6023      	str	r3, [r4, #0]
}
   1f542:	bd10      	pop	{r4, pc}
   1f544:	2000219c 	.word	0x2000219c

0001f548 <disconnected>:
	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
			      L2CAP_IPSP_PSM);
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
   1f548:	b510      	push	{r4, lr}
	if (conn != default_conn) {
   1f54a:	4c04      	ldr	r4, [pc, #16]	; (1f55c <disconnected+0x14>)
   1f54c:	6823      	ldr	r3, [r4, #0]
   1f54e:	4283      	cmp	r3, r0
   1f550:	d103      	bne.n	1f55a <disconnected+0x12>

		NET_DBG("Disconnected: %s (reason %u)\n",
			log_strdup(addr), reason);
	}

	bt_conn_unref(default_conn);
   1f552:	f7eb fe65 	bl	b220 <bt_conn_unref>
	default_conn = NULL;
   1f556:	2300      	movs	r3, #0
   1f558:	6023      	str	r3, [r4, #0]
}
   1f55a:	bd10      	pop	{r4, pc}
   1f55c:	2000219c 	.word	0x2000219c

0001f560 <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   1f560:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   1f562:	4804      	ldr	r0, [pc, #16]	; (1f574 <net_bt_init+0x14>)
   1f564:	f7eb fa84 	bl	aa70 <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   1f568:	4803      	ldr	r0, [pc, #12]	; (1f578 <net_bt_init+0x18>)
   1f56a:	f7ec fc45 	bl	bdf8 <bt_l2cap_server_register>

	net_bt_shell_init();

	return 0;
}
   1f56e:	2000      	movs	r0, #0
   1f570:	bd08      	pop	{r3, pc}
   1f572:	bf00      	nop
   1f574:	2000dcb8 	.word	0x2000dcb8
   1f578:	2000dce8 	.word	0x2000dce8

0001f57c <bt_iface_send>:
   1f57c:	6802      	ldr	r2, [r0, #0]
{
   1f57e:	b538      	push	{r3, r4, r5, lr}
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1f580:	6812      	ldr	r2, [r2, #0]
	frags = pkt->frags;
   1f582:	694d      	ldr	r5, [r1, #20]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1f584:	6894      	ldr	r4, [r2, #8]
	pkt->frags = NULL;
   1f586:	2200      	movs	r2, #0
	net_pkt_unref(pkt);
   1f588:	4608      	mov	r0, r1
	pkt->frags = NULL;
   1f58a:	614a      	str	r2, [r1, #20]
	net_pkt_unref(pkt);
   1f58c:	f003 f837 	bl	225fe <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1f590:	4629      	mov	r1, r5
   1f592:	1d20      	adds	r0, r4, #4
}
   1f594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1f598:	f7ed ba60 	b.w	ca5c <bt_l2cap_chan_send>

0001f59c <ipsp_accept>:
{
   1f59c:	b508      	push	{r3, lr}
	if (bt_context_data.ipsp_chan.chan.conn) {
   1f59e:	4b0f      	ldr	r3, [pc, #60]	; (1f5dc <ipsp_accept+0x40>)
   1f5a0:	6858      	ldr	r0, [r3, #4]
   1f5a2:	b1b8      	cbz	r0, 1f5d4 <ipsp_accept+0x38>
		NET_ERR("No channels available");
   1f5a4:	4b0e      	ldr	r3, [pc, #56]	; (1f5e0 <ipsp_accept+0x44>)
   1f5a6:	681b      	ldr	r3, [r3, #0]
   1f5a8:	075b      	lsls	r3, r3, #29
   1f5aa:	d010      	beq.n	1f5ce <ipsp_accept+0x32>
   1f5ac:	2301      	movs	r3, #1
   1f5ae:	f04f 0200 	mov.w	r2, #0
   1f5b2:	f363 0202 	bfi	r2, r3, #0, #3
   1f5b6:	490b      	ldr	r1, [pc, #44]	; (1f5e4 <ipsp_accept+0x48>)
   1f5b8:	4b0b      	ldr	r3, [pc, #44]	; (1f5e8 <ipsp_accept+0x4c>)
   1f5ba:	480c      	ldr	r0, [pc, #48]	; (1f5ec <ipsp_accept+0x50>)
   1f5bc:	1a5b      	subs	r3, r3, r1
   1f5be:	f36f 02c5 	bfc	r2, #3, #3
   1f5c2:	08db      	lsrs	r3, r3, #3
   1f5c4:	f363 128f 	bfi	r2, r3, #6, #10
   1f5c8:	4909      	ldr	r1, [pc, #36]	; (1f5f0 <ipsp_accept+0x54>)
   1f5ca:	f7e2 fd8f 	bl	20ec <log_1>
		return -ENOMEM;
   1f5ce:	f06f 000b 	mvn.w	r0, #11
   1f5d2:	e001      	b.n	1f5d8 <ipsp_accept+0x3c>
	*chan = &bt_context_data.ipsp_chan.chan;
   1f5d4:	3304      	adds	r3, #4
   1f5d6:	600b      	str	r3, [r1, #0]
}
   1f5d8:	bd08      	pop	{r3, pc}
   1f5da:	bf00      	nop
   1f5dc:	2000dc0c 	.word	0x2000dc0c
   1f5e0:	2000e260 	.word	0x2000e260
   1f5e4:	0002ef38 	.word	0x0002ef38
   1f5e8:	0002f000 	.word	0x0002f000
   1f5ec:	000341cc 	.word	0x000341cc
   1f5f0:	000341af 	.word	0x000341af

0001f5f4 <connected>:
	if (err) {
   1f5f4:	b939      	cbnz	r1, 1f606 <connected+0x12>
	if (conn != default_conn) {
   1f5f6:	4b04      	ldr	r3, [pc, #16]	; (1f608 <connected+0x14>)
   1f5f8:	681b      	ldr	r3, [r3, #0]
   1f5fa:	4298      	cmp	r0, r3
   1f5fc:	d103      	bne.n	1f606 <connected+0x12>
	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   1f5fe:	2223      	movs	r2, #35	; 0x23
   1f600:	4902      	ldr	r1, [pc, #8]	; (1f60c <connected+0x18>)
   1f602:	f7ec bc6f 	b.w	bee4 <bt_l2cap_chan_connect>
}
   1f606:	4770      	bx	lr
   1f608:	2000219c 	.word	0x2000219c
   1f60c:	2000dc10 	.word	0x2000dc10

0001f610 <ipsp_connected>:
{
   1f610:	b570      	push	{r4, r5, r6, lr}
   1f612:	b08e      	sub	sp, #56	; 0x38
   1f614:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   1f616:	a909      	add	r1, sp, #36	; 0x24
   1f618:	6800      	ldr	r0, [r0, #0]
   1f61a:	f7eb fe04 	bl	b226 <bt_conn_get_info>
   1f61e:	2800      	cmp	r0, #0
   1f620:	da19      	bge.n	1f656 <ipsp_connected+0x46>
		NET_ERR("Unable to get connection info");
   1f622:	4b4c      	ldr	r3, [pc, #304]	; (1f754 <ipsp_connected+0x144>)
   1f624:	681b      	ldr	r3, [r3, #0]
   1f626:	0759      	lsls	r1, r3, #29
   1f628:	d010      	beq.n	1f64c <ipsp_connected+0x3c>
   1f62a:	2301      	movs	r3, #1
   1f62c:	f04f 0200 	mov.w	r2, #0
   1f630:	f363 0202 	bfi	r2, r3, #0, #3
   1f634:	4948      	ldr	r1, [pc, #288]	; (1f758 <ipsp_connected+0x148>)
   1f636:	4b49      	ldr	r3, [pc, #292]	; (1f75c <ipsp_connected+0x14c>)
   1f638:	4849      	ldr	r0, [pc, #292]	; (1f760 <ipsp_connected+0x150>)
   1f63a:	1a5b      	subs	r3, r3, r1
   1f63c:	f36f 02c5 	bfc	r2, #3, #3
   1f640:	08db      	lsrs	r3, r3, #3
   1f642:	f363 128f 	bfi	r2, r3, #6, #10
   1f646:	4947      	ldr	r1, [pc, #284]	; (1f764 <ipsp_connected+0x154>)
   1f648:	f7e2 fd50 	bl	20ec <log_1>
		bt_l2cap_chan_disconnect(chan);
   1f64c:	4620      	mov	r0, r4
   1f64e:	f7ec fc7b 	bl	bf48 <bt_l2cap_chan_disconnect>
}
   1f652:	b00e      	add	sp, #56	; 0x38
   1f654:	bd70      	pop	{r4, r5, r6, pc}
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   1f656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f658:	f104 0594 	add.w	r5, r4, #148	; 0x94
	psrc += length - 1;
   1f65c:	1d93      	adds	r3, r2, #6
   1f65e:	f104 0193 	add.w	r1, r4, #147	; 0x93
		*pdst++ = *psrc--;
   1f662:	f813 0901 	ldrb.w	r0, [r3], #-1
   1f666:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   1f66a:	429a      	cmp	r2, r3
   1f66c:	d1f9      	bne.n	1f662 <ipsp_connected+0x52>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   1f66e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f670:	f104 009a 	add.w	r0, r4, #154	; 0x9a
	psrc += length - 1;
   1f674:	1d93      	adds	r3, r2, #6
   1f676:	f104 0199 	add.w	r1, r4, #153	; 0x99
		*pdst++ = *psrc--;
   1f67a:	f813 6901 	ldrb.w	r6, [r3], #-1
   1f67e:	f801 6f01 	strb.w	r6, [r1, #1]!
	for (; length > 0; length--) {
   1f682:	429a      	cmp	r2, r3
   1f684:	d1f9      	bne.n	1f67a <ipsp_connected+0x6a>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   1f686:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f68a:	681a      	ldr	r2, [r3, #0]
   1f68c:	f3bf 8f5b 	dmb	ish
   1f690:	68d2      	ldr	r2, [r2, #12]
   1f692:	f3bf 8f5b 	dmb	ish
 */
static inline int net_if_set_link_addr(struct net_if *iface,
				       u8_t *addr, u8_t len,
				       enum net_link_type type)
{
	if (atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   1f696:	07d2      	lsls	r2, r2, #31
   1f698:	d405      	bmi.n	1f6a6 <ipsp_connected+0x96>
		return -EPERM;
	}

	net_if_get_link_addr(iface)->addr = addr;
   1f69a:	681b      	ldr	r3, [r3, #0]
	net_if_get_link_addr(iface)->len = len;
   1f69c:	2206      	movs	r2, #6
   1f69e:	751a      	strb	r2, [r3, #20]
	net_if_get_link_addr(iface)->type = type;
   1f6a0:	2202      	movs	r2, #2
	net_if_get_link_addr(iface)->addr = addr;
   1f6a2:	611d      	str	r5, [r3, #16]
	net_if_get_link_addr(iface)->type = type;
   1f6a4:	755a      	strb	r2, [r3, #21]
	ll.len = sizeof(ctxt->dst.val);
   1f6a6:	f240 2306 	movw	r3, #518	; 0x206
   1f6aa:	f8ad 3010 	strh.w	r3, [sp, #16]
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
   1f6ae:	f248 03fe 	movw	r3, #33022	; 0x80fe
	ll.addr = ctxt->dst.val;
   1f6b2:	9003      	str	r0, [sp, #12]
   1f6b4:	9305      	str	r3, [sp, #20]
	addr->s6_addr[1] = 0x80;
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1f6b6:	2300      	movs	r3, #0
   1f6b8:	9306      	str	r3, [sp, #24]

	switch (lladdr->len) {
   1f6ba:	f89d 2010 	ldrb.w	r2, [sp, #16]
   1f6be:	2a06      	cmp	r2, #6
   1f6c0:	d025      	beq.n	1f70e <ipsp_connected+0xfe>
   1f6c2:	2a08      	cmp	r2, #8
   1f6c4:	d040      	beq.n	1f748 <ipsp_connected+0x138>
   1f6c6:	2a02      	cmp	r2, #2
   1f6c8:	d113      	bne.n	1f6f2 <ipsp_connected+0xe2>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
   1f6ca:	f89d 2011 	ldrb.w	r2, [sp, #17]
   1f6ce:	2a01      	cmp	r2, #1
   1f6d0:	d10f      	bne.n	1f6f2 <ipsp_connected+0xe2>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1f6d2:	9307      	str	r3, [sp, #28]
			addr->s6_addr[11] = 0xff;
   1f6d4:	22ff      	movs	r2, #255	; 0xff
   1f6d6:	f88d 201f 	strb.w	r2, [sp, #31]
			addr->s6_addr[12] = 0xfe;
			addr->s6_addr[13] = 0;
   1f6da:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			addr->s6_addr[12] = 0xfe;
   1f6de:	22fe      	movs	r2, #254	; 0xfe
			addr->s6_addr[14] = lladdr->addr[0];
   1f6e0:	9b03      	ldr	r3, [sp, #12]
			addr->s6_addr[12] = 0xfe;
   1f6e2:	f88d 2020 	strb.w	r2, [sp, #32]
			addr->s6_addr[14] = lladdr->addr[0];
   1f6e6:	781a      	ldrb	r2, [r3, #0]
   1f6e8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
			addr->s6_addr[15] = lladdr->addr[1];
   1f6ec:	785b      	ldrb	r3, [r3, #1]
   1f6ee:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   1f6f2:	2305      	movs	r3, #5
   1f6f4:	9300      	str	r3, [sp, #0]
   1f6f6:	aa03      	add	r2, sp, #12
   1f6f8:	2300      	movs	r3, #0
   1f6fa:	a905      	add	r1, sp, #20
   1f6fc:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1f700:	f006 fd1e 	bl	26140 <net_ipv6_nbr_add>
	net_if_up(ctxt->iface);
   1f704:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1f708:	f002 fc06 	bl	21f18 <net_if_up>
   1f70c:	e7a1      	b.n	1f652 <ipsp_connected+0x42>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1f70e:	2203      	movs	r2, #3
   1f710:	9903      	ldr	r1, [sp, #12]
   1f712:	a807      	add	r0, sp, #28
   1f714:	f7e7 fab8 	bl	6c88 <memcpy>
		addr->s6_addr[11] = 0xff;
		addr->s6_addr[12] = 0xfe;
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1f718:	9903      	ldr	r1, [sp, #12]
		addr->s6_addr[11] = 0xff;
   1f71a:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1f71c:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
   1f71e:	f88d 301f 	strb.w	r3, [sp, #31]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1f722:	4411      	add	r1, r2
		addr->s6_addr[12] = 0xfe;
   1f724:	23fe      	movs	r3, #254	; 0xfe
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1f726:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		addr->s6_addr[12] = 0xfe;
   1f72a:	f88d 3020 	strb.w	r3, [sp, #32]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1f72e:	f7e7 faab 	bl	6c88 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   1f732:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1f736:	2b03      	cmp	r3, #3
   1f738:	d1db      	bne.n	1f6f2 <ipsp_connected+0xe2>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
		addr->s6_addr[8] ^= 0x02;
   1f73a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1f73e:	f083 0302 	eor.w	r3, r3, #2
   1f742:	f88d 301c 	strb.w	r3, [sp, #28]
   1f746:	e7d4      	b.n	1f6f2 <ipsp_connected+0xe2>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1f748:	9903      	ldr	r1, [sp, #12]
   1f74a:	a807      	add	r0, sp, #28
   1f74c:	f7e7 fa9c 	bl	6c88 <memcpy>
   1f750:	e7f3      	b.n	1f73a <ipsp_connected+0x12a>
   1f752:	bf00      	nop
   1f754:	2000e260 	.word	0x2000e260
   1f758:	0002ef38 	.word	0x0002ef38
   1f75c:	0002f000 	.word	0x0002f000
   1f760:	000341e6 	.word	0x000341e6
   1f764:	000341a0 	.word	0x000341a0

0001f768 <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   1f768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!strcmp(data, "on")) {
   1f76a:	4912      	ldr	r1, [pc, #72]	; (1f7b4 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4c>)
   1f76c:	4610      	mov	r0, r2
{
   1f76e:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   1f770:	f7e7 fa3c 	bl	6bec <strcmp>
   1f774:	b998      	cbnz	r0, 1f79e <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x36>
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   1f776:	22a0      	movs	r2, #160	; 0xa0
   1f778:	2301      	movs	r3, #1
   1f77a:	f8ad 200a 	strh.w	r2, [sp, #10]
   1f77e:	22f0      	movs	r2, #240	; 0xf0
   1f780:	f8ad 0008 	strh.w	r0, [sp, #8]
   1f784:	f8ad 200c 	strh.w	r2, [sp, #12]
   1f788:	f88d 3009 	strb.w	r3, [sp, #9]
   1f78c:	9300      	str	r3, [sp, #0]
   1f78e:	2202      	movs	r2, #2
   1f790:	4b09      	ldr	r3, [pc, #36]	; (1f7b8 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x50>)
   1f792:	490a      	ldr	r1, [pc, #40]	; (1f7bc <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   1f794:	a802      	add	r0, sp, #8
   1f796:	f7ea ff13 	bl	a5c0 <bt_le_adv_start>
}
   1f79a:	b004      	add	sp, #16
   1f79c:	bd10      	pop	{r4, pc}
	} else if (!strcmp(data, "off")) {
   1f79e:	4908      	ldr	r1, [pc, #32]	; (1f7c0 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   1f7a0:	4620      	mov	r0, r4
   1f7a2:	f7e7 fa23 	bl	6bec <strcmp>
   1f7a6:	b910      	cbnz	r0, 1f7ae <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x46>
		return bt_le_adv_stop();
   1f7a8:	f7ea ff1a 	bl	a5e0 <bt_le_adv_stop>
   1f7ac:	e7f5      	b.n	1f79a <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x32>
		return -EINVAL;
   1f7ae:	f06f 0015 	mvn.w	r0, #21
   1f7b2:	e7f2      	b.n	1f79a <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x32>
   1f7b4:	0003201f 	.word	0x0003201f
   1f7b8:	00034208 	.word	0x00034208
   1f7bc:	000341bc 	.word	0x000341bc
   1f7c0:	0002fec5 	.word	0x0002fec5

0001f7c4 <net_is_ipv6_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f7c4:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f7c6:	b942      	cbnz	r2, 1f7da <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f7c8:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f7ca:	b933      	cbnz	r3, 1f7da <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f7cc:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f7ce:	b922      	cbnz	r2, 1f7da <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1f7d0:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f7d2:	fab0 f080 	clz	r0, r0
   1f7d6:	0940      	lsrs	r0, r0, #5
   1f7d8:	4770      	bx	lr
   1f7da:	2000      	movs	r0, #0
   1f7dc:	4770      	bx	lr
	...

0001f7e0 <net_context_is_used>:
{
   1f7e0:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1f7e2:	4604      	mov	r4, r0
   1f7e4:	b9a0      	cbnz	r0, 1f810 <net_context_is_used+0x30>
   1f7e6:	4b0d      	ldr	r3, [pc, #52]	; (1f81c <net_context_is_used+0x3c>)
   1f7e8:	681b      	ldr	r3, [r3, #0]
   1f7ea:	075b      	lsls	r3, r3, #29
   1f7ec:	d010      	beq.n	1f810 <net_context_is_used+0x30>
   1f7ee:	2301      	movs	r3, #1
   1f7f0:	f04f 0200 	mov.w	r2, #0
   1f7f4:	f363 0202 	bfi	r2, r3, #0, #3
   1f7f8:	4909      	ldr	r1, [pc, #36]	; (1f820 <net_context_is_used+0x40>)
   1f7fa:	4b0a      	ldr	r3, [pc, #40]	; (1f824 <net_context_is_used+0x44>)
   1f7fc:	1a5b      	subs	r3, r3, r1
   1f7fe:	f360 02c5 	bfi	r2, r0, #3, #3
   1f802:	08db      	lsrs	r3, r3, #3
   1f804:	f363 128f 	bfi	r2, r3, #6, #10
   1f808:	4907      	ldr	r1, [pc, #28]	; (1f828 <net_context_is_used+0x48>)
   1f80a:	4808      	ldr	r0, [pc, #32]	; (1f82c <net_context_is_used+0x4c>)
   1f80c:	f7e2 fc6e 	bl	20ec <log_1>
	return context->flags & NET_CONTEXT_IN_USE;
   1f810:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
}
   1f814:	f000 0001 	and.w	r0, r0, #1
   1f818:	bd10      	pop	{r4, pc}
   1f81a:	bf00      	nop
   1f81c:	2000e278 	.word	0x2000e278
   1f820:	0002ef38 	.word	0x0002ef38
   1f824:	0002f030 	.word	0x0002f030
   1f828:	00034268 	.word	0x00034268
   1f82c:	00030684 	.word	0x00030684

0001f830 <net_context_get_ip_proto>:
{
   1f830:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1f832:	4604      	mov	r4, r0
   1f834:	b9a0      	cbnz	r0, 1f860 <net_context_get_ip_proto+0x30>
   1f836:	4b0e      	ldr	r3, [pc, #56]	; (1f870 <net_context_get_ip_proto+0x40>)
   1f838:	681b      	ldr	r3, [r3, #0]
   1f83a:	075b      	lsls	r3, r3, #29
   1f83c:	d010      	beq.n	1f860 <net_context_get_ip_proto+0x30>
   1f83e:	2301      	movs	r3, #1
   1f840:	f04f 0200 	mov.w	r2, #0
   1f844:	f363 0202 	bfi	r2, r3, #0, #3
   1f848:	490a      	ldr	r1, [pc, #40]	; (1f874 <net_context_get_ip_proto+0x44>)
   1f84a:	4b0b      	ldr	r3, [pc, #44]	; (1f878 <net_context_get_ip_proto+0x48>)
   1f84c:	1a5b      	subs	r3, r3, r1
   1f84e:	f360 02c5 	bfi	r2, r0, #3, #3
   1f852:	08db      	lsrs	r3, r3, #3
   1f854:	f363 128f 	bfi	r2, r3, #6, #10
   1f858:	4908      	ldr	r1, [pc, #32]	; (1f87c <net_context_get_ip_proto+0x4c>)
   1f85a:	4809      	ldr	r0, [pc, #36]	; (1f880 <net_context_get_ip_proto+0x50>)
   1f85c:	f7e2 fc46 	bl	20ec <log_1>
	if (context->flags & NET_CONTEXT_PROTO) {
   1f860:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
	return IPPROTO_UDP;
   1f864:	f013 0f40 	tst.w	r3, #64	; 0x40
}
   1f868:	bf14      	ite	ne
   1f86a:	2006      	movne	r0, #6
   1f86c:	2011      	moveq	r0, #17
   1f86e:	bd10      	pop	{r4, pc}
   1f870:	2000e278 	.word	0x2000e278
   1f874:	0002ef38 	.word	0x0002ef38
   1f878:	0002f030 	.word	0x0002f030
   1f87c:	000342be 	.word	0x000342be
   1f880:	00030684 	.word	0x00030684

0001f884 <net_context_get_state>:
{
   1f884:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1f886:	4604      	mov	r4, r0
   1f888:	b9a0      	cbnz	r0, 1f8b4 <net_context_get_state+0x30>
   1f88a:	4b0d      	ldr	r3, [pc, #52]	; (1f8c0 <net_context_get_state+0x3c>)
   1f88c:	681b      	ldr	r3, [r3, #0]
   1f88e:	075b      	lsls	r3, r3, #29
   1f890:	d010      	beq.n	1f8b4 <net_context_get_state+0x30>
   1f892:	2301      	movs	r3, #1
   1f894:	f04f 0200 	mov.w	r2, #0
   1f898:	f363 0202 	bfi	r2, r3, #0, #3
   1f89c:	4909      	ldr	r1, [pc, #36]	; (1f8c4 <net_context_get_state+0x40>)
   1f89e:	4b0a      	ldr	r3, [pc, #40]	; (1f8c8 <net_context_get_state+0x44>)
   1f8a0:	1a5b      	subs	r3, r3, r1
   1f8a2:	f360 02c5 	bfi	r2, r0, #3, #3
   1f8a6:	08db      	lsrs	r3, r3, #3
   1f8a8:	f363 128f 	bfi	r2, r3, #6, #10
   1f8ac:	4907      	ldr	r1, [pc, #28]	; (1f8cc <net_context_get_state+0x48>)
   1f8ae:	4808      	ldr	r0, [pc, #32]	; (1f8d0 <net_context_get_state+0x4c>)
   1f8b0:	f7e2 fc1c 	bl	20ec <log_1>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1f8b4:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
}
   1f8b8:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1f8bc:	bd10      	pop	{r4, pc}
   1f8be:	bf00      	nop
   1f8c0:	2000e278 	.word	0x2000e278
   1f8c4:	0002ef38 	.word	0x0002ef38
   1f8c8:	0002f030 	.word	0x0002f030
   1f8cc:	0003427c 	.word	0x0003427c
   1f8d0:	00030684 	.word	0x00030684

0001f8d4 <net_context_get_family>:
{
   1f8d4:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1f8d6:	4604      	mov	r4, r0
   1f8d8:	b9a0      	cbnz	r0, 1f904 <net_context_get_family+0x30>
   1f8da:	4b0e      	ldr	r3, [pc, #56]	; (1f914 <net_context_get_family+0x40>)
   1f8dc:	681b      	ldr	r3, [r3, #0]
   1f8de:	075b      	lsls	r3, r3, #29
   1f8e0:	d010      	beq.n	1f904 <net_context_get_family+0x30>
   1f8e2:	2301      	movs	r3, #1
   1f8e4:	f04f 0200 	mov.w	r2, #0
   1f8e8:	f363 0202 	bfi	r2, r3, #0, #3
   1f8ec:	490a      	ldr	r1, [pc, #40]	; (1f918 <net_context_get_family+0x44>)
   1f8ee:	4b0b      	ldr	r3, [pc, #44]	; (1f91c <net_context_get_family+0x48>)
   1f8f0:	1a5b      	subs	r3, r3, r1
   1f8f2:	f360 02c5 	bfi	r2, r0, #3, #3
   1f8f6:	08db      	lsrs	r3, r3, #3
   1f8f8:	f363 128f 	bfi	r2, r3, #6, #10
   1f8fc:	4908      	ldr	r1, [pc, #32]	; (1f920 <net_context_get_family+0x4c>)
   1f8fe:	4809      	ldr	r0, [pc, #36]	; (1f924 <net_context_get_family+0x50>)
   1f900:	f7e2 fbf4 	bl	20ec <log_1>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1f904:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
	return AF_INET;
   1f908:	f013 0f10 	tst.w	r3, #16
}
   1f90c:	bf14      	ite	ne
   1f90e:	200a      	movne	r0, #10
   1f910:	2002      	moveq	r0, #2
   1f912:	bd10      	pop	{r4, pc}
   1f914:	2000e278 	.word	0x2000e278
   1f918:	0002ef38 	.word	0x0002ef38
   1f91c:	0002f030 	.word	0x0002f030
   1f920:	00034292 	.word	0x00034292
   1f924:	00030684 	.word	0x00030684

0001f928 <net_context_get_type>:
{
   1f928:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1f92a:	4604      	mov	r4, r0
   1f92c:	b9a0      	cbnz	r0, 1f958 <net_context_get_type+0x30>
   1f92e:	4b0e      	ldr	r3, [pc, #56]	; (1f968 <net_context_get_type+0x40>)
   1f930:	681b      	ldr	r3, [r3, #0]
   1f932:	075b      	lsls	r3, r3, #29
   1f934:	d010      	beq.n	1f958 <net_context_get_type+0x30>
   1f936:	2301      	movs	r3, #1
   1f938:	f04f 0200 	mov.w	r2, #0
   1f93c:	f363 0202 	bfi	r2, r3, #0, #3
   1f940:	490a      	ldr	r1, [pc, #40]	; (1f96c <net_context_get_type+0x44>)
   1f942:	4b0b      	ldr	r3, [pc, #44]	; (1f970 <net_context_get_type+0x48>)
   1f944:	1a5b      	subs	r3, r3, r1
   1f946:	f360 02c5 	bfi	r2, r0, #3, #3
   1f94a:	08db      	lsrs	r3, r3, #3
   1f94c:	f363 128f 	bfi	r2, r3, #6, #10
   1f950:	4908      	ldr	r1, [pc, #32]	; (1f974 <net_context_get_type+0x4c>)
   1f952:	4809      	ldr	r0, [pc, #36]	; (1f978 <net_context_get_type+0x50>)
   1f954:	f7e2 fbca 	bl	20ec <log_1>
	if (context->flags & NET_CONTEXT_TYPE) {
   1f958:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
	return SOCK_DGRAM;
   1f95c:	f013 0f20 	tst.w	r3, #32
}
   1f960:	bf14      	ite	ne
   1f962:	2001      	movne	r0, #1
   1f964:	2002      	moveq	r0, #2
   1f966:	bd10      	pop	{r4, pc}
   1f968:	2000e278 	.word	0x2000e278
   1f96c:	0002ef38 	.word	0x0002ef38
   1f970:	0002f030 	.word	0x0002f030
   1f974:	000342a9 	.word	0x000342a9
   1f978:	00030684 	.word	0x00030684

0001f97c <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   1f97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f980:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1f9e0 <check_used_port+0x64>
   1f984:	4607      	mov	r7, r0
   1f986:	4688      	mov	r8, r1
   1f988:	4616      	mov	r6, r2
   1f98a:	2400      	movs	r4, #0

		if (local_addr->sa_family == AF_INET6) {
			if (net_ipv6_addr_cmp(
				    net_sin6_ptr(&contexts[i].local)->
							     sin6_addr,
				    &((struct sockaddr_in6 *)
   1f98c:	f102 0a04 	add.w	sl, r2, #4
   1f990:	eb09 0504 	add.w	r5, r9, r4
		if (!net_context_is_used(&contexts[i])) {
   1f994:	4628      	mov	r0, r5
   1f996:	f7ff ff23 	bl	1f7e0 <net_context_is_used>
   1f99a:	b930      	cbnz	r0, 1f9aa <check_used_port+0x2e>
   1f99c:	3468      	adds	r4, #104	; 0x68
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1f99e:	f5b4 7f02 	cmp.w	r4, #520	; 0x208
   1f9a2:	d1f5      	bne.n	1f990 <check_used_port+0x14>
				return -EEXIST;
			}
		}
	}

	return 0;
   1f9a4:	2000      	movs	r0, #0
}
   1f9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1f9aa:	4628      	mov	r0, r5
   1f9ac:	f7ff ff40 	bl	1f830 <net_context_get_ip_proto>
   1f9b0:	42b8      	cmp	r0, r7
   1f9b2:	d1f3      	bne.n	1f99c <check_used_port+0x20>
   1f9b4:	896b      	ldrh	r3, [r5, #10]
   1f9b6:	4543      	cmp	r3, r8
   1f9b8:	d1f0      	bne.n	1f99c <check_used_port+0x20>
		if (local_addr->sa_family == AF_INET6) {
   1f9ba:	8833      	ldrh	r3, [r6, #0]
   1f9bc:	68e8      	ldr	r0, [r5, #12]
   1f9be:	2b0a      	cmp	r3, #10
   1f9c0:	d108      	bne.n	1f9d4 <check_used_port+0x58>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1f9c2:	2210      	movs	r2, #16
   1f9c4:	4651      	mov	r1, sl
   1f9c6:	f7e7 f938 	bl	6c3a <memcmp>
			if (net_ipv6_addr_cmp(
   1f9ca:	2800      	cmp	r0, #0
   1f9cc:	d1e6      	bne.n	1f99c <check_used_port+0x20>
				return -EEXIST;
   1f9ce:	f06f 0010 	mvn.w	r0, #16
   1f9d2:	e7e8      	b.n	1f9a6 <check_used_port+0x2a>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1f9d4:	6872      	ldr	r2, [r6, #4]
   1f9d6:	6803      	ldr	r3, [r0, #0]
			if (net_ipv4_addr_cmp(
   1f9d8:	429a      	cmp	r2, r3
   1f9da:	d1df      	bne.n	1f99c <check_used_port+0x20>
   1f9dc:	e7f7      	b.n	1f9ce <check_used_port+0x52>
   1f9de:	bf00      	nop
   1f9e0:	200021a0 	.word	0x200021a0

0001f9e4 <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1f9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u16_t local_port;

	do {
		local_port = sys_rand32_get() | 0x8000;
   1f9e6:	4e0a      	ldr	r6, [pc, #40]	; (1fa10 <find_available_port+0x2c>)
{
   1f9e8:	4607      	mov	r7, r0
   1f9ea:	460d      	mov	r5, r1
		local_port = sys_rand32_get() | 0x8000;
   1f9ec:	f7e6 f9d2 	bl	5d94 <sys_rand32_get>
   1f9f0:	4604      	mov	r4, r0
   1f9f2:	4334      	orrs	r4, r6
   1f9f4:	ba64      	rev16	r4, r4
		if (local_port <= 1023) {
			/* 0 - 1023 ports are reserved */
			continue;
		}
	} while (check_used_port(
   1f9f6:	4638      	mov	r0, r7
   1f9f8:	b2a4      	uxth	r4, r4
   1f9fa:	f7ff ff19 	bl	1f830 <net_context_get_ip_proto>
   1f9fe:	462a      	mov	r2, r5
   1fa00:	4621      	mov	r1, r4
   1fa02:	f7ff ffbb 	bl	1f97c <check_used_port>
				net_context_get_ip_proto(context),
				htons(local_port), addr) == -EEXIST);
   1fa06:	3011      	adds	r0, #17
   1fa08:	d0f0      	beq.n	1f9ec <find_available_port+0x8>

	return htons(local_port);
}
   1fa0a:	4620      	mov	r0, r4
   1fa0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fa0e:	bf00      	nop
   1fa10:	ffff8000 	.word	0xffff8000

0001fa14 <net_context_set_iface.isra.10>:
static inline void net_context_set_iface(struct net_context *context,
   1fa14:	b538      	push	{r3, r4, r5, lr}
   1fa16:	4605      	mov	r5, r0
	NET_ASSERT(iface);
   1fa18:	460c      	mov	r4, r1
   1fa1a:	b9a1      	cbnz	r1, 1fa46 <net_context_set_iface.isra.10+0x32>
   1fa1c:	4b0c      	ldr	r3, [pc, #48]	; (1fa50 <net_context_set_iface.isra.10+0x3c>)
   1fa1e:	681b      	ldr	r3, [r3, #0]
   1fa20:	075b      	lsls	r3, r3, #29
   1fa22:	d010      	beq.n	1fa46 <net_context_set_iface.isra.10+0x32>
   1fa24:	2301      	movs	r3, #1
   1fa26:	f04f 0200 	mov.w	r2, #0
   1fa2a:	f363 0202 	bfi	r2, r3, #0, #3
   1fa2e:	f361 02c5 	bfi	r2, r1, #3, #3
   1fa32:	4b08      	ldr	r3, [pc, #32]	; (1fa54 <net_context_set_iface.isra.10+0x40>)
   1fa34:	4908      	ldr	r1, [pc, #32]	; (1fa58 <net_context_set_iface.isra.10+0x44>)
   1fa36:	4809      	ldr	r0, [pc, #36]	; (1fa5c <net_context_set_iface.isra.10+0x48>)
   1fa38:	1a5b      	subs	r3, r3, r1
   1fa3a:	08db      	lsrs	r3, r3, #3
   1fa3c:	f363 128f 	bfi	r2, r3, #6, #10
   1fa40:	4907      	ldr	r1, [pc, #28]	; (1fa60 <net_context_set_iface.isra.10+0x4c>)
   1fa42:	f7e2 fb53 	bl	20ec <log_1>
	context->iface = net_if_get_by_iface(iface);
   1fa46:	4620      	mov	r0, r4
   1fa48:	f002 fa1e 	bl	21e88 <net_if_get_by_iface>
   1fa4c:	7028      	strb	r0, [r5, #0]
}
   1fa4e:	bd38      	pop	{r3, r4, r5, pc}
   1fa50:	2000e278 	.word	0x2000e278
   1fa54:	0002f030 	.word	0x0002f030
   1fa58:	0002ef38 	.word	0x0002ef38
   1fa5c:	000346d4 	.word	0x000346d4
   1fa60:	000342d7 	.word	0x000342d7

0001fa64 <net_context_packet_received>:
}

enum net_verdict net_context_packet_received(struct net_conn *conn,
					     struct net_pkt *pkt,
					     void *user_data)
{
   1fa64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fa68:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1fb44 <net_context_packet_received+0xe0>
   1fa6c:	4680      	mov	r8, r0
   1fa6e:	460d      	mov	r5, r1
   1fa70:	4616      	mov	r6, r2
   1fa72:	2700      	movs	r7, #0
   1fa74:	eb09 0407 	add.w	r4, r9, r7
		if (!net_context_is_used(&contexts[i])) {
   1fa78:	4620      	mov	r0, r4
   1fa7a:	f7ff feb1 	bl	1f7e0 <net_context_is_used>
   1fa7e:	b110      	cbz	r0, 1fa86 <net_context_packet_received+0x22>
		if (contexts[i].conn_handler == conn_handler) {
   1fa80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1fa82:	4598      	cmp	r8, r3
   1fa84:	d01a      	beq.n	1fabc <net_context_packet_received+0x58>
   1fa86:	3768      	adds	r7, #104	; 0x68
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1fa88:	f5b7 7f02 	cmp.w	r7, #520	; 0x208
   1fa8c:	d1f2      	bne.n	1fa74 <net_context_packet_received+0x10>
	struct net_context *context = find_context(conn);

	NET_ASSERT(context);
   1fa8e:	4b27      	ldr	r3, [pc, #156]	; (1fb2c <net_context_packet_received+0xc8>)
   1fa90:	681c      	ldr	r4, [r3, #0]
   1fa92:	f014 0407 	ands.w	r4, r4, #7
   1fa96:	d011      	beq.n	1fabc <net_context_packet_received+0x58>
   1fa98:	2301      	movs	r3, #1
   1fa9a:	f04f 0200 	mov.w	r2, #0
   1fa9e:	f363 0202 	bfi	r2, r3, #0, #3
   1faa2:	4923      	ldr	r1, [pc, #140]	; (1fb30 <net_context_packet_received+0xcc>)
   1faa4:	4b23      	ldr	r3, [pc, #140]	; (1fb34 <net_context_packet_received+0xd0>)
   1faa6:	4824      	ldr	r0, [pc, #144]	; (1fb38 <net_context_packet_received+0xd4>)
   1faa8:	1a5b      	subs	r3, r3, r1
   1faaa:	08db      	lsrs	r3, r3, #3
   1faac:	f36f 02c5 	bfc	r2, #3, #3
   1fab0:	f363 128f 	bfi	r2, r3, #6, #10
   1fab4:	4921      	ldr	r1, [pc, #132]	; (1fb3c <net_context_packet_received+0xd8>)
   1fab6:	f7e2 fb19 	bl	20ec <log_1>
	return NULL;
   1faba:	2400      	movs	r4, #0
	NET_ASSERT(net_pkt_iface(pkt));
   1fabc:	6a2b      	ldr	r3, [r5, #32]
   1fabe:	b9a3      	cbnz	r3, 1faea <net_context_packet_received+0x86>
   1fac0:	4a1a      	ldr	r2, [pc, #104]	; (1fb2c <net_context_packet_received+0xc8>)
   1fac2:	6812      	ldr	r2, [r2, #0]
   1fac4:	0752      	lsls	r2, r2, #29
   1fac6:	d010      	beq.n	1faea <net_context_packet_received+0x86>
   1fac8:	2101      	movs	r1, #1
   1faca:	f04f 0200 	mov.w	r2, #0
   1face:	f361 0202 	bfi	r2, r1, #0, #3
   1fad2:	f363 02c5 	bfi	r2, r3, #3, #3
   1fad6:	4916      	ldr	r1, [pc, #88]	; (1fb30 <net_context_packet_received+0xcc>)
   1fad8:	4b16      	ldr	r3, [pc, #88]	; (1fb34 <net_context_packet_received+0xd0>)
   1fada:	4819      	ldr	r0, [pc, #100]	; (1fb40 <net_context_packet_received+0xdc>)
   1fadc:	1a5b      	subs	r3, r3, r1
   1fade:	08db      	lsrs	r3, r3, #3
   1fae0:	f363 128f 	bfi	r2, r3, #6, #10
   1fae4:	4915      	ldr	r1, [pc, #84]	; (1fb3c <net_context_packet_received+0xd8>)
   1fae6:	f7e2 fb01 	bl	20ec <log_1>

	net_context_set_iface(context, net_pkt_iface(pkt));
   1faea:	6a29      	ldr	r1, [r5, #32]
   1faec:	f104 0064 	add.w	r0, r4, #100	; 0x64
   1faf0:	f7ff ff90 	bl	1fa14 <net_context_set_iface.isra.10>

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   1faf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
	pkt->context = ctx;
   1faf6:	61ac      	str	r4, [r5, #24]
   1faf8:	b1ab      	cbz	r3, 1fb26 <net_context_packet_received+0xc2>
		return NET_DROP;
	}

	if (net_context_get_ip_proto(context) != IPPROTO_TCP) {
   1fafa:	4620      	mov	r0, r4
   1fafc:	f7ff fe98 	bl	1f830 <net_context_get_ip_proto>
   1fb00:	2806      	cmp	r0, #6
   1fb02:	d003      	beq.n	1fb0c <net_context_packet_received+0xa8>
		/* TCP packets get appdata earlier in tcp_established(). */
		net_pkt_set_appdata_values(pkt, IPPROTO_UDP);
   1fb04:	2111      	movs	r1, #17
   1fb06:	4628      	mov	r0, r5
   1fb08:	f003 f8b6 	bl	22c78 <net_pkt_set_appdata_values>

	NET_DBG("Set appdata %p to len %u (total %zu)",
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	context->recv_cb(context, pkt, 0, user_data);
   1fb0c:	4633      	mov	r3, r6
   1fb0e:	2200      	movs	r2, #0
   1fb10:	4629      	mov	r1, r5
   1fb12:	4620      	mov	r0, r4
   1fb14:	6b27      	ldr	r7, [r4, #48]	; 0x30
   1fb16:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1fb18:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1fb1c:	f00e fbad 	bl	2e27a <_impl_k_sem_give>

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   1fb20:	2000      	movs	r0, #0
}
   1fb22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NET_DROP;
   1fb26:	2002      	movs	r0, #2
   1fb28:	e7fb      	b.n	1fb22 <net_context_packet_received+0xbe>
   1fb2a:	bf00      	nop
   1fb2c:	2000e278 	.word	0x2000e278
   1fb30:	0002ef38 	.word	0x0002ef38
   1fb34:	0002f030 	.word	0x0002f030
   1fb38:	00030684 	.word	0x00030684
   1fb3c:	0003423b 	.word	0x0003423b
   1fb40:	000346aa 	.word	0x000346aa
   1fb44:	200021a0 	.word	0x200021a0

0001fb48 <net_context_get>:
{
   1fb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (family == AF_INET) {
   1fb4c:	2802      	cmp	r0, #2
{
   1fb4e:	b085      	sub	sp, #20
   1fb50:	468a      	mov	sl, r1
   1fb52:	4691      	mov	r9, r2
   1fb54:	4698      	mov	r8, r3
	if (family == AF_INET) {
   1fb56:	d117      	bne.n	1fb88 <net_context_get+0x40>
		NET_ASSERT_INFO(family != AF_INET, "IPv4 disabled");
   1fb58:	4b99      	ldr	r3, [pc, #612]	; (1fdc0 <net_context_get+0x278>)
   1fb5a:	681b      	ldr	r3, [r3, #0]
   1fb5c:	075d      	lsls	r5, r3, #29
   1fb5e:	d010      	beq.n	1fb82 <net_context_get+0x3a>
   1fb60:	2301      	movs	r3, #1
   1fb62:	f04f 0200 	mov.w	r2, #0
   1fb66:	f363 0202 	bfi	r2, r3, #0, #3
   1fb6a:	4996      	ldr	r1, [pc, #600]	; (1fdc4 <net_context_get+0x27c>)
   1fb6c:	4b96      	ldr	r3, [pc, #600]	; (1fdc8 <net_context_get+0x280>)
   1fb6e:	4897      	ldr	r0, [pc, #604]	; (1fdcc <net_context_get+0x284>)
   1fb70:	1a5b      	subs	r3, r3, r1
   1fb72:	f36f 02c5 	bfc	r2, #3, #3
   1fb76:	08db      	lsrs	r3, r3, #3
   1fb78:	f363 128f 	bfi	r2, r3, #6, #10
   1fb7c:	4994      	ldr	r1, [pc, #592]	; (1fdd0 <net_context_get+0x288>)
   1fb7e:	f7e2 fab5 	bl	20ec <log_1>
		return -EPFNOSUPPORT;
   1fb82:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   1fb86:	e06f      	b.n	1fc68 <net_context_get+0x120>
	if (family != AF_INET && family != AF_INET6) {
   1fb88:	280a      	cmp	r0, #10
   1fb8a:	d018      	beq.n	1fbbe <net_context_get+0x76>
		NET_ASSERT_INFO(family == AF_INET || family == AF_INET6,
   1fb8c:	4b8c      	ldr	r3, [pc, #560]	; (1fdc0 <net_context_get+0x278>)
   1fb8e:	681b      	ldr	r3, [r3, #0]
   1fb90:	075c      	lsls	r4, r3, #29
   1fb92:	d011      	beq.n	1fbb8 <net_context_get+0x70>
   1fb94:	2201      	movs	r2, #1
   1fb96:	f04f 0300 	mov.w	r3, #0
   1fb9a:	f362 0302 	bfi	r3, r2, #0, #3
   1fb9e:	4989      	ldr	r1, [pc, #548]	; (1fdc4 <net_context_get+0x27c>)
   1fba0:	4a89      	ldr	r2, [pc, #548]	; (1fdc8 <net_context_get+0x280>)
   1fba2:	1a52      	subs	r2, r2, r1
   1fba4:	08d2      	lsrs	r2, r2, #3
   1fba6:	f36f 03c5 	bfc	r3, #3, #3
   1fbaa:	f362 138f 	bfi	r3, r2, #6, #10
   1fbae:	4988      	ldr	r1, [pc, #544]	; (1fdd0 <net_context_get+0x288>)
   1fbb0:	4602      	mov	r2, r0
   1fbb2:	4888      	ldr	r0, [pc, #544]	; (1fdd4 <net_context_get+0x28c>)
   1fbb4:	f7e2 faae 	bl	2114 <log_2>
		return -EAFNOSUPPORT;
   1fbb8:	f06f 042e 	mvn.w	r4, #46	; 0x2e
   1fbbc:	e054      	b.n	1fc68 <net_context_get+0x120>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   1fbbe:	1e4b      	subs	r3, r1, #1
   1fbc0:	2b01      	cmp	r3, #1
   1fbc2:	d917      	bls.n	1fbf4 <net_context_get+0xac>
		NET_ASSERT_INFO(type == SOCK_DGRAM || type == SOCK_STREAM,
   1fbc4:	4b7e      	ldr	r3, [pc, #504]	; (1fdc0 <net_context_get+0x278>)
   1fbc6:	681b      	ldr	r3, [r3, #0]
   1fbc8:	0758      	lsls	r0, r3, #29
   1fbca:	d010      	beq.n	1fbee <net_context_get+0xa6>
   1fbcc:	2301      	movs	r3, #1
   1fbce:	f04f 0200 	mov.w	r2, #0
   1fbd2:	f363 0202 	bfi	r2, r3, #0, #3
   1fbd6:	497b      	ldr	r1, [pc, #492]	; (1fdc4 <net_context_get+0x27c>)
   1fbd8:	4b7b      	ldr	r3, [pc, #492]	; (1fdc8 <net_context_get+0x280>)
   1fbda:	487f      	ldr	r0, [pc, #508]	; (1fdd8 <net_context_get+0x290>)
   1fbdc:	1a5b      	subs	r3, r3, r1
   1fbde:	f36f 02c5 	bfc	r2, #3, #3
   1fbe2:	08db      	lsrs	r3, r3, #3
   1fbe4:	f363 128f 	bfi	r2, r3, #6, #10
   1fbe8:	4979      	ldr	r1, [pc, #484]	; (1fdd0 <net_context_get+0x288>)
   1fbea:	f7e2 fa7f 	bl	20ec <log_1>
		return -EPROTOTYPE;
   1fbee:	f06f 0428 	mvn.w	r4, #40	; 0x28
   1fbf2:	e039      	b.n	1fc68 <net_context_get+0x120>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   1fbf4:	2a11      	cmp	r2, #17
   1fbf6:	f000 80a6 	beq.w	1fd46 <net_context_get+0x1fe>
   1fbfa:	2a06      	cmp	r2, #6
   1fbfc:	f000 80c1 	beq.w	1fd82 <net_context_get+0x23a>
		NET_ASSERT_INFO(ip_proto == IPPROTO_UDP ||
   1fc00:	4b6f      	ldr	r3, [pc, #444]	; (1fdc0 <net_context_get+0x278>)
   1fc02:	681b      	ldr	r3, [r3, #0]
   1fc04:	0759      	lsls	r1, r3, #29
   1fc06:	d010      	beq.n	1fc2a <net_context_get+0xe2>
   1fc08:	2101      	movs	r1, #1
   1fc0a:	f04f 0300 	mov.w	r3, #0
   1fc0e:	f361 0302 	bfi	r3, r1, #0, #3
   1fc12:	486c      	ldr	r0, [pc, #432]	; (1fdc4 <net_context_get+0x27c>)
   1fc14:	496c      	ldr	r1, [pc, #432]	; (1fdc8 <net_context_get+0x280>)
   1fc16:	1a09      	subs	r1, r1, r0
   1fc18:	08c9      	lsrs	r1, r1, #3
   1fc1a:	f36f 03c5 	bfc	r3, #3, #3
   1fc1e:	f361 138f 	bfi	r3, r1, #6, #10
   1fc22:	486e      	ldr	r0, [pc, #440]	; (1fddc <net_context_get+0x294>)
   1fc24:	496a      	ldr	r1, [pc, #424]	; (1fdd0 <net_context_get+0x288>)
   1fc26:	f7e2 fa75 	bl	2114 <log_2>
		return -EPROTONOSUPPORT;
   1fc2a:	f06f 042a 	mvn.w	r4, #42	; 0x2a
   1fc2e:	e01b      	b.n	1fc68 <net_context_get+0x120>
   1fc30:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 1fdec <net_context_get+0x2a4>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1fc34:	486a      	ldr	r0, [pc, #424]	; (1fde0 <net_context_get+0x298>)
   1fc36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fc3a:	f00e fb45 	bl	2e2c8 <_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1fc3e:	2400      	movs	r4, #0
   1fc40:	2368      	movs	r3, #104	; 0x68
   1fc42:	465d      	mov	r5, fp
   1fc44:	fb03 f604 	mul.w	r6, r3, r4
   1fc48:	eb0b 0706 	add.w	r7, fp, r6
		if (net_context_is_used(&contexts[i])) {
   1fc4c:	4638      	mov	r0, r7
   1fc4e:	9303      	str	r3, [sp, #12]
   1fc50:	f7ff fdc6 	bl	1f7e0 <net_context_is_used>
   1fc54:	9b03      	ldr	r3, [sp, #12]
   1fc56:	b158      	cbz	r0, 1fc70 <net_context_get+0x128>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1fc58:	3401      	adds	r4, #1
   1fc5a:	2c05      	cmp	r4, #5
   1fc5c:	d1f2      	bne.n	1fc44 <net_context_get+0xfc>
	int i, ret = -ENOENT;
   1fc5e:	f06f 0401 	mvn.w	r4, #1
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1fc62:	485f      	ldr	r0, [pc, #380]	; (1fde0 <net_context_get+0x298>)
   1fc64:	f00e fb09 	bl	2e27a <_impl_k_sem_give>
}
   1fc68:	4620      	mov	r0, r4
   1fc6a:	b005      	add	sp, #20
   1fc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ip_proto == IPPROTO_TCP) {
   1fc70:	f1b9 0f06 	cmp.w	r9, #6
   1fc74:	d059      	beq.n	1fd2a <net_context_get+0x1e2>
		contexts[i].iface = 0;
   1fc76:	2268      	movs	r2, #104	; 0x68
   1fc78:	fb02 5204 	mla	r2, r2, r4, r5
   1fc7c:	2100      	movs	r1, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fc7e:	19ab      	adds	r3, r5, r6
   1fc80:	f8a2 1064 	strh.w	r1, [r2, #100]	; 0x64
   1fc84:	3304      	adds	r3, #4
   1fc86:	2101      	movs	r1, #1
   1fc88:	f3bf 8f5b 	dmb	ish
   1fc8c:	e853 0f00 	ldrex	r0, [r3]
   1fc90:	e843 1c00 	strex	ip, r1, [r3]
   1fc94:	f1bc 0f00 	cmp.w	ip, #0
   1fc98:	d1f8      	bne.n	1fc8c <net_context_get+0x144>
   1fc9a:	f3bf 8f5b 	dmb	ish
		context->flags |= NET_CONTEXT_FAMILY;
   1fc9e:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
	if (type == SOCK_STREAM) {
   1fca2:	f1ba 0f01 	cmp.w	sl, #1
		context->flags |= NET_CONTEXT_FAMILY;
   1fca6:	f043 0110 	orr.w	r1, r3, #16
   1fcaa:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
	if (type == SOCK_STREAM) {
   1fcae:	d142      	bne.n	1fd36 <net_context_get+0x1ee>
		context->flags |= NET_CONTEXT_TYPE;
   1fcb0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	context->flags &= ~NET_CONTEXT_TYPE;
   1fcb4:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
   1fcb8:	2268      	movs	r2, #104	; 0x68
   1fcba:	fb02 5204 	mla	r2, r2, r4, r5
	if (ip_proto == IPPROTO_TCP) {
   1fcbe:	f1b9 0f06 	cmp.w	r9, #6
   1fcc2:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
		(void)memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1fcc6:	f106 0014 	add.w	r0, r6, #20
		context->flags |= NET_CONTEXT_PROTO;
   1fcca:	bf0c      	ite	eq
   1fccc:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
	context->flags &= ~NET_CONTEXT_PROTO;
   1fcd0:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
		(void)memset(&contexts[i].local, 0,
   1fcd4:	f106 0908 	add.w	r9, r6, #8
   1fcd8:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
   1fcdc:	44a9      	add	r9, r5
		(void)memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1fcde:	2218      	movs	r2, #24
   1fce0:	2100      	movs	r1, #0
   1fce2:	4428      	add	r0, r5
   1fce4:	f7e6 fffd 	bl	6ce2 <memset>
		(void)memset(&contexts[i].local, 0,
   1fce8:	220c      	movs	r2, #12
   1fcea:	2100      	movs	r1, #0
   1fcec:	4648      	mov	r0, r9
   1fcee:	f7e6 fff8 	bl	6ce2 <memset>
			addr6->sin6_port = find_available_port(&contexts[i],
   1fcf2:	4649      	mov	r1, r9
   1fcf4:	4638      	mov	r0, r7
   1fcf6:	f7ff fe75 	bl	1f9e4 <find_available_port>
   1fcfa:	f8a9 0002 	strh.w	r0, [r9, #2]
			if (!addr6->sin6_port) {
   1fcfe:	b1f8      	cbz	r0, 1fd40 <net_context_get+0x1f8>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1fd00:	f106 004c 	add.w	r0, r6, #76	; 0x4c
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   1fd04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fd08:	2101      	movs	r1, #1
   1fd0a:	4428      	add	r0, r5
   1fd0c:	f00e faac 	bl	2e268 <_impl_k_sem_init>
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1fd10:	2368      	movs	r3, #104	; 0x68
   1fd12:	fb03 5404 	mla	r4, r3, r4, r5
   1fd16:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   1fd1a:	f043 0301 	orr.w	r3, r3, #1
   1fd1e:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
		*context = &contexts[i];
   1fd22:	f8c8 7000 	str.w	r7, [r8]
		ret = 0;
   1fd26:	2400      	movs	r4, #0
		break;
   1fd28:	e79b      	b.n	1fc62 <net_context_get+0x11a>
			if (net_tcp_get(&contexts[i]) < 0) {
   1fd2a:	4638      	mov	r0, r7
   1fd2c:	f00b fa16 	bl	2b15c <net_tcp_get>
   1fd30:	2800      	cmp	r0, #0
   1fd32:	daa0      	bge.n	1fc76 <net_context_get+0x12e>
   1fd34:	e793      	b.n	1fc5e <net_context_get+0x116>
	context->flags &= ~NET_CONTEXT_TYPE;
   1fd36:	f023 0320 	bic.w	r3, r3, #32
   1fd3a:	f043 0310 	orr.w	r3, r3, #16
   1fd3e:	e7b9      	b.n	1fcb4 <net_context_get+0x16c>
				ret = -EADDRINUSE;
   1fd40:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1fd44:	e78d      	b.n	1fc62 <net_context_get+0x11a>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1fd46:	2901      	cmp	r1, #1
   1fd48:	d11d      	bne.n	1fd86 <net_context_get+0x23e>
		NET_ASSERT_INFO(\
   1fd4a:	4b1d      	ldr	r3, [pc, #116]	; (1fdc0 <net_context_get+0x278>)
   1fd4c:	681b      	ldr	r3, [r3, #0]
   1fd4e:	075a      	lsls	r2, r3, #29
   1fd50:	d014      	beq.n	1fd7c <net_context_get+0x234>
   1fd52:	2301      	movs	r3, #1
   1fd54:	f04f 0200 	mov.w	r2, #0
   1fd58:	f363 0202 	bfi	r2, r3, #0, #3
   1fd5c:	4919      	ldr	r1, [pc, #100]	; (1fdc4 <net_context_get+0x27c>)
   1fd5e:	4b1a      	ldr	r3, [pc, #104]	; (1fdc8 <net_context_get+0x280>)
   1fd60:	4820      	ldr	r0, [pc, #128]	; (1fde4 <net_context_get+0x29c>)
   1fd62:	1a5b      	subs	r3, r3, r1
   1fd64:	08db      	lsrs	r3, r3, #3
   1fd66:	f36f 02c5 	bfc	r2, #3, #3
   1fd6a:	f363 128f 	bfi	r2, r3, #6, #10
   1fd6e:	f8ad 2000 	strh.w	r2, [sp]
   1fd72:	464b      	mov	r3, r9
   1fd74:	4652      	mov	r2, sl
   1fd76:	4916      	ldr	r1, [pc, #88]	; (1fdd0 <net_context_get+0x288>)
   1fd78:	f7e2 f9e4 	bl	2144 <log_3>
		return -EOPNOTSUPP;
   1fd7c:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   1fd80:	e772      	b.n	1fc68 <net_context_get+0x120>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1fd82:	2901      	cmp	r1, #1
   1fd84:	d1e1      	bne.n	1fd4a <net_context_get+0x202>
	if (!context) {
   1fd86:	f1b8 0f00 	cmp.w	r8, #0
   1fd8a:	f47f af51 	bne.w	1fc30 <net_context_get+0xe8>
		NET_ASSERT_INFO(context, "Invalid context");
   1fd8e:	4b0c      	ldr	r3, [pc, #48]	; (1fdc0 <net_context_get+0x278>)
   1fd90:	681b      	ldr	r3, [r3, #0]
   1fd92:	075b      	lsls	r3, r3, #29
   1fd94:	d010      	beq.n	1fdb8 <net_context_get+0x270>
   1fd96:	2301      	movs	r3, #1
   1fd98:	f04f 0200 	mov.w	r2, #0
   1fd9c:	f363 0202 	bfi	r2, r3, #0, #3
   1fda0:	4908      	ldr	r1, [pc, #32]	; (1fdc4 <net_context_get+0x27c>)
   1fda2:	4b09      	ldr	r3, [pc, #36]	; (1fdc8 <net_context_get+0x280>)
   1fda4:	4810      	ldr	r0, [pc, #64]	; (1fde8 <net_context_get+0x2a0>)
   1fda6:	1a5b      	subs	r3, r3, r1
   1fda8:	f368 02c5 	bfi	r2, r8, #3, #3
   1fdac:	08db      	lsrs	r3, r3, #3
   1fdae:	f363 128f 	bfi	r2, r3, #6, #10
   1fdb2:	4907      	ldr	r1, [pc, #28]	; (1fdd0 <net_context_get+0x288>)
   1fdb4:	f7e2 f99a 	bl	20ec <log_1>
		return -EINVAL;
   1fdb8:	f06f 0415 	mvn.w	r4, #21
   1fdbc:	e754      	b.n	1fc68 <net_context_get+0x120>
   1fdbe:	bf00      	nop
   1fdc0:	2000e278 	.word	0x2000e278
   1fdc4:	0002ef38 	.word	0x0002ef38
   1fdc8:	0002f030 	.word	0x0002f030
   1fdcc:	00034484 	.word	0x00034484
   1fdd0:	000342ed 	.word	0x000342ed
   1fdd4:	000344bb 	.word	0x000344bb
   1fdd8:	00034514 	.word	0x00034514
   1fddc:	0003456a 	.word	0x0003456a
   1fde0:	200023a8 	.word	0x200023a8
   1fde4:	000345cb 	.word	0x000345cb
   1fde8:	0003467b 	.word	0x0003467b
   1fdec:	200021a0 	.word	0x200021a0

0001fdf0 <net_context_ref>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1fdf0:	1d03      	adds	r3, r0, #4
   1fdf2:	f3bf 8f5b 	dmb	ish
   1fdf6:	e853 0f00 	ldrex	r0, [r3]
   1fdfa:	1c42      	adds	r2, r0, #1
   1fdfc:	e843 2100 	strex	r1, r2, [r3]
   1fe00:	2900      	cmp	r1, #0
   1fe02:	d1f8      	bne.n	1fdf6 <net_context_ref+0x6>
   1fe04:	f3bf 8f5b 	dmb	ish
}
   1fe08:	3001      	adds	r0, #1
   1fe0a:	4770      	bx	lr

0001fe0c <net_context_unref>:
{
   1fe0c:	b510      	push	{r4, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1fe0e:	1d03      	adds	r3, r0, #4
   1fe10:	4604      	mov	r4, r0
   1fe12:	f3bf 8f5b 	dmb	ish
   1fe16:	e853 0f00 	ldrex	r0, [r3]
   1fe1a:	1e42      	subs	r2, r0, #1
   1fe1c:	e843 2100 	strex	r1, r2, [r3]
   1fe20:	2900      	cmp	r1, #0
   1fe22:	d1f8      	bne.n	1fe16 <net_context_unref+0xa>
   1fe24:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   1fe28:	2801      	cmp	r0, #1
   1fe2a:	d001      	beq.n	1fe30 <net_context_unref+0x24>
		return old_rc - 1;
   1fe2c:	3801      	subs	r0, #1
}
   1fe2e:	bd10      	pop	{r4, pc}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1fe30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fe34:	480b      	ldr	r0, [pc, #44]	; (1fe64 <net_context_unref+0x58>)
   1fe36:	f00e fa47 	bl	2e2c8 <_impl_k_sem_take>
	net_tcp_unref(context);
   1fe3a:	4620      	mov	r0, r4
   1fe3c:	f00b f9cc 	bl	2b1d8 <net_tcp_unref>
	if (context->conn_handler) {
   1fe40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1fe42:	b118      	cbz	r0, 1fe4c <net_context_unref+0x40>
		net_conn_unregister(context->conn_handler);
   1fe44:	f009 fb56 	bl	294f4 <net_conn_unregister>
		context->conn_handler = NULL;
   1fe48:	2300      	movs	r3, #0
   1fe4a:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~NET_CONTEXT_IN_USE;
   1fe4c:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1fe50:	4804      	ldr	r0, [pc, #16]	; (1fe64 <net_context_unref+0x58>)
   1fe52:	f023 0307 	bic.w	r3, r3, #7
   1fe56:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
   1fe5a:	f00e fa0e 	bl	2e27a <_impl_k_sem_give>
   1fe5e:	2000      	movs	r0, #0
   1fe60:	e7e5      	b.n	1fe2e <net_context_unref+0x22>
   1fe62:	bf00      	nop
   1fe64:	200023a8 	.word	0x200023a8

0001fe68 <net_context_put>:
{
   1fe68:	b538      	push	{r3, r4, r5, lr}
	NET_ASSERT(context);
   1fe6a:	4605      	mov	r5, r0
   1fe6c:	b9b8      	cbnz	r0, 1fe9e <net_context_put+0x36>
   1fe6e:	4b16      	ldr	r3, [pc, #88]	; (1fec8 <net_context_put+0x60>)
   1fe70:	681b      	ldr	r3, [r3, #0]
   1fe72:	075b      	lsls	r3, r3, #29
   1fe74:	d010      	beq.n	1fe98 <net_context_put+0x30>
   1fe76:	2301      	movs	r3, #1
   1fe78:	f04f 0200 	mov.w	r2, #0
   1fe7c:	f363 0202 	bfi	r2, r3, #0, #3
   1fe80:	4912      	ldr	r1, [pc, #72]	; (1fecc <net_context_put+0x64>)
   1fe82:	4b13      	ldr	r3, [pc, #76]	; (1fed0 <net_context_put+0x68>)
   1fe84:	1a5b      	subs	r3, r3, r1
   1fe86:	f360 02c5 	bfi	r2, r0, #3, #3
   1fe8a:	08db      	lsrs	r3, r3, #3
   1fe8c:	f363 128f 	bfi	r2, r3, #6, #10
   1fe90:	4910      	ldr	r1, [pc, #64]	; (1fed4 <net_context_put+0x6c>)
   1fe92:	4811      	ldr	r0, [pc, #68]	; (1fed8 <net_context_put+0x70>)
   1fe94:	f7e2 f92a 	bl	20ec <log_1>
		return -EINVAL;
   1fe98:	f06f 0015 	mvn.w	r0, #21
   1fe9c:	e012      	b.n	1fec4 <net_context_put+0x5c>
	if (!PART_OF_ARRAY(contexts, context)) {
   1fe9e:	4b0f      	ldr	r3, [pc, #60]	; (1fedc <net_context_put+0x74>)
   1fea0:	4298      	cmp	r0, r3
   1fea2:	d3f9      	bcc.n	1fe98 <net_context_put+0x30>
   1fea4:	f503 7302 	add.w	r3, r3, #520	; 0x208
   1fea8:	429d      	cmp	r5, r3
   1feaa:	d2f5      	bcs.n	1fe98 <net_context_put+0x30>
	context->connect_cb = NULL;
   1feac:	2400      	movs	r4, #0
   1feae:	63ac      	str	r4, [r5, #56]	; 0x38
	context->send_cb = NULL;
   1feb0:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
	if (net_tcp_put(context) >= 0) {
   1feb4:	f00b f90e 	bl	2b0d4 <net_tcp_put>
   1feb8:	42a0      	cmp	r0, r4
   1feba:	da02      	bge.n	1fec2 <net_context_put+0x5a>
	net_context_unref(context);
   1febc:	4628      	mov	r0, r5
   1febe:	f7ff ffa5 	bl	1fe0c <net_context_unref>
		return 0;
   1fec2:	4620      	mov	r0, r4
}
   1fec4:	bd38      	pop	{r3, r4, r5, pc}
   1fec6:	bf00      	nop
   1fec8:	2000e278 	.word	0x2000e278
   1fecc:	0002ef38 	.word	0x0002ef38
   1fed0:	0002f030 	.word	0x0002f030
   1fed4:	000342fd 	.word	0x000342fd
   1fed8:	00030684 	.word	0x00030684
   1fedc:	200021a0 	.word	0x200021a0

0001fee0 <net_context_bind>:
{
   1fee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fee2:	4605      	mov	r5, r0
   1fee4:	4614      	mov	r4, r2
	NET_ASSERT(addr);
   1fee6:	460e      	mov	r6, r1
   1fee8:	b9a9      	cbnz	r1, 1ff16 <net_context_bind+0x36>
   1feea:	4b5f      	ldr	r3, [pc, #380]	; (20068 <net_context_bind+0x188>)
   1feec:	681b      	ldr	r3, [r3, #0]
   1feee:	0758      	lsls	r0, r3, #29
   1fef0:	f000 80b2 	beq.w	20058 <net_context_bind+0x178>
   1fef4:	2301      	movs	r3, #1
   1fef6:	f04f 0200 	mov.w	r2, #0
   1fefa:	f363 0202 	bfi	r2, r3, #0, #3
   1fefe:	f361 02c5 	bfi	r2, r1, #3, #3
   1ff02:	4b5a      	ldr	r3, [pc, #360]	; (2006c <net_context_bind+0x18c>)
   1ff04:	495a      	ldr	r1, [pc, #360]	; (20070 <net_context_bind+0x190>)
   1ff06:	485b      	ldr	r0, [pc, #364]	; (20074 <net_context_bind+0x194>)
   1ff08:	1a5b      	subs	r3, r3, r1
   1ff0a:	08db      	lsrs	r3, r3, #3
   1ff0c:	f363 128f 	bfi	r2, r3, #6, #10
   1ff10:	4959      	ldr	r1, [pc, #356]	; (20078 <net_context_bind+0x198>)
   1ff12:	f7e2 f8eb 	bl	20ec <log_1>
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1ff16:	b9ad      	cbnz	r5, 1ff44 <net_context_bind+0x64>
   1ff18:	4b53      	ldr	r3, [pc, #332]	; (20068 <net_context_bind+0x188>)
   1ff1a:	681b      	ldr	r3, [r3, #0]
   1ff1c:	0759      	lsls	r1, r3, #29
   1ff1e:	d017      	beq.n	1ff50 <net_context_bind+0x70>
   1ff20:	2301      	movs	r3, #1
   1ff22:	f04f 0200 	mov.w	r2, #0
   1ff26:	f363 0202 	bfi	r2, r3, #0, #3
   1ff2a:	4951      	ldr	r1, [pc, #324]	; (20070 <net_context_bind+0x190>)
   1ff2c:	4b4f      	ldr	r3, [pc, #316]	; (2006c <net_context_bind+0x18c>)
   1ff2e:	4853      	ldr	r0, [pc, #332]	; (2007c <net_context_bind+0x19c>)
   1ff30:	1a5b      	subs	r3, r3, r1
   1ff32:	08db      	lsrs	r3, r3, #3
   1ff34:	f36f 02c5 	bfc	r2, #3, #3
   1ff38:	f363 128f 	bfi	r2, r3, #6, #10
   1ff3c:	494e      	ldr	r1, [pc, #312]	; (20078 <net_context_bind+0x198>)
   1ff3e:	f7e2 f8d5 	bl	20ec <log_1>
   1ff42:	e005      	b.n	1ff50 <net_context_bind+0x70>
   1ff44:	4b4e      	ldr	r3, [pc, #312]	; (20080 <net_context_bind+0x1a0>)
   1ff46:	429d      	cmp	r5, r3
   1ff48:	d3e6      	bcc.n	1ff18 <net_context_bind+0x38>
   1ff4a:	4b4e      	ldr	r3, [pc, #312]	; (20084 <net_context_bind+0x1a4>)
   1ff4c:	429d      	cmp	r5, r3
   1ff4e:	d2e3      	bcs.n	1ff18 <net_context_bind+0x38>
	if (context->conn_handler) {
   1ff50:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1ff52:	2b00      	cmp	r3, #0
   1ff54:	d17a      	bne.n	2004c <net_context_bind+0x16c>
	if (addr->sa_family == AF_INET6) {
   1ff56:	8832      	ldrh	r2, [r6, #0]
   1ff58:	2a0a      	cmp	r2, #10
   1ff5a:	d17a      	bne.n	20052 <net_context_bind+0x172>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1ff5c:	2c17      	cmp	r4, #23
		struct net_if *iface = NULL;
   1ff5e:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1ff60:	d977      	bls.n	20052 <net_context_bind+0x172>
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1ff62:	7933      	ldrb	r3, [r6, #4]
   1ff64:	2bff      	cmp	r3, #255	; 0xff
   1ff66:	f106 0704 	add.w	r7, r6, #4
   1ff6a:	d10a      	bne.n	1ff82 <net_context_bind+0xa2>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   1ff6c:	a901      	add	r1, sp, #4
   1ff6e:	4638      	mov	r0, r7
   1ff70:	f001 fb82 	bl	21678 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   1ff74:	2800      	cmp	r0, #0
   1ff76:	d137      	bne.n	1ffe8 <net_context_bind+0x108>
				return -ENOENT;
   1ff78:	f06f 0401 	mvn.w	r4, #1
}
   1ff7c:	4620      	mov	r0, r4
   1ff7e:	b003      	add	sp, #12
   1ff80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1ff82:	4638      	mov	r0, r7
   1ff84:	f7ff fc1e 	bl	1f7c4 <net_is_ipv6_addr_unspecified>
   1ff88:	b348      	cbz	r0, 1ffde <net_context_bind+0xfe>
			iface = net_if_ipv6_select_src_iface(
   1ff8a:	f105 0018 	add.w	r0, r5, #24
   1ff8e:	f001 fe97 	bl	21cc0 <net_if_ipv6_select_src_iface>
   1ff92:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   1ff94:	f004 ffe6 	bl	24f64 <net_ipv6_unspecified_address>
   1ff98:	4604      	mov	r4, r0
		if (!iface) {
   1ff9a:	9901      	ldr	r1, [sp, #4]
   1ff9c:	bb31      	cbnz	r1, 1ffec <net_context_bind+0x10c>
			NET_ERR("Cannot bind to %s",
   1ff9e:	4b32      	ldr	r3, [pc, #200]	; (20068 <net_context_bind+0x188>)
   1ffa0:	681b      	ldr	r3, [r3, #0]
   1ffa2:	075a      	lsls	r2, r3, #29
   1ffa4:	d018      	beq.n	1ffd8 <net_context_bind+0xf8>
   1ffa6:	2301      	movs	r3, #1
   1ffa8:	f04f 0400 	mov.w	r4, #0
   1ffac:	f363 0402 	bfi	r4, r3, #0, #3
   1ffb0:	4a2e      	ldr	r2, [pc, #184]	; (2006c <net_context_bind+0x18c>)
   1ffb2:	4b2f      	ldr	r3, [pc, #188]	; (20070 <net_context_bind+0x190>)
   1ffb4:	1ad2      	subs	r2, r2, r3
   1ffb6:	08d2      	lsrs	r2, r2, #3
   1ffb8:	f361 04c5 	bfi	r4, r1, #3, #3
   1ffbc:	200a      	movs	r0, #10
   1ffbe:	4639      	mov	r1, r7
   1ffc0:	f362 148f 	bfi	r4, r2, #6, #10
   1ffc4:	f003 f8c0 	bl	23148 <net_sprint_addr>
   1ffc8:	f7e2 fa22 	bl	2410 <log_strdup>
   1ffcc:	4623      	mov	r3, r4
   1ffce:	4602      	mov	r2, r0
   1ffd0:	4929      	ldr	r1, [pc, #164]	; (20078 <net_context_bind+0x198>)
   1ffd2:	482d      	ldr	r0, [pc, #180]	; (20088 <net_context_bind+0x1a8>)
   1ffd4:	f7e2 f89e 	bl	2114 <log_2>
			return -EADDRNOTAVAIL;
   1ffd8:	f06f 0430 	mvn.w	r4, #48	; 0x30
   1ffdc:	e7ce      	b.n	1ff7c <net_context_bind+0x9c>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   1ffde:	a901      	add	r1, sp, #4
   1ffe0:	4638      	mov	r0, r7
   1ffe2:	f000 fedf 	bl	20da4 <net_if_ipv6_addr_lookup>
   1ffe6:	e7c5      	b.n	1ff74 <net_context_bind+0x94>
			ptr = &ifaddr->address.in6_addr;
   1ffe8:	1d04      	adds	r4, r0, #4
   1ffea:	e7d6      	b.n	1ff9a <net_context_bind+0xba>
		net_context_set_iface(context, iface);
   1ffec:	f105 0064 	add.w	r0, r5, #100	; 0x64
   1fff0:	f7ff fd10 	bl	1fa14 <net_context_set_iface.isra.10>
		if (addr6->sin6_port) {
   1fff4:	8871      	ldrh	r1, [r6, #2]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   1fff6:	60ec      	str	r4, [r5, #12]
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1fff8:	200a      	movs	r0, #10
   1fffa:	8128      	strh	r0, [r5, #8]
		if (addr6->sin6_port) {
   1fffc:	b311      	cbz	r1, 20044 <net_context_bind+0x164>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   1fffe:	4632      	mov	r2, r6
   20000:	f7ff fcbc 	bl	1f97c <check_used_port>
			if (!ret) {
   20004:	4604      	mov	r4, r0
   20006:	b910      	cbnz	r0, 2000e <net_context_bind+0x12e>
				net_sin6_ptr(&context->local)->sin6_port =
   20008:	8873      	ldrh	r3, [r6, #2]
   2000a:	816b      	strh	r3, [r5, #10]
   2000c:	e7b6      	b.n	1ff7c <net_context_bind+0x9c>
				NET_ERR("Port %d is in use!",
   2000e:	4b16      	ldr	r3, [pc, #88]	; (20068 <net_context_bind+0x188>)
   20010:	681b      	ldr	r3, [r3, #0]
   20012:	075b      	lsls	r3, r3, #29
   20014:	d0b2      	beq.n	1ff7c <net_context_bind+0x9c>
   20016:	2201      	movs	r2, #1
   20018:	f04f 0300 	mov.w	r3, #0
   2001c:	f362 0302 	bfi	r3, r2, #0, #3
   20020:	4913      	ldr	r1, [pc, #76]	; (20070 <net_context_bind+0x190>)
   20022:	4a12      	ldr	r2, [pc, #72]	; (2006c <net_context_bind+0x18c>)
   20024:	4819      	ldr	r0, [pc, #100]	; (2008c <net_context_bind+0x1ac>)
   20026:	1a52      	subs	r2, r2, r1
   20028:	8871      	ldrh	r1, [r6, #2]
   2002a:	08d2      	lsrs	r2, r2, #3
   2002c:	f36f 03c5 	bfc	r3, #3, #3
   20030:	f362 138f 	bfi	r3, r2, #6, #10
   20034:	020a      	lsls	r2, r1, #8
   20036:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
   2003a:	b292      	uxth	r2, r2
   2003c:	490e      	ldr	r1, [pc, #56]	; (20078 <net_context_bind+0x198>)
   2003e:	f7e2 f869 	bl	2114 <log_2>
   20042:	e79b      	b.n	1ff7c <net_context_bind+0x9c>
			addr6->sin6_port =
   20044:	896b      	ldrh	r3, [r5, #10]
   20046:	8073      	strh	r3, [r6, #2]
		return 0;
   20048:	460c      	mov	r4, r1
   2004a:	e797      	b.n	1ff7c <net_context_bind+0x9c>
		return -EISCONN;
   2004c:	f06f 0437 	mvn.w	r4, #55	; 0x37
   20050:	e794      	b.n	1ff7c <net_context_bind+0x9c>
	return -EINVAL;
   20052:	f06f 0415 	mvn.w	r4, #21
   20056:	e791      	b.n	1ff7c <net_context_bind+0x9c>
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   20058:	2d00      	cmp	r5, #0
   2005a:	f43f af79 	beq.w	1ff50 <net_context_bind+0x70>
   2005e:	4b08      	ldr	r3, [pc, #32]	; (20080 <net_context_bind+0x1a0>)
   20060:	429d      	cmp	r5, r3
   20062:	f4ff af75 	bcc.w	1ff50 <net_context_bind+0x70>
   20066:	e770      	b.n	1ff4a <net_context_bind+0x6a>
   20068:	2000e278 	.word	0x2000e278
   2006c:	0002f030 	.word	0x0002f030
   20070:	0002ef38 	.word	0x0002ef38
   20074:	0003434a 	.word	0x0003434a
   20078:	0003430d 	.word	0x0003430d
   2007c:	00034366 	.word	0x00034366
   20080:	200021a0 	.word	0x200021a0
   20084:	200023a8 	.word	0x200023a8
   20088:	0003439e 	.word	0x0003439e
   2008c:	000343b4 	.word	0x000343b4

00020090 <bind_default>:
{
   20090:	b530      	push	{r4, r5, lr}
   20092:	b087      	sub	sp, #28
   20094:	4605      	mov	r5, r0
	sa_family_t family = net_context_get_family(context);
   20096:	f7ff fc1d 	bl	1f8d4 <net_context_get_family>
	if (family == AF_INET6) {
   2009a:	280a      	cmp	r0, #10
   2009c:	d11a      	bne.n	200d4 <bind_default+0x44>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   2009e:	68eb      	ldr	r3, [r5, #12]
   200a0:	b9b3      	cbnz	r3, 200d0 <bind_default+0x40>
		addr6.sin6_family = AF_INET6;
   200a2:	ac06      	add	r4, sp, #24
   200a4:	f824 0d18 	strh.w	r0, [r4, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   200a8:	f004 ff5c 	bl	24f64 <net_ipv6_unspecified_address>
   200ac:	2210      	movs	r2, #16
   200ae:	4601      	mov	r1, r0
   200b0:	a801      	add	r0, sp, #4
   200b2:	f7e6 fde9 	bl	6c88 <memcpy>
			find_available_port(context,
   200b6:	4621      	mov	r1, r4
   200b8:	4628      	mov	r0, r5
   200ba:	f7ff fc93 	bl	1f9e4 <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr6,
   200be:	2218      	movs	r2, #24
		addr6.sin6_port =
   200c0:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   200c4:	4621      	mov	r1, r4
   200c6:	4628      	mov	r0, r5
   200c8:	f7ff ff0a 	bl	1fee0 <net_context_bind>
}
   200cc:	b007      	add	sp, #28
   200ce:	bd30      	pop	{r4, r5, pc}
			return 0;
   200d0:	2000      	movs	r0, #0
   200d2:	e7fb      	b.n	200cc <bind_default+0x3c>
	return -EINVAL;
   200d4:	f06f 0015 	mvn.w	r0, #21
   200d8:	e7f8      	b.n	200cc <bind_default+0x3c>
	...

000200dc <net_context_create_ipv6>:
{
   200dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   200e0:	461f      	mov	r7, r3
	NET_ASSERT(((struct sockaddr_in6_ptr *)&context->local)->sin6_addr);
   200e2:	68c3      	ldr	r3, [r0, #12]
{
   200e4:	4605      	mov	r5, r0
   200e6:	460e      	mov	r6, r1
   200e8:	4614      	mov	r4, r2
	NET_ASSERT(((struct sockaddr_in6_ptr *)&context->local)->sin6_addr);
   200ea:	b9a3      	cbnz	r3, 20116 <net_context_create_ipv6+0x3a>
   200ec:	4a1a      	ldr	r2, [pc, #104]	; (20158 <net_context_create_ipv6+0x7c>)
   200ee:	6812      	ldr	r2, [r2, #0]
   200f0:	0752      	lsls	r2, r2, #29
   200f2:	d010      	beq.n	20116 <net_context_create_ipv6+0x3a>
   200f4:	2101      	movs	r1, #1
   200f6:	f04f 0200 	mov.w	r2, #0
   200fa:	f361 0202 	bfi	r2, r1, #0, #3
   200fe:	f363 02c5 	bfi	r2, r3, #3, #3
   20102:	4916      	ldr	r1, [pc, #88]	; (2015c <net_context_create_ipv6+0x80>)
   20104:	4b16      	ldr	r3, [pc, #88]	; (20160 <net_context_create_ipv6+0x84>)
   20106:	4817      	ldr	r0, [pc, #92]	; (20164 <net_context_create_ipv6+0x88>)
   20108:	1a5b      	subs	r3, r3, r1
   2010a:	08db      	lsrs	r3, r3, #3
   2010c:	f363 128f 	bfi	r2, r3, #6, #10
   20110:	4915      	ldr	r1, [pc, #84]	; (20168 <net_context_create_ipv6+0x8c>)
   20112:	f7e1 ffeb 	bl	20ec <log_1>
	if (!src) {
   20116:	b904      	cbnz	r4, 2011a <net_context_create_ipv6+0x3e>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   20118:	68ec      	ldr	r4, [r5, #12]
	if (net_is_ipv6_addr_unspecified(src)
   2011a:	4620      	mov	r0, r4
   2011c:	f7ff fb52 	bl	1f7c4 <net_is_ipv6_addr_unspecified>
   20120:	b910      	cbnz	r0, 20128 <net_context_create_ipv6+0x4c>
	    || net_is_ipv6_addr_mcast(src)) {
   20122:	7823      	ldrb	r3, [r4, #0]
   20124:	2bff      	cmp	r3, #255	; 0xff
   20126:	d104      	bne.n	20132 <net_context_create_ipv6+0x56>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   20128:	4639      	mov	r1, r7
   2012a:	6a30      	ldr	r0, [r6, #32]
   2012c:	f001 fd86 	bl	21c3c <net_if_ipv6_select_src_addr>
   20130:	4604      	mov	r4, r0
	return net_if_get_by_index(context->iface);
   20132:	f895 0064 	ldrb.w	r0, [r5, #100]	; 0x64
   20136:	f001 fe9b 	bl	21e70 <net_if_get_by_index>
   2013a:	4680      	mov	r8, r0
			       net_context_get_ip_proto(context));
   2013c:	4628      	mov	r0, r5
   2013e:	f7ff fb77 	bl	1f830 <net_context_get_ip_proto>
	return net_ipv6_create(pkt,
   20142:	4643      	mov	r3, r8
   20144:	9000      	str	r0, [sp, #0]
   20146:	463a      	mov	r2, r7
   20148:	4621      	mov	r1, r4
   2014a:	4630      	mov	r0, r6
   2014c:	f004 ff0e 	bl	24f6c <net_ipv6_create>
}
   20150:	b002      	add	sp, #8
   20152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20156:	bf00      	nop
   20158:	2000e278 	.word	0x2000e278
   2015c:	0002ef38 	.word	0x0002ef38
   20160:	0002f030 	.word	0x0002f030
   20164:	00034435 	.word	0x00034435
   20168:	0003431e 	.word	0x0003431e

0002016c <sendto.isra.13>:
static int sendto(struct net_pkt *pkt,
   2016c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_context *context = net_pkt_context(pkt);
   20170:	6985      	ldr	r5, [r0, #24]
static int sendto(struct net_pkt *pkt,
   20172:	4604      	mov	r4, r0
	if (!net_context_is_used(context)) {
   20174:	4628      	mov	r0, r5
static int sendto(struct net_pkt *pkt,
   20176:	460e      	mov	r6, r1
   20178:	4692      	mov	sl, r2
   2017a:	461f      	mov	r7, r3
   2017c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	if (!net_context_is_used(context)) {
   20180:	f7ff fb2e 	bl	1f7e0 <net_context_is_used>
   20184:	2800      	cmp	r0, #0
   20186:	d065      	beq.n	20254 <sendto.isra.13+0xe8>
	if (!dst_addr) {
   20188:	2e00      	cmp	r6, #0
   2018a:	d069      	beq.n	20260 <sendto.isra.13+0xf4>
	return pkt->family;
   2018c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_family(pkt) == AF_INET6) {
   20190:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   20194:	2b0a      	cmp	r3, #10
   20196:	d160      	bne.n	2025a <sendto.isra.13+0xee>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   20198:	f1ba 0f17 	cmp.w	sl, #23
   2019c:	d95d      	bls.n	2025a <sendto.isra.13+0xee>
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   2019e:	f106 0a04 	add.w	sl, r6, #4
   201a2:	4650      	mov	r0, sl
   201a4:	f7ff fb0e 	bl	1f7c4 <net_is_ipv6_addr_unspecified>
   201a8:	2800      	cmp	r0, #0
   201aa:	d159      	bne.n	20260 <sendto.isra.13+0xf4>
	switch (net_context_get_ip_proto(context)) {
   201ac:	4628      	mov	r0, r5
   201ae:	f7ff fb3f 	bl	1f830 <net_context_get_ip_proto>
   201b2:	2806      	cmp	r0, #6
   201b4:	d041      	beq.n	2023a <sendto.isra.13+0xce>
   201b6:	2811      	cmp	r0, #17
   201b8:	d002      	beq.n	201c0 <sendto.isra.13+0x54>
		return -EPROTONOSUPPORT;
   201ba:	f06f 002a 	mvn.w	r0, #42	; 0x2a
   201be:	e012      	b.n	201e6 <sendto.isra.13+0x7a>
		ret = bind_default(context);
   201c0:	4628      	mov	r0, r5
   201c2:	f7ff ff65 	bl	20090 <bind_default>
		if (ret) {
   201c6:	b970      	cbnz	r0, 201e6 <sendto.isra.13+0x7a>
   201c8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_family(pkt) == AF_INET6) {
   201cc:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   201d0:	2b0a      	cmp	r3, #10
   201d2:	d1f2      	bne.n	201ba <sendto.isra.13+0x4e>
		if (!net_context_create_ipv6(context, pkt,
   201d4:	4602      	mov	r2, r0
   201d6:	4653      	mov	r3, sl
   201d8:	4621      	mov	r1, r4
   201da:	4628      	mov	r0, r5
   201dc:	f7ff ff7e 	bl	200dc <net_context_create_ipv6>
   201e0:	b918      	cbnz	r0, 201ea <sendto.isra.13+0x7e>
			return -ENOMEM;
   201e2:	f06f 000b 	mvn.w	r0, #11
}
   201e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tmp = net_udp_insert(pkt,
   201ea:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
				     net_pkt_ip_hdr_len(pkt) +
   201ee:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
		tmp = net_udp_insert(pkt,
   201f2:	896a      	ldrh	r2, [r5, #10]
   201f4:	4419      	add	r1, r3
   201f6:	4620      	mov	r0, r4
   201f8:	8873      	ldrh	r3, [r6, #2]
   201fa:	b289      	uxth	r1, r1
   201fc:	f00b f87a 	bl	2b2f4 <net_udp_insert>
		if (!tmp) {
   20200:	4604      	mov	r4, r0
   20202:	2800      	cmp	r0, #0
   20204:	d0ed      	beq.n	201e2 <sendto.isra.13+0x76>
		r = net_ipv6_finalize(pkt, net_context_get_ip_proto(context));
   20206:	4628      	mov	r0, r5
   20208:	f7ff fb12 	bl	1f830 <net_context_get_ip_proto>
   2020c:	4601      	mov	r1, r0
   2020e:	4620      	mov	r0, r4
   20210:	f004 ff20 	bl	25054 <net_ipv6_finalize>
	if (ret < 0) {
   20214:	2800      	cmp	r0, #0
   20216:	dbe6      	blt.n	201e6 <sendto.isra.13+0x7a>
	context->send_cb = cb;
   20218:	636f      	str	r7, [r5, #52]	; 0x34
	context->user_data = user_data;
   2021a:	f8c5 9000 	str.w	r9, [r5]
	switch (net_context_get_ip_proto(context)) {
   2021e:	4628      	mov	r0, r5
	pkt->token = token;
   20220:	f8c4 801c 	str.w	r8, [r4, #28]
   20224:	f7ff fb04 	bl	1f830 <net_context_get_ip_proto>
   20228:	2806      	cmp	r0, #6
   2022a:	d00b      	beq.n	20244 <sendto.isra.13+0xd8>
   2022c:	2811      	cmp	r0, #17
   2022e:	d1c4      	bne.n	201ba <sendto.isra.13+0x4e>
		return net_send_data(pkt);
   20230:	4620      	mov	r0, r4
}
   20232:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return net_send_data(pkt);
   20236:	f000 bae9 	b.w	2080c <net_send_data>
		ret = net_tcp_queue_data(context, pkt);
   2023a:	4621      	mov	r1, r4
   2023c:	4628      	mov	r0, r5
   2023e:	f00a f807 	bl	2a250 <net_tcp_queue_data>
   20242:	e7e7      	b.n	20214 <sendto.isra.13+0xa8>
		return net_tcp_send_data(context, cb, token, user_data);
   20244:	464b      	mov	r3, r9
   20246:	4642      	mov	r2, r8
   20248:	4639      	mov	r1, r7
   2024a:	4628      	mov	r0, r5
}
   2024c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return net_tcp_send_data(context, cb, token, user_data);
   20250:	f00a bcb8 	b.w	2abc4 <net_tcp_send_data>
		return -EBADF;
   20254:	f06f 0008 	mvn.w	r0, #8
   20258:	e7c5      	b.n	201e6 <sendto.isra.13+0x7a>
		return -EINVAL;
   2025a:	f06f 0015 	mvn.w	r0, #21
   2025e:	e7c2      	b.n	201e6 <sendto.isra.13+0x7a>
		return -EDESTADDRREQ;
   20260:	f06f 0027 	mvn.w	r0, #39	; 0x27
   20264:	e7bf      	b.n	201e6 <sendto.isra.13+0x7a>
	...

00020268 <net_context_connect>:
{
   20268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2026c:	b08f      	sub	sp, #60	; 0x3c
   2026e:	4604      	mov	r4, r0
   20270:	4615      	mov	r5, r2
   20272:	461f      	mov	r7, r3
   20274:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
	NET_ASSERT(addr);
   20278:	460e      	mov	r6, r1
   2027a:	b9a9      	cbnz	r1, 202a8 <net_context_connect+0x40>
   2027c:	4b76      	ldr	r3, [pc, #472]	; (20458 <net_context_connect+0x1f0>)
   2027e:	681b      	ldr	r3, [r3, #0]
   20280:	0759      	lsls	r1, r3, #29
   20282:	f000 80e1 	beq.w	20448 <net_context_connect+0x1e0>
   20286:	2301      	movs	r3, #1
   20288:	f04f 0200 	mov.w	r2, #0
   2028c:	f363 0202 	bfi	r2, r3, #0, #3
   20290:	4972      	ldr	r1, [pc, #456]	; (2045c <net_context_connect+0x1f4>)
   20292:	4b73      	ldr	r3, [pc, #460]	; (20460 <net_context_connect+0x1f8>)
   20294:	4873      	ldr	r0, [pc, #460]	; (20464 <net_context_connect+0x1fc>)
   20296:	1a5b      	subs	r3, r3, r1
   20298:	f366 02c5 	bfi	r2, r6, #3, #3
   2029c:	08db      	lsrs	r3, r3, #3
   2029e:	f363 128f 	bfi	r2, r3, #6, #10
   202a2:	4971      	ldr	r1, [pc, #452]	; (20468 <net_context_connect+0x200>)
   202a4:	f7e1 ff22 	bl	20ec <log_1>
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   202a8:	b9ac      	cbnz	r4, 202d6 <net_context_connect+0x6e>
   202aa:	4b6b      	ldr	r3, [pc, #428]	; (20458 <net_context_connect+0x1f0>)
   202ac:	681b      	ldr	r3, [r3, #0]
   202ae:	075a      	lsls	r2, r3, #29
   202b0:	d017      	beq.n	202e2 <net_context_connect+0x7a>
   202b2:	2301      	movs	r3, #1
   202b4:	f04f 0200 	mov.w	r2, #0
   202b8:	f363 0202 	bfi	r2, r3, #0, #3
   202bc:	4967      	ldr	r1, [pc, #412]	; (2045c <net_context_connect+0x1f4>)
   202be:	4b68      	ldr	r3, [pc, #416]	; (20460 <net_context_connect+0x1f8>)
   202c0:	486a      	ldr	r0, [pc, #424]	; (2046c <net_context_connect+0x204>)
   202c2:	1a5b      	subs	r3, r3, r1
   202c4:	08db      	lsrs	r3, r3, #3
   202c6:	f36f 02c5 	bfc	r2, #3, #3
   202ca:	f363 128f 	bfi	r2, r3, #6, #10
   202ce:	4966      	ldr	r1, [pc, #408]	; (20468 <net_context_connect+0x200>)
   202d0:	f7e1 ff0c 	bl	20ec <log_1>
   202d4:	e005      	b.n	202e2 <net_context_connect+0x7a>
   202d6:	4b66      	ldr	r3, [pc, #408]	; (20470 <net_context_connect+0x208>)
   202d8:	429c      	cmp	r4, r3
   202da:	d3e6      	bcc.n	202aa <net_context_connect+0x42>
   202dc:	4b65      	ldr	r3, [pc, #404]	; (20474 <net_context_connect+0x20c>)
   202de:	429c      	cmp	r4, r3
   202e0:	d2e3      	bcs.n	202aa <net_context_connect+0x42>
	if (!net_context_is_used(context)) {
   202e2:	4620      	mov	r0, r4
   202e4:	f7ff fa7c 	bl	1f7e0 <net_context_is_used>
   202e8:	2800      	cmp	r0, #0
   202ea:	f000 80a1 	beq.w	20430 <net_context_connect+0x1c8>
	if (addr->sa_family != net_context_get_family(context)) {
   202ee:	4620      	mov	r0, r4
   202f0:	f8b6 9000 	ldrh.w	r9, [r6]
   202f4:	f7ff faee 	bl	1f8d4 <net_context_get_family>
   202f8:	4581      	cmp	r9, r0
   202fa:	d029      	beq.n	20350 <net_context_connect+0xe8>
		NET_ASSERT_INFO(addr->sa_family == \
   202fc:	4620      	mov	r0, r4
   202fe:	8835      	ldrh	r5, [r6, #0]
   20300:	f7ff fae8 	bl	1f8d4 <net_context_get_family>
   20304:	4285      	cmp	r5, r0
   20306:	d105      	bne.n	20314 <net_context_connect+0xac>
		return -EINVAL;
   20308:	f06f 0515 	mvn.w	r5, #21
}
   2030c:	4628      	mov	r0, r5
   2030e:	b00f      	add	sp, #60	; 0x3c
   20310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_ASSERT_INFO(addr->sa_family == \
   20314:	4b50      	ldr	r3, [pc, #320]	; (20458 <net_context_connect+0x1f0>)
   20316:	681b      	ldr	r3, [r3, #0]
   20318:	075b      	lsls	r3, r3, #29
   2031a:	d0f5      	beq.n	20308 <net_context_connect+0xa0>
   2031c:	2301      	movs	r3, #1
   2031e:	f04f 0500 	mov.w	r5, #0
   20322:	4a4e      	ldr	r2, [pc, #312]	; (2045c <net_context_connect+0x1f4>)
   20324:	8836      	ldrh	r6, [r6, #0]
   20326:	f363 0502 	bfi	r5, r3, #0, #3
   2032a:	4b4d      	ldr	r3, [pc, #308]	; (20460 <net_context_connect+0x1f8>)
   2032c:	1a9b      	subs	r3, r3, r2
   2032e:	08db      	lsrs	r3, r3, #3
   20330:	4620      	mov	r0, r4
   20332:	f36f 05c5 	bfc	r5, #3, #3
   20336:	f363 158f 	bfi	r5, r3, #6, #10
   2033a:	f7ff facb 	bl	1f8d4 <net_context_get_family>
   2033e:	f8ad 5000 	strh.w	r5, [sp]
   20342:	4603      	mov	r3, r0
   20344:	4632      	mov	r2, r6
   20346:	4948      	ldr	r1, [pc, #288]	; (20468 <net_context_connect+0x200>)
   20348:	484b      	ldr	r0, [pc, #300]	; (20478 <net_context_connect+0x210>)
   2034a:	f7e1 fefb 	bl	2144 <log_3>
   2034e:	e7db      	b.n	20308 <net_context_connect+0xa0>
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   20350:	4620      	mov	r0, r4
   20352:	f7ff fa97 	bl	1f884 <net_context_get_state>
   20356:	2803      	cmp	r0, #3
   20358:	d06d      	beq.n	20436 <net_context_connect+0x1ce>
	if (net_context_get_family(context) == AF_INET6) {
   2035a:	4620      	mov	r0, r4
   2035c:	f7ff faba 	bl	1f8d4 <net_context_get_family>
   20360:	280a      	cmp	r0, #10
   20362:	d1d1      	bne.n	20308 <net_context_connect+0xa0>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   20364:	2d17      	cmp	r5, #23
   20366:	d9cf      	bls.n	20308 <net_context_connect+0xa0>
		if (net_context_get_ip_proto(context) == IPPROTO_TCP &&
   20368:	4620      	mov	r0, r4
   2036a:	f7ff fa61 	bl	1f830 <net_context_get_ip_proto>
   2036e:	2806      	cmp	r0, #6
   20370:	d102      	bne.n	20378 <net_context_connect+0x110>
   20372:	7e23      	ldrb	r3, [r4, #24]
   20374:	2bff      	cmp	r3, #255	; 0xff
   20376:	d061      	beq.n	2043c <net_context_connect+0x1d4>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   20378:	f104 0518 	add.w	r5, r4, #24
   2037c:	2210      	movs	r2, #16
   2037e:	1d31      	adds	r1, r6, #4
   20380:	4628      	mov	r0, r5
   20382:	f7e6 fc81 	bl	6c88 <memcpy>
		addr6->sin6_family = AF_INET6;
   20386:	230a      	movs	r3, #10
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   20388:	f8b6 9002 	ldrh.w	r9, [r6, #2]
   2038c:	f8a4 9016 	strh.w	r9, [r4, #22]
		addr6->sin6_family = AF_INET6;
   20390:	82a3      	strh	r3, [r4, #20]
		if (!net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   20392:	4628      	mov	r0, r5
   20394:	f7ff fa16 	bl	1f7c4 <net_is_ipv6_addr_unspecified>
   20398:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   2039c:	bbb0      	cbnz	r0, 2040c <net_context_connect+0x1a4>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   2039e:	f063 037f 	orn	r3, r3, #127	; 0x7f
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   203a2:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
		ret = bind_default(context);
   203a6:	4620      	mov	r0, r4
   203a8:	f7ff fe72 	bl	20090 <bind_default>
		if (ret) {
   203ac:	4605      	mov	r5, r0
   203ae:	2800      	cmp	r0, #0
   203b0:	d1ac      	bne.n	2030c <net_context_connect+0xa4>
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   203b2:	230a      	movs	r3, #10
   203b4:	8123      	strh	r3, [r4, #8]
		net_sin6(&local_addr)->sin6_family = AF_INET6;
   203b6:	f8ad 3020 	strh.w	r3, [sp, #32]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   203ba:	68e3      	ldr	r3, [r4, #12]
		net_sin6(&local_addr)->sin6_port = lport =
   203bc:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
   203c0:	f8ad a022 	strh.w	sl, [sp, #34]	; 0x22
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   203c4:	b32b      	cbz	r3, 20412 <net_context_connect+0x1aa>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   203c6:	f10d 0c10 	add.w	ip, sp, #16
   203ca:	f103 0b10 	add.w	fp, r3, #16
   203ce:	4662      	mov	r2, ip
   203d0:	6818      	ldr	r0, [r3, #0]
   203d2:	6859      	ldr	r1, [r3, #4]
   203d4:	46e6      	mov	lr, ip
   203d6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   203da:	3308      	adds	r3, #8
   203dc:	455b      	cmp	r3, fp
   203de:	46f4      	mov	ip, lr
   203e0:	d1f6      	bne.n	203d0 <net_context_connect+0x168>
   203e2:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   203e4:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   203e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			laddr = &local_addr;
   203ec:	f10d 0b20 	add.w	fp, sp, #32
	switch (net_context_get_type(context)) {
   203f0:	4620      	mov	r0, r4
   203f2:	f7ff fa99 	bl	1f928 <net_context_get_type>
   203f6:	2801      	cmp	r0, #1
   203f8:	d00d      	beq.n	20416 <net_context_connect+0x1ae>
   203fa:	2802      	cmp	r0, #2
   203fc:	d121      	bne.n	20442 <net_context_connect+0x1da>
		if (cb) {
   203fe:	2f00      	cmp	r7, #0
   20400:	d084      	beq.n	2030c <net_context_connect+0xa4>
			cb(context, 0, user_data);
   20402:	4642      	mov	r2, r8
   20404:	2100      	movs	r1, #0
   20406:	4620      	mov	r0, r4
   20408:	47b8      	blx	r7
   2040a:	e77f      	b.n	2030c <net_context_connect+0xa4>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   2040c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20410:	e7c7      	b.n	203a2 <net_context_connect+0x13a>
	struct sockaddr *laddr = NULL;
   20412:	4683      	mov	fp, r0
   20414:	e7ec      	b.n	203f0 <net_context_connect+0x188>
		return net_tcp_connect(context, addr, laddr, rport, lport,
   20416:	9b18      	ldr	r3, [sp, #96]	; 0x60
   20418:	e9cd 7802 	strd	r7, r8, [sp, #8]
   2041c:	e9cd a300 	strd	sl, r3, [sp]
   20420:	465a      	mov	r2, fp
   20422:	464b      	mov	r3, r9
   20424:	4631      	mov	r1, r6
   20426:	4620      	mov	r0, r4
   20428:	f00a fef2 	bl	2b210 <net_tcp_connect>
   2042c:	4605      	mov	r5, r0
   2042e:	e76d      	b.n	2030c <net_context_connect+0xa4>
		return -EBADF;
   20430:	f06f 0508 	mvn.w	r5, #8
   20434:	e76a      	b.n	2030c <net_context_connect+0xa4>
		return -EOPNOTSUPP;
   20436:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   2043a:	e767      	b.n	2030c <net_context_connect+0xa4>
			return -EADDRNOTAVAIL;
   2043c:	f06f 0530 	mvn.w	r5, #48	; 0x30
   20440:	e764      	b.n	2030c <net_context_connect+0xa4>
		return -ENOTSUP;
   20442:	f06f 0522 	mvn.w	r5, #34	; 0x22
   20446:	e761      	b.n	2030c <net_context_connect+0xa4>
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   20448:	2800      	cmp	r0, #0
   2044a:	f43f af4a 	beq.w	202e2 <net_context_connect+0x7a>
   2044e:	4b08      	ldr	r3, [pc, #32]	; (20470 <net_context_connect+0x208>)
   20450:	4298      	cmp	r0, r3
   20452:	f4ff af46 	bcc.w	202e2 <net_context_connect+0x7a>
   20456:	e741      	b.n	202dc <net_context_connect+0x74>
   20458:	2000e278 	.word	0x2000e278
   2045c:	0002ef38 	.word	0x0002ef38
   20460:	0002f030 	.word	0x0002f030
   20464:	0003434a 	.word	0x0003434a
   20468:	00034336 	.word	0x00034336
   2046c:	00034366 	.word	0x00034366
   20470:	200021a0 	.word	0x200021a0
   20474:	200023a8 	.word	0x200023a8
   20478:	000343cb 	.word	0x000343cb

0002047c <net_context_send>:
{
   2047c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct net_context *context = net_pkt_context(pkt);
   2047e:	6984      	ldr	r4, [r0, #24]
{
   20480:	4605      	mov	r5, r0
   20482:	460e      	mov	r6, r1
   20484:	461f      	mov	r7, r3
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   20486:	b134      	cbz	r4, 20496 <net_context_send+0x1a>
   20488:	4a1c      	ldr	r2, [pc, #112]	; (204fc <net_context_send+0x80>)
   2048a:	4294      	cmp	r4, r2
   2048c:	d303      	bcc.n	20496 <net_context_send+0x1a>
   2048e:	f502 7202 	add.w	r2, r2, #520	; 0x208
   20492:	4294      	cmp	r4, r2
   20494:	d314      	bcc.n	204c0 <net_context_send+0x44>
   20496:	4b1a      	ldr	r3, [pc, #104]	; (20500 <net_context_send+0x84>)
   20498:	681b      	ldr	r3, [r3, #0]
   2049a:	075b      	lsls	r3, r3, #29
   2049c:	d010      	beq.n	204c0 <net_context_send+0x44>
   2049e:	2301      	movs	r3, #1
   204a0:	f04f 0200 	mov.w	r2, #0
   204a4:	f363 0202 	bfi	r2, r3, #0, #3
   204a8:	4916      	ldr	r1, [pc, #88]	; (20504 <net_context_send+0x88>)
   204aa:	4b17      	ldr	r3, [pc, #92]	; (20508 <net_context_send+0x8c>)
   204ac:	4817      	ldr	r0, [pc, #92]	; (2050c <net_context_send+0x90>)
   204ae:	1ac9      	subs	r1, r1, r3
   204b0:	08c9      	lsrs	r1, r1, #3
   204b2:	f36f 02c5 	bfc	r2, #3, #3
   204b6:	f361 128f 	bfi	r2, r1, #6, #10
   204ba:	4915      	ldr	r1, [pc, #84]	; (20510 <net_context_send+0x94>)
   204bc:	f7e1 fe16 	bl	20ec <log_1>
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   204c0:	f994 3065 	ldrsb.w	r3, [r4, #101]	; 0x65
   204c4:	2b00      	cmp	r3, #0
   204c6:	da15      	bge.n	204f4 <net_context_send+0x78>
   204c8:	8ae3      	ldrh	r3, [r4, #22]
   204ca:	b19b      	cbz	r3, 204f4 <net_context_send+0x78>
	return pkt->family;
   204cc:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
	if (net_pkt_family(pkt) == AF_INET6) {
   204d0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		addrlen = 0;
   204d4:	2b0a      	cmp	r3, #10
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   204d6:	9b08      	ldr	r3, [sp, #32]
   204d8:	bf08      	it	eq
   204da:	2218      	moveq	r2, #24
   204dc:	e9cd 7300 	strd	r7, r3, [sp]
   204e0:	bf18      	it	ne
   204e2:	2200      	movne	r2, #0
   204e4:	4633      	mov	r3, r6
   204e6:	f104 0114 	add.w	r1, r4, #20
   204ea:	4628      	mov	r0, r5
   204ec:	f7ff fe3e 	bl	2016c <sendto.isra.13>
}
   204f0:	b003      	add	sp, #12
   204f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EDESTADDRREQ;
   204f4:	f06f 0027 	mvn.w	r0, #39	; 0x27
   204f8:	e7fa      	b.n	204f0 <net_context_send+0x74>
   204fa:	bf00      	nop
   204fc:	200021a0 	.word	0x200021a0
   20500:	2000e278 	.word	0x2000e278
   20504:	0002f030 	.word	0x0002f030
   20508:	0002ef38 	.word	0x0002ef38
   2050c:	00034366 	.word	0x00034366
   20510:	00034217 	.word	0x00034217

00020514 <net_context_sendto>:
{
   20514:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_context *context = net_pkt_context(pkt);
   20518:	f8d0 b018 	ldr.w	fp, [r0, #24]
{
   2051c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2051e:	4604      	mov	r4, r0
   20520:	4688      	mov	r8, r1
   20522:	4691      	mov	r9, r2
   20524:	461d      	mov	r5, r3
   20526:	e9dd a60a 	ldrd	sl, r6, [sp, #40]	; 0x28
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   2052a:	f1bb 0f00 	cmp.w	fp, #0
   2052e:	d006      	beq.n	2053e <net_context_sendto+0x2a>
   20530:	4b1a      	ldr	r3, [pc, #104]	; (2059c <net_context_sendto+0x88>)
   20532:	459b      	cmp	fp, r3
   20534:	d303      	bcc.n	2053e <net_context_sendto+0x2a>
   20536:	f503 7302 	add.w	r3, r3, #520	; 0x208
   2053a:	459b      	cmp	fp, r3
   2053c:	d314      	bcc.n	20568 <net_context_sendto+0x54>
   2053e:	4b18      	ldr	r3, [pc, #96]	; (205a0 <net_context_sendto+0x8c>)
   20540:	681b      	ldr	r3, [r3, #0]
   20542:	075b      	lsls	r3, r3, #29
   20544:	d010      	beq.n	20568 <net_context_sendto+0x54>
   20546:	2301      	movs	r3, #1
   20548:	f04f 0200 	mov.w	r2, #0
   2054c:	f363 0202 	bfi	r2, r3, #0, #3
   20550:	4914      	ldr	r1, [pc, #80]	; (205a4 <net_context_sendto+0x90>)
   20552:	4b15      	ldr	r3, [pc, #84]	; (205a8 <net_context_sendto+0x94>)
   20554:	4815      	ldr	r0, [pc, #84]	; (205ac <net_context_sendto+0x98>)
   20556:	1a5b      	subs	r3, r3, r1
   20558:	f36f 02c5 	bfc	r2, #3, #3
   2055c:	08db      	lsrs	r3, r3, #3
   2055e:	f363 128f 	bfi	r2, r3, #6, #10
   20562:	4913      	ldr	r1, [pc, #76]	; (205b0 <net_context_sendto+0x9c>)
   20564:	f7e1 fdc2 	bl	20ec <log_1>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   20568:	4658      	mov	r0, fp
   2056a:	f7ff f961 	bl	1f830 <net_context_get_ip_proto>
   2056e:	2806      	cmp	r0, #6
   20570:	d109      	bne.n	20586 <net_context_sendto+0x72>
		return net_context_send(pkt, cb, timeout, token, user_data);
   20572:	4633      	mov	r3, r6
   20574:	4652      	mov	r2, sl
   20576:	4629      	mov	r1, r5
   20578:	4620      	mov	r0, r4
   2057a:	970a      	str	r7, [sp, #40]	; 0x28
}
   2057c:	b001      	add	sp, #4
   2057e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return net_context_send(pkt, cb, timeout, token, user_data);
   20582:	f7ff bf7b 	b.w	2047c <net_context_send>
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   20586:	462b      	mov	r3, r5
   20588:	464a      	mov	r2, r9
   2058a:	4641      	mov	r1, r8
   2058c:	4620      	mov	r0, r4
   2058e:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
}
   20592:	b001      	add	sp, #4
   20594:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   20598:	f7ff bde8 	b.w	2016c <sendto.isra.13>
   2059c:	200021a0 	.word	0x200021a0
   205a0:	2000e278 	.word	0x2000e278
   205a4:	0002ef38 	.word	0x0002ef38
   205a8:	0002f030 	.word	0x0002f030
   205ac:	00034366 	.word	0x00034366
   205b0:	00034228 	.word	0x00034228

000205b4 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
   205b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   205b8:	4688      	mov	r8, r1
   205ba:	b08f      	sub	sp, #60	; 0x3c
   205bc:	4617      	mov	r7, r2
   205be:	4699      	mov	r9, r3
	int ret;
	NET_ASSERT(context);
   205c0:	4604      	mov	r4, r0
   205c2:	b9a0      	cbnz	r0, 205ee <net_context_recv+0x3a>
   205c4:	4b4a      	ldr	r3, [pc, #296]	; (206f0 <net_context_recv+0x13c>)
   205c6:	681b      	ldr	r3, [r3, #0]
   205c8:	075b      	lsls	r3, r3, #29
   205ca:	d010      	beq.n	205ee <net_context_recv+0x3a>
   205cc:	2301      	movs	r3, #1
   205ce:	f04f 0200 	mov.w	r2, #0
   205d2:	f363 0202 	bfi	r2, r3, #0, #3
   205d6:	4947      	ldr	r1, [pc, #284]	; (206f4 <net_context_recv+0x140>)
   205d8:	4b47      	ldr	r3, [pc, #284]	; (206f8 <net_context_recv+0x144>)
   205da:	1a5b      	subs	r3, r3, r1
   205dc:	f360 02c5 	bfi	r2, r0, #3, #3
   205e0:	08db      	lsrs	r3, r3, #3
   205e2:	f363 128f 	bfi	r2, r3, #6, #10
   205e6:	4945      	ldr	r1, [pc, #276]	; (206fc <net_context_recv+0x148>)
   205e8:	4845      	ldr	r0, [pc, #276]	; (20700 <net_context_recv+0x14c>)
   205ea:	f7e1 fd7f 	bl	20ec <log_1>

	if (!net_context_is_used(context)) {
   205ee:	4620      	mov	r0, r4
   205f0:	f7ff f8f6 	bl	1f7e0 <net_context_is_used>
   205f4:	2800      	cmp	r0, #0
   205f6:	d072      	beq.n	206de <net_context_recv+0x12a>
			net_context_get_iface(context),
			context, cb, timeout, user_data);
	}
#endif /* CONFIG_NET_OFFLOAD */

	switch (net_context_get_ip_proto(context)) {
   205f8:	4620      	mov	r0, r4
   205fa:	f7ff f919 	bl	1f830 <net_context_get_ip_proto>
   205fe:	2806      	cmp	r0, #6
   20600:	d067      	beq.n	206d2 <net_context_recv+0x11e>
   20602:	2811      	cmp	r0, #17
   20604:	d16e      	bne.n	206e4 <net_context_recv+0x130>
	struct sockaddr local_addr = {
   20606:	2218      	movs	r2, #24
   20608:	2100      	movs	r1, #0
   2060a:	a808      	add	r0, sp, #32
   2060c:	f7e6 fb69 	bl	6ce2 <memset>
		.sa_family = net_context_get_family(context),
   20610:	4620      	mov	r0, r4
   20612:	f7ff f95f 	bl	1f8d4 <net_context_get_family>
	struct sockaddr local_addr = {
   20616:	f8ad 0020 	strh.w	r0, [sp, #32]
	if (context->conn_handler) {
   2061a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2061c:	b118      	cbz	r0, 20626 <net_context_recv+0x72>
		net_conn_unregister(context->conn_handler);
   2061e:	f008 ff69 	bl	294f4 <net_conn_unregister>
		context->conn_handler = NULL;
   20622:	2300      	movs	r3, #0
   20624:	62e3      	str	r3, [r4, #44]	; 0x2c
	ret = bind_default(context);
   20626:	4620      	mov	r0, r4
   20628:	f7ff fd32 	bl	20090 <bind_default>
	if (ret) {
   2062c:	4605      	mov	r5, r0
   2062e:	2800      	cmp	r0, #0
   20630:	d13a      	bne.n	206a8 <net_context_recv+0xf4>
	if (net_context_get_family(context) == AF_INET6) {
   20632:	4620      	mov	r0, r4
   20634:	f7ff f94e 	bl	1f8d4 <net_context_get_family>
   20638:	280a      	cmp	r0, #10
   2063a:	d148      	bne.n	206ce <net_context_recv+0x11a>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   2063c:	68e2      	ldr	r2, [r4, #12]
   2063e:	2a00      	cmp	r2, #0
   20640:	d043      	beq.n	206ca <net_context_recv+0x116>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   20642:	ad04      	add	r5, sp, #16
   20644:	f102 0c10 	add.w	ip, r2, #16
   20648:	462b      	mov	r3, r5
   2064a:	6810      	ldr	r0, [r2, #0]
   2064c:	6851      	ldr	r1, [r2, #4]
   2064e:	462e      	mov	r6, r5
   20650:	c603      	stmia	r6!, {r0, r1}
   20652:	3208      	adds	r2, #8
   20654:	4562      	cmp	r2, ip
   20656:	4635      	mov	r5, r6
   20658:	d1f7      	bne.n	2064a <net_context_recv+0x96>
   2065a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2065c:	ad09      	add	r5, sp, #36	; 0x24
   2065e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   20662:	ae08      	add	r6, sp, #32
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   20664:	8965      	ldrh	r5, [r4, #10]
		net_sin6(&local_addr)->sin6_port =
   20666:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	context->recv_cb = cb;
   2066a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	ret = net_conn_register(net_context_get_ip_proto(context),
   2066e:	4620      	mov	r0, r4
   20670:	f7ff f8de 	bl	1f830 <net_context_get_ip_proto>
				ntohs(net_sin(&context->remote)->sin_port),
   20674:	8ae2      	ldrh	r2, [r4, #22]
	ret = net_conn_register(net_context_get_ip_proto(context),
   20676:	f994 3065 	ldrsb.w	r3, [r4, #101]	; 0x65
   2067a:	2b00      	cmp	r3, #0
				ntohs(net_sin(&context->remote)->sin_port),
   2067c:	ea4f 2302 	mov.w	r3, r2, lsl #8
   20680:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   20684:	ba6d      	rev16	r5, r5
   20686:	f104 022c 	add.w	r2, r4, #44	; 0x2c
   2068a:	e9cd 9202 	strd	r9, r2, [sp, #8]
   2068e:	b2ad      	uxth	r5, r5
   20690:	4a1c      	ldr	r2, [pc, #112]	; (20704 <net_context_recv+0x150>)
   20692:	9201      	str	r2, [sp, #4]
   20694:	bfb4      	ite	lt
   20696:	f104 0114 	addlt.w	r1, r4, #20
   2069a:	2100      	movge	r1, #0
   2069c:	9500      	str	r5, [sp, #0]
   2069e:	b29b      	uxth	r3, r3
   206a0:	4632      	mov	r2, r6
   206a2:	f008 ff41 	bl	29528 <net_conn_register>
		ret = recv_udp(context, cb, timeout, user_data);
		break;
#endif /* CONFIG_NET_UDP */

	case IPPROTO_TCP:
		ret = net_tcp_recv(context, cb, user_data);
   206a6:	4605      	mov	r5, r0
	default:
		ret = -EPROTOTYPE;
		break;
	}

	if (ret < 0) {
   206a8:	2d00      	cmp	r5, #0
   206aa:	db0a      	blt.n	206c2 <net_context_recv+0x10e>
		return ret;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (timeout) {
   206ac:	b147      	cbz	r7, 206c0 <net_context_recv+0x10c>
	sem->count = 0;
   206ae:	2300      	movs	r3, #0
   206b0:	6563      	str	r3, [r4, #84]	; 0x54
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   206b2:	4639      	mov	r1, r7
   206b4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   206b8:	f00d fe06 	bl	2e2c8 <_impl_k_sem_take>
		 * semaphore when data has been received.
		 */
		k_sem_reset(&context->recv_data_wait);

		ret = k_sem_take(&context->recv_data_wait, timeout);
		if (ret == -EAGAIN) {
   206bc:	300b      	adds	r0, #11
   206be:	d014      	beq.n	206ea <net_context_recv+0x136>
			return -ETIMEDOUT;
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return 0;
   206c0:	2500      	movs	r5, #0
}
   206c2:	4628      	mov	r0, r5
   206c4:	b00f      	add	sp, #60	; 0x3c
   206c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct sockaddr *laddr = NULL;
   206ca:	4616      	mov	r6, r2
   206cc:	e7ca      	b.n	20664 <net_context_recv+0xb0>
   206ce:	462e      	mov	r6, r5
   206d0:	e7cb      	b.n	2066a <net_context_recv+0xb6>
		ret = net_tcp_recv(context, cb, user_data);
   206d2:	464a      	mov	r2, r9
   206d4:	4641      	mov	r1, r8
   206d6:	4620      	mov	r0, r4
   206d8:	f00a fcbe 	bl	2b058 <net_tcp_recv>
   206dc:	e7e3      	b.n	206a6 <net_context_recv+0xf2>
		return -EBADF;
   206de:	f06f 0508 	mvn.w	r5, #8
   206e2:	e7ee      	b.n	206c2 <net_context_recv+0x10e>
		ret = -EPROTOTYPE;
   206e4:	f06f 0528 	mvn.w	r5, #40	; 0x28
   206e8:	e7eb      	b.n	206c2 <net_context_recv+0x10e>
			return -ETIMEDOUT;
   206ea:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   206ee:	e7e8      	b.n	206c2 <net_context_recv+0x10e>
   206f0:	2000e278 	.word	0x2000e278
   206f4:	0002ef38 	.word	0x0002ef38
   206f8:	0002f030 	.word	0x0002f030
   206fc:	00034257 	.word	0x00034257
   20700:	00030684 	.word	0x00030684
   20704:	0001fa65 	.word	0x0001fa65

00020708 <net_context_foreach>:

	return ret;
}

void net_context_foreach(net_context_cb_t cb, void *user_data)
{
   20708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2070c:	4606      	mov	r6, r0
   2070e:	460f      	mov	r7, r1
   20710:	480d      	ldr	r0, [pc, #52]	; (20748 <net_context_foreach+0x40>)
   20712:	f8df 9038 	ldr.w	r9, [pc, #56]	; 2074c <net_context_foreach+0x44>
   20716:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2071a:	f00d fdd5 	bl	2e2c8 <_impl_k_sem_take>
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   2071e:	2400      	movs	r4, #0
   20720:	f04f 0868 	mov.w	r8, #104	; 0x68
   20724:	fb08 9504 	mla	r5, r8, r4, r9
		if (!net_context_is_used(&contexts[i])) {
   20728:	4628      	mov	r0, r5
   2072a:	f7ff f859 	bl	1f7e0 <net_context_is_used>
   2072e:	b110      	cbz	r0, 20736 <net_context_foreach+0x2e>
			continue;
		}

		cb(&contexts[i], user_data);
   20730:	4639      	mov	r1, r7
   20732:	4628      	mov	r0, r5
   20734:	47b0      	blx	r6
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   20736:	3401      	adds	r4, #1
   20738:	2c05      	cmp	r4, #5
   2073a:	d1f3      	bne.n	20724 <net_context_foreach+0x1c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2073c:	4802      	ldr	r0, [pc, #8]	; (20748 <net_context_foreach+0x40>)
	}

	k_sem_give(&contexts_lock);
}
   2073e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20742:	f00d bd9a 	b.w	2e27a <_impl_k_sem_give>
   20746:	bf00      	nop
   20748:	200023a8 	.word	0x200023a8
   2074c:	200021a0 	.word	0x200021a0

00020750 <net_context_init>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   20750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20754:	2101      	movs	r1, #1
   20756:	4801      	ldr	r0, [pc, #4]	; (2075c <net_context_init+0xc>)
   20758:	f00d bd86 	b.w	2e268 <_impl_k_sem_init>
   2075c:	200023a8 	.word	0x200023a8

00020760 <net_is_ipv6_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20760:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20762:	b94a      	cbnz	r2, 20778 <net_is_ipv6_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20764:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20766:	b93b      	cbnz	r3, 20778 <net_is_ipv6_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20768:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2076a:	b92a      	cbnz	r2, 20778 <net_is_ipv6_addr_loopback+0x18>
   2076c:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2076e:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
   20772:	4258      	negs	r0, r3
   20774:	4158      	adcs	r0, r3
   20776:	4770      	bx	lr
   20778:	2000      	movs	r0, #0
   2077a:	4770      	bx	lr

0002077c <processing_data>:
		locally_routed = true;
	}
#endif

	/* If there is no data, then drop the packet. */
	if (!pkt->frags) {
   2077c:	6943      	ldr	r3, [r0, #20]

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   2077e:	b510      	push	{r4, lr}
   20780:	4604      	mov	r4, r0
	if (!pkt->frags) {
   20782:	b13b      	cbz	r3, 20794 <processing_data+0x18>
	if (!is_loopback && !locally_routed) {
   20784:	b159      	cbz	r1, 2079e <processing_data+0x22>
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
   20786:	6963      	ldr	r3, [r4, #20]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   20788:	689b      	ldr	r3, [r3, #8]
   2078a:	781b      	ldrb	r3, [r3, #0]
   2078c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   20790:	2b60      	cmp	r3, #96	; 0x60
   20792:	d00d      	beq.n	207b0 <processing_data+0x34>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   20794:	4620      	mov	r0, r4
		break;
	}
}
   20796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_pkt_unref(pkt);
   2079a:	f001 bf30 	b.w	225fe <net_pkt_unref>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
   2079e:	4601      	mov	r1, r0
   207a0:	6a00      	ldr	r0, [r0, #32]
   207a2:	f001 fabb 	bl	21d1c <net_if_recv_data>
		if (ret != NET_CONTINUE) {
   207a6:	2801      	cmp	r0, #1
   207a8:	d0ed      	beq.n	20786 <processing_data+0xa>
	switch (process_data(pkt, is_loopback)) {
   207aa:	2800      	cmp	r0, #0
   207ac:	d1f2      	bne.n	20794 <processing_data+0x18>
}
   207ae:	bd10      	pop	{r4, pc}
	pkt->family = family;
   207b0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   207b4:	220a      	movs	r2, #10
   207b6:	f362 03c6 	bfi	r3, r2, #3, #4
   207ba:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
		return net_ipv6_process_pkt(pkt);
   207be:	4620      	mov	r0, r4
   207c0:	f004 fc7a 	bl	250b8 <net_ipv6_process_pkt>
   207c4:	e7f1      	b.n	207aa <processing_data+0x2e>

000207c6 <net_init>:

	NET_DBG("Network L3 init done");
}

static int net_init(struct device *unused)
{
   207c6:	b508      	push	{r3, lr}

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   207c8:	f002 fb08 	bl	22ddc <net_pkt_init>

	net_context_init();
   207cc:	f7ff ffc0 	bl	20750 <net_context_init>
	net_icmpv6_init();
   207d0:	f004 f9f2 	bl	24bb8 <net_icmpv6_init>
	net_ipv6_init();
   207d4:	f004 fd90 	bl	252f8 <net_ipv6_init>
	net_conn_init();
   207d8:	f009 f8b0 	bl	2993c <net_conn_init>
	net_tcp_init();
   207dc:	f009 fbe2 	bl	29fa4 <net_tcp_init>
	net_route_init();
   207e0:	f007 fa16 	bl	27c10 <net_route_init>

	l3_init();

	net_mgmt_event_init();
   207e4:	f006 ffae 	bl	27744 <net_mgmt_event_init>
	net_if_init();
   207e8:	f001 fc12 	bl	22010 <net_if_init>
	net_tc_rx_init();
   207ec:	f002 fb50 	bl	22e90 <net_tc_rx_init>
	net_if_post_init();
   207f0:	f001 fcae 	bl	22150 <net_if_post_init>
	if (status) {
		return status;
	}
#endif

	net_shell_init();
   207f4:	f008 fe4a 	bl	2948c <net_shell_init>

	return status;
}
   207f8:	2000      	movs	r0, #0
   207fa:	bd08      	pop	{r3, pc}

000207fc <process_rx_packet>:
{
   207fc:	4603      	mov	r3, r0
	pkt = CONTAINER_OF(work, struct net_pkt, work);
   207fe:	3804      	subs	r0, #4
	pkt_len = net_pkt_get_len(pkt);
   20800:	6919      	ldr	r1, [r3, #16]
	while (buf) {
   20802:	b909      	cbnz	r1, 20808 <process_rx_packet+0xc>
	processing_data(pkt, false);
   20804:	f7ff bfba 	b.w	2077c <processing_data>
		buf = buf->frags;
   20808:	6809      	ldr	r1, [r1, #0]
   2080a:	e7fa      	b.n	20802 <process_rx_packet+0x6>

0002080c <net_send_data>:
{
   2080c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pkt || !pkt->frags) {
   20810:	4604      	mov	r4, r0
{
   20812:	b090      	sub	sp, #64	; 0x40
	if (!pkt || !pkt->frags) {
   20814:	2800      	cmp	r0, #0
   20816:	f000 8082 	beq.w	2091e <net_send_data+0x112>
   2081a:	6942      	ldr	r2, [r0, #20]
   2081c:	2a00      	cmp	r2, #0
   2081e:	d07e      	beq.n	2091e <net_send_data+0x112>
	if (!net_pkt_iface(pkt)) {
   20820:	6a03      	ldr	r3, [r0, #32]
   20822:	2b00      	cmp	r3, #0
   20824:	d07e      	beq.n	20924 <net_send_data+0x118>
	return pkt->family;
   20826:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
	if (net_pkt_family(pkt) == AF_INET6) {
   2082a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   2082e:	2b0a      	cmp	r3, #10
   20830:	d16b      	bne.n	2090a <net_send_data+0xfe>
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   20832:	6895      	ldr	r5, [r2, #8]
   20834:	f004 fb96 	bl	24f64 <net_ipv6_unspecified_address>
   20838:	3518      	adds	r5, #24
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   2083a:	4601      	mov	r1, r0
   2083c:	2210      	movs	r2, #16
   2083e:	4628      	mov	r0, r5
   20840:	f7e6 f9fb 	bl	6c3a <memcmp>
   20844:	b920      	cbnz	r0, 20850 <net_send_data+0x44>
			return -EADDRNOTAVAIL;
   20846:	f06f 0030 	mvn.w	r0, #48	; 0x30
}
   2084a:	b010      	add	sp, #64	; 0x40
   2084c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return pkt->frags->data;
   20850:	6963      	ldr	r3, [r4, #20]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   20852:	689d      	ldr	r5, [r3, #8]
   20854:	3518      	adds	r5, #24
   20856:	4628      	mov	r0, r5
   20858:	f7ff ff82 	bl	20760 <net_is_ipv6_addr_loopback>
   2085c:	4601      	mov	r1, r0
   2085e:	2800      	cmp	r0, #0
   20860:	d047      	beq.n	208f2 <net_send_data+0xe6>
   20862:	6963      	ldr	r3, [r4, #20]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   20864:	689a      	ldr	r2, [r3, #8]
   20866:	ae0c      	add	r6, sp, #48	; 0x30
   20868:	f102 0308 	add.w	r3, r2, #8
   2086c:	4635      	mov	r5, r6
   2086e:	3218      	adds	r2, #24
   20870:	6818      	ldr	r0, [r3, #0]
   20872:	6859      	ldr	r1, [r3, #4]
   20874:	4637      	mov	r7, r6
   20876:	c703      	stmia	r7!, {r0, r1}
   20878:	3308      	adds	r3, #8
   2087a:	4293      	cmp	r3, r2
   2087c:	463e      	mov	r6, r7
   2087e:	d1f7      	bne.n	20870 <net_send_data+0x64>
   20880:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   20884:	466e      	mov	r6, sp
   20886:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   2088a:	6963      	ldr	r3, [r4, #20]
   2088c:	689b      	ldr	r3, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   2088e:	af08      	add	r7, sp, #32
   20890:	f103 0218 	add.w	r2, r3, #24
   20894:	f103 0828 	add.w	r8, r3, #40	; 0x28
   20898:	46bc      	mov	ip, r7
   2089a:	6810      	ldr	r0, [r2, #0]
   2089c:	6851      	ldr	r1, [r2, #4]
   2089e:	46be      	mov	lr, r7
   208a0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   208a4:	3208      	adds	r2, #8
   208a6:	4542      	cmp	r2, r8
   208a8:	4677      	mov	r7, lr
   208aa:	d1f6      	bne.n	2089a <net_send_data+0x8e>
   208ac:	4667      	mov	r7, ip
   208ae:	3308      	adds	r3, #8
   208b0:	463a      	mov	r2, r7
   208b2:	ca03      	ldmia	r2!, {r0, r1}
   208b4:	42aa      	cmp	r2, r5
   208b6:	6018      	str	r0, [r3, #0]
   208b8:	6059      	str	r1, [r3, #4]
   208ba:	4617      	mov	r7, r2
   208bc:	f103 0308 	add.w	r3, r3, #8
   208c0:	d1f6      	bne.n	208b0 <net_send_data+0xa4>
   208c2:	6963      	ldr	r3, [r4, #20]
   208c4:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   208c6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   208ca:	ad04      	add	r5, sp, #16
   208cc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   208d0:	f107 0318 	add.w	r3, r7, #24
   208d4:	462a      	mov	r2, r5
   208d6:	ca03      	ldmia	r2!, {r0, r1}
   208d8:	4562      	cmp	r2, ip
   208da:	6018      	str	r0, [r3, #0]
   208dc:	6059      	str	r1, [r3, #4]
   208de:	4615      	mov	r5, r2
   208e0:	f103 0308 	add.w	r3, r3, #8
   208e4:	d1f6      	bne.n	208d4 <net_send_data+0xc8>
		processing_data(pkt, true);
   208e6:	2101      	movs	r1, #1
   208e8:	4620      	mov	r0, r4
   208ea:	f7ff ff47 	bl	2077c <processing_data>
		return 0;
   208ee:	2000      	movs	r0, #0
   208f0:	e7ab      	b.n	2084a <net_send_data+0x3e>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   208f2:	4628      	mov	r0, r5
   208f4:	f000 fa56 	bl	20da4 <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   208f8:	2800      	cmp	r0, #0
   208fa:	d1b2      	bne.n	20862 <net_send_data+0x56>
   208fc:	6963      	ldr	r3, [r4, #20]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   208fe:	6898      	ldr	r0, [r3, #8]
   20900:	3008      	adds	r0, #8
   20902:	f7ff ff2d 	bl	20760 <net_is_ipv6_addr_loopback>
   20906:	2800      	cmp	r0, #0
   20908:	d19d      	bne.n	20846 <net_send_data+0x3a>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   2090a:	4621      	mov	r1, r4
   2090c:	6a20      	ldr	r0, [r4, #32]
   2090e:	f001 fa5a 	bl	21dc6 <net_if_send_data>
	return 0;
   20912:	2802      	cmp	r0, #2
   20914:	bf0c      	ite	eq
   20916:	f06f 0004 	mvneq.w	r0, #4
   2091a:	2000      	movne	r0, #0
   2091c:	e795      	b.n	2084a <net_send_data+0x3e>
		return -ENODATA;
   2091e:	f06f 004d 	mvn.w	r0, #77	; 0x4d
   20922:	e792      	b.n	2084a <net_send_data+0x3e>
		return -EINVAL;
   20924:	f06f 0015 	mvn.w	r0, #21
   20928:	e78f      	b.n	2084a <net_send_data+0x3e>
	...

0002092c <net_recv_data>:
{
   2092c:	b538      	push	{r3, r4, r5, lr}
	if (!pkt || !iface) {
   2092e:	460d      	mov	r5, r1
   20930:	b309      	cbz	r1, 20976 <net_recv_data+0x4a>
   20932:	b300      	cbz	r0, 20976 <net_recv_data+0x4a>
	if (!pkt->frags) {
   20934:	694b      	ldr	r3, [r1, #20]
   20936:	b30b      	cbz	r3, 2097c <net_recv_data+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20938:	6803      	ldr	r3, [r0, #0]
   2093a:	f3bf 8f5b 	dmb	ish
   2093e:	68db      	ldr	r3, [r3, #12]
   20940:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   20944:	07db      	lsls	r3, r3, #31
   20946:	d51c      	bpl.n	20982 <net_recv_data+0x56>
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   20948:	6803      	ldr	r3, [r0, #0]
	pkt->iface = iface;
   2094a:	6208      	str	r0, [r1, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   2094c:	7d5b      	ldrb	r3, [r3, #21]
   2094e:	f881 3031 	strb.w	r3, [r1, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   20952:	6803      	ldr	r3, [r0, #0]
   20954:	7d5b      	ldrb	r3, [r3, #21]
   20956:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
	u8_t tc = net_rx_priority2tc(prio);
   2095a:	2000      	movs	r0, #0
   2095c:	f002 fa74 	bl	22e48 <net_rx_priority2tc>
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   20960:	4b09      	ldr	r3, [pc, #36]	; (20988 <net_recv_data+0x5c>)
   20962:	2400      	movs	r4, #0
	net_tc_submit_to_rx_queue(tc, pkt);
   20964:	b2c0      	uxtb	r0, r0
   20966:	606c      	str	r4, [r5, #4]
   20968:	e9c5 3402 	strd	r3, r4, [r5, #8]
   2096c:	4629      	mov	r1, r5
   2096e:	f002 fa59 	bl	22e24 <net_tc_submit_to_rx_queue>
	return 0;
   20972:	4620      	mov	r0, r4
}
   20974:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   20976:	f06f 0015 	mvn.w	r0, #21
   2097a:	e7fb      	b.n	20974 <net_recv_data+0x48>
		return -ENODATA;
   2097c:	f06f 004d 	mvn.w	r0, #77	; 0x4d
   20980:	e7f8      	b.n	20974 <net_recv_data+0x48>
		return -ENETDOWN;
   20982:	f06f 003d 	mvn.w	r0, #61	; 0x3d
   20986:	e7f5      	b.n	20974 <net_recv_data+0x48>
   20988:	000207fd 	.word	0x000207fd

0002098c <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2098c:	b510      	push	{r4, lr}
   2098e:	6803      	ldr	r3, [r0, #0]
   20990:	2200      	movs	r2, #0
   20992:	b90b      	cbnz	r3, 20998 <sys_slist_find_and_remove+0xc>
   20994:	4618      	mov	r0, r3
   20996:	e00b      	b.n	209b0 <sys_slist_find_and_remove+0x24>
   20998:	428b      	cmp	r3, r1
   2099a:	681c      	ldr	r4, [r3, #0]
   2099c:	d10f      	bne.n	209be <sys_slist_find_and_remove+0x32>
Z_GENLIST_REMOVE(slist, snode)
   2099e:	b942      	cbnz	r2, 209b2 <sys_slist_find_and_remove+0x26>
   209a0:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   209a2:	6004      	str	r4, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   209a4:	4293      	cmp	r3, r2
   209a6:	d100      	bne.n	209aa <sys_slist_find_and_remove+0x1e>
	list->tail = node;
   209a8:	6044      	str	r4, [r0, #4]
	parent->next = child;
   209aa:	2200      	movs	r2, #0
   209ac:	601a      	str	r2, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   209ae:	2001      	movs	r0, #1
   209b0:	bd10      	pop	{r4, pc}
	parent->next = child;
   209b2:	6014      	str	r4, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   209b4:	6841      	ldr	r1, [r0, #4]
   209b6:	428b      	cmp	r3, r1
	list->tail = node;
   209b8:	bf08      	it	eq
   209ba:	6042      	streq	r2, [r0, #4]
   209bc:	e7f5      	b.n	209aa <sys_slist_find_and_remove+0x1e>
   209be:	461a      	mov	r2, r3
   209c0:	4623      	mov	r3, r4
   209c2:	e7e6      	b.n	20992 <sys_slist_find_and_remove+0x6>

000209c4 <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		log_strdup(net_sprint_ipv6_addr(&router->address.in6_addr)));

	router->is_used = false;
   209c4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   209c8:	f36f 0300 	bfc	r3, #0, #1
   209cc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
}
   209d0:	4770      	bx	lr

000209d2 <atomic_test_bit>:
   209d2:	f3bf 8f5b 	dmb	ish
   209d6:	6800      	ldr	r0, [r0, #0]
   209d8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
   209dc:	4108      	asrs	r0, r1
}
   209de:	f000 0001 	and.w	r0, r0, #1
   209e2:	4770      	bx	lr

000209e4 <net_context_get_ip_proto>:
{
   209e4:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   209e6:	4604      	mov	r4, r0
   209e8:	b9a0      	cbnz	r0, 20a14 <net_context_get_ip_proto+0x30>
   209ea:	4b0e      	ldr	r3, [pc, #56]	; (20a24 <net_context_get_ip_proto+0x40>)
   209ec:	681b      	ldr	r3, [r3, #0]
   209ee:	075b      	lsls	r3, r3, #29
   209f0:	d010      	beq.n	20a14 <net_context_get_ip_proto+0x30>
   209f2:	2301      	movs	r3, #1
   209f4:	f04f 0200 	mov.w	r2, #0
   209f8:	f363 0202 	bfi	r2, r3, #0, #3
   209fc:	490a      	ldr	r1, [pc, #40]	; (20a28 <net_context_get_ip_proto+0x44>)
   209fe:	4b0b      	ldr	r3, [pc, #44]	; (20a2c <net_context_get_ip_proto+0x48>)
   20a00:	1a5b      	subs	r3, r3, r1
   20a02:	f360 02c5 	bfi	r2, r0, #3, #3
   20a06:	08db      	lsrs	r3, r3, #3
   20a08:	f363 128f 	bfi	r2, r3, #6, #10
   20a0c:	4908      	ldr	r1, [pc, #32]	; (20a30 <net_context_get_ip_proto+0x4c>)
   20a0e:	4809      	ldr	r0, [pc, #36]	; (20a34 <net_context_get_ip_proto+0x50>)
   20a10:	f7e1 fb6c 	bl	20ec <log_1>
	if (context->flags & NET_CONTEXT_PROTO) {
   20a14:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
	return IPPROTO_UDP;
   20a18:	f013 0f40 	tst.w	r3, #64	; 0x40
}
   20a1c:	bf14      	ite	ne
   20a1e:	2006      	movne	r0, #6
   20a20:	2011      	moveq	r0, #17
   20a22:	bd10      	pop	{r4, pc}
   20a24:	2000e280 	.word	0x2000e280
   20a28:	0002ef38 	.word	0x0002ef38
   20a2c:	0002f040 	.word	0x0002f040
   20a30:	000347a2 	.word	0x000347a2
   20a34:	00030684 	.word	0x00030684

00020a38 <net_context_send_cb>:
{
   20a38:	b570      	push	{r4, r5, r6, lr}
   20a3a:	460e      	mov	r6, r1
	if (!context) {
   20a3c:	4604      	mov	r4, r0
{
   20a3e:	4611      	mov	r1, r2
	if (!context) {
   20a40:	b170      	cbz	r0, 20a60 <net_context_send_cb+0x28>
	if (context->send_cb) {
   20a42:	6b45      	ldr	r5, [r0, #52]	; 0x34
   20a44:	b115      	cbz	r5, 20a4c <net_context_send_cb+0x14>
		context->send_cb(context, status, token, context->user_data);
   20a46:	6803      	ldr	r3, [r0, #0]
   20a48:	4632      	mov	r2, r6
   20a4a:	47a8      	blx	r5
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   20a4c:	4620      	mov	r0, r4
   20a4e:	f7ff ffc9 	bl	209e4 <net_context_get_ip_proto>
   20a52:	2811      	cmp	r0, #17
   20a54:	d004      	beq.n	20a60 <net_context_send_cb+0x28>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   20a56:	4620      	mov	r0, r4
}
   20a58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   20a5c:	f7ff bfc2 	b.w	209e4 <net_context_get_ip_proto>
}
   20a60:	bd70      	pop	{r4, r5, r6, pc}

00020a62 <net_is_ipv6_prefix>:
	if (length > 128) {
   20a62:	2a80      	cmp	r2, #128	; 0x80
{
   20a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20a66:	4607      	mov	r7, r0
   20a68:	460e      	mov	r6, r1
   20a6a:	4614      	mov	r4, r2
	if (length > 128) {
   20a6c:	d901      	bls.n	20a72 <net_is_ipv6_prefix+0x10>
		return false;
   20a6e:	2000      	movs	r0, #0
}
   20a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (memcmp(addr1, addr2, bytes)) {
   20a72:	08d5      	lsrs	r5, r2, #3
   20a74:	462a      	mov	r2, r5
   20a76:	f7e6 f8e0 	bl	6c3a <memcmp>
   20a7a:	2800      	cmp	r0, #0
   20a7c:	d1f7      	bne.n	20a6e <net_is_ipv6_prefix+0xc>
	u8_t bits = 128 - length;
   20a7e:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   20a82:	f014 0407 	ands.w	r4, r4, #7
   20a86:	d00f      	beq.n	20aa8 <net_is_ipv6_prefix+0x46>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   20a88:	5d73      	ldrb	r3, [r6, r5]
   20a8a:	5d7a      	ldrb	r2, [r7, r5]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   20a8c:	f1c4 0108 	rsb	r1, r4, #8
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   20a90:	405a      	eors	r2, r3
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   20a92:	23ff      	movs	r3, #255	; 0xff
   20a94:	408b      	lsls	r3, r1
   20a96:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   20a9a:	fa03 f404 	lsl.w	r4, r3, r4
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   20a9e:	4222      	tst	r2, r4
   20aa0:	bf0c      	ite	eq
   20aa2:	2001      	moveq	r0, #1
   20aa4:	2000      	movne	r0, #0
   20aa6:	e7e3      	b.n	20a70 <net_is_ipv6_prefix+0xe>
		return true;
   20aa8:	2001      	movs	r0, #1
   20aaa:	e7e1      	b.n	20a70 <net_is_ipv6_prefix+0xe>

00020aac <net_ipv6_addr_cmp>:
{
   20aac:	b508      	push	{r3, lr}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   20aae:	2210      	movs	r2, #16
   20ab0:	f7e6 f8c3 	bl	6c3a <memcmp>
}
   20ab4:	fab0 f080 	clz	r0, r0
   20ab8:	0940      	lsrs	r0, r0, #5
   20aba:	bd08      	pop	{r3, pc}

00020abc <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   20abc:	460a      	mov	r2, r1
   20abe:	4601      	mov	r1, r0
   20ac0:	4801      	ldr	r0, [pc, #4]	; (20ac8 <k_delayed_work_submit+0xc>)
   20ac2:	f00d be23 	b.w	2e70c <k_delayed_work_submit_to_queue>
   20ac6:	bf00      	nop
   20ac8:	200037b0 	.word	0x200037b0

00020acc <net_mgmt_event_notify>:
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   20acc:	2300      	movs	r3, #0
   20ace:	461a      	mov	r2, r3
   20ad0:	f006 bde6 	b.w	276a0 <net_mgmt_event_notify_with_info>

00020ad4 <address_lifetime_timeout>:
{
   20ad4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   20ad8:	f00d ff78 	bl	2e9cc <_impl_k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   20adc:	4b31      	ldr	r3, [pc, #196]	; (20ba4 <address_lifetime_timeout+0xd0>)
   20ade:	681c      	ldr	r4, [r3, #0]
   20ae0:	4682      	mov	sl, r0
   20ae2:	2c00      	cmp	r4, #0
   20ae4:	d053      	beq.n	20b8e <address_lifetime_timeout+0xba>
   20ae6:	f1b4 0514 	subs.w	r5, r4, #20
   20aea:	d052      	beq.n	20b92 <address_lifetime_timeout+0xbe>
	return node->next;
   20aec:	6824      	ldr	r4, [r4, #0]
   20aee:	b104      	cbz	r4, 20af2 <address_lifetime_timeout+0x1e>
   20af0:	3c14      	subs	r4, #20
		*next_wakeup = NET_TIMEOUT_MAX_VALUE;
   20af2:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 20ba8 <address_lifetime_timeout+0xd4>
	sys_slist_find_and_remove(&active_address_lifetime_timers,
   20af6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 20ba4 <address_lifetime_timeout+0xd0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   20afa:	f04f 0800 	mov.w	r8, #0
   20afe:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   20b02:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20b06:	b97d      	cbnz	r5, 20b28 <address_lifetime_timeout+0x54>
	if (found) {
   20b08:	f1b8 0f00 	cmp.w	r8, #0
   20b0c:	d048      	beq.n	20ba0 <address_lifetime_timeout+0xcc>
		k_delayed_work_submit(&address_lifetime_timer, timeout_update);
   20b0e:	4a26      	ldr	r2, [pc, #152]	; (20ba8 <address_lifetime_timeout+0xd4>)
   20b10:	4826      	ldr	r0, [pc, #152]	; (20bac <address_lifetime_timeout+0xd8>)
   20b12:	2300      	movs	r3, #0
   20b14:	42bb      	cmp	r3, r7
   20b16:	bf08      	it	eq
   20b18:	42b2      	cmpeq	r2, r6
   20b1a:	bf38      	it	cc
   20b1c:	4616      	movcc	r6, r2
   20b1e:	4631      	mov	r1, r6
}
   20b20:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		k_delayed_work_submit(&address_lifetime_timer, timeout_update);
   20b24:	f7ff bfca 	b.w	20abc <k_delayed_work_submit>
	if (counter > 0) {
   20b28:	6a29      	ldr	r1, [r5, #32]
   20b2a:	b9c1      	cbnz	r1, 20b5e <address_lifetime_timeout+0x8a>
	if ((s32_t)((start + (u32_t)timeout) - current_time) > 0) {
   20b2c:	69ab      	ldr	r3, [r5, #24]
   20b2e:	69ea      	ldr	r2, [r5, #28]
   20b30:	eba3 030a 	sub.w	r3, r3, sl
   20b34:	4413      	add	r3, r2
   20b36:	2b00      	cmp	r3, #0
   20b38:	dc2f      	bgt.n	20b9a <address_lifetime_timeout+0xc6>
	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   20b3a:	2302      	movs	r3, #2
	ifaddr->lifetime.timer_timeout = 0;
   20b3c:	61e9      	str	r1, [r5, #28]
	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   20b3e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	sys_slist_find_and_remove(&active_address_lifetime_timers,
   20b42:	f105 0114 	add.w	r1, r5, #20
   20b46:	4648      	mov	r0, r9
   20b48:	f7ff ff20 	bl	2098c <sys_slist_find_and_remove>
		if (current == next) {
   20b4c:	42a5      	cmp	r5, r4
   20b4e:	d0db      	beq.n	20b08 <address_lifetime_timeout+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   20b50:	b30c      	cbz	r4, 20b96 <address_lifetime_timeout+0xc2>
   20b52:	6963      	ldr	r3, [r4, #20]
   20b54:	b103      	cbz	r3, 20b58 <address_lifetime_timeout+0x84>
   20b56:	3b14      	subs	r3, #20
   20b58:	4625      	mov	r5, r4
   20b5a:	461c      	mov	r4, r3
   20b5c:	e7d3      	b.n	20b06 <address_lifetime_timeout+0x32>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
   20b5e:	45da      	cmp	sl, fp
   20b60:	d105      	bne.n	20b6e <address_lifetime_timeout+0x9a>
   20b62:	f00d ff33 	bl	2e9cc <_impl_k_uptime_get_32>
		ifaddr->lifetime.wrap_counter--;
   20b66:	6a2b      	ldr	r3, [r5, #32]
		ifaddr->lifetime.timer_start = k_uptime_get_32();
   20b68:	61a8      	str	r0, [r5, #24]
		ifaddr->lifetime.wrap_counter--;
   20b6a:	3b01      	subs	r3, #1
   20b6c:	622b      	str	r3, [r5, #32]
	if (ifaddr->lifetime.wrap_counter > 0) {
   20b6e:	6a2b      	ldr	r3, [r5, #32]
   20b70:	2b00      	cmp	r3, #0
   20b72:	dc0a      	bgt.n	20b8a <address_lifetime_timeout+0xb6>
		*next_wakeup = ifaddr->lifetime.timer_timeout;
   20b74:	69ea      	ldr	r2, [r5, #28]
			if (next_timeout < timeout_update) {
   20b76:	2300      	movs	r3, #0
   20b78:	42bb      	cmp	r3, r7
   20b7a:	bf08      	it	eq
   20b7c:	42b2      	cmpeq	r2, r6
   20b7e:	bf3e      	ittt	cc
   20b80:	4616      	movcc	r6, r2
   20b82:	461f      	movcc	r7, r3
				found = true;
   20b84:	f04f 0801 	movcc.w	r8, #1
   20b88:	e7e0      	b.n	20b4c <address_lifetime_timeout+0x78>
		*next_wakeup = NET_TIMEOUT_MAX_VALUE;
   20b8a:	465a      	mov	r2, fp
   20b8c:	e7f3      	b.n	20b76 <address_lifetime_timeout+0xa2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   20b8e:	4625      	mov	r5, r4
   20b90:	e7af      	b.n	20af2 <address_lifetime_timeout+0x1e>
   20b92:	462c      	mov	r4, r5
   20b94:	e7ad      	b.n	20af2 <address_lifetime_timeout+0x1e>
   20b96:	4623      	mov	r3, r4
   20b98:	e7de      	b.n	20b58 <address_lifetime_timeout+0x84>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
   20b9a:	45da      	cmp	sl, fp
   20b9c:	d1ea      	bne.n	20b74 <address_lifetime_timeout+0xa0>
   20b9e:	e7e0      	b.n	20b62 <address_lifetime_timeout+0x8e>
}
   20ba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ba4:	200023c0 	.word	0x200023c0
   20ba8:	7fffff9b 	.word	0x7fffff9b
   20bac:	200023d0 	.word	0x200023d0

00020bb0 <net_if_ipv6_start_dad>:
{
   20bb0:	b538      	push	{r3, r4, r5, lr}
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   20bb2:	2300      	movs	r3, #0
{
   20bb4:	460c      	mov	r4, r1
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   20bb6:	f881 3045 	strb.w	r3, [r1, #69]	; 0x45
 *
 * @return True if interface is up, False if it is down.
 */
static inline bool net_if_is_up(struct net_if *iface)
{
	NET_ASSERT(iface);
   20bba:	4605      	mov	r5, r0
   20bbc:	b9a0      	cbnz	r0, 20be8 <net_if_ipv6_start_dad+0x38>
   20bbe:	4b15      	ldr	r3, [pc, #84]	; (20c14 <net_if_ipv6_start_dad+0x64>)
   20bc0:	681b      	ldr	r3, [r3, #0]
   20bc2:	075b      	lsls	r3, r3, #29
   20bc4:	d010      	beq.n	20be8 <net_if_ipv6_start_dad+0x38>
   20bc6:	2301      	movs	r3, #1
   20bc8:	f04f 0200 	mov.w	r2, #0
   20bcc:	f363 0202 	bfi	r2, r3, #0, #3
   20bd0:	4911      	ldr	r1, [pc, #68]	; (20c18 <net_if_ipv6_start_dad+0x68>)
   20bd2:	4b12      	ldr	r3, [pc, #72]	; (20c1c <net_if_ipv6_start_dad+0x6c>)
   20bd4:	1a5b      	subs	r3, r3, r1
   20bd6:	f360 02c5 	bfi	r2, r0, #3, #3
   20bda:	08db      	lsrs	r3, r3, #3
   20bdc:	f363 128f 	bfi	r2, r3, #6, #10
   20be0:	490f      	ldr	r1, [pc, #60]	; (20c20 <net_if_ipv6_start_dad+0x70>)
   20be2:	4810      	ldr	r0, [pc, #64]	; (20c24 <net_if_ipv6_start_dad+0x74>)
   20be4:	f7e1 fa82 	bl	20ec <log_1>

	return atomic_test_bit(iface->if_dev->flags, NET_IF_UP);
   20be8:	6828      	ldr	r0, [r5, #0]
   20bea:	2100      	movs	r1, #0
   20bec:	300c      	adds	r0, #12
   20bee:	f7ff fef0 	bl	209d2 <atomic_test_bit>
	if (net_if_is_up(iface)) {
   20bf2:	b170      	cbz	r0, 20c12 <net_if_ipv6_start_dad+0x62>
		ifaddr->dad_count = 1;
   20bf4:	2301      	movs	r3, #1
   20bf6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   20bfa:	4621      	mov	r1, r4
   20bfc:	4628      	mov	r0, r5
   20bfe:	f005 ffef 	bl	26be0 <net_ipv6_start_dad>
   20c02:	b930      	cbnz	r0, 20c12 <net_if_ipv6_start_dad+0x62>
			k_delayed_work_submit(&ifaddr->dad_timer, DAD_TIMEOUT);
   20c04:	f104 0024 	add.w	r0, r4, #36	; 0x24
   20c08:	2164      	movs	r1, #100	; 0x64
}
   20c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			k_delayed_work_submit(&ifaddr->dad_timer, DAD_TIMEOUT);
   20c0e:	f7ff bf55 	b.w	20abc <k_delayed_work_submit>
}
   20c12:	bd38      	pop	{r3, r4, r5, pc}
   20c14:	2000e280 	.word	0x2000e280
   20c18:	0002ef38 	.word	0x0002ef38
   20c1c:	0002f040 	.word	0x0002f040
   20c20:	00034795 	.word	0x00034795
   20c24:	000346d4 	.word	0x000346d4

00020c28 <net_if_ipv6_get_best_match.isra.16>:
	}

	return false;
}

static inline struct in6_addr *net_if_ipv6_get_best_match(struct net_if *iface,
   20c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
	struct in6_addr *src = NULL;
	u8_t len;
	int i;

	if (!ipv6) {
   20c2c:	4606      	mov	r6, r0
   20c2e:	b390      	cbz	r0, 20c96 <net_if_ipv6_get_best_match.isra.16+0x6e>
   20c30:	1d05      	adds	r5, r0, #4
	struct in6_addr *src = NULL;
   20c32:	2000      	movs	r0, #0
		return NULL;
	}

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20c34:	4607      	mov	r7, r0
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   20c36:	f04f 0a48 	mov.w	sl, #72	; 0x48
	    addr->address.family == AF_INET6 &&
   20c3a:	f248 0bfe 	movw	fp, #33022	; 0x80fe
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   20c3e:	fb0a 6307 	mla	r3, sl, r7, r6
   20c42:	4c1d      	ldr	r4, [pc, #116]	; (20cb8 <net_if_ipv6_get_best_match.isra.16+0x90>)
   20c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20c46:	f023 437d 	bic.w	r3, r3, #4244635648	; 0xfd000000
   20c4a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
   20c4e:	42a3      	cmp	r3, r4
   20c50:	d11c      	bne.n	20c8c <net_if_ipv6_get_best_match.isra.16+0x64>
   20c52:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   20c56:	2b0a      	cmp	r3, #10
   20c58:	d118      	bne.n	20c8c <net_if_ipv6_get_best_match.isra.16+0x64>
	    addr->address.family == AF_INET6 &&
   20c5a:	882b      	ldrh	r3, [r5, #0]
   20c5c:	455b      	cmp	r3, fp
   20c5e:	d015      	beq.n	20c8c <net_if_ipv6_get_best_match.isra.16+0x64>
   20c60:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
   20c64:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
	u8_t len = 0;
   20c68:	2300      	movs	r3, #0
		if (src[j] == dst[j]) {
   20c6a:	f819 ef01 	ldrb.w	lr, [r9, #1]!
   20c6e:	f818 4f01 	ldrb.w	r4, [r8, #1]!
   20c72:	45a6      	cmp	lr, r4
   20c74:	f103 0c08 	add.w	ip, r3, #8
   20c78:	d10f      	bne.n	20c9a <net_if_ipv6_get_best_match.isra.16+0x72>
			len += 8;
   20c7a:	fa5f f38c 	uxtb.w	r3, ip
	for (j = 0; j < addr_len; j++) {
   20c7e:	2b80      	cmp	r3, #128	; 0x80
   20c80:	d1f3      	bne.n	20c6a <net_if_ipv6_get_best_match.isra.16+0x42>
		if (!is_proper_ipv6_address(&ipv6->unicast[i])) {
			continue;
		}

		len = get_diff_ipv6(dst, &ipv6->unicast[i].address.in6_addr);
		if (len >= *best_so_far) {
   20c82:	7814      	ldrb	r4, [r2, #0]
   20c84:	429c      	cmp	r4, r3
			*best_so_far = len;
   20c86:	bf9c      	itt	ls
   20c88:	7013      	strbls	r3, [r2, #0]
   20c8a:	4628      	movls	r0, r5
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20c8c:	3701      	adds	r7, #1
   20c8e:	2f03      	cmp	r7, #3
   20c90:	f105 0548 	add.w	r5, r5, #72	; 0x48
   20c94:	d1d3      	bne.n	20c3e <net_if_ipv6_get_best_match.isra.16+0x16>
			src = &ipv6->unicast[i].address.in6_addr;
		}
	}

	return src;
}
   20c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xor = src[j] ^ dst[j];
   20c9a:	ea8e 0404 	eor.w	r4, lr, r4
   20c9e:	fa5f fc8c 	uxtb.w	ip, ip
				if (!(xor & 0x80)) {
   20ca2:	f014 0f80 	tst.w	r4, #128	; 0x80
   20ca6:	d1ec      	bne.n	20c82 <net_if_ipv6_get_best_match.isra.16+0x5a>
					len++;
   20ca8:	3301      	adds	r3, #1
   20caa:	b2db      	uxtb	r3, r3
					xor <<= 1;
   20cac:	0064      	lsls	r4, r4, #1
			for (k = 0; k < 8; k++) {
   20cae:	4563      	cmp	r3, ip
					xor <<= 1;
   20cb0:	b2e4      	uxtb	r4, r4
			for (k = 0; k < 8; k++) {
   20cb2:	d1f6      	bne.n	20ca2 <net_if_ipv6_get_best_match.isra.16+0x7a>
   20cb4:	e7e5      	b.n	20c82 <net_if_ipv6_get_best_match.isra.16+0x5a>
   20cb6:	bf00      	nop
   20cb8:	02000100 	.word	0x02000100

00020cbc <net_if_queue_tx>:
{
   20cbc:	b510      	push	{r4, lr}
	u8_t tc = net_tx_priority2tc(prio);
   20cbe:	2000      	movs	r0, #0
{
   20cc0:	460c      	mov	r4, r1
	u8_t tc = net_tx_priority2tc(prio);
   20cc2:	f002 f8b9 	bl	22e38 <net_tx_priority2tc>
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   20cc6:	4a05      	ldr	r2, [pc, #20]	; (20cdc <net_if_queue_tx+0x20>)
   20cc8:	2300      	movs	r3, #0
   20cca:	6063      	str	r3, [r4, #4]
   20ccc:	e9c4 2302 	strd	r2, r3, [r4, #8]
	net_tc_submit_to_tx_queue(tc, pkt);
   20cd0:	4621      	mov	r1, r4
   20cd2:	b2c0      	uxtb	r0, r0
}
   20cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_tc_submit_to_tx_queue(tc, pkt);
   20cd8:	f002 b89a 	b.w	22e10 <net_tc_submit_to_tx_queue>
   20cdc:	00021d4d 	.word	0x00021d4d

00020ce0 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   20ce0:	4b06      	ldr	r3, [pc, #24]	; (20cfc <net_if_lookup_by_dev+0x1c>)
   20ce2:	4a07      	ldr	r2, [pc, #28]	; (20d00 <net_if_lookup_by_dev+0x20>)
   20ce4:	4293      	cmp	r3, r2
   20ce6:	d102      	bne.n	20cee <net_if_lookup_by_dev+0xe>
	return NULL;
   20ce8:	2300      	movs	r3, #0
}
   20cea:	4618      	mov	r0, r3
   20cec:	4770      	bx	lr
	return iface->if_dev->dev;
   20cee:	6819      	ldr	r1, [r3, #0]
		if (net_if_get_device(iface) == dev) {
   20cf0:	6809      	ldr	r1, [r1, #0]
   20cf2:	4288      	cmp	r0, r1
   20cf4:	d0f9      	beq.n	20cea <net_if_lookup_by_dev+0xa>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   20cf6:	3320      	adds	r3, #32
   20cf8:	e7f4      	b.n	20ce4 <net_if_lookup_by_dev+0x4>
   20cfa:	bf00      	nop
   20cfc:	2000e560 	.word	0x2000e560
   20d00:	2000e580 	.word	0x2000e580

00020d04 <net_if_get_default>:
}
   20d04:	4b02      	ldr	r3, [pc, #8]	; (20d10 <net_if_get_default+0xc>)
	if (__net_if_start == __net_if_end) {
   20d06:	4803      	ldr	r0, [pc, #12]	; (20d14 <net_if_get_default+0x10>)
}
   20d08:	4298      	cmp	r0, r3
   20d0a:	bf08      	it	eq
   20d0c:	2000      	moveq	r0, #0
   20d0e:	4770      	bx	lr
   20d10:	2000e580 	.word	0x2000e580
   20d14:	2000e560 	.word	0x2000e560

00020d18 <net_if_config_ipv6_get>:
	if (iface->config.ip.ipv6) {
   20d18:	6843      	ldr	r3, [r0, #4]
   20d1a:	b15b      	cbz	r3, 20d34 <net_if_config_ipv6_get+0x1c>
		if (ipv6) {
   20d1c:	b909      	cbnz	r1, 20d22 <net_if_config_ipv6_get+0xa>
		return 0;
   20d1e:	2000      	movs	r0, #0
   20d20:	4770      	bx	lr
			*ipv6 = iface->config.ip.ipv6;
   20d22:	600b      	str	r3, [r1, #0]
   20d24:	e7fb      	b.n	20d1e <net_if_config_ipv6_get+0x6>
		iface->config.ip.ipv6 = &ipv6_addresses[i].ipv6;
   20d26:	6042      	str	r2, [r0, #4]
		ipv6_addresses[i].iface = iface;
   20d28:	f8c2 01d0 	str.w	r0, [r2, #464]	; 0x1d0
		if (ipv6) {
   20d2c:	2900      	cmp	r1, #0
   20d2e:	d0f6      	beq.n	20d1e <net_if_config_ipv6_get+0x6>
			*ipv6 = &ipv6_addresses[i].ipv6;
   20d30:	600a      	str	r2, [r1, #0]
   20d32:	e7f4      	b.n	20d1e <net_if_config_ipv6_get+0x6>
		if (ipv6_addresses[i].iface) {
   20d34:	4a03      	ldr	r2, [pc, #12]	; (20d44 <net_if_config_ipv6_get+0x2c>)
   20d36:	f8d2 31d0 	ldr.w	r3, [r2, #464]	; 0x1d0
   20d3a:	2b00      	cmp	r3, #0
   20d3c:	d0f3      	beq.n	20d26 <net_if_config_ipv6_get+0xe>
	return -ESRCH;
   20d3e:	f06f 0002 	mvn.w	r0, #2
}
   20d42:	4770      	bx	lr
   20d44:	200023f0 	.word	0x200023f0

00020d48 <net_if_start_rs>:
{
   20d48:	b510      	push	{r4, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   20d4a:	6844      	ldr	r4, [r0, #4]
	if (!ipv6) {
   20d4c:	b154      	cbz	r4, 20d64 <net_if_start_rs+0x1c>
	if (!net_ipv6_start_rs(iface)) {
   20d4e:	f006 f984 	bl	2705a <net_ipv6_start_rs>
   20d52:	b938      	cbnz	r0, 20d64 <net_if_start_rs+0x1c>
		k_delayed_work_submit(&ipv6->rs_timer, RS_TIMEOUT);
   20d54:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
   20d58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
}
   20d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit(&ipv6->rs_timer, RS_TIMEOUT);
   20d60:	f7ff beac 	b.w	20abc <k_delayed_work_submit>
}
   20d64:	bd10      	pop	{r4, pc}
	...

00020d68 <rs_timeout>:
{
   20d68:	b410      	push	{r4}
	struct net_if_ipv6 *ipv6 = CONTAINER_OF(work,
   20d6a:	f5a0 72d0 	sub.w	r2, r0, #416	; 0x1a0
	ipv6->rs_count++;
   20d6e:	f892 31ce 	ldrb.w	r3, [r2, #462]	; 0x1ce
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   20d72:	480a      	ldr	r0, [pc, #40]	; (20d9c <rs_timeout+0x34>)
   20d74:	490a      	ldr	r1, [pc, #40]	; (20da0 <rs_timeout+0x38>)
	ipv6->rs_count++;
   20d76:	3301      	adds	r3, #1
   20d78:	b2db      	uxtb	r3, r3
   20d7a:	f882 31ce 	strb.w	r3, [r2, #462]	; 0x1ce
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   20d7e:	4288      	cmp	r0, r1
   20d80:	d101      	bne.n	20d86 <rs_timeout+0x1e>
}
   20d82:	bc10      	pop	{r4}
   20d84:	4770      	bx	lr
		if (iface->config.ip.ipv6 == ipv6) {
   20d86:	6844      	ldr	r4, [r0, #4]
   20d88:	4294      	cmp	r4, r2
   20d8a:	d001      	beq.n	20d90 <rs_timeout+0x28>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   20d8c:	3020      	adds	r0, #32
   20d8e:	e7f6      	b.n	20d7e <rs_timeout+0x16>
	if (ipv6->rs_count < RS_COUNT) {
   20d90:	2b02      	cmp	r3, #2
   20d92:	d8f6      	bhi.n	20d82 <rs_timeout+0x1a>
}
   20d94:	bc10      	pop	{r4}
		net_if_start_rs(iface);
   20d96:	f7ff bfd7 	b.w	20d48 <net_if_start_rs>
   20d9a:	bf00      	nop
   20d9c:	2000e560 	.word	0x2000e560
   20da0:	2000e580 	.word	0x2000e580

00020da4 <net_if_ipv6_addr_lookup>:
{
   20da4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   20da8:	4b17      	ldr	r3, [pc, #92]	; (20e08 <net_if_ipv6_addr_lookup+0x64>)
   20daa:	4d18      	ldr	r5, [pc, #96]	; (20e0c <net_if_ipv6_addr_lookup+0x68>)
{
   20dac:	4682      	mov	sl, r0
   20dae:	4688      	mov	r8, r1
			if (!ipv6->unicast[i].is_used ||
   20db0:	f04f 0b48 	mov.w	fp, #72	; 0x48
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   20db4:	429d      	cmp	r5, r3
   20db6:	d101      	bne.n	20dbc <net_if_ipv6_addr_lookup+0x18>
	return NULL;
   20db8:	2000      	movs	r0, #0
   20dba:	e01c      	b.n	20df6 <net_if_ipv6_addr_lookup+0x52>
		struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   20dbc:	686f      	ldr	r7, [r5, #4]
		if (!ipv6) {
   20dbe:	b307      	cbz	r7, 20e02 <net_if_ipv6_addr_lookup+0x5e>
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20dc0:	2600      	movs	r6, #0
			if (net_is_ipv6_prefix(
   20dc2:	f107 0904 	add.w	r9, r7, #4
			if (!ipv6->unicast[i].is_used ||
   20dc6:	fb0b f106 	mul.w	r1, fp, r6
   20dca:	187c      	adds	r4, r7, r1
   20dcc:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
   20dd0:	0792      	lsls	r2, r2, #30
   20dd2:	d513      	bpl.n	20dfc <net_if_ipv6_addr_lookup+0x58>
   20dd4:	5a7a      	ldrh	r2, [r7, r1]
   20dd6:	2a0a      	cmp	r2, #10
   20dd8:	d110      	bne.n	20dfc <net_if_ipv6_addr_lookup+0x58>
			if (net_is_ipv6_prefix(
   20dda:	2280      	movs	r2, #128	; 0x80
   20ddc:	4449      	add	r1, r9
   20dde:	4650      	mov	r0, sl
   20de0:	9301      	str	r3, [sp, #4]
   20de2:	f7ff fe3e 	bl	20a62 <net_is_ipv6_prefix>
   20de6:	9b01      	ldr	r3, [sp, #4]
   20de8:	b140      	cbz	r0, 20dfc <net_if_ipv6_addr_lookup+0x58>
				if (ret) {
   20dea:	f1b8 0f00 	cmp.w	r8, #0
   20dee:	d001      	beq.n	20df4 <net_if_ipv6_addr_lookup+0x50>
					*ret = iface;
   20df0:	f8c8 5000 	str.w	r5, [r8]
				return &ipv6->unicast[i];
   20df4:	4620      	mov	r0, r4
}
   20df6:	b003      	add	sp, #12
   20df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20dfc:	3601      	adds	r6, #1
   20dfe:	2e03      	cmp	r6, #3
   20e00:	d1e1      	bne.n	20dc6 <net_if_ipv6_addr_lookup+0x22>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   20e02:	3520      	adds	r5, #32
   20e04:	e7d6      	b.n	20db4 <net_if_ipv6_addr_lookup+0x10>
   20e06:	bf00      	nop
   20e08:	2000e580 	.word	0x2000e580
   20e0c:	2000e560 	.word	0x2000e560

00020e10 <dad_timeout>:
{
   20e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct net_if *iface = NULL;
   20e12:	a902      	add	r1, sp, #8
   20e14:	2300      	movs	r3, #0
   20e16:	f841 3d04 	str.w	r3, [r1, #-4]!
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   20e1a:	f1a0 0420 	sub.w	r4, r0, #32
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   20e1e:	2301      	movs	r3, #1
   20e20:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   20e24:	f1a0 0524 	sub.w	r5, r0, #36	; 0x24
   20e28:	4620      	mov	r0, r4
   20e2a:	f7ff ffbb 	bl	20da4 <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   20e2e:	4285      	cmp	r5, r0
   20e30:	d107      	bne.n	20e42 <dad_timeout+0x32>
		net_mgmt_event_notify(NET_EVENT_IPV6_DAD_SUCCEED, iface);
   20e32:	9901      	ldr	r1, [sp, #4]
   20e34:	4804      	ldr	r0, [pc, #16]	; (20e48 <dad_timeout+0x38>)
   20e36:	f7ff fe49 	bl	20acc <net_mgmt_event_notify>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   20e3a:	4621      	mov	r1, r4
   20e3c:	9801      	ldr	r0, [sp, #4]
   20e3e:	f004 fd55 	bl	258ec <net_ipv6_nbr_rm>
}
   20e42:	b003      	add	sp, #12
   20e44:	bd30      	pop	{r4, r5, pc}
   20e46:	bf00      	nop
   20e48:	f060000d 	.word	0xf060000d

00020e4c <net_if_ipv6_addr_lookup_by_iface>:
{
   20e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   20e50:	6846      	ldr	r6, [r0, #4]
{
   20e52:	460f      	mov	r7, r1
	if (!ipv6) {
   20e54:	b1d6      	cbz	r6, 20e8c <net_if_ipv6_addr_lookup_by_iface+0x40>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20e56:	2500      	movs	r5, #0
		if (!ipv6->unicast[i].is_used ||
   20e58:	f04f 0848 	mov.w	r8, #72	; 0x48
		if (net_is_ipv6_prefix(
   20e5c:	f106 0904 	add.w	r9, r6, #4
		if (!ipv6->unicast[i].is_used ||
   20e60:	fb08 f105 	mul.w	r1, r8, r5
   20e64:	1874      	adds	r4, r6, r1
   20e66:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   20e6a:	079b      	lsls	r3, r3, #30
   20e6c:	d50b      	bpl.n	20e86 <net_if_ipv6_addr_lookup_by_iface+0x3a>
   20e6e:	5a73      	ldrh	r3, [r6, r1]
   20e70:	2b0a      	cmp	r3, #10
   20e72:	d108      	bne.n	20e86 <net_if_ipv6_addr_lookup_by_iface+0x3a>
		if (net_is_ipv6_prefix(
   20e74:	2280      	movs	r2, #128	; 0x80
   20e76:	4449      	add	r1, r9
   20e78:	4638      	mov	r0, r7
   20e7a:	f7ff fdf2 	bl	20a62 <net_is_ipv6_prefix>
   20e7e:	b110      	cbz	r0, 20e86 <net_if_ipv6_addr_lookup_by_iface+0x3a>
			return &ipv6->unicast[i];
   20e80:	4620      	mov	r0, r4
}
   20e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20e86:	3501      	adds	r5, #1
   20e88:	2d03      	cmp	r5, #3
   20e8a:	d1e9      	bne.n	20e60 <net_if_ipv6_addr_lookup_by_iface+0x14>
		return NULL;
   20e8c:	2000      	movs	r0, #0
   20e8e:	e7f8      	b.n	20e82 <net_if_ipv6_addr_lookup_by_iface+0x36>

00020e90 <net_if_ipv6_addr_update_lifetime>:
{
   20e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20e92:	4604      	mov	r4, r0
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   20e94:	2301      	movs	r3, #1
   20e96:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
	parent->next = child;
   20e9a:	2300      	movs	r3, #0
   20e9c:	6163      	str	r3, [r4, #20]
Z_GENLIST_APPEND(slist, snode)
   20e9e:	4b1f      	ldr	r3, [pc, #124]	; (20f1c <net_if_ipv6_addr_update_lifetime+0x8c>)
	u64_t expire_timeout = K_SECONDS((u64_t)vlifetime);
   20ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   20ea4:	fba1 6700 	umull	r6, r7, r1, r0
   20ea8:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&active_address_lifetime_timers,
   20eaa:	f104 0214 	add.w	r2, r4, #20
   20eae:	bb71      	cbnz	r1, 20f0e <net_if_ipv6_addr_update_lifetime+0x7e>
	list->head = node;
   20eb0:	e9c3 2200 	strd	r2, r2, [r3]
   20eb4:	f00d fd8a 	bl	2e9cc <_impl_k_uptime_get_32>
	ifaddr->lifetime.wrap_counter = expire_timeout /
   20eb8:	4a19      	ldr	r2, [pc, #100]	; (20f20 <net_if_ipv6_addr_update_lifetime+0x90>)
	ifaddr->lifetime.timer_start = k_uptime_get_32();
   20eba:	61a0      	str	r0, [r4, #24]
	ifaddr->lifetime.wrap_counter = expire_timeout /
   20ebc:	2300      	movs	r3, #0
   20ebe:	4630      	mov	r0, r6
   20ec0:	4639      	mov	r1, r7
   20ec2:	f7df f9f7 	bl	2b4 <__aeabi_uldivmod>
	ifaddr->lifetime.timer_timeout = expire_timeout -
   20ec6:	4b16      	ldr	r3, [pc, #88]	; (20f20 <net_if_ipv6_addr_update_lifetime+0x90>)
	ifaddr->lifetime.wrap_counter = expire_timeout /
   20ec8:	6220      	str	r0, [r4, #32]
	ifaddr->lifetime.timer_timeout = expire_timeout -
   20eca:	fb03 6010 	mls	r0, r3, r0, r6
   20ece:	61e0      	str	r0, [r4, #28]
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
   20ed0:	4814      	ldr	r0, [pc, #80]	; (20f24 <net_if_ipv6_addr_update_lifetime+0x94>)
   20ed2:	f00d fc8b 	bl	2e7ec <z_timeout_remaining>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * MSEC_PER_SEC / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
   20ed6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   20eda:	2264      	movs	r2, #100	; 0x64
   20edc:	2300      	movs	r3, #0
   20ede:	fb80 0101 	smull	r0, r1, r0, r1
   20ee2:	f7df f9e7 	bl	2b4 <__aeabi_uldivmod>
	if (!remaining || (ifaddr->lifetime.wrap_counter == 0 &&
   20ee6:	4605      	mov	r5, r0
   20ee8:	b120      	cbz	r0, 20ef4 <net_if_ipv6_addr_update_lifetime+0x64>
   20eea:	6a23      	ldr	r3, [r4, #32]
   20eec:	b9a3      	cbnz	r3, 20f18 <net_if_ipv6_addr_update_lifetime+0x88>
   20eee:	69e3      	ldr	r3, [r4, #28]
   20ef0:	4283      	cmp	r3, r0
   20ef2:	da11      	bge.n	20f18 <net_if_ipv6_addr_update_lifetime+0x88>
		k_delayed_work_cancel(&address_lifetime_timer);
   20ef4:	480c      	ldr	r0, [pc, #48]	; (20f28 <net_if_ipv6_addr_update_lifetime+0x98>)
   20ef6:	f00d fbba 	bl	2e66e <k_delayed_work_cancel>
		if (ifaddr->lifetime.wrap_counter > 0 && remaining == 0) {
   20efa:	6a23      	ldr	r3, [r4, #32]
   20efc:	2b00      	cmp	r3, #0
   20efe:	dd09      	ble.n	20f14 <net_if_ipv6_addr_update_lifetime+0x84>
   20f00:	b945      	cbnz	r5, 20f14 <net_if_ipv6_addr_update_lifetime+0x84>
			k_delayed_work_submit(&address_lifetime_timer,
   20f02:	4907      	ldr	r1, [pc, #28]	; (20f20 <net_if_ipv6_addr_update_lifetime+0x90>)
			k_delayed_work_submit(&address_lifetime_timer,
   20f04:	4808      	ldr	r0, [pc, #32]	; (20f28 <net_if_ipv6_addr_update_lifetime+0x98>)
}
   20f06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_delayed_work_submit(&address_lifetime_timer,
   20f0a:	f7ff bdd7 	b.w	20abc <k_delayed_work_submit>
	parent->next = child;
   20f0e:	600a      	str	r2, [r1, #0]
	list->tail = node;
   20f10:	605a      	str	r2, [r3, #4]
   20f12:	e7cf      	b.n	20eb4 <net_if_ipv6_addr_update_lifetime+0x24>
   20f14:	69e1      	ldr	r1, [r4, #28]
   20f16:	e7f5      	b.n	20f04 <net_if_ipv6_addr_update_lifetime+0x74>
}
   20f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20f1a:	bf00      	nop
   20f1c:	200023c0 	.word	0x200023c0
   20f20:	7fffff9b 	.word	0x7fffff9b
   20f24:	200023dc 	.word	0x200023dc
   20f28:	200023d0 	.word	0x200023d0

00020f2c <net_if_ipv6_addr_add>:
{
   20f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f30:	b08f      	sub	sp, #60	; 0x3c
   20f32:	4688      	mov	r8, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   20f34:	a905      	add	r1, sp, #20
{
   20f36:	4607      	mov	r7, r0
   20f38:	4693      	mov	fp, r2
   20f3a:	461c      	mov	r4, r3
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   20f3c:	f7ff feec 	bl	20d18 <net_if_config_ipv6_get>
   20f40:	2800      	cmp	r0, #0
   20f42:	da03      	bge.n	20f4c <net_if_ipv6_addr_add+0x20>
		return NULL;
   20f44:	2000      	movs	r0, #0
}
   20f46:	b00f      	add	sp, #60	; 0x3c
   20f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ifaddr = ipv6_addr_find(iface, addr);
   20f4c:	f8d7 9004 	ldr.w	r9, [r7, #4]
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20f50:	2500      	movs	r5, #0
		if (!ipv6->unicast[i].is_used) {
   20f52:	f04f 0a48 	mov.w	sl, #72	; 0x48
		if (net_ipv6_addr_cmp(
   20f56:	f109 0304 	add.w	r3, r9, #4
		if (!ipv6->unicast[i].is_used) {
   20f5a:	fb0a f105 	mul.w	r1, sl, r5
   20f5e:	eb09 0601 	add.w	r6, r9, r1
   20f62:	f896 2047 	ldrb.w	r2, [r6, #71]	; 0x47
   20f66:	0792      	lsls	r2, r2, #30
   20f68:	d508      	bpl.n	20f7c <net_if_ipv6_addr_add+0x50>
		if (net_ipv6_addr_cmp(
   20f6a:	4419      	add	r1, r3
   20f6c:	4640      	mov	r0, r8
   20f6e:	9303      	str	r3, [sp, #12]
   20f70:	f7ff fd9c 	bl	20aac <net_ipv6_addr_cmp>
   20f74:	9b03      	ldr	r3, [sp, #12]
   20f76:	b108      	cbz	r0, 20f7c <net_if_ipv6_addr_add+0x50>
			return &ipv6->unicast[i];
   20f78:	4630      	mov	r0, r6
   20f7a:	e7e4      	b.n	20f46 <net_if_ipv6_addr_add+0x1a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20f7c:	3501      	adds	r5, #1
   20f7e:	2d03      	cmp	r5, #3
   20f80:	d1eb      	bne.n	20f5a <net_if_ipv6_addr_add+0x2e>
		if (ipv6->unicast[i].is_used) {
   20f82:	f8dd a014 	ldr.w	sl, [sp, #20]
   20f86:	f89a 5047 	ldrb.w	r5, [sl, #71]	; 0x47
   20f8a:	f3c5 0540 	ubfx	r5, r5, #1, #1
   20f8e:	b14d      	cbz	r5, 20fa4 <net_if_ipv6_addr_add+0x78>
   20f90:	f89a 308f 	ldrb.w	r3, [sl, #143]	; 0x8f
   20f94:	079d      	lsls	r5, r3, #30
   20f96:	f140 80eb 	bpl.w	21170 <net_if_ipv6_addr_add+0x244>
   20f9a:	f89a 30d7 	ldrb.w	r3, [sl, #215]	; 0xd7
   20f9e:	0798      	lsls	r0, r3, #30
   20fa0:	d4d0      	bmi.n	20f44 <net_if_ipv6_addr_add+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20fa2:	2502      	movs	r5, #2
   20fa4:	2648      	movs	r6, #72	; 0x48
   20fa6:	436e      	muls	r6, r5
		net_if_addr_init(&ipv6->unicast[i], addr, addr_type,
   20fa8:	eb0a 0906 	add.w	r9, sl, r6
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   20fac:	f10d 0c18 	add.w	ip, sp, #24
	ifaddr->is_used = true;
   20fb0:	f899 3047 	ldrb.w	r3, [r9, #71]	; 0x47
   20fb4:	f043 0302 	orr.w	r3, r3, #2
   20fb8:	f889 3047 	strb.w	r3, [r9, #71]	; 0x47
	ifaddr->address.family = AF_INET6;
   20fbc:	230a      	movs	r3, #10
   20fbe:	f82a 3006 	strh.w	r3, [sl, r6]
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   20fc2:	4642      	mov	r2, r8
	ifaddr->addr_type = addr_type;
   20fc4:	f889 b044 	strb.w	fp, [r9, #68]	; 0x44
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   20fc8:	f108 0810 	add.w	r8, r8, #16
   20fcc:	4663      	mov	r3, ip
   20fce:	6810      	ldr	r0, [r2, #0]
   20fd0:	6851      	ldr	r1, [r2, #4]
   20fd2:	46e6      	mov	lr, ip
   20fd4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   20fd8:	3208      	adds	r2, #8
   20fda:	4542      	cmp	r2, r8
   20fdc:	46f4      	mov	ip, lr
   20fde:	d1f6      	bne.n	20fce <net_if_ipv6_addr_add+0xa2>
   20fe0:	461a      	mov	r2, r3
   20fe2:	f109 0c04 	add.w	ip, r9, #4
   20fe6:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   20fea:	4613      	mov	r3, r2
   20fec:	cb03      	ldmia	r3!, {r0, r1}
   20fee:	4543      	cmp	r3, r8
   20ff0:	f8cc 0000 	str.w	r0, [ip]
   20ff4:	f8cc 1004 	str.w	r1, [ip, #4]
   20ff8:	461a      	mov	r2, r3
   20ffa:	f10c 0c08 	add.w	ip, ip, #8
   20ffe:	d1f4      	bne.n	20fea <net_if_ipv6_addr_add+0xbe>
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   21000:	f106 0024 	add.w	r0, r6, #36	; 0x24
   21004:	495e      	ldr	r1, [pc, #376]	; (21180 <net_if_ipv6_addr_add+0x254>)
   21006:	4450      	add	r0, sl
   21008:	f00d fb28 	bl	2e65c <k_delayed_work_init>
   2100c:	2348      	movs	r3, #72	; 0x48
		ifaddr->is_infinite = false;
   2100e:	fb03 a305 	mla	r3, r3, r5, sl
   21012:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (vlifetime) {
   21016:	2c00      	cmp	r4, #0
   21018:	f000 80ac 	beq.w	21174 <net_if_ipv6_addr_add+0x248>
		ifaddr->is_infinite = false;
   2101c:	f36f 0200 	bfc	r2, #0, #1
   21020:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   21024:	4621      	mov	r1, r4
   21026:	4648      	mov	r0, r9
   21028:	f7ff ff32 	bl	20e90 <net_if_ipv6_addr_update_lifetime>
	return iface->if_dev->l2;
   2102c:	683b      	ldr	r3, [r7, #0]
		join_mcast_nodes(iface, &ipv6->unicast[i].address.in6_addr);
   2102e:	f8dd a014 	ldr.w	sl, [sp, #20]
	if (net_if_l2(iface)->get_flags) {
   21032:	685b      	ldr	r3, [r3, #4]
   21034:	691c      	ldr	r4, [r3, #16]
   21036:	b114      	cbz	r4, 2103e <net_if_ipv6_addr_add+0x112>
		flags = net_if_l2(iface)->get_flags(iface);
   21038:	4638      	mov	r0, r7
   2103a:	47a0      	blx	r4
   2103c:	4604      	mov	r4, r0
	if (flags & NET_L2_MULTICAST) {
   2103e:	07e1      	lsls	r1, r4, #31
   21040:	f140 808a 	bpl.w	21158 <net_if_ipv6_addr_add+0x22c>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   21044:	f240 23ff 	movw	r3, #767	; 0x2ff
   21048:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   2104c:	f04f 0900 	mov.w	r9, #0
   21050:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   21054:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   21058:	f8ad 902e 	strh.w	r9, [sp, #46]	; 0x2e
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   2105c:	f8ad 9030 	strh.w	r9, [sp, #48]	; 0x30
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   21060:	f8ad 9032 	strh.w	r9, [sp, #50]	; 0x32
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   21064:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   21068:	f44f 7380 	mov.w	r3, #256	; 0x100
   2106c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	ret = net_ipv6_mld_join(iface, &addr);
   21070:	4641      	mov	r1, r8
   21072:	4638      	mov	r0, r7
   21074:	f006 fa2a 	bl	274cc <net_ipv6_mld_join>
	if (ret < 0 && ret != -EALREADY) {
   21078:	1e03      	subs	r3, r0, #0
   2107a:	da22      	bge.n	210c2 <net_if_ipv6_addr_add+0x196>
   2107c:	f113 0f45 	cmn.w	r3, #69	; 0x45
   21080:	d01f      	beq.n	210c2 <net_if_ipv6_addr_add+0x196>
		NET_ERR("Cannot join all nodes address %s (%d)",
   21082:	4a40      	ldr	r2, [pc, #256]	; (21184 <net_if_ipv6_addr_add+0x258>)
   21084:	6812      	ldr	r2, [r2, #0]
   21086:	0752      	lsls	r2, r2, #29
   21088:	d01b      	beq.n	210c2 <net_if_ipv6_addr_add+0x196>
   2108a:	2201      	movs	r2, #1
   2108c:	f04f 0b00 	mov.w	fp, #0
   21090:	f362 0b02 	bfi	fp, r2, #0, #3
   21094:	493c      	ldr	r1, [pc, #240]	; (21188 <net_if_ipv6_addr_add+0x25c>)
   21096:	4a3d      	ldr	r2, [pc, #244]	; (2118c <net_if_ipv6_addr_add+0x260>)
   21098:	9303      	str	r3, [sp, #12]
   2109a:	1a52      	subs	r2, r2, r1
   2109c:	08d2      	lsrs	r2, r2, #3
   2109e:	4641      	mov	r1, r8
   210a0:	f369 0bc5 	bfi	fp, r9, #3, #3
   210a4:	200a      	movs	r0, #10
   210a6:	f362 1b8f 	bfi	fp, r2, #6, #10
   210aa:	f002 f84d 	bl	23148 <net_sprint_addr>
   210ae:	f7e1 f9af 	bl	2410 <log_strdup>
   210b2:	f8ad b000 	strh.w	fp, [sp]
   210b6:	4602      	mov	r2, r0
   210b8:	9b03      	ldr	r3, [sp, #12]
   210ba:	4935      	ldr	r1, [pc, #212]	; (21190 <net_if_ipv6_addr_add+0x264>)
   210bc:	4835      	ldr	r0, [pc, #212]	; (21194 <net_if_ipv6_addr_add+0x268>)
   210be:	f7e1 f841 	bl	2144 <log_3>
		if (!(flags & NET_L2_MULTICAST_SKIP_JOIN_SOLICIT_NODE)) {
   210c2:	f014 0402 	ands.w	r4, r4, #2
   210c6:	d147      	bne.n	21158 <net_if_ipv6_addr_add+0x22c>
	dst->s6_addr[0]   = 0xFF;
   210c8:	f240 23ff 	movw	r3, #767	; 0x2ff
   210cc:	930a      	str	r3, [sp, #40]	; 0x28
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   210ce:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   210d2:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   210d6:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
	dst->s6_addr[10]  = 0;
   210da:	f44f 7380 	mov.w	r3, #256	; 0x100
   210de:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
	dst->s6_addr[11]  = 0x01;
   210e2:	23ff      	movs	r3, #255	; 0xff
   210e4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	dst->s6_addr[13]  = src->s6_addr[13];
   210e8:	2348      	movs	r3, #72	; 0x48
   210ea:	fb03 a505 	mla	r5, r3, r5, sl
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   210ee:	44b2      	add	sl, r6
	dst->s6_addr[13]  = src->s6_addr[13];
   210f0:	7c6b      	ldrb	r3, [r5, #17]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   210f2:	f89a 2013 	ldrb.w	r2, [sl, #19]
	dst->s6_addr[13]  = src->s6_addr[13];
   210f6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   210fa:	f89a 3012 	ldrb.w	r3, [sl, #18]
   210fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   21102:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	ret = net_ipv6_mld_join(iface, &addr);
   21106:	4641      	mov	r1, r8
   21108:	4638      	mov	r0, r7
   2110a:	f006 f9df 	bl	274cc <net_ipv6_mld_join>
	if (ret < 0 && ret != -EALREADY) {
   2110e:	f1b0 0900 	subs.w	r9, r0, #0
   21112:	da21      	bge.n	21158 <net_if_ipv6_addr_add+0x22c>
   21114:	f119 0f45 	cmn.w	r9, #69	; 0x45
   21118:	d01e      	beq.n	21158 <net_if_ipv6_addr_add+0x22c>
		NET_ERR("Cannot join solicit node address %s (%d)",
   2111a:	4b1a      	ldr	r3, [pc, #104]	; (21184 <net_if_ipv6_addr_add+0x258>)
   2111c:	681b      	ldr	r3, [r3, #0]
   2111e:	075b      	lsls	r3, r3, #29
   21120:	d01a      	beq.n	21158 <net_if_ipv6_addr_add+0x22c>
   21122:	2301      	movs	r3, #1
   21124:	f04f 0500 	mov.w	r5, #0
   21128:	f363 0502 	bfi	r5, r3, #0, #3
   2112c:	4a17      	ldr	r2, [pc, #92]	; (2118c <net_if_ipv6_addr_add+0x260>)
   2112e:	4b16      	ldr	r3, [pc, #88]	; (21188 <net_if_ipv6_addr_add+0x25c>)
   21130:	1ad2      	subs	r2, r2, r3
   21132:	08d2      	lsrs	r2, r2, #3
   21134:	4641      	mov	r1, r8
   21136:	f364 05c5 	bfi	r5, r4, #3, #3
   2113a:	200a      	movs	r0, #10
   2113c:	f362 158f 	bfi	r5, r2, #6, #10
   21140:	f002 f802 	bl	23148 <net_sprint_addr>
   21144:	f7e1 f964 	bl	2410 <log_strdup>
   21148:	f8ad 5000 	strh.w	r5, [sp]
   2114c:	4602      	mov	r2, r0
   2114e:	464b      	mov	r3, r9
   21150:	4911      	ldr	r1, [pc, #68]	; (21198 <net_if_ipv6_addr_add+0x26c>)
   21152:	4812      	ldr	r0, [pc, #72]	; (2119c <net_if_ipv6_addr_add+0x270>)
   21154:	f7e0 fff6 	bl	2144 <log_3>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
   21158:	9905      	ldr	r1, [sp, #20]
   2115a:	4638      	mov	r0, r7
   2115c:	4431      	add	r1, r6
   2115e:	f7ff fd27 	bl	20bb0 <net_if_ipv6_start_dad>
		net_mgmt_event_notify(NET_EVENT_IPV6_ADDR_ADD, iface);
   21162:	480f      	ldr	r0, [pc, #60]	; (211a0 <net_if_ipv6_addr_add+0x274>)
   21164:	4639      	mov	r1, r7
   21166:	f7ff fcb1 	bl	20acc <net_mgmt_event_notify>
		return &ipv6->unicast[i];
   2116a:	9805      	ldr	r0, [sp, #20]
   2116c:	4430      	add	r0, r6
   2116e:	e6ea      	b.n	20f46 <net_if_ipv6_addr_add+0x1a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   21170:	2501      	movs	r5, #1
   21172:	e717      	b.n	20fa4 <net_if_ipv6_addr_add+0x78>
		ifaddr->is_infinite = true;
   21174:	f042 0201 	orr.w	r2, r2, #1
   21178:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
   2117c:	e756      	b.n	2102c <net_if_ipv6_addr_add+0x100>
   2117e:	bf00      	nop
   21180:	00020e11 	.word	0x00020e11
   21184:	2000e280 	.word	0x2000e280
   21188:	0002ef38 	.word	0x0002ef38
   2118c:	0002f040 	.word	0x0002f040
   21190:	0003470d 	.word	0x0003470d
   21194:	0003487b 	.word	0x0003487b
   21198:	00034721 	.word	0x00034721
   2119c:	000348a5 	.word	0x000348a5
   211a0:	f0600001 	.word	0xf0600001

000211a4 <net_if_start_dad>:
{
   211a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct in6_addr addr = { };
   211a6:	2210      	movs	r2, #16
{
   211a8:	b089      	sub	sp, #36	; 0x24
   211aa:	4605      	mov	r5, r0
	struct in6_addr addr = { };
   211ac:	2100      	movs	r1, #0
   211ae:	eb0d 0002 	add.w	r0, sp, r2
   211b2:	f7e5 fd96 	bl	6ce2 <memset>
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   211b6:	a903      	add	r1, sp, #12
   211b8:	4628      	mov	r0, r5
   211ba:	f7ff fdad 	bl	20d18 <net_if_config_ipv6_get>
   211be:	2800      	cmp	r0, #0
   211c0:	db5e      	blt.n	21280 <net_if_start_dad+0xdc>
	if (!ipv6) {
   211c2:	9b03      	ldr	r3, [sp, #12]
   211c4:	2b00      	cmp	r3, #0
   211c6:	d05b      	beq.n	21280 <net_if_start_dad+0xdc>
	addr->s6_addr[0] = 0xfe;
   211c8:	f248 03fe 	movw	r3, #33022	; 0x80fe
	net_ipv6_addr_create_iid(&addr, net_if_get_link_addr(iface));
   211cc:	682c      	ldr	r4, [r5, #0]
   211ce:	9304      	str	r3, [sp, #16]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   211d0:	2300      	movs	r3, #0
   211d2:	9305      	str	r3, [sp, #20]
	switch (lladdr->len) {
   211d4:	7d22      	ldrb	r2, [r4, #20]
   211d6:	2a06      	cmp	r2, #6
   211d8:	d054      	beq.n	21284 <net_if_start_dad+0xe0>
   211da:	2a08      	cmp	r2, #8
   211dc:	d06e      	beq.n	212bc <net_if_start_dad+0x118>
   211de:	2a02      	cmp	r2, #2
   211e0:	d112      	bne.n	21208 <net_if_start_dad+0x64>
		if (lladdr->type == NET_LINK_IEEE802154) {
   211e2:	7d62      	ldrb	r2, [r4, #21]
   211e4:	2a01      	cmp	r2, #1
   211e6:	d10f      	bne.n	21208 <net_if_start_dad+0x64>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   211e8:	9306      	str	r3, [sp, #24]
			addr->s6_addr[11] = 0xff;
   211ea:	22ff      	movs	r2, #255	; 0xff
   211ec:	f88d 201b 	strb.w	r2, [sp, #27]
			addr->s6_addr[13] = 0;
   211f0:	f88d 301d 	strb.w	r3, [sp, #29]
			addr->s6_addr[12] = 0xfe;
   211f4:	22fe      	movs	r2, #254	; 0xfe
			addr->s6_addr[14] = lladdr->addr[0];
   211f6:	6923      	ldr	r3, [r4, #16]
			addr->s6_addr[12] = 0xfe;
   211f8:	f88d 201c 	strb.w	r2, [sp, #28]
			addr->s6_addr[14] = lladdr->addr[0];
   211fc:	781a      	ldrb	r2, [r3, #0]
   211fe:	f88d 201e 	strb.w	r2, [sp, #30]
			addr->s6_addr[15] = lladdr->addr[1];
   21202:	785b      	ldrb	r3, [r3, #1]
   21204:	f88d 301f 	strb.w	r3, [sp, #31]
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   21208:	2300      	movs	r3, #0
   2120a:	2201      	movs	r2, #1
   2120c:	a904      	add	r1, sp, #16
   2120e:	4628      	mov	r0, r5
   21210:	f7ff fe8c 	bl	20f2c <net_if_ipv6_addr_add>
	if (!ifaddr) {
   21214:	4606      	mov	r6, r0
   21216:	b9f0      	cbnz	r0, 21256 <net_if_start_dad+0xb2>
		NET_ERR("Cannot add %s address to interface %p, DAD fails",
   21218:	4b2b      	ldr	r3, [pc, #172]	; (212c8 <net_if_start_dad+0x124>)
   2121a:	681b      	ldr	r3, [r3, #0]
   2121c:	075c      	lsls	r4, r3, #29
   2121e:	d01a      	beq.n	21256 <net_if_start_dad+0xb2>
   21220:	2301      	movs	r3, #1
   21222:	f04f 0400 	mov.w	r4, #0
   21226:	4a29      	ldr	r2, [pc, #164]	; (212cc <net_if_start_dad+0x128>)
   21228:	f363 0402 	bfi	r4, r3, #0, #3
   2122c:	4b28      	ldr	r3, [pc, #160]	; (212d0 <net_if_start_dad+0x12c>)
   2122e:	1a9b      	subs	r3, r3, r2
   21230:	08db      	lsrs	r3, r3, #3
   21232:	a904      	add	r1, sp, #16
   21234:	f360 04c5 	bfi	r4, r0, #3, #3
   21238:	200a      	movs	r0, #10
   2123a:	f363 148f 	bfi	r4, r3, #6, #10
   2123e:	f001 ff83 	bl	23148 <net_sprint_addr>
   21242:	f7e1 f8e5 	bl	2410 <log_strdup>
   21246:	f8ad 4000 	strh.w	r4, [sp]
   2124a:	4602      	mov	r2, r0
   2124c:	462b      	mov	r3, r5
   2124e:	4921      	ldr	r1, [pc, #132]	; (212d4 <net_if_start_dad+0x130>)
   21250:	4821      	ldr	r0, [pc, #132]	; (212d8 <net_if_start_dad+0x134>)
   21252:	f7e0 ff77 	bl	2144 <log_3>
{
   21256:	2400      	movs	r4, #0
		if (!ipv6->unicast[i].is_used ||
   21258:	2748      	movs	r7, #72	; 0x48
   2125a:	9a03      	ldr	r2, [sp, #12]
   2125c:	fb07 f304 	mul.w	r3, r7, r4
   21260:	18d1      	adds	r1, r2, r3
   21262:	f891 0047 	ldrb.w	r0, [r1, #71]	; 0x47
   21266:	0780      	lsls	r0, r0, #30
   21268:	d507      	bpl.n	2127a <net_if_start_dad+0xd6>
   2126a:	5ad3      	ldrh	r3, [r2, r3]
   2126c:	2b0a      	cmp	r3, #10
   2126e:	d104      	bne.n	2127a <net_if_start_dad+0xd6>
		    ipv6->unicast[i].address.family != AF_INET6 ||
   21270:	42b1      	cmp	r1, r6
   21272:	d002      	beq.n	2127a <net_if_start_dad+0xd6>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
   21274:	4628      	mov	r0, r5
   21276:	f7ff fc9b 	bl	20bb0 <net_if_ipv6_start_dad>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2127a:	3401      	adds	r4, #1
   2127c:	2c03      	cmp	r4, #3
   2127e:	d1ec      	bne.n	2125a <net_if_start_dad+0xb6>
}
   21280:	b009      	add	sp, #36	; 0x24
   21282:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   21284:	2203      	movs	r2, #3
   21286:	6921      	ldr	r1, [r4, #16]
   21288:	a806      	add	r0, sp, #24
   2128a:	f7e5 fcfd 	bl	6c88 <memcpy>
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   2128e:	6921      	ldr	r1, [r4, #16]
		addr->s6_addr[11] = 0xff;
   21290:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   21292:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
   21294:	f88d 301b 	strb.w	r3, [sp, #27]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   21298:	4411      	add	r1, r2
		addr->s6_addr[12] = 0xfe;
   2129a:	23fe      	movs	r3, #254	; 0xfe
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   2129c:	f10d 001d 	add.w	r0, sp, #29
		addr->s6_addr[12] = 0xfe;
   212a0:	f88d 301c 	strb.w	r3, [sp, #28]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   212a4:	f7e5 fcf0 	bl	6c88 <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   212a8:	7d63      	ldrb	r3, [r4, #21]
   212aa:	2b03      	cmp	r3, #3
   212ac:	d1ac      	bne.n	21208 <net_if_start_dad+0x64>
		addr->s6_addr[8] ^= 0x02;
   212ae:	f89d 3018 	ldrb.w	r3, [sp, #24]
   212b2:	f083 0302 	eor.w	r3, r3, #2
   212b6:	f88d 3018 	strb.w	r3, [sp, #24]
   212ba:	e7a5      	b.n	21208 <net_if_start_dad+0x64>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   212bc:	6921      	ldr	r1, [r4, #16]
   212be:	a806      	add	r0, sp, #24
   212c0:	f7e5 fce2 	bl	6c88 <memcpy>
   212c4:	e7f3      	b.n	212ae <net_if_start_dad+0x10a>
   212c6:	bf00      	nop
   212c8:	2000e280 	.word	0x2000e280
   212cc:	0002ef38 	.word	0x0002ef38
   212d0:	0002f040 	.word	0x0002f040
   212d4:	00034739 	.word	0x00034739
   212d8:	000348fd 	.word	0x000348fd

000212dc <net_if_ipv6_maddr_add>:
{
   212dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   212de:	460d      	mov	r5, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   212e0:	a901      	add	r1, sp, #4
{
   212e2:	4606      	mov	r6, r0
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   212e4:	f7ff fd18 	bl	20d18 <net_if_config_ipv6_get>
   212e8:	2800      	cmp	r0, #0
   212ea:	db14      	blt.n	21316 <net_if_ipv6_maddr_add+0x3a>
	if (!net_is_ipv6_addr_mcast(addr)) {
   212ec:	782b      	ldrb	r3, [r5, #0]
   212ee:	2bff      	cmp	r3, #255	; 0xff
   212f0:	d111      	bne.n	21316 <net_if_ipv6_maddr_add+0x3a>
		if (ipv6->mcast[i].is_used) {
   212f2:	9801      	ldr	r0, [sp, #4]
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   212f4:	2300      	movs	r3, #0
		if (ipv6->mcast[i].is_used) {
   212f6:	f04f 0e18 	mov.w	lr, #24
   212fa:	fb0e f403 	mul.w	r4, lr, r3
   212fe:	1901      	adds	r1, r0, r4
   21300:	f101 07e8 	add.w	r7, r1, #232	; 0xe8
   21304:	f897 c004 	ldrb.w	ip, [r7, #4]
   21308:	f01c 0f01 	tst.w	ip, #1
   2130c:	4662      	mov	r2, ip
   2130e:	d004      	beq.n	2131a <net_if_ipv6_maddr_add+0x3e>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   21310:	3301      	adds	r3, #1
   21312:	2b05      	cmp	r3, #5
   21314:	d1f1      	bne.n	212fa <net_if_ipv6_maddr_add+0x1e>
		return NULL;
   21316:	2000      	movs	r0, #0
   21318:	e013      	b.n	21342 <net_if_ipv6_maddr_add+0x66>
		ipv6->mcast[i].is_used = true;
   2131a:	f042 0301 	orr.w	r3, r2, #1
   2131e:	713b      	strb	r3, [r7, #4]
		ipv6->mcast[i].address.family = AF_INET6;
   21320:	230a      	movs	r3, #10
   21322:	f8a1 30d8 	strh.w	r3, [r1, #216]	; 0xd8
		memcpy(&ipv6->mcast[i].address.in6_addr, addr, 16);
   21326:	f104 03dc 	add.w	r3, r4, #220	; 0xdc
   2132a:	2210      	movs	r2, #16
   2132c:	4629      	mov	r1, r5
   2132e:	4418      	add	r0, r3
   21330:	f7e5 fcaa 	bl	6c88 <memcpy>
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_ADD, iface);
   21334:	4804      	ldr	r0, [pc, #16]	; (21348 <net_if_ipv6_maddr_add+0x6c>)
   21336:	4631      	mov	r1, r6
   21338:	f7ff fbc8 	bl	20acc <net_mgmt_event_notify>
		return &ipv6->mcast[i];
   2133c:	9801      	ldr	r0, [sp, #4]
   2133e:	34d8      	adds	r4, #216	; 0xd8
   21340:	4420      	add	r0, r4
}
   21342:	b003      	add	sp, #12
   21344:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21346:	bf00      	nop
   21348:	f0600003 	.word	0xf0600003

0002134c <net_if_ipv6_maddr_rm>:
{
   2134c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   21350:	6847      	ldr	r7, [r0, #4]
{
   21352:	4680      	mov	r8, r0
   21354:	4689      	mov	r9, r1
	if (!ipv6) {
   21356:	b1ff      	cbz	r7, 21398 <net_if_ipv6_maddr_rm+0x4c>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   21358:	2500      	movs	r5, #0
		if (!ipv6->mcast[i].is_used) {
   2135a:	f04f 0a18 	mov.w	sl, #24
		if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
   2135e:	f107 0bdc 	add.w	fp, r7, #220	; 0xdc
		if (!ipv6->mcast[i].is_used) {
   21362:	fb0a f005 	mul.w	r0, sl, r5
   21366:	183c      	adds	r4, r7, r0
   21368:	34e8      	adds	r4, #232	; 0xe8
   2136a:	7923      	ldrb	r3, [r4, #4]
   2136c:	07db      	lsls	r3, r3, #31
   2136e:	d510      	bpl.n	21392 <net_if_ipv6_maddr_rm+0x46>
		if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
   21370:	4649      	mov	r1, r9
   21372:	4458      	add	r0, fp
   21374:	f7ff fb9a 	bl	20aac <net_ipv6_addr_cmp>
   21378:	4606      	mov	r6, r0
   2137a:	b150      	cbz	r0, 21392 <net_if_ipv6_maddr_rm+0x46>
		ipv6->mcast[i].is_used = false;
   2137c:	7923      	ldrb	r3, [r4, #4]
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_DEL, iface);
   2137e:	4807      	ldr	r0, [pc, #28]	; (2139c <net_if_ipv6_maddr_rm+0x50>)
		ipv6->mcast[i].is_used = false;
   21380:	f36f 0300 	bfc	r3, #0, #1
   21384:	7123      	strb	r3, [r4, #4]
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_DEL, iface);
   21386:	4641      	mov	r1, r8
   21388:	f7ff fba0 	bl	20acc <net_mgmt_event_notify>
}
   2138c:	4630      	mov	r0, r6
   2138e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   21392:	3501      	adds	r5, #1
   21394:	2d05      	cmp	r5, #5
   21396:	d1e4      	bne.n	21362 <net_if_ipv6_maddr_rm+0x16>
		return false;
   21398:	2600      	movs	r6, #0
   2139a:	e7f7      	b.n	2138c <net_if_ipv6_maddr_rm+0x40>
   2139c:	f0600004 	.word	0xf0600004

000213a0 <net_if_ipv6_addr_rm>:
{
   213a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   213a4:	4680      	mov	r8, r0
   213a6:	b087      	sub	sp, #28
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   213a8:	6846      	ldr	r6, [r0, #4]
	NET_ASSERT(addr);
   213aa:	460c      	mov	r4, r1
   213ac:	b9a1      	cbnz	r1, 213d8 <net_if_ipv6_addr_rm+0x38>
   213ae:	4b3a      	ldr	r3, [pc, #232]	; (21498 <net_if_ipv6_addr_rm+0xf8>)
   213b0:	681b      	ldr	r3, [r3, #0]
   213b2:	0759      	lsls	r1, r3, #29
   213b4:	d010      	beq.n	213d8 <net_if_ipv6_addr_rm+0x38>
   213b6:	2301      	movs	r3, #1
   213b8:	f04f 0200 	mov.w	r2, #0
   213bc:	f363 0202 	bfi	r2, r3, #0, #3
   213c0:	4936      	ldr	r1, [pc, #216]	; (2149c <net_if_ipv6_addr_rm+0xfc>)
   213c2:	4b37      	ldr	r3, [pc, #220]	; (214a0 <net_if_ipv6_addr_rm+0x100>)
   213c4:	4837      	ldr	r0, [pc, #220]	; (214a4 <net_if_ipv6_addr_rm+0x104>)
   213c6:	1a5b      	subs	r3, r3, r1
   213c8:	f364 02c5 	bfi	r2, r4, #3, #3
   213cc:	08db      	lsrs	r3, r3, #3
   213ce:	f363 128f 	bfi	r2, r3, #6, #10
   213d2:	4935      	ldr	r1, [pc, #212]	; (214a8 <net_if_ipv6_addr_rm+0x108>)
   213d4:	f7e0 fe8a 	bl	20ec <log_1>
	if (!ipv6) {
   213d8:	2e00      	cmp	r6, #0
   213da:	d05b      	beq.n	21494 <net_if_ipv6_addr_rm+0xf4>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   213dc:	2500      	movs	r5, #0
		if (!ipv6->unicast[i].is_used) {
   213de:	f04f 0b48 	mov.w	fp, #72	; 0x48
		if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
   213e2:	1d33      	adds	r3, r6, #4
		if (!ipv6->unicast[i].is_used) {
   213e4:	fb0b f905 	mul.w	r9, fp, r5
   213e8:	eb06 0a09 	add.w	sl, r6, r9
   213ec:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
   213f0:	f89a 2007 	ldrb.w	r2, [sl, #7]
   213f4:	0792      	lsls	r2, r2, #30
   213f6:	d54a      	bpl.n	2148e <net_if_ipv6_addr_rm+0xee>
		if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
   213f8:	eb03 0009 	add.w	r0, r3, r9
   213fc:	4621      	mov	r1, r4
   213fe:	9301      	str	r3, [sp, #4]
   21400:	f7ff fb54 	bl	20aac <net_ipv6_addr_cmp>
   21404:	9b01      	ldr	r3, [sp, #4]
   21406:	4607      	mov	r7, r0
   21408:	2800      	cmp	r0, #0
   2140a:	d040      	beq.n	2148e <net_if_ipv6_addr_rm+0xee>
		if (!ipv6->unicast[i].is_infinite) {
   2140c:	f89a 3007 	ldrb.w	r3, [sl, #7]
   21410:	07db      	lsls	r3, r3, #31
   21412:	d40d      	bmi.n	21430 <net_if_ipv6_addr_rm+0x90>
			sys_slist_find_and_remove(
   21414:	f109 0114 	add.w	r1, r9, #20
   21418:	f8df 9098 	ldr.w	r9, [pc, #152]	; 214b4 <net_if_ipv6_addr_rm+0x114>
   2141c:	4431      	add	r1, r6
   2141e:	4648      	mov	r0, r9
   21420:	f7ff fab4 	bl	2098c <sys_slist_find_and_remove>
			if (sys_slist_is_empty(
   21424:	f8d9 3000 	ldr.w	r3, [r9]
   21428:	b913      	cbnz	r3, 21430 <net_if_ipv6_addr_rm+0x90>
				k_delayed_work_cancel(&address_lifetime_timer);
   2142a:	4820      	ldr	r0, [pc, #128]	; (214ac <net_if_ipv6_addr_rm+0x10c>)
   2142c:	f00d f91f 	bl	2e66e <k_delayed_work_cancel>
		ipv6->unicast[i].is_used = false;
   21430:	2348      	movs	r3, #72	; 0x48
   21432:	fb03 6305 	mla	r3, r3, r5, r6
   21436:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
   2143a:	f36f 0241 	bfc	r2, #1, #1
   2143e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	dst->s6_addr[0]   = 0xFF;
   21442:	f240 23ff 	movw	r3, #767	; 0x2ff
   21446:	9302      	str	r3, [sp, #8]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   21448:	2300      	movs	r3, #0
   2144a:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   2144e:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   21452:	f8ad 3010 	strh.w	r3, [sp, #16]
	dst->s6_addr[10]  = 0;
   21456:	f44f 7380 	mov.w	r3, #256	; 0x100
   2145a:	f8ad 3012 	strh.w	r3, [sp, #18]
	dst->s6_addr[11]  = 0x01;
   2145e:	23ff      	movs	r3, #255	; 0xff
   21460:	f88d 3014 	strb.w	r3, [sp, #20]
	dst->s6_addr[13]  = src->s6_addr[13];
   21464:	7b63      	ldrb	r3, [r4, #13]
   21466:	f88d 3015 	strb.w	r3, [sp, #21]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   2146a:	7be2      	ldrb	r2, [r4, #15]
   2146c:	7ba3      	ldrb	r3, [r4, #14]
   2146e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   21472:	f8ad 3016 	strh.w	r3, [sp, #22]
		net_if_ipv6_maddr_rm(iface, &maddr);
   21476:	a902      	add	r1, sp, #8
   21478:	4640      	mov	r0, r8
   2147a:	f7ff ff67 	bl	2134c <net_if_ipv6_maddr_rm>
		net_mgmt_event_notify(NET_EVENT_IPV6_ADDR_DEL, iface);
   2147e:	4641      	mov	r1, r8
   21480:	480b      	ldr	r0, [pc, #44]	; (214b0 <net_if_ipv6_addr_rm+0x110>)
   21482:	f7ff fb23 	bl	20acc <net_mgmt_event_notify>
}
   21486:	4638      	mov	r0, r7
   21488:	b007      	add	sp, #28
   2148a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2148e:	3501      	adds	r5, #1
   21490:	2d03      	cmp	r5, #3
   21492:	d1a7      	bne.n	213e4 <net_if_ipv6_addr_rm+0x44>
		return false;
   21494:	2700      	movs	r7, #0
   21496:	e7f6      	b.n	21486 <net_if_ipv6_addr_rm+0xe6>
   21498:	2000e280 	.word	0x2000e280
   2149c:	0002ef38 	.word	0x0002ef38
   214a0:	0002f040 	.word	0x0002f040
   214a4:	0003434a 	.word	0x0003434a
   214a8:	00034761 	.word	0x00034761
   214ac:	200023d0 	.word	0x200023d0
   214b0:	f0600002 	.word	0xf0600002
   214b4:	200023c0 	.word	0x200023c0

000214b8 <net_if_ipv6_dad_failed>:
{
   214b8:	b530      	push	{r4, r5, lr}
   214ba:	b085      	sub	sp, #20
   214bc:	ab04      	add	r3, sp, #16
   214be:	460d      	mov	r5, r1
   214c0:	f843 0d04 	str.w	r0, [r3, #-4]!
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   214c4:	4628      	mov	r0, r5
   214c6:	4619      	mov	r1, r3
   214c8:	f7ff fc6c 	bl	20da4 <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   214cc:	bb00      	cbnz	r0, 21510 <net_if_ipv6_dad_failed+0x58>
		NET_ERR("Cannot find %s address in interface %p",
   214ce:	4b16      	ldr	r3, [pc, #88]	; (21528 <net_if_ipv6_dad_failed+0x70>)
   214d0:	681b      	ldr	r3, [r3, #0]
   214d2:	075b      	lsls	r3, r3, #29
   214d4:	d01a      	beq.n	2150c <net_if_ipv6_dad_failed+0x54>
   214d6:	2301      	movs	r3, #1
   214d8:	f04f 0400 	mov.w	r4, #0
   214dc:	4a13      	ldr	r2, [pc, #76]	; (2152c <net_if_ipv6_dad_failed+0x74>)
   214de:	f363 0402 	bfi	r4, r3, #0, #3
   214e2:	4b13      	ldr	r3, [pc, #76]	; (21530 <net_if_ipv6_dad_failed+0x78>)
   214e4:	1a9b      	subs	r3, r3, r2
   214e6:	08db      	lsrs	r3, r3, #3
   214e8:	4629      	mov	r1, r5
   214ea:	f360 04c5 	bfi	r4, r0, #3, #3
   214ee:	200a      	movs	r0, #10
   214f0:	f363 148f 	bfi	r4, r3, #6, #10
   214f4:	f001 fe28 	bl	23148 <net_sprint_addr>
   214f8:	f7e0 ff8a 	bl	2410 <log_strdup>
   214fc:	f8ad 4000 	strh.w	r4, [sp]
   21500:	4602      	mov	r2, r0
   21502:	9b03      	ldr	r3, [sp, #12]
   21504:	490b      	ldr	r1, [pc, #44]	; (21534 <net_if_ipv6_dad_failed+0x7c>)
   21506:	480c      	ldr	r0, [pc, #48]	; (21538 <net_if_ipv6_dad_failed+0x80>)
   21508:	f7e0 fe1c 	bl	2144 <log_3>
}
   2150c:	b005      	add	sp, #20
   2150e:	bd30      	pop	{r4, r5, pc}
	k_delayed_work_cancel(&ifaddr->dad_timer);
   21510:	3024      	adds	r0, #36	; 0x24
   21512:	f00d f8ac 	bl	2e66e <k_delayed_work_cancel>
	net_mgmt_event_notify(NET_EVENT_IPV6_DAD_FAILED, iface);
   21516:	9903      	ldr	r1, [sp, #12]
   21518:	4808      	ldr	r0, [pc, #32]	; (2153c <net_if_ipv6_dad_failed+0x84>)
   2151a:	f7ff fad7 	bl	20acc <net_mgmt_event_notify>
	net_if_ipv6_addr_rm(iface, addr);
   2151e:	4629      	mov	r1, r5
   21520:	9803      	ldr	r0, [sp, #12]
   21522:	f7ff ff3d 	bl	213a0 <net_if_ipv6_addr_rm>
   21526:	e7f1      	b.n	2150c <net_if_ipv6_dad_failed+0x54>
   21528:	2000e280 	.word	0x2000e280
   2152c:	0002ef38 	.word	0x0002ef38
   21530:	0002f040 	.word	0x0002f040
   21534:	0003474a 	.word	0x0003474a
   21538:	000348d2 	.word	0x000348d2
   2153c:	f060000e 	.word	0xf060000e

00021540 <remove_prefix_addresses>:
{
   21540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21544:	4606      	mov	r6, r0
   21546:	460d      	mov	r5, r1
   21548:	4617      	mov	r7, r2
   2154a:	4698      	mov	r8, r3
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2154c:	f04f 0b00 	mov.w	fp, #0
		if (!ipv6->unicast[i].is_used ||
   21550:	f04f 0948 	mov.w	r9, #72	; 0x48
   21554:	f101 0a04 	add.w	sl, r1, #4
   21558:	fb09 f10b 	mul.w	r1, r9, fp
   2155c:	186b      	adds	r3, r5, r1
   2155e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
   21562:	0792      	lsls	r2, r2, #30
   21564:	d512      	bpl.n	2158c <remove_prefix_addresses+0x4c>
   21566:	5a6a      	ldrh	r2, [r5, r1]
   21568:	2a0a      	cmp	r2, #10
   2156a:	d10f      	bne.n	2158c <remove_prefix_addresses+0x4c>
		    ipv6->unicast[i].address.family != AF_INET6 ||
   2156c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   21570:	2b01      	cmp	r3, #1
   21572:	d10b      	bne.n	2158c <remove_prefix_addresses+0x4c>
   21574:	eb0a 0401 	add.w	r4, sl, r1
		if (net_is_ipv6_prefix(
   21578:	4642      	mov	r2, r8
   2157a:	4621      	mov	r1, r4
   2157c:	4638      	mov	r0, r7
   2157e:	f7ff fa70 	bl	20a62 <net_is_ipv6_prefix>
   21582:	b118      	cbz	r0, 2158c <remove_prefix_addresses+0x4c>
			net_if_ipv6_addr_rm(iface,
   21584:	4621      	mov	r1, r4
   21586:	4630      	mov	r0, r6
   21588:	f7ff ff0a 	bl	213a0 <net_if_ipv6_addr_rm>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2158c:	f10b 0b01 	add.w	fp, fp, #1
   21590:	f1bb 0f03 	cmp.w	fp, #3
   21594:	d1e0      	bne.n	21558 <remove_prefix_addresses+0x18>
}
   21596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0002159c <prefix_lifetime_timeout>:
{
   2159c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215a0:	f00d fa14 	bl	2e9cc <_impl_k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
   215a4:	4b30      	ldr	r3, [pc, #192]	; (21668 <prefix_lifetime_timeout+0xcc>)
   215a6:	681c      	ldr	r4, [r3, #0]
   215a8:	4680      	mov	r8, r0
   215aa:	2c00      	cmp	r4, #0
   215ac:	d040      	beq.n	21630 <prefix_lifetime_timeout+0x94>
	return node->next;
   215ae:	6825      	ldr	r5, [r4, #0]
	if (ifprefix->lifetime.wrap_counter > 0) {
   215b0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 2166c <prefix_lifetime_timeout+0xd0>
	net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_DEL, ifprefix->iface);
   215b4:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 21674 <prefix_lifetime_timeout+0xd8>
   215b8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   215bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   215c0:	f04f 0a00 	mov.w	sl, #0
			  ifprefix->lifetime.wrap_counter,
   215c4:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
	if (counter > 0) {
   215c8:	2b00      	cmp	r3, #0
   215ca:	d136      	bne.n	2163a <prefix_lifetime_timeout+0x9e>
	if ((s32_t)((start + (u32_t)timeout) - current_time) > 0) {
   215cc:	6862      	ldr	r2, [r4, #4]
   215ce:	eba2 0208 	sub.w	r2, r2, r8
   215d2:	440a      	add	r2, r1
   215d4:	2a00      	cmp	r2, #0
   215d6:	dc44      	bgt.n	21662 <prefix_lifetime_timeout+0xc6>
	ifprefix->is_used = false;
   215d8:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
   215dc:	6a20      	ldr	r0, [r4, #32]
	ifprefix->is_used = false;
   215de:	f363 0241 	bfi	r2, r3, #1, #1
   215e2:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
   215e6:	a901      	add	r1, sp, #4
   215e8:	f7ff fb96 	bl	20d18 <net_if_config_ipv6_get>
   215ec:	2800      	cmp	r0, #0
   215ee:	db0b      	blt.n	21608 <prefix_lifetime_timeout+0x6c>
	remove_prefix_addresses(ifprefix->iface, ipv6, &ifprefix->prefix,
   215f0:	9901      	ldr	r1, [sp, #4]
   215f2:	6a20      	ldr	r0, [r4, #32]
   215f4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   215f8:	f104 0210 	add.w	r2, r4, #16
   215fc:	f7ff ffa0 	bl	21540 <remove_prefix_addresses>
	net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_DEL, ifprefix->iface);
   21600:	6a21      	ldr	r1, [r4, #32]
   21602:	4658      	mov	r0, fp
   21604:	f7ff fa62 	bl	20acc <net_mgmt_event_notify>
		if (current == next) {
   21608:	42ac      	cmp	r4, r5
   2160a:	d003      	beq.n	21614 <prefix_lifetime_timeout+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
   2160c:	b33d      	cbz	r5, 2165e <prefix_lifetime_timeout+0xc2>
   2160e:	682b      	ldr	r3, [r5, #0]
   21610:	462c      	mov	r4, r5
   21612:	b985      	cbnz	r5, 21636 <prefix_lifetime_timeout+0x9a>
	if (found) {
   21614:	f1ba 0f00 	cmp.w	sl, #0
   21618:	d00a      	beq.n	21630 <prefix_lifetime_timeout+0x94>
		k_delayed_work_submit(&prefix_lifetime_timer, timeout_update);
   2161a:	4a14      	ldr	r2, [pc, #80]	; (2166c <prefix_lifetime_timeout+0xd0>)
   2161c:	4814      	ldr	r0, [pc, #80]	; (21670 <prefix_lifetime_timeout+0xd4>)
   2161e:	2300      	movs	r3, #0
   21620:	42bb      	cmp	r3, r7
   21622:	bf08      	it	eq
   21624:	42b2      	cmpeq	r2, r6
   21626:	bf38      	it	cc
   21628:	4616      	movcc	r6, r2
   2162a:	4631      	mov	r1, r6
   2162c:	f7ff fa46 	bl	20abc <k_delayed_work_submit>
}
   21630:	b003      	add	sp, #12
   21632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21636:	461d      	mov	r5, r3
   21638:	e7c4      	b.n	215c4 <prefix_lifetime_timeout+0x28>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
   2163a:	45c8      	cmp	r8, r9
   2163c:	d101      	bne.n	21642 <prefix_lifetime_timeout+0xa6>
		ifprefix->lifetime.wrap_counter--;
   2163e:	3b01      	subs	r3, #1
   21640:	60e3      	str	r3, [r4, #12]
	if (ifprefix->lifetime.wrap_counter > 0) {
   21642:	68e3      	ldr	r3, [r4, #12]
   21644:	2b00      	cmp	r3, #0
   21646:	bfc8      	it	gt
   21648:	4649      	movgt	r1, r9
			if (next_timeout < timeout_update) {
   2164a:	2300      	movs	r3, #0
   2164c:	42bb      	cmp	r3, r7
   2164e:	bf08      	it	eq
   21650:	42b1      	cmpeq	r1, r6
   21652:	bf3e      	ittt	cc
   21654:	460e      	movcc	r6, r1
   21656:	461f      	movcc	r7, r3
				found = true;
   21658:	f04f 0a01 	movcc.w	sl, #1
   2165c:	e7d4      	b.n	21608 <prefix_lifetime_timeout+0x6c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
   2165e:	462b      	mov	r3, r5
   21660:	e7d6      	b.n	21610 <prefix_lifetime_timeout+0x74>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
   21662:	45c8      	cmp	r8, r9
   21664:	d1f1      	bne.n	2164a <prefix_lifetime_timeout+0xae>
   21666:	e7ea      	b.n	2163e <prefix_lifetime_timeout+0xa2>
   21668:	200023c8 	.word	0x200023c8
   2166c:	7fffff9b 	.word	0x7fffff9b
   21670:	200025d4 	.word	0x200025d4
   21674:	f0600006 	.word	0xf0600006

00021678 <net_if_ipv6_maddr_lookup>:
{
   21678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   2167c:	4d1a      	ldr	r5, [pc, #104]	; (216e8 <net_if_ipv6_maddr_lookup+0x70>)
{
   2167e:	4682      	mov	sl, r0
   21680:	460f      	mov	r7, r1
			if (!ipv6->mcast[i].is_used ||
   21682:	f04f 0b18 	mov.w	fp, #24
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   21686:	4b19      	ldr	r3, [pc, #100]	; (216ec <net_if_ipv6_maddr_lookup+0x74>)
   21688:	429d      	cmp	r5, r3
   2168a:	d101      	bne.n	21690 <net_if_ipv6_maddr_lookup+0x18>
	return NULL;
   2168c:	2000      	movs	r0, #0
   2168e:	e021      	b.n	216d4 <net_if_ipv6_maddr_lookup+0x5c>
		if (ret && *ret && iface != *ret) {
   21690:	b11f      	cbz	r7, 2169a <net_if_ipv6_maddr_lookup+0x22>
   21692:	683b      	ldr	r3, [r7, #0]
   21694:	b10b      	cbz	r3, 2169a <net_if_ipv6_maddr_lookup+0x22>
   21696:	42ab      	cmp	r3, r5
   21698:	d123      	bne.n	216e2 <net_if_ipv6_maddr_lookup+0x6a>
		struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   2169a:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
   2169c:	b30c      	cbz	r4, 216e2 <net_if_ipv6_maddr_lookup+0x6a>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   2169e:	f04f 0800 	mov.w	r8, #0
			if (net_is_ipv6_prefix(
   216a2:	f104 09dc 	add.w	r9, r4, #220	; 0xdc
			if (!ipv6->mcast[i].is_used ||
   216a6:	fb0b f608 	mul.w	r6, fp, r8
   216aa:	19a2      	adds	r2, r4, r6
   216ac:	f892 10ec 	ldrb.w	r1, [r2, #236]	; 0xec
   216b0:	07cb      	lsls	r3, r1, #31
   216b2:	d511      	bpl.n	216d8 <net_if_ipv6_maddr_lookup+0x60>
   216b4:	f8b2 20d8 	ldrh.w	r2, [r2, #216]	; 0xd8
   216b8:	2a0a      	cmp	r2, #10
   216ba:	d10d      	bne.n	216d8 <net_if_ipv6_maddr_lookup+0x60>
			if (net_is_ipv6_prefix(
   216bc:	2280      	movs	r2, #128	; 0x80
   216be:	eb09 0106 	add.w	r1, r9, r6
   216c2:	4650      	mov	r0, sl
   216c4:	f7ff f9cd 	bl	20a62 <net_is_ipv6_prefix>
   216c8:	b130      	cbz	r0, 216d8 <net_if_ipv6_maddr_lookup+0x60>
				if (ret) {
   216ca:	b107      	cbz	r7, 216ce <net_if_ipv6_maddr_lookup+0x56>
					*ret = iface;
   216cc:	603d      	str	r5, [r7, #0]
				return &ipv6->mcast[i];
   216ce:	f106 00d8 	add.w	r0, r6, #216	; 0xd8
   216d2:	4420      	add	r0, r4
}
   216d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   216d8:	f108 0801 	add.w	r8, r8, #1
   216dc:	f1b8 0f05 	cmp.w	r8, #5
   216e0:	d1e1      	bne.n	216a6 <net_if_ipv6_maddr_lookup+0x2e>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   216e2:	3520      	adds	r5, #32
   216e4:	e7cf      	b.n	21686 <net_if_ipv6_maddr_lookup+0xe>
   216e6:	bf00      	nop
   216e8:	2000e560 	.word	0x2000e560
   216ec:	2000e580 	.word	0x2000e580

000216f0 <net_if_mcast_monitor>:
{
   216f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   216f2:	4b0a      	ldr	r3, [pc, #40]	; (2171c <net_if_mcast_monitor+0x2c>)
   216f4:	681b      	ldr	r3, [r3, #0]
{
   216f6:	4605      	mov	r5, r0
   216f8:	460e      	mov	r6, r1
   216fa:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   216fc:	b163      	cbz	r3, 21718 <net_if_mcast_monitor+0x28>
   216fe:	681c      	ldr	r4, [r3, #0]
		if (iface == mon->iface) {
   21700:	685a      	ldr	r2, [r3, #4]
   21702:	42aa      	cmp	r2, r5
   21704:	d104      	bne.n	21710 <net_if_mcast_monitor+0x20>
			mon->cb(iface, addr, is_joined);
   21706:	689b      	ldr	r3, [r3, #8]
   21708:	463a      	mov	r2, r7
   2170a:	4631      	mov	r1, r6
   2170c:	4628      	mov	r0, r5
   2170e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   21710:	b114      	cbz	r4, 21718 <net_if_mcast_monitor+0x28>
   21712:	4623      	mov	r3, r4
   21714:	6824      	ldr	r4, [r4, #0]
   21716:	e7f3      	b.n	21700 <net_if_mcast_monitor+0x10>
}
   21718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2171a:	bf00      	nop
   2171c:	200025cc 	.word	0x200025cc

00021720 <net_if_ipv6_prefix_add>:
{
   21720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21724:	b087      	sub	sp, #28
   21726:	460d      	mov	r5, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   21728:	a901      	add	r1, sp, #4
{
   2172a:	4606      	mov	r6, r0
   2172c:	4690      	mov	r8, r2
   2172e:	461f      	mov	r7, r3
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   21730:	f7ff faf2 	bl	20d18 <net_if_config_ipv6_get>
   21734:	2800      	cmp	r0, #0
   21736:	da03      	bge.n	21740 <net_if_ipv6_prefix_add+0x20>
		return NULL;
   21738:	2000      	movs	r0, #0
}
   2173a:	b007      	add	sp, #28
   2173c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ifprefix = ipv6_prefix_find(iface, prefix, len);
   21740:	6874      	ldr	r4, [r6, #4]
	if (!ipv6) {
   21742:	b314      	cbz	r4, 2178a <net_if_ipv6_prefix_add+0x6a>
		if (!ipv6->unicast[i].is_used) {
   21744:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   21748:	0799      	lsls	r1, r3, #30
   2174a:	d509      	bpl.n	21760 <net_if_ipv6_prefix_add+0x40>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   2174c:	f504 71b0 	add.w	r1, r4, #352	; 0x160
   21750:	4628      	mov	r0, r5
   21752:	f7ff f9ab 	bl	20aac <net_ipv6_addr_cmp>
   21756:	b118      	cbz	r0, 21760 <net_if_ipv6_prefix_add+0x40>
   21758:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
   2175c:	4543      	cmp	r3, r8
   2175e:	d012      	beq.n	21786 <net_if_ipv6_prefix_add+0x66>
		if (!ipv6->unicast[i].is_used) {
   21760:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
   21764:	079a      	lsls	r2, r3, #30
   21766:	d510      	bpl.n	2178a <net_if_ipv6_prefix_add+0x6a>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   21768:	f504 71c4 	add.w	r1, r4, #392	; 0x188
   2176c:	4628      	mov	r0, r5
   2176e:	f7ff f99d 	bl	20aac <net_ipv6_addr_cmp>
   21772:	b150      	cbz	r0, 2178a <net_if_ipv6_prefix_add+0x6a>
   21774:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
   21778:	4543      	cmp	r3, r8
   2177a:	d106      	bne.n	2178a <net_if_ipv6_prefix_add+0x6a>
   2177c:	2028      	movs	r0, #40	; 0x28
			return &ipv6->prefix[i];
   2177e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
		return &ipv6->prefix[i];
   21782:	4420      	add	r0, r4
   21784:	e7d9      	b.n	2173a <net_if_ipv6_prefix_add+0x1a>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   21786:	2000      	movs	r0, #0
   21788:	e7f9      	b.n	2177e <net_if_ipv6_prefix_add+0x5e>
	if (!ipv6) {
   2178a:	f8dd c004 	ldr.w	ip, [sp, #4]
   2178e:	f1bc 0f00 	cmp.w	ip, #0
   21792:	d0d1      	beq.n	21738 <net_if_ipv6_prefix_add+0x18>
		if (ipv6->prefix[i].is_used) {
   21794:	f89c 3175 	ldrb.w	r3, [ip, #373]	; 0x175
   21798:	f3c3 0340 	ubfx	r3, r3, #1, #1
   2179c:	b123      	cbz	r3, 217a8 <net_if_ipv6_prefix_add+0x88>
   2179e:	f89c 319d 	ldrb.w	r3, [ip, #413]	; 0x19d
   217a2:	079b      	lsls	r3, r3, #30
   217a4:	d4c8      	bmi.n	21738 <net_if_ipv6_prefix_add+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   217a6:	2301      	movs	r3, #1
   217a8:	2228      	movs	r2, #40	; 0x28
   217aa:	435a      	muls	r2, r3
   217ac:	f502 74a8 	add.w	r4, r2, #336	; 0x150
	ifprefix->is_used = true;
   217b0:	4462      	add	r2, ip
   217b2:	f892 1175 	ldrb.w	r1, [r2, #373]	; 0x175
	ifprefix->len = len;
   217b6:	f882 8174 	strb.w	r8, [r2, #372]	; 0x174
	ifprefix->is_used = true;
   217ba:	f041 0102 	orr.w	r1, r1, #2
   217be:	f882 1175 	strb.w	r1, [r2, #373]	; 0x175
	ifprefix->iface = iface;
   217c2:	f8c2 6170 	str.w	r6, [r2, #368]	; 0x170
	net_ipaddr_copy(&ifprefix->prefix, addr);
   217c6:	462a      	mov	r2, r5
   217c8:	ad02      	add	r5, sp, #8
   217ca:	f102 0910 	add.w	r9, r2, #16
   217ce:	46ae      	mov	lr, r5
   217d0:	6810      	ldr	r0, [r2, #0]
   217d2:	6851      	ldr	r1, [r2, #4]
   217d4:	46a8      	mov	r8, r5
   217d6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
   217da:	3208      	adds	r2, #8
   217dc:	454a      	cmp	r2, r9
   217de:	4645      	mov	r5, r8
   217e0:	d1f6      	bne.n	217d0 <net_if_ipv6_prefix_add+0xb0>
   217e2:	eb0c 0204 	add.w	r2, ip, r4
   217e6:	3210      	adds	r2, #16
   217e8:	f10d 0818 	add.w	r8, sp, #24
   217ec:	4675      	mov	r5, lr
   217ee:	cd03      	ldmia	r5!, {r0, r1}
   217f0:	4545      	cmp	r5, r8
   217f2:	6010      	str	r0, [r2, #0]
   217f4:	6051      	str	r1, [r2, #4]
   217f6:	46ae      	mov	lr, r5
   217f8:	f102 0208 	add.w	r2, r2, #8
   217fc:	d1f6      	bne.n	217ec <net_if_ipv6_prefix_add+0xcc>
   217fe:	2228      	movs	r2, #40	; 0x28
		ifprefix->is_infinite = true;
   21800:	fb02 c303 	mla	r3, r2, r3, ip
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   21804:	3701      	adds	r7, #1
		ifprefix->is_infinite = true;
   21806:	f893 2175 	ldrb.w	r2, [r3, #373]	; 0x175
		net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_ADD, iface);
   2180a:	4806      	ldr	r0, [pc, #24]	; (21824 <net_if_ipv6_prefix_add+0x104>)
		ifprefix->is_infinite = true;
   2180c:	bf0c      	ite	eq
   2180e:	f042 0201 	orreq.w	r2, r2, #1
		ifprefix->is_infinite = false;
   21812:	f36f 0200 	bfcne	r2, #0, #1
   21816:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
		net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_ADD, iface);
   2181a:	4631      	mov	r1, r6
   2181c:	f7ff f956 	bl	20acc <net_mgmt_event_notify>
		return &ipv6->prefix[i];
   21820:	9801      	ldr	r0, [sp, #4]
   21822:	e7ae      	b.n	21782 <net_if_ipv6_prefix_add+0x62>
   21824:	f0600005 	.word	0xf0600005

00021828 <net_if_ipv6_prefix_get>:
{
   21828:	b570      	push	{r4, r5, r6, lr}
   2182a:	460e      	mov	r6, r1
	if (!iface) {
   2182c:	b920      	cbnz	r0, 21838 <net_if_ipv6_prefix_get+0x10>
	if (__net_if_start == __net_if_end) {
   2182e:	4b19      	ldr	r3, [pc, #100]	; (21894 <net_if_ipv6_prefix_get+0x6c>)
   21830:	4a19      	ldr	r2, [pc, #100]	; (21898 <net_if_ipv6_prefix_get+0x70>)
   21832:	4293      	cmp	r3, r2
   21834:	d02c      	beq.n	21890 <net_if_ipv6_prefix_get+0x68>
	return iface ? iface : __net_if_start;
   21836:	4618      	mov	r0, r3
	ipv6 = iface->config.ip.ipv6;
   21838:	6845      	ldr	r5, [r0, #4]
	if (!ipv6) {
   2183a:	b33d      	cbz	r5, 2188c <net_if_ipv6_prefix_get+0x64>
		if (!ipv6->prefix[i].is_used) {
   2183c:	f895 4175 	ldrb.w	r4, [r5, #373]	; 0x175
   21840:	f3c4 0440 	ubfx	r4, r4, #1, #1
   21844:	b14c      	cbz	r4, 2185a <net_if_ipv6_prefix_get+0x32>
		if (net_is_ipv6_prefix(ipv6->prefix[i].prefix.s6_addr,
   21846:	f895 2174 	ldrb.w	r2, [r5, #372]	; 0x174
   2184a:	4631      	mov	r1, r6
   2184c:	f505 70b0 	add.w	r0, r5, #352	; 0x160
   21850:	f7ff f907 	bl	20a62 <net_is_ipv6_prefix>
   21854:	b1c0      	cbz	r0, 21888 <net_if_ipv6_prefix_get+0x60>
				prefix = &ipv6->prefix[i];
   21856:	f505 74a8 	add.w	r4, r5, #336	; 0x150
		if (!ipv6->prefix[i].is_used) {
   2185a:	f895 319d 	ldrb.w	r3, [r5, #413]	; 0x19d
   2185e:	079b      	lsls	r3, r3, #30
   21860:	d510      	bpl.n	21884 <net_if_ipv6_prefix_get+0x5c>
		if (net_is_ipv6_prefix(ipv6->prefix[i].prefix.s6_addr,
   21862:	f895 219c 	ldrb.w	r2, [r5, #412]	; 0x19c
   21866:	4631      	mov	r1, r6
   21868:	f505 70c4 	add.w	r0, r5, #392	; 0x188
   2186c:	f7ff f8f9 	bl	20a62 <net_is_ipv6_prefix>
   21870:	b140      	cbz	r0, 21884 <net_if_ipv6_prefix_get+0x5c>
			if (!prefix || prefix->len > ipv6->prefix[i].len) {
   21872:	b12c      	cbz	r4, 21880 <net_if_ipv6_prefix_get+0x58>
   21874:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   21878:	f895 319c 	ldrb.w	r3, [r5, #412]	; 0x19c
   2187c:	429a      	cmp	r2, r3
   2187e:	d901      	bls.n	21884 <net_if_ipv6_prefix_get+0x5c>
				prefix = &ipv6->prefix[i];
   21880:	f505 74bc 	add.w	r4, r5, #376	; 0x178
}
   21884:	4620      	mov	r0, r4
   21886:	bd70      	pop	{r4, r5, r6, pc}
	struct net_if_ipv6_prefix *prefix = NULL;
   21888:	4604      	mov	r4, r0
   2188a:	e7e6      	b.n	2185a <net_if_ipv6_prefix_get+0x32>
		return NULL;
   2188c:	462c      	mov	r4, r5
   2188e:	e7f9      	b.n	21884 <net_if_ipv6_prefix_get+0x5c>
	ipv6 = iface->config.ip.ipv6;
   21890:	6843      	ldr	r3, [r0, #4]
   21892:	deff      	udf	#255	; 0xff
   21894:	2000e560 	.word	0x2000e560
   21898:	2000e580 	.word	0x2000e580

0002189c <net_if_ipv6_prefix_lookup>:
{
   2189c:	b570      	push	{r4, r5, r6, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   2189e:	6844      	ldr	r4, [r0, #4]
{
   218a0:	460d      	mov	r5, r1
   218a2:	4616      	mov	r6, r2
	if (!ipv6) {
   218a4:	b90c      	cbnz	r4, 218aa <net_if_ipv6_prefix_lookup+0xe>
		return NULL;
   218a6:	2000      	movs	r0, #0
}
   218a8:	bd70      	pop	{r4, r5, r6, pc}
		if (!ipv6->prefix[i].is_used) {
   218aa:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
   218ae:	0798      	lsls	r0, r3, #30
   218b0:	d412      	bmi.n	218d8 <net_if_ipv6_prefix_lookup+0x3c>
   218b2:	f894 319d 	ldrb.w	r3, [r4, #413]	; 0x19d
   218b6:	079b      	lsls	r3, r3, #30
   218b8:	d5f5      	bpl.n	218a6 <net_if_ipv6_prefix_lookup+0xa>
		if (net_is_ipv6_prefix(ipv6->prefix[i].prefix.s6_addr,
   218ba:	4632      	mov	r2, r6
   218bc:	4629      	mov	r1, r5
   218be:	f504 70c4 	add.w	r0, r4, #392	; 0x188
   218c2:	f7ff f8ce 	bl	20a62 <net_is_ipv6_prefix>
   218c6:	2800      	cmp	r0, #0
   218c8:	d0ed      	beq.n	218a6 <net_if_ipv6_prefix_lookup+0xa>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   218ca:	2001      	movs	r0, #1
			return &ipv6->prefix[i];
   218cc:	2328      	movs	r3, #40	; 0x28
   218ce:	fb03 4000 	mla	r0, r3, r0, r4
   218d2:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   218d6:	e7e7      	b.n	218a8 <net_if_ipv6_prefix_lookup+0xc>
		if (net_is_ipv6_prefix(ipv6->prefix[i].prefix.s6_addr,
   218d8:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   218dc:	f7ff f8c1 	bl	20a62 <net_is_ipv6_prefix>
   218e0:	2800      	cmp	r0, #0
   218e2:	d0e6      	beq.n	218b2 <net_if_ipv6_prefix_lookup+0x16>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   218e4:	2000      	movs	r0, #0
   218e6:	e7f1      	b.n	218cc <net_if_ipv6_prefix_lookup+0x30>

000218e8 <net_if_ipv6_addr_onlink>:
{
   218e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   218ec:	4d18      	ldr	r5, [pc, #96]	; (21950 <net_if_ipv6_addr_onlink+0x68>)
   218ee:	f8df 8064 	ldr.w	r8, [pc, #100]	; 21954 <net_if_ipv6_addr_onlink+0x6c>
{
   218f2:	4606      	mov	r6, r0
   218f4:	460f      	mov	r7, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   218f6:	4545      	cmp	r5, r8
   218f8:	d101      	bne.n	218fe <net_if_ipv6_addr_onlink+0x16>
	return false;
   218fa:	2000      	movs	r0, #0
   218fc:	e023      	b.n	21946 <net_if_ipv6_addr_onlink+0x5e>
		if (iface && *iface && *iface != tmp) {
   218fe:	b11e      	cbz	r6, 21908 <net_if_ipv6_addr_onlink+0x20>
   21900:	6833      	ldr	r3, [r6, #0]
   21902:	b10b      	cbz	r3, 21908 <net_if_ipv6_addr_onlink+0x20>
   21904:	42ab      	cmp	r3, r5
   21906:	d111      	bne.n	2192c <net_if_ipv6_addr_onlink+0x44>
		struct net_if_ipv6 *ipv6 = tmp->config.ip.ipv6;
   21908:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
   2190a:	b17c      	cbz	r4, 2192c <net_if_ipv6_addr_onlink+0x44>
			if (ipv6->prefix[i].is_used &&
   2190c:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
   21910:	079a      	lsls	r2, r3, #30
   21912:	d40d      	bmi.n	21930 <net_if_ipv6_addr_onlink+0x48>
   21914:	f894 319d 	ldrb.w	r3, [r4, #413]	; 0x19d
   21918:	079b      	lsls	r3, r3, #30
   2191a:	d507      	bpl.n	2192c <net_if_ipv6_addr_onlink+0x44>
			    net_is_ipv6_prefix(ipv6->prefix[i].prefix.s6_addr,
   2191c:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
   21920:	4639      	mov	r1, r7
   21922:	f504 70c4 	add.w	r0, r4, #392	; 0x188
   21926:	f7ff f89c 	bl	20a62 <net_is_ipv6_prefix>
			if (ipv6->prefix[i].is_used &&
   2192a:	b950      	cbnz	r0, 21942 <net_if_ipv6_addr_onlink+0x5a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   2192c:	3520      	adds	r5, #32
   2192e:	e7e2      	b.n	218f6 <net_if_ipv6_addr_onlink+0xe>
			    net_is_ipv6_prefix(ipv6->prefix[i].prefix.s6_addr,
   21930:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
   21934:	4639      	mov	r1, r7
   21936:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   2193a:	f7ff f892 	bl	20a62 <net_is_ipv6_prefix>
			if (ipv6->prefix[i].is_used &&
   2193e:	2800      	cmp	r0, #0
   21940:	d0e8      	beq.n	21914 <net_if_ipv6_addr_onlink+0x2c>
				if (iface) {
   21942:	b916      	cbnz	r6, 2194a <net_if_ipv6_addr_onlink+0x62>
				return true;
   21944:	2001      	movs	r0, #1
}
   21946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					*iface = tmp;
   2194a:	6035      	str	r5, [r6, #0]
   2194c:	e7fa      	b.n	21944 <net_if_ipv6_addr_onlink+0x5c>
   2194e:	bf00      	nop
   21950:	2000e560 	.word	0x2000e560
   21954:	2000e580 	.word	0x2000e580

00021958 <net_if_ipv6_prefix_set_timer>:
{
   21958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (lifetime == 0xffffffff) {
   2195a:	1c4b      	adds	r3, r1, #1
{
   2195c:	4604      	mov	r4, r0
	if (lifetime == 0xffffffff) {
   2195e:	d03c      	beq.n	219da <net_if_ipv6_prefix_set_timer+0x82>
	parent->next = child;
   21960:	2300      	movs	r3, #0
   21962:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   21964:	4b1d      	ldr	r3, [pc, #116]	; (219dc <net_if_ipv6_prefix_set_timer+0x84>)
   21966:	685a      	ldr	r2, [r3, #4]
	u64_t expire_timeout = K_SECONDS((u64_t)lifetime);
   21968:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   2196c:	fba1 6706 	umull	r6, r7, r1, r6
   21970:	bb72      	cbnz	r2, 219d0 <net_if_ipv6_prefix_set_timer+0x78>
	list->head = node;
   21972:	e9c3 0000 	strd	r0, r0, [r3]
   21976:	f00d f829 	bl	2e9cc <_impl_k_uptime_get_32>
	ifprefix->lifetime.wrap_counter = expire_timeout /
   2197a:	4a19      	ldr	r2, [pc, #100]	; (219e0 <net_if_ipv6_prefix_set_timer+0x88>)
	ifprefix->lifetime.timer_start = k_uptime_get_32();
   2197c:	6060      	str	r0, [r4, #4]
	ifprefix->lifetime.wrap_counter = expire_timeout /
   2197e:	2300      	movs	r3, #0
   21980:	4630      	mov	r0, r6
   21982:	4639      	mov	r1, r7
   21984:	f7de fc96 	bl	2b4 <__aeabi_uldivmod>
	ifprefix->lifetime.timer_timeout = expire_timeout -
   21988:	4915      	ldr	r1, [pc, #84]	; (219e0 <net_if_ipv6_prefix_set_timer+0x88>)
	ifprefix->lifetime.wrap_counter = expire_timeout /
   2198a:	60e0      	str	r0, [r4, #12]
	ifprefix->lifetime.timer_timeout = expire_timeout -
   2198c:	fb01 6010 	mls	r0, r1, r0, r6
   21990:	60a0      	str	r0, [r4, #8]
   21992:	4814      	ldr	r0, [pc, #80]	; (219e4 <net_if_ipv6_prefix_set_timer+0x8c>)
   21994:	f00c ff2a 	bl	2e7ec <z_timeout_remaining>
   21998:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2199c:	2264      	movs	r2, #100	; 0x64
   2199e:	2300      	movs	r3, #0
   219a0:	fb80 0101 	smull	r0, r1, r0, r1
   219a4:	f7de fc86 	bl	2b4 <__aeabi_uldivmod>
	if (!remaining || (ifprefix->lifetime.wrap_counter == 0 &&
   219a8:	4605      	mov	r5, r0
   219aa:	b120      	cbz	r0, 219b6 <net_if_ipv6_prefix_set_timer+0x5e>
   219ac:	68e3      	ldr	r3, [r4, #12]
   219ae:	b9a3      	cbnz	r3, 219da <net_if_ipv6_prefix_set_timer+0x82>
   219b0:	68a3      	ldr	r3, [r4, #8]
   219b2:	4283      	cmp	r3, r0
   219b4:	da11      	bge.n	219da <net_if_ipv6_prefix_set_timer+0x82>
		k_delayed_work_cancel(&prefix_lifetime_timer);
   219b6:	480c      	ldr	r0, [pc, #48]	; (219e8 <net_if_ipv6_prefix_set_timer+0x90>)
   219b8:	f00c fe59 	bl	2e66e <k_delayed_work_cancel>
		if (ifprefix->lifetime.wrap_counter > 0 && remaining == 0) {
   219bc:	68e3      	ldr	r3, [r4, #12]
   219be:	2b00      	cmp	r3, #0
   219c0:	dd09      	ble.n	219d6 <net_if_ipv6_prefix_set_timer+0x7e>
   219c2:	b945      	cbnz	r5, 219d6 <net_if_ipv6_prefix_set_timer+0x7e>
			k_delayed_work_submit(&prefix_lifetime_timer,
   219c4:	4906      	ldr	r1, [pc, #24]	; (219e0 <net_if_ipv6_prefix_set_timer+0x88>)
			k_delayed_work_submit(&prefix_lifetime_timer,
   219c6:	4808      	ldr	r0, [pc, #32]	; (219e8 <net_if_ipv6_prefix_set_timer+0x90>)
}
   219c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_delayed_work_submit(&prefix_lifetime_timer,
   219cc:	f7ff b876 	b.w	20abc <k_delayed_work_submit>
	parent->next = child;
   219d0:	6010      	str	r0, [r2, #0]
	list->tail = node;
   219d2:	6058      	str	r0, [r3, #4]
   219d4:	e7cf      	b.n	21976 <net_if_ipv6_prefix_set_timer+0x1e>
   219d6:	68a1      	ldr	r1, [r4, #8]
   219d8:	e7f5      	b.n	219c6 <net_if_ipv6_prefix_set_timer+0x6e>
}
   219da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   219dc:	200023c8 	.word	0x200023c8
   219e0:	7fffff9b 	.word	0x7fffff9b
   219e4:	200025e0 	.word	0x200025e0
   219e8:	200025d4 	.word	0x200025d4

000219ec <net_if_ipv6_prefix_unset_timer>:
	if (!prefix->is_used) {
   219ec:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   219f0:	079b      	lsls	r3, r3, #30
{
   219f2:	4601      	mov	r1, r0
	if (!prefix->is_used) {
   219f4:	d505      	bpl.n	21a02 <net_if_ipv6_prefix_unset_timer+0x16>
	ifprefix->lifetime.timer_timeout = 0;
   219f6:	2300      	movs	r3, #0
	ifprefix->lifetime.wrap_counter = 0;
   219f8:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_slist_find_and_remove(&active_prefix_lifetime_timers,
   219fc:	4801      	ldr	r0, [pc, #4]	; (21a04 <net_if_ipv6_prefix_unset_timer+0x18>)
   219fe:	f7fe bfc5 	b.w	2098c <sys_slist_find_and_remove>
}
   21a02:	4770      	bx	lr
   21a04:	200023c8 	.word	0x200023c8

00021a08 <net_if_ipv6_prefix_rm>:
{
   21a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   21a0c:	6844      	ldr	r4, [r0, #4]
{
   21a0e:	4606      	mov	r6, r0
   21a10:	4688      	mov	r8, r1
   21a12:	4617      	mov	r7, r2
	if (!ipv6) {
   21a14:	b3d4      	cbz	r4, 21a8c <net_if_ipv6_prefix_rm+0x84>
		if (!ipv6->prefix[i].is_used) {
   21a16:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
   21a1a:	079a      	lsls	r2, r3, #30
   21a1c:	d508      	bpl.n	21a30 <net_if_ipv6_prefix_rm+0x28>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   21a1e:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   21a22:	f7ff f843 	bl	20aac <net_ipv6_addr_cmp>
   21a26:	b118      	cbz	r0, 21a30 <net_if_ipv6_prefix_rm+0x28>
   21a28:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
   21a2c:	42bb      	cmp	r3, r7
   21a2e:	d02a      	beq.n	21a86 <net_if_ipv6_prefix_rm+0x7e>
		if (!ipv6->prefix[i].is_used) {
   21a30:	f894 319d 	ldrb.w	r3, [r4, #413]	; 0x19d
   21a34:	079b      	lsls	r3, r3, #30
   21a36:	d529      	bpl.n	21a8c <net_if_ipv6_prefix_rm+0x84>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   21a38:	4641      	mov	r1, r8
   21a3a:	f504 70c4 	add.w	r0, r4, #392	; 0x188
   21a3e:	f7ff f835 	bl	20aac <net_ipv6_addr_cmp>
   21a42:	b318      	cbz	r0, 21a8c <net_if_ipv6_prefix_rm+0x84>
   21a44:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
   21a48:	42bb      	cmp	r3, r7
   21a4a:	d11f      	bne.n	21a8c <net_if_ipv6_prefix_rm+0x84>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   21a4c:	2501      	movs	r5, #1
   21a4e:	2028      	movs	r0, #40	; 0x28
		net_if_ipv6_prefix_unset_timer(&ipv6->prefix[i]);
   21a50:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   21a54:	4420      	add	r0, r4
   21a56:	f7ff ffc9 	bl	219ec <net_if_ipv6_prefix_unset_timer>
		ipv6->prefix[i].is_used = false;
   21a5a:	2328      	movs	r3, #40	; 0x28
   21a5c:	fb03 4505 	mla	r5, r3, r5, r4
		remove_prefix_addresses(iface, ipv6, addr, len);
   21a60:	4642      	mov	r2, r8
		ipv6->prefix[i].is_used = false;
   21a62:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   21a66:	f36f 0341 	bfc	r3, #1, #1
   21a6a:	f885 3175 	strb.w	r3, [r5, #373]	; 0x175
		remove_prefix_addresses(iface, ipv6, addr, len);
   21a6e:	4621      	mov	r1, r4
   21a70:	463b      	mov	r3, r7
   21a72:	4630      	mov	r0, r6
   21a74:	f7ff fd64 	bl	21540 <remove_prefix_addresses>
		net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_DEL, iface);
   21a78:	4805      	ldr	r0, [pc, #20]	; (21a90 <net_if_ipv6_prefix_rm+0x88>)
   21a7a:	4631      	mov	r1, r6
   21a7c:	f7ff f826 	bl	20acc <net_mgmt_event_notify>
		return true;
   21a80:	2001      	movs	r0, #1
}
   21a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   21a86:	2500      	movs	r5, #0
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   21a88:	4628      	mov	r0, r5
   21a8a:	e7e1      	b.n	21a50 <net_if_ipv6_prefix_rm+0x48>
		return false;
   21a8c:	2000      	movs	r0, #0
   21a8e:	e7f8      	b.n	21a82 <net_if_ipv6_prefix_rm+0x7a>
   21a90:	f0600006 	.word	0xf0600006

00021a94 <net_if_ipv6_router_lookup>:
{
   21a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!routers[i].is_used ||
   21a96:	4c0f      	ldr	r4, [pc, #60]	; (21ad4 <net_if_ipv6_router_lookup+0x40>)
{
   21a98:	4605      	mov	r5, r0
   21a9a:	460e      	mov	r6, r1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   21a9c:	2300      	movs	r3, #0
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   21a9e:	f104 0724 	add.w	r7, r4, #36	; 0x24
		if (!routers[i].is_used ||
   21aa2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		    routers[i].address.family != AF_INET6 ||
   21aa6:	8c20      	ldrh	r0, [r4, #32]
		    routers[i].iface != iface) {
   21aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (!routers[i].is_used ||
   21aaa:	f002 0201 	and.w	r2, r2, #1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   21aae:	b113      	cbz	r3, 21ab6 <net_if_ipv6_router_lookup+0x22>
	return NULL;
   21ab0:	2300      	movs	r3, #0
}
   21ab2:	4618      	mov	r0, r3
   21ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!routers[i].is_used ||
   21ab6:	2a00      	cmp	r2, #0
   21ab8:	d0fb      	beq.n	21ab2 <net_if_ipv6_router_lookup+0x1e>
   21aba:	280a      	cmp	r0, #10
   21abc:	d1f9      	bne.n	21ab2 <net_if_ipv6_router_lookup+0x1e>
		    routers[i].address.family != AF_INET6 ||
   21abe:	42a9      	cmp	r1, r5
   21ac0:	d1f7      	bne.n	21ab2 <net_if_ipv6_router_lookup+0x1e>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   21ac2:	4631      	mov	r1, r6
   21ac4:	4638      	mov	r0, r7
   21ac6:	f7fe fff1 	bl	20aac <net_ipv6_addr_cmp>
   21aca:	2301      	movs	r3, #1
   21acc:	2800      	cmp	r0, #0
   21ace:	d0e8      	beq.n	21aa2 <net_if_ipv6_router_lookup+0xe>
			return &routers[i];
   21ad0:	4b00      	ldr	r3, [pc, #0]	; (21ad4 <net_if_ipv6_router_lookup+0x40>)
   21ad2:	e7ee      	b.n	21ab2 <net_if_ipv6_router_lookup+0x1e>
   21ad4:	200025f4 	.word	0x200025f4

00021ad8 <net_if_ipv6_router_find_default>:
		    !routers[i].is_default ||
   21ad8:	4b0b      	ldr	r3, [pc, #44]	; (21b08 <net_if_ipv6_router_find_default+0x30>)
   21ada:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   21ade:	f3c2 0140 	ubfx	r1, r2, #1, #1
		if (!routers[i].is_used ||
   21ae2:	f012 0201 	ands.w	r2, r2, #1
{
   21ae6:	b530      	push	{r4, r5, lr}
		    routers[i].address.family != AF_INET6) {
   21ae8:	8c1d      	ldrh	r5, [r3, #32]
		if (iface && iface != routers[i].iface) {
   21aea:	6b5c      	ldr	r4, [r3, #52]	; 0x34
		if (!routers[i].is_used ||
   21aec:	d008      	beq.n	21b00 <net_if_ipv6_router_find_default+0x28>
   21aee:	b139      	cbz	r1, 21b00 <net_if_ipv6_router_find_default+0x28>
		    !routers[i].is_default ||
   21af0:	2d0a      	cmp	r5, #10
   21af2:	d105      	bne.n	21b00 <net_if_ipv6_router_find_default+0x28>
		if (iface && iface != routers[i].iface) {
   21af4:	b130      	cbz	r0, 21b04 <net_if_ipv6_router_find_default+0x2c>
		return &routers[i];
   21af6:	4284      	cmp	r4, r0
   21af8:	bf0c      	ite	eq
   21afa:	4618      	moveq	r0, r3
   21afc:	2000      	movne	r0, #0
}
   21afe:	bd30      	pop	{r4, r5, pc}
	return NULL;
   21b00:	2000      	movs	r0, #0
   21b02:	e7fc      	b.n	21afe <net_if_ipv6_router_find_default+0x26>
		return &routers[i];
   21b04:	4618      	mov	r0, r3
   21b06:	e7fa      	b.n	21afe <net_if_ipv6_router_find_default+0x26>
   21b08:	200025f4 	.word	0x200025f4

00021b0c <net_if_ipv6_router_update_lifetime>:
	k_delayed_work_submit(&router->lifetime, K_SECONDS(lifetime));
   21b0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21b10:	4359      	muls	r1, r3
   21b12:	f7fe bfd3 	b.w	20abc <k_delayed_work_submit>
	...

00021b18 <net_if_ipv6_router_add>:
{
   21b18:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (routers[i].is_used) {
   21b1a:	4c23      	ldr	r4, [pc, #140]	; (21ba8 <net_if_ipv6_router_add+0x90>)
   21b1c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
{
   21b20:	4616      	mov	r6, r2
		if (routers[i].is_used) {
   21b22:	07da      	lsls	r2, r3, #31
{
   21b24:	b085      	sub	sp, #20
   21b26:	4605      	mov	r5, r0
		if (routers[i].is_used) {
   21b28:	d43c      	bmi.n	21ba4 <net_if_ipv6_router_add+0x8c>
	router->is_used = true;
   21b2a:	f043 0301 	orr.w	r3, r3, #1
   21b2e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_ipaddr_copy(&router->address.in6_addr, addr);
   21b32:	466f      	mov	r7, sp
	router->address.family = AF_INET6;
   21b34:	230a      	movs	r3, #10
   21b36:	8423      	strh	r3, [r4, #32]
	router->iface = iface;
   21b38:	6360      	str	r0, [r4, #52]	; 0x34
	net_ipaddr_copy(&router->address.in6_addr, addr);
   21b3a:	460b      	mov	r3, r1
   21b3c:	f101 0e10 	add.w	lr, r1, #16
   21b40:	463a      	mov	r2, r7
   21b42:	6818      	ldr	r0, [r3, #0]
   21b44:	6859      	ldr	r1, [r3, #4]
   21b46:	46bc      	mov	ip, r7
   21b48:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   21b4c:	3308      	adds	r3, #8
   21b4e:	4573      	cmp	r3, lr
   21b50:	4667      	mov	r7, ip
   21b52:	d1f6      	bne.n	21b42 <net_if_ipv6_router_add+0x2a>
   21b54:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   21b56:	4f15      	ldr	r7, [pc, #84]	; (21bac <net_if_ipv6_router_add+0x94>)
   21b58:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   21b5c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
	if (lifetime) {
   21b60:	b1c6      	cbz	r6, 21b94 <net_if_ipv6_router_add+0x7c>
		router->is_infinite = false;
   21b62:	f043 0302 	orr.w	r3, r3, #2
   21b66:	f36f 0382 	bfc	r3, #2, #1
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   21b6a:	4911      	ldr	r1, [pc, #68]	; (21bb0 <net_if_ipv6_router_add+0x98>)
		router->is_infinite = false;
   21b6c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   21b70:	f1a7 0024 	sub.w	r0, r7, #36	; 0x24
   21b74:	f00c fd72 	bl	2e65c <k_delayed_work_init>
		k_delayed_work_submit(&router->lifetime, K_SECONDS(lifetime));
   21b78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   21b7c:	4371      	muls	r1, r6
   21b7e:	f1a7 0024 	sub.w	r0, r7, #36	; 0x24
   21b82:	f7fe ff9b 	bl	20abc <k_delayed_work_submit>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);
   21b86:	480b      	ldr	r0, [pc, #44]	; (21bb4 <net_if_ipv6_router_add+0x9c>)
   21b88:	4629      	mov	r1, r5
   21b8a:	f7fe ff9f 	bl	20acc <net_mgmt_event_notify>
		return &routers[i];
   21b8e:	4806      	ldr	r0, [pc, #24]	; (21ba8 <net_if_ipv6_router_add+0x90>)
}
   21b90:	b005      	add	sp, #20
   21b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		router->is_default = false;
   21b94:	f366 0341 	bfi	r3, r6, #1, #1
		router->is_infinite = true;
   21b98:	b2db      	uxtb	r3, r3
   21b9a:	f043 0304 	orr.w	r3, r3, #4
   21b9e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   21ba2:	e7f0      	b.n	21b86 <net_if_ipv6_router_add+0x6e>
	return NULL;
   21ba4:	2000      	movs	r0, #0
   21ba6:	e7f3      	b.n	21b90 <net_if_ipv6_router_add+0x78>
   21ba8:	200025f4 	.word	0x200025f4
   21bac:	20002618 	.word	0x20002618
   21bb0:	000209c5 	.word	0x000209c5
   21bb4:	f0600009 	.word	0xf0600009

00021bb8 <net_if_ipv6_router_rm>:
		if (!routers[i].is_used) {
   21bb8:	4a0c      	ldr	r2, [pc, #48]	; (21bec <net_if_ipv6_router_rm+0x34>)
   21bba:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
   21bbe:	f013 0301 	ands.w	r3, r3, #1
{
   21bc2:	b510      	push	{r4, lr}
   21bc4:	4604      	mov	r4, r0
		if (!routers[i].is_used) {
   21bc6:	d00f      	beq.n	21be8 <net_if_ipv6_router_rm+0x30>
		if (&routers[i] != router) {
   21bc8:	4290      	cmp	r0, r2
   21bca:	d10d      	bne.n	21be8 <net_if_ipv6_router_rm+0x30>
		k_delayed_work_cancel(&routers[i].lifetime);
   21bcc:	f00c fd4f 	bl	2e66e <k_delayed_work_cancel>
		routers[i].is_used = false;
   21bd0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_DEL,
   21bd4:	4806      	ldr	r0, [pc, #24]	; (21bf0 <net_if_ipv6_router_rm+0x38>)
   21bd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
		routers[i].is_used = false;
   21bd8:	f36f 0300 	bfc	r3, #0, #1
   21bdc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_DEL,
   21be0:	f7fe ff74 	bl	20acc <net_mgmt_event_notify>
		return true;
   21be4:	2001      	movs	r0, #1
}
   21be6:	bd10      	pop	{r4, pc}
	return false;
   21be8:	2000      	movs	r0, #0
   21bea:	e7fc      	b.n	21be6 <net_if_ipv6_router_rm+0x2e>
   21bec:	200025f4 	.word	0x200025f4
   21bf0:	f060000a 	.word	0xf060000a

00021bf4 <net_if_ipv6_get_ll>:
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   21bf4:	6843      	ldr	r3, [r0, #4]
{
   21bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!ipv6) {
   21bf8:	b1f3      	cbz	r3, 21c38 <net_if_ipv6_get_ll+0x44>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   21bfa:	2200      	movs	r2, #0
		if (!ipv6->unicast[i].is_used ||
   21bfc:	2448      	movs	r4, #72	; 0x48
   21bfe:	1d1d      	adds	r5, r3, #4
		if (net_is_ipv6_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
   21c00:	f248 06fe 	movw	r6, #33022	; 0x80fe
		if (!ipv6->unicast[i].is_used ||
   21c04:	fb04 3002 	mla	r0, r4, r2, r3
   21c08:	f890 7047 	ldrb.w	r7, [r0, #71]	; 0x47
   21c0c:	07bf      	lsls	r7, r7, #30
   21c0e:	d50e      	bpl.n	21c2e <net_if_ipv6_get_ll+0x3a>
   21c10:	1c4f      	adds	r7, r1, #1
   21c12:	d003      	beq.n	21c1c <net_if_ipv6_get_ll+0x28>
		    (addr_state != NET_ADDR_ANY_STATE &&
   21c14:	f990 0045 	ldrsb.w	r0, [r0, #69]	; 0x45
   21c18:	4288      	cmp	r0, r1
   21c1a:	d108      	bne.n	21c2e <net_if_ipv6_get_ll+0x3a>
   21c1c:	fb04 f002 	mul.w	r0, r4, r2
		     ipv6->unicast[i].addr_state != addr_state) ||
   21c20:	5a1f      	ldrh	r7, [r3, r0]
   21c22:	2f0a      	cmp	r7, #10
   21c24:	d103      	bne.n	21c2e <net_if_ipv6_get_ll+0x3a>
   21c26:	4428      	add	r0, r5
		if (net_is_ipv6_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
   21c28:	8807      	ldrh	r7, [r0, #0]
   21c2a:	42b7      	cmp	r7, r6
   21c2c:	d003      	beq.n	21c36 <net_if_ipv6_get_ll+0x42>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   21c2e:	3201      	adds	r2, #1
   21c30:	2a03      	cmp	r2, #3
   21c32:	d1e7      	bne.n	21c04 <net_if_ipv6_get_ll+0x10>
		return NULL;
   21c34:	2000      	movs	r0, #0
}
   21c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   21c38:	4618      	mov	r0, r3
   21c3a:	e7fc      	b.n	21c36 <net_if_ipv6_get_ll+0x42>

00021c3c <net_if_ipv6_select_src_addr>:

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   21c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   21c3e:	880a      	ldrh	r2, [r1, #0]
   21c40:	f248 03fe 	movw	r3, #33022	; 0x80fe
	u8_t best_match = 0;
   21c44:	2400      	movs	r4, #0
	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   21c46:	429a      	cmp	r2, r3
{
   21c48:	460e      	mov	r6, r1
	u8_t best_match = 0;
   21c4a:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   21c4e:	d030      	beq.n	21cb2 <net_if_ipv6_select_src_addr+0x76>
   21c50:	780b      	ldrb	r3, [r1, #0]

		for (iface = __net_if_start;
   21c52:	4d19      	ldr	r5, [pc, #100]	; (21cb8 <net_if_ipv6_select_src_addr+0x7c>)
	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   21c54:	2bff      	cmp	r3, #255	; 0xff
   21c56:	d113      	bne.n	21c80 <net_if_ipv6_select_src_addr+0x44>
							 &best_match);
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
   21c58:	4e18      	ldr	r6, [pc, #96]	; (21cbc <net_if_ipv6_select_src_addr+0x80>)
		for (iface = __net_if_start;
   21c5a:	b310      	cbz	r0, 21ca2 <net_if_ipv6_select_src_addr+0x66>
				break;
			}
		}

		if (dst_iface) {
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   21c5c:	2101      	movs	r1, #1
   21c5e:	f7ff ffc9 	bl	21bf4 <net_if_ipv6_get_ll>
   21c62:	e015      	b.n	21c90 <net_if_ipv6_select_src_addr+0x54>
			addr = net_if_ipv6_get_best_match(iface, dst,
   21c64:	6868      	ldr	r0, [r5, #4]
   21c66:	f10d 0207 	add.w	r2, sp, #7
   21c6a:	4631      	mov	r1, r6
   21c6c:	f7fe ffdc 	bl	20c28 <net_if_ipv6_get_best_match.isra.16>
		     iface++) {
   21c70:	3520      	adds	r5, #32
   21c72:	2800      	cmp	r0, #0
   21c74:	bf18      	it	ne
   21c76:	4604      	movne	r4, r0
		     !dst_iface && iface != __net_if_end;
   21c78:	42bd      	cmp	r5, r7
   21c7a:	d1f3      	bne.n	21c64 <net_if_ipv6_select_src_addr+0x28>
		}
	}

	if (!src) {
   21c7c:	b9b4      	cbnz	r4, 21cac <net_if_ipv6_select_src_addr+0x70>
   21c7e:	e012      	b.n	21ca6 <net_if_ipv6_select_src_addr+0x6a>
		     !dst_iface && iface != __net_if_end;
   21c80:	4f0e      	ldr	r7, [pc, #56]	; (21cbc <net_if_ipv6_select_src_addr+0x80>)
		for (iface = __net_if_start;
   21c82:	2800      	cmp	r0, #0
   21c84:	d0f8      	beq.n	21c78 <net_if_ipv6_select_src_addr+0x3c>
			src = net_if_ipv6_get_best_match(dst_iface, dst,
   21c86:	f10d 0207 	add.w	r2, sp, #7
   21c8a:	6840      	ldr	r0, [r0, #4]
   21c8c:	f7fe ffcc 	bl	20c28 <net_if_ipv6_get_best_match.isra.16>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   21c90:	4604      	mov	r4, r0
   21c92:	e7f3      	b.n	21c7c <net_if_ipv6_select_src_addr+0x40>
			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   21c94:	2101      	movs	r1, #1
   21c96:	4628      	mov	r0, r5
   21c98:	f7ff ffac 	bl	21bf4 <net_if_ipv6_get_ll>
			if (addr) {
   21c9c:	4604      	mov	r4, r0
   21c9e:	b928      	cbnz	r0, 21cac <net_if_ipv6_select_src_addr+0x70>
		     iface++) {
   21ca0:	3520      	adds	r5, #32
		     !dst_iface && iface != __net_if_end;
   21ca2:	42b5      	cmp	r5, r6
   21ca4:	d1f6      	bne.n	21c94 <net_if_ipv6_select_src_addr+0x58>
		return net_ipv6_unspecified_address();
   21ca6:	f003 f95d 	bl	24f64 <net_ipv6_unspecified_address>
   21caa:	4604      	mov	r4, r0
	}

	return src;
}
   21cac:	4620      	mov	r0, r4
   21cae:	b003      	add	sp, #12
   21cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21cb2:	4d01      	ldr	r5, [pc, #4]	; (21cb8 <net_if_ipv6_select_src_addr+0x7c>)
   21cb4:	e7d0      	b.n	21c58 <net_if_ipv6_select_src_addr+0x1c>
   21cb6:	bf00      	nop
   21cb8:	2000e560 	.word	0x2000e560
   21cbc:	2000e580 	.word	0x2000e580

00021cc0 <net_if_ipv6_select_src_iface>:

struct net_if *net_if_ipv6_select_src_iface(struct in6_addr *dst)
{
   21cc0:	b513      	push	{r0, r1, r4, lr}
	const struct in6_addr *src;
	struct net_if *iface;

	src = net_if_ipv6_select_src_addr(NULL, dst);
   21cc2:	4601      	mov	r1, r0
   21cc4:	2000      	movs	r0, #0
   21cc6:	f7ff ffb9 	bl	21c3c <net_if_ipv6_select_src_addr>
   21cca:	4604      	mov	r4, r0
	if (src == net_ipv6_unspecified_address()) {
   21ccc:	f003 f94a 	bl	24f64 <net_ipv6_unspecified_address>
   21cd0:	4284      	cmp	r4, r0
   21cd2:	d106      	bne.n	21ce2 <net_if_ipv6_select_src_iface+0x22>
	if (__net_if_start == __net_if_end) {
   21cd4:	4807      	ldr	r0, [pc, #28]	; (21cf4 <net_if_ipv6_select_src_iface+0x34>)
	return iface ? iface : __net_if_start;
   21cd6:	4b08      	ldr	r3, [pc, #32]	; (21cf8 <net_if_ipv6_select_src_iface+0x38>)
   21cd8:	4298      	cmp	r0, r3
   21cda:	bf08      	it	eq
   21cdc:	2000      	moveq	r0, #0
	if (!net_if_ipv6_addr_lookup(src, &iface)) {
		return net_if_get_default();
	}

	return iface;
}
   21cde:	b002      	add	sp, #8
   21ce0:	bd10      	pop	{r4, pc}
	if (!net_if_ipv6_addr_lookup(src, &iface)) {
   21ce2:	a901      	add	r1, sp, #4
   21ce4:	4620      	mov	r0, r4
   21ce6:	f7ff f85d 	bl	20da4 <net_if_ipv6_addr_lookup>
   21cea:	2800      	cmp	r0, #0
   21cec:	d0f2      	beq.n	21cd4 <net_if_ipv6_select_src_iface+0x14>
	return iface;
   21cee:	9801      	ldr	r0, [sp, #4]
   21cf0:	e7f5      	b.n	21cde <net_if_ipv6_select_src_iface+0x1e>
   21cf2:	bf00      	nop
   21cf4:	2000e560 	.word	0x2000e560
   21cf8:	2000e580 	.word	0x2000e580

00021cfc <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if_ipv6 *ipv6)
{
   21cfc:	b538      	push	{r3, r4, r5, lr}
	u32_t min_reachable, max_reachable;

	min_reachable = (MIN_RANDOM_NUMER * ipv6->base_reachable_time)
   21cfe:	f8d0 41c0 	ldr.w	r4, [r0, #448]	; 0x1c0

	NET_DBG("min_reachable:%u max_reachable:%u", min_reachable,
		max_reachable);

	return min_reachable +
	       sys_rand32_get() % (max_reachable - min_reachable);
   21d02:	f7e4 f847 	bl	5d94 <sys_rand32_get>
	min_reachable = (MIN_RANDOM_NUMER * ipv6->base_reachable_time)
   21d06:	0865      	lsrs	r5, r4, #1
	max_reachable = (MAX_RANDOM_NUMER * ipv6->base_reachable_time)
   21d08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
	       sys_rand32_get() % (max_reachable - min_reachable);
   21d0c:	ebc5 0454 	rsb	r4, r5, r4, lsr #1
   21d10:	fbb0 f3f4 	udiv	r3, r0, r4
   21d14:	fb03 0014 	mls	r0, r3, r4, r0
}
   21d18:	4428      	add	r0, r5
   21d1a:	bd38      	pop	{r3, r4, r5, pc}

00021d1c <net_if_recv_data>:
   21d1c:	6803      	ldr	r3, [r0, #0]
		net_pkt_unref(pkt);

		return verdict;
	}

	return net_if_l2(iface)->recv(iface, pkt);
   21d1e:	685b      	ldr	r3, [r3, #4]
   21d20:	681b      	ldr	r3, [r3, #0]
   21d22:	4718      	bx	r3

00021d24 <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   21d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   21d26:	4b08      	ldr	r3, [pc, #32]	; (21d48 <net_if_call_link_cb+0x24>)
   21d28:	681b      	ldr	r3, [r3, #0]
{
   21d2a:	4605      	mov	r5, r0
   21d2c:	460e      	mov	r6, r1
   21d2e:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   21d30:	b14b      	cbz	r3, 21d46 <net_if_call_link_cb+0x22>
	return node->next;
   21d32:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
   21d34:	685b      	ldr	r3, [r3, #4]
   21d36:	463a      	mov	r2, r7
   21d38:	4631      	mov	r1, r6
   21d3a:	4628      	mov	r0, r5
   21d3c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   21d3e:	b114      	cbz	r4, 21d46 <net_if_call_link_cb+0x22>
   21d40:	4623      	mov	r3, r4
   21d42:	6824      	ldr	r4, [r4, #0]
   21d44:	e7f6      	b.n	21d34 <net_if_call_link_cb+0x10>
	}
}
   21d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d48:	200025c4 	.word	0x200025c4

00021d4c <process_tx_packet>:
{
   21d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!pkt) {
   21d50:	f1b0 0804 	subs.w	r8, r0, #4
{
   21d54:	4604      	mov	r4, r0
	if (!pkt) {
   21d56:	d034      	beq.n	21dc2 <process_tx_packet+0x76>
	net_if_tx(net_pkt_iface(pkt), pkt);
   21d58:	69c5      	ldr	r5, [r0, #28]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   21d5a:	6828      	ldr	r0, [r5, #0]
   21d5c:	f850 3b0c 	ldr.w	r3, [r0], #12
	if (atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   21d60:	2100      	movs	r1, #0
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   21d62:	685a      	ldr	r2, [r3, #4]
	context_token = net_pkt_token(pkt);
   21d64:	e9d4 7905 	ldrd	r7, r9, [r4, #20]
	if (atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   21d68:	f7fe fe33 	bl	209d2 <atomic_test_bit>
   21d6c:	b330      	cbz	r0, 21dbc <process_tx_packet+0x70>
	pkt->sent_or_eof = sent;
   21d6e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
	pkt->pkt_queued = send;
   21d72:	f043 0301 	orr.w	r3, r3, #1
   21d76:	f36f 0341 	bfc	r3, #1, #1
   21d7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		status = api->send(iface, pkt);
   21d7e:	6853      	ldr	r3, [r2, #4]
   21d80:	4641      	mov	r1, r8
   21d82:	4628      	mov	r0, r5
   21d84:	4798      	blx	r3
	if (status < 0) {
   21d86:	1e06      	subs	r6, r0, #0
   21d88:	da08      	bge.n	21d9c <process_tx_packet+0x50>
	pkt->sent_or_eof = sent;
   21d8a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   21d8e:	f36f 0300 	bfc	r3, #0, #1
   21d92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		net_pkt_unref(pkt);
   21d96:	4640      	mov	r0, r8
   21d98:	f000 fc31 	bl	225fe <net_pkt_unref>
	if (context) {
   21d9c:	b127      	cbz	r7, 21da8 <process_tx_packet+0x5c>
		net_context_send_cb(context, context_token, status);
   21d9e:	4632      	mov	r2, r6
   21da0:	4649      	mov	r1, r9
   21da2:	4638      	mov	r0, r7
   21da4:	f7fe fe48 	bl	20a38 <net_context_send_cb>
	if (dst->addr) {
   21da8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21daa:	b153      	cbz	r3, 21dc2 <process_tx_packet+0x76>
		net_if_call_link_cb(iface, dst, status);
   21dac:	4632      	mov	r2, r6
   21dae:	f104 0130 	add.w	r1, r4, #48	; 0x30
   21db2:	4628      	mov	r0, r5
}
   21db4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		net_if_call_link_cb(iface, dst, status);
   21db8:	f7ff bfb4 	b.w	21d24 <net_if_call_link_cb>
		status = -ENETDOWN;
   21dbc:	f06f 063d 	mvn.w	r6, #61	; 0x3d
   21dc0:	e7e3      	b.n	21d8a <process_tx_packet+0x3e>
}
   21dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00021dc6 <net_if_send_data>:
{
   21dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21dca:	4606      	mov	r6, r0
	if (!atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   21dcc:	6800      	ldr	r0, [r0, #0]
{
   21dce:	460c      	mov	r4, r1
	void *token = net_pkt_token(pkt);
   21dd0:	e9d1 7806 	ldrd	r7, r8, [r1, #24]
	if (!atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   21dd4:	300c      	adds	r0, #12
   21dd6:	2100      	movs	r1, #0
   21dd8:	f7fe fdfb 	bl	209d2 <atomic_test_bit>
   21ddc:	2800      	cmp	r0, #0
   21dde:	d03d      	beq.n	21e5c <net_if_send_data+0x96>
	if (!atomic_test_bit(iface->if_dev->flags, NET_IF_POINTOPOINT) &&
   21de0:	6830      	ldr	r0, [r6, #0]
   21de2:	2101      	movs	r1, #1
   21de4:	300c      	adds	r0, #12
   21de6:	f7fe fdf4 	bl	209d2 <atomic_test_bit>
   21dea:	b940      	cbnz	r0, 21dfe <net_if_send_data+0x38>
   21dec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21dee:	b933      	cbnz	r3, 21dfe <net_if_send_data+0x38>
	return net_if_get_link_addr(pkt->iface);
   21df0:	6a23      	ldr	r3, [r4, #32]
   21df2:	681b      	ldr	r3, [r3, #0]
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   21df4:	691a      	ldr	r2, [r3, #16]
   21df6:	62e2      	str	r2, [r4, #44]	; 0x2c
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   21df8:	7d1b      	ldrb	r3, [r3, #20]
   21dfa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return pkt->family;
   21dfe:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_family(pkt) == AF_INET6) {
   21e02:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   21e06:	2b0a      	cmp	r3, #10
   21e08:	d108      	bne.n	21e1c <net_if_send_data+0x56>
		pkt = net_ipv6_prepare_for_send(pkt);
   21e0a:	4620      	mov	r0, r4
   21e0c:	f004 fef6 	bl	26bfc <net_ipv6_prepare_for_send>
		if (!pkt) {
   21e10:	4601      	mov	r1, r0
   21e12:	b920      	cbnz	r0, 21e1e <net_if_send_data+0x58>
			verdict = NET_CONTINUE;
   21e14:	2301      	movs	r3, #1
}
   21e16:	4618      	mov	r0, r3
   21e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21e1c:	4621      	mov	r1, r4
   21e1e:	6833      	ldr	r3, [r6, #0]
	verdict = net_if_l2(iface)->send(iface, pkt);
   21e20:	685b      	ldr	r3, [r3, #4]
   21e22:	4630      	mov	r0, r6
   21e24:	685b      	ldr	r3, [r3, #4]
   21e26:	4798      	blx	r3
   21e28:	4603      	mov	r3, r0
	if (context && verdict == NET_DROP) {
   21e2a:	b197      	cbz	r7, 21e52 <net_if_send_data+0x8c>
   21e2c:	2802      	cmp	r0, #2
   21e2e:	d1f2      	bne.n	21e16 <net_if_send_data+0x50>
	int status = -EIO;
   21e30:	f06f 0504 	mvn.w	r5, #4
		net_context_send_cb(context, token, status);
   21e34:	462a      	mov	r2, r5
   21e36:	4641      	mov	r1, r8
   21e38:	4638      	mov	r0, r7
   21e3a:	f7fe fdfd 	bl	20a38 <net_context_send_cb>
	if (verdict == NET_DROP && dst->addr) {
   21e3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   21e40:	b12b      	cbz	r3, 21e4e <net_if_send_data+0x88>
		net_if_call_link_cb(iface, dst, status);
   21e42:	462a      	mov	r2, r5
   21e44:	f104 0134 	add.w	r1, r4, #52	; 0x34
   21e48:	4630      	mov	r0, r6
   21e4a:	f7ff ff6b 	bl	21d24 <net_if_call_link_cb>
   21e4e:	2302      	movs	r3, #2
	return verdict;
   21e50:	e7e1      	b.n	21e16 <net_if_send_data+0x50>
	if (verdict == NET_DROP && dst->addr) {
   21e52:	2802      	cmp	r0, #2
   21e54:	d1df      	bne.n	21e16 <net_if_send_data+0x50>
   21e56:	f06f 0504 	mvn.w	r5, #4
   21e5a:	e7f0      	b.n	21e3e <net_if_send_data+0x78>
		status = -ENETDOWN;
   21e5c:	f06f 053d 	mvn.w	r5, #61	; 0x3d
	if (context && verdict == NET_DROP) {
   21e60:	2f00      	cmp	r7, #0
   21e62:	d1e7      	bne.n	21e34 <net_if_send_data+0x6e>
   21e64:	e7eb      	b.n	21e3e <net_if_send_data+0x78>

00021e66 <net_if_need_calc_tx_checksum>:
   21e66:	2001      	movs	r0, #1
   21e68:	4770      	bx	lr

00021e6a <net_if_need_calc_rx_checksum>:
}

bool net_if_need_calc_rx_checksum(struct net_if *iface)
{
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
}
   21e6a:	2001      	movs	r0, #1
   21e6c:	4770      	bx	lr
	...

00021e70 <net_if_get_by_index>:

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   21e70:	4b03      	ldr	r3, [pc, #12]	; (21e80 <net_if_get_by_index+0x10>)
   21e72:	eb03 1040 	add.w	r0, r3, r0, lsl #5
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   21e76:	4b03      	ldr	r3, [pc, #12]	; (21e84 <net_if_get_by_index+0x14>)
   21e78:	4298      	cmp	r0, r3
   21e7a:	bf28      	it	cs
   21e7c:	2000      	movcs	r0, #0
   21e7e:	4770      	bx	lr
   21e80:	2000e560 	.word	0x2000e560
   21e84:	2000e580 	.word	0x2000e580

00021e88 <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
   21e88:	b538      	push	{r3, r4, r5, lr}
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);
   21e8a:	4d10      	ldr	r5, [pc, #64]	; (21ecc <net_if_get_by_iface+0x44>)
   21e8c:	42a8      	cmp	r0, r5
{
   21e8e:	4604      	mov	r4, r0
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);
   21e90:	d302      	bcc.n	21e98 <net_if_get_by_iface+0x10>
   21e92:	4b0f      	ldr	r3, [pc, #60]	; (21ed0 <net_if_get_by_iface+0x48>)
   21e94:	4298      	cmp	r0, r3
   21e96:	d314      	bcc.n	21ec2 <net_if_get_by_iface+0x3a>
   21e98:	4b0e      	ldr	r3, [pc, #56]	; (21ed4 <net_if_get_by_iface+0x4c>)
   21e9a:	681b      	ldr	r3, [r3, #0]
   21e9c:	075b      	lsls	r3, r3, #29
   21e9e:	d010      	beq.n	21ec2 <net_if_get_by_iface+0x3a>
   21ea0:	2301      	movs	r3, #1
   21ea2:	f04f 0200 	mov.w	r2, #0
   21ea6:	f363 0202 	bfi	r2, r3, #0, #3
   21eaa:	490b      	ldr	r1, [pc, #44]	; (21ed8 <net_if_get_by_iface+0x50>)
   21eac:	4b0b      	ldr	r3, [pc, #44]	; (21edc <net_if_get_by_iface+0x54>)
   21eae:	480c      	ldr	r0, [pc, #48]	; (21ee0 <net_if_get_by_iface+0x58>)
   21eb0:	1a5b      	subs	r3, r3, r1
   21eb2:	f36f 02c5 	bfc	r2, #3, #3
   21eb6:	08db      	lsrs	r3, r3, #3
   21eb8:	f363 128f 	bfi	r2, r3, #6, #10
   21ebc:	4909      	ldr	r1, [pc, #36]	; (21ee4 <net_if_get_by_iface+0x5c>)
   21ebe:	f7e0 f915 	bl	20ec <log_1>

	return iface - __net_if_start;
   21ec2:	1b60      	subs	r0, r4, r5
}
   21ec4:	f3c0 1047 	ubfx	r0, r0, #5, #8
   21ec8:	bd38      	pop	{r3, r4, r5, pc}
   21eca:	bf00      	nop
   21ecc:	2000e560 	.word	0x2000e560
   21ed0:	2000e580 	.word	0x2000e580
   21ed4:	2000e280 	.word	0x2000e280
   21ed8:	0002ef38 	.word	0x0002ef38
   21edc:	0002f040 	.word	0x0002f040
   21ee0:	000347bb 	.word	0x000347bb
   21ee4:	00034775 	.word	0x00034775

00021ee8 <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
   21ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21eec:	4e08      	ldr	r6, [pc, #32]	; (21f10 <net_if_foreach+0x28>)
   21eee:	4c09      	ldr	r4, [pc, #36]	; (21f14 <net_if_foreach+0x2c>)
   21ef0:	1ba4      	subs	r4, r4, r6
   21ef2:	f024 041f 	bic.w	r4, r4, #31
   21ef6:	4607      	mov	r7, r0
   21ef8:	4688      	mov	r8, r1
   21efa:	3420      	adds	r4, #32
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   21efc:	2500      	movs	r5, #0
   21efe:	19a8      	adds	r0, r5, r6
   21f00:	3520      	adds	r5, #32
   21f02:	42a5      	cmp	r5, r4
   21f04:	d101      	bne.n	21f0a <net_if_foreach+0x22>
		cb(iface, user_data);
	}
}
   21f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cb(iface, user_data);
   21f0a:	4641      	mov	r1, r8
   21f0c:	47b8      	blx	r7
   21f0e:	e7f6      	b.n	21efe <net_if_foreach+0x16>
   21f10:	2000e560 	.word	0x2000e560
   21f14:	2000e580 	.word	0x2000e580

00021f18 <net_if_up>:

int net_if_up(struct net_if *iface)
{
   21f18:	b510      	push	{r4, lr}
   21f1a:	4604      	mov	r4, r0
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   21f1c:	6800      	ldr	r0, [r0, #0]
   21f1e:	2100      	movs	r1, #0
   21f20:	300c      	adds	r0, #12
   21f22:	f7fe fd56 	bl	209d2 <atomic_test_bit>
   21f26:	b9d8      	cbnz	r0, 21f60 <net_if_up+0x48>
   21f28:	6823      	ldr	r3, [r4, #0]
		goto done;
	}
#endif

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface)->enable) {
   21f2a:	685b      	ldr	r3, [r3, #4]
   21f2c:	68db      	ldr	r3, [r3, #12]
   21f2e:	b9cb      	cbnz	r3, 21f64 <net_if_up+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21f30:	6823      	ldr	r3, [r4, #0]
   21f32:	f3bf 8f5b 	dmb	ish
   21f36:	330c      	adds	r3, #12
   21f38:	e853 2f00 	ldrex	r2, [r3]
   21f3c:	f042 0201 	orr.w	r2, r2, #1
   21f40:	e843 2100 	strex	r1, r2, [r3]
   21f44:	2900      	cmp	r1, #0
   21f46:	d1f7      	bne.n	21f38 <net_if_up+0x20>
   21f48:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->if_dev->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   21f4c:	4620      	mov	r0, r4
   21f4e:	f7ff f929 	bl	211a4 <net_if_start_dad>
			 &iface->config.ip.ipv6->mcast[0].address.in6_addr);
#endif /* CONFIG_NET_IPV6_DAD */

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   21f52:	4620      	mov	r0, r4
   21f54:	f7fe fef8 	bl	20d48 <net_if_start_rs>

#if defined(CONFIG_NET_IPV4_AUTO)
	net_ipv4_autoconf_start(iface);
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);
   21f58:	4621      	mov	r1, r4
   21f5a:	4805      	ldr	r0, [pc, #20]	; (21f70 <net_if_up+0x58>)
   21f5c:	f7fe fdb6 	bl	20acc <net_mgmt_event_notify>
		return 0;
   21f60:	2000      	movs	r0, #0
   21f62:	e004      	b.n	21f6e <net_if_up+0x56>
	status = net_if_l2(iface)->enable(iface, true);
   21f64:	2101      	movs	r1, #1
   21f66:	4620      	mov	r0, r4
   21f68:	4798      	blx	r3
	if (status < 0) {
   21f6a:	2800      	cmp	r0, #0
   21f6c:	dae0      	bge.n	21f30 <net_if_up+0x18>

	return 0;
}
   21f6e:	bd10      	pop	{r4, pc}
   21f70:	d0010002 	.word	0xd0010002

00021f74 <net_if_carrier_down>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21f74:	6803      	ldr	r3, [r0, #0]
   21f76:	f3bf 8f5b 	dmb	ish

void net_if_carrier_down(struct net_if *iface)
{
   21f7a:	4601      	mov	r1, r0
   21f7c:	330c      	adds	r3, #12
   21f7e:	e853 2f00 	ldrex	r2, [r3]
   21f82:	f022 0201 	bic.w	r2, r2, #1
   21f86:	e843 2000 	strex	r0, r2, [r3]
   21f8a:	2800      	cmp	r0, #0
   21f8c:	d1f7      	bne.n	21f7e <net_if_carrier_down+0xa>
   21f8e:	f3bf 8f5b 	dmb	ish

#if defined(CONFIG_NET_IPV4_AUTO)
	net_ipv4_autoconf_reset(iface);
#endif

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);
   21f92:	4801      	ldr	r0, [pc, #4]	; (21f98 <net_if_carrier_down+0x24>)
   21f94:	f7fe bd9a 	b.w	20acc <net_mgmt_event_notify>
   21f98:	d0010001 	.word	0xd0010001

00021f9c <net_if_down>:
}

int net_if_down(struct net_if *iface)
{
   21f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   21fa0:	6846      	ldr	r6, [r0, #4]
{
   21fa2:	4604      	mov	r4, r0
	if (!ipv6) {
   21fa4:	b19e      	cbz	r6, 21fce <net_if_down+0x32>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   21fa6:	2500      	movs	r5, #0
		if (!ipv6->mcast[i].is_used ||
   21fa8:	2718      	movs	r7, #24
		net_ipv6_mld_leave(iface, &ipv6->mcast[i].address.in6_addr);
   21faa:	f106 08dc 	add.w	r8, r6, #220	; 0xdc
		if (!ipv6->mcast[i].is_used ||
   21fae:	fb07 f105 	mul.w	r1, r7, r5
   21fb2:	1873      	adds	r3, r6, r1
   21fb4:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
   21fb8:	07da      	lsls	r2, r3, #31
   21fba:	d505      	bpl.n	21fc8 <net_if_down+0x2c>
   21fbc:	079b      	lsls	r3, r3, #30
   21fbe:	d503      	bpl.n	21fc8 <net_if_down+0x2c>
		net_ipv6_mld_leave(iface, &ipv6->mcast[i].address.in6_addr);
   21fc0:	4441      	add	r1, r8
   21fc2:	4620      	mov	r0, r4
   21fc4:	f005 fab8 	bl	27538 <net_ipv6_mld_leave>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   21fc8:	3501      	adds	r5, #1
   21fca:	2d05      	cmp	r5, #5
   21fcc:	d1ef      	bne.n	21fae <net_if_down+0x12>
   21fce:	6823      	ldr	r3, [r4, #0]
		goto done;
	}
#endif

	/* If the L2 does not support enable just clear the flag */
	if (!net_if_l2(iface)->enable) {
   21fd0:	685b      	ldr	r3, [r3, #4]
   21fd2:	68db      	ldr	r3, [r3, #12]
   21fd4:	b9a3      	cbnz	r3, 22000 <net_if_down+0x64>
   21fd6:	6823      	ldr	r3, [r4, #0]
   21fd8:	f3bf 8f5b 	dmb	ish
   21fdc:	330c      	adds	r3, #12
   21fde:	e853 2f00 	ldrex	r2, [r3]
   21fe2:	f022 0201 	bic.w	r2, r2, #1
   21fe6:	e843 2100 	strex	r1, r2, [r3]
   21fea:	2900      	cmp	r1, #0
   21fec:	d1f7      	bne.n	21fde <net_if_down+0x42>
   21fee:	f3bf 8f5b 	dmb	ish
	}

done:
	atomic_clear_bit(iface->if_dev->flags, NET_IF_UP);

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);
   21ff2:	4806      	ldr	r0, [pc, #24]	; (2200c <net_if_down+0x70>)
   21ff4:	4621      	mov	r1, r4
   21ff6:	f7fe fd69 	bl	20acc <net_mgmt_event_notify>

	return 0;
   21ffa:	2000      	movs	r0, #0
}
   21ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	status = net_if_l2(iface)->enable(iface, false);
   22000:	2100      	movs	r1, #0
   22002:	4620      	mov	r0, r4
   22004:	4798      	blx	r3
	if (status < 0) {
   22006:	2800      	cmp	r0, #0
   22008:	dae5      	bge.n	21fd6 <net_if_down+0x3a>
   2200a:	e7f7      	b.n	21ffc <net_if_down+0x60>
   2200c:	d0010001 	.word	0xd0010001

00022010 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP */

void net_if_init(void)
{
   22010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22014:	b085      	sub	sp, #20
	struct net_if *iface;
	int i, if_count;

	NET_DBG("");

	net_tc_tx_init();
   22016:	f000 ff19 	bl	22e4c <net_tc_tx_init>

#if defined(CONFIG_NET_IPV6)
	k_delayed_work_init(&address_lifetime_timer, address_lifetime_timeout);
   2201a:	493d      	ldr	r1, [pc, #244]	; (22110 <net_if_init+0x100>)
   2201c:	483d      	ldr	r0, [pc, #244]	; (22114 <net_if_init+0x104>)
   2201e:	4c3e      	ldr	r4, [pc, #248]	; (22118 <net_if_init+0x108>)
   22020:	4f3e      	ldr	r7, [pc, #248]	; (2211c <net_if_init+0x10c>)
	NET_ASSERT(api && api->init);
   22022:	f8df b10c 	ldr.w	fp, [pc, #268]	; 22130 <net_if_init+0x120>
	k_delayed_work_init(&address_lifetime_timer, address_lifetime_timeout);
   22026:	f00c fb19 	bl	2e65c <k_delayed_work_init>
	k_delayed_work_init(&prefix_lifetime_timer, prefix_lifetime_timeout);
   2202a:	493d      	ldr	r1, [pc, #244]	; (22120 <net_if_init+0x110>)
   2202c:	483d      	ldr	r0, [pc, #244]	; (22124 <net_if_init+0x114>)
   2202e:	f00c fb15 	bl	2e65c <k_delayed_work_init>
	NET_ASSERT(api && api->init);
   22032:	4b3d      	ldr	r3, [pc, #244]	; (22128 <net_if_init+0x118>)
   22034:	1ae4      	subs	r4, r4, r3
   22036:	4b3d      	ldr	r3, [pc, #244]	; (2212c <net_if_init+0x11c>)
   22038:	9302      	str	r3, [sp, #8]
   2203a:	1bda      	subs	r2, r3, r7
   2203c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   22040:	9201      	str	r2, [sp, #4]
#endif

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   22042:	2500      	movs	r5, #0
   22044:	46ba      	mov	sl, r7
   22046:	9a01      	ldr	r2, [sp, #4]
   22048:	4295      	cmp	r5, r2
   2204a:	eb05 0307 	add.w	r3, r5, r7
   2204e:	d116      	bne.n	2207e <net_if_init+0x6e>
	     iface++, if_count++) {
		init_iface(iface);
	}

	if (iface == __net_if_start) {
   22050:	9b02      	ldr	r3, [sp, #8]
   22052:	4553      	cmp	r3, sl
   22054:	d143      	bne.n	220de <net_if_init+0xce>
		NET_ERR("There is no network interface to work with!");
   22056:	4b36      	ldr	r3, [pc, #216]	; (22130 <net_if_init+0x120>)
   22058:	681b      	ldr	r3, [r3, #0]
   2205a:	075b      	lsls	r3, r3, #29
   2205c:	d054      	beq.n	22108 <net_if_init+0xf8>
   2205e:	2301      	movs	r3, #1
   22060:	f04f 0200 	mov.w	r2, #0
   22064:	f363 0202 	bfi	r2, r3, #0, #3
   22068:	f36f 02c5 	bfc	r2, #3, #3
   2206c:	4931      	ldr	r1, [pc, #196]	; (22134 <net_if_init+0x124>)
   2206e:	4832      	ldr	r0, [pc, #200]	; (22138 <net_if_init+0x128>)
   22070:	f364 128f 	bfi	r2, r4, #6, #10
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   22074:	b005      	add	sp, #20
   22076:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		NET_ERR("There is no network interface to work with!");
   2207a:	f7e0 b837 	b.w	20ec <log_1>
	return iface->if_dev->dev;
   2207e:	f85a 2005 	ldr.w	r2, [sl, r5]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   22082:	6812      	ldr	r2, [r2, #0]
   22084:	6856      	ldr	r6, [r2, #4]
	NET_ASSERT(api && api->init);
   22086:	b10e      	cbz	r6, 2208c <net_if_init+0x7c>
   22088:	6832      	ldr	r2, [r6, #0]
   2208a:	b98a      	cbnz	r2, 220b0 <net_if_init+0xa0>
   2208c:	f8db 2000 	ldr.w	r2, [fp]
   22090:	0751      	lsls	r1, r2, #29
   22092:	d00d      	beq.n	220b0 <net_if_init+0xa0>
   22094:	2201      	movs	r2, #1
   22096:	f362 0802 	bfi	r8, r2, #0, #3
   2209a:	f36f 08c5 	bfc	r8, #3, #3
   2209e:	f364 188f 	bfi	r8, r4, #6, #10
   220a2:	4642      	mov	r2, r8
   220a4:	4925      	ldr	r1, [pc, #148]	; (2213c <net_if_init+0x12c>)
   220a6:	4826      	ldr	r0, [pc, #152]	; (22140 <net_if_init+0x130>)
   220a8:	9303      	str	r3, [sp, #12]
   220aa:	f7e0 f81f 	bl	20ec <log_1>
   220ae:	9b03      	ldr	r3, [sp, #12]
	api->init(iface);
   220b0:	6832      	ldr	r2, [r6, #0]
   220b2:	4618      	mov	r0, r3
   220b4:	4790      	blx	r2
		NET_ASSERT(api->send);
   220b6:	6873      	ldr	r3, [r6, #4]
   220b8:	b97b      	cbnz	r3, 220da <net_if_init+0xca>
   220ba:	f8db 2000 	ldr.w	r2, [fp]
   220be:	0752      	lsls	r2, r2, #29
   220c0:	d00b      	beq.n	220da <net_if_init+0xca>
   220c2:	2201      	movs	r2, #1
   220c4:	f362 0902 	bfi	r9, r2, #0, #3
   220c8:	f363 09c5 	bfi	r9, r3, #3, #3
   220cc:	f364 198f 	bfi	r9, r4, #6, #10
   220d0:	464a      	mov	r2, r9
   220d2:	491a      	ldr	r1, [pc, #104]	; (2213c <net_if_init+0x12c>)
   220d4:	481b      	ldr	r0, [pc, #108]	; (22144 <net_if_init+0x134>)
   220d6:	f7e0 f809 	bl	20ec <log_1>
   220da:	3520      	adds	r5, #32
   220dc:	e7b3      	b.n	22046 <net_if_init+0x36>
		ipv6_addresses[i].ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   220de:	4c1a      	ldr	r4, [pc, #104]	; (22148 <net_if_init+0x138>)
   220e0:	2340      	movs	r3, #64	; 0x40
   220e2:	f884 31cc 	strb.w	r3, [r4, #460]	; 0x1cc
		ipv6_addresses[i].ipv6.base_reachable_time = REACHABLE_TIME;
   220e6:	f247 5330 	movw	r3, #30000	; 0x7530
   220ea:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
   220ee:	4620      	mov	r0, r4
   220f0:	f7ff fe04 	bl	21cfc <net_if_ipv6_calc_reachable_time>
		k_delayed_work_init(&ipv6_addresses[i].ipv6.rs_timer,
   220f4:	4915      	ldr	r1, [pc, #84]	; (2214c <net_if_init+0x13c>)
   220f6:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   220fa:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
}
   220fe:	b005      	add	sp, #20
   22100:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		k_delayed_work_init(&ipv6_addresses[i].ipv6.rs_timer,
   22104:	f00c baaa 	b.w	2e65c <k_delayed_work_init>
}
   22108:	b005      	add	sp, #20
   2210a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2210e:	bf00      	nop
   22110:	00020ad5 	.word	0x00020ad5
   22114:	200023d0 	.word	0x200023d0
   22118:	0002f040 	.word	0x0002f040
   2211c:	2000e560 	.word	0x2000e560
   22120:	0002159d 	.word	0x0002159d
   22124:	200025d4 	.word	0x200025d4
   22128:	0002ef38 	.word	0x0002ef38
   2212c:	2000e580 	.word	0x2000e580
   22130:	2000e280 	.word	0x2000e280
   22134:	00034789 	.word	0x00034789
   22138:	0003484b 	.word	0x0003484b
   2213c:	00034702 	.word	0x00034702
   22140:	00034802 	.word	0x00034802
   22144:	0003482a 	.word	0x0003482a
   22148:	200023f0 	.word	0x200023f0
   2214c:	00020d69 	.word	0x00020d69

00022150 <net_if_post_init>:

void net_if_post_init(void)
{
   22150:	b570      	push	{r4, r5, r6, lr}
   22152:	4e07      	ldr	r6, [pc, #28]	; (22170 <net_if_post_init+0x20>)
   22154:	4c07      	ldr	r4, [pc, #28]	; (22174 <net_if_post_init+0x24>)
   22156:	1ba4      	subs	r4, r4, r6
   22158:	f024 041f 	bic.w	r4, r4, #31
   2215c:	3420      	adds	r4, #32
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   2215e:	2500      	movs	r5, #0
   22160:	19a8      	adds	r0, r5, r6
   22162:	3520      	adds	r5, #32
   22164:	42a5      	cmp	r5, r4
   22166:	d100      	bne.n	2216a <net_if_post_init+0x1a>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   22168:	bd70      	pop	{r4, r5, r6, pc}
		net_if_up(iface);
   2216a:	f7ff fed5 	bl	21f18 <net_if_up>
   2216e:	e7f7      	b.n	22160 <net_if_post_init+0x10>
   22170:	2000e560 	.word	0x2000e560
   22174:	2000e580 	.word	0x2000e580

00022178 <net_context_get_family>:
{
   22178:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   2217a:	4604      	mov	r4, r0
   2217c:	b9a0      	cbnz	r0, 221a8 <net_context_get_family+0x30>
   2217e:	4b0e      	ldr	r3, [pc, #56]	; (221b8 <net_context_get_family+0x40>)
   22180:	681b      	ldr	r3, [r3, #0]
   22182:	075b      	lsls	r3, r3, #29
   22184:	d010      	beq.n	221a8 <net_context_get_family+0x30>
   22186:	2301      	movs	r3, #1
   22188:	f04f 0200 	mov.w	r2, #0
   2218c:	f363 0202 	bfi	r2, r3, #0, #3
   22190:	490a      	ldr	r1, [pc, #40]	; (221bc <net_context_get_family+0x44>)
   22192:	4b0b      	ldr	r3, [pc, #44]	; (221c0 <net_context_get_family+0x48>)
   22194:	1a5b      	subs	r3, r3, r1
   22196:	f360 02c5 	bfi	r2, r0, #3, #3
   2219a:	08db      	lsrs	r3, r3, #3
   2219c:	f363 128f 	bfi	r2, r3, #6, #10
   221a0:	4908      	ldr	r1, [pc, #32]	; (221c4 <net_context_get_family+0x4c>)
   221a2:	4809      	ldr	r0, [pc, #36]	; (221c8 <net_context_get_family+0x50>)
   221a4:	f7df ffa2 	bl	20ec <log_1>
	if (context->flags & NET_CONTEXT_FAMILY) {
   221a8:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
	return AF_INET;
   221ac:	f013 0f10 	tst.w	r3, #16
}
   221b0:	bf14      	ite	ne
   221b2:	200a      	movne	r0, #10
   221b4:	2002      	moveq	r0, #2
   221b6:	bd10      	pop	{r4, pc}
   221b8:	2000e29c 	.word	0x2000e29c
   221bc:	0002ef38 	.word	0x0002ef38
   221c0:	0002f078 	.word	0x0002f078
   221c4:	00034965 	.word	0x00034965
   221c8:	00030684 	.word	0x00030684

000221cc <net_context_get_iface>:
{
   221cc:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   221ce:	4604      	mov	r4, r0
   221d0:	b9a0      	cbnz	r0, 221fc <net_context_get_iface+0x30>
   221d2:	4b0d      	ldr	r3, [pc, #52]	; (22208 <net_context_get_iface+0x3c>)
   221d4:	681b      	ldr	r3, [r3, #0]
   221d6:	075b      	lsls	r3, r3, #29
   221d8:	d010      	beq.n	221fc <net_context_get_iface+0x30>
   221da:	2301      	movs	r3, #1
   221dc:	f04f 0200 	mov.w	r2, #0
   221e0:	f363 0202 	bfi	r2, r3, #0, #3
   221e4:	4909      	ldr	r1, [pc, #36]	; (2220c <net_context_get_iface+0x40>)
   221e6:	4b0a      	ldr	r3, [pc, #40]	; (22210 <net_context_get_iface+0x44>)
   221e8:	1a5b      	subs	r3, r3, r1
   221ea:	f360 02c5 	bfi	r2, r0, #3, #3
   221ee:	08db      	lsrs	r3, r3, #3
   221f0:	f363 128f 	bfi	r2, r3, #6, #10
   221f4:	4907      	ldr	r1, [pc, #28]	; (22214 <net_context_get_iface+0x48>)
   221f6:	4808      	ldr	r0, [pc, #32]	; (22218 <net_context_get_iface+0x4c>)
   221f8:	f7df ff78 	bl	20ec <log_1>
	return net_if_get_by_index(context->iface);
   221fc:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
}
   22200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_get_by_index(context->iface);
   22204:	f7ff be34 	b.w	21e70 <net_if_get_by_index>
   22208:	2000e29c 	.word	0x2000e29c
   2220c:	0002ef38 	.word	0x0002ef38
   22210:	0002f078 	.word	0x0002f078
   22214:	0003497c 	.word	0x0003497c
   22218:	00030684 	.word	0x00030684

0002221c <net_pkt_get_addr>:
	}
}

static int net_pkt_get_addr(struct net_pkt *pkt, bool is_src,
			    struct sockaddr *addr, socklen_t addrlen)
{
   2221c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22220:	4604      	mov	r4, r0
   22222:	b08b      	sub	sp, #44	; 0x2c
   22224:	4688      	mov	r8, r1
   22226:	4699      	mov	r9, r3
	enum net_ip_protocol proto;
	sa_family_t family;
	u16_t port;

	if (!addr || !pkt) {
   22228:	4615      	mov	r5, r2
   2222a:	b912      	cbnz	r2, 22232 <net_pkt_get_addr+0x16>
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
		struct net_udp_hdr hdr, *udp_hdr;

		udp_hdr = net_udp_get_hdr(pkt, &hdr);
		if (!udp_hdr) {
			return -EINVAL;
   2222c:	f06f 0015 	mvn.w	r0, #21
   22230:	e03d      	b.n	222ae <net_pkt_get_addr+0x92>
	if (!addr || !pkt) {
   22232:	2800      	cmp	r0, #0
   22234:	d0fa      	beq.n	2222c <net_pkt_get_addr+0x10>
   22236:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
	family = net_pkt_family(pkt);
   2223a:	f3c7 07c3 	ubfx	r7, r7, #3, #4
	addr->sa_family = family;
   2223e:	8017      	strh	r7, [r2, #0]
	proto = net_pkt_transport_proto(pkt);
   22240:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
	if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   22244:	2b06      	cmp	r3, #6
   22246:	d12e      	bne.n	222a6 <net_pkt_get_addr+0x8a>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   22248:	a905      	add	r1, sp, #20
   2224a:	f008 f8e9 	bl	2a420 <net_tcp_get_hdr>
		if (!udp_hdr) {
   2224e:	2800      	cmp	r0, #0
   22250:	d0ec      	beq.n	2222c <net_pkt_get_addr+0x10>
		}

		if (is_src) {
   22252:	f1b8 0f00 	cmp.w	r8, #0
   22256:	d031      	beq.n	222bc <net_pkt_get_addr+0xa0>
			port = udp_hdr->src_port;
   22258:	8806      	ldrh	r6, [r0, #0]
	} else {
		return -ENOTSUP;
	}

	/* Set address and port to addr */
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   2225a:	2f0a      	cmp	r7, #10
   2225c:	d125      	bne.n	222aa <net_pkt_get_addr+0x8e>
		struct sockaddr_in6 *addr6 = net_sin6(addr);

		if (addrlen < sizeof(struct sockaddr_in6)) {
   2225e:	f1b9 0f17 	cmp.w	r9, #23
   22262:	d9e3      	bls.n	2222c <net_pkt_get_addr+0x10>
   22264:	6963      	ldr	r3, [r4, #20]
   22266:	689b      	ldr	r3, [r3, #8]
   22268:	f103 0418 	add.w	r4, r3, #24
			return -EINVAL;
		}

		if (is_src) {
   2226c:	f1b8 0f00 	cmp.w	r8, #0
   22270:	d026      	beq.n	222c0 <net_pkt_get_addr+0xa4>
			net_ipaddr_copy(&addr6->sin6_addr,
   22272:	af01      	add	r7, sp, #4
   22274:	3308      	adds	r3, #8
   22276:	463a      	mov	r2, r7
   22278:	6818      	ldr	r0, [r3, #0]
   2227a:	6859      	ldr	r1, [r3, #4]
   2227c:	46bc      	mov	ip, r7
   2227e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   22282:	3308      	adds	r3, #8
   22284:	42a3      	cmp	r3, r4
   22286:	4667      	mov	r7, ip
   22288:	d1f6      	bne.n	22278 <net_pkt_get_addr+0x5c>
   2228a:	1d2c      	adds	r4, r5, #4
   2228c:	af05      	add	r7, sp, #20
   2228e:	4613      	mov	r3, r2
   22290:	cb03      	ldmia	r3!, {r0, r1}
   22292:	42bb      	cmp	r3, r7
   22294:	6020      	str	r0, [r4, #0]
   22296:	6061      	str	r1, [r4, #4]
   22298:	461a      	mov	r2, r3
   2229a:	f104 0408 	add.w	r4, r4, #8
   2229e:	d1f6      	bne.n	2228e <net_pkt_get_addr+0x72>
		addr4->sin_port = port;
	} else {
		return -ENOTSUP;
	}

	return 0;
   222a0:	2000      	movs	r0, #0
		addr6->sin6_port = port;
   222a2:	806e      	strh	r6, [r5, #2]
	return 0;
   222a4:	e003      	b.n	222ae <net_pkt_get_addr+0x92>
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   222a6:	2b11      	cmp	r3, #17
   222a8:	d004      	beq.n	222b4 <net_pkt_get_addr+0x98>
		return -ENOTSUP;
   222aa:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   222ae:	b00b      	add	sp, #44	; 0x2c
   222b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   222b4:	a905      	add	r1, sp, #20
   222b6:	f009 f931 	bl	2b51c <net_udp_get_hdr>
   222ba:	e7c8      	b.n	2224e <net_pkt_get_addr+0x32>
			port = udp_hdr->dst_port;
   222bc:	8846      	ldrh	r6, [r0, #2]
   222be:	e7cc      	b.n	2225a <net_pkt_get_addr+0x3e>
			net_ipaddr_copy(&addr6->sin6_addr,
   222c0:	af05      	add	r7, sp, #20
   222c2:	3328      	adds	r3, #40	; 0x28
   222c4:	463a      	mov	r2, r7
   222c6:	6820      	ldr	r0, [r4, #0]
   222c8:	6861      	ldr	r1, [r4, #4]
   222ca:	46bc      	mov	ip, r7
   222cc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   222d0:	3408      	adds	r4, #8
   222d2:	429c      	cmp	r4, r3
   222d4:	4667      	mov	r7, ip
   222d6:	d1f6      	bne.n	222c6 <net_pkt_get_addr+0xaa>
   222d8:	1d2c      	adds	r4, r5, #4
   222da:	af09      	add	r7, sp, #36	; 0x24
   222dc:	4613      	mov	r3, r2
   222de:	cb03      	ldmia	r3!, {r0, r1}
   222e0:	42bb      	cmp	r3, r7
   222e2:	6020      	str	r0, [r4, #0]
   222e4:	6061      	str	r1, [r4, #4]
   222e6:	461a      	mov	r2, r3
   222e8:	f104 0408 	add.w	r4, r4, #8
   222ec:	d1f6      	bne.n	222dc <net_pkt_get_addr+0xc0>
   222ee:	e7d7      	b.n	222a0 <net_pkt_get_addr+0x84>

000222f0 <net_pkt_get_reserve>:
{
   222f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   222f2:	4604      	mov	r4, r0
   222f4:	460d      	mov	r5, r1
   222f6:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   222f8:	f00c f846 	bl	2e388 <k_is_in_isr>
   222fc:	b198      	cbz	r0, 22326 <net_pkt_get_reserve+0x36>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   222fe:	2200      	movs	r2, #0
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   22300:	a901      	add	r1, sp, #4
   22302:	4620      	mov	r0, r4
   22304:	f00b f9e8 	bl	2d6d8 <k_mem_slab_alloc>
	if (ret) {
   22308:	b978      	cbnz	r0, 2232a <net_pkt_get_reserve+0x3a>
	(void)memset(pkt, 0, sizeof(struct net_pkt));
   2230a:	4601      	mov	r1, r0
   2230c:	2254      	movs	r2, #84	; 0x54
   2230e:	9801      	ldr	r0, [sp, #4]
   22310:	f7e4 fce7 	bl	6ce2 <memset>
	net_pkt_set_ll_reserve(pkt, reserve_head);
   22314:	9801      	ldr	r0, [sp, #4]
	pkt->ref = 1;
   22316:	2301      	movs	r3, #1
	net_pkt_set_ll_reserve(pkt, reserve_head);
   22318:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
	pkt->ref = 1;
   2231c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
	pkt->slab = slab;
   22320:	6104      	str	r4, [r0, #16]
}
   22322:	b002      	add	sp, #8
   22324:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   22326:	4632      	mov	r2, r6
   22328:	e7ea      	b.n	22300 <net_pkt_get_reserve+0x10>
		return NULL;
   2232a:	2000      	movs	r0, #0
   2232c:	e7f9      	b.n	22322 <net_pkt_get_reserve+0x32>
	...

00022330 <net_pkt_get>:
{
   22330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22332:	4607      	mov	r7, r0
   22334:	4614      	mov	r4, r2
	if (!context) {
   22336:	460e      	mov	r6, r1
   22338:	b1c9      	cbz	r1, 2236e <net_pkt_get+0x3e>
	iface = net_context_get_iface(context);
   2233a:	4608      	mov	r0, r1
   2233c:	f7ff ff46 	bl	221cc <net_context_get_iface>
	if (!iface) {
   22340:	4605      	mov	r5, r0
   22342:	b9b8      	cbnz	r0, 22374 <net_pkt_get+0x44>
		NET_ERR("Context has no interface");
   22344:	4b2c      	ldr	r3, [pc, #176]	; (223f8 <net_pkt_get+0xc8>)
   22346:	681b      	ldr	r3, [r3, #0]
   22348:	0759      	lsls	r1, r3, #29
   2234a:	d010      	beq.n	2236e <net_pkt_get+0x3e>
   2234c:	2301      	movs	r3, #1
   2234e:	f04f 0200 	mov.w	r2, #0
   22352:	f363 0202 	bfi	r2, r3, #0, #3
   22356:	4929      	ldr	r1, [pc, #164]	; (223fc <net_pkt_get+0xcc>)
   22358:	4b29      	ldr	r3, [pc, #164]	; (22400 <net_pkt_get+0xd0>)
   2235a:	1a5b      	subs	r3, r3, r1
   2235c:	f360 02c5 	bfi	r2, r0, #3, #3
   22360:	08db      	lsrs	r3, r3, #3
   22362:	f363 128f 	bfi	r2, r3, #6, #10
   22366:	4927      	ldr	r1, [pc, #156]	; (22404 <net_pkt_get+0xd4>)
   22368:	4827      	ldr	r0, [pc, #156]	; (22408 <net_pkt_get+0xd8>)
   2236a:	f7df febf 	bl	20ec <log_1>
		return NULL;
   2236e:	2400      	movs	r4, #0
}
   22370:	4620      	mov	r0, r4
   22372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (net_context_get_family(context) == AF_INET6) {
   22374:	4630      	mov	r0, r6
   22376:	f7ff feff 	bl	22178 <net_context_get_family>
	return iface->if_dev->l2;
   2237a:	682b      	ldr	r3, [r5, #0]
	return net_if_l2(iface)->reserve(iface, (void *)dst_ip6);
   2237c:	685b      	ldr	r3, [r3, #4]
   2237e:	280a      	cmp	r0, #10
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   22380:	bf0c      	ite	eq
   22382:	f106 0118 	addeq.w	r1, r6, #24
	struct in6_addr *addr6 = NULL;
   22386:	2100      	movne	r1, #0
   22388:	689b      	ldr	r3, [r3, #8]
   2238a:	4628      	mov	r0, r5
   2238c:	4798      	blx	r3
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   2238e:	4622      	mov	r2, r4
   22390:	4601      	mov	r1, r0
   22392:	4638      	mov	r0, r7
   22394:	f7ff ffac 	bl	222f0 <net_pkt_get_reserve>
	if (!pkt) {
   22398:	4604      	mov	r4, r0
   2239a:	2800      	cmp	r0, #0
   2239c:	d0e7      	beq.n	2236e <net_pkt_get+0x3e>
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   2239e:	682b      	ldr	r3, [r5, #0]
	pkt->context = ctx;
   223a0:	6186      	str	r6, [r0, #24]
	pkt->iface = iface;
   223a2:	6205      	str	r5, [r0, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   223a4:	7d5b      	ldrb	r3, [r3, #21]
   223a6:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   223aa:	682b      	ldr	r3, [r5, #0]
   223ac:	7d5b      	ldrb	r3, [r3, #21]
   223ae:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	family = net_context_get_family(context);
   223b2:	4630      	mov	r0, r6
   223b4:	f7ff fee0 	bl	22178 <net_context_get_family>
	pkt->family = family;
   223b8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   223bc:	f360 03c6 	bfi	r3, r0, #3, #4
   223c0:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (slab != &rx_pkts) {
   223c4:	4b11      	ldr	r3, [pc, #68]	; (2240c <net_pkt_get+0xdc>)
   223c6:	429f      	cmp	r7, r3
   223c8:	d0d2      	beq.n	22370 <net_pkt_get+0x40>
	return iface->if_dev->mtu;
   223ca:	682b      	ldr	r3, [r5, #0]
		if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   223cc:	280a      	cmp	r0, #10
   223ce:	8b1b      	ldrh	r3, [r3, #24]
   223d0:	d10e      	bne.n	223f0 <net_pkt_get+0xc0>
			data_len = max(iface_len, NET_IPV6_MTU);
   223d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   223d6:	bf38      	it	cc
   223d8:	f44f 63a0 	movcc.w	r3, #1280	; 0x500
			data_len -= NET_IPV6H_LEN;
   223dc:	3b28      	subs	r3, #40	; 0x28
   223de:	b29b      	uxth	r3, r3
	if (context->flags & NET_CONTEXT_PROTO) {
   223e0:	f896 2065 	ldrb.w	r2, [r6, #101]	; 0x65
   223e4:	0652      	lsls	r2, r2, #25
   223e6:	d505      	bpl.n	223f4 <net_pkt_get+0xc4>
			data_len -= NET_TCP_MAX_OPT_SIZE;
   223e8:	3b1c      	subs	r3, #28
			data_len -= NET_UDPH_LEN;
   223ea:	b29b      	uxth	r3, r3
		pkt->data_len = data_len;
   223ec:	87a3      	strh	r3, [r4, #60]	; 0x3c
   223ee:	e7bf      	b.n	22370 <net_pkt_get+0x40>
		uint16_t iface_len, data_len = 0;
   223f0:	2300      	movs	r3, #0
   223f2:	e7f5      	b.n	223e0 <net_pkt_get+0xb0>
			data_len -= NET_UDPH_LEN;
   223f4:	3b08      	subs	r3, #8
   223f6:	e7f8      	b.n	223ea <net_pkt_get+0xba>
   223f8:	2000e29c 	.word	0x2000e29c
   223fc:	0002ef38 	.word	0x0002ef38
   22400:	0002f078 	.word	0x0002f078
   22404:	00034992 	.word	0x00034992
   22408:	00034a5c 	.word	0x00034a5c
   2240c:	2000e2f8 	.word	0x2000e2f8

00022410 <net_pkt_get_reserve_data>:
{
   22410:	b570      	push	{r4, r5, r6, lr}
   22412:	4604      	mov	r4, r0
   22414:	460d      	mov	r5, r1
   22416:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   22418:	f00b ffb6 	bl	2e388 <k_is_in_isr>
   2241c:	b158      	cbz	r0, 22436 <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   2241e:	2100      	movs	r1, #0
		frag = net_buf_alloc(pool, timeout);
   22420:	4620      	mov	r0, r4
   22422:	f7fc fee7 	bl	1f1f4 <net_buf_alloc_fixed>
   22426:	4604      	mov	r4, r0
	if (!frag) {
   22428:	b118      	cbz	r0, 22432 <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   2242a:	4629      	mov	r1, r5
   2242c:	3008      	adds	r0, #8
   2242e:	f7fc ff00 	bl	1f232 <net_buf_simple_reserve>
}
   22432:	4620      	mov	r0, r4
   22434:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   22436:	4631      	mov	r1, r6
   22438:	e7f2      	b.n	22420 <net_pkt_get_reserve_data+0x10>
	...

0002243c <net_pkt_get_reserve_rx>:
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   2243c:	460a      	mov	r2, r1
   2243e:	4601      	mov	r1, r0
   22440:	4801      	ldr	r0, [pc, #4]	; (22448 <net_pkt_get_reserve_rx+0xc>)
   22442:	f7ff bf55 	b.w	222f0 <net_pkt_get_reserve>
   22446:	bf00      	nop
   22448:	2000e2f8 	.word	0x2000e2f8

0002244c <net_pkt_get_reserve_tx>:
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   2244c:	460a      	mov	r2, r1
   2244e:	4601      	mov	r1, r0
   22450:	4801      	ldr	r0, [pc, #4]	; (22458 <net_pkt_get_reserve_tx+0xc>)
   22452:	f7ff bf4d 	b.w	222f0 <net_pkt_get_reserve>
   22456:	bf00      	nop
   22458:	2000e314 	.word	0x2000e314

0002245c <net_pkt_get_reserve_rx_data>:
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   2245c:	460a      	mov	r2, r1
   2245e:	4601      	mov	r1, r0
   22460:	4801      	ldr	r0, [pc, #4]	; (22468 <net_pkt_get_reserve_rx_data+0xc>)
   22462:	f7ff bfd5 	b.w	22410 <net_pkt_get_reserve_data>
   22466:	bf00      	nop
   22468:	2000e514 	.word	0x2000e514

0002246c <net_pkt_get_reserve_tx_data>:
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   2246c:	460a      	mov	r2, r1
   2246e:	4601      	mov	r1, r0
   22470:	4801      	ldr	r0, [pc, #4]	; (22478 <net_pkt_get_reserve_tx_data+0xc>)
   22472:	f7ff bfcd 	b.w	22410 <net_pkt_get_reserve_data>
   22476:	bf00      	nop
   22478:	2000e534 	.word	0x2000e534

0002247c <net_pkt_get_frag>:
{
   2247c:	b538      	push	{r3, r4, r5, lr}
	context = net_pkt_context(pkt);
   2247e:	6983      	ldr	r3, [r0, #24]
{
   22480:	4604      	mov	r4, r0
   22482:	460d      	mov	r5, r1
	if (context && context->data_pool) {
   22484:	b14b      	cbz	r3, 2249a <net_pkt_get_frag+0x1e>
   22486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   22488:	b13b      	cbz	r3, 2249a <net_pkt_get_frag+0x1e>
		return net_pkt_get_reserve_data(context->data_pool(),
   2248a:	4798      	blx	r3
   2248c:	462a      	mov	r2, r5
   2248e:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
}
   22492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_pkt_get_reserve_data(context->data_pool(),
   22496:	f7ff bfbb 	b.w	22410 <net_pkt_get_reserve_data>
	if (pkt->slab == &rx_pkts) {
   2249a:	6922      	ldr	r2, [r4, #16]
   2249c:	4b06      	ldr	r3, [pc, #24]	; (224b8 <net_pkt_get_frag+0x3c>)
   2249e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
   224a2:	429a      	cmp	r2, r3
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   224a4:	4629      	mov	r1, r5
	if (pkt->slab == &rx_pkts) {
   224a6:	d103      	bne.n	224b0 <net_pkt_get_frag+0x34>
}
   224a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   224ac:	f7ff bfd6 	b.w	2245c <net_pkt_get_reserve_rx_data>
}
   224b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   224b4:	f7ff bfda 	b.w	2246c <net_pkt_get_reserve_tx_data>
   224b8:	2000e2f8 	.word	0x2000e2f8

000224bc <net_pkt_append_allocator>:
{
   224bc:	460b      	mov	r3, r1
	return net_pkt_get_frag((struct net_pkt *)user_data, timeout);
   224be:	4601      	mov	r1, r0
   224c0:	4618      	mov	r0, r3
   224c2:	f7ff bfdb 	b.w	2247c <net_pkt_get_frag>
	...

000224c8 <net_pkt_get_tx>:
{
   224c8:	b538      	push	{r3, r4, r5, lr}
   224ca:	460d      	mov	r5, r1
	NET_ASSERT_INFO(context, "TX context not set");
   224cc:	4604      	mov	r4, r0
   224ce:	b9a0      	cbnz	r0, 224fa <net_pkt_get_tx+0x32>
   224d0:	4b0f      	ldr	r3, [pc, #60]	; (22510 <net_pkt_get_tx+0x48>)
   224d2:	681b      	ldr	r3, [r3, #0]
   224d4:	075b      	lsls	r3, r3, #29
   224d6:	d010      	beq.n	224fa <net_pkt_get_tx+0x32>
   224d8:	2301      	movs	r3, #1
   224da:	f04f 0200 	mov.w	r2, #0
   224de:	f363 0202 	bfi	r2, r3, #0, #3
   224e2:	490c      	ldr	r1, [pc, #48]	; (22514 <net_pkt_get_tx+0x4c>)
   224e4:	4b0c      	ldr	r3, [pc, #48]	; (22518 <net_pkt_get_tx+0x50>)
   224e6:	1a5b      	subs	r3, r3, r1
   224e8:	f360 02c5 	bfi	r2, r0, #3, #3
   224ec:	08db      	lsrs	r3, r3, #3
   224ee:	f363 128f 	bfi	r2, r3, #6, #10
   224f2:	490a      	ldr	r1, [pc, #40]	; (2251c <net_pkt_get_tx+0x54>)
   224f4:	480a      	ldr	r0, [pc, #40]	; (22520 <net_pkt_get_tx+0x58>)
   224f6:	f7df fdf9 	bl	20ec <log_1>
	slab = get_tx_slab(context);
   224fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	if (context->tx_slab) {
   224fc:	b10b      	cbz	r3, 22502 <net_pkt_get_tx+0x3a>
		return context->tx_slab();
   224fe:	4798      	blx	r3
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   22500:	b900      	cbnz	r0, 22504 <net_pkt_get_tx+0x3c>
   22502:	4808      	ldr	r0, [pc, #32]	; (22524 <net_pkt_get_tx+0x5c>)
   22504:	462a      	mov	r2, r5
   22506:	4621      	mov	r1, r4
}
   22508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   2250c:	f7ff bf10 	b.w	22330 <net_pkt_get>
   22510:	2000e29c 	.word	0x2000e29c
   22514:	0002ef38 	.word	0x0002ef38
   22518:	0002f078 	.word	0x0002f078
   2251c:	000349ac 	.word	0x000349ac
   22520:	00034aad 	.word	0x00034aad
   22524:	2000e314 	.word	0x2000e314

00022528 <net_pkt_get_data>:
{
   22528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2252a:	460f      	mov	r7, r1
	NET_ASSERT_INFO(context, "Data context not set");
   2252c:	4604      	mov	r4, r0
   2252e:	b9a0      	cbnz	r0, 2255a <net_pkt_get_data+0x32>
   22530:	4b25      	ldr	r3, [pc, #148]	; (225c8 <net_pkt_get_data+0xa0>)
   22532:	681b      	ldr	r3, [r3, #0]
   22534:	075a      	lsls	r2, r3, #29
   22536:	d010      	beq.n	2255a <net_pkt_get_data+0x32>
   22538:	2301      	movs	r3, #1
   2253a:	f04f 0200 	mov.w	r2, #0
   2253e:	f363 0202 	bfi	r2, r3, #0, #3
   22542:	4922      	ldr	r1, [pc, #136]	; (225cc <net_pkt_get_data+0xa4>)
   22544:	4b22      	ldr	r3, [pc, #136]	; (225d0 <net_pkt_get_data+0xa8>)
   22546:	1a5b      	subs	r3, r3, r1
   22548:	f360 02c5 	bfi	r2, r0, #3, #3
   2254c:	08db      	lsrs	r3, r3, #3
   2254e:	f363 128f 	bfi	r2, r3, #6, #10
   22552:	4920      	ldr	r1, [pc, #128]	; (225d4 <net_pkt_get_data+0xac>)
   22554:	4820      	ldr	r0, [pc, #128]	; (225d8 <net_pkt_get_data+0xb0>)
   22556:	f7df fdc9 	bl	20ec <log_1>
	pool = get_data_pool(context);
   2255a:	6c23      	ldr	r3, [r4, #64]	; 0x40
	if (context->data_pool) {
   2255c:	b113      	cbz	r3, 22564 <net_pkt_get_data+0x3c>
		return context->data_pool();
   2255e:	4798      	blx	r3
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   22560:	4606      	mov	r6, r0
   22562:	b900      	cbnz	r0, 22566 <net_pkt_get_data+0x3e>
   22564:	4e1d      	ldr	r6, [pc, #116]	; (225dc <net_pkt_get_data+0xb4>)
	iface = net_context_get_iface(context);
   22566:	4620      	mov	r0, r4
   22568:	f7ff fe30 	bl	221cc <net_context_get_iface>
	if (!iface) {
   2256c:	4605      	mov	r5, r0
   2256e:	b9b0      	cbnz	r0, 2259e <net_pkt_get_data+0x76>
		NET_ERR("Context has no interface");
   22570:	4b15      	ldr	r3, [pc, #84]	; (225c8 <net_pkt_get_data+0xa0>)
   22572:	681b      	ldr	r3, [r3, #0]
   22574:	075b      	lsls	r3, r3, #29
   22576:	d010      	beq.n	2259a <net_pkt_get_data+0x72>
   22578:	2301      	movs	r3, #1
   2257a:	f04f 0200 	mov.w	r2, #0
   2257e:	f363 0202 	bfi	r2, r3, #0, #3
   22582:	4912      	ldr	r1, [pc, #72]	; (225cc <net_pkt_get_data+0xa4>)
   22584:	4b12      	ldr	r3, [pc, #72]	; (225d0 <net_pkt_get_data+0xa8>)
   22586:	4816      	ldr	r0, [pc, #88]	; (225e0 <net_pkt_get_data+0xb8>)
   22588:	1a5b      	subs	r3, r3, r1
   2258a:	f365 02c5 	bfi	r2, r5, #3, #3
   2258e:	08db      	lsrs	r3, r3, #3
   22590:	f363 128f 	bfi	r2, r3, #6, #10
   22594:	4913      	ldr	r1, [pc, #76]	; (225e4 <net_pkt_get_data+0xbc>)
   22596:	f7df fda9 	bl	20ec <log_1>
}
   2259a:	2000      	movs	r0, #0
   2259c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (net_context_get_family(context) == AF_INET6) {
   2259e:	4620      	mov	r0, r4
   225a0:	f7ff fdea 	bl	22178 <net_context_get_family>
	return iface->if_dev->l2;
   225a4:	682b      	ldr	r3, [r5, #0]
	return net_if_l2(iface)->reserve(iface, (void *)dst_ip6);
   225a6:	685b      	ldr	r3, [r3, #4]
   225a8:	280a      	cmp	r0, #10
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   225aa:	bf0c      	ite	eq
   225ac:	f104 0118 	addeq.w	r1, r4, #24
	struct in6_addr *addr6 = NULL;
   225b0:	2100      	movne	r1, #0
   225b2:	689b      	ldr	r3, [r3, #8]
   225b4:	4628      	mov	r0, r5
   225b6:	4798      	blx	r3
	frag = net_pkt_get_reserve_data(pool,
   225b8:	463a      	mov	r2, r7
   225ba:	4601      	mov	r1, r0
   225bc:	4630      	mov	r0, r6
}
   225be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	frag = net_pkt_get_reserve_data(pool,
   225c2:	f7ff bf25 	b.w	22410 <net_pkt_get_reserve_data>
   225c6:	bf00      	nop
   225c8:	2000e29c 	.word	0x2000e29c
   225cc:	0002ef38 	.word	0x0002ef38
   225d0:	0002f078 	.word	0x0002f078
   225d4:	000349bb 	.word	0x000349bb
   225d8:	00034a79 	.word	0x00034a79
   225dc:	2000e534 	.word	0x2000e534
   225e0:	00034a5c 	.word	0x00034a5c
   225e4:	0003499e 	.word	0x0003499e

000225e8 <net_pkt_ref>:
	if (!pkt) {
   225e8:	b120      	cbz	r0, 225f4 <net_pkt_ref+0xc>
	pkt->ref++;
   225ea:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   225ee:	3301      	adds	r3, #1
   225f0:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
}
   225f4:	4770      	bx	lr

000225f6 <net_pkt_frag_unref>:
	if (!frag) {
   225f6:	b108      	cbz	r0, 225fc <net_pkt_frag_unref+0x6>
	net_buf_unref(frag);
   225f8:	f7fc be2c 	b.w	1f254 <net_buf_unref>
}
   225fc:	4770      	bx	lr

000225fe <net_pkt_unref>:
{
   225fe:	b507      	push	{r0, r1, r2, lr}
   22600:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   22602:	b180      	cbz	r0, 22626 <net_pkt_unref+0x28>
	if (!pkt->ref) {
   22604:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   22608:	b16b      	cbz	r3, 22626 <net_pkt_unref+0x28>
	if (--pkt->ref > 0) {
   2260a:	3b01      	subs	r3, #1
   2260c:	b2db      	uxtb	r3, r3
   2260e:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
   22612:	b943      	cbnz	r3, 22626 <net_pkt_unref+0x28>
	if (pkt->frags) {
   22614:	6940      	ldr	r0, [r0, #20]
   22616:	b108      	cbz	r0, 2261c <net_pkt_unref+0x1e>
		net_pkt_frag_unref(pkt->frags);
   22618:	f7ff ffed 	bl	225f6 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   2261c:	9b01      	ldr	r3, [sp, #4]
   2261e:	a901      	add	r1, sp, #4
   22620:	6918      	ldr	r0, [r3, #16]
   22622:	f00b f881 	bl	2d728 <k_mem_slab_free>
}
   22626:	b003      	add	sp, #12
   22628:	f85d fb04 	ldr.w	pc, [sp], #4

0002262c <net_pkt_frag_del>:
{
   2262c:	b510      	push	{r4, lr}
   2262e:	4604      	mov	r4, r0
   22630:	4608      	mov	r0, r1
	if (pkt->frags == frag && !parent) {
   22632:	6961      	ldr	r1, [r4, #20]
   22634:	4291      	cmp	r1, r2
   22636:	d104      	bne.n	22642 <net_pkt_frag_del+0x16>
   22638:	b918      	cbnz	r0, 22642 <net_pkt_frag_del+0x16>
		tmp = net_buf_frag_del(NULL, frag);
   2263a:	f7fc fe5d 	bl	1f2f8 <net_buf_frag_del>
		pkt->frags = tmp;
   2263e:	6160      	str	r0, [r4, #20]
}
   22640:	bd10      	pop	{r4, pc}
	return net_buf_frag_del(parent, frag);
   22642:	4611      	mov	r1, r2
}
   22644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_buf_frag_del(parent, frag);
   22648:	f7fc be56 	b.w	1f2f8 <net_buf_frag_del>

0002264c <net_pkt_frag_add>:
	if (!pkt->frags) {
   2264c:	6943      	ldr	r3, [r0, #20]
{
   2264e:	b510      	push	{r4, lr}
   22650:	460c      	mov	r4, r1
	if (!pkt->frags) {
   22652:	b90b      	cbnz	r3, 22658 <net_pkt_frag_add+0xc>
		pkt->frags = frag;
   22654:	6141      	str	r1, [r0, #20]
}
   22656:	bd10      	pop	{r4, pc}
	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   22658:	4618      	mov	r0, r3
   2265a:	f7fc fe2d 	bl	1f2b8 <net_buf_frag_last>
   2265e:	4621      	mov	r1, r4
}
   22660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   22664:	f7fc be2d 	b.w	1f2c2 <net_buf_frag_insert>

00022668 <check_and_create_data.part.23>:
static inline struct net_buf *check_and_create_data(struct net_pkt *pkt,
   22668:	b538      	push	{r3, r4, r5, lr}
   2266a:	4605      	mov	r5, r0
	frag = net_pkt_get_frag(pkt, timeout);
   2266c:	f7ff ff06 	bl	2247c <net_pkt_get_frag>
	if (!frag) {
   22670:	4604      	mov	r4, r0
   22672:	b118      	cbz	r0, 2267c <check_and_create_data.part.23+0x14>
	net_pkt_frag_add(pkt, frag);
   22674:	4601      	mov	r1, r0
   22676:	4628      	mov	r0, r5
   22678:	f7ff ffe8 	bl	2264c <net_pkt_frag_add>
}
   2267c:	4620      	mov	r0, r4
   2267e:	bd38      	pop	{r3, r4, r5, pc}

00022680 <net_pkt_frag_insert>:
{
   22680:	b538      	push	{r3, r4, r5, lr}
   22682:	4604      	mov	r4, r0
	net_buf_frag_last(frag)->frags = pkt->frags;
   22684:	4608      	mov	r0, r1
{
   22686:	460d      	mov	r5, r1
	net_buf_frag_last(frag)->frags = pkt->frags;
   22688:	f7fc fe16 	bl	1f2b8 <net_buf_frag_last>
   2268c:	6963      	ldr	r3, [r4, #20]
   2268e:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   22690:	6165      	str	r5, [r4, #20]
}
   22692:	bd38      	pop	{r3, r4, r5, pc}

00022694 <net_pkt_copy>:
{
   22694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22698:	b087      	sub	sp, #28
   2269a:	460f      	mov	r7, r1
   2269c:	9304      	str	r3, [sp, #16]
	frag = net_pkt_get_frag(pkt, timeout);
   2269e:	9904      	ldr	r1, [sp, #16]
{
   226a0:	9003      	str	r0, [sp, #12]
   226a2:	4616      	mov	r6, r2
	orig = pkt->frags;
   226a4:	6945      	ldr	r5, [r0, #20]
	frag = net_pkt_get_frag(pkt, timeout);
   226a6:	f7ff fee9 	bl	2247c <net_pkt_get_frag>
	if (!frag) {
   226aa:	4604      	mov	r4, r0
   226ac:	b330      	cbz	r0, 226fc <net_pkt_copy+0x68>
	if (reserve > net_buf_tailroom(frag)) {
   226ae:	f100 0808 	add.w	r8, r0, #8
   226b2:	4640      	mov	r0, r8
   226b4:	f7fc fe98 	bl	1f3e8 <net_buf_simple_tailroom>
   226b8:	42b0      	cmp	r0, r6
   226ba:	d223      	bcs.n	22704 <net_pkt_copy+0x70>
		NET_ERR("Reserve %zu is too long, max is %zu",
   226bc:	4b37      	ldr	r3, [pc, #220]	; (2279c <net_pkt_copy+0x108>)
   226be:	681b      	ldr	r3, [r3, #0]
   226c0:	075b      	lsls	r3, r3, #29
   226c2:	d017      	beq.n	226f4 <net_pkt_copy+0x60>
   226c4:	2301      	movs	r3, #1
   226c6:	f04f 0500 	mov.w	r5, #0
   226ca:	4a35      	ldr	r2, [pc, #212]	; (227a0 <net_pkt_copy+0x10c>)
   226cc:	f363 0502 	bfi	r5, r3, #0, #3
   226d0:	4b34      	ldr	r3, [pc, #208]	; (227a4 <net_pkt_copy+0x110>)
   226d2:	1a9b      	subs	r3, r3, r2
   226d4:	08db      	lsrs	r3, r3, #3
   226d6:	f36f 05c5 	bfc	r5, #3, #3
   226da:	4640      	mov	r0, r8
   226dc:	f363 158f 	bfi	r5, r3, #6, #10
   226e0:	f7fc fe82 	bl	1f3e8 <net_buf_simple_tailroom>
   226e4:	f8ad 5000 	strh.w	r5, [sp]
   226e8:	4603      	mov	r3, r0
   226ea:	4632      	mov	r2, r6
   226ec:	492e      	ldr	r1, [pc, #184]	; (227a8 <net_pkt_copy+0x114>)
   226ee:	482f      	ldr	r0, [pc, #188]	; (227ac <net_pkt_copy+0x118>)
   226f0:	f7df fd28 	bl	2144 <log_3>
		net_pkt_frag_unref(frag);
   226f4:	4620      	mov	r0, r4
   226f6:	f7ff ff7e 	bl	225f6 <net_pkt_frag_unref>
		return NULL;
   226fa:	2400      	movs	r4, #0
}
   226fc:	4620      	mov	r0, r4
   226fe:	b007      	add	sp, #28
   22700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_add(frag, reserve);
   22704:	4631      	mov	r1, r6
   22706:	4640      	mov	r0, r8
   22708:	f7fc fe02 	bl	1f310 <net_buf_simple_add>
	if (!orig->len) {
   2270c:	89ae      	ldrh	r6, [r5, #12]
   2270e:	2e00      	cmp	r6, #0
   22710:	d0f4      	beq.n	226fc <net_pkt_copy+0x68>
	orig_data = orig->data;
   22712:	f8d5 9008 	ldr.w	r9, [r5, #8]
   22716:	46a3      	mov	fp, r4
	while (orig && amount) {
   22718:	2f00      	cmp	r7, #0
   2271a:	d0ef      	beq.n	226fc <net_pkt_copy+0x68>
		int left_len = net_buf_tailroom(frag);
   2271c:	f10b 0308 	add.w	r3, fp, #8
   22720:	4618      	mov	r0, r3
   22722:	9305      	str	r3, [sp, #20]
   22724:	f7fc fe60 	bl	1f3e8 <net_buf_simple_tailroom>
			copy_len = orig_len;
   22728:	42be      	cmp	r6, r7
   2272a:	46b2      	mov	sl, r6
   2272c:	bf28      	it	cs
   2272e:	46ba      	movcs	sl, r7
		if ((copy_len - left_len) >= 0) {
   22730:	ebaa 0200 	sub.w	r2, sl, r0
   22734:	2a00      	cmp	r2, #0
		int left_len = net_buf_tailroom(frag);
   22736:	4680      	mov	r8, r0
		if ((copy_len - left_len) >= 0) {
   22738:	9b05      	ldr	r3, [sp, #20]
   2273a:	db1d      	blt.n	22778 <net_pkt_copy+0xe4>
			memcpy(net_buf_add(frag, left_len), orig_data,
   2273c:	4601      	mov	r1, r0
			amount -= left_len;
   2273e:	1a3f      	subs	r7, r7, r0
			memcpy(net_buf_add(frag, left_len), orig_data,
   22740:	4618      	mov	r0, r3
   22742:	f7fc fde5 	bl	1f310 <net_buf_simple_add>
   22746:	4642      	mov	r2, r8
   22748:	4649      	mov	r1, r9
   2274a:	f7e4 fa9d 	bl	6c88 <memcpy>
			if (!net_buf_tailroom(frag)) {
   2274e:	9b05      	ldr	r3, [sp, #20]
   22750:	4618      	mov	r0, r3
   22752:	f7fc fe49 	bl	1f3e8 <net_buf_simple_tailroom>
   22756:	b958      	cbnz	r0, 22770 <net_pkt_copy+0xdc>
				struct net_buf *new_frag =
   22758:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   2275c:	f7ff fe8e 	bl	2247c <net_pkt_get_frag>
				if (!new_frag) {
   22760:	4682      	mov	sl, r0
   22762:	2800      	cmp	r0, #0
   22764:	d0c6      	beq.n	226f4 <net_pkt_copy+0x60>
				net_buf_frag_add(frag, new_frag);
   22766:	4601      	mov	r1, r0
   22768:	4658      	mov	r0, fp
   2276a:	f7fc fdb5 	bl	1f2d8 <net_buf_frag_add>
   2276e:	46d3      	mov	fp, sl
			orig_len -= left_len;
   22770:	eba6 0608 	sub.w	r6, r6, r8
			orig_data += left_len;
   22774:	44c1      	add	r9, r8
   22776:	e7cf      	b.n	22718 <net_pkt_copy+0x84>
			memcpy(net_buf_add(frag, copy_len), orig_data,
   22778:	4651      	mov	r1, sl
   2277a:	4618      	mov	r0, r3
   2277c:	f7fc fdc8 	bl	1f310 <net_buf_simple_add>
   22780:	4652      	mov	r2, sl
   22782:	4649      	mov	r1, r9
   22784:	f7e4 fa80 	bl	6c88 <memcpy>
		orig = orig->frags;
   22788:	682d      	ldr	r5, [r5, #0]
		if (orig) {
   2278a:	2d00      	cmp	r5, #0
   2278c:	d0b6      	beq.n	226fc <net_pkt_copy+0x68>
			amount -= copy_len;
   2278e:	eba7 070a 	sub.w	r7, r7, sl
			orig_len = orig->len;
   22792:	89ae      	ldrh	r6, [r5, #12]
			orig_data = orig->data;
   22794:	f8d5 9008 	ldr.w	r9, [r5, #8]
   22798:	e7be      	b.n	22718 <net_pkt_copy+0x84>
   2279a:	bf00      	nop
   2279c:	2000e29c 	.word	0x2000e29c
   227a0:	0002ef38 	.word	0x0002ef38
   227a4:	0002f078 	.word	0x0002f078
   227a8:	000349cc 	.word	0x000349cc
   227ac:	00034a34 	.word	0x00034a34

000227b0 <net_frag_linear_copy>:
{
   227b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   227b4:	461e      	mov	r6, r3
	if (dst->size < len) {
   227b6:	89c3      	ldrh	r3, [r0, #14]
   227b8:	42b3      	cmp	r3, r6
{
   227ba:	4680      	mov	r8, r0
   227bc:	460c      	mov	r4, r1
   227be:	4617      	mov	r7, r2
	if (dst->size < len) {
   227c0:	d206      	bcs.n	227d0 <net_frag_linear_copy+0x20>
		return -ENOMEM;
   227c2:	f06f 000b 	mvn.w	r0, #11
}
   227c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		offset -= src->len;
   227ca:	1a7f      	subs	r7, r7, r1
		src = src->frags;
   227cc:	6824      	ldr	r4, [r4, #0]
		offset -= src->len;
   227ce:	b2bf      	uxth	r7, r7
	while (src && offset >= src->len) {
   227d0:	b31c      	cbz	r4, 2281a <net_frag_linear_copy+0x6a>
   227d2:	89a1      	ldrh	r1, [r4, #12]
   227d4:	42b9      	cmp	r1, r7
   227d6:	d9f8      	bls.n	227ca <net_frag_linear_copy+0x1a>
   227d8:	2500      	movs	r5, #0
	while (src && len > 0) {
   227da:	b91e      	cbnz	r6, 227e4 <net_frag_linear_copy+0x34>
	dst->len = copied;
   227dc:	f8a8 500c 	strh.w	r5, [r8, #12]
	return 0;
   227e0:	2000      	movs	r0, #0
   227e2:	e7f0      	b.n	227c6 <net_frag_linear_copy+0x16>
		to_copy = min(len, src->len - offset);
   227e4:	89a2      	ldrh	r2, [r4, #12]
		memcpy(dst->data + copied, src->data + offset, to_copy);
   227e6:	68a1      	ldr	r1, [r4, #8]
   227e8:	f8d8 0008 	ldr.w	r0, [r8, #8]
		to_copy = min(len, src->len - offset);
   227ec:	1bd2      	subs	r2, r2, r7
   227ee:	42b2      	cmp	r2, r6
   227f0:	bfa8      	it	ge
   227f2:	4632      	movge	r2, r6
   227f4:	fa1f f982 	uxth.w	r9, r2
		memcpy(dst->data + copied, src->data + offset, to_copy);
   227f8:	4439      	add	r1, r7
   227fa:	4428      	add	r0, r5
   227fc:	464a      	mov	r2, r9
   227fe:	f7e4 fa43 	bl	6c88 <memcpy>
		src = src->frags;
   22802:	6824      	ldr	r4, [r4, #0]
		copied += to_copy;
   22804:	444d      	add	r5, r9
		len -= to_copy;
   22806:	eba6 0609 	sub.w	r6, r6, r9
		copied += to_copy;
   2280a:	b2ad      	uxth	r5, r5
		len -= to_copy;
   2280c:	b2b6      	uxth	r6, r6
		offset = 0;
   2280e:	2700      	movs	r7, #0
	while (src && len > 0) {
   22810:	2c00      	cmp	r4, #0
   22812:	d1e2      	bne.n	227da <net_frag_linear_copy+0x2a>
	if (len > 0) {
   22814:	2e00      	cmp	r6, #0
   22816:	d0e1      	beq.n	227dc <net_frag_linear_copy+0x2c>
   22818:	e7d3      	b.n	227c2 <net_frag_linear_copy+0x12>
   2281a:	4625      	mov	r5, r4
   2281c:	e7fa      	b.n	22814 <net_frag_linear_copy+0x64>

0002281e <net_pkt_compact>:
{
   2281e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	frag = pkt->frags;
   22822:	6944      	ldr	r4, [r0, #20]
{
   22824:	4607      	mov	r7, r0
	prev = NULL;
   22826:	f04f 0800 	mov.w	r8, #0
	while (frag) {
   2282a:	2c00      	cmp	r4, #0
   2282c:	d035      	beq.n	2289a <net_pkt_compact+0x7c>
		if (frag->frags) {
   2282e:	6823      	ldr	r3, [r4, #0]
   22830:	b363      	cbz	r3, 2288c <net_pkt_compact+0x6e>
			if (copy_len > net_buf_tailroom(frag)) {
   22832:	f104 0608 	add.w	r6, r4, #8
   22836:	4630      	mov	r0, r6
			copy_len = frag->frags->len;
   22838:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   2283a:	f7fc fdd5 	bl	1f3e8 <net_buf_simple_tailroom>
   2283e:	42a8      	cmp	r0, r5
   22840:	d203      	bcs.n	2284a <net_pkt_compact+0x2c>
				copy_len = net_buf_tailroom(frag);
   22842:	4630      	mov	r0, r6
   22844:	f7fc fdd0 	bl	1f3e8 <net_buf_simple_tailroom>
   22848:	4605      	mov	r5, r0
	return buf->data + buf->len;
   2284a:	68a3      	ldr	r3, [r4, #8]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   2284c:	6821      	ldr	r1, [r4, #0]
   2284e:	89a0      	ldrh	r0, [r4, #12]
   22850:	6889      	ldr	r1, [r1, #8]
   22852:	462a      	mov	r2, r5
   22854:	4418      	add	r0, r3
   22856:	f7e4 fa17 	bl	6c88 <memcpy>
			net_buf_add(frag, copy_len);
   2285a:	4629      	mov	r1, r5
   2285c:	4630      	mov	r0, r6
   2285e:	f7fc fd57 	bl	1f310 <net_buf_simple_add>
			memmove(frag->frags->data,
   22862:	6823      	ldr	r3, [r4, #0]
   22864:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   22866:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   22868:	1941      	adds	r1, r0, r5
   2286a:	1b52      	subs	r2, r2, r5
   2286c:	f7e4 f9f5 	bl	6c5a <memmove>
			frag->frags->len -= copy_len;
   22870:	6822      	ldr	r2, [r4, #0]
   22872:	8993      	ldrh	r3, [r2, #12]
   22874:	1b5d      	subs	r5, r3, r5
   22876:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   22878:	4630      	mov	r0, r6
   2287a:	f7fc fdb5 	bl	1f3e8 <net_buf_simple_tailroom>
   2287e:	b178      	cbz	r0, 228a0 <net_pkt_compact+0x82>
				net_pkt_frag_del(pkt, frag, frag->frags);
   22880:	6822      	ldr	r2, [r4, #0]
   22882:	4621      	mov	r1, r4
   22884:	4638      	mov	r0, r7
   22886:	f7ff fed1 	bl	2262c <net_pkt_frag_del>
				continue;
   2288a:	e7ce      	b.n	2282a <net_pkt_compact+0xc>
			if (!frag->len) {
   2288c:	89a3      	ldrh	r3, [r4, #12]
   2288e:	b93b      	cbnz	r3, 228a0 <net_pkt_compact+0x82>
				net_pkt_frag_del(pkt, prev, frag);
   22890:	4622      	mov	r2, r4
   22892:	4641      	mov	r1, r8
   22894:	4638      	mov	r0, r7
   22896:	f7ff fec9 	bl	2262c <net_pkt_frag_del>
}
   2289a:	2001      	movs	r0, #1
   2289c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		frag = frag->frags;
   228a0:	46a0      	mov	r8, r4
   228a2:	6824      	ldr	r4, [r4, #0]
   228a4:	e7c1      	b.n	2282a <net_pkt_compact+0xc>
	...

000228a8 <net_pkt_append>:
{
   228a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   228ac:	460e      	mov	r6, r1
   228ae:	4617      	mov	r7, r2
   228b0:	4698      	mov	r8, r3
	if (!pkt || !data || !len) {
   228b2:	4604      	mov	r4, r0
   228b4:	b918      	cbnz	r0, 228be <net_pkt_append+0x16>
		return 0;
   228b6:	2000      	movs	r0, #0
}
   228b8:	b002      	add	sp, #8
   228ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!pkt || !data || !len) {
   228be:	2a00      	cmp	r2, #0
   228c0:	d0f9      	beq.n	228b6 <net_pkt_append+0xe>
   228c2:	2900      	cmp	r1, #0
   228c4:	d0f7      	beq.n	228b6 <net_pkt_append+0xe>
	if (!pkt->frags) {
   228c6:	6943      	ldr	r3, [r0, #20]
   228c8:	b943      	cbnz	r3, 228dc <net_pkt_append+0x34>
		frag = net_pkt_get_frag(pkt, timeout);
   228ca:	4641      	mov	r1, r8
   228cc:	f7ff fdd6 	bl	2247c <net_pkt_get_frag>
		if (!frag) {
   228d0:	4601      	mov	r1, r0
   228d2:	2800      	cmp	r0, #0
   228d4:	d0ef      	beq.n	228b6 <net_pkt_append+0xe>
		net_pkt_frag_add(pkt, frag);
   228d6:	4620      	mov	r0, r4
   228d8:	f7ff feb8 	bl	2264c <net_pkt_frag_add>
	if (pkt->slab != &rx_pkts) {
   228dc:	6922      	ldr	r2, [r4, #16]
   228de:	4b12      	ldr	r3, [pc, #72]	; (22928 <net_pkt_append+0x80>)
   228e0:	429a      	cmp	r2, r3
   228e2:	d01e      	beq.n	22922 <net_pkt_append+0x7a>
		ctx = net_pkt_context(pkt);
   228e4:	69a5      	ldr	r5, [r4, #24]
	if (ctx) {
   228e6:	b155      	cbz	r5, 228fe <net_pkt_append+0x56>
		if (ctx->tcp && (ctx->tcp->send_mss < max_len)) {
   228e8:	6c6a      	ldr	r2, [r5, #68]	; 0x44
		max_len = pkt->data_len;
   228ea:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
		if (ctx->tcp && (ctx->tcp->send_mss < max_len)) {
   228ec:	b122      	cbz	r2, 228f8 <net_pkt_append+0x50>
   228ee:	f8b2 20ba 	ldrh.w	r2, [r2, #186]	; 0xba
   228f2:	4293      	cmp	r3, r2
   228f4:	bf28      	it	cs
   228f6:	4613      	movcs	r3, r2
   228f8:	429e      	cmp	r6, r3
   228fa:	bf28      	it	cs
   228fc:	461e      	movcs	r6, r3
	appended = net_buf_append_bytes(net_buf_frag_last(pkt->frags),
   228fe:	6960      	ldr	r0, [r4, #20]
   22900:	f7fc fcda 	bl	1f2b8 <net_buf_frag_last>
   22904:	4b09      	ldr	r3, [pc, #36]	; (2292c <net_pkt_append+0x84>)
   22906:	9300      	str	r3, [sp, #0]
   22908:	9401      	str	r4, [sp, #4]
   2290a:	4643      	mov	r3, r8
   2290c:	463a      	mov	r2, r7
   2290e:	4631      	mov	r1, r6
   22910:	f7fc fd72 	bl	1f3f8 <net_buf_append_bytes>
   22914:	b280      	uxth	r0, r0
	if (ctx) {
   22916:	2d00      	cmp	r5, #0
   22918:	d0ce      	beq.n	228b8 <net_pkt_append+0x10>
		pkt->data_len -= appended;
   2291a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   2291c:	1a1b      	subs	r3, r3, r0
   2291e:	87a3      	strh	r3, [r4, #60]	; 0x3c
   22920:	e7ca      	b.n	228b8 <net_pkt_append+0x10>
	struct net_context *ctx = NULL;
   22922:	2500      	movs	r5, #0
   22924:	e7eb      	b.n	228fe <net_pkt_append+0x56>
   22926:	bf00      	nop
   22928:	2000e2f8 	.word	0x2000e2f8
   2292c:	000224bd 	.word	0x000224bd

00022930 <net_frag_read>:
{
   22930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22932:	9d06      	ldr	r5, [sp, #24]
   22934:	4614      	mov	r4, r2
	if (!frag) {
   22936:	2800      	cmp	r0, #0
   22938:	d03b      	beq.n	229b2 <net_frag_read+0x82>
		if (offset < frag->len) {
   2293a:	8982      	ldrh	r2, [r0, #12]
   2293c:	428a      	cmp	r2, r1
   2293e:	d907      	bls.n	22950 <net_frag_read+0x20>
	u16_t copy = 0;
   22940:	2200      	movs	r2, #0
			*pos = offset;
   22942:	8021      	strh	r1, [r4, #0]
		*pos = 0;
   22944:	4696      	mov	lr, r2
	while (len-- > 0 && frag) {
   22946:	1e59      	subs	r1, r3, #1
   22948:	b289      	uxth	r1, r1
   2294a:	b103      	cbz	r3, 2294e <net_frag_read+0x1e>
   2294c:	b920      	cbnz	r0, 22958 <net_frag_read+0x28>
}
   2294e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		offset -= frag->len;
   22950:	1a89      	subs	r1, r1, r2
   22952:	b289      	uxth	r1, r1
		frag = frag->frags;
   22954:	6800      	ldr	r0, [r0, #0]
   22956:	e7ee      	b.n	22936 <net_frag_read+0x6>
   22958:	f8b4 c000 	ldrh.w	ip, [r4]
   2295c:	f10c 0301 	add.w	r3, ip, #1
   22960:	b29b      	uxth	r3, r3
		if (data) {
   22962:	b35d      	cbz	r5, 229bc <net_frag_read+0x8c>
	if (data) {
   22964:	42d5      	cmn	r5, r2
		*data = frag->data[offset];
   22966:	bf1e      	ittt	ne
   22968:	6887      	ldrne	r7, [r0, #8]
   2296a:	f817 700c 	ldrbne.w	r7, [r7, ip]
   2296e:	54af      	strbne	r7, [r5, r2]
	*pos = offset + 1;
   22970:	8023      	strh	r3, [r4, #0]
						  pos, data + copy++);
   22972:	1c56      	adds	r6, r2, #1
	if (*pos >= frag->len) {
   22974:	8982      	ldrh	r2, [r0, #12]
   22976:	429a      	cmp	r2, r3
						  pos, data + copy++);
   22978:	b2b6      	uxth	r6, r6
	if (*pos >= frag->len) {
   2297a:	d826      	bhi.n	229ca <net_frag_read+0x9a>
		return frag->frags;
   2297c:	6800      	ldr	r0, [r0, #0]
		*pos = 0;
   2297e:	f8a4 e000 	strh.w	lr, [r4]
						  pos, data + copy++);
   22982:	4632      	mov	r2, r6
		if (!frag && len) {
   22984:	bb10      	cbnz	r0, 229cc <net_frag_read+0x9c>
   22986:	b309      	cbz	r1, 229cc <net_frag_read+0x9c>
			NET_ERR("Not enough data to read");
   22988:	4b11      	ldr	r3, [pc, #68]	; (229d0 <net_frag_read+0xa0>)
   2298a:	681b      	ldr	r3, [r3, #0]
   2298c:	075b      	lsls	r3, r3, #29
   2298e:	d010      	beq.n	229b2 <net_frag_read+0x82>
   22990:	2301      	movs	r3, #1
   22992:	f04f 0200 	mov.w	r2, #0
   22996:	f363 0202 	bfi	r2, r3, #0, #3
   2299a:	490e      	ldr	r1, [pc, #56]	; (229d4 <net_frag_read+0xa4>)
   2299c:	4b0e      	ldr	r3, [pc, #56]	; (229d8 <net_frag_read+0xa8>)
   2299e:	1a5b      	subs	r3, r3, r1
   229a0:	f360 02c5 	bfi	r2, r0, #3, #3
   229a4:	08db      	lsrs	r3, r3, #3
   229a6:	f363 128f 	bfi	r2, r3, #6, #10
   229aa:	490c      	ldr	r1, [pc, #48]	; (229dc <net_frag_read+0xac>)
   229ac:	480c      	ldr	r0, [pc, #48]	; (229e0 <net_frag_read+0xb0>)
   229ae:	f7df fb9d 	bl	20ec <log_1>
	*pos = 0xffff;
   229b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   229b6:	8023      	strh	r3, [r4, #0]
	return NULL;
   229b8:	2000      	movs	r0, #0
   229ba:	e7c8      	b.n	2294e <net_frag_read+0x1e>
	*pos = offset + 1;
   229bc:	8023      	strh	r3, [r4, #0]
	if (*pos >= frag->len) {
   229be:	8986      	ldrh	r6, [r0, #12]
   229c0:	429e      	cmp	r6, r3
   229c2:	d803      	bhi.n	229cc <net_frag_read+0x9c>
		*pos = 0;
   229c4:	8025      	strh	r5, [r4, #0]
		return frag->frags;
   229c6:	6800      	ldr	r0, [r0, #0]
   229c8:	e7dc      	b.n	22984 <net_frag_read+0x54>
						  pos, data + copy++);
   229ca:	4632      	mov	r2, r6
   229cc:	460b      	mov	r3, r1
   229ce:	e7ba      	b.n	22946 <net_frag_read+0x16>
   229d0:	2000e29c 	.word	0x2000e29c
   229d4:	0002ef38 	.word	0x0002ef38
   229d8:	0002f078 	.word	0x0002f078
   229dc:	000349d9 	.word	0x000349d9
   229e0:	00034a18 	.word	0x00034a18

000229e4 <net_frag_read_be16>:
{
   229e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   229e6:	461c      	mov	r4, r3
	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   229e8:	ab03      	add	r3, sp, #12
   229ea:	9300      	str	r3, [sp, #0]
   229ec:	2302      	movs	r3, #2
   229ee:	f7ff ff9f 	bl	22930 <net_frag_read>
	*value = v16[0] << 8 | v16[1];
   229f2:	f89d 200c 	ldrb.w	r2, [sp, #12]
   229f6:	f89d 300d 	ldrb.w	r3, [sp, #13]
   229fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   229fe:	8023      	strh	r3, [r4, #0]
}
   22a00:	b004      	add	sp, #16
   22a02:	bd10      	pop	{r4, pc}

00022a04 <net_frag_read_be32>:
{
   22a04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   22a06:	461c      	mov	r4, r3
	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   22a08:	ab03      	add	r3, sp, #12
   22a0a:	9300      	str	r3, [sp, #0]
   22a0c:	2304      	movs	r3, #4
   22a0e:	f7ff ff8f 	bl	22930 <net_frag_read>
   22a12:	9b03      	ldr	r3, [sp, #12]
   22a14:	ba1b      	rev	r3, r3
	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   22a16:	6023      	str	r3, [r4, #0]
}
   22a18:	b004      	add	sp, #16
   22a1a:	bd10      	pop	{r4, pc}

00022a1c <net_pkt_write>:
{
   22a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a20:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   22a24:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   22a28:	460c      	mov	r4, r1
   22a2a:	4615      	mov	r5, r2
   22a2c:	469a      	mov	sl, r3
	if (!pkt) {
   22a2e:	4607      	mov	r7, r0
   22a30:	2800      	cmp	r0, #0
   22a32:	d164      	bne.n	22afe <net_pkt_write+0xe2>
		NET_ERR("Invalid packet");
   22a34:	4b48      	ldr	r3, [pc, #288]	; (22b58 <net_pkt_write+0x13c>)
   22a36:	681b      	ldr	r3, [r3, #0]
   22a38:	075b      	lsls	r3, r3, #29
   22a3a:	d010      	beq.n	22a5e <net_pkt_write+0x42>
   22a3c:	2301      	movs	r3, #1
   22a3e:	f04f 0200 	mov.w	r2, #0
   22a42:	f363 0202 	bfi	r2, r3, #0, #3
   22a46:	4945      	ldr	r1, [pc, #276]	; (22b5c <net_pkt_write+0x140>)
   22a48:	4b45      	ldr	r3, [pc, #276]	; (22b60 <net_pkt_write+0x144>)
   22a4a:	1a5b      	subs	r3, r3, r1
   22a4c:	f360 02c5 	bfi	r2, r0, #3, #3
   22a50:	08db      	lsrs	r3, r3, #3
   22a52:	f363 128f 	bfi	r2, r3, #6, #10
   22a56:	4943      	ldr	r1, [pc, #268]	; (22b64 <net_pkt_write+0x148>)
   22a58:	4843      	ldr	r0, [pc, #268]	; (22b68 <net_pkt_write+0x14c>)
   22a5a:	f7df fb47 	bl	20ec <log_1>
	*pos = 0xffff;
   22a5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22a62:	f8aa 3000 	strh.w	r3, [sl]
	return NULL;
   22a66:	2400      	movs	r4, #0
   22a68:	e032      	b.n	22ad0 <net_pkt_write+0xb4>
		if (offset > frag->len) {
   22a6a:	d248      	bcs.n	22afe <net_pkt_write+0xe2>
			tailroom = net_buf_tailroom(frag);
   22a6c:	f104 0b08 	add.w	fp, r4, #8
   22a70:	4658      	mov	r0, fp
			offset -= frag->len;
   22a72:	1aed      	subs	r5, r5, r3
			tailroom = net_buf_tailroom(frag);
   22a74:	f7fc fcb8 	bl	1f3e8 <net_buf_simple_tailroom>
			offset -= frag->len;
   22a78:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   22a7a:	b286      	uxth	r6, r0
			if (offset < tailroom) {
   22a7c:	42b5      	cmp	r5, r6
   22a7e:	d22a      	bcs.n	22ad6 <net_pkt_write+0xba>
				net_buf_add(frag, offset);
   22a80:	4629      	mov	r1, r5
   22a82:	4658      	mov	r0, fp
   22a84:	f7fc fc44 	bl	1f310 <net_buf_simple_add>
				*pos = frag->len;
   22a88:	89a5      	ldrh	r5, [r4, #12]
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   22a8a:	89e6      	ldrh	r6, [r4, #14]
   22a8c:	f104 0b08 	add.w	fp, r4, #8
   22a90:	4658      	mov	r0, fp
   22a92:	f7fc fca5 	bl	1f3e0 <net_buf_simple_headroom>
   22a96:	1a36      	subs	r6, r6, r0
   22a98:	1b76      	subs	r6, r6, r5
		u16_t count = min(len, space);
   22a9a:	b2b6      	uxth	r6, r6
   22a9c:	4546      	cmp	r6, r8
		memcpy(frag->data + offset, data, count);
   22a9e:	68a0      	ldr	r0, [r4, #8]
		u16_t count = min(len, space);
   22aa0:	bf28      	it	cs
   22aa2:	4646      	movcs	r6, r8
		memcpy(frag->data + offset, data, count);
   22aa4:	4649      	mov	r1, r9
   22aa6:	4428      	add	r0, r5
   22aa8:	4632      	mov	r2, r6
   22aaa:	f7e4 f8ed 	bl	6c88 <memcpy>
		size_to_add = offset + count - frag->len;
   22aae:	89a1      	ldrh	r1, [r4, #12]
   22ab0:	4435      	add	r5, r6
   22ab2:	1a69      	subs	r1, r5, r1
		if (size_to_add > 0) {
   22ab4:	2900      	cmp	r1, #0
   22ab6:	dd02      	ble.n	22abe <net_pkt_write+0xa2>
			net_buf_add(frag, size_to_add);
   22ab8:	4658      	mov	r0, fp
   22aba:	f7fc fc29 	bl	1f310 <net_buf_simple_add>
		len -= count;
   22abe:	eba8 0806 	sub.w	r8, r8, r6
   22ac2:	fa1f f888 	uxth.w	r8, r8
		if (len == 0) {
   22ac6:	f1b8 0f00 	cmp.w	r8, #0
   22aca:	d135      	bne.n	22b38 <net_pkt_write+0x11c>
			*pos = offset + count;
   22acc:	f8aa 5000 	strh.w	r5, [sl]
}
   22ad0:	4620      	mov	r0, r4
   22ad2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (offset == tailroom) {
   22ad6:	d104      	bne.n	22ae2 <net_pkt_write+0xc6>
				net_buf_add(frag, tailroom);
   22ad8:	b281      	uxth	r1, r0
   22ada:	4658      	mov	r0, fp
   22adc:	f7fc fc18 	bl	1f310 <net_buf_simple_add>
   22ae0:	e01f      	b.n	22b22 <net_pkt_write+0x106>
			if (offset > tailroom) {
   22ae2:	d90c      	bls.n	22afe <net_pkt_write+0xe2>
				net_buf_add(frag, tailroom);
   22ae4:	b281      	uxth	r1, r0
   22ae6:	4658      	mov	r0, fp
   22ae8:	f7fc fc12 	bl	1f310 <net_buf_simple_add>
				frag = check_and_create_data(pkt,
   22aec:	6824      	ldr	r4, [r4, #0]
				offset -= tailroom;
   22aee:	1bad      	subs	r5, r5, r6
   22af0:	b2ad      	uxth	r5, r5
	if (data) {
   22af2:	b924      	cbnz	r4, 22afe <net_pkt_write+0xe2>
   22af4:	990c      	ldr	r1, [sp, #48]	; 0x30
   22af6:	4638      	mov	r0, r7
   22af8:	f7ff fdb6 	bl	22668 <check_and_create_data.part.23>
   22afc:	4604      	mov	r4, r0
   22afe:	b934      	cbnz	r4, 22b0e <net_pkt_write+0xf2>
   22b00:	990c      	ldr	r1, [sp, #48]	; 0x30
   22b02:	4638      	mov	r0, r7
   22b04:	f7ff fdb0 	bl	22668 <check_and_create_data.part.23>
		if (!frag) {
   22b08:	4604      	mov	r4, r0
   22b0a:	2800      	cmp	r0, #0
   22b0c:	d0a7      	beq.n	22a5e <net_pkt_write+0x42>
		if (offset < frag->len) {
   22b0e:	89a3      	ldrh	r3, [r4, #12]
   22b10:	42ab      	cmp	r3, r5
   22b12:	d8ba      	bhi.n	22a8a <net_pkt_write+0x6e>
		if (offset == frag->len) {
   22b14:	d1a9      	bne.n	22a6a <net_pkt_write+0x4e>
			if (net_buf_tailroom(frag)) {
   22b16:	f104 0008 	add.w	r0, r4, #8
   22b1a:	f7fc fc65 	bl	1f3e8 <net_buf_simple_tailroom>
   22b1e:	2800      	cmp	r0, #0
   22b20:	d1b3      	bne.n	22a8a <net_pkt_write+0x6e>
				return check_and_create_data(pkt,
   22b22:	6824      	ldr	r4, [r4, #0]
	if (data) {
   22b24:	b934      	cbnz	r4, 22b34 <net_pkt_write+0x118>
   22b26:	990c      	ldr	r1, [sp, #48]	; 0x30
   22b28:	4638      	mov	r0, r7
   22b2a:	f7ff fd9d 	bl	22668 <check_and_create_data.part.23>
   22b2e:	4604      	mov	r4, r0
	if (!frag) {
   22b30:	2800      	cmp	r0, #0
   22b32:	d094      	beq.n	22a5e <net_pkt_write+0x42>
   22b34:	2500      	movs	r5, #0
   22b36:	e7a8      	b.n	22a8a <net_pkt_write+0x6e>
		frag = frag->frags;
   22b38:	6824      	ldr	r4, [r4, #0]
		data += count;
   22b3a:	44b1      	add	r9, r6
		if (!frag) {
   22b3c:	2c00      	cmp	r4, #0
   22b3e:	d1f9      	bne.n	22b34 <net_pkt_write+0x118>
			frag = net_pkt_get_frag(pkt, timeout);
   22b40:	990c      	ldr	r1, [sp, #48]	; 0x30
   22b42:	4638      	mov	r0, r7
   22b44:	f7ff fc9a 	bl	2247c <net_pkt_get_frag>
			if (!frag) {
   22b48:	4604      	mov	r4, r0
   22b4a:	2800      	cmp	r0, #0
   22b4c:	d087      	beq.n	22a5e <net_pkt_write+0x42>
			net_pkt_frag_add(pkt, frag);
   22b4e:	4601      	mov	r1, r0
   22b50:	4638      	mov	r0, r7
   22b52:	f7ff fd7b 	bl	2264c <net_pkt_frag_add>
   22b56:	e7ed      	b.n	22b34 <net_pkt_write+0x118>
   22b58:	2000e29c 	.word	0x2000e29c
   22b5c:	0002ef38 	.word	0x0002ef38
   22b60:	0002f078 	.word	0x0002f078
   22b64:	000349e7 	.word	0x000349e7
   22b68:	00034b51 	.word	0x00034b51

00022b6c <net_pkt_get_info>:
{
   22b6c:	b510      	push	{r4, lr}
	if (rx) {
   22b6e:	b108      	cbz	r0, 22b74 <net_pkt_get_info+0x8>
		*rx = &rx_pkts;
   22b70:	4c05      	ldr	r4, [pc, #20]	; (22b88 <net_pkt_get_info+0x1c>)
   22b72:	6004      	str	r4, [r0, #0]
	if (tx) {
   22b74:	b109      	cbz	r1, 22b7a <net_pkt_get_info+0xe>
		*tx = &tx_pkts;
   22b76:	4805      	ldr	r0, [pc, #20]	; (22b8c <net_pkt_get_info+0x20>)
   22b78:	6008      	str	r0, [r1, #0]
	if (rx_data) {
   22b7a:	b10a      	cbz	r2, 22b80 <net_pkt_get_info+0x14>
		*rx_data = &rx_bufs;
   22b7c:	4904      	ldr	r1, [pc, #16]	; (22b90 <net_pkt_get_info+0x24>)
   22b7e:	6011      	str	r1, [r2, #0]
	if (tx_data) {
   22b80:	b10b      	cbz	r3, 22b86 <net_pkt_get_info+0x1a>
		*tx_data = &tx_bufs;
   22b82:	4a04      	ldr	r2, [pc, #16]	; (22b94 <net_pkt_get_info+0x28>)
   22b84:	601a      	str	r2, [r3, #0]
}
   22b86:	bd10      	pop	{r4, pc}
   22b88:	2000e2f8 	.word	0x2000e2f8
   22b8c:	2000e314 	.word	0x2000e314
   22b90:	2000e514 	.word	0x2000e514
   22b94:	2000e534 	.word	0x2000e534

00022b98 <net_pkt_get_src_addr>:
}

int net_pkt_get_src_addr(struct net_pkt *pkt, struct sockaddr *addr,
			 socklen_t addrlen)
{
	return net_pkt_get_addr(pkt, true, addr, addrlen);
   22b98:	4613      	mov	r3, r2
   22b9a:	460a      	mov	r2, r1
   22b9c:	2101      	movs	r1, #1
   22b9e:	f7ff bb3d 	b.w	2221c <net_pkt_get_addr>

00022ba2 <net_pkt_get_dst_addr>:
}

int net_pkt_get_dst_addr(struct net_pkt *pkt, struct sockaddr *addr,
			 socklen_t addrlen)
{
	return net_pkt_get_addr(pkt, false, addr, addrlen);
   22ba2:	4613      	mov	r3, r2
   22ba4:	460a      	mov	r2, r1
   22ba6:	2100      	movs	r1, #0
   22ba8:	f7ff bb38 	b.w	2221c <net_pkt_get_addr>

00022bac <net_frag_get_pos>:
#endif /* CONFIG_NET_PKT_LOG_LEVEL >= LOG_LEVEL_DBG */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   22bac:	b507      	push	{r0, r1, r2, lr}
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   22bae:	2300      	movs	r3, #0
   22bb0:	9300      	str	r3, [sp, #0]
   22bb2:	6940      	ldr	r0, [r0, #20]
   22bb4:	f7ff febc 	bl	22930 <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   22bb8:	b003      	add	sp, #12
   22bba:	f85d fb04 	ldr.w	pc, [sp], #4

00022bbe <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   22bbe:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
   22bc0:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
				net_pkt_ip_hdr_len(pkt) +
   22bc4:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
	frag = net_frag_get_pos(pkt,
   22bc8:	4419      	add	r1, r3
   22bca:	f10d 0206 	add.w	r2, sp, #6
   22bce:	b289      	uxth	r1, r1
   22bd0:	f7ff ffec 	bl	22bac <net_frag_get_pos>
				net_pkt_ipv6_ext_len(pkt),
				&offset);
	if (!frag) {
   22bd4:	b118      	cbz	r0, 22bde <net_pkt_icmp_data+0x20>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   22bd6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   22bda:	6880      	ldr	r0, [r0, #8]
   22bdc:	4418      	add	r0, r3
}
   22bde:	b003      	add	sp, #12
   22be0:	f85d fb04 	ldr.w	pc, [sp], #4

00022be4 <net_pkt_udp_data>:

	return frag->data + offset;
}

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   22be4:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
   22be6:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
				net_pkt_ip_hdr_len(pkt) +
   22bea:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
	frag = net_frag_get_pos(pkt,
   22bee:	4419      	add	r1, r3
   22bf0:	f10d 0206 	add.w	r2, sp, #6
   22bf4:	b289      	uxth	r1, r1
   22bf6:	f7ff ffd9 	bl	22bac <net_frag_get_pos>
				net_pkt_ipv6_ext_len(pkt),
				&offset);
	if (!frag) {
   22bfa:	b118      	cbz	r0, 22c04 <net_pkt_udp_data+0x20>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   22bfc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   22c00:	6880      	ldr	r0, [r0, #8]
   22c02:	4418      	add	r0, r3
}
   22c04:	b003      	add	sp, #12
   22c06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00022c0c <net_pkt_tcp_data>:

struct net_tcp_hdr *net_pkt_tcp_data(struct net_pkt *pkt)
{
   22c0c:	b513      	push	{r0, r1, r4, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
   22c0e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
				net_pkt_ip_hdr_len(pkt) +
   22c12:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
	frag = net_frag_get_pos(pkt,
   22c16:	4419      	add	r1, r3
   22c18:	f10d 0206 	add.w	r2, sp, #6
   22c1c:	b289      	uxth	r1, r1
   22c1e:	f7ff ffc5 	bl	22bac <net_frag_get_pos>
				net_pkt_ipv6_ext_len(pkt),
				&offset);
	if (!frag) {
   22c22:	b1c0      	cbz	r0, 22c56 <net_pkt_tcp_data+0x4a>
		/* We tried to read past the end of the data */
		too_short_msg("tcp data", pkt, offset, 0);
		return NULL;
	}

	if (!frag->data) {
   22c24:	6884      	ldr	r4, [r0, #8]
   22c26:	b9c4      	cbnz	r4, 22c5a <net_pkt_tcp_data+0x4e>
		NET_ERR("NULL fragment data!");
   22c28:	4b0e      	ldr	r3, [pc, #56]	; (22c64 <net_pkt_tcp_data+0x58>)
   22c2a:	6818      	ldr	r0, [r3, #0]
   22c2c:	f010 0007 	ands.w	r0, r0, #7
   22c30:	d011      	beq.n	22c56 <net_pkt_tcp_data+0x4a>
   22c32:	2301      	movs	r3, #1
   22c34:	f04f 0200 	mov.w	r2, #0
   22c38:	f363 0202 	bfi	r2, r3, #0, #3
   22c3c:	490a      	ldr	r1, [pc, #40]	; (22c68 <net_pkt_tcp_data+0x5c>)
   22c3e:	4b0b      	ldr	r3, [pc, #44]	; (22c6c <net_pkt_tcp_data+0x60>)
   22c40:	480b      	ldr	r0, [pc, #44]	; (22c70 <net_pkt_tcp_data+0x64>)
   22c42:	1a5b      	subs	r3, r3, r1
   22c44:	08db      	lsrs	r3, r3, #3
   22c46:	f364 02c5 	bfi	r2, r4, #3, #3
   22c4a:	f363 128f 	bfi	r2, r3, #6, #10
   22c4e:	4909      	ldr	r1, [pc, #36]	; (22c74 <net_pkt_tcp_data+0x68>)
   22c50:	f7df fa4c 	bl	20ec <log_1>
		return NULL;
   22c54:	4620      	mov	r0, r4
	}

	return (struct net_tcp_hdr *)(frag->data + offset);
}
   22c56:	b002      	add	sp, #8
   22c58:	bd10      	pop	{r4, pc}
	return (struct net_tcp_hdr *)(frag->data + offset);
   22c5a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   22c5e:	4420      	add	r0, r4
   22c60:	e7f9      	b.n	22c56 <net_pkt_tcp_data+0x4a>
   22c62:	bf00      	nop
   22c64:	2000e29c 	.word	0x2000e29c
   22c68:	0002ef38 	.word	0x0002ef38
   22c6c:	0002f078 	.word	0x0002f078
   22c70:	00034b39 	.word	0x00034b39
   22c74:	00034939 	.word	0x00034939

00022c78 <net_pkt_set_appdata_values>:

void net_pkt_set_appdata_values(struct net_pkt *pkt,
				    enum net_ip_protocol proto)
{
   22c78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	size_t total_len = net_pkt_get_len(pkt);
   22c7a:	6943      	ldr	r3, [r0, #20]
{
   22c7c:	4604      	mov	r4, r0
	size_t bytes = 0;
   22c7e:	2500      	movs	r5, #0
	while (buf) {
   22c80:	b92b      	cbnz	r3, 22c8e <net_pkt_set_appdata_values+0x16>
	u16_t proto_len = 0;
	struct net_buf *frag;
	u16_t offset;

	switch (proto) {
   22c82:	2906      	cmp	r1, #6
   22c84:	d007      	beq.n	22c96 <net_pkt_set_appdata_values+0x1e>
   22c86:	2911      	cmp	r1, #17
   22c88:	d03f      	beq.n	22d0a <net_pkt_set_appdata_values+0x92>
			       net_pkt_ipv6_ext_len(pkt) - proto_len);

	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
			"Wrong appdatalen %u, total %zu",
			net_pkt_appdatalen(pkt), total_len);
}
   22c8a:	b004      	add	sp, #16
   22c8c:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
   22c8e:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   22c90:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   22c92:	4415      	add	r5, r2
   22c94:	e7f4      	b.n	22c80 <net_pkt_set_appdata_values+0x8>
		proto_len = tcp_hdr_len(pkt);
   22c96:	4620      	mov	r0, r4
   22c98:	f008 f9d2 	bl	2b040 <tcp_hdr_len>
   22c9c:	b286      	uxth	r6, r0
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   22c9e:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
   22ca2:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   22ca6:	4419      	add	r1, r3
   22ca8:	4431      	add	r1, r6
   22caa:	f10d 020e 	add.w	r2, sp, #14
   22cae:	b289      	uxth	r1, r1
   22cb0:	4620      	mov	r0, r4
   22cb2:	f7ff ff7b 	bl	22bac <net_frag_get_pos>
	if (frag) {
   22cb6:	b120      	cbz	r0, 22cc2 <net_pkt_set_appdata_values+0x4a>
		net_pkt_set_appdata(pkt, frag->data + offset);
   22cb8:	6883      	ldr	r3, [r0, #8]
   22cba:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   22cbe:	4413      	add	r3, r2
	pkt->appdata = data;
   22cc0:	6263      	str	r3, [r4, #36]	; 0x24
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   22cc2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
   22cc6:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   22cca:	1aaa      	subs	r2, r5, r2
   22ccc:	1ad2      	subs	r2, r2, r3
   22cce:	1b92      	subs	r2, r2, r6
   22cd0:	b292      	uxth	r2, r2
	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
   22cd2:	42aa      	cmp	r2, r5
	pkt->appdatalen = len;
   22cd4:	87e2      	strh	r2, [r4, #62]	; 0x3e
   22cd6:	d3d8      	bcc.n	22c8a <net_pkt_set_appdata_values+0x12>
   22cd8:	4b0d      	ldr	r3, [pc, #52]	; (22d10 <net_pkt_set_appdata_values+0x98>)
   22cda:	681b      	ldr	r3, [r3, #0]
   22cdc:	075b      	lsls	r3, r3, #29
   22cde:	d0d4      	beq.n	22c8a <net_pkt_set_appdata_values+0x12>
   22ce0:	2301      	movs	r3, #1
   22ce2:	f04f 0100 	mov.w	r1, #0
   22ce6:	f363 0102 	bfi	r1, r3, #0, #3
   22cea:	480a      	ldr	r0, [pc, #40]	; (22d14 <net_pkt_set_appdata_values+0x9c>)
   22cec:	4b0a      	ldr	r3, [pc, #40]	; (22d18 <net_pkt_set_appdata_values+0xa0>)
   22cee:	1a1b      	subs	r3, r3, r0
   22cf0:	08db      	lsrs	r3, r3, #3
   22cf2:	f36f 01c5 	bfc	r1, #3, #3
   22cf6:	f363 118f 	bfi	r1, r3, #6, #10
   22cfa:	f8ad 1000 	strh.w	r1, [sp]
   22cfe:	462b      	mov	r3, r5
   22d00:	4906      	ldr	r1, [pc, #24]	; (22d1c <net_pkt_set_appdata_values+0xa4>)
   22d02:	4807      	ldr	r0, [pc, #28]	; (22d20 <net_pkt_set_appdata_values+0xa8>)
   22d04:	f7df fa1e 	bl	2144 <log_3>
   22d08:	e7bf      	b.n	22c8a <net_pkt_set_appdata_values+0x12>
		proto_len = sizeof(struct net_udp_hdr);
   22d0a:	2608      	movs	r6, #8
   22d0c:	e7c7      	b.n	22c9e <net_pkt_set_appdata_values+0x26>
   22d0e:	bf00      	nop
   22d10:	2000e29c 	.word	0x2000e29c
   22d14:	0002ef38 	.word	0x0002ef38
   22d18:	0002f078 	.word	0x0002f078
   22d1c:	0003494a 	.word	0x0003494a
   22d20:	00034adf 	.word	0x00034adf

00022d24 <net_pkt_clone>:

struct net_pkt *net_pkt_clone(struct net_pkt *pkt, s32_t timeout)
{
   22d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22d26:	460f      	mov	r7, r1
	struct net_pkt *clone;

	if (!pkt) {
   22d28:	4605      	mov	r5, r0
   22d2a:	b910      	cbnz	r0, 22d32 <net_pkt_clone+0xe>
		return NULL;
   22d2c:	2400      	movs	r4, #0
#endif

	NET_DBG("Cloned %p to %p", pkt, clone);

	return clone;
}
   22d2e:	4620      	mov	r0, r4
   22d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	clone = net_pkt_get_reserve(pkt->slab, 0, timeout);
   22d32:	460a      	mov	r2, r1
   22d34:	6900      	ldr	r0, [r0, #16]
   22d36:	2100      	movs	r1, #0
   22d38:	f7ff fada 	bl	222f0 <net_pkt_get_reserve>
	if (!clone) {
   22d3c:	4604      	mov	r4, r0
   22d3e:	2800      	cmp	r0, #0
   22d40:	d0f4      	beq.n	22d2c <net_pkt_clone+0x8>
	clone->frags = NULL;
   22d42:	2100      	movs	r1, #0
   22d44:	6141      	str	r1, [r0, #20]
	if (pkt->frags) {
   22d46:	696e      	ldr	r6, [r5, #20]
   22d48:	b17e      	cbz	r6, 22d6a <net_pkt_clone+0x46>
   22d4a:	89b3      	ldrh	r3, [r6, #12]
		buf = buf->frags;
   22d4c:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
   22d4e:	4419      	add	r1, r3
	while (buf) {
   22d50:	2e00      	cmp	r6, #0
   22d52:	d1fa      	bne.n	22d4a <net_pkt_clone+0x26>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   22d54:	463b      	mov	r3, r7
   22d56:	4632      	mov	r2, r6
   22d58:	4628      	mov	r0, r5
   22d5a:	f7ff fc9b 	bl	22694 <net_pkt_copy>
		clone->frags = net_pkt_copy_all(pkt, 0, timeout);
   22d5e:	6160      	str	r0, [r4, #20]
		if (!clone->frags) {
   22d60:	b918      	cbnz	r0, 22d6a <net_pkt_clone+0x46>
			net_pkt_unref(clone);
   22d62:	4620      	mov	r0, r4
   22d64:	f7ff fc4b 	bl	225fe <net_pkt_unref>
   22d68:	e7e0      	b.n	22d2c <net_pkt_clone+0x8>
	clone->context = pkt->context;
   22d6a:	69ab      	ldr	r3, [r5, #24]
   22d6c:	61a3      	str	r3, [r4, #24]
	clone->token = pkt->token;
   22d6e:	69eb      	ldr	r3, [r5, #28]
   22d70:	61e3      	str	r3, [r4, #28]
	clone->iface = pkt->iface;
   22d72:	6a2b      	ldr	r3, [r5, #32]
   22d74:	6223      	str	r3, [r4, #32]
	if (clone->frags) {
   22d76:	6963      	ldr	r3, [r4, #20]
   22d78:	b16b      	cbz	r3, 22d96 <net_pkt_clone+0x72>
		memcpy(&clone->lladdr_src, &pkt->lladdr_src,
   22d7a:	2208      	movs	r2, #8
   22d7c:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   22d80:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   22d84:	f7e3 ff80 	bl	6c88 <memcpy>
		memcpy(&clone->lladdr_dst, &pkt->lladdr_dst,
   22d88:	2208      	movs	r2, #8
   22d8a:	f105 0134 	add.w	r1, r5, #52	; 0x34
   22d8e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   22d92:	f7e3 ff79 	bl	6c88 <memcpy>
	pkt->next_hdr = hdr;
   22d96:	2300      	movs	r3, #0
   22d98:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_set_ip_hdr_len(clone, net_pkt_ip_hdr_len(pkt));
   22d9a:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
	pkt->ip_hdr_len = len;
   22d9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	net_pkt_set_appdatalen(clone, net_pkt_appdatalen(pkt));
   22da2:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
	pkt->appdatalen = len;
   22da4:	87e3      	strh	r3, [r4, #62]	; 0x3e
	return pkt->family;
   22da6:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
	pkt->family = family;
   22daa:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
	return pkt->family;
   22dae:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	pkt->family = family;
   22db2:	f363 02c6 	bfi	r2, r3, #3, #4
   22db6:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
	clone->ipv6_hop_limit = pkt->ipv6_hop_limit;
   22dba:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
   22dbe:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	clone->ipv6_ext_len = pkt->ipv6_ext_len;
   22dc2:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
   22dc6:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	clone->ipv6_ext_opt_len = pkt->ipv6_ext_opt_len;
   22dca:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
   22dce:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	clone->ipv6_prev_hdr_start = pkt->ipv6_prev_hdr_start;
   22dd2:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
   22dd6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
	return clone;
   22dda:	e7a8      	b.n	22d2e <net_pkt_clone+0xa>

00022ddc <net_pkt_init>:
			 sizeof(struct net_pkt)));
	NET_DBG("  %d RX data (%u bytes) and %d TX data (%u bytes) buffers",
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
   22ddc:	4770      	bx	lr

00022dde <k_work_submit_to_queue>:
{
   22dde:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22de0:	f101 0308 	add.w	r3, r1, #8
   22de4:	f3bf 8f5b 	dmb	ish
   22de8:	e853 2f00 	ldrex	r2, [r3]
   22dec:	f042 0c01 	orr.w	ip, r2, #1
   22df0:	e843 ce00 	strex	lr, ip, [r3]
   22df4:	f1be 0f00 	cmp.w	lr, #0
   22df8:	d1f6      	bne.n	22de8 <k_work_submit_to_queue+0xa>
   22dfa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   22dfe:	07d3      	lsls	r3, r2, #31
   22e00:	d403      	bmi.n	22e0a <k_work_submit_to_queue+0x2c>
}
   22e02:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   22e06:	f00a bf19 	b.w	2dc3c <k_queue_append>
}
   22e0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00022e10 <net_tc_submit_to_tx_queue>:
static struct net_traffic_class tx_classes[NET_TC_TX_COUNT];
static struct net_traffic_class rx_classes[NET_TC_RX_COUNT];

void net_tc_submit_to_tx_queue(u8_t tc, struct net_pkt *pkt)
{
	k_work_submit_to_queue(&tx_classes[tc].work_q, net_pkt_work(pkt));
   22e10:	4b03      	ldr	r3, [pc, #12]	; (22e20 <net_tc_submit_to_tx_queue+0x10>)
   22e12:	eb00 1040 	add.w	r0, r0, r0, lsl #5
   22e16:	3104      	adds	r1, #4
   22e18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   22e1c:	f7ff bfdf 	b.w	22dde <k_work_submit_to_queue>
   22e20:	200026b4 	.word	0x200026b4

00022e24 <net_tc_submit_to_rx_queue>:
}

void net_tc_submit_to_rx_queue(u8_t tc, struct net_pkt *pkt)
{
	k_work_submit_to_queue(&rx_classes[tc].work_q, net_pkt_work(pkt));
   22e24:	4b03      	ldr	r3, [pc, #12]	; (22e34 <net_tc_submit_to_rx_queue+0x10>)
   22e26:	eb00 1040 	add.w	r0, r0, r0, lsl #5
   22e2a:	3104      	adds	r1, #4
   22e2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   22e30:	f7ff bfd5 	b.w	22dde <k_work_submit_to_queue>
   22e34:	20002630 	.word	0x20002630

00022e38 <net_tx_priority2tc>:

int net_tx_priority2tc(enum net_priority prio)
{
	if (prio > NET_PRIORITY_NC) {
		/* Use default value suggested in 802.1Q */
		prio = NET_PRIORITY_BE;
   22e38:	2807      	cmp	r0, #7
   22e3a:	bf88      	it	hi
   22e3c:	2000      	movhi	r0, #0
	}

	return tx_prio2tc_map[prio];
}
   22e3e:	4b01      	ldr	r3, [pc, #4]	; (22e44 <net_tx_priority2tc+0xc>)
   22e40:	5c18      	ldrb	r0, [r3, r0]
   22e42:	4770      	bx	lr
   22e44:	00034b7e 	.word	0x00034b7e

00022e48 <net_rx_priority2tc>:
   22e48:	f7ff bff6 	b.w	22e38 <net_tx_priority2tc>

00022e4c <net_tc_tx_init>:
/* Create workqueue for each traffic class we are using. All the network
 * traffic goes through these classes. There needs to be at least one traffic
 * class in the system.
 */
void net_tc_tx_init(void)
{
   22e4c:	b510      	push	{r4, lr}

#if defined(CONFIG_NET_SHELL)
		/* Fix the thread start address so that "net stacks"
		 * command will print correct stack information.
		 */
		NET_STACK_GET_NAME(TX, tx_stack, 0)[i].stack = tx_stack[i];
   22e4e:	4b0c      	ldr	r3, [pc, #48]	; (22e80 <net_tc_tx_init+0x34>)
		tx_classes[i].tc = thread_priority;
   22e50:	4c0c      	ldr	r4, [pc, #48]	; (22e84 <net_tc_tx_init+0x38>)
		NET_STACK_GET_NAME(TX, tx_stack, 0)[i].stack = tx_stack[i];
   22e52:	490d      	ldr	r1, [pc, #52]	; (22e88 <net_tc_tx_init+0x3c>)
   22e54:	6019      	str	r1, [r3, #0]
		tx_classes[i].tc = thread_priority;
   22e56:	2207      	movs	r2, #7
   22e58:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		NET_STACK_GET_NAME(TX, tx_stack, 0)[i].prio = thread_priority;
   22e5c:	615a      	str	r2, [r3, #20]
		NET_STACK_GET_NAME(TX, tx_stack, 0)[i].idx = i;
   22e5e:	2200      	movs	r2, #0
   22e60:	619a      	str	r2, [r3, #24]
			"prio %d (%d)", i,
			&tx_classes[i].work_q.queue, TX_STACK(i),
			K_THREAD_STACK_SIZEOF(tx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&tx_classes[i].work_q,
   22e62:	4620      	mov	r0, r4
   22e64:	f06f 0308 	mvn.w	r3, #8
   22e68:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   22e6c:	f00b fbd2 	bl	2e614 <k_work_q_start>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   22e70:	f104 0010 	add.w	r0, r4, #16
   22e74:	4905      	ldr	r1, [pc, #20]	; (22e8c <net_tc_tx_init+0x40>)
			       tx_stack[i],
			       K_THREAD_STACK_SIZEOF(tx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&tx_classes[i].work_q.thread, "tx_workq");
	}
}
   22e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22e7a:	f00b ba9d 	b.w	2e3b8 <_impl_k_thread_name_set>
   22e7e:	bf00      	nop
   22e80:	2000e5a0 	.word	0x2000e5a0
   22e84:	200026b4 	.word	0x200026b4
   22e88:	2000b488 	.word	0x2000b488
   22e8c:	00034b75 	.word	0x00034b75

00022e90 <net_tc_rx_init>:

void net_tc_rx_init(void)
{
   22e90:	b510      	push	{r4, lr}

#if defined(CONFIG_NET_SHELL)
		/* Fix the thread start address so that "net stacks"
		 * command will print correct stack information.
		 */
		NET_STACK_GET_NAME(RX, rx_stack, 0)[i].stack = rx_stack[i];
   22e92:	4b0c      	ldr	r3, [pc, #48]	; (22ec4 <net_tc_rx_init+0x34>)
		rx_classes[i].tc = thread_priority;
   22e94:	4c0c      	ldr	r4, [pc, #48]	; (22ec8 <net_tc_rx_init+0x38>)
		NET_STACK_GET_NAME(RX, rx_stack, 0)[i].stack = rx_stack[i];
   22e96:	490d      	ldr	r1, [pc, #52]	; (22ecc <net_tc_rx_init+0x3c>)
   22e98:	6219      	str	r1, [r3, #32]
		rx_classes[i].tc = thread_priority;
   22e9a:	2207      	movs	r2, #7
   22e9c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		NET_STACK_GET_NAME(RX, rx_stack, 0)[i].prio = thread_priority;
   22ea0:	635a      	str	r2, [r3, #52]	; 0x34
		NET_STACK_GET_NAME(RX, rx_stack, 0)[i].idx = i;
   22ea2:	2200      	movs	r2, #0
   22ea4:	639a      	str	r2, [r3, #56]	; 0x38
			"prio %d (%d)", i,
			&rx_classes[i].work_q.queue, RX_STACK(i),
			K_THREAD_STACK_SIZEOF(rx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&rx_classes[i].work_q,
   22ea6:	4620      	mov	r0, r4
   22ea8:	f06f 0308 	mvn.w	r3, #8
   22eac:	f240 52dc 	movw	r2, #1500	; 0x5dc
   22eb0:	f00b fbb0 	bl	2e614 <k_work_q_start>
   22eb4:	f104 0010 	add.w	r0, r4, #16
   22eb8:	4905      	ldr	r1, [pc, #20]	; (22ed0 <net_tc_rx_init+0x40>)
			       rx_stack[i],
			       K_THREAD_STACK_SIZEOF(rx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&rx_classes[i].work_q.thread, "rx_workq");
	}
}
   22eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22ebe:	f00b ba7b 	b.w	2e3b8 <_impl_k_thread_name_set>
   22ec2:	bf00      	nop
   22ec4:	2000e5a0 	.word	0x2000e5a0
   22ec8:	20002630 	.word	0x20002630
   22ecc:	2000b938 	.word	0x2000b938
   22ed0:	00034b6c 	.word	0x00034b6c

00022ed4 <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   22ed4:	b510      	push	{r4, lr}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   22ed6:	3a01      	subs	r2, #1
   22ed8:	440a      	add	r2, r1

	while (ptr < end) {
   22eda:	4291      	cmp	r1, r2
   22edc:	d309      	bcc.n	22ef2 <calc_chksum+0x1e>
			sum++;
		}
		ptr += 2;
	}

	if (ptr == end) {
   22ede:	d107      	bne.n	22ef0 <calc_chksum+0x1c>
		tmp = ptr[0] << 8;
   22ee0:	780b      	ldrb	r3, [r1, #0]
   22ee2:	021b      	lsls	r3, r3, #8
		sum += tmp;
   22ee4:	4418      	add	r0, r3
   22ee6:	b280      	uxth	r0, r0
		if (sum < tmp) {
   22ee8:	4283      	cmp	r3, r0
			sum++;
   22eea:	bf84      	itt	hi
   22eec:	3001      	addhi	r0, #1
   22eee:	b280      	uxthhi	r0, r0
		}
	}

	return sum;
}
   22ef0:	bd10      	pop	{r4, pc}
		tmp = (ptr[0] << 8) + ptr[1];
   22ef2:	780c      	ldrb	r4, [r1, #0]
   22ef4:	784b      	ldrb	r3, [r1, #1]
   22ef6:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   22efa:	b29b      	uxth	r3, r3
		sum += tmp;
   22efc:	4418      	add	r0, r3
   22efe:	b280      	uxth	r0, r0
		if (sum < tmp) {
   22f00:	4283      	cmp	r3, r0
			sum++;
   22f02:	bf84      	itt	hi
   22f04:	3001      	addhi	r0, #1
   22f06:	b280      	uxthhi	r0, r0
		ptr += 2;
   22f08:	3102      	adds	r1, #2
   22f0a:	e7e6      	b.n	22eda <calc_chksum+0x6>

00022f0c <net_byte_to_hex>:
{
   22f0c:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   22f0e:	090c      	lsrs	r4, r1, #4
		if (i == 0 && !pad && !val) {
   22f10:	b19b      	cbz	r3, 22f3a <net_byte_to_hex+0x2e>
		if (val < 10) {
   22f12:	2c09      	cmp	r4, #9
			*ptr++ = (char) (val - 10 + base);
   22f14:	bf86      	itte	hi
   22f16:	f1a2 050a 	subhi.w	r5, r2, #10
   22f1a:	1964      	addhi	r4, r4, r5
			*ptr++ = (char) (val + '0');
   22f1c:	3430      	addls	r4, #48	; 0x30
   22f1e:	1c43      	adds	r3, r0, #1
   22f20:	7004      	strb	r4, [r0, #0]
   22f22:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   22f26:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   22f28:	bf86      	itte	hi
   22f2a:	3a0a      	subhi	r2, #10
   22f2c:	1889      	addhi	r1, r1, r2
			*ptr++ = (char) (val + '0');
   22f2e:	3130      	addls	r1, #48	; 0x30
	*ptr = '\0';
   22f30:	2200      	movs	r2, #0
			*ptr++ = (char) (val + '0');
   22f32:	7019      	strb	r1, [r3, #0]
	*ptr = '\0';
   22f34:	705a      	strb	r2, [r3, #1]
   22f36:	1c58      	adds	r0, r3, #1
}
   22f38:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   22f3a:	2c00      	cmp	r4, #0
   22f3c:	d1e9      	bne.n	22f12 <net_byte_to_hex+0x6>
   22f3e:	4603      	mov	r3, r0
   22f40:	e7ef      	b.n	22f22 <net_byte_to_hex+0x16>

00022f42 <net_sprint_ll_addr_buf>:
{
   22f42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22f46:	4616      	mov	r6, r2
   22f48:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
   22f4c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		len = 6;
   22f50:	2908      	cmp	r1, #8
   22f52:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
{
   22f56:	460d      	mov	r5, r1
   22f58:	4607      	mov	r7, r0
   22f5a:	fa50 f483 	uxtab	r4, r0, r3
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   22f5e:	4680      	mov	r8, r0
		len = 6;
   22f60:	bf0c      	ite	eq
   22f62:	460d      	moveq	r5, r1
   22f64:	2506      	movne	r5, #6
	char *ptr = buf;
   22f66:	4630      	mov	r0, r6
		*ptr++ = ':';
   22f68:	f04f 093a 	mov.w	r9, #58	; 0x3a
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   22f6c:	45a0      	cmp	r8, r4
   22f6e:	d00e      	beq.n	22f8e <net_sprint_ll_addr_buf+0x4c>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   22f70:	2301      	movs	r3, #1
   22f72:	f818 1b01 	ldrb.w	r1, [r8], #1
   22f76:	2241      	movs	r2, #65	; 0x41
   22f78:	f7ff ffc8 	bl	22f0c <net_byte_to_hex>
   22f7c:	4603      	mov	r3, r0
		*ptr++ = ':';
   22f7e:	3001      	adds	r0, #1
   22f80:	f883 9000 	strb.w	r9, [r3]
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   22f84:	eba8 0307 	sub.w	r3, r8, r7
   22f88:	b2db      	uxtb	r3, r3
   22f8a:	429d      	cmp	r5, r3
   22f8c:	d8ee      	bhi.n	22f6c <net_sprint_ll_addr_buf+0x2a>
	if (!(ptr - buf)) {
   22f8e:	42b0      	cmp	r0, r6
   22f90:	f04f 0300 	mov.w	r3, #0
	*(ptr - 1) = '\0';
   22f94:	bf16      	itet	ne
   22f96:	f800 3c01 	strbne.w	r3, [r0, #-1]
		return NULL;
   22f9a:	4618      	moveq	r0, r3
	return buf;
   22f9c:	4630      	movne	r0, r6
}
   22f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00022fa4 <net_addr_ntop>:
{
   22fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned char zeros[8] = { 0 };
   22fa8:	2300      	movs	r3, #0
{
   22faa:	b087      	sub	sp, #28
	if (family == AF_INET6) {
   22fac:	280a      	cmp	r0, #10
{
   22fae:	4682      	mov	sl, r0
   22fb0:	468b      	mov	fp, r1
   22fb2:	4691      	mov	r9, r2
	unsigned char zeros[8] = { 0 };
   22fb4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	if (family == AF_INET6) {
   22fb8:	d140      	bne.n	2303c <net_addr_ntop+0x98>
		w = (u16_t *)addr6->s6_addr16;
   22fba:	9103      	str	r1, [sp, #12]
   22fbc:	a904      	add	r1, sp, #16
   22fbe:	b2dc      	uxtb	r4, r3
{
   22fc0:	2200      	movs	r2, #0
   22fc2:	e007      	b.n	22fd4 <net_addr_ntop+0x30>
				zeros[i]++;
   22fc4:	7808      	ldrb	r0, [r1, #0]
   22fc6:	3201      	adds	r2, #1
   22fc8:	3001      	adds	r0, #1
   22fca:	7008      	strb	r0, [r1, #0]
			for (j = i; j < 8; j++) {
   22fcc:	18a0      	adds	r0, r4, r2
   22fce:	b2c0      	uxtb	r0, r0
   22fd0:	2807      	cmp	r0, #7
   22fd2:	d804      	bhi.n	22fde <net_addr_ntop+0x3a>
				if (UNALIGNED_GET(&w[j]) != 0) {
   22fd4:	1898      	adds	r0, r3, r2
   22fd6:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
   22fda:	2800      	cmp	r0, #0
   22fdc:	d0f2      	beq.n	22fc4 <net_addr_ntop+0x20>
   22fde:	3301      	adds	r3, #1
		for (i = 0; i < 8; i++) {
   22fe0:	2b08      	cmp	r3, #8
   22fe2:	f101 0101 	add.w	r1, r1, #1
   22fe6:	d1ea      	bne.n	22fbe <net_addr_ntop+0x1a>
   22fe8:	2300      	movs	r3, #0
	s8_t pos = -1;
   22fea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1;
   22fee:	f04f 0801 	mov.w	r8, #1
			if (zeros[i] > longest) {
   22ff2:	aa04      	add	r2, sp, #16
   22ff4:	5cd2      	ldrb	r2, [r2, r3]
   22ff6:	4542      	cmp	r2, r8
				pos = i;
   22ff8:	bf88      	it	hi
   22ffa:	b25f      	sxtbhi	r7, r3
   22ffc:	f103 0301 	add.w	r3, r3, #1
   23000:	bf88      	it	hi
   23002:	4690      	movhi	r8, r2
		for (i = 0; i < 8; i++) {
   23004:	2b08      	cmp	r3, #8
   23006:	d1f4      	bne.n	22ff2 <net_addr_ntop+0x4e>
		len = 8;
   23008:	9302      	str	r3, [sp, #8]
   2300a:	f1b8 0f01 	cmp.w	r8, #1
   2300e:	f04f 033a 	mov.w	r3, #58	; 0x3a
   23012:	9301      	str	r3, [sp, #4]
   23014:	bf08      	it	eq
   23016:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	bool needcolon = false;
   2301a:	2200      	movs	r2, #0
	char *ptr = dst;
   2301c:	464c      	mov	r4, r9
	for (i = 0; i < len; i++) {
   2301e:	4616      	mov	r6, r2
   23020:	9b02      	ldr	r3, [sp, #8]
   23022:	429e      	cmp	r6, r3
   23024:	db1b      	blt.n	2305e <net_addr_ntop+0xba>
	if (!(ptr - dst)) {
   23026:	454c      	cmp	r4, r9
   23028:	d00a      	beq.n	23040 <net_addr_ntop+0x9c>
	if (family == AF_INET) {
   2302a:	f1ba 0f02 	cmp.w	sl, #2
   2302e:	f04f 0300 	mov.w	r3, #0
		*(ptr - 1) = '\0';
   23032:	bf0c      	ite	eq
   23034:	f804 3c01 	strbeq.w	r3, [r4, #-1]
		*ptr = '\0';
   23038:	7023      	strbne	r3, [r4, #0]
   2303a:	e003      	b.n	23044 <net_addr_ntop+0xa0>
	} else if (family == AF_INET) {
   2303c:	2802      	cmp	r0, #2
   2303e:	d005      	beq.n	2304c <net_addr_ntop+0xa8>
		return NULL;
   23040:	f04f 0900 	mov.w	r9, #0
}
   23044:	4648      	mov	r0, r9
   23046:	b007      	add	sp, #28
   23048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   2304c:	232e      	movs	r3, #46	; 0x2e
   2304e:	2604      	movs	r6, #4
   23050:	e9cd 3601 	strd	r3, r6, [sp, #4]
	s8_t pos = -1;
   23054:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1;
   23058:	f04f 0801 	mov.w	r8, #1
   2305c:	e7dd      	b.n	2301a <net_addr_ntop+0x76>
		if (len == 4) {
   2305e:	9b02      	ldr	r3, [sp, #8]
   23060:	2b04      	cmp	r3, #4
   23062:	d12d      	bne.n	230c0 <net_addr_ntop+0x11c>
			value = (u32_t)addr->s4_addr[i];
   23064:	f81b 1006 	ldrb.w	r1, [fp, r6]
			if (value == 0) {
   23068:	b949      	cbnz	r1, 2307e <net_addr_ntop+0xda>
				*ptr++ = '0';
   2306a:	4620      	mov	r0, r4
   2306c:	2330      	movs	r3, #48	; 0x30
   2306e:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   23072:	9b01      	ldr	r3, [sp, #4]
   23074:	7063      	strb	r3, [r4, #1]
	for (i = 0; i < len; i++) {
   23076:	3601      	adds	r6, #1
   23078:	b2f6      	uxtb	r6, r6
   2307a:	4604      	mov	r4, r0
   2307c:	e7d0      	b.n	23020 <net_addr_ntop+0x7c>
			l = net_value_to_udec(ptr, value, 0);
   2307e:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 23144 <net_addr_ntop+0x1a0>
   23082:	4623      	mov	r3, r4
   23084:	2009      	movs	r0, #9
   23086:	f04f 0e00 	mov.w	lr, #0
		if ((precision > i) || (temp != 0)) {
   2308a:	4586      	cmp	lr, r0
		temp = value / divisor;
   2308c:	fbb1 f5fc 	udiv	r5, r1, ip
		value = value % divisor;
   23090:	fb0c 1115 	mls	r1, ip, r5, r1
		if ((precision > i) || (temp != 0)) {
   23094:	dc00      	bgt.n	23098 <net_addr_ntop+0xf4>
   23096:	b11d      	cbz	r5, 230a0 <net_addr_ntop+0xfc>
			*buf++ = (char) (temp + '0');
   23098:	3530      	adds	r5, #48	; 0x30
   2309a:	701d      	strb	r5, [r3, #0]
   2309c:	4686      	mov	lr, r0
   2309e:	3301      	adds	r3, #1
	for (i = 9; i >= 0; i--, divisor /= 10) {
   230a0:	3801      	subs	r0, #1
   230a2:	250a      	movs	r5, #10
   230a4:	fbbc fcf5 	udiv	ip, ip, r5
   230a8:	1c45      	adds	r5, r0, #1
   230aa:	d1ee      	bne.n	2308a <net_addr_ntop+0xe6>
	*buf = 0;
   230ac:	f04f 0100 	mov.w	r1, #0
   230b0:	7019      	strb	r1, [r3, #0]
	return buf - start;
   230b2:	1b1b      	subs	r3, r3, r4
			ptr += l;
   230b4:	b2db      	uxtb	r3, r3
   230b6:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
   230b8:	9901      	ldr	r1, [sp, #4]
   230ba:	54e1      	strb	r1, [r4, r3]
   230bc:	3001      	adds	r0, #1
			continue;
   230be:	e7da      	b.n	23076 <net_addr_ntop+0xd2>
		if (i == pos) {
   230c0:	42b7      	cmp	r7, r6
   230c2:	d10d      	bne.n	230e0 <net_addr_ntop+0x13c>
			if (needcolon || i == 0) {
   230c4:	b902      	cbnz	r2, 230c8 <net_addr_ntop+0x124>
   230c6:	b917      	cbnz	r7, 230ce <net_addr_ntop+0x12a>
				*ptr++ = ':';
   230c8:	233a      	movs	r3, #58	; 0x3a
   230ca:	7023      	strb	r3, [r4, #0]
   230cc:	3401      	adds	r4, #1
			*ptr++ = ':';
   230ce:	233a      	movs	r3, #58	; 0x3a
   230d0:	7023      	strb	r3, [r4, #0]
			i += longest - 1;
   230d2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   230d6:	441e      	add	r6, r3
			*ptr++ = ':';
   230d8:	1c60      	adds	r0, r4, #1
			i += longest - 1;
   230da:	b2f6      	uxtb	r6, r6
			needcolon = false;
   230dc:	2200      	movs	r2, #0
			continue;
   230de:	e7ca      	b.n	23076 <net_addr_ntop+0xd2>
		if (needcolon) {
   230e0:	b112      	cbz	r2, 230e8 <net_addr_ntop+0x144>
			*ptr++ = ':';
   230e2:	233a      	movs	r3, #58	; 0x3a
   230e4:	7023      	strb	r3, [r4, #0]
   230e6:	3401      	adds	r4, #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   230e8:	9b03      	ldr	r3, [sp, #12]
   230ea:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   230ee:	021d      	lsls	r5, r3, #8
   230f0:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   230f4:	b22d      	sxth	r5, r5
		bh = value >> 8;
   230f6:	f3c5 2307 	ubfx	r3, r5, #8, #8
		bl = value & 0xff;
   230fa:	b2ed      	uxtb	r5, r5
		if (bh) {
   230fc:	b1ab      	cbz	r3, 2312a <net_addr_ntop+0x186>
			if (bh > 0x0f) {
   230fe:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   23100:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   23102:	d90b      	bls.n	2311c <net_addr_ntop+0x178>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   23104:	2300      	movs	r3, #0
   23106:	2261      	movs	r2, #97	; 0x61
   23108:	4620      	mov	r0, r4
   2310a:	f7ff feff 	bl	22f0c <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   2310e:	2301      	movs	r3, #1
   23110:	2261      	movs	r2, #97	; 0x61
   23112:	4629      	mov	r1, r5
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   23114:	f7ff fefa 	bl	22f0c <net_byte_to_hex>
		needcolon = true;
   23118:	2201      	movs	r2, #1
   2311a:	e7ac      	b.n	23076 <net_addr_ntop+0xd2>
				if (bh < 10) {
   2311c:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   2311e:	bf94      	ite	ls
   23120:	3130      	addls	r1, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   23122:	3157      	addhi	r1, #87	; 0x57
   23124:	1c60      	adds	r0, r4, #1
   23126:	7021      	strb	r1, [r4, #0]
   23128:	e7f1      	b.n	2310e <net_addr_ntop+0x16a>
		} else if (bl > 0x0f) {
   2312a:	2d0f      	cmp	r5, #15
   2312c:	d903      	bls.n	23136 <net_addr_ntop+0x192>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   2312e:	2261      	movs	r2, #97	; 0x61
   23130:	4629      	mov	r1, r5
   23132:	4620      	mov	r0, r4
   23134:	e7ee      	b.n	23114 <net_addr_ntop+0x170>
			if (bl < 10) {
   23136:	2d09      	cmp	r5, #9
				*ptr++ = (char)(bl + '0');
   23138:	bf94      	ite	ls
   2313a:	3530      	addls	r5, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   2313c:	3557      	addhi	r5, #87	; 0x57
   2313e:	1c60      	adds	r0, r4, #1
   23140:	7025      	strb	r5, [r4, #0]
   23142:	e7e9      	b.n	23118 <net_addr_ntop+0x174>
   23144:	3b9aca00 	.word	0x3b9aca00

00023148 <net_sprint_addr>:
	char *s = buf[++i % NBUFS];
   23148:	4b08      	ldr	r3, [pc, #32]	; (2316c <net_sprint_addr+0x24>)
   2314a:	681a      	ldr	r2, [r3, #0]
   2314c:	3201      	adds	r2, #1
{
   2314e:	b410      	push	{r4}
	char *s = buf[++i % NBUFS];
   23150:	601a      	str	r2, [r3, #0]
	return net_addr_ntop(af, addr, s, NET_IPV6_ADDR_LEN);
   23152:	4c07      	ldr	r4, [pc, #28]	; (23170 <net_sprint_addr+0x28>)
	char *s = buf[++i % NBUFS];
   23154:	2303      	movs	r3, #3
   23156:	fb92 f3f3 	sdiv	r3, r2, r3
   2315a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2315e:	1ad2      	subs	r2, r2, r3
	return net_addr_ntop(af, addr, s, NET_IPV6_ADDR_LEN);
   23160:	2328      	movs	r3, #40	; 0x28
   23162:	fb03 4202 	mla	r2, r3, r2, r4
}
   23166:	bc10      	pop	{r4}
	return net_addr_ntop(af, addr, s, NET_IPV6_ADDR_LEN);
   23168:	f7ff bf1c 	b.w	22fa4 <net_addr_ntop>
   2316c:	200027b0 	.word	0x200027b0
   23170:	20002738 	.word	0x20002738

00023174 <net_addr_pton>:
	if (family == AF_INET) {
   23174:	2802      	cmp	r0, #2
{
   23176:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2317a:	460c      	mov	r4, r1
   2317c:	4616      	mov	r6, r2
	if (family == AF_INET) {
   2317e:	d128      	bne.n	231d2 <net_addr_pton+0x5e>
		len = strlen(src);
   23180:	4608      	mov	r0, r1
   23182:	f7e3 fd2b 	bl	6bdc <strlen>
   23186:	4623      	mov	r3, r4
   23188:	4420      	add	r0, r4
		for (i = 0; i < len; i++) {
   2318a:	4283      	cmp	r3, r0
   2318c:	d116      	bne.n	231bc <net_addr_pton+0x48>
		(void)memset(addr, 0, sizeof(struct in_addr));
   2318e:	4630      	mov	r0, r6
   23190:	2204      	movs	r2, #4
   23192:	2100      	movs	r1, #0
   23194:	f7e3 fda5 	bl	6ce2 <memset>
   23198:	1e75      	subs	r5, r6, #1
   2319a:	3603      	adds	r6, #3
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   2319c:	4620      	mov	r0, r4
   2319e:	220a      	movs	r2, #10
   231a0:	a901      	add	r1, sp, #4
   231a2:	f7e3 fbd7 	bl	6954 <strtol>
   231a6:	f805 0f01 	strb.w	r0, [r5, #1]!
			src = ++endptr;
   231aa:	9c01      	ldr	r4, [sp, #4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   231ac:	42ae      	cmp	r6, r5
			src = ++endptr;
   231ae:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   231b2:	d1f3      	bne.n	2319c <net_addr_pton+0x28>
	return 0;
   231b4:	2000      	movs	r0, #0
}
   231b6:	b003      	add	sp, #12
   231b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (!(src[i] >= '0' && src[i] <= '9') &&
   231bc:	f813 2b01 	ldrb.w	r2, [r3], #1
   231c0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   231c4:	2909      	cmp	r1, #9
   231c6:	d9e0      	bls.n	2318a <net_addr_pton+0x16>
   231c8:	2a2e      	cmp	r2, #46	; 0x2e
   231ca:	d0de      	beq.n	2318a <net_addr_pton+0x16>
				return -EINVAL;
   231cc:	f06f 0015 	mvn.w	r0, #21
   231d0:	e7f1      	b.n	231b6 <net_addr_pton+0x42>
	} else if (family == AF_INET6) {
   231d2:	280a      	cmp	r0, #10
   231d4:	d1fa      	bne.n	231cc <net_addr_pton+0x58>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   231d6:	212e      	movs	r1, #46	; 0x2e
   231d8:	4620      	mov	r0, r4
   231da:	f7e3 fce4 	bl	6ba6 <strchr>
		if (*src == ':') {
   231de:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   231e0:	2800      	cmp	r0, #0
   231e2:	bf14      	ite	ne
   231e4:	2706      	movne	r7, #6
   231e6:	2708      	moveq	r7, #8
		if (*src == ':') {
   231e8:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   231ea:	bf08      	it	eq
   231ec:	3401      	addeq	r4, #1
		len = strlen(src);
   231ee:	4620      	mov	r0, r4
   231f0:	f7e3 fcf4 	bl	6bdc <strlen>
		for (i = 0; i < len; i++) {
   231f4:	4623      	mov	r3, r4
   231f6:	1b1a      	subs	r2, r3, r4
   231f8:	4290      	cmp	r0, r2
   231fa:	dc32      	bgt.n	23262 <net_addr_pton+0xee>
		for (i = 0; i < expected_groups; i++) {
   231fc:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   231fe:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   23200:	2c00      	cmp	r4, #0
   23202:	d0e3      	beq.n	231cc <net_addr_pton+0x58>
   23204:	7823      	ldrb	r3, [r4, #0]
   23206:	2b00      	cmp	r3, #0
   23208:	d0e0      	beq.n	231cc <net_addr_pton+0x58>
			if (*src != ':') {
   2320a:	2b3a      	cmp	r3, #58	; 0x3a
   2320c:	ea4f 0345 	mov.w	r3, r5, lsl #1
   23210:	d135      	bne.n	2327e <net_addr_pton+0x10a>
   23212:	4433      	add	r3, r6
			for (; i < expected_groups; i++) {
   23214:	42bd      	cmp	r5, r7
   23216:	db52      	blt.n	232be <net_addr_pton+0x14a>
			tmp = strrchr(src, ':');
   23218:	213a      	movs	r1, #58	; 0x3a
   2321a:	4620      	mov	r0, r4
   2321c:	f7e3 fcd1 	bl	6bc2 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   23220:	42a0      	cmp	r0, r4
   23222:	d164      	bne.n	232ee <net_addr_pton+0x17a>
   23224:	2f06      	cmp	r7, #6
   23226:	d151      	bne.n	232cc <net_addr_pton+0x158>
				src++;
   23228:	1c44      	adds	r4, r0, #1
		if (expected_groups == 6) {
   2322a:	2f06      	cmp	r7, #6
   2322c:	d1c2      	bne.n	231b4 <net_addr_pton+0x40>
   2322e:	360c      	adds	r6, #12
			for (i = 0; i < 4; i++) {
   23230:	2500      	movs	r5, #0
				if (!src || !*src) {
   23232:	2c00      	cmp	r4, #0
   23234:	d0ca      	beq.n	231cc <net_addr_pton+0x58>
   23236:	7823      	ldrb	r3, [r4, #0]
   23238:	2b00      	cmp	r3, #0
   2323a:	d0c7      	beq.n	231cc <net_addr_pton+0x58>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   2323c:	220a      	movs	r2, #10
   2323e:	2100      	movs	r1, #0
   23240:	4620      	mov	r0, r4
   23242:	f7e3 fb87 	bl	6954 <strtol>
				src = strchr(src, '.');
   23246:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   23248:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   2324c:	4620      	mov	r0, r4
   2324e:	f7e3 fcaa 	bl	6ba6 <strchr>
				if (src) {
   23252:	4604      	mov	r4, r0
   23254:	2800      	cmp	r0, #0
   23256:	d04f      	beq.n	232f8 <net_addr_pton+0x184>
					src++;
   23258:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   2325a:	3501      	adds	r5, #1
   2325c:	2d04      	cmp	r5, #4
   2325e:	d1e8      	bne.n	23232 <net_addr_pton+0xbe>
   23260:	e7a8      	b.n	231b4 <net_addr_pton+0x40>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   23262:	f813 2b01 	ldrb.w	r2, [r3], #1
   23266:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   2326a:	290a      	cmp	r1, #10
   2326c:	d9c3      	bls.n	231f6 <net_addr_pton+0x82>
   2326e:	f022 0120 	bic.w	r1, r2, #32
   23272:	3941      	subs	r1, #65	; 0x41
   23274:	2905      	cmp	r1, #5
   23276:	d9be      	bls.n	231f6 <net_addr_pton+0x82>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   23278:	2a2e      	cmp	r2, #46	; 0x2e
   2327a:	d1a7      	bne.n	231cc <net_addr_pton+0x58>
   2327c:	e7bb      	b.n	231f6 <net_addr_pton+0x82>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   2327e:	2210      	movs	r2, #16
   23280:	2100      	movs	r1, #0
   23282:	4620      	mov	r0, r4
   23284:	f7e3 fb66 	bl	6954 <strtol>
   23288:	2210      	movs	r2, #16
   2328a:	4681      	mov	r9, r0
   2328c:	2100      	movs	r1, #0
   2328e:	4620      	mov	r0, r4
   23290:	f7e3 fb60 	bl	6954 <strtol>
   23294:	f3c9 2907 	ubfx	r9, r9, #8, #8
   23298:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
   2329c:	f826 9015 	strh.w	r9, [r6, r5, lsl #1]
				src = strchr(src, ':');
   232a0:	213a      	movs	r1, #58	; 0x3a
   232a2:	4620      	mov	r0, r4
   232a4:	f7e3 fc7f 	bl	6ba6 <strchr>
				if (src) {
   232a8:	4604      	mov	r4, r0
   232aa:	b108      	cbz	r0, 232b0 <net_addr_pton+0x13c>
			src++;
   232ac:	3401      	adds	r4, #1
   232ae:	e002      	b.n	232b6 <net_addr_pton+0x142>
					if (i < expected_groups - 1) {
   232b0:	1e7b      	subs	r3, r7, #1
   232b2:	42ab      	cmp	r3, r5
   232b4:	dc8a      	bgt.n	231cc <net_addr_pton+0x58>
		for (i = 0; i < expected_groups; i++) {
   232b6:	3501      	adds	r5, #1
   232b8:	42af      	cmp	r7, r5
   232ba:	dca1      	bgt.n	23200 <net_addr_pton+0x8c>
   232bc:	e7b5      	b.n	2322a <net_addr_pton+0xb6>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   232be:	f883 8000 	strb.w	r8, [r3]
   232c2:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   232c6:	3501      	adds	r5, #1
   232c8:	3302      	adds	r3, #2
   232ca:	e7a3      	b.n	23214 <net_addr_pton+0xa0>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   232cc:	7863      	ldrb	r3, [r4, #1]
   232ce:	2b00      	cmp	r3, #0
   232d0:	d0aa      	beq.n	23228 <net_addr_pton+0xb4>
			i = expected_groups - 1;
   232d2:	1e7d      	subs	r5, r7, #1
   232d4:	3001      	adds	r0, #1
				if (*tmp == ':') {
   232d6:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   232da:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   232dc:	bf08      	it	eq
   232de:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
   232e2:	2d00      	cmp	r5, #0
   232e4:	f6ff af72 	blt.w	231cc <net_addr_pton+0x58>
			} while (tmp-- != src);
   232e8:	42a0      	cmp	r0, r4
   232ea:	d1f4      	bne.n	232d6 <net_addr_pton+0x162>
   232ec:	e7de      	b.n	232ac <net_addr_pton+0x138>
			if (expected_groups == 6) {
   232ee:	2f06      	cmp	r7, #6
				tmp--;
   232f0:	bf08      	it	eq
   232f2:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
   232f6:	e7ec      	b.n	232d2 <net_addr_pton+0x15e>
					if (i < 3) {
   232f8:	2d03      	cmp	r5, #3
   232fa:	f47f af67 	bne.w	231cc <net_addr_pton+0x58>
   232fe:	e7ac      	b.n	2325a <net_addr_pton+0xe6>

00023300 <net_calc_chksum>:

	return sum;
}

u16_t net_calc_chksum(struct net_pkt *pkt, u8_t proto)
{
   23300:	b5f0      	push	{r4, r5, r6, r7, lr}
	return pkt->family;
   23302:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
	u16_t upper_layer_len;
	u16_t sum = 0;

	switch (net_pkt_family(pkt)) {
   23306:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   2330a:	2b0a      	cmp	r3, #10
{
   2330c:	b085      	sub	sp, #20
   2330e:	4606      	mov	r6, r0
	switch (net_pkt_family(pkt)) {
   23310:	d161      	bne.n	233d6 <net_calc_chksum+0xd6>
		}
		break;
#endif
#if defined(CONFIG_NET_IPV6)
	case AF_INET6:
		upper_layer_len = ntohs(NET_IPV6_HDR(pkt)->len) -
   23312:	6947      	ldr	r7, [r0, #20]
			net_pkt_ipv6_ext_len(pkt);
   23314:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
	return pkt->frags->data;
   23318:	68bc      	ldr	r4, [r7, #8]
		upper_layer_len = ntohs(NET_IPV6_HDR(pkt)->len) -
   2331a:	88a3      	ldrh	r3, [r4, #4]
   2331c:	0218      	lsls	r0, r3, #8
   2331e:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
		sum = calc_chksum(upper_layer_len + proto,
   23322:	1b4b      	subs	r3, r1, r5
   23324:	4418      	add	r0, r3
   23326:	f104 0108 	add.w	r1, r4, #8
   2332a:	2220      	movs	r2, #32
   2332c:	b280      	uxth	r0, r0
   2332e:	f7ff fdd1 	bl	22ed4 <calc_chksum>
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   23332:	f896 1041 	ldrb.w	r1, [r6, #65]	; 0x41
	return net_frag_read(frag, offset, pos, len, NULL);
   23336:	2600      	movs	r6, #0
   23338:	4429      	add	r1, r5
		sum = calc_chksum(upper_layer_len + proto,
   2333a:	4604      	mov	r4, r0
   2333c:	9600      	str	r6, [sp, #0]
   2333e:	4633      	mov	r3, r6
   23340:	f10d 020e 	add.w	r2, sp, #14
   23344:	b289      	uxth	r1, r1
   23346:	4638      	mov	r0, r7
   23348:	f7ff faf2 	bl	22930 <net_frag_read>
	if (!frag) {
   2334c:	4605      	mov	r5, r0
   2334e:	b910      	cbnz	r0, 23356 <net_calc_chksum+0x56>
		return 0;
	}

	sum = calc_chksum_pkt(sum, pkt, upper_layer_len);

	sum = (sum == 0) ? 0xffff : htons(sum);
   23350:	f64f 70ff 	movw	r0, #65535	; 0xffff
   23354:	e03d      	b.n	233d2 <net_calc_chksum+0xd2>
	NET_ASSERT(offset <= frag->len);
   23356:	8982      	ldrh	r2, [r0, #12]
   23358:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2335c:	429a      	cmp	r2, r3
   2335e:	d214      	bcs.n	2338a <net_calc_chksum+0x8a>
   23360:	4b1e      	ldr	r3, [pc, #120]	; (233dc <net_calc_chksum+0xdc>)
   23362:	681b      	ldr	r3, [r3, #0]
   23364:	075a      	lsls	r2, r3, #29
   23366:	d010      	beq.n	2338a <net_calc_chksum+0x8a>
   23368:	2301      	movs	r3, #1
   2336a:	f04f 0200 	mov.w	r2, #0
   2336e:	f363 0202 	bfi	r2, r3, #0, #3
   23372:	491b      	ldr	r1, [pc, #108]	; (233e0 <net_calc_chksum+0xe0>)
   23374:	4b1b      	ldr	r3, [pc, #108]	; (233e4 <net_calc_chksum+0xe4>)
   23376:	481c      	ldr	r0, [pc, #112]	; (233e8 <net_calc_chksum+0xe8>)
   23378:	1a5b      	subs	r3, r3, r1
   2337a:	f366 02c5 	bfi	r2, r6, #3, #3
   2337e:	08db      	lsrs	r3, r3, #3
   23380:	f363 128f 	bfi	r2, r3, #6, #10
   23384:	4919      	ldr	r1, [pc, #100]	; (233ec <net_calc_chksum+0xec>)
   23386:	f7de feb1 	bl	20ec <log_1>
	ptr = frag->data + offset;
   2338a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2338e:	68a9      	ldr	r1, [r5, #8]
	len = frag->len - offset;
   23390:	89aa      	ldrh	r2, [r5, #12]
	ptr = frag->data + offset;
   23392:	4419      	add	r1, r3
	len = frag->len - offset;
   23394:	1ad2      	subs	r2, r2, r3
   23396:	b212      	sxth	r2, r2
		sum = calc_chksum(sum, ptr, len);
   23398:	b296      	uxth	r6, r2
   2339a:	4620      	mov	r0, r4
   2339c:	4632      	mov	r2, r6
   2339e:	f7ff fd99 	bl	22ed4 <calc_chksum>
		frag = frag->frags;
   233a2:	682d      	ldr	r5, [r5, #0]
		sum = calc_chksum(sum, ptr, len);
   233a4:	4604      	mov	r4, r0
		if (!frag) {
   233a6:	b185      	cbz	r5, 233ca <net_calc_chksum+0xca>
		if (len % 2) {
   233a8:	07f3      	lsls	r3, r6, #31
		ptr = frag->data;
   233aa:	68a9      	ldr	r1, [r5, #8]
   233ac:	89aa      	ldrh	r2, [r5, #12]
		if (len % 2) {
   233ae:	d5f2      	bpl.n	23396 <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   233b0:	780b      	ldrb	r3, [r1, #0]
			sum += tmp;
   233b2:	441c      	add	r4, r3
   233b4:	b2a4      	uxth	r4, r4
			if (sum < tmp) {
   233b6:	42a3      	cmp	r3, r4
				sum++;
   233b8:	bf88      	it	hi
   233ba:	3401      	addhi	r4, #1
			len = frag->len - 1;
   233bc:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
				sum++;
   233c0:	bf88      	it	hi
   233c2:	b2a4      	uxthhi	r4, r4
			len = frag->len - 1;
   233c4:	b212      	sxth	r2, r2
			ptr++;
   233c6:	3101      	adds	r1, #1
   233c8:	e7e6      	b.n	23398 <net_calc_chksum+0x98>
	sum = (sum == 0) ? 0xffff : htons(sum);
   233ca:	2800      	cmp	r0, #0
   233cc:	d0c0      	beq.n	23350 <net_calc_chksum+0x50>
   233ce:	ba40      	rev16	r0, r0
   233d0:	b280      	uxth	r0, r0

	return sum;
}
   233d2:	b005      	add	sp, #20
   233d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   233d6:	2000      	movs	r0, #0
   233d8:	e7fb      	b.n	233d2 <net_calc_chksum+0xd2>
   233da:	bf00      	nop
   233dc:	2000e2bc 	.word	0x2000e2bc
   233e0:	0002ef38 	.word	0x0002ef38
   233e4:	0002f0b8 	.word	0x0002f0b8
   233e8:	00034bb5 	.word	0x00034bb5
   233ec:	00034ba5 	.word	0x00034ba5

000233f0 <net_header_fits>:
 * memory area. The start of the said area must be inside the first
 * fragment. This helper is used when checking whether various protocol
 * headers are split between two fragments.
 */
bool net_header_fits(struct net_pkt *pkt, u8_t *hdr, size_t hdr_size)
{
   233f0:	b510      	push	{r4, lr}
	if (hdr && hdr > pkt->frags->data &&
   233f2:	b159      	cbz	r1, 2340c <net_header_fits+0x1c>
   233f4:	6944      	ldr	r4, [r0, #20]
   233f6:	68a3      	ldr	r3, [r4, #8]
   233f8:	428b      	cmp	r3, r1
   233fa:	d207      	bcs.n	2340c <net_header_fits+0x1c>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   233fc:	89a0      	ldrh	r0, [r4, #12]
   233fe:	4411      	add	r1, r2
   23400:	4418      	add	r0, r3
	if (hdr && hdr > pkt->frags->data &&
   23402:	4281      	cmp	r1, r0
   23404:	bf8c      	ite	hi
   23406:	2000      	movhi	r0, #0
   23408:	2001      	movls	r0, #1
		return true;
	}

	return false;
}
   2340a:	bd10      	pop	{r4, pc}
	return false;
   2340c:	2000      	movs	r0, #0
   2340e:	e7fc      	b.n	2340a <net_header_fits+0x1a>

00023410 <net_ipaddr_parse>:
	return true;
}
#endif /* CONFIG_NET_IPV4 */

bool net_ipaddr_parse(const char *str, size_t str_len, struct sockaddr *addr)
{
   23410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23414:	460d      	mov	r5, r1
   23416:	b08f      	sub	sp, #60	; 0x3c
   23418:	4617      	mov	r7, r2
	int i, count;

	if (!str || str_len == 0) {
   2341a:	4604      	mov	r4, r0
   2341c:	2800      	cmp	r0, #0
   2341e:	d045      	beq.n	234ac <net_ipaddr_parse+0x9c>
   23420:	2900      	cmp	r1, #0
   23422:	d043      	beq.n	234ac <net_ipaddr_parse+0x9c>
		return false;
	}

	/* We cannot accept empty string here */
	if (*str == '\0') {
   23424:	7800      	ldrb	r0, [r0, #0]
   23426:	2800      	cmp	r0, #0
   23428:	f000 808b 	beq.w	23542 <net_ipaddr_parse+0x132>
		return false;
	}

	if (*str == '[') {
   2342c:	285b      	cmp	r0, #91	; 0x5b
   2342e:	d02a      	beq.n	23486 <net_ipaddr_parse+0x76>
   23430:	1e62      	subs	r2, r4, #1
#else
		return false;
#endif /* CONFIG_NET_IPV6 */
	}

	for (count = i = 0; str[i] && i < str_len; i++) {
   23432:	2300      	movs	r3, #0
   23434:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   23438:	b119      	cbz	r1, 23442 <net_ipaddr_parse+0x32>
   2343a:	1b10      	subs	r0, r2, r4
   2343c:	4285      	cmp	r5, r0
   2343e:	f200 8083 	bhi.w	23548 <net_ipaddr_parse+0x138>
		if (str[i] == ':') {
			count++;
		}
	}

	if (count == 1) {
   23442:	2b01      	cmp	r3, #1
   23444:	d032      	beq.n	234ac <net_ipaddr_parse+0x9c>
	len = min(INET6_ADDRSTRLEN, str_len);
   23446:	2d2e      	cmp	r5, #46	; 0x2e
   23448:	4628      	mov	r0, r5
	for (i = 0; i < len; i++) {
   2344a:	f04f 0600 	mov.w	r6, #0
	len = min(INET6_ADDRSTRLEN, str_len);
   2344e:	bf28      	it	cs
   23450:	202e      	movcs	r0, #46	; 0x2e
		if (!str[i]) {
   23452:	5da3      	ldrb	r3, [r4, r6]
   23454:	b11b      	cbz	r3, 2345e <net_ipaddr_parse+0x4e>
	for (i = 0; i < len; i++) {
   23456:	3601      	adds	r6, #1
   23458:	42b0      	cmp	r0, r6
   2345a:	dcfa      	bgt.n	23452 <net_ipaddr_parse+0x42>
   2345c:	4606      	mov	r6, r0
		memcpy(ipaddr, str, end);
   2345e:	4632      	mov	r2, r6
   23460:	4621      	mov	r1, r4
   23462:	a802      	add	r0, sp, #8
   23464:	f7e3 fc10 	bl	6c88 <memcpy>
	ipaddr[end] = '\0';
   23468:	ab0e      	add	r3, sp, #56	; 0x38
   2346a:	441e      	add	r6, r3
   2346c:	2400      	movs	r4, #0
	ret = net_addr_pton(AF_INET6, ipaddr, addr6);
   2346e:	1d3a      	adds	r2, r7, #4
   23470:	a902      	add	r1, sp, #8
   23472:	200a      	movs	r0, #10
	ipaddr[end] = '\0';
   23474:	f806 4c30 	strb.w	r4, [r6, #-48]
	ret = net_addr_pton(AF_INET6, ipaddr, addr6);
   23478:	f7ff fe7c 	bl	23174 <net_addr_pton>
	if (ret < 0) {
   2347c:	42a0      	cmp	r0, r4
   2347e:	db15      	blt.n	234ac <net_ipaddr_parse+0x9c>
	net_sin6(addr)->sin6_family = AF_INET6;
   23480:	230a      	movs	r3, #10
   23482:	803b      	strh	r3, [r7, #0]
   23484:	e05c      	b.n	23540 <net_ipaddr_parse+0x130>
	len = min(INET6_ADDRSTRLEN, str_len);
   23486:	292e      	cmp	r1, #46	; 0x2e
   23488:	460b      	mov	r3, r1
	for (i = 0; i < len; i++) {
   2348a:	f04f 0600 	mov.w	r6, #0
	len = min(INET6_ADDRSTRLEN, str_len);
   2348e:	bf28      	it	cs
   23490:	232e      	movcs	r3, #46	; 0x2e
		if (!str[i]) {
   23492:	5da2      	ldrb	r2, [r4, r6]
   23494:	b11a      	cbz	r2, 2349e <net_ipaddr_parse+0x8e>
	for (i = 0; i < len; i++) {
   23496:	3601      	adds	r6, #1
   23498:	42b3      	cmp	r3, r6
   2349a:	dcfa      	bgt.n	23492 <net_ipaddr_parse+0x82>
   2349c:	461e      	mov	r6, r3
		ptr = memchr(str, ']', len);
   2349e:	4632      	mov	r2, r6
   234a0:	215d      	movs	r1, #93	; 0x5d
   234a2:	4620      	mov	r0, r4
   234a4:	f7e3 fc3e 	bl	6d24 <memchr>
		if (!ptr) {
   234a8:	4683      	mov	fp, r0
   234aa:	b908      	cbnz	r0, 234b0 <net_ipaddr_parse+0xa0>
		return false;
   234ac:	2000      	movs	r0, #0
   234ae:	e048      	b.n	23542 <net_ipaddr_parse+0x132>
		end = min(len, ptr - (str + 1));
   234b0:	1c61      	adds	r1, r4, #1
   234b2:	1a40      	subs	r0, r0, r1
   234b4:	4286      	cmp	r6, r0
   234b6:	bfa8      	it	ge
   234b8:	4606      	movge	r6, r0
		memcpy(ipaddr, str + 1, end);
   234ba:	f10d 0808 	add.w	r8, sp, #8
   234be:	4632      	mov	r2, r6
   234c0:	4640      	mov	r0, r8
   234c2:	f7e3 fbe1 	bl	6c88 <memcpy>
	ipaddr[end] = '\0';
   234c6:	ab0e      	add	r3, sp, #56	; 0x38
   234c8:	4433      	add	r3, r6
   234ca:	f04f 0900 	mov.w	r9, #0
	ret = net_addr_pton(AF_INET6, ipaddr, addr6);
   234ce:	1d3a      	adds	r2, r7, #4
   234d0:	4641      	mov	r1, r8
   234d2:	200a      	movs	r0, #10
	ipaddr[end] = '\0';
   234d4:	f803 9c30 	strb.w	r9, [r3, #-48]
	ret = net_addr_pton(AF_INET6, ipaddr, addr6);
   234d8:	f7ff fe4c 	bl	23174 <net_addr_pton>
	if (ret < 0) {
   234dc:	4548      	cmp	r0, r9
   234de:	dbe5      	blt.n	234ac <net_ipaddr_parse+0x9c>
	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   234e0:	f10b 0301 	add.w	r3, fp, #1
   234e4:	1960      	adds	r0, r4, r5
	net_sin6(addr)->sin6_family = AF_INET6;
   234e6:	f04f 0a0a 	mov.w	sl, #10
	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   234ea:	4283      	cmp	r3, r0
	net_sin6(addr)->sin6_family = AF_INET6;
   234ec:	f8a7 a000 	strh.w	sl, [r7]
	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   234f0:	d226      	bcs.n	23540 <net_ipaddr_parse+0x130>
   234f2:	f89b 3001 	ldrb.w	r3, [fp, #1]
   234f6:	2b3a      	cmp	r3, #58	; 0x3a
   234f8:	d122      	bne.n	23540 <net_ipaddr_parse+0x130>
		len = str_len - end;
   234fa:	1bad      	subs	r5, r5, r6
		memcpy(ipaddr, ptr + 2, len);
   234fc:	462a      	mov	r2, r5
   234fe:	f10b 0102 	add.w	r1, fp, #2
   23502:	4640      	mov	r0, r8
   23504:	f7e3 fbc0 	bl	6c88 <memcpy>
		ipaddr[len] = '\0';
   23508:	ab0e      	add	r3, sp, #56	; 0x38
   2350a:	441d      	add	r5, r3
	tmp = strtoul(buf, &endptr, 10);
   2350c:	4652      	mov	r2, sl
   2350e:	a901      	add	r1, sp, #4
   23510:	4640      	mov	r0, r8
		ipaddr[len] = '\0';
   23512:	f805 9c30 	strb.w	r9, [r5, #-48]
	tmp = strtoul(buf, &endptr, 10);
   23516:	f7e3 fa93 	bl	6a40 <strtoul>
	if ((endptr == buf && tmp == 0) ||
   2351a:	9b01      	ldr	r3, [sp, #4]
   2351c:	4543      	cmp	r3, r8
   2351e:	d101      	bne.n	23524 <net_ipaddr_parse+0x114>
   23520:	2800      	cmp	r0, #0
   23522:	d0c3      	beq.n	234ac <net_ipaddr_parse+0x9c>
   23524:	f89d 2008 	ldrb.w	r2, [sp, #8]
   23528:	2a00      	cmp	r2, #0
   2352a:	d0bf      	beq.n	234ac <net_ipaddr_parse+0x9c>
	    !(*buf != '\0' && *endptr == '\0') ||
   2352c:	781b      	ldrb	r3, [r3, #0]
   2352e:	2b00      	cmp	r3, #0
   23530:	d1bc      	bne.n	234ac <net_ipaddr_parse+0x9c>
	    ((unsigned long)(unsigned short)tmp != tmp)) {
   23532:	b283      	uxth	r3, r0
	    !(*buf != '\0' && *endptr == '\0') ||
   23534:	4298      	cmp	r0, r3
   23536:	d1b9      	bne.n	234ac <net_ipaddr_parse+0x9c>
		net_sin6(addr)->sin6_port = htons(port);
   23538:	0200      	lsls	r0, r0, #8
   2353a:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   2353e:	8078      	strh	r0, [r7, #2]
		return true;
   23540:	2001      	movs	r0, #1
#endif

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	return parse_ipv6(str, str_len, addr, false);
#endif
}
   23542:	b00f      	add	sp, #60	; 0x3c
   23544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (str[i] == ':') {
   23548:	293a      	cmp	r1, #58	; 0x3a
			count++;
   2354a:	bf08      	it	eq
   2354c:	3301      	addeq	r3, #1
   2354e:	e771      	b.n	23434 <net_ipaddr_parse+0x24>

00023550 <net_ipv6_addr_create_iid>:
{
   23550:	b538      	push	{r3, r4, r5, lr}
	addr->s6_addr[0] = 0xfe;
   23552:	f248 03fe 	movw	r3, #33022	; 0x80fe
{
   23556:	4604      	mov	r4, r0
   23558:	460d      	mov	r5, r1
	addr->s6_addr[0] = 0xfe;
   2355a:	6003      	str	r3, [r0, #0]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   2355c:	2300      	movs	r3, #0
   2355e:	7103      	strb	r3, [r0, #4]
   23560:	7143      	strb	r3, [r0, #5]
   23562:	7183      	strb	r3, [r0, #6]
   23564:	71c3      	strb	r3, [r0, #7]
	switch (lladdr->len) {
   23566:	790a      	ldrb	r2, [r1, #4]
   23568:	2a06      	cmp	r2, #6
   2356a:	d015      	beq.n	23598 <net_ipv6_addr_create_iid+0x48>
   2356c:	2a08      	cmp	r2, #8
   2356e:	d02b      	beq.n	235c8 <net_ipv6_addr_create_iid+0x78>
   23570:	2a02      	cmp	r2, #2
   23572:	d110      	bne.n	23596 <net_ipv6_addr_create_iid+0x46>
		if (lladdr->type == NET_LINK_IEEE802154) {
   23574:	794a      	ldrb	r2, [r1, #5]
   23576:	2a01      	cmp	r2, #1
   23578:	d10d      	bne.n	23596 <net_ipv6_addr_create_iid+0x46>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   2357a:	7203      	strb	r3, [r0, #8]
   2357c:	7243      	strb	r3, [r0, #9]
   2357e:	7283      	strb	r3, [r0, #10]
   23580:	72c3      	strb	r3, [r0, #11]
			addr->s6_addr[11] = 0xff;
   23582:	22ff      	movs	r2, #255	; 0xff
   23584:	72c2      	strb	r2, [r0, #11]
			addr->s6_addr[13] = 0;
   23586:	7343      	strb	r3, [r0, #13]
			addr->s6_addr[12] = 0xfe;
   23588:	22fe      	movs	r2, #254	; 0xfe
			addr->s6_addr[14] = lladdr->addr[0];
   2358a:	680b      	ldr	r3, [r1, #0]
			addr->s6_addr[12] = 0xfe;
   2358c:	7302      	strb	r2, [r0, #12]
			addr->s6_addr[14] = lladdr->addr[0];
   2358e:	781a      	ldrb	r2, [r3, #0]
   23590:	7382      	strb	r2, [r0, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   23592:	785b      	ldrb	r3, [r3, #1]
   23594:	73c3      	strb	r3, [r0, #15]
		break;
	}
}
   23596:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   23598:	2203      	movs	r2, #3
   2359a:	6809      	ldr	r1, [r1, #0]
   2359c:	3008      	adds	r0, #8
   2359e:	f7e3 fb73 	bl	6c88 <memcpy>
		addr->s6_addr[11] = 0xff;
   235a2:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   235a4:	6829      	ldr	r1, [r5, #0]
		addr->s6_addr[11] = 0xff;
   235a6:	72e3      	strb	r3, [r4, #11]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   235a8:	2203      	movs	r2, #3
		addr->s6_addr[12] = 0xfe;
   235aa:	23fe      	movs	r3, #254	; 0xfe
   235ac:	7323      	strb	r3, [r4, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   235ae:	4411      	add	r1, r2
   235b0:	f104 000d 	add.w	r0, r4, #13
   235b4:	f7e3 fb68 	bl	6c88 <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   235b8:	796b      	ldrb	r3, [r5, #5]
   235ba:	2b03      	cmp	r3, #3
   235bc:	d1eb      	bne.n	23596 <net_ipv6_addr_create_iid+0x46>
		addr->s6_addr[8] ^= 0x02;
   235be:	7a23      	ldrb	r3, [r4, #8]
   235c0:	f083 0302 	eor.w	r3, r3, #2
   235c4:	7223      	strb	r3, [r4, #8]
}
   235c6:	e7e6      	b.n	23596 <net_ipv6_addr_create_iid+0x46>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   235c8:	6809      	ldr	r1, [r1, #0]
   235ca:	3008      	adds	r0, #8
   235cc:	f7e3 fb5c 	bl	6c88 <memcpy>
   235d0:	e7f5      	b.n	235be <net_ipv6_addr_create_iid+0x6e>

000235d2 <net_ipv6_addr_based_on_ll>:
 *
 *  @return True if it is, False otherwise
 */
static inline bool net_ipv6_addr_based_on_ll(const struct in6_addr *addr,
					     const struct net_linkaddr *lladdr)
{
   235d2:	b570      	push	{r4, r5, r6, lr}
   235d4:	460d      	mov	r5, r1
	if (!addr || !lladdr) {
   235d6:	4604      	mov	r4, r0
   235d8:	b908      	cbnz	r0, 235de <net_ipv6_addr_based_on_ll+0xc>
		}

		break;
	}

	return false;
   235da:	2000      	movs	r0, #0
   235dc:	e017      	b.n	2360e <net_ipv6_addr_based_on_ll+0x3c>
	if (!addr || !lladdr) {
   235de:	2900      	cmp	r1, #0
   235e0:	d0fb      	beq.n	235da <net_ipv6_addr_based_on_ll+0x8>
	switch (lladdr->len) {
   235e2:	790a      	ldrb	r2, [r1, #4]
   235e4:	2a06      	cmp	r2, #6
   235e6:	d013      	beq.n	23610 <net_ipv6_addr_based_on_ll+0x3e>
   235e8:	2a08      	cmp	r2, #8
   235ea:	d048      	beq.n	2367e <net_ipv6_addr_based_on_ll+0xac>
   235ec:	2a02      	cmp	r2, #2
   235ee:	d1f4      	bne.n	235da <net_ipv6_addr_based_on_ll+0x8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   235f0:	6809      	ldr	r1, [r1, #0]
   235f2:	300e      	adds	r0, #14
   235f4:	f7e3 fb21 	bl	6c3a <memcmp>
   235f8:	2800      	cmp	r0, #0
   235fa:	d1ee      	bne.n	235da <net_ipv6_addr_based_on_ll+0x8>
		    addr->s6_addr[10] == 0 &&
   235fc:	68a3      	ldr	r3, [r4, #8]
   235fe:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   23602:	d1ea      	bne.n	235da <net_ipv6_addr_based_on_ll+0x8>
			    addr->s6_addr[11] == 0xff &&
   23604:	7b20      	ldrb	r0, [r4, #12]
   23606:	28fe      	cmp	r0, #254	; 0xfe
			    lladdr->len - 1) &&
   23608:	bf14      	ite	ne
   2360a:	2000      	movne	r0, #0
   2360c:	2001      	moveq	r0, #1
}
   2360e:	bd70      	pop	{r4, r5, r6, pc}
		if (lladdr->type == NET_LINK_ETHERNET) {
   23610:	794e      	ldrb	r6, [r1, #5]
   23612:	2e03      	cmp	r6, #3
   23614:	d11d      	bne.n	23652 <net_ipv6_addr_based_on_ll+0x80>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   23616:	6809      	ldr	r1, [r1, #0]
   23618:	2202      	movs	r2, #2
   2361a:	3101      	adds	r1, #1
   2361c:	3009      	adds	r0, #9
   2361e:	f7e3 fb0c 	bl	6c3a <memcmp>
   23622:	2800      	cmp	r0, #0
   23624:	d1d9      	bne.n	235da <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   23626:	6829      	ldr	r1, [r5, #0]
   23628:	4632      	mov	r2, r6
   2362a:	3103      	adds	r1, #3
   2362c:	f104 000d 	add.w	r0, r4, #13
   23630:	f7e3 fb03 	bl	6c3a <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   23634:	2800      	cmp	r0, #0
   23636:	d1d0      	bne.n	235da <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   23638:	7ae3      	ldrb	r3, [r4, #11]
   2363a:	2bff      	cmp	r3, #255	; 0xff
   2363c:	d1cd      	bne.n	235da <net_ipv6_addr_based_on_ll+0x8>
			    addr->s6_addr[11] == 0xff &&
   2363e:	7b23      	ldrb	r3, [r4, #12]
   23640:	2bfe      	cmp	r3, #254	; 0xfe
   23642:	d1ca      	bne.n	235da <net_ipv6_addr_based_on_ll+0x8>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   23644:	682a      	ldr	r2, [r5, #0]
   23646:	7a23      	ldrb	r3, [r4, #8]
			    lladdr->len - 1) &&
   23648:	7810      	ldrb	r0, [r2, #0]
   2364a:	f083 0302 	eor.w	r3, r3, #2
   2364e:	4298      	cmp	r0, r3
   23650:	e7da      	b.n	23608 <net_ipv6_addr_based_on_ll+0x36>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   23652:	2e02      	cmp	r6, #2
   23654:	d1c1      	bne.n	235da <net_ipv6_addr_based_on_ll+0x8>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   23656:	6809      	ldr	r1, [r1, #0]
   23658:	4632      	mov	r2, r6
   2365a:	3101      	adds	r1, #1
   2365c:	3009      	adds	r0, #9
   2365e:	f7e3 faec 	bl	6c3a <memcmp>
   23662:	2800      	cmp	r0, #0
   23664:	d1b9      	bne.n	235da <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   23666:	6829      	ldr	r1, [r5, #0]
   23668:	2203      	movs	r2, #3
   2366a:	4411      	add	r1, r2
   2366c:	f104 000d 	add.w	r0, r4, #13
   23670:	f7e3 fae3 	bl	6c3a <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   23674:	2800      	cmp	r0, #0
   23676:	d1b0      	bne.n	235da <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   23678:	7ae3      	ldrb	r3, [r4, #11]
   2367a:	2bff      	cmp	r3, #255	; 0xff
   2367c:	e7c1      	b.n	23602 <net_ipv6_addr_based_on_ll+0x30>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   2367e:	6809      	ldr	r1, [r1, #0]
   23680:	2207      	movs	r2, #7
   23682:	3101      	adds	r1, #1
   23684:	3009      	adds	r0, #9
   23686:	f7e3 fad8 	bl	6c3a <memcmp>
   2368a:	2800      	cmp	r0, #0
   2368c:	d0da      	beq.n	23644 <net_ipv6_addr_based_on_ll+0x72>
   2368e:	e7a4      	b.n	235da <net_ipv6_addr_based_on_ll+0x8>

00023690 <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   23690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23694:	4607      	mov	r7, r0
   23696:	b085      	sub	sp, #20
   23698:	4690      	mov	r8, r2
	if (iphc) {
   2369a:	2900      	cmp	r1, #0
   2369c:	f000 8263 	beq.w	23b66 <net_6lo_compress+0x4d6>
	struct net_ipv6_hdr *ipv6 = NET_IPV6_HDR(pkt);
   236a0:	6943      	ldr	r3, [r0, #20]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   236a2:	899a      	ldrh	r2, [r3, #12]
   236a4:	2a27      	cmp	r2, #39	; 0x27
   236a6:	d81c      	bhi.n	236e2 <net_6lo_compress+0x52>
		NET_ERR("Invalid length %d, min %d",
   236a8:	4bad      	ldr	r3, [pc, #692]	; (23960 <net_6lo_compress+0x2d0>)
   236aa:	681b      	ldr	r3, [r3, #0]
   236ac:	0758      	lsls	r0, r3, #29
   236ae:	d103      	bne.n	236b8 <net_6lo_compress+0x28>
		return false;
   236b0:	2000      	movs	r0, #0
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   236b2:	b005      	add	sp, #20
   236b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		NET_ERR("Invalid length %d, min %d",
   236b8:	2301      	movs	r3, #1
   236ba:	f04f 0100 	mov.w	r1, #0
   236be:	f363 0102 	bfi	r1, r3, #0, #3
   236c2:	48a8      	ldr	r0, [pc, #672]	; (23964 <net_6lo_compress+0x2d4>)
   236c4:	4ba8      	ldr	r3, [pc, #672]	; (23968 <net_6lo_compress+0x2d8>)
   236c6:	1a1b      	subs	r3, r3, r0
   236c8:	08db      	lsrs	r3, r3, #3
   236ca:	f36f 01c5 	bfc	r1, #3, #3
   236ce:	f363 118f 	bfi	r1, r3, #6, #10
   236d2:	f8ad 1000 	strh.w	r1, [sp]
   236d6:	2328      	movs	r3, #40	; 0x28
   236d8:	49a4      	ldr	r1, [pc, #656]	; (2396c <net_6lo_compress+0x2dc>)
   236da:	48a5      	ldr	r0, [pc, #660]	; (23970 <net_6lo_compress+0x2e0>)
   236dc:	f7de fd32 	bl	2144 <log_3>
   236e0:	e7e6      	b.n	236b0 <net_6lo_compress+0x20>
	return pkt->frags->data;
   236e2:	689d      	ldr	r5, [r3, #8]
	if (ipv6->nexthdr == IPPROTO_UDP &&
   236e4:	79ab      	ldrb	r3, [r5, #6]
   236e6:	2b11      	cmp	r3, #17
   236e8:	d116      	bne.n	23718 <net_6lo_compress+0x88>
   236ea:	2a2f      	cmp	r2, #47	; 0x2f
   236ec:	d814      	bhi.n	23718 <net_6lo_compress+0x88>
		NET_ERR("Invalid length %d, min %d",
   236ee:	4b9c      	ldr	r3, [pc, #624]	; (23960 <net_6lo_compress+0x2d0>)
   236f0:	681b      	ldr	r3, [r3, #0]
   236f2:	0759      	lsls	r1, r3, #29
   236f4:	d0dc      	beq.n	236b0 <net_6lo_compress+0x20>
   236f6:	2301      	movs	r3, #1
   236f8:	f04f 0100 	mov.w	r1, #0
   236fc:	f363 0102 	bfi	r1, r3, #0, #3
   23700:	4898      	ldr	r0, [pc, #608]	; (23964 <net_6lo_compress+0x2d4>)
   23702:	4b99      	ldr	r3, [pc, #612]	; (23968 <net_6lo_compress+0x2d8>)
   23704:	1a1b      	subs	r3, r3, r0
   23706:	08db      	lsrs	r3, r3, #3
   23708:	f36f 01c5 	bfc	r1, #3, #3
   2370c:	f363 118f 	bfi	r1, r3, #6, #10
   23710:	f8ad 1000 	strh.w	r1, [sp]
   23714:	2330      	movs	r3, #48	; 0x30
   23716:	e7df      	b.n	236d8 <net_6lo_compress+0x48>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   23718:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2371c:	4638      	mov	r0, r7
   2371e:	f7fe fead 	bl	2247c <net_pkt_get_frag>
	if (!frag) {
   23722:	4606      	mov	r6, r0
   23724:	2800      	cmp	r0, #0
   23726:	d0c3      	beq.n	236b0 <net_6lo_compress+0x20>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   23728:	6883      	ldr	r3, [r0, #8]
   2372a:	2260      	movs	r2, #96	; 0x60
   2372c:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   2372e:	6883      	ldr	r3, [r0, #8]
   23730:	2200      	movs	r2, #0
   23732:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   23734:	f895 c001 	ldrb.w	ip, [r5, #1]
   23738:	782a      	ldrb	r2, [r5, #0]
   2373a:	68b4      	ldr	r4, [r6, #8]
   2373c:	ea4f 131c 	mov.w	r3, ip, lsr #4
   23740:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   23744:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   23746:	0898      	lsrs	r0, r3, #2
   23748:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
   2374c:	b240      	sxtb	r0, r0
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   2374e:	f01c 0f0f 	tst.w	ip, #15
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   23752:	fa5f fe80 	uxtb.w	lr, r0
   23756:	f002 020f 	and.w	r2, r2, #15
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   2375a:	d163      	bne.n	23824 <net_6lo_compress+0x194>
   2375c:	886b      	ldrh	r3, [r5, #2]
   2375e:	2b00      	cmp	r3, #0
   23760:	d160      	bne.n	23824 <net_6lo_compress+0x194>
   23762:	7823      	ldrb	r3, [r4, #0]
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   23764:	2a00      	cmp	r2, #0
   23766:	d155      	bne.n	23814 <net_6lo_compress+0x184>
   23768:	f01c 0ff0 	tst.w	ip, #240	; 0xf0
   2376c:	d152      	bne.n	23814 <net_6lo_compress+0x184>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   2376e:	f043 0318 	orr.w	r3, r3, #24
   23772:	7023      	strb	r3, [r4, #0]
   23774:	2402      	movs	r4, #2
	offset = compress_nh(ipv6, frag, offset);
   23776:	79aa      	ldrb	r2, [r5, #6]
   23778:	68b3      	ldr	r3, [r6, #8]
	if (ipv6->nexthdr == IPPROTO_UDP) {
   2377a:	2a11      	cmp	r2, #17
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   2377c:	bf09      	itett	eq
   2377e:	781a      	ldrbeq	r2, [r3, #0]
		IPHC[offset++] = ipv6->nexthdr;
   23780:	551a      	strbne	r2, [r3, r4]
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   23782:	f042 0204 	orreq.w	r2, r2, #4
   23786:	701a      	strbeq	r2, [r3, #0]
	offset = compress_hoplimit(ipv6, frag, offset);
   23788:	79ea      	ldrb	r2, [r5, #7]
   2378a:	68b3      	ldr	r3, [r6, #8]
		IPHC[offset++] = ipv6->nexthdr;
   2378c:	bf1c      	itt	ne
   2378e:	1c61      	addne	r1, r4, #1
   23790:	b2cc      	uxtbne	r4, r1
	switch (ipv6->hop_limit) {
   23792:	2a40      	cmp	r2, #64	; 0x40
   23794:	d06c      	beq.n	23870 <net_6lo_compress+0x1e0>
   23796:	2aff      	cmp	r2, #255	; 0xff
   23798:	d06e      	beq.n	23878 <net_6lo_compress+0x1e8>
   2379a:	2a01      	cmp	r2, #1
   2379c:	d170      	bne.n	23880 <net_6lo_compress+0x1f0>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   2379e:	781a      	ldrb	r2, [r3, #0]
   237a0:	f042 0201 	orr.w	r2, r2, #1
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   237a4:	701a      	strb	r2, [r3, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   237a6:	68ab      	ldr	r3, [r5, #8]
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   237a8:	f105 0008 	add.w	r0, r5, #8
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   237ac:	2b00      	cmp	r3, #0
   237ae:	d16b      	bne.n	23888 <net_6lo_compress+0x1f8>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   237b0:	68eb      	ldr	r3, [r5, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   237b2:	2b00      	cmp	r3, #0
   237b4:	d168      	bne.n	23888 <net_6lo_compress+0x1f8>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   237b6:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   237b8:	2b00      	cmp	r3, #0
   237ba:	d165      	bne.n	23888 <net_6lo_compress+0x1f8>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   237bc:	696b      	ldr	r3, [r5, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   237be:	2b00      	cmp	r3, #0
   237c0:	d162      	bne.n	23888 <net_6lo_compress+0x1f8>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   237c2:	68b2      	ldr	r2, [r6, #8]
   237c4:	7853      	ldrb	r3, [r2, #1]
   237c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   237ca:	7053      	strb	r3, [r2, #1]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   237cc:	7e2b      	ldrb	r3, [r5, #24]
   237ce:	2bff      	cmp	r3, #255	; 0xff
   237d0:	f040 80d0 	bne.w	23974 <net_6lo_compress+0x2e4>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   237d4:	68b2      	ldr	r2, [r6, #8]
   237d6:	7853      	ldrb	r3, [r2, #1]
   237d8:	f043 0308 	orr.w	r3, r3, #8
   237dc:	7053      	strb	r3, [r2, #1]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   237de:	7e6b      	ldrb	r3, [r5, #25]
   237e0:	68b0      	ldr	r0, [r6, #8]
   237e2:	2b02      	cmp	r3, #2
   237e4:	d10a      	bne.n	237fc <net_6lo_compress+0x16c>
	return ((addr->s6_addr[1] == 0x02) &&
   237e6:	8b6b      	ldrh	r3, [r5, #26]
   237e8:	b943      	cbnz	r3, 237fc <net_6lo_compress+0x16c>
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   237ea:	69eb      	ldr	r3, [r5, #28]
   237ec:	b933      	cbnz	r3, 237fc <net_6lo_compress+0x16c>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   237ee:	6a2b      	ldr	r3, [r5, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   237f0:	b923      	cbnz	r3, 237fc <net_6lo_compress+0x16c>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   237f2:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   237f6:	2b00      	cmp	r3, #0
   237f8:	f000 8085 	beq.w	23906 <net_6lo_compress+0x276>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   237fc:	69eb      	ldr	r3, [r5, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   237fe:	2b00      	cmp	r3, #0
   23800:	f000 808f 	beq.w	23922 <net_6lo_compress+0x292>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   23804:	2210      	movs	r2, #16
   23806:	f105 0118 	add.w	r1, r5, #24
   2380a:	4420      	add	r0, r4
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   2380c:	f7e3 fa3c 	bl	6c88 <memcpy>
		offset += 16;
   23810:	3410      	adds	r4, #16
   23812:	e084      	b.n	2391e <net_6lo_compress+0x28e>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   23814:	f043 0310 	orr.w	r3, r3, #16
   23818:	7023      	strb	r3, [r4, #0]
			IPHC[offset++] = tcl;
   2381a:	68b3      	ldr	r3, [r6, #8]
   2381c:	2403      	movs	r4, #3
   2381e:	f883 e002 	strb.w	lr, [r3, #2]
   23822:	e7a8      	b.n	23776 <net_6lo_compress+0xe6>
   23824:	1ca9      	adds	r1, r5, #2
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   23826:	b9aa      	cbnz	r2, 23854 <net_6lo_compress+0x1c4>
   23828:	f01c 0f30 	tst.w	ip, #48	; 0x30
   2382c:	d012      	beq.n	23854 <net_6lo_compress+0x1c4>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   2382e:	7823      	ldrb	r3, [r4, #0]
   23830:	f043 0308 	orr.w	r3, r3, #8
   23834:	7023      	strb	r3, [r4, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   23836:	786b      	ldrb	r3, [r5, #1]
   23838:	68b2      	ldr	r2, [r6, #8]
   2383a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   2383e:	f003 030f 	and.w	r3, r3, #15
   23842:	4303      	orrs	r3, r0
   23844:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   23846:	68b0      	ldr	r0, [r6, #8]
   23848:	2202      	movs	r2, #2
   2384a:	3003      	adds	r0, #3
   2384c:	f7e3 fa1c 	bl	6c88 <memcpy>
			offset += 2;
   23850:	2405      	movs	r4, #5
   23852:	e790      	b.n	23776 <net_6lo_compress+0xe6>
			IPHC[offset++] = tcl;
   23854:	f884 e002 	strb.w	lr, [r4, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   23858:	786b      	ldrb	r3, [r5, #1]
   2385a:	68b2      	ldr	r2, [r6, #8]
   2385c:	f003 030f 	and.w	r3, r3, #15
   23860:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   23862:	68b0      	ldr	r0, [r6, #8]
   23864:	2202      	movs	r2, #2
   23866:	3004      	adds	r0, #4
   23868:	f7e3 fa0e 	bl	6c88 <memcpy>
			offset += 2;
   2386c:	2406      	movs	r4, #6
   2386e:	e782      	b.n	23776 <net_6lo_compress+0xe6>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   23870:	781a      	ldrb	r2, [r3, #0]
   23872:	f042 0202 	orr.w	r2, r2, #2
   23876:	e795      	b.n	237a4 <net_6lo_compress+0x114>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   23878:	781a      	ldrb	r2, [r3, #0]
   2387a:	f042 0203 	orr.w	r2, r2, #3
   2387e:	e791      	b.n	237a4 <net_6lo_compress+0x114>
		IPHC[offset++] = ipv6->hop_limit;
   23880:	1c61      	adds	r1, r4, #1
   23882:	551a      	strb	r2, [r3, r4]
   23884:	b2cc      	uxtb	r4, r1
   23886:	e78e      	b.n	237a6 <net_6lo_compress+0x116>
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   23888:	892a      	ldrh	r2, [r5, #8]
   2388a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   2388e:	429a      	cmp	r2, r3
   23890:	d131      	bne.n	238f6 <net_6lo_compress+0x266>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   23892:	896b      	ldrh	r3, [r5, #10]
   23894:	bb7b      	cbnz	r3, 238f6 <net_6lo_compress+0x266>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   23896:	68eb      	ldr	r3, [r5, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   23898:	bb6b      	cbnz	r3, 238f6 <net_6lo_compress+0x266>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   2389a:	692b      	ldr	r3, [r5, #16]
   2389c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   238a0:	d102      	bne.n	238a8 <net_6lo_compress+0x218>
   238a2:	8aab      	ldrh	r3, [r5, #20]
   238a4:	2bfe      	cmp	r3, #254	; 0xfe
   238a6:	d012      	beq.n	238ce <net_6lo_compress+0x23e>
			if (net_ipv6_addr_based_on_ll(
   238a8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   238ac:	f7ff fe91 	bl	235d2 <net_ipv6_addr_based_on_ll>
   238b0:	68b3      	ldr	r3, [r6, #8]
   238b2:	b9d8      	cbnz	r0, 238ec <net_6lo_compress+0x25c>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   238b4:	785a      	ldrb	r2, [r3, #1]
   238b6:	f042 0210 	orr.w	r2, r2, #16
   238ba:	705a      	strb	r2, [r3, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   238bc:	68b0      	ldr	r0, [r6, #8]
   238be:	2208      	movs	r2, #8
   238c0:	4420      	add	r0, r4
   238c2:	f105 0110 	add.w	r1, r5, #16
   238c6:	f7e3 f9df 	bl	6c88 <memcpy>
				offset += 8;
   238ca:	3408      	adds	r4, #8
   238cc:	e00c      	b.n	238e8 <net_6lo_compress+0x258>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   238ce:	68b2      	ldr	r2, [r6, #8]
   238d0:	7853      	ldrb	r3, [r2, #1]
   238d2:	f043 0320 	orr.w	r3, r3, #32
   238d6:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   238d8:	68b0      	ldr	r0, [r6, #8]
   238da:	2202      	movs	r2, #2
   238dc:	4420      	add	r0, r4
   238de:	f105 0116 	add.w	r1, r5, #22
   238e2:	f7e3 f9d1 	bl	6c88 <memcpy>
			offset += 2;
   238e6:	3402      	adds	r4, #2
				offset += 8;
   238e8:	b2e4      	uxtb	r4, r4
   238ea:	e76f      	b.n	237cc <net_6lo_compress+0x13c>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   238ec:	785a      	ldrb	r2, [r3, #1]
   238ee:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   238f2:	705a      	strb	r2, [r3, #1]
   238f4:	e76a      	b.n	237cc <net_6lo_compress+0x13c>
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   238f6:	68b3      	ldr	r3, [r6, #8]
   238f8:	4601      	mov	r1, r0
   238fa:	2210      	movs	r2, #16
   238fc:	1918      	adds	r0, r3, r4
   238fe:	f7e3 f9c3 	bl	6c88 <memcpy>
		offset += sizeof(struct in6_addr);
   23902:	3410      	adds	r4, #16
   23904:	e7f0      	b.n	238e8 <net_6lo_compress+0x258>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   23906:	7843      	ldrb	r3, [r0, #1]
   23908:	f043 0303 	orr.w	r3, r3, #3
   2390c:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   2390e:	68b0      	ldr	r0, [r6, #8]
   23910:	2201      	movs	r2, #1
   23912:	4420      	add	r0, r4
   23914:	f105 0127 	add.w	r1, r5, #39	; 0x27
   23918:	f7e3 f9b6 	bl	6c88 <memcpy>
		offset++;
   2391c:	3401      	adds	r4, #1
				offset += 8;
   2391e:	b2e4      	uxtb	r4, r4
   23920:	e061      	b.n	239e6 <net_6lo_compress+0x356>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   23922:	6a2b      	ldr	r3, [r5, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   23924:	2b00      	cmp	r3, #0
   23926:	f040 813a 	bne.w	23b9e <net_6lo_compress+0x50e>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   2392a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   2392e:	2b00      	cmp	r3, #0
   23930:	f040 8135 	bne.w	23b9e <net_6lo_compress+0x50e>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   23934:	7843      	ldrb	r3, [r0, #1]
   23936:	f043 0302 	orr.w	r3, r3, #2
   2393a:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   2393c:	68b0      	ldr	r0, [r6, #8]
   2393e:	2201      	movs	r2, #1
   23940:	f105 0119 	add.w	r1, r5, #25
   23944:	4420      	add	r0, r4
   23946:	f7e3 f99f 	bl	6c88 <memcpy>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   2394a:	68b3      	ldr	r3, [r6, #8]
		offset++;
   2394c:	1c60      	adds	r0, r4, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   2394e:	2203      	movs	r2, #3
   23950:	f105 0125 	add.w	r1, r5, #37	; 0x25
   23954:	fa53 f080 	uxtab	r0, r3, r0
   23958:	f7e3 f996 	bl	6c88 <memcpy>
		offset += 3;
   2395c:	3404      	adds	r4, #4
   2395e:	e7de      	b.n	2391e <net_6lo_compress+0x28e>
   23960:	2000e254 	.word	0x2000e254
   23964:	0002ef38 	.word	0x0002ef38
   23968:	0002efe8 	.word	0x0002efe8
   2396c:	00034bea 	.word	0x00034bea
   23970:	00034c29 	.word	0x00034c29
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   23974:	8b2a      	ldrh	r2, [r5, #24]
   23976:	f248 03fe 	movw	r3, #33022	; 0x80fe
   2397a:	429a      	cmp	r2, r3
   2397c:	f105 0018 	add.w	r0, r5, #24
   23980:	d152      	bne.n	23a28 <net_6lo_compress+0x398>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   23982:	8b6b      	ldrh	r3, [r5, #26]
   23984:	2b00      	cmp	r3, #0
   23986:	d14f      	bne.n	23a28 <net_6lo_compress+0x398>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   23988:	69eb      	ldr	r3, [r5, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   2398a:	2b00      	cmp	r3, #0
   2398c:	d14c      	bne.n	23a28 <net_6lo_compress+0x398>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   2398e:	6a2b      	ldr	r3, [r5, #32]
   23990:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   23994:	d102      	bne.n	2399c <net_6lo_compress+0x30c>
   23996:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   23998:	2bfe      	cmp	r3, #254	; 0xfe
   2399a:	d012      	beq.n	239c2 <net_6lo_compress+0x332>
			if (net_ipv6_addr_based_on_ll(
   2399c:	f107 0134 	add.w	r1, r7, #52	; 0x34
   239a0:	f7ff fe17 	bl	235d2 <net_ipv6_addr_based_on_ll>
   239a4:	68b3      	ldr	r3, [r6, #8]
   239a6:	b9d0      	cbnz	r0, 239de <net_6lo_compress+0x34e>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   239a8:	785a      	ldrb	r2, [r3, #1]
   239aa:	f042 0201 	orr.w	r2, r2, #1
   239ae:	705a      	strb	r2, [r3, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   239b0:	68b0      	ldr	r0, [r6, #8]
   239b2:	2208      	movs	r2, #8
   239b4:	4420      	add	r0, r4
   239b6:	f105 0120 	add.w	r1, r5, #32
   239ba:	f7e3 f965 	bl	6c88 <memcpy>
				offset += 8;
   239be:	3408      	adds	r4, #8
   239c0:	e7ad      	b.n	2391e <net_6lo_compress+0x28e>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   239c2:	68b2      	ldr	r2, [r6, #8]
   239c4:	7853      	ldrb	r3, [r2, #1]
   239c6:	f043 0302 	orr.w	r3, r3, #2
   239ca:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   239cc:	68b0      	ldr	r0, [r6, #8]
   239ce:	2202      	movs	r2, #2
   239d0:	4420      	add	r0, r4
   239d2:	f105 0126 	add.w	r1, r5, #38	; 0x26
   239d6:	f7e3 f957 	bl	6c88 <memcpy>
			offset += 2;
   239da:	3402      	adds	r4, #2
   239dc:	e79f      	b.n	2391e <net_6lo_compress+0x28e>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   239de:	785a      	ldrb	r2, [r3, #1]
   239e0:	f042 0203 	orr.w	r2, r2, #3
   239e4:	705a      	strb	r2, [r3, #1]
	if (ipv6->nexthdr != IPPROTO_UDP) {
   239e6:	79ab      	ldrb	r3, [r5, #6]
   239e8:	2b11      	cmp	r3, #17
   239ea:	f040 80b6 	bne.w	23b5a <net_6lo_compress+0x4ca>
		udp = net_udp_get_hdr(pkt, &hdr);
   239ee:	a902      	add	r1, sp, #8
   239f0:	4638      	mov	r0, r7
   239f2:	f007 fd93 	bl	2b51c <net_udp_get_hdr>
		if (!udp) {
   239f6:	4681      	mov	r9, r0
   239f8:	b9d8      	cbnz	r0, 23a32 <net_6lo_compress+0x3a2>
			NET_ERR("could not get UDP header");
   239fa:	4b78      	ldr	r3, [pc, #480]	; (23bdc <net_6lo_compress+0x54c>)
   239fc:	681b      	ldr	r3, [r3, #0]
   239fe:	075b      	lsls	r3, r3, #29
   23a00:	f43f ae56 	beq.w	236b0 <net_6lo_compress+0x20>
   23a04:	2301      	movs	r3, #1
   23a06:	f04f 0200 	mov.w	r2, #0
   23a0a:	f363 0202 	bfi	r2, r3, #0, #3
   23a0e:	4974      	ldr	r1, [pc, #464]	; (23be0 <net_6lo_compress+0x550>)
   23a10:	4b74      	ldr	r3, [pc, #464]	; (23be4 <net_6lo_compress+0x554>)
   23a12:	1a5b      	subs	r3, r3, r1
   23a14:	f360 02c5 	bfi	r2, r0, #3, #3
   23a18:	08db      	lsrs	r3, r3, #3
   23a1a:	f363 128f 	bfi	r2, r3, #6, #10
   23a1e:	4972      	ldr	r1, [pc, #456]	; (23be8 <net_6lo_compress+0x558>)
   23a20:	4872      	ldr	r0, [pc, #456]	; (23bec <net_6lo_compress+0x55c>)
   23a22:	f7de fb63 	bl	20ec <log_1>
   23a26:	e643      	b.n	236b0 <net_6lo_compress+0x20>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   23a28:	68b3      	ldr	r3, [r6, #8]
   23a2a:	4601      	mov	r1, r0
   23a2c:	2210      	movs	r2, #16
   23a2e:	1918      	adds	r0, r3, r4
   23a30:	e6ec      	b.n	2380c <net_6lo_compress+0x17c>
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   23a32:	68b3      	ldr	r3, [r6, #8]
   23a34:	22f0      	movs	r2, #240	; 0xf0
   23a36:	551a      	strb	r2, [r3, r4]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   23a38:	8802      	ldrh	r2, [r0, #0]
   23a3a:	68b5      	ldr	r5, [r6, #8]
   23a3c:	0213      	lsls	r3, r2, #8
   23a3e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   23a42:	b29b      	uxth	r3, r3
   23a44:	f640 720b 	movw	r2, #3851	; 0xf0b
   23a48:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   23a4c:	1c60      	adds	r0, r4, #1
   23a4e:	4594      	cmp	ip, r2
   23a50:	b2c0      	uxtb	r0, r0
   23a52:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   23a56:	d14b      	bne.n	23af0 <net_6lo_compress+0x460>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   23a58:	0211      	lsls	r1, r2, #8
   23a5a:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   23a5e:	f3c1 110b 	ubfx	r1, r1, #4, #12
   23a62:	4561      	cmp	r1, ip
   23a64:	d144      	bne.n	23af0 <net_6lo_compress+0x460>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   23a66:	5d2b      	ldrb	r3, [r5, r4]
   23a68:	f043 0303 	orr.w	r3, r3, #3
   23a6c:	552b      	strb	r3, [r5, r4]
		tmp = (u8_t)(htons(udp->src_port));
   23a6e:	f8b9 3000 	ldrh.w	r3, [r9]
   23a72:	0a1a      	lsrs	r2, r3, #8
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   23a74:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   23a78:	f3c3 2303 	ubfx	r3, r3, #8, #4
   23a7c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		IPHC[offset++] = tmp;
   23a80:	68b2      	ldr	r2, [r6, #8]
   23a82:	3402      	adds	r4, #2
   23a84:	5413      	strb	r3, [r2, r0]
   23a86:	b2e5      	uxtb	r5, r4
	memcpy(&IPHC[offset], &udp->chksum, 2);
   23a88:	68b0      	ldr	r0, [r6, #8]
   23a8a:	2202      	movs	r2, #2
   23a8c:	f109 0106 	add.w	r1, r9, #6
   23a90:	4428      	add	r0, r5
   23a92:	f7e3 f8f9 	bl	6c88 <memcpy>
		net_udp_set_hdr(pkt, udp);
   23a96:	4649      	mov	r1, r9
   23a98:	4638      	mov	r0, r7
   23a9a:	f007 fd9d 	bl	2b5d8 <net_udp_set_hdr>
	offset += 2;
   23a9e:	1cac      	adds	r4, r5, #2
   23aa0:	b2e4      	uxtb	r4, r4
		compressed += NET_UDPH_LEN;
   23aa2:	2530      	movs	r5, #48	; 0x30
	net_buf_add(frag, offset);
   23aa4:	f106 0908 	add.w	r9, r6, #8
   23aa8:	4621      	mov	r1, r4
   23aaa:	4648      	mov	r0, r9
   23aac:	f7fb fc30 	bl	1f310 <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   23ab0:	697b      	ldr	r3, [r7, #20]
   23ab2:	68b0      	ldr	r0, [r6, #8]
	       pkt->frags->len - compressed);
   23ab4:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   23ab6:	6899      	ldr	r1, [r3, #8]
   23ab8:	1b52      	subs	r2, r2, r5
   23aba:	4429      	add	r1, r5
   23abc:	4420      	add	r0, r4
   23abe:	f7e3 f8e3 	bl	6c88 <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   23ac2:	697b      	ldr	r3, [r7, #20]
   23ac4:	8999      	ldrh	r1, [r3, #12]
   23ac6:	4648      	mov	r0, r9
   23ac8:	1b49      	subs	r1, r1, r5
   23aca:	f7fb fc21 	bl	1f310 <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   23ace:	697a      	ldr	r2, [r7, #20]
   23ad0:	2100      	movs	r1, #0
   23ad2:	4638      	mov	r0, r7
   23ad4:	f7fe fdaa 	bl	2262c <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   23ad8:	4638      	mov	r0, r7
   23ada:	4631      	mov	r1, r6
   23adc:	f7fe fdd0 	bl	22680 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   23ae0:	4638      	mov	r0, r7
   23ae2:	f7fe fe9c 	bl	2281e <net_pkt_compact>
	if (fragment) {
   23ae6:	f1b8 0f00 	cmp.w	r8, #0
   23aea:	d138      	bne.n	23b5e <net_6lo_compress+0x4ce>
	return true;
   23aec:	2001      	movs	r0, #1
   23aee:	e5e0      	b.n	236b2 <net_6lo_compress+0x22>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   23af0:	b2d2      	uxtb	r2, r2
   23af2:	2af0      	cmp	r2, #240	; 0xf0
   23af4:	d113      	bne.n	23b1e <net_6lo_compress+0x48e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   23af6:	5d2b      	ldrb	r3, [r5, r4]
   23af8:	f043 0301 	orr.w	r3, r3, #1
   23afc:	552b      	strb	r3, [r5, r4]
		memcpy(&IPHC[offset], &udp->src_port, 2);
   23afe:	68b3      	ldr	r3, [r6, #8]
   23b00:	2202      	movs	r2, #2
   23b02:	4418      	add	r0, r3
   23b04:	4649      	mov	r1, r9
   23b06:	f7e3 f8bf 	bl	6c88 <memcpy>
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   23b0a:	1d25      	adds	r5, r4, #4
   23b0c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   23b10:	68b2      	ldr	r2, [r6, #8]
		offset += 2;
   23b12:	3403      	adds	r4, #3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   23b14:	b2e4      	uxtb	r4, r4
   23b16:	0a1b      	lsrs	r3, r3, #8
   23b18:	b2ed      	uxtb	r5, r5
   23b1a:	5513      	strb	r3, [r2, r4]
   23b1c:	e7b4      	b.n	23a88 <net_6lo_compress+0x3f8>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   23b1e:	0a1b      	lsrs	r3, r3, #8
   23b20:	2bf0      	cmp	r3, #240	; 0xf0
   23b22:	d113      	bne.n	23b4c <net_6lo_compress+0x4bc>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   23b24:	5d2b      	ldrb	r3, [r5, r4]
   23b26:	f043 0302 	orr.w	r3, r3, #2
   23b2a:	552b      	strb	r3, [r5, r4]
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   23b2c:	4649      	mov	r1, r9
   23b2e:	68b3      	ldr	r3, [r6, #8]
   23b30:	f831 2b02 	ldrh.w	r2, [r1], #2
   23b34:	0a12      	lsrs	r2, r2, #8
   23b36:	541a      	strb	r2, [r3, r0]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   23b38:	68b3      	ldr	r3, [r6, #8]
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   23b3a:	1ca0      	adds	r0, r4, #2
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   23b3c:	2202      	movs	r2, #2
   23b3e:	fa53 f080 	uxtab	r0, r3, r0
   23b42:	f7e3 f8a1 	bl	6c88 <memcpy>
		offset += 2;
   23b46:	3404      	adds	r4, #4
		offset += 4;
   23b48:	b2e5      	uxtb	r5, r4
   23b4a:	e79d      	b.n	23a88 <net_6lo_compress+0x3f8>
		memcpy(&IPHC[offset], &udp->src_port, 4);
   23b4c:	2204      	movs	r2, #4
   23b4e:	4649      	mov	r1, r9
   23b50:	4428      	add	r0, r5
   23b52:	f7e3 f899 	bl	6c88 <memcpy>
		offset += 4;
   23b56:	3405      	adds	r4, #5
   23b58:	e7f6      	b.n	23b48 <net_6lo_compress+0x4b8>
	compressed = NET_IPV6H_LEN;
   23b5a:	2528      	movs	r5, #40	; 0x28
   23b5c:	e7a2      	b.n	23aa4 <net_6lo_compress+0x414>
		return fragment(pkt, compressed - offset);
   23b5e:	1b29      	subs	r1, r5, r4
		return fragment(pkt, -1);
   23b60:	4638      	mov	r0, r7
   23b62:	47c0      	blx	r8
   23b64:	e5a5      	b.n	236b2 <net_6lo_compress+0x22>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   23b66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23b6a:	f7fe fc87 	bl	2247c <net_pkt_get_frag>
	if (!frag) {
   23b6e:	4604      	mov	r4, r0
   23b70:	2800      	cmp	r0, #0
   23b72:	f43f ad9d 	beq.w	236b0 <net_6lo_compress+0x20>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   23b76:	f850 3f08 	ldr.w	r3, [r0, #8]!
   23b7a:	2241      	movs	r2, #65	; 0x41
   23b7c:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   23b7e:	2101      	movs	r1, #1
   23b80:	f7fb fbc6 	bl	1f310 <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   23b84:	4638      	mov	r0, r7
   23b86:	4621      	mov	r1, r4
   23b88:	f7fe fd7a 	bl	22680 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   23b8c:	4638      	mov	r0, r7
   23b8e:	f7fe fe46 	bl	2281e <net_pkt_compact>
	if (fragment) {
   23b92:	f1b8 0f00 	cmp.w	r8, #0
   23b96:	d0a9      	beq.n	23aec <net_6lo_compress+0x45c>
		return fragment(pkt, -1);
   23b98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23b9c:	e7e0      	b.n	23b60 <net_6lo_compress+0x4d0>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   23b9e:	8c2b      	ldrh	r3, [r5, #32]
   23ba0:	2b00      	cmp	r3, #0
   23ba2:	f47f ae2f 	bne.w	23804 <net_6lo_compress+0x174>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   23ba6:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   23baa:	2b00      	cmp	r3, #0
   23bac:	f47f ae2a 	bne.w	23804 <net_6lo_compress+0x174>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   23bb0:	7843      	ldrb	r3, [r0, #1]
   23bb2:	f043 0301 	orr.w	r3, r3, #1
   23bb6:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   23bb8:	68b0      	ldr	r0, [r6, #8]
   23bba:	2201      	movs	r2, #1
   23bbc:	f105 0119 	add.w	r1, r5, #25
   23bc0:	4420      	add	r0, r4
   23bc2:	f7e3 f861 	bl	6c88 <memcpy>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   23bc6:	68b3      	ldr	r3, [r6, #8]
		offset++;
   23bc8:	1c60      	adds	r0, r4, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   23bca:	2205      	movs	r2, #5
   23bcc:	f105 0123 	add.w	r1, r5, #35	; 0x23
   23bd0:	fa53 f080 	uxtab	r0, r3, r0
   23bd4:	f7e3 f858 	bl	6c88 <memcpy>
		offset += 5;
   23bd8:	3406      	adds	r4, #6
   23bda:	e6a0      	b.n	2391e <net_6lo_compress+0x28e>
   23bdc:	2000e254 	.word	0x2000e254
   23be0:	0002ef38 	.word	0x0002ef38
   23be4:	0002efe8 	.word	0x0002efe8
   23be8:	00034bea 	.word	0x00034bea
   23bec:	00034c47 	.word	0x00034c47

00023bf0 <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   23bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NET_ASSERT(pkt && pkt->frags);
   23bf4:	4606      	mov	r6, r0
{
   23bf6:	b087      	sub	sp, #28
	NET_ASSERT(pkt && pkt->frags);
   23bf8:	b108      	cbz	r0, 23bfe <net_6lo_uncompress+0xe>
   23bfa:	6943      	ldr	r3, [r0, #20]
   23bfc:	b9a3      	cbnz	r3, 23c28 <net_6lo_uncompress+0x38>
   23bfe:	4bbe      	ldr	r3, [pc, #760]	; (23ef8 <net_6lo_uncompress+0x308>)
   23c00:	681b      	ldr	r3, [r3, #0]
   23c02:	075a      	lsls	r2, r3, #29
   23c04:	d010      	beq.n	23c28 <net_6lo_uncompress+0x38>
   23c06:	2301      	movs	r3, #1
   23c08:	f04f 0200 	mov.w	r2, #0
   23c0c:	f363 0202 	bfi	r2, r3, #0, #3
   23c10:	49ba      	ldr	r1, [pc, #744]	; (23efc <net_6lo_uncompress+0x30c>)
   23c12:	4bbb      	ldr	r3, [pc, #748]	; (23f00 <net_6lo_uncompress+0x310>)
   23c14:	48bb      	ldr	r0, [pc, #748]	; (23f04 <net_6lo_uncompress+0x314>)
   23c16:	1a5b      	subs	r3, r3, r1
   23c18:	f36f 02c5 	bfc	r2, #3, #3
   23c1c:	08db      	lsrs	r3, r3, #3
   23c1e:	f363 128f 	bfi	r2, r3, #6, #10
   23c22:	49b9      	ldr	r1, [pc, #740]	; (23f08 <net_6lo_uncompress+0x318>)
   23c24:	f7de fa62 	bl	20ec <log_1>

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   23c28:	6974      	ldr	r4, [r6, #20]
   23c2a:	68a0      	ldr	r0, [r4, #8]
   23c2c:	7803      	ldrb	r3, [r0, #0]
   23c2e:	f003 0860 	and.w	r8, r3, #96	; 0x60
   23c32:	f1b8 0f60 	cmp.w	r8, #96	; 0x60
   23c36:	f040 823a 	bne.w	240ae <net_6lo_uncompress+0x4be>
	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   23c3a:	f990 3001 	ldrsb.w	r3, [r0, #1]
   23c3e:	2b00      	cmp	r3, #0
   23c40:	da03      	bge.n	23c4a <net_6lo_uncompress+0x5a>
	return false;
   23c42:	2000      	movs	r0, #0
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
}
   23c44:	b007      	add	sp, #28
   23c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   23c4a:	2164      	movs	r1, #100	; 0x64
   23c4c:	4630      	mov	r0, r6
   23c4e:	f7fe fc15 	bl	2247c <net_pkt_get_frag>
	if (!frag) {
   23c52:	4607      	mov	r7, r0
   23c54:	2800      	cmp	r0, #0
   23c56:	d0f4      	beq.n	23c42 <net_6lo_uncompress+0x52>
	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   23c58:	6885      	ldr	r5, [r0, #8]
	pkt->ip_hdr_len = len;
   23c5a:	2328      	movs	r3, #40	; 0x28
	ipv6->vtc = 0x60;
   23c5c:	f885 8000 	strb.w	r8, [r5]
   23c60:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   23c64:	6973      	ldr	r3, [r6, #20]
   23c66:	6899      	ldr	r1, [r3, #8]
   23c68:	780b      	ldrb	r3, [r1, #0]
   23c6a:	f003 0318 	and.w	r3, r3, #24
   23c6e:	2b08      	cmp	r3, #8
   23c70:	d054      	beq.n	23d1c <net_6lo_uncompress+0x12c>
   23c72:	d802      	bhi.n	23c7a <net_6lo_uncompress+0x8a>
   23c74:	b153      	cbz	r3, 23c8c <net_6lo_uncompress+0x9c>
   23c76:	2402      	movs	r4, #2
   23c78:	e01d      	b.n	23cb6 <net_6lo_uncompress+0xc6>
   23c7a:	2b10      	cmp	r3, #16
   23c7c:	d05c      	beq.n	23d38 <net_6lo_uncompress+0x148>
   23c7e:	2b18      	cmp	r3, #24
   23c80:	d1f9      	bne.n	23c76 <net_6lo_uncompress+0x86>
		ipv6->tcflow = 0;
   23c82:	2300      	movs	r3, #0
   23c84:	706b      	strb	r3, [r5, #1]
		ipv6->flow = 0;
   23c86:	70ab      	strb	r3, [r5, #2]
   23c88:	70eb      	strb	r3, [r5, #3]
   23c8a:	e7f4      	b.n	23c76 <net_6lo_uncompress+0x86>
		tcl = CIPHC[offset++];
   23c8c:	788a      	ldrb	r2, [r1, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   23c8e:	0093      	lsls	r3, r2, #2
   23c90:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   23c94:	782a      	ldrb	r2, [r5, #0]
		tcl = (tcl >> 6) | (tcl << 2);
   23c96:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   23c98:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   23c9c:	702a      	strb	r2, [r5, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   23c9e:	78ca      	ldrb	r2, [r1, #3]
   23ca0:	f002 020f 	and.w	r2, r2, #15
   23ca4:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   23ca8:	2202      	movs	r2, #2
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   23caa:	706b      	strb	r3, [r5, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   23cac:	3104      	adds	r1, #4
   23cae:	18a8      	adds	r0, r5, r2
   23cb0:	f7e2 ffea 	bl	6c88 <memcpy>
		offset += 2;
   23cb4:	2406      	movs	r4, #6
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   23cb6:	6973      	ldr	r3, [r6, #20]
   23cb8:	689a      	ldr	r2, [r3, #8]
   23cba:	7813      	ldrb	r3, [r2, #0]
   23cbc:	075b      	lsls	r3, r3, #29
		ipv6->nexthdr = CIPHC[offset];
   23cbe:	bf5c      	itt	pl
   23cc0:	5d13      	ldrbpl	r3, [r2, r4]
   23cc2:	71ab      	strbpl	r3, [r5, #6]
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   23cc4:	7813      	ldrb	r3, [r2, #0]
		offset++;
   23cc6:	bf58      	it	pl
   23cc8:	3401      	addpl	r4, #1
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   23cca:	f003 0303 	and.w	r3, r3, #3
		offset++;
   23cce:	bf58      	it	pl
   23cd0:	b2e4      	uxtbpl	r4, r4
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   23cd2:	2b02      	cmp	r3, #2
   23cd4:	d040      	beq.n	23d58 <net_6lo_uncompress+0x168>
   23cd6:	2b03      	cmp	r3, #3
   23cd8:	d041      	beq.n	23d5e <net_6lo_uncompress+0x16e>
   23cda:	2b01      	cmp	r3, #1
   23cdc:	d03d      	beq.n	23d5a <net_6lo_uncompress+0x16a>
		ipv6->hop_limit = CIPHC[offset++];
   23cde:	5d12      	ldrb	r2, [r2, r4]
   23ce0:	71ea      	strb	r2, [r5, #7]
   23ce2:	1c63      	adds	r3, r4, #1
   23ce4:	b2dc      	uxtb	r4, r3
	(void)memset(&ipv6->src.s6_addr[0], 0, 16);
   23ce6:	f105 0908 	add.w	r9, r5, #8
   23cea:	2210      	movs	r2, #16
   23cec:	2100      	movs	r1, #0
   23cee:	4648      	mov	r0, r9
	(void)memset(&ipv6->dst.s6_addr[0], 0, 16);
   23cf0:	f105 0818 	add.w	r8, r5, #24
	(void)memset(&ipv6->src.s6_addr[0], 0, 16);
   23cf4:	f7e2 fff5 	bl	6ce2 <memset>
	(void)memset(&ipv6->dst.s6_addr[0], 0, 16);
   23cf8:	2100      	movs	r1, #0
   23cfa:	2210      	movs	r2, #16
   23cfc:	4640      	mov	r0, r8
   23cfe:	f7e2 fff0 	bl	6ce2 <memset>
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   23d02:	6973      	ldr	r3, [r6, #20]
   23d04:	6899      	ldr	r1, [r3, #8]
   23d06:	784b      	ldrb	r3, [r1, #1]
   23d08:	f013 0f40 	tst.w	r3, #64	; 0x40
   23d0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
   23d10:	d027      	beq.n	23d62 <net_6lo_uncompress+0x172>
		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   23d12:	b35b      	cbz	r3, 23d6c <net_6lo_uncompress+0x17c>
	net_pkt_frag_unref(frag);
   23d14:	4638      	mov	r0, r7
   23d16:	f7fe fc6e 	bl	225f6 <net_pkt_frag_unref>
   23d1a:	e792      	b.n	23c42 <net_6lo_uncompress+0x52>
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   23d1c:	788b      	ldrb	r3, [r1, #2]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   23d1e:	099a      	lsrs	r2, r3, #6
   23d20:	f003 030f 	and.w	r3, r3, #15
   23d24:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   23d28:	2202      	movs	r2, #2
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   23d2a:	706b      	strb	r3, [r5, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   23d2c:	3103      	adds	r1, #3
   23d2e:	18a8      	adds	r0, r5, r2
   23d30:	f7e2 ffaa 	bl	6c88 <memcpy>
		offset += 2;
   23d34:	2405      	movs	r4, #5
   23d36:	e7be      	b.n	23cb6 <net_6lo_uncompress+0xc6>
		tcl = CIPHC[offset];
   23d38:	788a      	ldrb	r2, [r1, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   23d3a:	0093      	lsls	r3, r2, #2
   23d3c:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   23d40:	782a      	ldrb	r2, [r5, #0]
		tcl = (tcl >> 6) | (tcl << 2);
   23d42:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   23d44:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
		ipv6->tcflow = (tcl & 0x0F) << 4;
   23d48:	011b      	lsls	r3, r3, #4
   23d4a:	706b      	strb	r3, [r5, #1]
		ipv6->flow = 0;
   23d4c:	2300      	movs	r3, #0
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   23d4e:	702a      	strb	r2, [r5, #0]
		ipv6->flow = 0;
   23d50:	70ab      	strb	r3, [r5, #2]
   23d52:	70eb      	strb	r3, [r5, #3]
		offset++;
   23d54:	2403      	movs	r4, #3
   23d56:	e7ae      	b.n	23cb6 <net_6lo_uncompress+0xc6>
		ipv6->hop_limit = 64;
   23d58:	2340      	movs	r3, #64	; 0x40
		ipv6->hop_limit = 255;
   23d5a:	71eb      	strb	r3, [r5, #7]
   23d5c:	e7c3      	b.n	23ce6 <net_6lo_uncompress+0xf6>
   23d5e:	23ff      	movs	r3, #255	; 0xff
   23d60:	e7fb      	b.n	23d5a <net_6lo_uncompress+0x16a>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   23d62:	b2db      	uxtb	r3, r3
   23d64:	2b10      	cmp	r3, #16
   23d66:	d02c      	beq.n	23dc2 <net_6lo_uncompress+0x1d2>
   23d68:	d819      	bhi.n	23d9e <net_6lo_uncompress+0x1ae>
   23d6a:	b313      	cbz	r3, 23db2 <net_6lo_uncompress+0x1c2>
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   23d6c:	6973      	ldr	r3, [r6, #20]
   23d6e:	689b      	ldr	r3, [r3, #8]
   23d70:	785a      	ldrb	r2, [r3, #1]
   23d72:	0710      	lsls	r0, r2, #28
   23d74:	f140 8091 	bpl.w	23e9a <net_6lo_uncompress+0x2aa>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   23d78:	0751      	lsls	r1, r2, #29
   23d7a:	f100 80ba 	bmi.w	23ef2 <net_6lo_uncompress+0x302>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   23d7e:	f002 0203 	and.w	r2, r2, #3
   23d82:	2a02      	cmp	r2, #2
   23d84:	eb03 0104 	add.w	r1, r3, r4
   23d88:	d045      	beq.n	23e16 <net_6lo_uncompress+0x226>
   23d8a:	2a03      	cmp	r2, #3
   23d8c:	d051      	beq.n	23e32 <net_6lo_uncompress+0x242>
   23d8e:	2a01      	cmp	r2, #1
   23d90:	d032      	beq.n	23df8 <net_6lo_uncompress+0x208>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   23d92:	2210      	movs	r2, #16
   23d94:	4640      	mov	r0, r8
   23d96:	f7e2 ff77 	bl	6c88 <memcpy>
		offset += 16;
   23d9a:	3410      	adds	r4, #16
   23d9c:	e039      	b.n	23e12 <net_6lo_uncompress+0x222>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   23d9e:	2b20      	cmp	r3, #32
   23da0:	d01b      	beq.n	23dda <net_6lo_uncompress+0x1ea>
   23da2:	2b30      	cmp	r3, #48	; 0x30
   23da4:	d1e2      	bne.n	23d6c <net_6lo_uncompress+0x17c>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_lladdr_src(pkt));
   23da6:	f106 012c 	add.w	r1, r6, #44	; 0x2c
   23daa:	4648      	mov	r0, r9
   23dac:	f7ff fbd0 	bl	23550 <net_ipv6_addr_create_iid>
   23db0:	e7dc      	b.n	23d6c <net_6lo_uncompress+0x17c>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   23db2:	4421      	add	r1, r4
   23db4:	2210      	movs	r2, #16
   23db6:	4648      	mov	r0, r9
   23db8:	f7e2 ff66 	bl	6c88 <memcpy>
		offset += 16;
   23dbc:	3410      	adds	r4, #16
		offset += 2;
   23dbe:	b2e4      	uxtb	r4, r4
   23dc0:	e7d4      	b.n	23d6c <net_6lo_uncompress+0x17c>
		ipv6->src.s6_addr[0] = 0xFE;
   23dc2:	23fe      	movs	r3, #254	; 0xfe
   23dc4:	722b      	strb	r3, [r5, #8]
		ipv6->src.s6_addr[1] = 0x80;
   23dc6:	2380      	movs	r3, #128	; 0x80
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   23dc8:	4421      	add	r1, r4
		ipv6->src.s6_addr[1] = 0x80;
   23dca:	726b      	strb	r3, [r5, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   23dcc:	2208      	movs	r2, #8
   23dce:	f105 0010 	add.w	r0, r5, #16
   23dd2:	f7e2 ff59 	bl	6c88 <memcpy>
		offset += 8;
   23dd6:	3408      	adds	r4, #8
   23dd8:	e7f1      	b.n	23dbe <net_6lo_uncompress+0x1ce>
		ipv6->src.s6_addr[1] = 0x80;
   23dda:	2280      	movs	r2, #128	; 0x80
		ipv6->src.s6_addr[0] = 0xFE;
   23ddc:	23fe      	movs	r3, #254	; 0xfe
		ipv6->src.s6_addr[1] = 0x80;
   23dde:	726a      	strb	r2, [r5, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   23de0:	22ff      	movs	r2, #255	; 0xff
   23de2:	74ea      	strb	r2, [r5, #19]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   23de4:	4421      	add	r1, r4
		ipv6->src.s6_addr[0] = 0xFE;
   23de6:	722b      	strb	r3, [r5, #8]
		ipv6->src.s6_addr[12] = 0xFE;
   23de8:	752b      	strb	r3, [r5, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   23dea:	2202      	movs	r2, #2
   23dec:	f105 0016 	add.w	r0, r5, #22
   23df0:	f7e2 ff4a 	bl	6c88 <memcpy>
		offset += 2;
   23df4:	3402      	adds	r4, #2
   23df6:	e7e2      	b.n	23dbe <net_6lo_uncompress+0x1ce>
		ipv6->dst.s6_addr[0] = 0xFF;
   23df8:	22ff      	movs	r2, #255	; 0xff
   23dfa:	762a      	strb	r2, [r5, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   23dfc:	780a      	ldrb	r2, [r1, #0]
   23dfe:	766a      	strb	r2, [r5, #25]
   23e00:	1c61      	adds	r1, r4, #1
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   23e02:	2205      	movs	r2, #5
   23e04:	fa53 f181 	uxtab	r1, r3, r1
   23e08:	f105 0023 	add.w	r0, r5, #35	; 0x23
   23e0c:	f7e2 ff3c 	bl	6c88 <memcpy>
		offset += 5;
   23e10:	3406      	adds	r4, #6
		offset += 2;
   23e12:	b2e4      	uxtb	r4, r4
   23e14:	e016      	b.n	23e44 <net_6lo_uncompress+0x254>
		ipv6->dst.s6_addr[0] = 0xFF;
   23e16:	22ff      	movs	r2, #255	; 0xff
   23e18:	762a      	strb	r2, [r5, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   23e1a:	5d1a      	ldrb	r2, [r3, r4]
   23e1c:	766a      	strb	r2, [r5, #25]
   23e1e:	1c61      	adds	r1, r4, #1
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   23e20:	2203      	movs	r2, #3
   23e22:	fa53 f181 	uxtab	r1, r3, r1
   23e26:	f105 0025 	add.w	r0, r5, #37	; 0x25
   23e2a:	f7e2 ff2d 	bl	6c88 <memcpy>
		offset += 3;
   23e2e:	3404      	adds	r4, #4
   23e30:	e7ef      	b.n	23e12 <net_6lo_uncompress+0x222>
		ipv6->dst.s6_addr[0] = 0xFF;
   23e32:	23ff      	movs	r3, #255	; 0xff
   23e34:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   23e36:	2302      	movs	r3, #2
   23e38:	766b      	strb	r3, [r5, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   23e3a:	3401      	adds	r4, #1
   23e3c:	780b      	ldrb	r3, [r1, #0]
   23e3e:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
   23e42:	b2e4      	uxtb	r4, r4
	net_buf_add(frag, NET_IPV6H_LEN);
   23e44:	f107 0308 	add.w	r3, r7, #8
   23e48:	4618      	mov	r0, r3
   23e4a:	2128      	movs	r1, #40	; 0x28
   23e4c:	9301      	str	r3, [sp, #4]
   23e4e:	f7fb fa5f 	bl	1f310 <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   23e52:	6973      	ldr	r3, [r6, #20]
   23e54:	6898      	ldr	r0, [r3, #8]
   23e56:	f890 8000 	ldrb.w	r8, [r0]
   23e5a:	f018 0804 	ands.w	r8, r8, #4
   23e5e:	f000 80eb 	beq.w	24038 <net_6lo_uncompress+0x448>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   23e62:	5d03      	ldrb	r3, [r0, r4]
   23e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   23e68:	2bf0      	cmp	r3, #240	; 0xf0
   23e6a:	d053      	beq.n	23f14 <net_6lo_uncompress+0x324>
		NET_ERR("Unsupported next header");
   23e6c:	4b22      	ldr	r3, [pc, #136]	; (23ef8 <net_6lo_uncompress+0x308>)
   23e6e:	681b      	ldr	r3, [r3, #0]
   23e70:	075a      	lsls	r2, r3, #29
   23e72:	f43f af4f 	beq.w	23d14 <net_6lo_uncompress+0x124>
   23e76:	2301      	movs	r3, #1
   23e78:	f04f 0200 	mov.w	r2, #0
   23e7c:	f363 0202 	bfi	r2, r3, #0, #3
   23e80:	491e      	ldr	r1, [pc, #120]	; (23efc <net_6lo_uncompress+0x30c>)
   23e82:	4b1f      	ldr	r3, [pc, #124]	; (23f00 <net_6lo_uncompress+0x310>)
   23e84:	4821      	ldr	r0, [pc, #132]	; (23f0c <net_6lo_uncompress+0x31c>)
   23e86:	1a5b      	subs	r3, r3, r1
   23e88:	08db      	lsrs	r3, r3, #3
   23e8a:	f36f 02c5 	bfc	r2, #3, #3
   23e8e:	f363 128f 	bfi	r2, r3, #6, #10
   23e92:	491f      	ldr	r1, [pc, #124]	; (23f10 <net_6lo_uncompress+0x320>)
   23e94:	f7de f92a 	bl	20ec <log_1>
   23e98:	e73c      	b.n	23d14 <net_6lo_uncompress+0x124>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   23e9a:	f002 0203 	and.w	r2, r2, #3
   23e9e:	2a02      	cmp	r2, #2
   23ea0:	d011      	beq.n	23ec6 <net_6lo_uncompress+0x2d6>
   23ea2:	2a03      	cmp	r2, #3
   23ea4:	d01f      	beq.n	23ee6 <net_6lo_uncompress+0x2f6>
   23ea6:	2a01      	cmp	r2, #1
   23ea8:	eb03 0104 	add.w	r1, r3, r4
   23eac:	f47f af71 	bne.w	23d92 <net_6lo_uncompress+0x1a2>
		ipv6->dst.s6_addr[0] = 0xFE;
   23eb0:	23fe      	movs	r3, #254	; 0xfe
   23eb2:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   23eb4:	2380      	movs	r3, #128	; 0x80
   23eb6:	766b      	strb	r3, [r5, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   23eb8:	2208      	movs	r2, #8
   23eba:	f105 0020 	add.w	r0, r5, #32
   23ebe:	f7e2 fee3 	bl	6c88 <memcpy>
		offset += 8;
   23ec2:	3408      	adds	r4, #8
   23ec4:	e7a5      	b.n	23e12 <net_6lo_uncompress+0x222>
		ipv6->dst.s6_addr[1] = 0x80;
   23ec6:	2080      	movs	r0, #128	; 0x80
		ipv6->dst.s6_addr[0] = 0xFE;
   23ec8:	21fe      	movs	r1, #254	; 0xfe
		ipv6->dst.s6_addr[1] = 0x80;
   23eca:	7668      	strb	r0, [r5, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   23ecc:	20ff      	movs	r0, #255	; 0xff
		ipv6->dst.s6_addr[0] = 0xFE;
   23ece:	7629      	strb	r1, [r5, #24]
		ipv6->dst.s6_addr[11] = 0xFF;
   23ed0:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
		ipv6->dst.s6_addr[12] = 0xFE;
   23ed4:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   23ed8:	f105 0026 	add.w	r0, r5, #38	; 0x26
   23edc:	1919      	adds	r1, r3, r4
   23ede:	f7e2 fed3 	bl	6c88 <memcpy>
		offset += 2;
   23ee2:	3402      	adds	r4, #2
   23ee4:	e795      	b.n	23e12 <net_6lo_uncompress+0x222>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_lladdr_dst(pkt));
   23ee6:	f106 0134 	add.w	r1, r6, #52	; 0x34
   23eea:	4640      	mov	r0, r8
   23eec:	f7ff fb30 	bl	23550 <net_ipv6_addr_create_iid>
   23ef0:	e7a8      	b.n	23e44 <net_6lo_uncompress+0x254>
		return 0;
   23ef2:	2400      	movs	r4, #0
   23ef4:	e7a6      	b.n	23e44 <net_6lo_uncompress+0x254>
   23ef6:	bf00      	nop
   23ef8:	2000e254 	.word	0x2000e254
   23efc:	0002ef38 	.word	0x0002ef38
   23f00:	0002efe8 	.word	0x0002efe8
   23f04:	00034c64 	.word	0x00034c64
   23f08:	00034c16 	.word	0x00034c16
   23f0c:	00034c8d 	.word	0x00034c8d
   23f10:	00034bff 	.word	0x00034bff
	ipv6->nexthdr = IPPROTO_UDP;
   23f14:	2311      	movs	r3, #17
   23f16:	71ab      	strb	r3, [r5, #6]
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   23f18:	5d02      	ldrb	r2, [r0, r4]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   23f1a:	f8d7 b008 	ldr.w	fp, [r7, #8]
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   23f1e:	f002 0808 	and.w	r8, r2, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   23f22:	f104 0c01 	add.w	ip, r4, #1
   23f26:	f002 0203 	and.w	r2, r2, #3
   23f2a:	fa5f fc8c 	uxtb.w	ip, ip
   23f2e:	2a02      	cmp	r2, #2
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   23f30:	f10b 0928 	add.w	r9, fp, #40	; 0x28
   23f34:	eb00 010c 	add.w	r1, r0, ip
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   23f38:	d058      	beq.n	23fec <net_6lo_uncompress+0x3fc>
   23f3a:	2a03      	cmp	r2, #3
   23f3c:	d065      	beq.n	2400a <net_6lo_uncompress+0x41a>
   23f3e:	2a01      	cmp	r2, #1
   23f40:	f104 0a03 	add.w	sl, r4, #3
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   23f44:	f04f 0202 	mov.w	r2, #2
   23f48:	4648      	mov	r0, r9
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   23f4a:	d040      	beq.n	23fce <net_6lo_uncompress+0x3de>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   23f4c:	f7e2 fe9c 	bl	6c88 <memcpy>
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   23f50:	6972      	ldr	r2, [r6, #20]
   23f52:	6891      	ldr	r1, [r2, #8]
   23f54:	f10b 002a 	add.w	r0, fp, #42	; 0x2a
   23f58:	2202      	movs	r2, #2
   23f5a:	fa51 f18a 	uxtab	r1, r1, sl
   23f5e:	f7e2 fe93 	bl	6c88 <memcpy>
		offset += 2;
   23f62:	3405      	adds	r4, #5
		offset++;
   23f64:	b2e4      	uxtb	r4, r4
	if (!chksum) {
   23f66:	f1b8 0f00 	cmp.w	r8, #0
   23f6a:	d109      	bne.n	23f80 <net_6lo_uncompress+0x390>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   23f6c:	6972      	ldr	r2, [r6, #20]
   23f6e:	6891      	ldr	r1, [r2, #8]
   23f70:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   23f74:	4421      	add	r1, r4
   23f76:	2202      	movs	r2, #2
   23f78:	f7e2 fe86 	bl	6c88 <memcpy>
		offset += 2;
   23f7c:	3402      	adds	r4, #2
   23f7e:	b2e4      	uxtb	r4, r4
	net_buf_add(frag, NET_UDPH_LEN);
   23f80:	2108      	movs	r1, #8
   23f82:	9801      	ldr	r0, [sp, #4]
   23f84:	f7fb f9c4 	bl	1f310 <net_buf_simple_add>
	if (pkt->frags->len < offset) {
   23f88:	6973      	ldr	r3, [r6, #20]
   23f8a:	899a      	ldrh	r2, [r3, #12]
   23f8c:	fa1f fa84 	uxth.w	sl, r4
   23f90:	4552      	cmp	r2, sl
   23f92:	d253      	bcs.n	2403c <net_6lo_uncompress+0x44c>
		NET_ERR("pkt %p too short len %d vs %d", pkt,
   23f94:	4b4c      	ldr	r3, [pc, #304]	; (240c8 <net_6lo_uncompress+0x4d8>)
   23f96:	681b      	ldr	r3, [r3, #0]
   23f98:	075b      	lsls	r3, r3, #29
   23f9a:	f43f aebb 	beq.w	23d14 <net_6lo_uncompress+0x124>
   23f9e:	2101      	movs	r1, #1
   23fa0:	f04f 0300 	mov.w	r3, #0
   23fa4:	f361 0302 	bfi	r3, r1, #0, #3
   23fa8:	4848      	ldr	r0, [pc, #288]	; (240cc <net_6lo_uncompress+0x4dc>)
   23faa:	4949      	ldr	r1, [pc, #292]	; (240d0 <net_6lo_uncompress+0x4e0>)
   23fac:	1a09      	subs	r1, r1, r0
   23fae:	08c9      	lsrs	r1, r1, #3
   23fb0:	f36f 03c5 	bfc	r3, #3, #3
   23fb4:	f361 138f 	bfi	r3, r1, #6, #10
   23fb8:	4946      	ldr	r1, [pc, #280]	; (240d4 <net_6lo_uncompress+0x4e4>)
   23fba:	4847      	ldr	r0, [pc, #284]	; (240d8 <net_6lo_uncompress+0x4e8>)
   23fbc:	e9cd 1602 	strd	r1, r6, [sp, #8]
   23fc0:	e9cd 2404 	strd	r2, r4, [sp, #16]
   23fc4:	a902      	add	r1, sp, #8
   23fc6:	2204      	movs	r2, #4
   23fc8:	f7de f8d7 	bl	217a <log_n>
   23fcc:	e6a2      	b.n	23d14 <net_6lo_uncompress+0x124>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   23fce:	f7e2 fe5b 	bl	6c88 <memcpy>
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   23fd2:	6972      	ldr	r2, [r6, #20]
   23fd4:	fa5f fa8a 	uxtb.w	sl, sl
   23fd8:	6892      	ldr	r2, [r2, #8]
   23fda:	f812 200a 	ldrb.w	r2, [r2, sl]
   23fde:	0212      	lsls	r2, r2, #8
   23fe0:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   23fe4:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
		offset += 2;
   23fe8:	3404      	adds	r4, #4
   23fea:	e7bb      	b.n	23f64 <net_6lo_uncompress+0x374>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   23fec:	f810 100c 	ldrb.w	r1, [r0, ip]
   23ff0:	0209      	lsls	r1, r1, #8
   23ff2:	f041 01f0 	orr.w	r1, r1, #240	; 0xf0
   23ff6:	f8ab 1028 	strh.w	r1, [fp, #40]	; 0x28
		offset++;
   23ffa:	1ca1      	adds	r1, r4, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   23ffc:	fa50 f181 	uxtab	r1, r0, r1
   24000:	f10b 002a 	add.w	r0, fp, #42	; 0x2a
   24004:	f7e2 fe40 	bl	6c88 <memcpy>
   24008:	e7ee      	b.n	23fe8 <net_6lo_uncompress+0x3f8>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   2400a:	f810 200c 	ldrb.w	r2, [r0, ip]
   2400e:	0912      	lsrs	r2, r2, #4
   24010:	0212      	lsls	r2, r2, #8
   24012:	f442 4230 	orr.w	r2, r2, #45056	; 0xb000
   24016:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   2401a:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   2401e:	f810 200c 	ldrb.w	r2, [r0, ip]
   24022:	0212      	lsls	r2, r2, #8
   24024:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   24028:	f442 4230 	orr.w	r2, r2, #45056	; 0xb000
   2402c:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   24030:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
		offset++;
   24034:	3402      	adds	r4, #2
   24036:	e795      	b.n	23f64 <net_6lo_uncompress+0x374>
	struct net_udp_hdr *udp = NULL;
   24038:	46c1      	mov	r9, r8
   2403a:	e7a5      	b.n	23f88 <net_6lo_uncompress+0x398>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   2403c:	6898      	ldr	r0, [r3, #8]
   2403e:	1b12      	subs	r2, r2, r4
   24040:	1901      	adds	r1, r0, r4
   24042:	f7e2 fe0a 	bl	6c5a <memmove>
	pkt->frags->len -= offset;
   24046:	6973      	ldr	r3, [r6, #20]
   24048:	899a      	ldrh	r2, [r3, #12]
   2404a:	eba2 020a 	sub.w	r2, r2, sl
   2404e:	819a      	strh	r2, [r3, #12]
	if (net_pkt_ll_reserve(pkt)) {
   24050:	f896 2040 	ldrb.w	r2, [r6, #64]	; 0x40
   24054:	b132      	cbz	r2, 24064 <net_6lo_uncompress+0x474>
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   24056:	6899      	ldr	r1, [r3, #8]
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   24058:	68bb      	ldr	r3, [r7, #8]
   2405a:	4250      	negs	r0, r2
   2405c:	4401      	add	r1, r0
   2405e:	4418      	add	r0, r3
   24060:	f7e2 fe12 	bl	6c88 <memcpy>
	net_pkt_frag_insert(pkt, frag);
   24064:	4639      	mov	r1, r7
   24066:	4630      	mov	r0, r6
   24068:	f7fe fb0a 	bl	22680 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   2406c:	4630      	mov	r0, r6
   2406e:	f7fe fbd6 	bl	2281e <net_pkt_compact>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   24072:	6972      	ldr	r2, [r6, #20]
	size_t bytes = 0;
   24074:	2300      	movs	r3, #0
	while (buf) {
   24076:	b93a      	cbnz	r2, 24088 <net_6lo_uncompress+0x498>
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   24078:	79a9      	ldrb	r1, [r5, #6]
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   2407a:	3b28      	subs	r3, #40	; 0x28
   2407c:	ba5b      	rev16	r3, r3
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   2407e:	2911      	cmp	r1, #17
	ipv6->len = htons(len);
   24080:	80ab      	strh	r3, [r5, #4]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   24082:	d005      	beq.n	24090 <net_6lo_uncompress+0x4a0>
		return uncompress_ipv6_header(pkt);
   24084:	2001      	movs	r0, #1
   24086:	e5dd      	b.n	23c44 <net_6lo_uncompress+0x54>
		bytes += buf->len;
   24088:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   2408a:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   2408c:	440b      	add	r3, r1
   2408e:	e7f2      	b.n	24076 <net_6lo_uncompress+0x486>
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   24090:	f1b9 0f00 	cmp.w	r9, #0
   24094:	d0f6      	beq.n	24084 <net_6lo_uncompress+0x494>
		udp->len = htons(len);
   24096:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   2409a:	f1b8 0f00 	cmp.w	r8, #0
   2409e:	d0f1      	beq.n	24084 <net_6lo_uncompress+0x494>
	return net_calc_chksum(pkt, IPPROTO_ICMP);
}

static inline u16_t net_calc_chksum_udp(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_UDP);
   240a0:	4630      	mov	r0, r6
   240a2:	f7ff f92d 	bl	23300 <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   240a6:	43c0      	mvns	r0, r0
   240a8:	f8a9 0006 	strh.w	r0, [r9, #6]
   240ac:	e7ea      	b.n	24084 <net_6lo_uncompress+0x494>
	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   240ae:	f003 0341 	and.w	r3, r3, #65	; 0x41
   240b2:	2b41      	cmp	r3, #65	; 0x41
   240b4:	d1e6      	bne.n	24084 <net_6lo_uncompress+0x494>
	memmove(frag->data, frag->data + 1, frag->len - 1);
   240b6:	89a2      	ldrh	r2, [r4, #12]
   240b8:	1c41      	adds	r1, r0, #1
   240ba:	3a01      	subs	r2, #1
   240bc:	f7e2 fdcd 	bl	6c5a <memmove>
	frag->len -= 1;
   240c0:	89a3      	ldrh	r3, [r4, #12]
   240c2:	3b01      	subs	r3, #1
   240c4:	81a3      	strh	r3, [r4, #12]
   240c6:	e7dd      	b.n	24084 <net_6lo_uncompress+0x494>
   240c8:	2000e254 	.word	0x2000e254
   240cc:	0002ef38 	.word	0x0002ef38
   240d0:	0002efe8 	.word	0x0002efe8
   240d4:	00034bff 	.word	0x00034bff
   240d8:	00034ca9 	.word	0x00034ca9

000240dc <net_pkt_append_be16_timeout.constprop.20>:
static inline bool net_pkt_append_be16_timeout(struct net_pkt *pkt,
   240dc:	b507      	push	{r0, r1, r2, lr}
	u16_t value = sys_cpu_to_be16(data);
   240de:	aa02      	add	r2, sp, #8
   240e0:	ba49      	rev16	r1, r1
   240e2:	f822 1d02 	strh.w	r1, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   240e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   240ea:	2102      	movs	r1, #2
   240ec:	f7fe fbdc 	bl	228a8 <net_pkt_append>
}
   240f0:	1e83      	subs	r3, r0, #2
   240f2:	4258      	negs	r0, r3
   240f4:	4158      	adcs	r0, r3
   240f6:	b003      	add	sp, #12
   240f8:	f85d fb04 	ldr.w	pc, [sp], #4

000240fc <net_icmpv6_register_handler>:
Z_GENLIST_PREPEND(slist, snode)
   240fc:	4b03      	ldr	r3, [pc, #12]	; (2410c <net_icmpv6_register_handler+0x10>)
   240fe:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   24100:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
   24102:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   24104:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   24106:	b902      	cbnz	r2, 2410a <net_icmpv6_register_handler+0xe>
	list->tail = node;
   24108:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   2410a:	4770      	bx	lr
   2410c:	200027b4 	.word	0x200027b4

00024110 <net_icmpv6_unregister_handler>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24110:	4b0c      	ldr	r3, [pc, #48]	; (24144 <net_icmpv6_unregister_handler+0x34>)
   24112:	681a      	ldr	r2, [r3, #0]
   24114:	2100      	movs	r1, #0
   24116:	b902      	cbnz	r2, 2411a <net_icmpv6_unregister_handler+0xa>

void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_find_and_remove(&handlers, &handler->node);
}
   24118:	4770      	bx	lr
   2411a:	4290      	cmp	r0, r2
   2411c:	d10f      	bne.n	2413e <net_icmpv6_unregister_handler+0x2e>
   2411e:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   24120:	b939      	cbnz	r1, 24132 <net_icmpv6_unregister_handler+0x22>
   24122:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   24124:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   24126:	4288      	cmp	r0, r1
   24128:	d100      	bne.n	2412c <net_icmpv6_unregister_handler+0x1c>
	list->tail = node;
   2412a:	605a      	str	r2, [r3, #4]
	parent->next = child;
   2412c:	2300      	movs	r3, #0
   2412e:	6003      	str	r3, [r0, #0]
   24130:	4770      	bx	lr
   24132:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   24134:	685a      	ldr	r2, [r3, #4]
   24136:	4290      	cmp	r0, r2
	list->tail = node;
   24138:	bf08      	it	eq
   2413a:	6059      	streq	r1, [r3, #4]
   2413c:	e7f6      	b.n	2412c <net_icmpv6_unregister_handler+0x1c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2413e:	4611      	mov	r1, r2
   24140:	6812      	ldr	r2, [r2, #0]
   24142:	e7e8      	b.n	24116 <net_icmpv6_unregister_handler+0x6>
   24144:	200027b4 	.word	0x200027b4

00024148 <net_icmpv6_set_chksum>:
	 */
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
}

int net_icmpv6_set_chksum(struct net_pkt *pkt)
{
   24148:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *temp_frag;
	u16_t temp_pos;
	u16_t pos;

	/* Skip to the position of checksum */
	frag = net_frag_skip(pkt->frags, 0, &pos,
   2414a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
{
   2414e:	b086      	sub	sp, #24
	frag = net_frag_skip(pkt->frags, 0, &pos,
   24150:	1c9a      	adds	r2, r3, #2
			     net_pkt_ip_hdr_len(pkt) +
   24152:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
	u16_t chksum = 0;
   24156:	2100      	movs	r1, #0
	frag = net_frag_skip(pkt->frags, 0, &pos,
   24158:	4413      	add	r3, r2
	return net_frag_read(frag, offset, pos, len, NULL);
   2415a:	9100      	str	r1, [sp, #0]
   2415c:	f10d 0216 	add.w	r2, sp, #22
{
   24160:	4604      	mov	r4, r0
   24162:	b29b      	uxth	r3, r3
   24164:	6940      	ldr	r0, [r0, #20]
	u16_t chksum = 0;
   24166:	f8ad 1012 	strh.w	r1, [sp, #18]
   2416a:	f7fe fbe1 	bl	22930 <net_frag_read>
			     net_pkt_ipv6_ext_len(pkt) +
			     1 + 1 /* type + code */);
	if (pos > 0 && !frag) {
   2416e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   24172:	4605      	mov	r5, r0
   24174:	b122      	cbz	r2, 24180 <net_icmpv6_set_chksum+0x38>
   24176:	b918      	cbnz	r0, 24180 <net_icmpv6_set_chksum+0x38>
		return -EINVAL;
   24178:	f06f 0015 	mvn.w	r0, #21
	if (temp_pos > 0 && !temp_frag) {
		return -EINVAL;
	}

	return 0;
}
   2417c:	b006      	add	sp, #24
   2417e:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(chksum),
   24180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24184:	9302      	str	r3, [sp, #8]
   24186:	f10d 0612 	add.w	r6, sp, #18
   2418a:	2302      	movs	r3, #2
   2418c:	9300      	str	r3, [sp, #0]
   2418e:	9601      	str	r6, [sp, #4]
   24190:	f10d 0316 	add.w	r3, sp, #22
   24194:	4629      	mov	r1, r5
   24196:	4620      	mov	r0, r4
	temp_pos = pos;
   24198:	f8ad 2014 	strh.w	r2, [sp, #20]
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(chksum),
   2419c:	f7fe fc3e 	bl	22a1c <net_pkt_write>
	if (pos > 0 && !frag) {
   241a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   241a4:	b10b      	cbz	r3, 241aa <net_icmpv6_set_chksum+0x62>
   241a6:	2800      	cmp	r0, #0
   241a8:	d0e6      	beq.n	24178 <net_icmpv6_set_chksum+0x30>
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   241aa:	213a      	movs	r1, #58	; 0x3a
   241ac:	4620      	mov	r0, r4
   241ae:	f7ff f8a7 	bl	23300 <net_calc_chksum>
	temp_frag = net_pkt_write(pkt, temp_frag, temp_pos, &temp_pos,
   241b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	chksum = ~net_calc_chksum_icmpv6(pkt);
   241b6:	43c0      	mvns	r0, r0
	temp_frag = net_pkt_write(pkt, temp_frag, temp_pos, &temp_pos,
   241b8:	e9cd 6301 	strd	r6, r3, [sp, #4]
   241bc:	2302      	movs	r3, #2
	chksum = ~net_calc_chksum_icmpv6(pkt);
   241be:	f8ad 0012 	strh.w	r0, [sp, #18]
	temp_frag = net_pkt_write(pkt, temp_frag, temp_pos, &temp_pos,
   241c2:	9300      	str	r3, [sp, #0]
   241c4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   241c8:	ab05      	add	r3, sp, #20
   241ca:	4629      	mov	r1, r5
   241cc:	4620      	mov	r0, r4
   241ce:	f7fe fc25 	bl	22a1c <net_pkt_write>
	if (temp_pos > 0 && !temp_frag) {
   241d2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   241d6:	b11b      	cbz	r3, 241e0 <net_icmpv6_set_chksum+0x98>
   241d8:	2800      	cmp	r0, #0
   241da:	d0cd      	beq.n	24178 <net_icmpv6_set_chksum+0x30>
	return 0;
   241dc:	2000      	movs	r0, #0
   241de:	e7cd      	b.n	2417c <net_icmpv6_set_chksum+0x34>
   241e0:	4618      	mov	r0, r3
   241e2:	e7cb      	b.n	2417c <net_icmpv6_set_chksum+0x34>

000241e4 <net_icmpv6_get_hdr>:

int net_icmpv6_get_hdr(struct net_pkt *pkt, struct net_icmp_hdr *hdr)
{
   241e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct net_buf *frag;
	u16_t pos;

	frag = net_frag_read(pkt->frags,
   241e6:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
			     net_pkt_ip_hdr_len(pkt) +
   241ea:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
	frag = net_frag_read(pkt->frags,
   241ee:	9100      	str	r1, [sp, #0]
   241f0:	441c      	add	r4, r3
   241f2:	f10d 020e 	add.w	r2, sp, #14
   241f6:	2304      	movs	r3, #4
   241f8:	b2a1      	uxth	r1, r4
   241fa:	6940      	ldr	r0, [r0, #20]
   241fc:	f7fe fb98 	bl	22930 <net_frag_read>
			     net_pkt_ipv6_ext_len(pkt),
			     &pos, sizeof(*hdr), (u8_t *)hdr);
	if (pos > 0 && !frag) {
   24200:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   24204:	b1c3      	cbz	r3, 24238 <net_icmpv6_get_hdr+0x54>
   24206:	b9b8      	cbnz	r0, 24238 <net_icmpv6_get_hdr+0x54>
		NET_ERR("Cannot get the ICMPv6 header");;
   24208:	4b0d      	ldr	r3, [pc, #52]	; (24240 <net_icmpv6_get_hdr+0x5c>)
   2420a:	681b      	ldr	r3, [r3, #0]
   2420c:	075b      	lsls	r3, r3, #29
   2420e:	d010      	beq.n	24232 <net_icmpv6_get_hdr+0x4e>
   24210:	2301      	movs	r3, #1
   24212:	f04f 0200 	mov.w	r2, #0
   24216:	f363 0202 	bfi	r2, r3, #0, #3
   2421a:	490a      	ldr	r1, [pc, #40]	; (24244 <net_icmpv6_get_hdr+0x60>)
   2421c:	4b0a      	ldr	r3, [pc, #40]	; (24248 <net_icmpv6_get_hdr+0x64>)
   2421e:	1a5b      	subs	r3, r3, r1
   24220:	f360 02c5 	bfi	r2, r0, #3, #3
   24224:	08db      	lsrs	r3, r3, #3
   24226:	f363 128f 	bfi	r2, r3, #6, #10
   2422a:	4908      	ldr	r1, [pc, #32]	; (2424c <net_icmpv6_get_hdr+0x68>)
   2422c:	4808      	ldr	r0, [pc, #32]	; (24250 <net_icmpv6_get_hdr+0x6c>)
   2422e:	f7dd ff5d 	bl	20ec <log_1>
		return -EINVAL;
   24232:	f06f 0015 	mvn.w	r0, #21
   24236:	e000      	b.n	2423a <net_icmpv6_get_hdr+0x56>
	}

	return 0;
   24238:	2000      	movs	r0, #0
}
   2423a:	b004      	add	sp, #16
   2423c:	bd10      	pop	{r4, pc}
   2423e:	bf00      	nop
   24240:	2000e27c 	.word	0x2000e27c
   24244:	0002ef38 	.word	0x0002ef38
   24248:	0002f038 	.word	0x0002f038
   2424c:	00034cd3 	.word	0x00034cd3
   24250:	00034d67 	.word	0x00034d67

00024254 <net_icmpv6_set_hdr>:

int net_icmpv6_set_hdr(struct net_pkt *pkt, struct net_icmp_hdr *hdr)
{
   24254:	b510      	push	{r4, lr}
	struct net_buf *frag;
	u16_t pos;

	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   24256:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   2425a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
   2425e:	b086      	sub	sp, #24
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   24260:	441a      	add	r2, r3
   24262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24266:	e9cd 1301 	strd	r1, r3, [sp, #4]
   2426a:	2304      	movs	r3, #4
   2426c:	9300      	str	r3, [sp, #0]
   2426e:	b292      	uxth	r2, r2
   24270:	f10d 0316 	add.w	r3, sp, #22
   24274:	6941      	ldr	r1, [r0, #20]
   24276:	f7fe fbd1 	bl	22a1c <net_pkt_write>
			     net_pkt_ipv6_ext_len(pkt), &pos,
			     sizeof(*hdr), (u8_t *)hdr, PKT_WAIT_TIME);
	if (pos > 0 && !frag) {
   2427a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   2427e:	b1c3      	cbz	r3, 242b2 <net_icmpv6_set_hdr+0x5e>
   24280:	b9b8      	cbnz	r0, 242b2 <net_icmpv6_set_hdr+0x5e>
		NET_ERR("Cannot set the ICMPv6 header");
   24282:	4b0d      	ldr	r3, [pc, #52]	; (242b8 <net_icmpv6_set_hdr+0x64>)
   24284:	681b      	ldr	r3, [r3, #0]
   24286:	075b      	lsls	r3, r3, #29
   24288:	d010      	beq.n	242ac <net_icmpv6_set_hdr+0x58>
   2428a:	2301      	movs	r3, #1
   2428c:	f04f 0200 	mov.w	r2, #0
   24290:	f363 0202 	bfi	r2, r3, #0, #3
   24294:	4909      	ldr	r1, [pc, #36]	; (242bc <net_icmpv6_set_hdr+0x68>)
   24296:	4b0a      	ldr	r3, [pc, #40]	; (242c0 <net_icmpv6_set_hdr+0x6c>)
   24298:	1a5b      	subs	r3, r3, r1
   2429a:	f360 02c5 	bfi	r2, r0, #3, #3
   2429e:	08db      	lsrs	r3, r3, #3
   242a0:	f363 128f 	bfi	r2, r3, #6, #10
   242a4:	4907      	ldr	r1, [pc, #28]	; (242c4 <net_icmpv6_set_hdr+0x70>)
   242a6:	4808      	ldr	r0, [pc, #32]	; (242c8 <net_icmpv6_set_hdr+0x74>)
   242a8:	f7dd ff20 	bl	20ec <log_1>
		return -EINVAL;
   242ac:	f06f 0015 	mvn.w	r0, #21
   242b0:	e000      	b.n	242b4 <net_icmpv6_set_hdr+0x60>
	}

	return 0;
   242b2:	2000      	movs	r0, #0
}
   242b4:	b006      	add	sp, #24
   242b6:	bd10      	pop	{r4, pc}
   242b8:	2000e27c 	.word	0x2000e27c
   242bc:	0002ef38 	.word	0x0002ef38
   242c0:	0002f038 	.word	0x0002f038
   242c4:	00034ce6 	.word	0x00034ce6
   242c8:	00034df4 	.word	0x00034df4

000242cc <handle_echo_request>:

	return 0;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   242cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		log_strdup(net_sprint_ipv6_addr(&NET_IPV6_HDR(orig)->src)),
		log_strdup(net_sprint_ipv6_addr(&NET_IPV6_HDR(orig)->dst)));

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   242d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	iface = net_pkt_iface(orig);
   242d4:	6a07      	ldr	r7, [r0, #32]
{
   242d6:	b096      	sub	sp, #88	; 0x58
   242d8:	4605      	mov	r5, r0
	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   242da:	2000      	movs	r0, #0
   242dc:	f7fe f8b6 	bl	2244c <net_pkt_get_reserve_tx>
	if (!pkt) {
   242e0:	4604      	mov	r4, r0
   242e2:	2800      	cmp	r0, #0
   242e4:	f000 80ee 	beq.w	244c4 <handle_echo_request+0x1f8>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   242e8:	696e      	ldr	r6, [r5, #20]
	size_t bytes = 0;
   242ea:	2100      	movs	r1, #0
	while (buf) {
   242ec:	2e00      	cmp	r6, #0
   242ee:	f040 809e 	bne.w	2442e <handle_echo_request+0x162>
   242f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   242f6:	4632      	mov	r2, r6
   242f8:	4628      	mov	r0, r5
   242fa:	f7fe f9cb 	bl	22694 <net_pkt_copy>
	}

	payload_len = ntohs(NET_IPV6_HDR(orig)->len) - sizeof(NET_ICMPH_LEN) -
							NET_ICMPV6_UNUSED_LEN;
	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   242fe:	4680      	mov	r8, r0
   24300:	2800      	cmp	r0, #0
   24302:	f000 80dc 	beq.w	244be <handle_echo_request+0x1f2>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   24306:	4601      	mov	r1, r0
   24308:	4620      	mov	r0, r4
   2430a:	f7fe f99f 	bl	2264c <net_pkt_frag_add>
	pkt->family = family;
   2430e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	pkt->iface = iface;
   24312:	6227      	str	r7, [r4, #32]
	pkt->family = family;
   24314:	220a      	movs	r2, #10
   24316:	f362 03c6 	bfi	r3, r2, #3, #4
   2431a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   2431e:	683b      	ldr	r3, [r7, #0]
   24320:	7d5b      	ldrb	r3, [r3, #21]
   24322:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   24326:	683b      	ldr	r3, [r7, #0]
   24328:	7d5b      	ldrb	r3, [r3, #21]
   2432a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   2432e:	f108 0008 	add.w	r0, r8, #8
   24332:	f7fb f855 	bl	1f3e0 <net_buf_simple_headroom>
	pkt->ip_hdr_len = len;
   24336:	2328      	movs	r3, #40	; 0x28
   24338:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
   2433c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   24340:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
   24344:	2b00      	cmp	r3, #0
   24346:	d076      	beq.n	24436 <handle_echo_request+0x16a>
	pkt->ipv6_ext_len = len;
   24348:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	return pkt->frags->data;
   2434c:	6963      	ldr	r3, [r4, #20]
   2434e:	689a      	ldr	r2, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   24350:	2360      	movs	r3, #96	; 0x60
   24352:	7013      	strb	r3, [r2, #0]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   24354:	2300      	movs	r3, #0
   24356:	7053      	strb	r3, [r2, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   24358:	7093      	strb	r3, [r2, #2]
   2435a:	70d3      	strb	r3, [r2, #3]
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   2435c:	687b      	ldr	r3, [r7, #4]
	if (!iface->config.ip.ipv6) {
   2435e:	b10b      	cbz	r3, 24364 <handle_echo_request+0x98>
	return iface->config.ip.ipv6->hop_limit;
   24360:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
   24364:	71d3      	strb	r3, [r2, #7]
   24366:	696b      	ldr	r3, [r5, #20]
   24368:	689e      	ldr	r6, [r3, #8]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   2436a:	7e13      	ldrb	r3, [r2, #24]
   2436c:	2bff      	cmp	r3, #255	; 0xff
   2436e:	f106 0308 	add.w	r3, r6, #8
   24372:	f106 0618 	add.w	r6, r6, #24
   24376:	d161      	bne.n	2443c <handle_echo_request+0x170>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   24378:	f10d 0e08 	add.w	lr, sp, #8
   2437c:	46f4      	mov	ip, lr
   2437e:	6818      	ldr	r0, [r3, #0]
   24380:	6859      	ldr	r1, [r3, #4]
   24382:	46f0      	mov	r8, lr
   24384:	e8a8 0003 	stmia.w	r8!, {r0, r1}
   24388:	3308      	adds	r3, #8
   2438a:	42b3      	cmp	r3, r6
   2438c:	46c6      	mov	lr, r8
   2438e:	d1f6      	bne.n	2437e <handle_echo_request+0xb2>
   24390:	3218      	adds	r2, #24
   24392:	ae06      	add	r6, sp, #24
   24394:	4663      	mov	r3, ip
   24396:	cb03      	ldmia	r3!, {r0, r1}
   24398:	42b3      	cmp	r3, r6
   2439a:	6010      	str	r0, [r2, #0]
   2439c:	6051      	str	r1, [r2, #4]
   2439e:	469c      	mov	ip, r3
   243a0:	f102 0208 	add.w	r2, r2, #8
   243a4:	d1f6      	bne.n	24394 <handle_echo_request+0xc8>
   243a6:	6963      	ldr	r3, [r4, #20]
   243a8:	f8d3 8008 	ldr.w	r8, [r3, #8]
   243ac:	696b      	ldr	r3, [r5, #20]
				&NET_IPV6_HDR(orig)->src);

		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   243ae:	6899      	ldr	r1, [r3, #8]
   243b0:	4638      	mov	r0, r7
   243b2:	3118      	adds	r1, #24
   243b4:	f7fd fc42 	bl	21c3c <net_if_ipv6_select_src_addr>
   243b8:	4637      	mov	r7, r6
   243ba:	4603      	mov	r3, r0
   243bc:	f100 0c10 	add.w	ip, r0, #16
   243c0:	6818      	ldr	r0, [r3, #0]
   243c2:	6859      	ldr	r1, [r3, #4]
   243c4:	463a      	mov	r2, r7
   243c6:	c203      	stmia	r2!, {r0, r1}
   243c8:	3308      	adds	r3, #8
   243ca:	4563      	cmp	r3, ip
   243cc:	4617      	mov	r7, r2
   243ce:	d1f7      	bne.n	243c0 <handle_echo_request+0xf4>
   243d0:	f108 0308 	add.w	r3, r8, #8
   243d4:	af0a      	add	r7, sp, #40	; 0x28
   243d6:	4632      	mov	r2, r6
   243d8:	ca03      	ldmia	r2!, {r0, r1}
   243da:	42ba      	cmp	r2, r7
   243dc:	6018      	str	r0, [r3, #0]
   243de:	6059      	str	r1, [r3, #4]
   243e0:	4616      	mov	r6, r2
   243e2:	f103 0308 	add.w	r3, r3, #8
   243e6:	d1f6      	bne.n	243d6 <handle_echo_request+0x10a>
			goto drop;
		}
#endif
	}

	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_dst(orig)->addr;
   243e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   243ea:	62e3      	str	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_dst(orig)->len;
   243ec:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   243f0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_lladdr_dst(pkt)->addr = NULL;
   243f4:	2600      	movs	r6, #0
   243f6:	6366      	str	r6, [r4, #52]	; 0x34

	/* ICMPv6 fields */
	ret = net_icmpv6_get_hdr(pkt, &icmp_hdr);
   243f8:	a901      	add	r1, sp, #4
   243fa:	4620      	mov	r0, r4
   243fc:	f7ff fef2 	bl	241e4 <net_icmpv6_get_hdr>
	if (ret < 0) {
   24400:	42b0      	cmp	r0, r6
   24402:	db5c      	blt.n	244be <handle_echo_request+0x1f2>
		goto drop;
	}

	icmp_hdr.type = NET_ICMPV6_ECHO_REPLY;
   24404:	2381      	movs	r3, #129	; 0x81
	icmp_hdr.code = 0;
	icmp_hdr.chksum = 0;
	net_icmpv6_set_hdr(pkt, &icmp_hdr);
   24406:	a901      	add	r1, sp, #4
   24408:	4620      	mov	r0, r4
	icmp_hdr.type = NET_ICMPV6_ECHO_REPLY;
   2440a:	9301      	str	r3, [sp, #4]
	net_icmpv6_set_hdr(pkt, &icmp_hdr);
   2440c:	f7ff ff22 	bl	24254 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt);
   24410:	4620      	mov	r0, r4
   24412:	f7ff fe99 	bl	24148 <net_icmpv6_set_chksum>

	NET_DBG("Sending Echo Reply from %s to %s",
		log_strdup(net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src)),
		log_strdup(net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->dst)));

	if (net_send_data(pkt) < 0) {
   24416:	4620      	mov	r0, r4
   24418:	f7fc f9f8 	bl	2080c <net_send_data>
   2441c:	42b0      	cmp	r0, r6
   2441e:	db4e      	blt.n	244be <handle_echo_request+0x1f2>
		goto drop;
	}

	net_pkt_unref(orig);
   24420:	4628      	mov	r0, r5
   24422:	f7fe f8ec 	bl	225fe <net_pkt_unref>
	net_stats_update_icmp_sent(iface);

	return NET_OK;
   24426:	4630      	mov	r0, r6

drop_no_pkt:
	net_stats_update_icmp_drop(iface);

	return NET_DROP;
}
   24428:	b016      	add	sp, #88	; 0x58
   2442a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes += buf->len;
   2442e:	89b3      	ldrh	r3, [r6, #12]
		buf = buf->frags;
   24430:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
   24432:	4419      	add	r1, r3
   24434:	e75a      	b.n	242ec <handle_echo_request+0x20>
	pkt->ipv6_ext_len = len;
   24436:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
   2443a:	e787      	b.n	2434c <handle_echo_request+0x80>
		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   2443c:	af0a      	add	r7, sp, #40	; 0x28
   2443e:	463a      	mov	r2, r7
   24440:	6818      	ldr	r0, [r3, #0]
   24442:	6859      	ldr	r1, [r3, #4]
   24444:	46bc      	mov	ip, r7
   24446:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   2444a:	3308      	adds	r3, #8
   2444c:	42b3      	cmp	r3, r6
   2444e:	4667      	mov	r7, ip
   24450:	d1f6      	bne.n	24440 <handle_echo_request+0x174>
   24452:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   24454:	af06      	add	r7, sp, #24
   24456:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	return pkt->frags->data;
   2445a:	696a      	ldr	r2, [r5, #20]
   2445c:	6963      	ldr	r3, [r4, #20]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   2445e:	6896      	ldr	r6, [r2, #8]
   24460:	689b      	ldr	r3, [r3, #8]
   24462:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   24466:	f106 0218 	add.w	r2, r6, #24
   2446a:	46f4      	mov	ip, lr
   2446c:	3628      	adds	r6, #40	; 0x28
   2446e:	6810      	ldr	r0, [r2, #0]
   24470:	6851      	ldr	r1, [r2, #4]
   24472:	46f0      	mov	r8, lr
   24474:	e8a8 0003 	stmia.w	r8!, {r0, r1}
   24478:	3208      	adds	r2, #8
   2447a:	42b2      	cmp	r2, r6
   2447c:	46c6      	mov	lr, r8
   2447e:	d1f6      	bne.n	2446e <handle_echo_request+0x1a2>
   24480:	3308      	adds	r3, #8
   24482:	ae12      	add	r6, sp, #72	; 0x48
   24484:	4662      	mov	r2, ip
   24486:	ca03      	ldmia	r2!, {r0, r1}
   24488:	42b2      	cmp	r2, r6
   2448a:	6018      	str	r0, [r3, #0]
   2448c:	6059      	str	r1, [r3, #4]
   2448e:	4694      	mov	ip, r2
   24490:	f103 0308 	add.w	r3, r3, #8
   24494:	d1f6      	bne.n	24484 <handle_echo_request+0x1b8>
   24496:	6963      	ldr	r3, [r4, #20]
   24498:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   2449c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   244a0:	af16      	add	r7, sp, #88	; 0x58
   244a2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   244a6:	f10c 0318 	add.w	r3, ip, #24
   244aa:	4632      	mov	r2, r6
   244ac:	ca03      	ldmia	r2!, {r0, r1}
   244ae:	42ba      	cmp	r2, r7
   244b0:	6018      	str	r0, [r3, #0]
   244b2:	6059      	str	r1, [r3, #4]
   244b4:	4616      	mov	r6, r2
   244b6:	f103 0308 	add.w	r3, r3, #8
   244ba:	d1f6      	bne.n	244aa <handle_echo_request+0x1de>
   244bc:	e794      	b.n	243e8 <handle_echo_request+0x11c>
	net_pkt_unref(pkt);
   244be:	4620      	mov	r0, r4
   244c0:	f7fe f89d 	bl	225fe <net_pkt_unref>
	return NET_DROP;
   244c4:	2002      	movs	r0, #2
   244c6:	e7af      	b.n	24428 <handle_echo_request+0x15c>

000244c8 <net_icmpv6_get_ns_hdr>:
{
   244c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	frag = net_frag_read(pkt->frags,
   244ca:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
   244ce:	1d23      	adds	r3, r4, #4
			     net_pkt_ip_hdr_len(pkt) +
   244d0:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
	frag = net_frag_read(pkt->frags,
   244d4:	9100      	str	r1, [sp, #0]
   244d6:	441c      	add	r4, r3
   244d8:	f10d 020e 	add.w	r2, sp, #14
   244dc:	2314      	movs	r3, #20
   244de:	b2a1      	uxth	r1, r4
   244e0:	6940      	ldr	r0, [r0, #20]
   244e2:	f7fe fa25 	bl	22930 <net_frag_read>
	if (pos > 0 && !frag) {
   244e6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   244ea:	b1c3      	cbz	r3, 2451e <net_icmpv6_get_ns_hdr+0x56>
   244ec:	b9b8      	cbnz	r0, 2451e <net_icmpv6_get_ns_hdr+0x56>
		NET_ERR("Cannot get the ICMPv6 NS header");;
   244ee:	4b0d      	ldr	r3, [pc, #52]	; (24524 <net_icmpv6_get_ns_hdr+0x5c>)
   244f0:	681b      	ldr	r3, [r3, #0]
   244f2:	075b      	lsls	r3, r3, #29
   244f4:	d010      	beq.n	24518 <net_icmpv6_get_ns_hdr+0x50>
   244f6:	2301      	movs	r3, #1
   244f8:	f04f 0200 	mov.w	r2, #0
   244fc:	f363 0202 	bfi	r2, r3, #0, #3
   24500:	4909      	ldr	r1, [pc, #36]	; (24528 <net_icmpv6_get_ns_hdr+0x60>)
   24502:	4b0a      	ldr	r3, [pc, #40]	; (2452c <net_icmpv6_get_ns_hdr+0x64>)
   24504:	1a5b      	subs	r3, r3, r1
   24506:	f360 02c5 	bfi	r2, r0, #3, #3
   2450a:	08db      	lsrs	r3, r3, #3
   2450c:	f363 128f 	bfi	r2, r3, #6, #10
   24510:	4907      	ldr	r1, [pc, #28]	; (24530 <net_icmpv6_get_ns_hdr+0x68>)
   24512:	4808      	ldr	r0, [pc, #32]	; (24534 <net_icmpv6_get_ns_hdr+0x6c>)
   24514:	f7dd fdea 	bl	20ec <log_1>
		return -EINVAL;
   24518:	f06f 0015 	mvn.w	r0, #21
   2451c:	e000      	b.n	24520 <net_icmpv6_get_ns_hdr+0x58>
	return 0;
   2451e:	2000      	movs	r0, #0
}
   24520:	b004      	add	sp, #16
   24522:	bd10      	pop	{r4, pc}
   24524:	2000e27c 	.word	0x2000e27c
   24528:	0002ef38 	.word	0x0002ef38
   2452c:	0002f038 	.word	0x0002f038
   24530:	00034cf9 	.word	0x00034cf9
   24534:	00034dac 	.word	0x00034dac

00024538 <net_icmpv6_set_ns_hdr>:
{
   24538:	b530      	push	{r4, r5, lr}
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2453a:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
	hdr->reserved = 0;
   2453e:	2400      	movs	r4, #0
   24540:	700c      	strb	r4, [r1, #0]
   24542:	704c      	strb	r4, [r1, #1]
   24544:	708c      	strb	r4, [r1, #2]
   24546:	70cc      	strb	r4, [r1, #3]
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   24548:	1d13      	adds	r3, r2, #4
   2454a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
   2454e:	b087      	sub	sp, #28
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   24550:	441a      	add	r2, r3
   24552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24556:	e9cd 1301 	strd	r1, r3, [sp, #4]
   2455a:	2314      	movs	r3, #20
   2455c:	9300      	str	r3, [sp, #0]
   2455e:	b292      	uxth	r2, r2
   24560:	f10d 0316 	add.w	r3, sp, #22
   24564:	6941      	ldr	r1, [r0, #20]
   24566:	f7fe fa59 	bl	22a1c <net_pkt_write>
	if (pos > 0 && !frag) {
   2456a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   2456e:	b1c3      	cbz	r3, 245a2 <net_icmpv6_set_ns_hdr+0x6a>
   24570:	b9d0      	cbnz	r0, 245a8 <net_icmpv6_set_ns_hdr+0x70>
		NET_ERR("Cannot set the ICMPv6 NS header");
   24572:	4b0e      	ldr	r3, [pc, #56]	; (245ac <net_icmpv6_set_ns_hdr+0x74>)
   24574:	681b      	ldr	r3, [r3, #0]
   24576:	075b      	lsls	r3, r3, #29
   24578:	d010      	beq.n	2459c <net_icmpv6_set_ns_hdr+0x64>
   2457a:	2301      	movs	r3, #1
   2457c:	f04f 0200 	mov.w	r2, #0
   24580:	f363 0202 	bfi	r2, r3, #0, #3
   24584:	490a      	ldr	r1, [pc, #40]	; (245b0 <net_icmpv6_set_ns_hdr+0x78>)
   24586:	4b0b      	ldr	r3, [pc, #44]	; (245b4 <net_icmpv6_set_ns_hdr+0x7c>)
   24588:	1a5b      	subs	r3, r3, r1
   2458a:	f360 02c5 	bfi	r2, r0, #3, #3
   2458e:	08db      	lsrs	r3, r3, #3
   24590:	f363 128f 	bfi	r2, r3, #6, #10
   24594:	4908      	ldr	r1, [pc, #32]	; (245b8 <net_icmpv6_set_ns_hdr+0x80>)
   24596:	4809      	ldr	r0, [pc, #36]	; (245bc <net_icmpv6_set_ns_hdr+0x84>)
   24598:	f7dd fda8 	bl	20ec <log_1>
		return -EINVAL;
   2459c:	f06f 0015 	mvn.w	r0, #21
   245a0:	e000      	b.n	245a4 <net_icmpv6_set_ns_hdr+0x6c>
	return 0;
   245a2:	4618      	mov	r0, r3
}
   245a4:	b007      	add	sp, #28
   245a6:	bd30      	pop	{r4, r5, pc}
	return 0;
   245a8:	4620      	mov	r0, r4
   245aa:	e7fb      	b.n	245a4 <net_icmpv6_set_ns_hdr+0x6c>
   245ac:	2000e27c 	.word	0x2000e27c
   245b0:	0002ef38 	.word	0x0002ef38
   245b4:	0002f038 	.word	0x0002f038
   245b8:	00034d0f 	.word	0x00034d0f
   245bc:	00034e39 	.word	0x00034e39

000245c0 <net_icmpv6_get_nd_opt_hdr>:
{
   245c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	frag = net_frag_read(pkt->frags,
   245c2:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
			     net_pkt_ip_hdr_len(pkt) +
   245c6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
	frag = net_frag_read(pkt->frags,
   245ca:	3304      	adds	r3, #4
   245cc:	4423      	add	r3, r4
			     net_pkt_ipv6_ext_opt_len(pkt),
   245ce:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
	frag = net_frag_read(pkt->frags,
   245d2:	9100      	str	r1, [sp, #0]
   245d4:	441c      	add	r4, r3
   245d6:	f10d 020e 	add.w	r2, sp, #14
   245da:	2302      	movs	r3, #2
   245dc:	b2a1      	uxth	r1, r4
   245de:	6940      	ldr	r0, [r0, #20]
   245e0:	f7fe f9a6 	bl	22930 <net_frag_read>
	if (pos > 0 && !frag) {
   245e4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   245e8:	b133      	cbz	r3, 245f8 <net_icmpv6_get_nd_opt_hdr+0x38>
   245ea:	2800      	cmp	r0, #0
		return -EINVAL;
   245ec:	bf14      	ite	ne
   245ee:	2000      	movne	r0, #0
   245f0:	f06f 0015 	mvneq.w	r0, #21
}
   245f4:	b004      	add	sp, #16
   245f6:	bd10      	pop	{r4, pc}
	return 0;
   245f8:	4618      	mov	r0, r3
   245fa:	e7fb      	b.n	245f4 <net_icmpv6_get_nd_opt_hdr+0x34>

000245fc <net_icmpv6_get_na_hdr>:
{
   245fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   245fe:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
   24602:	1d23      	adds	r3, r4, #4
   24604:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
   24608:	9100      	str	r1, [sp, #0]
   2460a:	441c      	add	r4, r3
   2460c:	f10d 020e 	add.w	r2, sp, #14
   24610:	2314      	movs	r3, #20
   24612:	b2a1      	uxth	r1, r4
   24614:	6940      	ldr	r0, [r0, #20]
   24616:	f7fe f98b 	bl	22930 <net_frag_read>
	if (pos > 0 && !frag) {
   2461a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2461e:	b1c3      	cbz	r3, 24652 <net_icmpv6_get_na_hdr+0x56>
   24620:	b9b8      	cbnz	r0, 24652 <net_icmpv6_get_na_hdr+0x56>
		NET_ERR("Cannot get the ICMPv6 NA header");
   24622:	4b0d      	ldr	r3, [pc, #52]	; (24658 <net_icmpv6_get_na_hdr+0x5c>)
   24624:	681b      	ldr	r3, [r3, #0]
   24626:	075b      	lsls	r3, r3, #29
   24628:	d010      	beq.n	2464c <net_icmpv6_get_na_hdr+0x50>
   2462a:	2301      	movs	r3, #1
   2462c:	f04f 0200 	mov.w	r2, #0
   24630:	f363 0202 	bfi	r2, r3, #0, #3
   24634:	4909      	ldr	r1, [pc, #36]	; (2465c <net_icmpv6_get_na_hdr+0x60>)
   24636:	4b0a      	ldr	r3, [pc, #40]	; (24660 <net_icmpv6_get_na_hdr+0x64>)
   24638:	1a5b      	subs	r3, r3, r1
   2463a:	f360 02c5 	bfi	r2, r0, #3, #3
   2463e:	08db      	lsrs	r3, r3, #3
   24640:	f363 128f 	bfi	r2, r3, #6, #10
   24644:	4907      	ldr	r1, [pc, #28]	; (24664 <net_icmpv6_get_na_hdr+0x68>)
   24646:	4808      	ldr	r0, [pc, #32]	; (24668 <net_icmpv6_get_na_hdr+0x6c>)
   24648:	f7dd fd50 	bl	20ec <log_1>
		return -EINVAL;
   2464c:	f06f 0015 	mvn.w	r0, #21
   24650:	e000      	b.n	24654 <net_icmpv6_get_na_hdr+0x58>
	return 0;
   24652:	2000      	movs	r0, #0
}
   24654:	b004      	add	sp, #16
   24656:	bd10      	pop	{r4, pc}
   24658:	2000e27c 	.word	0x2000e27c
   2465c:	0002ef38 	.word	0x0002ef38
   24660:	0002f038 	.word	0x0002f038
   24664:	00034d25 	.word	0x00034d25
   24668:	00034d88 	.word	0x00034d88

0002466c <net_icmpv6_set_na_hdr>:
{
   2466c:	b530      	push	{r4, r5, lr}
   2466e:	4604      	mov	r4, r0
   24670:	460d      	mov	r5, r1
   24672:	b087      	sub	sp, #28
	(void)memset(hdr->reserved, 0, sizeof(hdr->reserved));
   24674:	2203      	movs	r2, #3
   24676:	2100      	movs	r1, #0
   24678:	1c68      	adds	r0, r5, #1
   2467a:	f7e2 fb32 	bl	6ce2 <memset>
	frag = net_pkt_write(pkt, pkt->frags,
   2467e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   24682:	6961      	ldr	r1, [r4, #20]
   24684:	1d13      	adds	r3, r2, #4
			     net_pkt_ip_hdr_len(pkt) +
   24686:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
	frag = net_pkt_write(pkt, pkt->frags,
   2468a:	441a      	add	r2, r3
   2468c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24690:	e9cd 5301 	strd	r5, r3, [sp, #4]
   24694:	2314      	movs	r3, #20
   24696:	9300      	str	r3, [sp, #0]
   24698:	b292      	uxth	r2, r2
   2469a:	f10d 0316 	add.w	r3, sp, #22
   2469e:	4620      	mov	r0, r4
   246a0:	f7fe f9bc 	bl	22a1c <net_pkt_write>
	if (!frag) {
   246a4:	b9b8      	cbnz	r0, 246d6 <net_icmpv6_set_na_hdr+0x6a>
		NET_ERR("Cannot set the ICMPv6 NA header");
   246a6:	4b0d      	ldr	r3, [pc, #52]	; (246dc <net_icmpv6_set_na_hdr+0x70>)
   246a8:	681b      	ldr	r3, [r3, #0]
   246aa:	075b      	lsls	r3, r3, #29
   246ac:	d010      	beq.n	246d0 <net_icmpv6_set_na_hdr+0x64>
   246ae:	2301      	movs	r3, #1
   246b0:	f04f 0200 	mov.w	r2, #0
   246b4:	f363 0202 	bfi	r2, r3, #0, #3
   246b8:	4909      	ldr	r1, [pc, #36]	; (246e0 <net_icmpv6_set_na_hdr+0x74>)
   246ba:	4b0a      	ldr	r3, [pc, #40]	; (246e4 <net_icmpv6_set_na_hdr+0x78>)
   246bc:	1a5b      	subs	r3, r3, r1
   246be:	f360 02c5 	bfi	r2, r0, #3, #3
   246c2:	08db      	lsrs	r3, r3, #3
   246c4:	f363 128f 	bfi	r2, r3, #6, #10
   246c8:	4907      	ldr	r1, [pc, #28]	; (246e8 <net_icmpv6_set_na_hdr+0x7c>)
   246ca:	4808      	ldr	r0, [pc, #32]	; (246ec <net_icmpv6_set_na_hdr+0x80>)
   246cc:	f7dd fd0e 	bl	20ec <log_1>
		return -EINVAL;
   246d0:	f06f 0015 	mvn.w	r0, #21
   246d4:	e000      	b.n	246d8 <net_icmpv6_set_na_hdr+0x6c>
	return 0;
   246d6:	2000      	movs	r0, #0
}
   246d8:	b007      	add	sp, #28
   246da:	bd30      	pop	{r4, r5, pc}
   246dc:	2000e27c 	.word	0x2000e27c
   246e0:	0002ef38 	.word	0x0002ef38
   246e4:	0002f038 	.word	0x0002f038
   246e8:	00034d3b 	.word	0x00034d3b
   246ec:	00034e15 	.word	0x00034e15

000246f0 <net_icmpv6_get_ra_hdr>:
{
   246f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   246f2:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
   246f6:	1d23      	adds	r3, r4, #4
   246f8:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
   246fc:	9100      	str	r1, [sp, #0]
   246fe:	441c      	add	r4, r3
   24700:	f10d 020e 	add.w	r2, sp, #14
   24704:	230c      	movs	r3, #12
   24706:	b2a1      	uxth	r1, r4
   24708:	6940      	ldr	r0, [r0, #20]
   2470a:	f7fe f911 	bl	22930 <net_frag_read>
	if (pos > 0 && !frag) {
   2470e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   24712:	b1c3      	cbz	r3, 24746 <net_icmpv6_get_ra_hdr+0x56>
   24714:	b9b8      	cbnz	r0, 24746 <net_icmpv6_get_ra_hdr+0x56>
		NET_ERR("Cannot get the ICMPv6 RA header");
   24716:	4b0d      	ldr	r3, [pc, #52]	; (2474c <net_icmpv6_get_ra_hdr+0x5c>)
   24718:	681b      	ldr	r3, [r3, #0]
   2471a:	075b      	lsls	r3, r3, #29
   2471c:	d010      	beq.n	24740 <net_icmpv6_get_ra_hdr+0x50>
   2471e:	2301      	movs	r3, #1
   24720:	f04f 0200 	mov.w	r2, #0
   24724:	f363 0202 	bfi	r2, r3, #0, #3
   24728:	4909      	ldr	r1, [pc, #36]	; (24750 <net_icmpv6_get_ra_hdr+0x60>)
   2472a:	4b0a      	ldr	r3, [pc, #40]	; (24754 <net_icmpv6_get_ra_hdr+0x64>)
   2472c:	1a5b      	subs	r3, r3, r1
   2472e:	f360 02c5 	bfi	r2, r0, #3, #3
   24732:	08db      	lsrs	r3, r3, #3
   24734:	f363 128f 	bfi	r2, r3, #6, #10
   24738:	4907      	ldr	r1, [pc, #28]	; (24758 <net_icmpv6_get_ra_hdr+0x68>)
   2473a:	4808      	ldr	r0, [pc, #32]	; (2475c <net_icmpv6_get_ra_hdr+0x6c>)
   2473c:	f7dd fcd6 	bl	20ec <log_1>
		return -EINVAL;
   24740:	f06f 0015 	mvn.w	r0, #21
   24744:	e000      	b.n	24748 <net_icmpv6_get_ra_hdr+0x58>
	return 0;
   24746:	2000      	movs	r0, #0
}
   24748:	b004      	add	sp, #16
   2474a:	bd10      	pop	{r4, pc}
   2474c:	2000e27c 	.word	0x2000e27c
   24750:	0002ef38 	.word	0x0002ef38
   24754:	0002f038 	.word	0x0002f038
   24758:	00034d51 	.word	0x00034d51
   2475c:	00034dd0 	.word	0x00034dd0

00024760 <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   24760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24764:	4698      	mov	r8, r3
   24766:	6943      	ldr	r3, [r0, #20]
	struct net_pkt *pkt;
	struct net_buf *frag;
	struct net_if *iface = net_pkt_iface(orig);
   24768:	6a07      	ldr	r7, [r0, #32]
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   2476a:	689b      	ldr	r3, [r3, #8]
   2476c:	799b      	ldrb	r3, [r3, #6]
   2476e:	2b3a      	cmp	r3, #58	; 0x3a
{
   24770:	b09b      	sub	sp, #108	; 0x6c
   24772:	4606      	mov	r6, r0
   24774:	4689      	mov	r9, r1
   24776:	4692      	mov	sl, r2
	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   24778:	d10d      	bne.n	24796 <net_icmpv6_send_error+0x36>
		struct net_icmp_hdr icmp_hdr[1];

		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   2477a:	a916      	add	r1, sp, #88	; 0x58
   2477c:	f7ff fd32 	bl	241e4 <net_icmpv6_get_hdr>
   24780:	b118      	cbz	r0, 2478a <net_icmpv6_send_error+0x2a>
   24782:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
   24786:	2b00      	cmp	r3, #0
   24788:	db05      	blt.n	24796 <net_icmpv6_send_error+0x36>
		    icmp_hdr->code < 128) {
			/* We must not send ICMP errors back */
			err = -EINVAL;
   2478a:	f06f 0515 	mvn.w	r5, #21

drop_no_pkt:
	net_stats_update_icmp_drop(iface);

	return err;
}
   2478e:	4628      	mov	r0, r5
   24790:	b01b      	add	sp, #108	; 0x6c
   24792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   24796:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2479a:	2000      	movs	r0, #0
   2479c:	f7fd fe56 	bl	2244c <net_pkt_get_reserve_tx>
	if (!pkt) {
   247a0:	4604      	mov	r4, r0
   247a2:	2800      	cmp	r0, #0
   247a4:	f000 8144 	beq.w	24a30 <net_icmpv6_send_error+0x2d0>
	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   247a8:	6973      	ldr	r3, [r6, #20]
   247aa:	6899      	ldr	r1, [r3, #8]
   247ac:	798a      	ldrb	r2, [r1, #6]
   247ae:	2a11      	cmp	r2, #17
   247b0:	f000 80f2 	beq.w	24998 <net_icmpv6_send_error+0x238>
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   247b4:	2a06      	cmp	r2, #6
   247b6:	f000 80f1 	beq.w	2499c <net_icmpv6_send_error+0x23c>
	} else if (NET_IPV6_HDR(orig)->nexthdr == NET_IPV6_NEXTHDR_FRAG) {
   247ba:	2a2c      	cmp	r2, #44	; 0x2c
   247bc:	f040 80df 	bne.w	2497e <net_icmpv6_send_error+0x21e>
	size_t bytes = 0;
   247c0:	2500      	movs	r5, #0
		bytes += buf->len;
   247c2:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   247c4:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   247c6:	4415      	add	r5, r2
	while (buf) {
   247c8:	2b00      	cmp	r3, #0
   247ca:	d1fa      	bne.n	247c2 <net_icmpv6_send_error+0x62>
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   247cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   247d0:	2230      	movs	r2, #48	; 0x30
   247d2:	4629      	mov	r1, r5
   247d4:	4630      	mov	r0, r6
   247d6:	f7fd ff5d 	bl	22694 <net_pkt_copy>
	if (!frag) {
   247da:	4683      	mov	fp, r0
   247dc:	2800      	cmp	r0, #0
   247de:	f000 8124 	beq.w	24a2a <net_icmpv6_send_error+0x2ca>
	net_pkt_frag_add(pkt, frag);
   247e2:	4601      	mov	r1, r0
   247e4:	4620      	mov	r0, r4
   247e6:	f7fd ff31 	bl	2264c <net_pkt_frag_add>
	pkt->family = family;
   247ea:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	pkt->iface = iface;
   247ee:	6227      	str	r7, [r4, #32]
	pkt->family = family;
   247f0:	220a      	movs	r2, #10
   247f2:	f362 03c6 	bfi	r3, r2, #3, #4
   247f6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   247fa:	683b      	ldr	r3, [r7, #0]
   247fc:	7d5b      	ldrb	r3, [r3, #21]
   247fe:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   24802:	683b      	ldr	r3, [r7, #0]
   24804:	7d5b      	ldrb	r3, [r3, #21]
   24806:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   2480a:	f10b 0008 	add.w	r0, fp, #8
   2480e:	f7fa fde7 	bl	1f3e0 <net_buf_simple_headroom>
   24812:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
	setup_ipv6_header(pkt, extra_len, net_if_ipv6_get_hop_limit(iface),
   24816:	6878      	ldr	r0, [r7, #4]
	pkt->ipv6_ext_len = len;
   24818:	2300      	movs	r3, #0
   2481a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	if (!iface->config.ip.ipv6) {
   2481e:	b108      	cbz	r0, 24824 <net_icmpv6_send_error+0xc4>
	return iface->config.ip.ipv6->hop_limit;
   24820:	f890 01cc 	ldrb.w	r0, [r0, #460]	; 0x1cc
	struct net_buf *frag = pkt->frags;
   24824:	6961      	ldr	r1, [r4, #20]
   24826:	f88d a017 	strb.w	sl, [sp, #23]
	return pkt->frags->data;
   2482a:	688b      	ldr	r3, [r1, #8]
   2482c:	f88d 9016 	strb.w	r9, [sp, #22]
	NET_IPV6_HDR(pkt)->len = htons(NET_ICMPH_LEN + extra_len +
   24830:	b2ad      	uxth	r5, r5
	const u32_t unused = 0;
   24832:	2200      	movs	r2, #0
	NET_IPV6_HDR(pkt)->len = htons(NET_ICMPH_LEN + extra_len +
   24834:	3508      	adds	r5, #8
	const u32_t unused = 0;
   24836:	9216      	str	r2, [sp, #88]	; 0x58
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   24838:	f04f 0c60 	mov.w	ip, #96	; 0x60
	NET_IPV6_HDR(pkt)->tcflow = 0;
   2483c:	705a      	strb	r2, [r3, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   2483e:	709a      	strb	r2, [r3, #2]
   24840:	70da      	strb	r2, [r3, #3]
	NET_IPV6_HDR(pkt)->len = htons(NET_ICMPH_LEN + extra_len +
   24842:	ba6d      	rev16	r5, r5
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   24844:	223a      	movs	r2, #58	; 0x3a
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   24846:	f883 c000 	strb.w	ip, [r3]
	NET_IPV6_HDR(pkt)->len = htons(NET_ICMPH_LEN + extra_len +
   2484a:	809d      	strh	r5, [r3, #4]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   2484c:	719a      	strb	r2, [r3, #6]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   2484e:	71d8      	strb	r0, [r3, #7]
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   24850:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	pkt->ip_hdr_len = len;
   24854:	2228      	movs	r2, #40	; 0x28
   24856:	f10d 0316 	add.w	r3, sp, #22
   2485a:	f04f 0a01 	mov.w	sl, #1
   2485e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
   24862:	4620      	mov	r0, r4
   24864:	9502      	str	r5, [sp, #8]
   24866:	9301      	str	r3, [sp, #4]
   24868:	f8cd a000 	str.w	sl, [sp]
   2486c:	ab12      	add	r3, sp, #72	; 0x48
   2486e:	f7fe f8d5 	bl	22a1c <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   24872:	f10d 0317 	add.w	r3, sp, #23
   24876:	4601      	mov	r1, r0
   24878:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   2487c:	9502      	str	r5, [sp, #8]
   2487e:	e9cd a300 	strd	sl, r3, [sp]
   24882:	4620      	mov	r0, r4
   24884:	ab12      	add	r3, sp, #72	; 0x48
   24886:	f7fe f8c9 	bl	22a1c <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   2488a:	9502      	str	r5, [sp, #8]
   2488c:	2304      	movs	r3, #4
   2488e:	ad16      	add	r5, sp, #88	; 0x58
   24890:	9300      	str	r3, [sp, #0]
   24892:	4601      	mov	r1, r0
   24894:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   24898:	9501      	str	r5, [sp, #4]
   2489a:	ab12      	add	r3, sp, #72	; 0x48
   2489c:	4620      	mov	r0, r4
   2489e:	f7fe f8bd 	bl	22a1c <net_pkt_write>
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   248a2:	f1b9 0f04 	cmp.w	r9, #4
   248a6:	d10c      	bne.n	248c2 <net_icmpv6_send_error+0x162>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   248a8:	4620      	mov	r0, r4
   248aa:	f7fe f988 	bl	22bbe <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   248ae:	ea4f 4318 	mov.w	r3, r8, lsr #16
	dst[0] = val >> 8;
   248b2:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   248b4:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   248b6:	f3c8 2307 	ubfx	r3, r8, #8, #8
   248ba:	7102      	strb	r2, [r0, #4]
   248bc:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   248be:	f880 8007 	strb.w	r8, [r0, #7]
	return pkt->frags->data;
   248c2:	6973      	ldr	r3, [r6, #20]
   248c4:	689a      	ldr	r2, [r3, #8]
	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   248c6:	7e13      	ldrb	r3, [r2, #24]
   248c8:	2bff      	cmp	r3, #255	; 0xff
   248ca:	f102 0308 	add.w	r3, r2, #8
   248ce:	f102 0218 	add.w	r2, r2, #24
   248d2:	d167      	bne.n	249a4 <net_icmpv6_send_error+0x244>
   248d4:	6961      	ldr	r1, [r4, #20]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   248d6:	f10d 0e18 	add.w	lr, sp, #24
   248da:	688d      	ldr	r5, [r1, #8]
   248dc:	46f4      	mov	ip, lr
   248de:	6818      	ldr	r0, [r3, #0]
   248e0:	6859      	ldr	r1, [r3, #4]
   248e2:	46f0      	mov	r8, lr
   248e4:	e8a8 0003 	stmia.w	r8!, {r0, r1}
   248e8:	3308      	adds	r3, #8
   248ea:	4293      	cmp	r3, r2
   248ec:	46c6      	mov	lr, r8
   248ee:	d1f6      	bne.n	248de <net_icmpv6_send_error+0x17e>
   248f0:	f105 0318 	add.w	r3, r5, #24
   248f4:	ad0a      	add	r5, sp, #40	; 0x28
   248f6:	4662      	mov	r2, ip
   248f8:	ca03      	ldmia	r2!, {r0, r1}
   248fa:	42aa      	cmp	r2, r5
   248fc:	6018      	str	r0, [r3, #0]
   248fe:	6059      	str	r1, [r3, #4]
   24900:	4694      	mov	ip, r2
   24902:	f103 0308 	add.w	r3, r3, #8
   24906:	d1f6      	bne.n	248f6 <net_icmpv6_send_error+0x196>
   24908:	6963      	ldr	r3, [r4, #20]
   2490a:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2490e:	6973      	ldr	r3, [r6, #20]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   24910:	6899      	ldr	r1, [r3, #8]
   24912:	4638      	mov	r0, r7
   24914:	3118      	adds	r1, #24
   24916:	f7fd f991 	bl	21c3c <net_if_ipv6_select_src_addr>
   2491a:	462f      	mov	r7, r5
   2491c:	4603      	mov	r3, r0
   2491e:	f100 0c10 	add.w	ip, r0, #16
   24922:	6818      	ldr	r0, [r3, #0]
   24924:	6859      	ldr	r1, [r3, #4]
   24926:	463a      	mov	r2, r7
   24928:	c203      	stmia	r2!, {r0, r1}
   2492a:	3308      	adds	r3, #8
   2492c:	4563      	cmp	r3, ip
   2492e:	4617      	mov	r7, r2
   24930:	d1f7      	bne.n	24922 <net_icmpv6_send_error+0x1c2>
   24932:	f108 0308 	add.w	r3, r8, #8
   24936:	af0e      	add	r7, sp, #56	; 0x38
   24938:	462a      	mov	r2, r5
   2493a:	ca03      	ldmia	r2!, {r0, r1}
   2493c:	42ba      	cmp	r2, r7
   2493e:	6018      	str	r0, [r3, #0]
   24940:	6059      	str	r1, [r3, #4]
   24942:	4615      	mov	r5, r2
   24944:	f103 0308 	add.w	r3, r3, #8
   24948:	d1f6      	bne.n	24938 <net_icmpv6_send_error+0x1d8>
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_dst(orig)->addr;
   2494a:	6b73      	ldr	r3, [r6, #52]	; 0x34
   2494c:	62e3      	str	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_dst(orig)->len;
   2494e:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   24952:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
   24956:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   24958:	6363      	str	r3, [r4, #52]	; 0x34
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
   2495a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   2495e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	err = net_icmpv6_set_chksum(pkt);
   24962:	4620      	mov	r0, r4
   24964:	f7ff fbf0 	bl	24148 <net_icmpv6_set_chksum>
	if (err < 0) {
   24968:	1e05      	subs	r5, r0, #0
   2496a:	db04      	blt.n	24976 <net_icmpv6_send_error+0x216>
	if (net_send_data(pkt) >= 0) {
   2496c:	4620      	mov	r0, r4
   2496e:	f7fb ff4d 	bl	2080c <net_send_data>
   24972:	2800      	cmp	r0, #0
   24974:	da5f      	bge.n	24a36 <net_icmpv6_send_error+0x2d6>
	net_pkt_unref(pkt);
   24976:	4620      	mov	r0, r4
   24978:	f7fd fe41 	bl	225fe <net_pkt_unref>
   2497c:	e707      	b.n	2478e <net_icmpv6_send_error+0x2e>
	return iface->if_dev->l2;
   2497e:	683b      	ldr	r3, [r7, #0]
	return net_if_l2(iface)->reserve(iface, (void *)dst_ip6);
   24980:	685b      	ldr	r3, [r3, #4]
   24982:	3118      	adds	r1, #24
   24984:	689b      	ldr	r3, [r3, #8]
   24986:	4638      	mov	r0, r7
   24988:	4798      	blx	r3
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   2498a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
		if (reserve > space) {
   2498e:	282f      	cmp	r0, #47	; 0x2f
   24990:	d906      	bls.n	249a0 <net_icmpv6_send_error+0x240>
			extra_len = space - reserve;
   24992:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
   24996:	e719      	b.n	247cc <net_icmpv6_send_error+0x6c>
		extra_len = sizeof(struct net_ipv6_hdr) +
   24998:	2530      	movs	r5, #48	; 0x30
   2499a:	e717      	b.n	247cc <net_icmpv6_send_error+0x6c>
		extra_len = sizeof(struct net_ipv6_hdr) +
   2499c:	253c      	movs	r5, #60	; 0x3c
   2499e:	e715      	b.n	247cc <net_icmpv6_send_error+0x6c>
			extra_len = 0;
   249a0:	2500      	movs	r5, #0
   249a2:	e713      	b.n	247cc <net_icmpv6_send_error+0x6c>
		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   249a4:	af0e      	add	r7, sp, #56	; 0x38
   249a6:	46bc      	mov	ip, r7
   249a8:	6818      	ldr	r0, [r3, #0]
   249aa:	6859      	ldr	r1, [r3, #4]
   249ac:	46be      	mov	lr, r7
   249ae:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   249b2:	3308      	adds	r3, #8
   249b4:	4293      	cmp	r3, r2
   249b6:	4677      	mov	r7, lr
   249b8:	d1f6      	bne.n	249a8 <net_icmpv6_send_error+0x248>
   249ba:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   249be:	af0a      	add	r7, sp, #40	; 0x28
   249c0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   249c4:	6963      	ldr	r3, [r4, #20]
   249c6:	689a      	ldr	r2, [r3, #8]
   249c8:	6973      	ldr	r3, [r6, #20]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   249ca:	6899      	ldr	r1, [r3, #8]
   249cc:	f10d 0848 	add.w	r8, sp, #72	; 0x48
   249d0:	f101 0318 	add.w	r3, r1, #24
   249d4:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   249d8:	6818      	ldr	r0, [r3, #0]
   249da:	6859      	ldr	r1, [r3, #4]
   249dc:	46c6      	mov	lr, r8
   249de:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   249e2:	3308      	adds	r3, #8
   249e4:	4563      	cmp	r3, ip
   249e6:	46f0      	mov	r8, lr
   249e8:	d1f6      	bne.n	249d8 <net_icmpv6_send_error+0x278>
   249ea:	ab12      	add	r3, sp, #72	; 0x48
   249ec:	3208      	adds	r2, #8
   249ee:	469c      	mov	ip, r3
   249f0:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
   249f4:	45ac      	cmp	ip, r5
   249f6:	6010      	str	r0, [r2, #0]
   249f8:	6051      	str	r1, [r2, #4]
   249fa:	4663      	mov	r3, ip
   249fc:	f102 0208 	add.w	r2, r2, #8
   24a00:	d1f5      	bne.n	249ee <net_icmpv6_send_error+0x28e>
   24a02:	6963      	ldr	r3, [r4, #20]
   24a04:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   24a08:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   24a0c:	af1a      	add	r7, sp, #104	; 0x68
   24a0e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   24a12:	f10c 0318 	add.w	r3, ip, #24
   24a16:	462a      	mov	r2, r5
   24a18:	ca03      	ldmia	r2!, {r0, r1}
   24a1a:	42ba      	cmp	r2, r7
   24a1c:	6018      	str	r0, [r3, #0]
   24a1e:	6059      	str	r1, [r3, #4]
   24a20:	4615      	mov	r5, r2
   24a22:	f103 0308 	add.w	r3, r3, #8
   24a26:	d1f6      	bne.n	24a16 <net_icmpv6_send_error+0x2b6>
   24a28:	e78f      	b.n	2494a <net_icmpv6_send_error+0x1ea>
		err = -ENOMEM;
   24a2a:	f06f 050b 	mvn.w	r5, #11
   24a2e:	e7a2      	b.n	24976 <net_icmpv6_send_error+0x216>
		err = -ENOMEM;
   24a30:	f06f 050b 	mvn.w	r5, #11
   24a34:	e6ab      	b.n	2478e <net_icmpv6_send_error+0x2e>
		return 0;
   24a36:	2500      	movs	r5, #0
   24a38:	e6a9      	b.n	2478e <net_icmpv6_send_error+0x2e>

00024a3a <net_icmpv6_send_echo_request>:

int net_icmpv6_send_echo_request(struct net_if *iface,
				 struct in6_addr *dst,
				 u16_t identifier,
				 u16_t sequence)
{
   24a3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24a3e:	4607      	mov	r7, r0
   24a40:	b08d      	sub	sp, #52	; 0x34
   24a42:	4691      	mov	r9, r2
   24a44:	460d      	mov	r5, r1
   24a46:	4698      	mov	r8, r3
	const struct in6_addr *src;
	struct net_pkt *pkt;
	int ret;

	src = net_if_ipv6_select_src_addr(iface, dst);
   24a48:	f7fd f8f8 	bl	21c3c <net_if_ipv6_select_src_addr>
	return iface->if_dev->l2;
   24a4c:	683b      	ldr	r3, [r7, #0]
	return net_if_l2(iface)->reserve(iface, (void *)dst_ip6);
   24a4e:	685b      	ldr	r3, [r3, #4]
   24a50:	4629      	mov	r1, r5
   24a52:	689b      	ldr	r3, [r3, #8]
   24a54:	4606      	mov	r6, r0
   24a56:	4638      	mov	r0, r7
   24a58:	4798      	blx	r3

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   24a5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   24a5e:	f7fd fcf5 	bl	2244c <net_pkt_get_reserve_tx>
				     PKT_WAIT_TIME);
	if (!pkt) {
   24a62:	4604      	mov	r4, r0
   24a64:	2800      	cmp	r0, #0
   24a66:	f000 808e 	beq.w	24b86 <net_icmpv6_send_echo_request+0x14c>
		return -ENOMEM;
	}

	if (!net_ipv6_create(pkt, src, dst, iface, IPPROTO_ICMPV6)) {
   24a6a:	233a      	movs	r3, #58	; 0x3a
   24a6c:	9300      	str	r3, [sp, #0]
   24a6e:	462a      	mov	r2, r5
   24a70:	463b      	mov	r3, r7
   24a72:	4631      	mov	r1, r6
   24a74:	f000 fa7a 	bl	24f6c <net_ipv6_create>
   24a78:	b940      	cbnz	r0, 24a8c <net_icmpv6_send_echo_request+0x52>
		ret = -ENOMEM;
   24a7a:	f06f 050b 	mvn.w	r5, #11
	}

	ret = -EIO;

drop:
	net_pkt_unref(pkt);
   24a7e:	4620      	mov	r0, r4
   24a80:	f7fd fdbd 	bl	225fe <net_pkt_unref>
	net_stats_update_icmp_drop(iface);

	return ret;
}
   24a84:	4628      	mov	r0, r5
   24a86:	b00d      	add	sp, #52	; 0x34
   24a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	pkt->family = family;
   24a8c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	pkt->iface = iface;
   24a90:	6227      	str	r7, [r4, #32]
	pkt->family = family;
   24a92:	220a      	movs	r2, #10
   24a94:	f362 03c6 	bfi	r3, r2, #3, #4
   24a98:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   24a9c:	683b      	ldr	r3, [r7, #0]
   24a9e:	7d5b      	ldrb	r3, [r3, #21]
   24aa0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   24aa4:	683b      	ldr	r3, [r7, #0]
   24aa6:	aa0c      	add	r2, sp, #48	; 0x30
   24aa8:	7d5b      	ldrb	r3, [r3, #21]
   24aaa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   24aae:	2380      	movs	r3, #128	; 0x80
   24ab0:	f802 3d22 	strb.w	r3, [r2, #-34]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   24ab4:	2101      	movs	r1, #1
   24ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24aba:	4620      	mov	r0, r4
   24abc:	f7fd fef4 	bl	228a8 <net_pkt_append>
	append(pkt, u8, NET_ICMPV6_ECHO_REQUEST);
   24ac0:	2801      	cmp	r0, #1
   24ac2:	4601      	mov	r1, r0
   24ac4:	d1d9      	bne.n	24a7a <net_icmpv6_send_echo_request+0x40>
   24ac6:	aa0c      	add	r2, sp, #48	; 0x30
   24ac8:	2700      	movs	r7, #0
   24aca:	f802 7d21 	strb.w	r7, [r2, #-33]!
   24ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24ad2:	4620      	mov	r0, r4
   24ad4:	f7fd fee8 	bl	228a8 <net_pkt_append>
	append(pkt, u8, 0);     /* code */
   24ad8:	2801      	cmp	r0, #1
   24ada:	d1ce      	bne.n	24a7a <net_icmpv6_send_echo_request+0x40>
	append(pkt, be16, 0);   /* checksum */
   24adc:	4639      	mov	r1, r7
   24ade:	4620      	mov	r0, r4
   24ae0:	f7ff fafc 	bl	240dc <net_pkt_append_be16_timeout.constprop.20>
   24ae4:	2800      	cmp	r0, #0
   24ae6:	d0c8      	beq.n	24a7a <net_icmpv6_send_echo_request+0x40>
	append(pkt, be16, identifier);
   24ae8:	4649      	mov	r1, r9
   24aea:	4620      	mov	r0, r4
   24aec:	f7ff faf6 	bl	240dc <net_pkt_append_be16_timeout.constprop.20>
   24af0:	2800      	cmp	r0, #0
   24af2:	d0c2      	beq.n	24a7a <net_icmpv6_send_echo_request+0x40>
	append(pkt, be16, sequence);
   24af4:	4641      	mov	r1, r8
   24af6:	4620      	mov	r0, r4
   24af8:	f7ff faf0 	bl	240dc <net_pkt_append_be16_timeout.constprop.20>
   24afc:	2800      	cmp	r0, #0
   24afe:	d0bc      	beq.n	24a7a <net_icmpv6_send_echo_request+0x40>
	return pkt->frags->data;
   24b00:	6963      	ldr	r3, [r4, #20]
   24b02:	689a      	ldr	r2, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   24b04:	4633      	mov	r3, r6
   24b06:	ae04      	add	r6, sp, #16
   24b08:	f103 0e10 	add.w	lr, r3, #16
   24b0c:	4637      	mov	r7, r6
   24b0e:	6818      	ldr	r0, [r3, #0]
   24b10:	6859      	ldr	r1, [r3, #4]
   24b12:	46b4      	mov	ip, r6
   24b14:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   24b18:	3308      	adds	r3, #8
   24b1a:	4573      	cmp	r3, lr
   24b1c:	4666      	mov	r6, ip
   24b1e:	d1f6      	bne.n	24b0e <net_icmpv6_send_echo_request+0xd4>
   24b20:	3208      	adds	r2, #8
   24b22:	ab08      	add	r3, sp, #32
   24b24:	463e      	mov	r6, r7
   24b26:	ce03      	ldmia	r6!, {r0, r1}
   24b28:	429e      	cmp	r6, r3
   24b2a:	6010      	str	r0, [r2, #0]
   24b2c:	6051      	str	r1, [r2, #4]
   24b2e:	4637      	mov	r7, r6
   24b30:	f102 0208 	add.w	r2, r2, #8
   24b34:	d1f6      	bne.n	24b24 <net_icmpv6_send_echo_request+0xea>
   24b36:	6962      	ldr	r2, [r4, #20]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   24b38:	461f      	mov	r7, r3
   24b3a:	6896      	ldr	r6, [r2, #8]
   24b3c:	f105 0c10 	add.w	ip, r5, #16
   24b40:	462a      	mov	r2, r5
   24b42:	6810      	ldr	r0, [r2, #0]
   24b44:	6851      	ldr	r1, [r2, #4]
   24b46:	463d      	mov	r5, r7
   24b48:	c503      	stmia	r5!, {r0, r1}
   24b4a:	3208      	adds	r2, #8
   24b4c:	4562      	cmp	r2, ip
   24b4e:	462f      	mov	r7, r5
   24b50:	d1f7      	bne.n	24b42 <net_icmpv6_send_echo_request+0x108>
   24b52:	f106 0218 	add.w	r2, r6, #24
   24b56:	ae0c      	add	r6, sp, #48	; 0x30
   24b58:	461d      	mov	r5, r3
   24b5a:	cd03      	ldmia	r5!, {r0, r1}
   24b5c:	42b5      	cmp	r5, r6
   24b5e:	6010      	str	r0, [r2, #0]
   24b60:	6051      	str	r1, [r2, #4]
   24b62:	462b      	mov	r3, r5
   24b64:	f102 0208 	add.w	r2, r2, #8
   24b68:	d1f6      	bne.n	24b58 <net_icmpv6_send_echo_request+0x11e>
	if (net_ipv6_finalize(pkt, IPPROTO_ICMPV6) < 0) {
   24b6a:	213a      	movs	r1, #58	; 0x3a
   24b6c:	4620      	mov	r0, r4
   24b6e:	f000 fa71 	bl	25054 <net_ipv6_finalize>
   24b72:	2800      	cmp	r0, #0
   24b74:	db81      	blt.n	24a7a <net_icmpv6_send_echo_request+0x40>
	if (net_send_data(pkt) >= 0) {
   24b76:	4620      	mov	r0, r4
   24b78:	f7fb fe48 	bl	2080c <net_send_data>
   24b7c:	2800      	cmp	r0, #0
   24b7e:	da05      	bge.n	24b8c <net_icmpv6_send_echo_request+0x152>
	ret = -EIO;
   24b80:	f06f 0504 	mvn.w	r5, #4
   24b84:	e77b      	b.n	24a7e <net_icmpv6_send_echo_request+0x44>
		return -ENOMEM;
   24b86:	f06f 050b 	mvn.w	r5, #11
   24b8a:	e77b      	b.n	24a84 <net_icmpv6_send_echo_request+0x4a>
		return 0;
   24b8c:	2500      	movs	r5, #0
   24b8e:	e779      	b.n	24a84 <net_icmpv6_send_echo_request+0x4a>

00024b90 <net_icmpv6_input>:

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   24b90:	b410      	push	{r4}
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv(net_pkt_iface(pkt));

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   24b92:	4b08      	ldr	r3, [pc, #32]	; (24bb4 <net_icmpv6_input+0x24>)
   24b94:	681b      	ldr	r3, [r3, #0]
   24b96:	b153      	cbz	r3, 24bae <net_icmpv6_input+0x1e>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   24b98:	7a1c      	ldrb	r4, [r3, #8]
   24b9a:	428c      	cmp	r4, r1
   24b9c:	d1fa      	bne.n	24b94 <net_icmpv6_input+0x4>
   24b9e:	7a5c      	ldrb	r4, [r3, #9]
   24ba0:	4294      	cmp	r4, r2
   24ba2:	d001      	beq.n	24ba8 <net_icmpv6_input+0x18>
   24ba4:	2c00      	cmp	r4, #0
   24ba6:	d1f5      	bne.n	24b94 <net_icmpv6_input+0x4>
			return cb->handler(pkt);
   24ba8:	685b      	ldr	r3, [r3, #4]
	}

	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
   24baa:	bc10      	pop	{r4}
			return cb->handler(pkt);
   24bac:	4718      	bx	r3
}
   24bae:	2002      	movs	r0, #2
   24bb0:	bc10      	pop	{r4}
   24bb2:	4770      	bx	lr
   24bb4:	200027b4 	.word	0x200027b4

00024bb8 <net_icmpv6_init>:
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
	net_icmpv6_register_handler(&echo_request_handler);
   24bb8:	4801      	ldr	r0, [pc, #4]	; (24bc0 <net_icmpv6_init+0x8>)
   24bba:	f7ff ba9f 	b.w	240fc <net_icmpv6_register_handler>
   24bbe:	bf00      	nop
   24bc0:	2000dcf4 	.word	0x2000dcf4

00024bc4 <get_nbr>:
	return nbr;
}

static inline struct net_nbr *get_nbr(struct net_nbr *start, int idx)
{
	NET_ASSERT(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
   24bc4:	2905      	cmp	r1, #5
{
   24bc6:	b538      	push	{r3, r4, r5, lr}
   24bc8:	4604      	mov	r4, r0
   24bca:	460d      	mov	r5, r1
	NET_ASSERT(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
   24bcc:	dd14      	ble.n	24bf8 <get_nbr+0x34>
   24bce:	4b0e      	ldr	r3, [pc, #56]	; (24c08 <get_nbr+0x44>)
   24bd0:	681b      	ldr	r3, [r3, #0]
   24bd2:	075b      	lsls	r3, r3, #29
   24bd4:	d010      	beq.n	24bf8 <get_nbr+0x34>
   24bd6:	2301      	movs	r3, #1
   24bd8:	f04f 0200 	mov.w	r2, #0
   24bdc:	f363 0202 	bfi	r2, r3, #0, #3
   24be0:	490a      	ldr	r1, [pc, #40]	; (24c0c <get_nbr+0x48>)
   24be2:	4b0b      	ldr	r3, [pc, #44]	; (24c10 <get_nbr+0x4c>)
   24be4:	480b      	ldr	r0, [pc, #44]	; (24c14 <get_nbr+0x50>)
   24be6:	1a5b      	subs	r3, r3, r1
   24be8:	f36f 02c5 	bfc	r2, #3, #3
   24bec:	08db      	lsrs	r3, r3, #3
   24bee:	f363 128f 	bfi	r2, r3, #6, #10
   24bf2:	4909      	ldr	r1, [pc, #36]	; (24c18 <get_nbr+0x54>)
   24bf4:	f7dd fa7a 	bl	20ec <log_1>

	return (struct net_nbr *)((u8_t *)start +
			((sizeof(struct net_nbr) +
			  start->size + start->extra_data_size) * idx));
   24bf8:	8860      	ldrh	r0, [r4, #2]
   24bfa:	88a3      	ldrh	r3, [r4, #4]
   24bfc:	4418      	add	r0, r3
   24bfe:	3014      	adds	r0, #20
}
   24c00:	fb05 4000 	mla	r0, r5, r0, r4
   24c04:	bd38      	pop	{r3, r4, r5, pc}
   24c06:	bf00      	nop
   24c08:	2000e298 	.word	0x2000e298
   24c0c:	0002ef38 	.word	0x0002ef38
   24c10:	0002f070 	.word	0x0002f070
   24c14:	00034e92 	.word	0x00034e92
   24c18:	00034e68 	.word	0x00034e68

00024c1c <net_nbr_unref>:
	if (--nbr->ref) {
   24c1c:	7803      	ldrb	r3, [r0, #0]
   24c1e:	3b01      	subs	r3, #1
   24c20:	b2db      	uxtb	r3, r3
   24c22:	7003      	strb	r3, [r0, #0]
   24c24:	b913      	cbnz	r3, 24c2c <net_nbr_unref+0x10>
	if (nbr->remove) {
   24c26:	6903      	ldr	r3, [r0, #16]
   24c28:	b103      	cbz	r3, 24c2c <net_nbr_unref+0x10>
		nbr->remove(nbr);
   24c2a:	4718      	bx	r3
}
   24c2c:	4770      	bx	lr

00024c2e <net_nbr_get>:

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
   24c2e:	b538      	push	{r3, r4, r5, lr}
   24c30:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   24c32:	2400      	movs	r4, #0
   24c34:	892b      	ldrh	r3, [r5, #8]
   24c36:	42a3      	cmp	r3, r4
   24c38:	dc01      	bgt.n	24c3e <net_nbr_get+0x10>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   24c3a:	2000      	movs	r0, #0
   24c3c:	e00a      	b.n	24c54 <net_nbr_get+0x26>
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   24c3e:	4621      	mov	r1, r4
   24c40:	6828      	ldr	r0, [r5, #0]
   24c42:	f7ff ffbf 	bl	24bc4 <get_nbr>
		if (!nbr->ref) {
   24c46:	7803      	ldrb	r3, [r0, #0]
   24c48:	b92b      	cbnz	r3, 24c56 <net_nbr_get+0x28>
			nbr->data = nbr->__nbr;
   24c4a:	f100 0314 	add.w	r3, r0, #20
   24c4e:	60c3      	str	r3, [r0, #12]
	nbr->ref++;
   24c50:	2301      	movs	r3, #1
   24c52:	7003      	strb	r3, [r0, #0]
}
   24c54:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < table->nbr_count; i++) {
   24c56:	3401      	adds	r4, #1
   24c58:	e7ec      	b.n	24c34 <net_nbr_get+0x6>
	...

00024c5c <net_nbr_link>:

int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
   24c5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   24c60:	7843      	ldrb	r3, [r0, #1]
   24c62:	2bff      	cmp	r3, #255	; 0xff
{
   24c64:	4681      	mov	r9, r0
   24c66:	4688      	mov	r8, r1
   24c68:	4692      	mov	sl, r2
	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   24c6a:	d14c      	bne.n	24d06 <net_nbr_link+0xaa>
   24c6c:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 24d14 <net_nbr_link+0xb8>
	int i, avail = -1;
   24c70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   24c74:	2400      	movs	r4, #0
   24c76:	465f      	mov	r7, fp
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
			avail = i;
		}

		if (net_neighbor_lladdr[i].ref &&
		    !memcmp(lladdr->addr,
   24c78:	f10b 0302 	add.w	r3, fp, #2
   24c7c:	00e6      	lsls	r6, r4, #3
   24c7e:	1931      	adds	r1, r6, r4
   24c80:	eb0b 0201 	add.w	r2, fp, r1
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   24c84:	1c68      	adds	r0, r5, #1
   24c86:	7a12      	ldrb	r2, [r2, #8]
   24c88:	d117      	bne.n	24cba <net_nbr_link+0x5e>
   24c8a:	2a00      	cmp	r2, #0
   24c8c:	d039      	beq.n	24d02 <net_nbr_link+0xa6>
		    !memcmp(lladdr->addr,
   24c8e:	4419      	add	r1, r3
   24c90:	f89a 2004 	ldrb.w	r2, [sl, #4]
   24c94:	f8da 0000 	ldr.w	r0, [sl]
   24c98:	9301      	str	r3, [sp, #4]
   24c9a:	f7e1 ffce 	bl	6c3a <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   24c9e:	9b01      	ldr	r3, [sp, #4]
   24ca0:	b968      	cbnz	r0, 24cbe <net_nbr_link+0x62>
			    net_neighbor_lladdr[i].lladdr.addr,
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   24ca2:	4426      	add	r6, r4
   24ca4:	443e      	add	r6, r7
   24ca6:	7a33      	ldrb	r3, [r6, #8]
   24ca8:	3301      	adds	r3, #1
   24caa:	7233      	strb	r3, [r6, #8]

			nbr->idx = i;
   24cac:	f889 4001 	strb.w	r4, [r9, #1]
			nbr->iface = iface;
   24cb0:	f8c9 8008 	str.w	r8, [r9, #8]
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;

	nbr->iface = iface;

	return 0;
}
   24cb4:	b003      	add	sp, #12
   24cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (net_neighbor_lladdr[i].ref &&
   24cba:	2a00      	cmp	r2, #0
   24cbc:	d1e7      	bne.n	24c8e <net_nbr_link+0x32>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   24cbe:	3401      	adds	r4, #1
   24cc0:	2c06      	cmp	r4, #6
   24cc2:	d1db      	bne.n	24c7c <net_nbr_link+0x20>
	if (avail < 0) {
   24cc4:	1c6b      	adds	r3, r5, #1
   24cc6:	d021      	beq.n	24d0c <net_nbr_link+0xb0>
	net_neighbor_lladdr[avail].ref++;
   24cc8:	00ee      	lsls	r6, r5, #3
   24cca:	1970      	adds	r0, r6, r5
   24ccc:	183b      	adds	r3, r7, r0
   24cce:	7a1a      	ldrb	r2, [r3, #8]
   24cd0:	3201      	adds	r2, #1
   24cd2:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   24cd4:	f889 5001 	strb.w	r5, [r9, #1]
	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   24cd8:	f8da 1000 	ldr.w	r1, [sl]
   24cdc:	f89a 2004 	ldrb.w	r2, [sl, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   24ce0:	b131      	cbz	r1, 24cf0 <net_nbr_link+0x94>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   24ce2:	2a06      	cmp	r2, #6
   24ce4:	d804      	bhi.n	24cf0 <net_nbr_link+0x94>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
   24ce6:	3002      	adds	r0, #2
	lladdr_store->len = new_len;
   24ce8:	705a      	strb	r2, [r3, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   24cea:	4438      	add	r0, r7
   24cec:	f7e1 ffcc 	bl	6c88 <memcpy>
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   24cf0:	442e      	add	r6, r5
   24cf2:	443e      	add	r6, r7
   24cf4:	f89a 3004 	ldrb.w	r3, [sl, #4]
   24cf8:	7073      	strb	r3, [r6, #1]
	return 0;
   24cfa:	2000      	movs	r0, #0
	nbr->iface = iface;
   24cfc:	f8c9 8008 	str.w	r8, [r9, #8]
	return 0;
   24d00:	e7d8      	b.n	24cb4 <net_nbr_link+0x58>
   24d02:	4625      	mov	r5, r4
   24d04:	e7db      	b.n	24cbe <net_nbr_link+0x62>
		return -EALREADY;
   24d06:	f06f 0044 	mvn.w	r0, #68	; 0x44
   24d0a:	e7d3      	b.n	24cb4 <net_nbr_link+0x58>
		return -ENOENT;
   24d0c:	f06f 0001 	mvn.w	r0, #1
   24d10:	e7d0      	b.n	24cb4 <net_nbr_link+0x58>
   24d12:	bf00      	nop
   24d14:	200027bc 	.word	0x200027bc

00024d18 <net_nbr_unlink>:

int net_nbr_unlink(struct net_nbr *nbr, struct net_linkaddr *lladdr)
{
   24d18:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(lladdr);

	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   24d1a:	7843      	ldrb	r3, [r0, #1]
   24d1c:	2bff      	cmp	r3, #255	; 0xff
{
   24d1e:	4604      	mov	r4, r0
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   24d20:	d047      	beq.n	24db2 <net_nbr_unlink+0x9a>
		return -EALREADY;
	}

	NET_ASSERT(nbr->idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
   24d22:	2b05      	cmp	r3, #5
   24d24:	d914      	bls.n	24d50 <net_nbr_unlink+0x38>
   24d26:	4b24      	ldr	r3, [pc, #144]	; (24db8 <net_nbr_unlink+0xa0>)
   24d28:	681b      	ldr	r3, [r3, #0]
   24d2a:	0759      	lsls	r1, r3, #29
   24d2c:	d010      	beq.n	24d50 <net_nbr_unlink+0x38>
   24d2e:	2301      	movs	r3, #1
   24d30:	f04f 0200 	mov.w	r2, #0
   24d34:	f363 0202 	bfi	r2, r3, #0, #3
   24d38:	4920      	ldr	r1, [pc, #128]	; (24dbc <net_nbr_unlink+0xa4>)
   24d3a:	4b21      	ldr	r3, [pc, #132]	; (24dc0 <net_nbr_unlink+0xa8>)
   24d3c:	4821      	ldr	r0, [pc, #132]	; (24dc4 <net_nbr_unlink+0xac>)
   24d3e:	1a5b      	subs	r3, r3, r1
   24d40:	f36f 02c5 	bfc	r2, #3, #3
   24d44:	08db      	lsrs	r3, r3, #3
   24d46:	f363 128f 	bfi	r2, r3, #6, #10
   24d4a:	491f      	ldr	r1, [pc, #124]	; (24dc8 <net_nbr_unlink+0xb0>)
   24d4c:	f7dd f9ce 	bl	20ec <log_1>
	NET_ASSERT(net_neighbor_lladdr[nbr->idx].ref > 0);
   24d50:	7863      	ldrb	r3, [r4, #1]
   24d52:	4d1e      	ldr	r5, [pc, #120]	; (24dcc <net_nbr_unlink+0xb4>)
   24d54:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   24d58:	442b      	add	r3, r5
   24d5a:	7a1b      	ldrb	r3, [r3, #8]
   24d5c:	b9a3      	cbnz	r3, 24d88 <net_nbr_unlink+0x70>
   24d5e:	4a16      	ldr	r2, [pc, #88]	; (24db8 <net_nbr_unlink+0xa0>)
   24d60:	6812      	ldr	r2, [r2, #0]
   24d62:	0752      	lsls	r2, r2, #29
   24d64:	d010      	beq.n	24d88 <net_nbr_unlink+0x70>
   24d66:	2101      	movs	r1, #1
   24d68:	f04f 0200 	mov.w	r2, #0
   24d6c:	f361 0202 	bfi	r2, r1, #0, #3
   24d70:	f363 02c5 	bfi	r2, r3, #3, #3
   24d74:	4911      	ldr	r1, [pc, #68]	; (24dbc <net_nbr_unlink+0xa4>)
   24d76:	4b12      	ldr	r3, [pc, #72]	; (24dc0 <net_nbr_unlink+0xa8>)
   24d78:	4815      	ldr	r0, [pc, #84]	; (24dd0 <net_nbr_unlink+0xb8>)
   24d7a:	1a5b      	subs	r3, r3, r1
   24d7c:	08db      	lsrs	r3, r3, #3
   24d7e:	f363 128f 	bfi	r2, r3, #6, #10
   24d82:	4911      	ldr	r1, [pc, #68]	; (24dc8 <net_nbr_unlink+0xb0>)
   24d84:	f7dd f9b2 	bl	20ec <log_1>

	net_neighbor_lladdr[nbr->idx].ref--;
   24d88:	7860      	ldrb	r0, [r4, #1]
   24d8a:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   24d8e:	442b      	add	r3, r5
   24d90:	7a19      	ldrb	r1, [r3, #8]
   24d92:	3901      	subs	r1, #1
   24d94:	b2c9      	uxtb	r1, r1
   24d96:	7219      	strb	r1, [r3, #8]

	if (!net_neighbor_lladdr[nbr->idx].ref) {
   24d98:	b931      	cbnz	r1, 24da8 <net_nbr_unlink+0x90>
		(void)memset(net_neighbor_lladdr[nbr->idx].lladdr.addr, 0,
   24d9a:	2309      	movs	r3, #9
   24d9c:	fb03 5000 	mla	r0, r3, r0, r5
   24da0:	2206      	movs	r2, #6
   24da2:	3002      	adds	r0, #2
   24da4:	f7e1 ff9d 	bl	6ce2 <memset>
			     sizeof(net_neighbor_lladdr[nbr->idx].lladdr.addr));
	}

	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   24da8:	23ff      	movs	r3, #255	; 0xff
	nbr->iface = NULL;
   24daa:	2000      	movs	r0, #0
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   24dac:	7063      	strb	r3, [r4, #1]
	nbr->iface = NULL;
   24dae:	60a0      	str	r0, [r4, #8]

	return 0;
}
   24db0:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   24db2:	f06f 0044 	mvn.w	r0, #68	; 0x44
   24db6:	e7fb      	b.n	24db0 <net_nbr_unlink+0x98>
   24db8:	2000e298 	.word	0x2000e298
   24dbc:	0002ef38 	.word	0x0002ef38
   24dc0:	0002f070 	.word	0x0002f070
   24dc4:	00034f19 	.word	0x00034f19
   24dc8:	00034e70 	.word	0x00034e70
   24dcc:	200027bc 	.word	0x200027bc
   24dd0:	00034f59 	.word	0x00034f59

00024dd4 <net_nbr_get_lladdr>:
	return NULL;
}

struct net_linkaddr_storage *net_nbr_get_lladdr(u8_t idx)
{
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
   24dd4:	2805      	cmp	r0, #5
{
   24dd6:	b513      	push	{r0, r1, r4, lr}
   24dd8:	4604      	mov	r4, r0
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
   24dda:	d918      	bls.n	24e0e <net_nbr_get_lladdr+0x3a>
   24ddc:	4b0f      	ldr	r3, [pc, #60]	; (24e1c <net_nbr_get_lladdr+0x48>)
   24dde:	681b      	ldr	r3, [r3, #0]
   24de0:	075b      	lsls	r3, r3, #29
   24de2:	d014      	beq.n	24e0e <net_nbr_get_lladdr+0x3a>
   24de4:	2301      	movs	r3, #1
   24de6:	f04f 0200 	mov.w	r2, #0
   24dea:	f363 0202 	bfi	r2, r3, #0, #3
   24dee:	490c      	ldr	r1, [pc, #48]	; (24e20 <net_nbr_get_lladdr+0x4c>)
   24df0:	4b0c      	ldr	r3, [pc, #48]	; (24e24 <net_nbr_get_lladdr+0x50>)
   24df2:	1a5b      	subs	r3, r3, r1
   24df4:	08db      	lsrs	r3, r3, #3
   24df6:	f36f 02c5 	bfc	r2, #3, #3
   24dfa:	f363 128f 	bfi	r2, r3, #6, #10
   24dfe:	f8ad 2000 	strh.w	r2, [sp]
   24e02:	2306      	movs	r3, #6
   24e04:	4602      	mov	r2, r0
   24e06:	4908      	ldr	r1, [pc, #32]	; (24e28 <net_nbr_get_lladdr+0x54>)
   24e08:	4808      	ldr	r0, [pc, #32]	; (24e2c <net_nbr_get_lladdr+0x58>)
   24e0a:	f7dd f99b 	bl	2144 <log_3>
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
}
   24e0e:	4808      	ldr	r0, [pc, #32]	; (24e30 <net_nbr_get_lladdr+0x5c>)
	return &net_neighbor_lladdr[idx].lladdr;
   24e10:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
}
   24e14:	4420      	add	r0, r4
   24e16:	b002      	add	sp, #8
   24e18:	bd10      	pop	{r4, pc}
   24e1a:	bf00      	nop
   24e1c:	2000e298 	.word	0x2000e298
   24e20:	0002ef38 	.word	0x0002ef38
   24e24:	0002f070 	.word	0x0002f070
   24e28:	00034e7f 	.word	0x00034e7f
   24e2c:	00034ecd 	.word	0x00034ecd
   24e30:	200027bc 	.word	0x200027bc

00024e34 <handle_ext_hdr_options>:
						     int total_len,
						     u16_t len,
						     u16_t offset,
						     u16_t *pos,
						     enum net_verdict *verdict)
{
   24e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	u16_t length = 0, loc;
#if defined(CONFIG_NET_RPL)
	bool result;
#endif

	if (len > total_len) {
   24e38:	4293      	cmp	r3, r2
{
   24e3a:	4680      	mov	r8, r0
   24e3c:	461d      	mov	r5, r3
   24e3e:	4608      	mov	r0, r1
   24e40:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	if (len > total_len) {
   24e42:	dd03      	ble.n	24e4c <handle_ext_hdr_options+0x18>

	*verdict = NET_CONTINUE;
	return frag;

drop:
	*verdict = NET_DROP;
   24e44:	2302      	movs	r3, #2
   24e46:	703b      	strb	r3, [r7, #0]
	return NULL;
   24e48:	2000      	movs	r0, #0
   24e4a:	e04c      	b.n	24ee6 <handle_ext_hdr_options+0xb2>
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   24e4c:	ae03      	add	r6, sp, #12
   24e4e:	9600      	str	r6, [sp, #0]
   24e50:	2301      	movs	r3, #1
   24e52:	f10d 020e 	add.w	r2, sp, #14
   24e56:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
   24e5a:	f7fd fd69 	bl	22930 <net_frag_read>
	if (!frag && loc == 0xffff) {
   24e5e:	b928      	cbnz	r0, 24e6c <handle_ext_hdr_options+0x38>
   24e60:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   24e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24e68:	429a      	cmp	r2, r3
   24e6a:	d0eb      	beq.n	24e44 <handle_ext_hdr_options+0x10>
	if (opt_type != NET_IPV6_EXT_HDR_OPT_PAD1) {
   24e6c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   24e70:	b153      	cbz	r3, 24e88 <handle_ext_hdr_options+0x54>
   24e72:	f10d 030d 	add.w	r3, sp, #13
   24e76:	9300      	str	r3, [sp, #0]
   24e78:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   24e7c:	2301      	movs	r3, #1
   24e7e:	f10d 020e 	add.w	r2, sp, #14
   24e82:	f7fd fd55 	bl	22930 <net_frag_read>
		if (!frag && loc == 0xffff) {
   24e86:	b1f8      	cbz	r0, 24ec8 <handle_ext_hdr_options+0x94>
{
   24e88:	2402      	movs	r4, #2
		if (!frag && loc == 0xffff) {
   24e8a:	f64f 79ff 	movw	r9, #65535	; 0xffff
   24e8e:	f10d 0a0d 	add.w	sl, sp, #13
	while (frag && (length < len)) {
   24e92:	b300      	cbz	r0, 24ed6 <handle_ext_hdr_options+0xa2>
   24e94:	42a5      	cmp	r5, r4
   24e96:	d91e      	bls.n	24ed6 <handle_ext_hdr_options+0xa2>
		switch (opt_type) {
   24e98:	f89d 300c 	ldrb.w	r3, [sp, #12]
   24e9c:	b333      	cbz	r3, 24eec <handle_ext_hdr_options+0xb8>
   24e9e:	2b01      	cmp	r3, #1
   24ea0:	d045      	beq.n	24f2e <handle_ext_hdr_options+0xfa>
	switch (opt_type & 0xc0) {
   24ea2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   24ea6:	2b80      	cmp	r3, #128	; 0x80
   24ea8:	d054      	beq.n	24f54 <handle_ext_hdr_options+0x120>
   24eaa:	2bc0      	cmp	r3, #192	; 0xc0
   24eac:	d04b      	beq.n	24f46 <handle_ext_hdr_options+0x112>
   24eae:	2b40      	cmp	r3, #64	; 0x40
   24eb0:	d0c8      	beq.n	24e44 <handle_ext_hdr_options+0x10>
			if (!check_unknown_option(pkt, opt_type, length)) {
   24eb2:	f1b8 0f00 	cmp.w	r8, #0
   24eb6:	d0c5      	beq.n	24e44 <handle_ext_hdr_options+0x10>
			length += opt_len + 2;
   24eb8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   24ebc:	1c9a      	adds	r2, r3, #2
   24ebe:	4414      	add	r4, r2
   24ec0:	b2a4      	uxth	r4, r4
			loc += opt_len;
   24ec2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   24ec6:	e03a      	b.n	24f3e <handle_ext_hdr_options+0x10a>
		if (!frag && loc == 0xffff) {
   24ec8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   24ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24ed0:	429a      	cmp	r2, r3
   24ed2:	d0b7      	beq.n	24e44 <handle_ext_hdr_options+0x10>
   24ed4:	2402      	movs	r4, #2
	if (length != len) {
   24ed6:	42a5      	cmp	r5, r4
   24ed8:	d1b4      	bne.n	24e44 <handle_ext_hdr_options+0x10>
	*pos = loc;
   24eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24edc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   24ee0:	801a      	strh	r2, [r3, #0]
	*verdict = NET_CONTINUE;
   24ee2:	2301      	movs	r3, #1
   24ee4:	703b      	strb	r3, [r7, #0]
}
   24ee6:	b004      	add	sp, #16
   24ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			length++;
   24eec:	3401      	adds	r4, #1
   24eee:	b2a4      	uxth	r4, r4
		if (length >= len) {
   24ef0:	42a5      	cmp	r5, r4
   24ef2:	d9f0      	bls.n	24ed6 <handle_ext_hdr_options+0xa2>
   24ef4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   24ef8:	9600      	str	r6, [sp, #0]
   24efa:	2301      	movs	r3, #1
   24efc:	f10d 020e 	add.w	r2, sp, #14
   24f00:	f7fd fd16 	bl	22930 <net_frag_read>
		if (!frag && loc == 0xffff) {
   24f04:	b918      	cbnz	r0, 24f0e <handle_ext_hdr_options+0xda>
   24f06:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   24f0a:	454b      	cmp	r3, r9
   24f0c:	d09a      	beq.n	24e44 <handle_ext_hdr_options+0x10>
		if (opt_type != NET_IPV6_EXT_HDR_OPT_PAD1) {
   24f0e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   24f12:	2b00      	cmp	r3, #0
   24f14:	d0bd      	beq.n	24e92 <handle_ext_hdr_options+0x5e>
   24f16:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   24f1a:	f8cd a000 	str.w	sl, [sp]
   24f1e:	2301      	movs	r3, #1
   24f20:	f10d 020e 	add.w	r2, sp, #14
   24f24:	f7fd fd04 	bl	22930 <net_frag_read>
			if (!frag && loc == 0xffff) {
   24f28:	2800      	cmp	r0, #0
   24f2a:	d1b2      	bne.n	24e92 <handle_ext_hdr_options+0x5e>
   24f2c:	e78a      	b.n	24e44 <handle_ext_hdr_options+0x10>
			length += opt_len + 2;
   24f2e:	f89d 300d 	ldrb.w	r3, [sp, #13]
   24f32:	1c9a      	adds	r2, r3, #2
   24f34:	4414      	add	r4, r2
			loc += opt_len + 2;
   24f36:	f8bd 200e 	ldrh.w	r2, [sp, #14]
			length += opt_len + 2;
   24f3a:	b2a4      	uxth	r4, r4
			loc += opt_len + 2;
   24f3c:	3202      	adds	r2, #2
			loc += opt_len;
   24f3e:	4413      	add	r3, r2
   24f40:	f8ad 300e 	strh.w	r3, [sp, #14]
			break;
   24f44:	e7d4      	b.n	24ef0 <handle_ext_hdr_options+0xbc>
	return pkt->frags->data;
   24f46:	f8d8 3014 	ldr.w	r3, [r8, #20]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   24f4a:	689b      	ldr	r3, [r3, #8]
   24f4c:	7e1b      	ldrb	r3, [r3, #24]
   24f4e:	2bff      	cmp	r3, #255	; 0xff
   24f50:	f43f af78 	beq.w	24e44 <handle_ext_hdr_options+0x10>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   24f54:	4623      	mov	r3, r4
   24f56:	2202      	movs	r2, #2
   24f58:	2104      	movs	r1, #4
   24f5a:	4640      	mov	r0, r8
   24f5c:	f7ff fc00 	bl	24760 <net_icmpv6_send_error>
   24f60:	e770      	b.n	24e44 <handle_ext_hdr_options+0x10>
	...

00024f64 <net_ipv6_unspecified_address>:
}
   24f64:	4800      	ldr	r0, [pc, #0]	; (24f68 <net_ipv6_unspecified_address+0x4>)
   24f66:	4770      	bx	lr
   24f68:	00034fb4 	.word	0x00034fb4

00024f6c <net_ipv6_create>:
{
   24f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24f70:	460d      	mov	r5, r1
   24f72:	b088      	sub	sp, #32
	header = net_pkt_get_frag(pkt, NET_BUF_TIMEOUT);
   24f74:	2132      	movs	r1, #50	; 0x32
{
   24f76:	4604      	mov	r4, r0
   24f78:	4616      	mov	r6, r2
   24f7a:	4698      	mov	r8, r3
	header = net_pkt_get_frag(pkt, NET_BUF_TIMEOUT);
   24f7c:	f7fd fa7e 	bl	2247c <net_pkt_get_frag>
	if (!header) {
   24f80:	4607      	mov	r7, r0
   24f82:	2800      	cmp	r0, #0
   24f84:	d064      	beq.n	25050 <net_ipv6_create+0xe4>
	net_pkt_frag_insert(pkt, header);
   24f86:	4601      	mov	r1, r0
   24f88:	4620      	mov	r0, r4
   24f8a:	f7fd fb79 	bl	22680 <net_pkt_frag_insert>
   24f8e:	6963      	ldr	r3, [r4, #20]
   24f90:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   24f92:	2260      	movs	r2, #96	; 0x60
   24f94:	701a      	strb	r2, [r3, #0]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   24f96:	2200      	movs	r2, #0
   24f98:	705a      	strb	r2, [r3, #1]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   24f9a:	719a      	strb	r2, [r3, #6]
	NET_IPV6_HDR(pkt)->flow = 0;
   24f9c:	709a      	strb	r2, [r3, #2]
   24f9e:	70da      	strb	r2, [r3, #3]
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   24fa0:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
   24fa4:	71da      	strb	r2, [r3, #7]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   24fa6:	b92a      	cbnz	r2, 24fb4 <net_ipv6_create+0x48>
					net_if_ipv6_get_hop_limit(iface);
   24fa8:	f8d8 1004 	ldr.w	r1, [r8, #4]
	if (!iface->config.ip.ipv6) {
   24fac:	b109      	cbz	r1, 24fb2 <net_ipv6_create+0x46>
	return iface->config.ip.ipv6->hop_limit;
   24fae:	f891 21cc 	ldrb.w	r2, [r1, #460]	; 0x1cc
		NET_IPV6_HDR(pkt)->hop_limit =
   24fb2:	71da      	strb	r2, [r3, #7]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   24fb4:	4632      	mov	r2, r6
   24fb6:	466e      	mov	r6, sp
   24fb8:	f102 0810 	add.w	r8, r2, #16
   24fbc:	46b4      	mov	ip, r6
   24fbe:	6810      	ldr	r0, [r2, #0]
   24fc0:	6851      	ldr	r1, [r2, #4]
   24fc2:	46b6      	mov	lr, r6
   24fc4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   24fc8:	3208      	adds	r2, #8
   24fca:	4542      	cmp	r2, r8
   24fcc:	4676      	mov	r6, lr
   24fce:	d1f6      	bne.n	24fbe <net_ipv6_create+0x52>
   24fd0:	3318      	adds	r3, #24
   24fd2:	aa04      	add	r2, sp, #16
   24fd4:	4666      	mov	r6, ip
   24fd6:	ce03      	ldmia	r6!, {r0, r1}
   24fd8:	4296      	cmp	r6, r2
   24fda:	6018      	str	r0, [r3, #0]
   24fdc:	6059      	str	r1, [r3, #4]
   24fde:	46b4      	mov	ip, r6
   24fe0:	f103 0308 	add.w	r3, r3, #8
   24fe4:	d1f6      	bne.n	24fd4 <net_ipv6_create+0x68>
   24fe6:	6963      	ldr	r3, [r4, #20]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   24fe8:	4694      	mov	ip, r2
   24fea:	689e      	ldr	r6, [r3, #8]
   24fec:	f105 0e10 	add.w	lr, r5, #16
   24ff0:	462b      	mov	r3, r5
   24ff2:	6818      	ldr	r0, [r3, #0]
   24ff4:	6859      	ldr	r1, [r3, #4]
   24ff6:	4665      	mov	r5, ip
   24ff8:	c503      	stmia	r5!, {r0, r1}
   24ffa:	3308      	adds	r3, #8
   24ffc:	4573      	cmp	r3, lr
   24ffe:	46ac      	mov	ip, r5
   25000:	d1f7      	bne.n	24ff2 <net_ipv6_create+0x86>
   25002:	4613      	mov	r3, r2
   25004:	f106 0208 	add.w	r2, r6, #8
   25008:	ae08      	add	r6, sp, #32
   2500a:	461d      	mov	r5, r3
   2500c:	cd03      	ldmia	r5!, {r0, r1}
   2500e:	42b5      	cmp	r5, r6
   25010:	6010      	str	r0, [r2, #0]
   25012:	6051      	str	r1, [r2, #4]
   25014:	462b      	mov	r3, r5
   25016:	f102 0208 	add.w	r2, r2, #8
   2501a:	d1f6      	bne.n	2500a <net_ipv6_create+0x9e>
	pkt->ipv6_ext_len = len;
   2501c:	2300      	movs	r3, #0
   2501e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	return pkt->frags->data;
   25022:	6963      	ldr	r3, [r4, #20]
	NET_IPV6_HDR(pkt)->nexthdr = next_header_proto;
   25024:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   25028:	689b      	ldr	r3, [r3, #8]
   2502a:	719a      	strb	r2, [r3, #6]
	pkt->family = family;
   2502c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   25030:	220a      	movs	r2, #10
	pkt->ip_hdr_len = len;
   25032:	2128      	movs	r1, #40	; 0x28
	pkt->family = family;
   25034:	f362 03c6 	bfi	r3, r2, #3, #4
	pkt->ip_hdr_len = len;
   25038:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
	pkt->family = family;
   2503c:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   25040:	f107 0008 	add.w	r0, r7, #8
   25044:	f7fa f964 	bl	1f310 <net_buf_simple_add>
}
   25048:	4620      	mov	r0, r4
   2504a:	b008      	add	sp, #32
   2504c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   25050:	4604      	mov	r4, r0
   25052:	e7f9      	b.n	25048 <net_ipv6_create+0xdc>

00025054 <net_ipv6_finalize>:
{
   25054:	b570      	push	{r4, r5, r6, lr}
   25056:	4605      	mov	r5, r0
   25058:	460e      	mov	r6, r1
	net_pkt_compact(pkt);
   2505a:	f7fd fbe0 	bl	2281e <net_pkt_compact>
	total_len = net_pkt_get_len(pkt) - sizeof(struct net_ipv6_hdr);
   2505e:	696a      	ldr	r2, [r5, #20]
	size_t bytes = 0;
   25060:	2300      	movs	r3, #0
   25062:	4614      	mov	r4, r2
	while (buf) {
   25064:	b95c      	cbnz	r4, 2507e <net_ipv6_finalize+0x2a>
	NET_IPV6_HDR(pkt)->len = htons(total_len);
   25066:	6892      	ldr	r2, [r2, #8]
	total_len = net_pkt_get_len(pkt) - sizeof(struct net_ipv6_hdr);
   25068:	3b28      	subs	r3, #40	; 0x28
	NET_IPV6_HDR(pkt)->len = htons(total_len);
   2506a:	ba5b      	rev16	r3, r3
	if (next_header_proto == IPPROTO_UDP &&
   2506c:	2e11      	cmp	r6, #17
	NET_IPV6_HDR(pkt)->len = htons(total_len);
   2506e:	8093      	strh	r3, [r2, #4]
	if (next_header_proto == IPPROTO_UDP &&
   25070:	d10e      	bne.n	25090 <net_ipv6_finalize+0x3c>
	    net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   25072:	6a28      	ldr	r0, [r5, #32]
   25074:	f7fc fef7 	bl	21e66 <net_if_need_calc_tx_checksum>
	if (next_header_proto == IPPROTO_UDP &&
   25078:	b928      	cbnz	r0, 25086 <net_ipv6_finalize+0x32>
	return 0;
   2507a:	2000      	movs	r0, #0
}
   2507c:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
   2507e:	89a1      	ldrh	r1, [r4, #12]
		buf = buf->frags;
   25080:	6824      	ldr	r4, [r4, #0]
		bytes += buf->len;
   25082:	440b      	add	r3, r1
   25084:	e7ee      	b.n	25064 <net_ipv6_finalize+0x10>
		net_udp_set_chksum(pkt, pkt->frags);
   25086:	6969      	ldr	r1, [r5, #20]
   25088:	4628      	mov	r0, r5
   2508a:	f006 f99d 	bl	2b3c8 <net_udp_set_chksum>
   2508e:	e7f4      	b.n	2507a <net_ipv6_finalize+0x26>
	if (next_header_proto == IPPROTO_TCP &&
   25090:	2e06      	cmp	r6, #6
   25092:	d109      	bne.n	250a8 <net_ipv6_finalize+0x54>
	    net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   25094:	6a28      	ldr	r0, [r5, #32]
   25096:	f7fc fee6 	bl	21e66 <net_if_need_calc_tx_checksum>
	if (next_header_proto == IPPROTO_TCP &&
   2509a:	2800      	cmp	r0, #0
   2509c:	d0ed      	beq.n	2507a <net_ipv6_finalize+0x26>
		net_tcp_set_chksum(pkt, pkt->frags);
   2509e:	6969      	ldr	r1, [r5, #20]
   250a0:	4628      	mov	r0, r5
   250a2:	f005 fc31 	bl	2a908 <net_tcp_set_chksum>
   250a6:	e7e8      	b.n	2507a <net_ipv6_finalize+0x26>
	if (next_header_proto == IPPROTO_ICMPV6) {
   250a8:	2e3a      	cmp	r6, #58	; 0x3a
   250aa:	d1e6      	bne.n	2507a <net_ipv6_finalize+0x26>
		ret = net_icmpv6_set_chksum(pkt);
   250ac:	4628      	mov	r0, r5
   250ae:	f7ff f84b 	bl	24148 <net_icmpv6_set_chksum>
   250b2:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   250b6:	e7e1      	b.n	2507c <net_ipv6_finalize+0x28>

000250b8 <net_ipv6_process_pkt>:
	return NET_DROP;
}
#endif /* CONFIG_NET_ROUTE */

enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   250b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
   250bc:	6942      	ldr	r2, [r0, #20]
	return pkt->frags->data;
   250be:	6897      	ldr	r7, [r2, #8]
{
   250c0:	b089      	sub	sp, #36	; 0x24
   250c2:	4604      	mov	r4, r0
   250c4:	4615      	mov	r5, r2
	size_t bytes = 0;
   250c6:	f04f 0900 	mov.w	r9, #0
		bytes += buf->len;
   250ca:	89ab      	ldrh	r3, [r5, #12]
		buf = buf->frags;
   250cc:	682d      	ldr	r5, [r5, #0]
		bytes += buf->len;
   250ce:	4499      	add	r9, r3
	while (buf) {
   250d0:	2d00      	cmp	r5, #0
   250d2:	d1fa      	bne.n	250ca <net_ipv6_process_pkt+0x12>
	int real_len = net_pkt_get_len(pkt);
	int pkt_len = ntohs(hdr->len) + sizeof(*hdr);
   250d4:	88b9      	ldrh	r1, [r7, #4]
   250d6:	020b      	lsls	r3, r1, #8
   250d8:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   250dc:	b29b      	uxth	r3, r3
   250de:	3328      	adds	r3, #40	; 0x28
	u16_t offset;
	u16_t length;
	u16_t total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   250e0:	4599      	cmp	r9, r3
   250e2:	d12d      	bne.n	25140 <net_ipv6_process_pkt+0x88>

	NET_DBG("IPv6 packet len %d received from %s to %s", real_len,
		log_strdup(net_sprint_ipv6_addr(&hdr->src)),
		log_strdup(net_sprint_ipv6_addr(&hdr->dst)));

	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   250e4:	7a3b      	ldrb	r3, [r7, #8]
   250e6:	2bff      	cmp	r3, #255	; 0xff
   250e8:	d02a      	beq.n	25140 <net_ipv6_process_pkt+0x88>
		net_stats_update_ipv6_drop(net_pkt_iface(pkt));
		goto drop;
	}

	/* Check extension headers */
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   250ea:	1dbb      	adds	r3, r7, #6
	pkt->next_hdr = hdr;
   250ec:	62a3      	str	r3, [r4, #40]	; 0x28
	pkt->ip_hdr_len = len;
   250ee:	2328      	movs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   250f0:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	pkt->ip_hdr_len = len;
   250f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	net_pkt_set_ipv6_ext_len(pkt, 0);
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));
	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_HDR(pkt)->hop_limit);
   250f8:	6893      	ldr	r3, [r2, #8]

	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   250fa:	f107 0618 	add.w	r6, r7, #24
	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_HDR(pkt)->hop_limit);
   250fe:	79db      	ldrb	r3, [r3, #7]
	pkt->ipv6_hop_limit = hop_limit;
   25100:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   25104:	4629      	mov	r1, r5
   25106:	4630      	mov	r0, r6
   25108:	f7fb fe4c 	bl	20da4 <net_if_ipv6_addr_lookup>
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   2510c:	bb80      	cbnz	r0, 25170 <net_ipv6_process_pkt+0xb8>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   2510e:	4629      	mov	r1, r5
   25110:	4630      	mov	r0, r6
   25112:	f7fc fab1 	bl	21678 <net_if_ipv6_maddr_lookup>
   25116:	bb58      	cbnz	r0, 25170 <net_ipv6_process_pkt+0xb8>
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   25118:	7e3b      	ldrb	r3, [r7, #24]
   2511a:	2bff      	cmp	r3, #255	; 0xff
   2511c:	d028      	beq.n	25170 <net_ipv6_process_pkt+0xb8>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2511e:	69bb      	ldr	r3, [r7, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25120:	b93b      	cbnz	r3, 25132 <net_ipv6_process_pkt+0x7a>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25122:	69fb      	ldr	r3, [r7, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25124:	b92b      	cbnz	r3, 25132 <net_ipv6_process_pkt+0x7a>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25126:	6a3b      	ldr	r3, [r7, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25128:	b91b      	cbnz	r3, 25132 <net_ipv6_process_pkt+0x7a>
   2512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2512c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   25130:	d01e      	beq.n	25170 <net_ipv6_process_pkt+0xb8>
		found = net_route_get_info(net_pkt_iface(pkt),
   25132:	ab07      	add	r3, sp, #28
   25134:	aa06      	add	r2, sp, #24
   25136:	4631      	mov	r1, r6
   25138:	6a20      	ldr	r0, [r4, #32]
   2513a:	f002 fce1 	bl	27b00 <net_route_get_info>
	if (found) {
   2513e:	b908      	cbnz	r0, 25144 <net_ipv6_process_pkt+0x8c>
		return NET_DROP;
#endif
	}

drop:
	return NET_DROP;
   25140:	2002      	movs	r0, #2
   25142:	e012      	b.n	2516a <net_ipv6_process_pkt+0xb2>
		if (route) {
   25144:	9b06      	ldr	r3, [sp, #24]
   25146:	b14b      	cbz	r3, 2515c <net_ipv6_process_pkt+0xa4>
			net_pkt_set_iface(pkt, route->iface);
   25148:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   2514a:	6223      	str	r3, [r4, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   2514c:	681a      	ldr	r2, [r3, #0]
   2514e:	7d52      	ldrb	r2, [r2, #21]
   25150:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   25154:	681b      	ldr	r3, [r3, #0]
   25156:	7d5b      	ldrb	r3, [r3, #21]
   25158:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		ret = net_route_packet(pkt, nexthop);
   2515c:	9907      	ldr	r1, [sp, #28]
   2515e:	4620      	mov	r0, r4
   25160:	f002 fcf0 	bl	27b44 <net_route_packet>
		if (ret < 0) {
   25164:	2800      	cmp	r0, #0
   25166:	dbeb      	blt.n	25140 <net_ipv6_process_pkt+0x88>
			return NET_OK;
   25168:	2000      	movs	r0, #0

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr(net_pkt_iface(pkt));

	return NET_DROP;
}
   2516a:	b009      	add	sp, #36	; 0x24
   2516c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	next = *(net_pkt_next_hdr(pkt));
   25170:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25172:	781d      	ldrb	r5, [r3, #0]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   25174:	2d3a      	cmp	r5, #58	; 0x3a
   25176:	f000 80a3 	beq.w	252c0 <net_ipv6_process_pkt+0x208>
   2517a:	2d11      	cmp	r5, #17
   2517c:	f000 80a0 	beq.w	252c0 <net_ipv6_process_pkt+0x208>
	if (is_upper_layer_protocol_header(next)) {
   25180:	2d06      	cmp	r5, #6
   25182:	f04f 0600 	mov.w	r6, #0
   25186:	d00e      	beq.n	251a6 <net_ipv6_process_pkt+0xee>
	offset = sizeof(struct net_ipv6_hdr);
   25188:	f10d 0820 	add.w	r8, sp, #32
	next = hdr->nexthdr;
   2518c:	f897 a006 	ldrb.w	sl, [r7, #6]
	frag = pkt->frags;
   25190:	6960      	ldr	r0, [r4, #20]
	length = 0;
   25192:	f8ad 6018 	strh.w	r6, [sp, #24]
	offset = sizeof(struct net_ipv6_hdr);
   25196:	2328      	movs	r3, #40	; 0x28
   25198:	f828 3d0a 	strh.w	r3, [r8, #-10]!
	next = hdr->nexthdr;
   2519c:	4655      	mov	r5, sl
	ext_bitmap = 0;
   2519e:	4637      	mov	r7, r6
	return net_frag_read(frag, offset, pos, 1, value);
   251a0:	f10d 0b15 	add.w	fp, sp, #21
	while (frag) {
   251a4:	b978      	cbnz	r0, 251c6 <net_ipv6_process_pkt+0x10e>
	switch (next) {
   251a6:	2d11      	cmp	r5, #17
	pkt->ipv6_ext_len = len;
   251a8:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
	pkt->transport_proto = proto;
   251ac:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
   251b0:	d004      	beq.n	251bc <net_ipv6_process_pkt+0x104>
   251b2:	2d3a      	cmp	r5, #58	; 0x3a
   251b4:	f000 8086 	beq.w	252c4 <net_ipv6_process_pkt+0x20c>
   251b8:	2d06      	cmp	r5, #6
   251ba:	d1c1      	bne.n	25140 <net_ipv6_process_pkt+0x88>
		return net_conn_input(IPPROTO_TCP, pkt);
   251bc:	4621      	mov	r1, r4
   251be:	4628      	mov	r0, r5
   251c0:	f004 fafc 	bl	297bc <net_conn_input>
   251c4:	e7d1      	b.n	2516a <net_ipv6_process_pkt+0xb2>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   251c6:	2d3a      	cmp	r5, #58	; 0x3a
   251c8:	d0ed      	beq.n	251a6 <net_ipv6_process_pkt+0xee>
   251ca:	2d11      	cmp	r5, #17
   251cc:	d0eb      	beq.n	251a6 <net_ipv6_process_pkt+0xee>
		if (is_upper_layer_protocol_header(next)) {
   251ce:	2d06      	cmp	r5, #6
   251d0:	d0e9      	beq.n	251a6 <net_ipv6_process_pkt+0xee>
	return net_frag_read(frag, offset, pos, 1, value);
   251d2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   251d6:	f8cd b000 	str.w	fp, [sp]
   251da:	2301      	movs	r3, #1
   251dc:	4642      	mov	r2, r8
   251de:	f7fd fba7 	bl	22930 <net_frag_read>
		if (!frag) {
   251e2:	2800      	cmp	r0, #0
   251e4:	d0ac      	beq.n	25140 <net_ipv6_process_pkt+0x88>
		verdict = NET_OK;
   251e6:	2300      	movs	r3, #0
		switch (next) {
   251e8:	2d3b      	cmp	r5, #59	; 0x3b
		verdict = NET_OK;
   251ea:	f88d 301c 	strb.w	r3, [sp, #28]
		switch (next) {
   251ee:	d0a7      	beq.n	25140 <net_ipv6_process_pkt+0x88>
   251f0:	2d3c      	cmp	r5, #60	; 0x3c
   251f2:	d019      	beq.n	25228 <net_ipv6_process_pkt+0x170>
   251f4:	2d00      	cmp	r5, #0
   251f6:	d15a      	bne.n	252ae <net_ipv6_process_pkt+0x1f6>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   251f8:	07fa      	lsls	r2, r7, #31
   251fa:	d53d      	bpl.n	25278 <net_ipv6_process_pkt+0x1c0>
				NET_ERR("Dropping packet with multiple HBHO");
   251fc:	4b39      	ldr	r3, [pc, #228]	; (252e4 <net_ipv6_process_pkt+0x22c>)
   251fe:	681b      	ldr	r3, [r3, #0]
   25200:	075b      	lsls	r3, r3, #29
   25202:	d09d      	beq.n	25140 <net_ipv6_process_pkt+0x88>
   25204:	2301      	movs	r3, #1
   25206:	f04f 0200 	mov.w	r2, #0
   2520a:	f363 0202 	bfi	r2, r3, #0, #3
   2520e:	4936      	ldr	r1, [pc, #216]	; (252e8 <net_ipv6_process_pkt+0x230>)
   25210:	4b36      	ldr	r3, [pc, #216]	; (252ec <net_ipv6_process_pkt+0x234>)
   25212:	4837      	ldr	r0, [pc, #220]	; (252f0 <net_ipv6_process_pkt+0x238>)
   25214:	1a5b      	subs	r3, r3, r1
   25216:	08db      	lsrs	r3, r3, #3
   25218:	f36f 02c5 	bfc	r2, #3, #3
   2521c:	f363 128f 	bfi	r2, r3, #6, #10
   25220:	4934      	ldr	r1, [pc, #208]	; (252f4 <net_ipv6_process_pkt+0x23c>)
   25222:	f7dc ff63 	bl	20ec <log_1>
   25226:	e78b      	b.n	25140 <net_ipv6_process_pkt+0x88>
   25228:	ab06      	add	r3, sp, #24
   2522a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   2522e:	9300      	str	r3, [sp, #0]
   25230:	4642      	mov	r2, r8
   25232:	2301      	movs	r3, #1
   25234:	f7fd fb7c 	bl	22930 <net_frag_read>
			if (!frag) {
   25238:	4601      	mov	r1, r0
   2523a:	2800      	cmp	r0, #0
   2523c:	d080      	beq.n	25140 <net_ipv6_process_pkt+0x88>
			length = length * 8 + 8;
   2523e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   25242:	3301      	adds	r3, #1
   25244:	00db      	lsls	r3, r3, #3
   25246:	b29b      	uxth	r3, r3
			total_len += length;
   25248:	441e      	add	r6, r3
			length = length * 8 + 8;
   2524a:	f8ad 3018 	strh.w	r3, [sp, #24]
			total_len += length;
   2524e:	b2b6      	uxth	r6, r6
			ext_bitmap |= NET_IPV6_NEXTHDR_DESTO;
   25250:	f047 073c 	orr.w	r7, r7, #60	; 0x3c
			frag = handle_ext_hdr_options(pkt, frag, real_len,
   25254:	aa07      	add	r2, sp, #28
   25256:	e9cd 8201 	strd	r8, r2, [sp, #4]
   2525a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2525e:	9200      	str	r2, [sp, #0]
   25260:	4620      	mov	r0, r4
   25262:	464a      	mov	r2, r9
   25264:	f7ff fde6 	bl	24e34 <handle_ext_hdr_options>
		if (verdict == NET_DROP) {
   25268:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2526c:	2b02      	cmp	r3, #2
   2526e:	f43f af67 	beq.w	25140 <net_ipv6_process_pkt+0x88>
		next = next_hdr;
   25272:	f89d 5015 	ldrb.w	r5, [sp, #21]
   25276:	e795      	b.n	251a4 <net_ipv6_process_pkt+0xec>
   25278:	ab06      	add	r3, sp, #24
   2527a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   2527e:	9300      	str	r3, [sp, #0]
   25280:	4642      	mov	r2, r8
   25282:	2301      	movs	r3, #1
   25284:	f7fd fb54 	bl	22930 <net_frag_read>
			if (!frag) {
   25288:	4601      	mov	r1, r0
   2528a:	2800      	cmp	r0, #0
   2528c:	f43f af58 	beq.w	25140 <net_ipv6_process_pkt+0x88>
			length = length * 8 + 8;
   25290:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   25294:	3301      	adds	r3, #1
   25296:	00db      	lsls	r3, r3, #3
   25298:	b29b      	uxth	r3, r3
			total_len += length;
   2529a:	441e      	add	r6, r3
			length = length * 8 + 8;
   2529c:	f8ad 3018 	strh.w	r3, [sp, #24]
			total_len += length;
   252a0:	b2b6      	uxth	r6, r6
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   252a2:	f1ba 0f00 	cmp.w	sl, #0
   252a6:	d102      	bne.n	252ae <net_ipv6_process_pkt+0x1f6>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   252a8:	f047 0701 	orr.w	r7, r7, #1
   252ac:	e7d2      	b.n	25254 <net_ipv6_process_pkt+0x19c>
			      offset - 1);
   252ae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   252b2:	2201      	movs	r2, #1
   252b4:	3b01      	subs	r3, #1
   252b6:	2104      	movs	r1, #4
   252b8:	4620      	mov	r0, r4
   252ba:	f7ff fa51 	bl	24760 <net_icmpv6_send_error>
   252be:	e73f      	b.n	25140 <net_ipv6_process_pkt+0x88>
	u16_t total_len = 0;
   252c0:	2600      	movs	r6, #0
   252c2:	e770      	b.n	251a6 <net_ipv6_process_pkt+0xee>
	ret = net_icmpv6_get_hdr(pkt, &icmp_hdr);
   252c4:	a907      	add	r1, sp, #28
   252c6:	4620      	mov	r0, r4
   252c8:	f7fe ff8c 	bl	241e4 <net_icmpv6_get_hdr>
	if (ret < 0) {
   252cc:	2800      	cmp	r0, #0
   252ce:	f6ff af37 	blt.w	25140 <net_ipv6_process_pkt+0x88>
	return net_icmpv6_input(pkt, icmp_hdr.type, icmp_hdr.code);
   252d2:	f89d 201d 	ldrb.w	r2, [sp, #29]
   252d6:	f89d 101c 	ldrb.w	r1, [sp, #28]
   252da:	4620      	mov	r0, r4
   252dc:	f7ff fc58 	bl	24b90 <net_icmpv6_input>
   252e0:	e743      	b.n	2516a <net_ipv6_process_pkt+0xb2>
   252e2:	bf00      	nop
   252e4:	2000e284 	.word	0x2000e284
   252e8:	0002ef38 	.word	0x0002ef38
   252ec:	0002f048 	.word	0x0002f048
   252f0:	00034fc4 	.word	0x00034fc4
   252f4:	00034f9e 	.word	0x00034f9e

000252f8 <net_ipv6_init>:

void net_ipv6_init(void)
{
   252f8:	b508      	push	{r3, lr}
	net_ipv6_nbr_init();
   252fa:	f001 feb1 	bl	27060 <net_ipv6_nbr_init>

#if defined(CONFIG_NET_IPV6_MLD)
	net_ipv6_mld_init();
#endif
}
   252fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	net_ipv6_mld_init();
   25302:	f002 b939 	b.w	27578 <net_ipv6_mld_init>

00025306 <net_buf_frags_len>:
{
   25306:	4603      	mov	r3, r0
	size_t bytes = 0;
   25308:	2000      	movs	r0, #0
	while (buf) {
   2530a:	b903      	cbnz	r3, 2530e <net_buf_frags_len+0x8>
}
   2530c:	4770      	bx	lr
		bytes += buf->len;
   2530e:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   25310:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   25312:	4410      	add	r0, r2
   25314:	e7f9      	b.n	2530a <net_buf_frags_len+0x4>

00025316 <net_is_ipv6_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25316:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25318:	b942      	cbnz	r2, 2532c <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2531a:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2531c:	b933      	cbnz	r3, 2532c <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2531e:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25320:	b922      	cbnz	r2, 2532c <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   25322:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25324:	fab0 f080 	clz	r0, r0
   25328:	0940      	lsrs	r0, r0, #5
   2532a:	4770      	bx	lr
   2532c:	2000      	movs	r0, #0
   2532e:	4770      	bx	lr

00025330 <net_if_get_ll_reserve>:
	return iface->if_dev->l2;
   25330:	6803      	ldr	r3, [r0, #0]
	return net_if_l2(iface)->reserve(iface, (void *)dst_ip6);
   25332:	685b      	ldr	r3, [r3, #4]
   25334:	689b      	ldr	r3, [r3, #8]
   25336:	4718      	bx	r3

00025338 <ipv6_nbr_set_state>:
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   25338:	68c3      	ldr	r3, [r0, #12]
   2533a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   2533e:	428a      	cmp	r2, r1
   25340:	d003      	beq.n	2534a <ipv6_nbr_set_state+0x12>
   25342:	2a05      	cmp	r2, #5

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   25344:	bf18      	it	ne
   25346:	f883 1030 	strbne.w	r1, [r3, #48]	; 0x30
}
   2534a:	4770      	bx	lr

0002534c <iface_cb>:
	net_nbr_cb_t cb;
	void *user_data;
};

static void iface_cb(struct net_if *iface, void *user_data)
{
   2534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref || nbr->iface != iface) {
   2534e:	4e09      	ldr	r6, [pc, #36]	; (25374 <iface_cb+0x28>)
{
   25350:	4607      	mov	r7, r0
   25352:	460d      	mov	r5, r1
   25354:	2400      	movs	r4, #0
		if (!nbr->ref || nbr->iface != iface) {
   25356:	5da3      	ldrb	r3, [r4, r6]
   25358:	b133      	cbz	r3, 25368 <iface_cb+0x1c>
   2535a:	1930      	adds	r0, r6, r4
   2535c:	6883      	ldr	r3, [r0, #8]
   2535e:	42bb      	cmp	r3, r7
   25360:	d102      	bne.n	25368 <iface_cb+0x1c>
			continue;
		}

		data->cb(nbr, data->user_data);
   25362:	e9d5 3100 	ldrd	r3, r1, [r5]
   25366:	4798      	blx	r3
   25368:	344c      	adds	r4, #76	; 0x4c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   2536a:	f5b4 7fe4 	cmp.w	r4, #456	; 0x1c8
   2536e:	d1f2      	bne.n	25356 <iface_cb+0xa>
	}
}
   25370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25372:	bf00      	nop
   25374:	2000dd18 	.word	0x2000dd18

00025378 <net_neighbor_data_remove>:
void net_neighbor_data_remove(struct net_nbr *nbr)
{
	NET_DBG("Neighbor %p removed", nbr);

	return;
}
   25378:	4770      	bx	lr

0002537a <nbr_clear_ns_pending>:
	data->send_ns = 0;
   2537a:	2200      	movs	r2, #0
   2537c:	2300      	movs	r3, #0
{
   2537e:	b510      	push	{r4, lr}
   25380:	4604      	mov	r4, r0
	data->send_ns = 0;
   25382:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	if (data->pending) {
   25386:	6800      	ldr	r0, [r0, #0]
   25388:	b118      	cbz	r0, 25392 <nbr_clear_ns_pending+0x18>
		net_pkt_unref(data->pending);
   2538a:	f7fd f938 	bl	225fe <net_pkt_unref>
		data->pending = NULL;
   2538e:	2300      	movs	r3, #0
   25390:	6023      	str	r3, [r4, #0]
}
   25392:	bd10      	pop	{r4, pc}

00025394 <nbr_free>:
{
   25394:	b538      	push	{r3, r4, r5, lr}
   25396:	4604      	mov	r4, r0
	nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   25398:	68c0      	ldr	r0, [r0, #12]
   2539a:	f7ff ffee 	bl	2537a <nbr_clear_ns_pending>
	net_ipv6_nbr_data(nbr)->reachable = 0;
   2539e:	68e3      	ldr	r3, [r4, #12]
   253a0:	2100      	movs	r1, #0
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   253a2:	2500      	movs	r5, #0
	net_ipv6_nbr_data(nbr)->reachable = 0;
   253a4:	2000      	movs	r0, #0
   253a6:	e9c3 0106 	strd	r0, r1, [r3, #24]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   253aa:	621d      	str	r5, [r3, #32]
	net_nbr_unref(nbr);
   253ac:	4620      	mov	r0, r4
   253ae:	f7ff fc35 	bl	24c1c <net_nbr_unref>
	net_nbr_unlink(nbr, NULL);
   253b2:	4629      	mov	r1, r5
   253b4:	4620      	mov	r0, r4
}
   253b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_nbr_unlink(nbr, NULL);
   253ba:	f7ff bcad 	b.w	24d18 <net_nbr_unlink>

000253be <net_linkaddr_set>:
{
   253be:	b510      	push	{r4, lr}
	if (!lladdr_store || !new_addr) {
   253c0:	b140      	cbz	r0, 253d4 <net_linkaddr_set+0x16>
   253c2:	b139      	cbz	r1, 253d4 <net_linkaddr_set+0x16>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   253c4:	2a06      	cmp	r2, #6
   253c6:	d808      	bhi.n	253da <net_linkaddr_set+0x1c>
	lladdr_store->len = new_len;
   253c8:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   253ca:	3002      	adds	r0, #2
   253cc:	f7e1 fc5c 	bl	6c88 <memcpy>

	return 0;
   253d0:	2000      	movs	r0, #0
}
   253d2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   253d4:	f06f 0015 	mvn.w	r0, #21
   253d8:	e7fb      	b.n	253d2 <net_linkaddr_set+0x14>
		return -EMSGSIZE;
   253da:	f06f 0023 	mvn.w	r0, #35	; 0x23
   253de:	e7f8      	b.n	253d2 <net_linkaddr_set+0x14>

000253e0 <k_delayed_work_remaining_get>:
{
   253e0:	b508      	push	{r3, lr}
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
   253e2:	300c      	adds	r0, #12
   253e4:	f009 fa02 	bl	2e7ec <z_timeout_remaining>
   253e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   253ec:	2264      	movs	r2, #100	; 0x64
   253ee:	2300      	movs	r3, #0
   253f0:	fb80 0101 	smull	r0, r1, r0, r1
   253f4:	f7da ff5e 	bl	2b4 <__aeabi_uldivmod>
}
   253f8:	bd08      	pop	{r3, pc}
	...

000253fc <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   253fc:	460a      	mov	r2, r1
   253fe:	4601      	mov	r1, r0
   25400:	4801      	ldr	r0, [pc, #4]	; (25408 <k_delayed_work_submit+0xc>)
   25402:	f009 b983 	b.w	2e70c <k_delayed_work_submit_to_queue>
   25406:	bf00      	nop
   25408:	200037b0 	.word	0x200037b0

0002540c <ipv6_ns_reply_timeout>:
{
   2540c:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   25410:	f009 faf2 	bl	2e9f8 <_impl_k_uptime_get>
   25414:	e9cd 0100 	strd	r0, r1, [sp]
		if (!nbr || !nbr->ref) {
   25418:	4f22      	ldr	r7, [pc, #136]	; (254a4 <ipv6_ns_reply_timeout+0x98>)
			if (!k_delayed_work_remaining_get(
   2541a:	f8df b08c 	ldr.w	fp, [pc, #140]	; 254a8 <ipv6_ns_reply_timeout+0x9c>
   2541e:	2600      	movs	r6, #0
		if (!nbr || !nbr->ref) {
   25420:	5df3      	ldrb	r3, [r6, r7]
   25422:	b313      	cbz	r3, 2546a <ipv6_ns_reply_timeout+0x5e>
   25424:	eb07 0a06 	add.w	sl, r7, r6
		data = net_ipv6_nbr_data(nbr);
   25428:	f8da 800c 	ldr.w	r8, [sl, #12]
		if (!data) {
   2542c:	f1b8 0f00 	cmp.w	r8, #0
   25430:	d01b      	beq.n	2546a <ipv6_ns_reply_timeout+0x5e>
		if (!data->send_ns) {
   25432:	e9d8 120a 	ldrd	r1, r2, [r8, #40]	; 0x28
   25436:	ea51 0302 	orrs.w	r3, r1, r2
   2543a:	d016      	beq.n	2546a <ipv6_ns_reply_timeout+0x5e>
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
   2543c:	f511 747a 	adds.w	r4, r1, #1000	; 0x3e8
   25440:	f142 0500 	adc.w	r5, r2, #0
   25444:	e9dd 2300 	ldrd	r2, r3, [sp]
   25448:	1aa2      	subs	r2, r4, r2
   2544a:	eb65 0303 	sbc.w	r3, r5, r3
   2544e:	461d      	mov	r5, r3
		if (remaining > 0) {
   25450:	2a01      	cmp	r2, #1
   25452:	f175 0300 	sbcs.w	r3, r5, #0
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
   25456:	4614      	mov	r4, r2
		if (remaining > 0) {
   25458:	db0e      	blt.n	25478 <ipv6_ns_reply_timeout+0x6c>
			if (!k_delayed_work_remaining_get(
   2545a:	4658      	mov	r0, fp
   2545c:	f7ff ffc0 	bl	253e0 <k_delayed_work_remaining_get>
   25460:	b918      	cbnz	r0, 2546a <ipv6_ns_reply_timeout+0x5e>
				k_delayed_work_submit(&ipv6_ns_reply_timer,
   25462:	4621      	mov	r1, r4
   25464:	4658      	mov	r0, fp
   25466:	f7ff ffc9 	bl	253fc <k_delayed_work_submit>
   2546a:	364c      	adds	r6, #76	; 0x4c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   2546c:	f5b6 7fe4 	cmp.w	r6, #456	; 0x1c8
   25470:	d1d6      	bne.n	25420 <ipv6_ns_reply_timeout+0x14>
}
   25472:	b002      	add	sp, #8
   25474:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
		if (!data->pending) {
   25478:	f8d8 0000 	ldr.w	r0, [r8]
		data->send_ns = 0;
   2547c:	2300      	movs	r3, #0
   2547e:	2400      	movs	r4, #0
   25480:	e9c8 340a 	strd	r3, r4, [r8, #40]	; 0x28
		if (!data->pending) {
   25484:	2800      	cmp	r0, #0
   25486:	d0f0      	beq.n	2546a <ipv6_ns_reply_timeout+0x5e>
		net_pkt_unref(data->pending);
   25488:	f7fd f8b9 	bl	225fe <net_pkt_unref>
		net_pkt_unref(data->pending);
   2548c:	f8d8 0000 	ldr.w	r0, [r8]
   25490:	f7fd f8b5 	bl	225fe <net_pkt_unref>
		data->pending = NULL;
   25494:	2000      	movs	r0, #0
   25496:	f8c8 0000 	str.w	r0, [r8]
		net_nbr_unref(nbr);
   2549a:	4650      	mov	r0, sl
   2549c:	f7ff fbbe 	bl	24c1c <net_nbr_unref>
   254a0:	e7e3      	b.n	2546a <ipv6_ns_reply_timeout+0x5e>
   254a2:	bf00      	nop
   254a4:	2000dd18 	.word	0x2000dd18
   254a8:	2000282c 	.word	0x2000282c

000254ac <setup_headers>:
		     llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   254ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   254ae:	4605      	mov	r5, r0
	net_buf_add(pkt->frags,
   254b0:	6940      	ldr	r0, [r0, #20]
{
   254b2:	460e      	mov	r6, r1
	net_buf_add(pkt->frags,
   254b4:	3008      	adds	r0, #8
   254b6:	212c      	movs	r1, #44	; 0x2c
{
   254b8:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   254ba:	f7f9 ff29 	bl	1f310 <net_buf_simple_add>
	return pkt->frags->data;
   254be:	696b      	ldr	r3, [r5, #20]
   254c0:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   254c2:	2260      	movs	r2, #96	; 0x60
	NET_IPV6_HDR(pkt)->tcflow = 0;
	NET_IPV6_HDR(pkt)->flow = 0;
	NET_IPV6_HDR(pkt)->len = htons(NET_ICMPH_LEN + nd6_len);
   254c4:	1d31      	adds	r1, r6, #4
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   254c6:	701a      	strb	r2, [r3, #0]
	NET_IPV6_HDR(pkt)->len = htons(NET_ICMPH_LEN + nd6_len);
   254c8:	0208      	lsls	r0, r1, #8

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   254ca:	223a      	movs	r2, #58	; 0x3a
	NET_IPV6_HDR(pkt)->tcflow = 0;
   254cc:	2400      	movs	r4, #0
	NET_IPV6_HDR(pkt)->len = htons(NET_ICMPH_LEN + nd6_len);
   254ce:	ea40 2111 	orr.w	r1, r0, r1, lsr #8
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   254d2:	719a      	strb	r2, [r3, #6]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   254d4:	22ff      	movs	r2, #255	; 0xff
	NET_IPV6_HDR(pkt)->tcflow = 0;
   254d6:	705c      	strb	r4, [r3, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   254d8:	709c      	strb	r4, [r3, #2]
   254da:	70dc      	strb	r4, [r3, #3]
	NET_IPV6_HDR(pkt)->len = htons(NET_ICMPH_LEN + nd6_len);
   254dc:	8099      	strh	r1, [r3, #4]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   254de:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   254e0:	4628      	mov	r0, r5
   254e2:	f7fd fb6c 	bl	22bbe <net_pkt_icmp_data>
   254e6:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   254e8:	4628      	mov	r0, r5
   254ea:	f7fd fb68 	bl	22bbe <net_pkt_icmp_data>
   254ee:	7044      	strb	r4, [r0, #1]
}
   254f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000254f2 <net_pkt_ll_clear>:
{
   254f2:	b510      	push	{r4, lr}
	return pkt->frags->data;
   254f4:	6943      	ldr	r3, [r0, #20]
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   254f6:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
{
   254fa:	4604      	mov	r4, r0
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   254fc:	6898      	ldr	r0, [r3, #8]
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   254fe:	2100      	movs	r1, #0
   25500:	1a80      	subs	r0, r0, r2
   25502:	f7e1 fbee 	bl	6ce2 <memset>
	net_pkt_lladdr_src(pkt)->addr = NULL;
   25506:	2300      	movs	r3, #0
   25508:	62e3      	str	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_src(pkt)->len = 0;
   2550a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   2550e:	bd10      	pop	{r4, pc}

00025510 <set_llao>:
{
   25510:	b570      	push	{r4, r5, r6, lr}
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   25512:	700b      	strb	r3, [r1, #0]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   25514:	08d3      	lsrs	r3, r2, #3
{
   25516:	460c      	mov	r4, r1
   25518:	4606      	mov	r6, r0
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   2551a:	704b      	strb	r3, [r1, #1]
{
   2551c:	4615      	mov	r5, r2
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   2551e:	6801      	ldr	r1, [r0, #0]
   25520:	7902      	ldrb	r2, [r0, #4]
   25522:	1ca0      	adds	r0, r4, #2
   25524:	f7e1 fbb0 	bl	6c88 <memcpy>
	(void)memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   25528:	7930      	ldrb	r0, [r6, #4]
		     llao_len - lladdr->len - 2);
   2552a:	1a2a      	subs	r2, r5, r0
	(void)memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   2552c:	3002      	adds	r0, #2
   2552e:	4420      	add	r0, r4
   25530:	3a02      	subs	r2, #2
   25532:	2100      	movs	r1, #0
}
   25534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   25538:	f7e1 bbd3 	b.w	6ce2 <memset>

0002553c <get_llao_len>:
{
   2553c:	b508      	push	{r3, lr}
	if (net_if_get_link_addr(iface)->len == 6) {
   2553e:	6803      	ldr	r3, [r0, #0]
   25540:	7d1a      	ldrb	r2, [r3, #20]
   25542:	2a06      	cmp	r2, #6
   25544:	d019      	beq.n	2557a <get_llao_len+0x3e>
	} else if (net_if_get_link_addr(iface)->len == 8) {
   25546:	2a08      	cmp	r2, #8
   25548:	d019      	beq.n	2557e <get_llao_len+0x42>
	NET_ASSERT_INFO(0, "Invalid link address length %d",
   2554a:	4b0e      	ldr	r3, [pc, #56]	; (25584 <get_llao_len+0x48>)
   2554c:	6818      	ldr	r0, [r3, #0]
   2554e:	f010 0007 	ands.w	r0, r0, #7
   25552:	d011      	beq.n	25578 <get_llao_len+0x3c>
   25554:	2101      	movs	r1, #1
   25556:	f04f 0300 	mov.w	r3, #0
   2555a:	f361 0302 	bfi	r3, r1, #0, #3
   2555e:	480a      	ldr	r0, [pc, #40]	; (25588 <get_llao_len+0x4c>)
   25560:	490a      	ldr	r1, [pc, #40]	; (2558c <get_llao_len+0x50>)
   25562:	1a09      	subs	r1, r1, r0
   25564:	08c9      	lsrs	r1, r1, #3
   25566:	f36f 03c5 	bfc	r3, #3, #3
   2556a:	f361 138f 	bfi	r3, r1, #6, #10
   2556e:	4808      	ldr	r0, [pc, #32]	; (25590 <get_llao_len+0x54>)
   25570:	4908      	ldr	r1, [pc, #32]	; (25594 <get_llao_len+0x58>)
   25572:	f7dc fdcf 	bl	2114 <log_2>
	return 0;
   25576:	2000      	movs	r0, #0
}
   25578:	bd08      	pop	{r3, pc}
		return 8;
   2557a:	2008      	movs	r0, #8
   2557c:	e7fc      	b.n	25578 <get_llao_len+0x3c>
		return 16;
   2557e:	2010      	movs	r0, #16
   25580:	e7fa      	b.n	25578 <get_llao_len+0x3c>
   25582:	bf00      	nop
   25584:	2000e28c 	.word	0x2000e28c
   25588:	0002ef38 	.word	0x0002ef38
   2558c:	0002f058 	.word	0x0002f058
   25590:	00035122 	.word	0x00035122
   25594:	00035071 	.word	0x00035071

00025598 <nbr_lookup.isra.21>:
static struct net_nbr *nbr_lookup(struct net_nbr_table *table,
   25598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if (!nbr->ref) {
   2559c:	4e0f      	ldr	r6, [pc, #60]	; (255dc <nbr_lookup.isra.21+0x44>)
static struct net_nbr *nbr_lookup(struct net_nbr_table *table,
   2559e:	4607      	mov	r7, r0
   255a0:	4688      	mov	r8, r1
   255a2:	2400      	movs	r4, #0
   255a4:	46b1      	mov	r9, r6
		if (!nbr->ref) {
   255a6:	5da3      	ldrb	r3, [r4, r6]
   255a8:	b93b      	cbnz	r3, 255ba <nbr_lookup.isra.21+0x22>
   255aa:	344c      	adds	r4, #76	; 0x4c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   255ac:	f5b4 7fe4 	cmp.w	r4, #456	; 0x1c8
   255b0:	d1f9      	bne.n	255a6 <nbr_lookup.isra.21+0xe>
	return NULL;
   255b2:	2500      	movs	r5, #0
}
   255b4:	4628      	mov	r0, r5
   255b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (iface && nbr->iface != iface) {
   255ba:	b11f      	cbz	r7, 255c4 <nbr_lookup.isra.21+0x2c>
   255bc:	1933      	adds	r3, r6, r4
   255be:	689b      	ldr	r3, [r3, #8]
   255c0:	429f      	cmp	r7, r3
   255c2:	d1f2      	bne.n	255aa <nbr_lookup.isra.21+0x12>
   255c4:	eb09 0504 	add.w	r5, r9, r4
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   255c8:	2210      	movs	r2, #16
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
   255ca:	68e8      	ldr	r0, [r5, #12]
   255cc:	4641      	mov	r1, r8
   255ce:	3004      	adds	r0, #4
   255d0:	f7e1 fb33 	bl	6c3a <memcmp>
   255d4:	2800      	cmp	r0, #0
   255d6:	d1e8      	bne.n	255aa <nbr_lookup.isra.21+0x12>
   255d8:	e7ec      	b.n	255b4 <nbr_lookup.isra.21+0x1c>
   255da:	bf00      	nop
   255dc:	2000dd18 	.word	0x2000dd18

000255e0 <update_ll_reserve.part.25>:
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
   255e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255e4:	4606      	mov	r6, r0
	reserve = net_if_get_ll_reserve(net_pkt_iface(pkt), addr);
   255e6:	6a00      	ldr	r0, [r0, #32]
   255e8:	f7ff fea2 	bl	25330 <net_if_get_ll_reserve>
	if (reserve == net_pkt_ll_reserve(pkt)) {
   255ec:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
   255f0:	4283      	cmp	r3, r0
   255f2:	d018      	beq.n	25626 <update_ll_reserve.part.25+0x46>
	orig_frag = pkt->frags;
   255f4:	f8d6 8014 	ldr.w	r8, [r6, #20]
	net_pkt_set_ll_reserve(pkt, reserve);
   255f8:	f886 0040 	strb.w	r0, [r6, #64]	; 0x40
	pkt->frags = NULL;
   255fc:	2500      	movs	r5, #0
	copy_len = orig_frag->len;
   255fe:	f8b8 700c 	ldrh.w	r7, [r8, #12]
	pkt->frags = NULL;
   25602:	6175      	str	r5, [r6, #20]
	pos = 0;
   25604:	46a9      	mov	r9, r5
	room_len = 0;
   25606:	462c      	mov	r4, r5
			room_len = 0;
   25608:	46ab      	mov	fp, r5
		if (!room_len) {
   2560a:	b9c4      	cbnz	r4, 2563e <update_ll_reserve.part.25+0x5e>
			frag = net_pkt_get_frag(pkt, NET_BUF_TIMEOUT);
   2560c:	2132      	movs	r1, #50	; 0x32
   2560e:	4630      	mov	r0, r6
   25610:	f7fc ff34 	bl	2247c <net_pkt_get_frag>
			if (!frag) {
   25614:	4605      	mov	r5, r0
   25616:	b948      	cbnz	r0, 2562c <update_ll_reserve.part.25+0x4c>
				net_pkt_unref(pkt);
   25618:	4630      	mov	r0, r6
   2561a:	f7fc fff0 	bl	225fe <net_pkt_unref>
				net_pkt_frag_unref(orig_frag);
   2561e:	4640      	mov	r0, r8
   25620:	f7fc ffe9 	bl	225f6 <net_pkt_frag_unref>
				return NULL;
   25624:	462e      	mov	r6, r5
}
   25626:	4630      	mov	r0, r6
   25628:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			net_pkt_frag_add(pkt, frag);
   2562c:	4601      	mov	r1, r0
   2562e:	4630      	mov	r0, r6
   25630:	f7fd f80c 	bl	2264c <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   25634:	f105 0008 	add.w	r0, r5, #8
   25638:	f7f9 fed6 	bl	1f3e8 <net_buf_simple_tailroom>
   2563c:	b284      	uxth	r4, r0
		if (room_len >= copy_len) {
   2563e:	42bc      	cmp	r4, r7
   25640:	f105 0008 	add.w	r0, r5, #8
   25644:	d319      	bcc.n	2567a <update_ll_reserve.part.25+0x9a>
			memcpy(net_buf_add(frag, copy_len),
   25646:	4639      	mov	r1, r7
   25648:	f7f9 fe62 	bl	1f310 <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   2564c:	f8d8 1008 	ldr.w	r1, [r8, #8]
			memcpy(net_buf_add(frag, copy_len),
   25650:	463a      	mov	r2, r7
   25652:	4449      	add	r1, r9
   25654:	f7e1 fb18 	bl	6c88 <memcpy>
			orig_frag = orig_frag->frags;
   25658:	f8d8 a000 	ldr.w	sl, [r8]
			tmp->frags = NULL;
   2565c:	f8c8 b000 	str.w	fp, [r8]
			net_pkt_frag_unref(tmp);
   25660:	4640      	mov	r0, r8
   25662:	f7fc ffc8 	bl	225f6 <net_pkt_frag_unref>
			if (!orig_frag) {
   25666:	f1ba 0f00 	cmp.w	sl, #0
   2566a:	d0dc      	beq.n	25626 <update_ll_reserve.part.25+0x46>
			room_len -= copy_len;
   2566c:	1be4      	subs	r4, r4, r7
   2566e:	b2a4      	uxth	r4, r4
			copy_len = orig_frag->len;
   25670:	f8ba 700c 	ldrh.w	r7, [sl, #12]
			pos = 0;
   25674:	f04f 0900 	mov.w	r9, #0
   25678:	e00f      	b.n	2569a <update_ll_reserve.part.25+0xba>
			memcpy(net_buf_add(frag, room_len),
   2567a:	4621      	mov	r1, r4
   2567c:	f7f9 fe48 	bl	1f310 <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   25680:	f8d8 1008 	ldr.w	r1, [r8, #8]
			memcpy(net_buf_add(frag, room_len),
   25684:	4622      	mov	r2, r4
   25686:	4449      	add	r1, r9
   25688:	f7e1 fafe 	bl	6c88 <memcpy>
			copy_len -= room_len;
   2568c:	1b3f      	subs	r7, r7, r4
			pos += room_len;
   2568e:	44a1      	add	r9, r4
			copy_len -= room_len;
   25690:	b2bf      	uxth	r7, r7
			pos += room_len;
   25692:	fa1f f989 	uxth.w	r9, r9
   25696:	46c2      	mov	sl, r8
			room_len = 0;
   25698:	2400      	movs	r4, #0
   2569a:	46d0      	mov	r8, sl
   2569c:	e7b5      	b.n	2560a <update_ll_reserve.part.25+0x2a>
	...

000256a0 <net_is_solicited>:
{
   256a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ret = net_icmpv6_get_na_hdr(pkt, &na_hdr);
   256a2:	a901      	add	r1, sp, #4
   256a4:	f7fe ffaa 	bl	245fc <net_icmpv6_get_na_hdr>
	if (ret < 0) {
   256a8:	2800      	cmp	r0, #0
   256aa:	da19      	bge.n	256e0 <net_is_solicited+0x40>
		NET_ERR("could not get na_hdr");
   256ac:	4b0f      	ldr	r3, [pc, #60]	; (256ec <net_is_solicited+0x4c>)
   256ae:	6818      	ldr	r0, [r3, #0]
   256b0:	f010 0007 	ands.w	r0, r0, #7
   256b4:	d011      	beq.n	256da <net_is_solicited+0x3a>
   256b6:	2301      	movs	r3, #1
   256b8:	f04f 0200 	mov.w	r2, #0
   256bc:	f363 0202 	bfi	r2, r3, #0, #3
   256c0:	490b      	ldr	r1, [pc, #44]	; (256f0 <net_is_solicited+0x50>)
   256c2:	4b0c      	ldr	r3, [pc, #48]	; (256f4 <net_is_solicited+0x54>)
   256c4:	480c      	ldr	r0, [pc, #48]	; (256f8 <net_is_solicited+0x58>)
   256c6:	1a5b      	subs	r3, r3, r1
   256c8:	08db      	lsrs	r3, r3, #3
   256ca:	f36f 02c5 	bfc	r2, #3, #3
   256ce:	f363 128f 	bfi	r2, r3, #6, #10
   256d2:	490a      	ldr	r1, [pc, #40]	; (256fc <net_is_solicited+0x5c>)
   256d4:	f7dc fd0a 	bl	20ec <log_1>
   256d8:	2000      	movs	r0, #0
}
   256da:	b007      	add	sp, #28
   256dc:	f85d fb04 	ldr.w	pc, [sp], #4
	return na_hdr.flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   256e0:	f89d 0004 	ldrb.w	r0, [sp, #4]
   256e4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   256e8:	e7f7      	b.n	256da <net_is_solicited+0x3a>
   256ea:	bf00      	nop
   256ec:	2000e28c 	.word	0x2000e28c
   256f0:	0002ef38 	.word	0x0002ef38
   256f4:	0002f058 	.word	0x0002f058
   256f8:	0003531e 	.word	0x0003531e
   256fc:	0003500c 	.word	0x0003500c

00025700 <net_is_override>:
{
   25700:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ret = net_icmpv6_get_na_hdr(pkt, &na_hdr);
   25702:	a901      	add	r1, sp, #4
   25704:	f7fe ff7a 	bl	245fc <net_icmpv6_get_na_hdr>
	if (ret < 0) {
   25708:	2800      	cmp	r0, #0
   2570a:	da19      	bge.n	25740 <net_is_override+0x40>
		NET_ERR("could not get na_hdr");
   2570c:	4b0f      	ldr	r3, [pc, #60]	; (2574c <net_is_override+0x4c>)
   2570e:	6818      	ldr	r0, [r3, #0]
   25710:	f010 0007 	ands.w	r0, r0, #7
   25714:	d011      	beq.n	2573a <net_is_override+0x3a>
   25716:	2301      	movs	r3, #1
   25718:	f04f 0200 	mov.w	r2, #0
   2571c:	f363 0202 	bfi	r2, r3, #0, #3
   25720:	490b      	ldr	r1, [pc, #44]	; (25750 <net_is_override+0x50>)
   25722:	4b0c      	ldr	r3, [pc, #48]	; (25754 <net_is_override+0x54>)
   25724:	480c      	ldr	r0, [pc, #48]	; (25758 <net_is_override+0x58>)
   25726:	1a5b      	subs	r3, r3, r1
   25728:	08db      	lsrs	r3, r3, #3
   2572a:	f36f 02c5 	bfc	r2, #3, #3
   2572e:	f363 128f 	bfi	r2, r3, #6, #10
   25732:	490a      	ldr	r1, [pc, #40]	; (2575c <net_is_override+0x5c>)
   25734:	f7dc fcda 	bl	20ec <log_1>
   25738:	2000      	movs	r0, #0
}
   2573a:	b007      	add	sp, #28
   2573c:	f85d fb04 	ldr.w	pc, [sp], #4
	return na_hdr.flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   25740:	f89d 0004 	ldrb.w	r0, [sp, #4]
   25744:	f3c0 1040 	ubfx	r0, r0, #5, #1
   25748:	e7f7      	b.n	2573a <net_is_override+0x3a>
   2574a:	bf00      	nop
   2574c:	2000e28c 	.word	0x2000e28c
   25750:	0002ef38 	.word	0x0002ef38
   25754:	0002f058 	.word	0x0002f058
   25758:	0003531e 	.word	0x0003531e
   2575c:	0003502b 	.word	0x0003502b

00025760 <net_is_router>:
{
   25760:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ret = net_icmpv6_get_na_hdr(pkt, &na_hdr);
   25762:	a901      	add	r1, sp, #4
   25764:	f7fe ff4a 	bl	245fc <net_icmpv6_get_na_hdr>
	if (ret < 0) {
   25768:	2800      	cmp	r0, #0
   2576a:	da19      	bge.n	257a0 <net_is_router+0x40>
		NET_ERR("could not get na_hdr");
   2576c:	4b0e      	ldr	r3, [pc, #56]	; (257a8 <net_is_router+0x48>)
   2576e:	6818      	ldr	r0, [r3, #0]
   25770:	f010 0007 	ands.w	r0, r0, #7
   25774:	d011      	beq.n	2579a <net_is_router+0x3a>
   25776:	2301      	movs	r3, #1
   25778:	f04f 0200 	mov.w	r2, #0
   2577c:	f363 0202 	bfi	r2, r3, #0, #3
   25780:	490a      	ldr	r1, [pc, #40]	; (257ac <net_is_router+0x4c>)
   25782:	4b0b      	ldr	r3, [pc, #44]	; (257b0 <net_is_router+0x50>)
   25784:	480b      	ldr	r0, [pc, #44]	; (257b4 <net_is_router+0x54>)
   25786:	1a5b      	subs	r3, r3, r1
   25788:	08db      	lsrs	r3, r3, #3
   2578a:	f36f 02c5 	bfc	r2, #3, #3
   2578e:	f363 128f 	bfi	r2, r3, #6, #10
   25792:	4909      	ldr	r1, [pc, #36]	; (257b8 <net_is_router+0x58>)
   25794:	f7dc fcaa 	bl	20ec <log_1>
   25798:	2000      	movs	r0, #0
}
   2579a:	b007      	add	sp, #28
   2579c:	f85d fb04 	ldr.w	pc, [sp], #4
	return na_hdr.flags & NET_ICMPV6_NA_FLAG_ROUTER;
   257a0:	f89d 0004 	ldrb.w	r0, [sp, #4]
   257a4:	09c0      	lsrs	r0, r0, #7
   257a6:	e7f8      	b.n	2579a <net_is_router+0x3a>
   257a8:	2000e28c 	.word	0x2000e28c
   257ac:	0002ef38 	.word	0x0002ef38
   257b0:	0002f058 	.word	0x0002f058
   257b4:	0003531e 	.word	0x0003531e
   257b8:	0003501d 	.word	0x0003501d

000257bc <dad_failed>:
	if (net_is_ipv6_ll_addr(addr)) {
   257bc:	880a      	ldrh	r2, [r1, #0]
{
   257be:	b508      	push	{r3, lr}
	if (net_is_ipv6_ll_addr(addr)) {
   257c0:	f248 03fe 	movw	r3, #33022	; 0x80fe
   257c4:	429a      	cmp	r2, r3
   257c6:	d117      	bne.n	257f8 <dad_failed+0x3c>
		NET_ERR("DAD failed, no ll IPv6 address!");
   257c8:	4b0d      	ldr	r3, [pc, #52]	; (25800 <dad_failed+0x44>)
   257ca:	6818      	ldr	r0, [r3, #0]
   257cc:	f010 0007 	ands.w	r0, r0, #7
   257d0:	d011      	beq.n	257f6 <dad_failed+0x3a>
   257d2:	2301      	movs	r3, #1
   257d4:	f04f 0200 	mov.w	r2, #0
   257d8:	f363 0202 	bfi	r2, r3, #0, #3
   257dc:	4909      	ldr	r1, [pc, #36]	; (25804 <dad_failed+0x48>)
   257de:	4b0a      	ldr	r3, [pc, #40]	; (25808 <dad_failed+0x4c>)
   257e0:	480a      	ldr	r0, [pc, #40]	; (2580c <dad_failed+0x50>)
   257e2:	1a5b      	subs	r3, r3, r1
   257e4:	08db      	lsrs	r3, r3, #3
   257e6:	f36f 02c5 	bfc	r2, #3, #3
   257ea:	f363 128f 	bfi	r2, r3, #6, #10
   257ee:	4908      	ldr	r1, [pc, #32]	; (25810 <dad_failed+0x54>)
   257f0:	f7dc fc7c 	bl	20ec <log_1>
   257f4:	2000      	movs	r0, #0
}
   257f6:	bd08      	pop	{r3, pc}
	net_if_ipv6_dad_failed(iface, addr);
   257f8:	f7fb fe5e 	bl	214b8 <net_if_ipv6_dad_failed>
	return true;
   257fc:	2001      	movs	r0, #1
   257fe:	e7fa      	b.n	257f6 <dad_failed+0x3a>
   25800:	2000e28c 	.word	0x2000e28c
   25804:	0002ef38 	.word	0x0002ef38
   25808:	0002f058 	.word	0x0002f058
   2580c:	000350fe 	.word	0x000350fe
   25810:	0003504c 	.word	0x0003504c

00025814 <nbr_new.isra.22>:
static struct net_nbr *nbr_new(struct net_if *iface,
   25814:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   25818:	4606      	mov	r6, r0
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   2581a:	481c      	ldr	r0, [pc, #112]	; (2588c <nbr_new.isra.22+0x78>)
static struct net_nbr *nbr_new(struct net_if *iface,
   2581c:	460c      	mov	r4, r1
   2581e:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   25820:	f7ff fa05 	bl	24c2e <net_nbr_get>
	if (!nbr) {
   25824:	4605      	mov	r5, r0
   25826:	b360      	cbz	r0, 25882 <nbr_new.isra.22+0x6e>
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   25828:	23ff      	movs	r3, #255	; 0xff
   2582a:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   2582c:	6086      	str	r6, [r0, #8]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   2582e:	4623      	mov	r3, r4
   25830:	68c6      	ldr	r6, [r0, #12]
   25832:	466c      	mov	r4, sp
   25834:	f103 0c10 	add.w	ip, r3, #16
   25838:	4627      	mov	r7, r4
   2583a:	6818      	ldr	r0, [r3, #0]
   2583c:	6859      	ldr	r1, [r3, #4]
   2583e:	4622      	mov	r2, r4
   25840:	c203      	stmia	r2!, {r0, r1}
   25842:	3308      	adds	r3, #8
   25844:	4563      	cmp	r3, ip
   25846:	4614      	mov	r4, r2
   25848:	d1f7      	bne.n	2583a <nbr_new.isra.22+0x26>
   2584a:	1d33      	adds	r3, r6, #4
   2584c:	aa04      	add	r2, sp, #16
   2584e:	463c      	mov	r4, r7
   25850:	cc03      	ldmia	r4!, {r0, r1}
   25852:	4294      	cmp	r4, r2
   25854:	6018      	str	r0, [r3, #0]
   25856:	6059      	str	r1, [r3, #4]
   25858:	4627      	mov	r7, r4
   2585a:	f103 0308 	add.w	r3, r3, #8
   2585e:	d1f6      	bne.n	2584e <nbr_new.isra.22+0x3a>
	ipv6_nbr_set_state(nbr, state);
   25860:	4641      	mov	r1, r8
   25862:	4628      	mov	r0, r5
   25864:	f7ff fd68 	bl	25338 <ipv6_nbr_set_state>
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   25868:	68eb      	ldr	r3, [r5, #12]
	net_ipv6_nbr_data(nbr)->send_ns = 0;
   2586a:	2000      	movs	r0, #0
   2586c:	2100      	movs	r1, #0
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   2586e:	2201      	movs	r2, #1
	net_ipv6_nbr_data(nbr)->send_ns = 0;
   25870:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
	net_ipv6_nbr_data(nbr)->reachable = 0;
   25874:	e9c3 0106 	strd	r0, r1, [r3, #24]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   25878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	net_ipv6_nbr_data(nbr)->pending = NULL;
   2587c:	2200      	movs	r2, #0
   2587e:	601a      	str	r2, [r3, #0]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   25880:	621a      	str	r2, [r3, #32]
}
   25882:	4628      	mov	r0, r5
   25884:	b004      	add	sp, #16
   25886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2588a:	bf00      	nop
   2588c:	2000dd0c 	.word	0x2000dd0c

00025890 <net_neighbor_table_clear>:
   25890:	4770      	bx	lr
	...

00025894 <dbg_update_neighbor_lladdr.isra.23>:
static void dbg_update_neighbor_lladdr(struct net_linkaddr *new_lladdr,
   25894:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   25896:	2318      	movs	r3, #24
   25898:	7841      	ldrb	r1, [r0, #1]
   2589a:	4a06      	ldr	r2, [pc, #24]	; (258b4 <dbg_update_neighbor_lladdr.isra.23+0x20>)
   2589c:	3002      	adds	r0, #2
   2589e:	f7fd fb50 	bl	22f42 <net_sprint_ll_addr_buf>
	snprintk(out, sizeof(out), "%s",
   258a2:	4a05      	ldr	r2, [pc, #20]	; (258b8 <dbg_update_neighbor_lladdr.isra.23+0x24>)
   258a4:	4603      	mov	r3, r0
   258a6:	2118      	movs	r1, #24
   258a8:	4668      	mov	r0, sp
   258aa:	f7db fdf9 	bl	14a0 <snprintk>
}
   258ae:	b007      	add	sp, #28
   258b0:	f85d fb04 	ldr.w	pc, [sp], #4
   258b4:	200027f2 	.word	0x200027f2
   258b8:	0002fdfc 	.word	0x0002fdfc

000258bc <net_ipv6_nbr_state2str>:
{
   258bc:	2805      	cmp	r0, #5
   258be:	bf9a      	itte	ls
   258c0:	4b02      	ldrls	r3, [pc, #8]	; (258cc <net_ipv6_nbr_state2str+0x10>)
   258c2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   258c6:	4802      	ldrhi	r0, [pc, #8]	; (258d0 <net_ipv6_nbr_state2str+0x14>)
}
   258c8:	4770      	bx	lr
   258ca:	bf00      	nop
   258cc:	00034ff4 	.word	0x00034ff4
   258d0:	0003530e 	.word	0x0003530e

000258d4 <net_ipv6_nbr_foreach>:
{
   258d4:	b507      	push	{r0, r1, r2, lr}
	struct iface_cb_data cb_data = {
   258d6:	e9cd 0100 	strd	r0, r1, [sp]
	net_if_foreach(iface_cb, &cb_data);
   258da:	4669      	mov	r1, sp
   258dc:	4802      	ldr	r0, [pc, #8]	; (258e8 <net_ipv6_nbr_foreach+0x14>)
   258de:	f7fc fb03 	bl	21ee8 <net_if_foreach>
}
   258e2:	b003      	add	sp, #12
   258e4:	f85d fb04 	ldr.w	pc, [sp], #4
   258e8:	0002534d 	.word	0x0002534d

000258ec <net_ipv6_nbr_rm>:
{
   258ec:	b570      	push	{r4, r5, r6, lr}
   258ee:	4605      	mov	r5, r0
   258f0:	460e      	mov	r6, r1
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   258f2:	f7ff fe51 	bl	25598 <nbr_lookup.isra.21>
	if (!nbr) {
   258f6:	4604      	mov	r4, r0
   258f8:	b168      	cbz	r0, 25916 <net_ipv6_nbr_rm+0x2a>
	net_route_del_by_nexthop(iface, addr);
   258fa:	4631      	mov	r1, r6
   258fc:	4628      	mov	r0, r5
   258fe:	f002 f833 	bl	27968 <net_route_del_by_nexthop>
	nbr_free(nbr);
   25902:	4620      	mov	r0, r4
   25904:	f7ff fd46 	bl	25394 <nbr_free>
   25908:	2300      	movs	r3, #0
   2590a:	4803      	ldr	r0, [pc, #12]	; (25918 <net_ipv6_nbr_rm+0x2c>)
   2590c:	461a      	mov	r2, r3
   2590e:	4629      	mov	r1, r5
   25910:	f001 fec6 	bl	276a0 <net_mgmt_event_notify_with_info>
	return true;
   25914:	2001      	movs	r0, #1
}
   25916:	bd70      	pop	{r4, r5, r6, pc}
   25918:	f0600010 	.word	0xf0600010

0002591c <net_ipv6_nbr_lookup>:
	return nbr_lookup(&net_neighbor.table, iface, addr);
   2591c:	f7ff be3c 	b.w	25598 <nbr_lookup.isra.21>

00025920 <net_ipv6_send_na>:
}

int net_ipv6_send_na(struct net_if *iface, const struct in6_addr *src,
		     const struct in6_addr *dst, const struct in6_addr *tgt,
		     u8_t flags)
{
   25920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25924:	460f      	mov	r7, r1
   25926:	b092      	sub	sp, #72	; 0x48
	struct net_pkt *pkt;
	struct net_buf *frag;
	u8_t llao_len;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   25928:	4611      	mov	r1, r2
{
   2592a:	4615      	mov	r5, r2
   2592c:	461e      	mov	r6, r3
   2592e:	4680      	mov	r8, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   25930:	f7ff fcfe 	bl	25330 <net_if_get_ll_reserve>
   25934:	2164      	movs	r1, #100	; 0x64
   25936:	f7fc fd89 	bl	2244c <net_pkt_get_reserve_tx>
				     ND_NET_BUF_TIMEOUT);
	if (!pkt) {
   2593a:	4604      	mov	r4, r0
   2593c:	b138      	cbz	r0, 2594e <net_ipv6_send_na+0x2e>
		return -ENOMEM;
	}

	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   2593e:	2164      	movs	r1, #100	; 0x64
   25940:	f7fc fd9c 	bl	2247c <net_pkt_get_frag>
	if (!frag) {
   25944:	4681      	mov	r9, r0
   25946:	b928      	cbnz	r0, 25954 <net_ipv6_send_na+0x34>
		net_pkt_unref(pkt);
   25948:	4620      	mov	r0, r4
   2594a:	f7fc fe58 	bl	225fe <net_pkt_unref>
		return -ENOMEM;
   2594e:	f06f 050b 	mvn.w	r5, #11
   25952:	e08f      	b.n	25a74 <net_ipv6_send_na+0x154>
		return -ENOMEM;
	}

	net_pkt_frag_add(pkt, frag);
   25954:	4601      	mov	r1, r0
   25956:	4620      	mov	r0, r4
   25958:	f7fc fe78 	bl	2264c <net_pkt_frag_add>
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   2595c:	f8d8 3000 	ldr.w	r3, [r8]
	pkt->iface = iface;
   25960:	f8c4 8020 	str.w	r8, [r4, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   25964:	7d5b      	ldrb	r3, [r3, #21]
   25966:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   2596a:	f8d8 3000 	ldr.w	r3, [r8]
   2596e:	7d5b      	ldrb	r3, [r3, #21]
   25970:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	pkt->family = family;
   25974:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   25978:	220a      	movs	r2, #10
   2597a:	f362 03c6 	bfi	r3, r2, #3, #4
   2597e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	pkt->ip_hdr_len = len;
   25982:	2328      	movs	r3, #40	; 0x28
   25984:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

	net_pkt_set_iface(pkt, iface);
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	net_pkt_ll_clear(pkt);
   25988:	4620      	mov	r0, r4
   2598a:	f7ff fdb2 	bl	254f2 <net_pkt_ll_clear>

	llao_len = get_llao_len(iface);
   2598e:	4640      	mov	r0, r8
   25990:	f7ff fdd4 	bl	2553c <get_llao_len>
	pkt->ipv6_ext_len = len;
   25994:	2300      	movs	r3, #0

	net_pkt_set_ipv6_ext_len(pkt, 0);

	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   25996:	f100 0a14 	add.w	sl, r0, #20
   2599a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
   2599e:	2288      	movs	r2, #136	; 0x88
   259a0:	fa5f f18a 	uxtb.w	r1, sl
	llao_len = get_llao_len(iface);
   259a4:	4680      	mov	r8, r0
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   259a6:	4620      	mov	r0, r4
   259a8:	f7ff fd80 	bl	254ac <setup_headers>
		      NET_ICMPV6_NA);

	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   259ac:	f109 0008 	add.w	r0, r9, #8
   259b0:	4651      	mov	r1, sl
   259b2:	f7f9 fcad 	bl	1f310 <net_buf_simple_add>
	return pkt->frags->data;
   259b6:	6963      	ldr	r3, [r4, #20]
   259b8:	689a      	ldr	r2, [r3, #8]

	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   259ba:	463b      	mov	r3, r7
   259bc:	af01      	add	r7, sp, #4
   259be:	f103 0910 	add.w	r9, r3, #16
   259c2:	46bc      	mov	ip, r7
   259c4:	6818      	ldr	r0, [r3, #0]
   259c6:	6859      	ldr	r1, [r3, #4]
   259c8:	46be      	mov	lr, r7
   259ca:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   259ce:	3308      	adds	r3, #8
   259d0:	454b      	cmp	r3, r9
   259d2:	4677      	mov	r7, lr
   259d4:	d1f6      	bne.n	259c4 <net_ipv6_send_na+0xa4>
   259d6:	3208      	adds	r2, #8
   259d8:	ab05      	add	r3, sp, #20
   259da:	4667      	mov	r7, ip
   259dc:	cf03      	ldmia	r7!, {r0, r1}
   259de:	429f      	cmp	r7, r3
   259e0:	6010      	str	r0, [r2, #0]
   259e2:	6051      	str	r1, [r2, #4]
   259e4:	46bc      	mov	ip, r7
   259e6:	f102 0208 	add.w	r2, r2, #8
   259ea:	d1f6      	bne.n	259da <net_ipv6_send_na+0xba>
   259ec:	6962      	ldr	r2, [r4, #20]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   259ee:	469c      	mov	ip, r3
   259f0:	6897      	ldr	r7, [r2, #8]
   259f2:	f105 0e10 	add.w	lr, r5, #16
   259f6:	462a      	mov	r2, r5
   259f8:	6810      	ldr	r0, [r2, #0]
   259fa:	6851      	ldr	r1, [r2, #4]
   259fc:	4665      	mov	r5, ip
   259fe:	c503      	stmia	r5!, {r0, r1}
   25a00:	3208      	adds	r2, #8
   25a02:	4572      	cmp	r2, lr
   25a04:	46ac      	mov	ip, r5
   25a06:	d1f7      	bne.n	259f8 <net_ipv6_send_na+0xd8>
   25a08:	f107 0518 	add.w	r5, r7, #24
   25a0c:	aa09      	add	r2, sp, #36	; 0x24
   25a0e:	461f      	mov	r7, r3
   25a10:	cf03      	ldmia	r7!, {r0, r1}
   25a12:	4297      	cmp	r7, r2
   25a14:	6028      	str	r0, [r5, #0]
   25a16:	6069      	str	r1, [r5, #4]
   25a18:	463b      	mov	r3, r7
   25a1a:	f105 0508 	add.w	r5, r5, #8
   25a1e:	d1f6      	bne.n	25a0e <net_ipv6_send_na+0xee>
	net_ipaddr_copy(&na_hdr.tgt, tgt);
   25a20:	4633      	mov	r3, r6
   25a22:	f103 0710 	add.w	r7, r3, #16
   25a26:	4616      	mov	r6, r2
   25a28:	6818      	ldr	r0, [r3, #0]
   25a2a:	6859      	ldr	r1, [r3, #4]
   25a2c:	4635      	mov	r5, r6
   25a2e:	c503      	stmia	r5!, {r0, r1}
   25a30:	3308      	adds	r3, #8
   25a32:	42bb      	cmp	r3, r7
   25a34:	462e      	mov	r6, r5
   25a36:	d1f7      	bne.n	25a28 <net_ipv6_send_na+0x108>
   25a38:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   25a3a:	ad12      	add	r5, sp, #72	; 0x48
   25a3c:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}

	set_llao(net_if_get_link_addr(net_pkt_iface(pkt)),
   25a40:	6a23      	ldr	r3, [r4, #32]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   25a42:	4620      	mov	r0, r4
	return &iface->if_dev->link_addr;
   25a44:	681d      	ldr	r5, [r3, #0]
   25a46:	f7fd f8ba 	bl	22bbe <net_pkt_icmp_data>
   25a4a:	3510      	adds	r5, #16
	set_llao(net_if_get_link_addr(net_pkt_iface(pkt)),
   25a4c:	f100 0118 	add.w	r1, r0, #24
   25a50:	2302      	movs	r3, #2
   25a52:	4628      	mov	r0, r5
   25a54:	4642      	mov	r2, r8
   25a56:	f7ff fd5b 	bl	25510 <set_llao>
					      sizeof(struct net_icmpv6_na_hdr),
		 llao_len, NET_ICMPV6_ND_OPT_TLLAO);

	na_hdr.flags = flags;
   25a5a:	a912      	add	r1, sp, #72	; 0x48
   25a5c:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   25a60:	f801 3d14 	strb.w	r3, [r1, #-20]!
	ret = net_icmpv6_set_na_hdr(pkt, &na_hdr);
   25a64:	4620      	mov	r0, r4
   25a66:	f7fe fe01 	bl	2466c <net_icmpv6_set_na_hdr>
	if (ret < 0) {
   25a6a:	1e05      	subs	r5, r0, #0
   25a6c:	da06      	bge.n	25a7c <net_ipv6_send_na+0x15c>
		net_pkt_unref(pkt);
   25a6e:	4620      	mov	r0, r4
	pkt->frags->len = NET_IPV6ICMPH_LEN +
		sizeof(struct net_icmpv6_na_hdr) + llao_len;

	ret = net_icmpv6_set_chksum(pkt);
	if (ret < 0) {
		net_pkt_unref(pkt);
   25a70:	f7fc fdc5 	bl	225fe <net_pkt_unref>
drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));
	net_pkt_unref(pkt);

	return -EINVAL;
}
   25a74:	4628      	mov	r0, r5
   25a76:	b012      	add	sp, #72	; 0x48
   25a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   25a7c:	6963      	ldr	r3, [r4, #20]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   25a7e:	f108 0840 	add.w	r8, r8, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   25a82:	f8a3 800c 	strh.w	r8, [r3, #12]
	ret = net_icmpv6_set_chksum(pkt);
   25a86:	4620      	mov	r0, r4
   25a88:	f7fe fb5e 	bl	24148 <net_icmpv6_set_chksum>
	if (ret < 0) {
   25a8c:	1e05      	subs	r5, r0, #0
		net_pkt_unref(pkt);
   25a8e:	4620      	mov	r0, r4
	if (ret < 0) {
   25a90:	dbee      	blt.n	25a70 <net_ipv6_send_na+0x150>
	if (net_send_data(pkt) < 0) {
   25a92:	f7fa febb 	bl	2080c <net_send_data>
   25a96:	2800      	cmp	r0, #0
   25a98:	da05      	bge.n	25aa6 <net_ipv6_send_na+0x186>
	net_pkt_unref(pkt);
   25a9a:	4620      	mov	r0, r4
   25a9c:	f7fc fdaf 	bl	225fe <net_pkt_unref>
	return -EINVAL;
   25aa0:	f06f 0515 	mvn.w	r5, #21
   25aa4:	e7e6      	b.n	25a74 <net_ipv6_send_na+0x154>
	return 0;
   25aa6:	2500      	movs	r5, #0
   25aa8:	e7e4      	b.n	25a74 <net_ipv6_send_na+0x154>
	...

00025aac <net_ipv6_nbr_set_reachable_timer>:
void net_ipv6_nbr_set_reachable_timer(struct net_if *iface,
				      struct net_nbr *nbr)
{
	u32_t time;

	time = net_if_ipv6_get_reachable_time(iface);
   25aac:	6843      	ldr	r3, [r0, #4]
{
   25aae:	b570      	push	{r4, r5, r6, lr}
   25ab0:	460d      	mov	r5, r1
	if (!iface->config.ip.ipv6) {
   25ab2:	b113      	cbz	r3, 25aba <net_ipv6_nbr_set_reachable_timer+0xe>
	return iface->config.ip.ipv6->reachable_time;
   25ab4:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4

	NET_ASSERT_INFO(time, "Zero reachable timeout!");
   25ab8:	b9b4      	cbnz	r4, 25ae8 <net_ipv6_nbr_set_reachable_timer+0x3c>
   25aba:	4b14      	ldr	r3, [pc, #80]	; (25b0c <net_ipv6_nbr_set_reachable_timer+0x60>)
   25abc:	681c      	ldr	r4, [r3, #0]
   25abe:	f014 0407 	ands.w	r4, r4, #7
   25ac2:	d011      	beq.n	25ae8 <net_ipv6_nbr_set_reachable_timer+0x3c>
   25ac4:	2301      	movs	r3, #1
   25ac6:	f04f 0200 	mov.w	r2, #0
   25aca:	f363 0202 	bfi	r2, r3, #0, #3
   25ace:	4910      	ldr	r1, [pc, #64]	; (25b10 <net_ipv6_nbr_set_reachable_timer+0x64>)
   25ad0:	4b10      	ldr	r3, [pc, #64]	; (25b14 <net_ipv6_nbr_set_reachable_timer+0x68>)
   25ad2:	4811      	ldr	r0, [pc, #68]	; (25b18 <net_ipv6_nbr_set_reachable_timer+0x6c>)
   25ad4:	1a5b      	subs	r3, r3, r1
   25ad6:	08db      	lsrs	r3, r3, #3
   25ad8:	f36f 02c5 	bfc	r2, #3, #3
   25adc:	f363 128f 	bfi	r2, r3, #6, #10
   25ae0:	490e      	ldr	r1, [pc, #56]	; (25b1c <net_ipv6_nbr_set_reachable_timer+0x70>)
   25ae2:	f7dc fb03 	bl	20ec <log_1>
   25ae6:	2400      	movs	r4, #0

	NET_DBG("Starting reachable timer nbr %p data %p time %d ms",
		nbr, net_ipv6_nbr_data(nbr), time);

	net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
   25ae8:	68ee      	ldr	r6, [r5, #12]
   25aea:	f008 ff85 	bl	2e9f8 <_impl_k_uptime_get>
	net_ipv6_nbr_data(nbr)->reachable_timeout = time;
   25aee:	68eb      	ldr	r3, [r5, #12]
	net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
   25af0:	e9c6 0106 	strd	r0, r1, [r6, #24]
	net_ipv6_nbr_data(nbr)->reachable_timeout = time;
   25af4:	621c      	str	r4, [r3, #32]

	if (!k_delayed_work_remaining_get(&ipv6_nd_reachable_timer)) {
   25af6:	480a      	ldr	r0, [pc, #40]	; (25b20 <net_ipv6_nbr_set_reachable_timer+0x74>)
   25af8:	f7ff fc72 	bl	253e0 <k_delayed_work_remaining_get>
   25afc:	b928      	cbnz	r0, 25b0a <net_ipv6_nbr_set_reachable_timer+0x5e>
		k_delayed_work_submit(&ipv6_nd_reachable_timer, time);
   25afe:	4621      	mov	r1, r4
   25b00:	4807      	ldr	r0, [pc, #28]	; (25b20 <net_ipv6_nbr_set_reachable_timer+0x74>)
	}
}
   25b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_delayed_work_submit(&ipv6_nd_reachable_timer, time);
   25b06:	f7ff bc79 	b.w	253fc <k_delayed_work_submit>
}
   25b0a:	bd70      	pop	{r4, r5, r6, pc}
   25b0c:	2000e28c 	.word	0x2000e28c
   25b10:	0002ef38 	.word	0x0002ef38
   25b14:	0002f058 	.word	0x0002f058
   25b18:	000352da 	.word	0x000352da
   25b1c:	000350a8 	.word	0x000350a8
   25b20:	2000280c 	.word	0x2000280c

00025b24 <handle_na_input>:

	return true;
}

static enum net_verdict handle_na_input(struct net_pkt *pkt)
{
   25b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25b28:	4604      	mov	r4, r0
   25b2a:	b08c      	sub	sp, #48	; 0x30
	return net_buf_frags_len(pkt->frags);
   25b2c:	6940      	ldr	r0, [r0, #20]
   25b2e:	f7ff fbea 	bl	25306 <net_buf_frags_len>
	struct net_icmpv6_na_hdr na_hdr;
	struct net_if_addr *ifaddr;
	size_t left_len;
	int ret;

	ret = net_icmpv6_get_na_hdr(pkt, &na_hdr);
   25b32:	a907      	add	r1, sp, #28
   25b34:	4605      	mov	r5, r0
   25b36:	4620      	mov	r0, r4
   25b38:	f7fe fd60 	bl	245fc <net_icmpv6_get_na_hdr>
	if (ret < 0) {
   25b3c:	2800      	cmp	r0, #0
   25b3e:	da19      	bge.n	25b74 <handle_na_input+0x50>
		NET_ERR("NULL NA header - dropping");
   25b40:	4bb6      	ldr	r3, [pc, #728]	; (25e1c <handle_na_input+0x2f8>)
   25b42:	681b      	ldr	r3, [r3, #0]
   25b44:	075a      	lsls	r2, r3, #29
   25b46:	d103      	bne.n	25b50 <handle_na_input+0x2c>
	return NET_OK;

drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));

	return NET_DROP;
   25b48:	2002      	movs	r0, #2
}
   25b4a:	b00c      	add	sp, #48	; 0x30
   25b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NET_ERR("NULL NA header - dropping");
   25b50:	2301      	movs	r3, #1
   25b52:	f04f 0200 	mov.w	r2, #0
   25b56:	f363 0202 	bfi	r2, r3, #0, #3
   25b5a:	49b1      	ldr	r1, [pc, #708]	; (25e20 <handle_na_input+0x2fc>)
   25b5c:	4bb1      	ldr	r3, [pc, #708]	; (25e24 <handle_na_input+0x300>)
   25b5e:	48b2      	ldr	r0, [pc, #712]	; (25e28 <handle_na_input+0x304>)
   25b60:	1a5b      	subs	r3, r3, r1
   25b62:	f36f 02c5 	bfc	r2, #3, #3
   25b66:	08db      	lsrs	r3, r3, #3
   25b68:	49b0      	ldr	r1, [pc, #704]	; (25e2c <handle_na_input+0x308>)
   25b6a:	f363 128f 	bfi	r2, r3, #6, #10
			NET_ERR("Corrupted NA message");
   25b6e:	f7dc fabd 	bl	20ec <log_1>
   25b72:	e7e9      	b.n	25b48 <handle_na_input+0x24>
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   25b74:	b2ad      	uxth	r5, r5
   25b76:	2d41      	cmp	r5, #65	; 0x41
   25b78:	d809      	bhi.n	25b8e <handle_na_input+0x6a>
		ret = net_icmpv6_get_hdr(pkt, &icmp_hdr);
   25b7a:	a905      	add	r1, sp, #20
   25b7c:	4620      	mov	r0, r4
   25b7e:	f7fe fb31 	bl	241e4 <net_icmpv6_get_hdr>
		if (ret < 0 || icmp_hdr.code != 0) {
   25b82:	2800      	cmp	r0, #0
   25b84:	dbe0      	blt.n	25b48 <handle_na_input+0x24>
   25b86:	f89d 3015 	ldrb.w	r3, [sp, #21]
   25b8a:	b193      	cbz	r3, 25bb2 <handle_na_input+0x8e>
   25b8c:	e7dc      	b.n	25b48 <handle_na_input+0x24>
	return pkt->frags->data;
   25b8e:	6963      	ldr	r3, [r4, #20]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   25b90:	689b      	ldr	r3, [r3, #8]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   25b92:	79db      	ldrb	r3, [r3, #7]
   25b94:	2bff      	cmp	r3, #255	; 0xff
   25b96:	d1f0      	bne.n	25b7a <handle_na_input+0x56>
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   25b98:	f89d 3020 	ldrb.w	r3, [sp, #32]
   25b9c:	2bff      	cmp	r3, #255	; 0xff
   25b9e:	d0ec      	beq.n	25b7a <handle_na_input+0x56>
	    (net_is_solicited(pkt) &&
   25ba0:	4620      	mov	r0, r4
   25ba2:	f7ff fd7d 	bl	256a0 <net_is_solicited>
	    net_is_ipv6_addr_mcast(&na_hdr.tgt) ||
   25ba6:	b120      	cbz	r0, 25bb2 <handle_na_input+0x8e>
   25ba8:	6963      	ldr	r3, [r4, #20]
	     net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst))) {
   25baa:	689b      	ldr	r3, [r3, #8]
	    (net_is_solicited(pkt) &&
   25bac:	7e1b      	ldrb	r3, [r3, #24]
   25bae:	2bff      	cmp	r3, #255	; 0xff
   25bb0:	d0e3      	beq.n	25b7a <handle_na_input+0x56>
	pkt->ipv6_ext_opt_len = len;
   25bb2:	2314      	movs	r3, #20
   25bb4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	return net_buf_frags_len(pkt->frags);
   25bb8:	6960      	ldr	r0, [r4, #20]
   25bba:	f7ff fba4 	bl	25306 <net_buf_frags_len>
	ret = net_icmpv6_get_nd_opt_hdr(pkt, &nd_opt_hdr);
   25bbe:	a902      	add	r1, sp, #8
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   25bc0:	f1a0 052c 	sub.w	r5, r0, #44	; 0x2c
	ret = net_icmpv6_get_nd_opt_hdr(pkt, &nd_opt_hdr);
   25bc4:	4620      	mov	r0, r4
   25bc6:	f7fe fcfb 	bl	245c0 <net_icmpv6_get_nd_opt_hdr>
	u16_t tllao_offset = 0;
   25bca:	2600      	movs	r6, #0
	while (!ret && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   25bcc:	b918      	cbnz	r0, 25bd6 <handle_na_input+0xb2>
   25bce:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   25bd2:	4295      	cmp	r5, r2
   25bd4:	d80e      	bhi.n	25bf4 <handle_na_input+0xd0>
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   25bd6:	a908      	add	r1, sp, #32
   25bd8:	6a20      	ldr	r0, [r4, #32]
   25bda:	f7fb f937 	bl	20e4c <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   25bde:	2800      	cmp	r0, #0
   25be0:	d038      	beq.n	25c54 <handle_na_input+0x130>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   25be2:	f990 3045 	ldrsb.w	r3, [r0, #69]	; 0x45
   25be6:	2b00      	cmp	r3, #0
   25be8:	d1ae      	bne.n	25b48 <handle_na_input+0x24>
			dad_failed(net_pkt_iface(pkt), &na_hdr.tgt);
   25bea:	a908      	add	r1, sp, #32
   25bec:	6a20      	ldr	r0, [r4, #32]
   25bee:	f7ff fde5 	bl	257bc <dad_failed>
   25bf2:	e7a9      	b.n	25b48 <handle_na_input+0x24>
		if (!nd_opt_hdr.len) {
   25bf4:	f89d 3009 	ldrb.w	r3, [sp, #9]
   25bf8:	2b00      	cmp	r3, #0
   25bfa:	d0ec      	beq.n	25bd6 <handle_na_input+0xb2>
		switch (nd_opt_hdr.type) {
   25bfc:	f89d 1008 	ldrb.w	r1, [sp, #8]
   25c00:	2902      	cmp	r1, #2
   25c02:	d107      	bne.n	25c14 <handle_na_input+0xf0>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   25c04:	f8b4 604c 	ldrh.w	r6, [r4, #76]	; 0x4c
   25c08:	1db1      	adds	r1, r6, #6
   25c0a:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
   25c0e:	440e      	add	r6, r1
   25c10:	4416      	add	r6, r2
   25c12:	b2b6      	uxth	r6, r6
		net_pkt_set_ipv6_ext_opt_len(pkt,
   25c14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   25c18:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   25c1a:	4293      	cmp	r3, r2
	pkt->ipv6_ext_opt_len = len;
   25c1c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   25c20:	d813      	bhi.n	25c4a <handle_na_input+0x126>
			NET_ERR("Corrupted NA message");
   25c22:	4b7e      	ldr	r3, [pc, #504]	; (25e1c <handle_na_input+0x2f8>)
   25c24:	681b      	ldr	r3, [r3, #0]
   25c26:	075b      	lsls	r3, r3, #29
   25c28:	d08e      	beq.n	25b48 <handle_na_input+0x24>
   25c2a:	2301      	movs	r3, #1
   25c2c:	f04f 0200 	mov.w	r2, #0
   25c30:	f363 0202 	bfi	r2, r3, #0, #3
   25c34:	497a      	ldr	r1, [pc, #488]	; (25e20 <handle_na_input+0x2fc>)
   25c36:	4b7b      	ldr	r3, [pc, #492]	; (25e24 <handle_na_input+0x300>)
   25c38:	487d      	ldr	r0, [pc, #500]	; (25e30 <handle_na_input+0x30c>)
   25c3a:	1a5b      	subs	r3, r3, r1
   25c3c:	f36f 02c5 	bfc	r2, #3, #3
   25c40:	08db      	lsrs	r3, r3, #3
   25c42:	f363 128f 	bfi	r2, r3, #6, #10
   25c46:	4979      	ldr	r1, [pc, #484]	; (25e2c <handle_na_input+0x308>)
   25c48:	e791      	b.n	25b6e <handle_na_input+0x4a>
		ret = net_icmpv6_get_nd_opt_hdr(pkt, &nd_opt_hdr);
   25c4a:	a902      	add	r1, sp, #8
   25c4c:	4620      	mov	r0, r4
   25c4e:	f7fe fcb7 	bl	245c0 <net_icmpv6_get_nd_opt_hdr>
   25c52:	e7bb      	b.n	25bcc <handle_na_input+0xa8>
	struct net_linkaddr_storage lladdr = { 0 };
   25c54:	e9cd 0003 	strd	r0, r0, [sp, #12]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   25c58:	a908      	add	r1, sp, #32
   25c5a:	6a20      	ldr	r0, [r4, #32]
   25c5c:	f7ff fc9c 	bl	25598 <nbr_lookup.isra.21>
	if (!nbr) {
   25c60:	4605      	mov	r5, r0
   25c62:	2800      	cmp	r0, #0
   25c64:	f43f af70 	beq.w	25b48 <handle_na_input+0x24>
	if (tllao_offset) {
   25c68:	2e00      	cmp	r6, #0
   25c6a:	d15a      	bne.n	25d22 <handle_na_input+0x1fe>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   25c6c:	786b      	ldrb	r3, [r5, #1]
   25c6e:	2bff      	cmp	r3, #255	; 0xff
   25c70:	d06e      	beq.n	25d50 <handle_na_input+0x22c>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   25c72:	7868      	ldrb	r0, [r5, #1]
   25c74:	f7ff f8ae 	bl	24dd4 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   25c78:	4607      	mov	r7, r0
   25c7a:	2800      	cmp	r0, #0
   25c7c:	f43f af64 	beq.w	25b48 <handle_na_input+0x24>
	if (tllao_offset) {
   25c80:	2e00      	cmp	r6, #0
   25c82:	d07c      	beq.n	25d7e <handle_na_input+0x25a>
		lladdr_changed = memcmp(lladdr.addr,
   25c84:	7842      	ldrb	r2, [r0, #1]
   25c86:	1c81      	adds	r1, r0, #2
   25c88:	f10d 000e 	add.w	r0, sp, #14
   25c8c:	f7e0 ffd5 	bl	6c3a <memcmp>
   25c90:	f110 0800 	adds.w	r8, r0, #0
   25c94:	bf18      	it	ne
   25c96:	f04f 0801 	movne.w	r8, #1
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   25c9a:	68eb      	ldr	r3, [r5, #12]
   25c9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   25ca0:	2b00      	cmp	r3, #0
   25ca2:	d173      	bne.n	25d8c <handle_na_input+0x268>
		if (!tllao_offset) {
   25ca4:	2e00      	cmp	r6, #0
   25ca6:	f43f af4f 	beq.w	25b48 <handle_na_input+0x24>
		if (lladdr_changed) {
   25caa:	f1b8 0f00 	cmp.w	r8, #0
   25cae:	d008      	beq.n	25cc2 <handle_na_input+0x19e>
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
   25cb0:	4638      	mov	r0, r7
   25cb2:	f7ff fdef 	bl	25894 <dbg_update_neighbor_lladdr.isra.23>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   25cb6:	787a      	ldrb	r2, [r7, #1]
   25cb8:	f10d 010e 	add.w	r1, sp, #14
   25cbc:	4638      	mov	r0, r7
   25cbe:	f7ff fb7e 	bl	253be <net_linkaddr_set>
		if (net_is_solicited(pkt)) {
   25cc2:	4620      	mov	r0, r4
   25cc4:	f7ff fcec 	bl	256a0 <net_is_solicited>
   25cc8:	2800      	cmp	r0, #0
   25cca:	d05a      	beq.n	25d82 <handle_na_input+0x25e>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   25ccc:	2101      	movs	r1, #1
   25cce:	4628      	mov	r0, r5
   25cd0:	f7ff fb32 	bl	25338 <ipv6_nbr_set_state>
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   25cd4:	68eb      	ldr	r3, [r5, #12]
   25cd6:	2200      	movs	r2, #0
			net_ipv6_nbr_data(nbr)->reachable = 0;
   25cd8:	2000      	movs	r0, #0
   25cda:	2100      	movs	r1, #0
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   25cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			net_ipv6_nbr_data(nbr)->reachable = 0;
   25ce0:	e9c3 0106 	strd	r0, r1, [r3, #24]
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   25ce4:	621a      	str	r2, [r3, #32]
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   25ce6:	4629      	mov	r1, r5
   25ce8:	6a20      	ldr	r0, [r4, #32]
   25cea:	f7ff fedf 	bl	25aac <net_ipv6_nbr_set_reachable_timer>
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   25cee:	4620      	mov	r0, r4
   25cf0:	68ee      	ldr	r6, [r5, #12]
   25cf2:	f7ff fd35 	bl	25760 <net_is_router>
	pending = net_ipv6_nbr_data(nbr)->pending;
   25cf6:	68eb      	ldr	r3, [r5, #12]
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   25cf8:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
	pending = net_ipv6_nbr_data(nbr)->pending;
   25cfc:	681e      	ldr	r6, [r3, #0]
	if (pending) {
   25cfe:	b15e      	cbz	r6, 25d18 <handle_na_input+0x1f4>
		if (net_send_data(pending) < 0) {
   25d00:	4630      	mov	r0, r6
   25d02:	f7fa fd83 	bl	2080c <net_send_data>
   25d06:	2800      	cmp	r0, #0
   25d08:	f280 809c 	bge.w	25e44 <handle_na_input+0x320>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   25d0c:	68e8      	ldr	r0, [r5, #12]
   25d0e:	f7ff fb34 	bl	2537a <nbr_clear_ns_pending>
		net_pkt_unref(pending);
   25d12:	4630      	mov	r0, r6
   25d14:	f7fc fc73 	bl	225fe <net_pkt_unref>
	net_pkt_unref(pkt);
   25d18:	4620      	mov	r0, r4
   25d1a:	f7fc fc70 	bl	225fe <net_pkt_unref>
	return NET_OK;
   25d1e:	2000      	movs	r0, #0
   25d20:	e713      	b.n	25b4a <handle_na_input+0x26>
		lladdr.len = net_if_get_link_addr(net_pkt_iface(pkt))->len;
   25d22:	6a23      	ldr	r3, [r4, #32]
		frag = net_frag_read(pkt->frags, tllao_offset,
   25d24:	6960      	ldr	r0, [r4, #20]
		lladdr.len = net_if_get_link_addr(net_pkt_iface(pkt))->len;
   25d26:	681b      	ldr	r3, [r3, #0]
		frag = net_frag_read(pkt->frags, tllao_offset,
   25d28:	f10d 020e 	add.w	r2, sp, #14
		lladdr.len = net_if_get_link_addr(net_pkt_iface(pkt))->len;
   25d2c:	7d1b      	ldrb	r3, [r3, #20]
		frag = net_frag_read(pkt->frags, tllao_offset,
   25d2e:	9200      	str	r2, [sp, #0]
   25d30:	4631      	mov	r1, r6
   25d32:	f10d 020a 	add.w	r2, sp, #10
		lladdr.len = net_if_get_link_addr(net_pkt_iface(pkt))->len;
   25d36:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   25d3a:	f7fc fdf9 	bl	22930 <net_frag_read>
		if (!frag && pos == 0xffff) {
   25d3e:	2800      	cmp	r0, #0
   25d40:	d194      	bne.n	25c6c <handle_na_input+0x148>
   25d42:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   25d46:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25d4a:	429a      	cmp	r2, r3
   25d4c:	d18e      	bne.n	25c6c <handle_na_input+0x148>
   25d4e:	e6fb      	b.n	25b48 <handle_na_input+0x24>
		if (!tllao_offset) {
   25d50:	2e00      	cmp	r6, #0
   25d52:	f43f aef9 	beq.w	25b48 <handle_na_input+0x24>
		nbr_lladdr.len = lladdr.len;
   25d56:	f89d 300d 	ldrb.w	r3, [sp, #13]
   25d5a:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   25d5e:	aa0c      	add	r2, sp, #48	; 0x30
   25d60:	f10d 030e 	add.w	r3, sp, #14
   25d64:	f842 3d1c 	str.w	r3, [r2, #-28]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   25d68:	6a21      	ldr	r1, [r4, #32]
   25d6a:	4628      	mov	r0, r5
   25d6c:	f7fe ff76 	bl	24c5c <net_nbr_link>
   25d70:	2800      	cmp	r0, #0
   25d72:	f43f af7e 	beq.w	25c72 <handle_na_input+0x14e>
			nbr_free(nbr);
   25d76:	4628      	mov	r0, r5
   25d78:	f7ff fb0c 	bl	25394 <nbr_free>
   25d7c:	e6e4      	b.n	25b48 <handle_na_input+0x24>
	bool lladdr_changed = false;
   25d7e:	46b0      	mov	r8, r6
   25d80:	e78b      	b.n	25c9a <handle_na_input+0x176>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   25d82:	2102      	movs	r1, #2
   25d84:	4628      	mov	r0, r5
   25d86:	f7ff fad7 	bl	25338 <ipv6_nbr_set_state>
   25d8a:	e7b0      	b.n	25cee <handle_na_input+0x1ca>
	if (!net_is_override(pkt) && lladdr_changed) {
   25d8c:	4620      	mov	r0, r4
   25d8e:	f7ff fcb7 	bl	25700 <net_is_override>
   25d92:	b968      	cbnz	r0, 25db0 <handle_na_input+0x28c>
   25d94:	f1b8 0f00 	cmp.w	r8, #0
   25d98:	d00a      	beq.n	25db0 <handle_na_input+0x28c>
		if (net_ipv6_nbr_data(nbr)->state ==
   25d9a:	68eb      	ldr	r3, [r5, #12]
   25d9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   25da0:	2b01      	cmp	r3, #1
   25da2:	f47f aed1 	bne.w	25b48 <handle_na_input+0x24>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   25da6:	2102      	movs	r1, #2
   25da8:	4628      	mov	r0, r5
   25daa:	f7ff fac5 	bl	25338 <ipv6_nbr_set_state>
   25dae:	e6cb      	b.n	25b48 <handle_na_input+0x24>
	if (net_is_override(pkt) ||
   25db0:	4620      	mov	r0, r4
   25db2:	f7ff fca5 	bl	25700 <net_is_override>
   25db6:	bb20      	cbnz	r0, 25e02 <handle_na_input+0x2de>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   25db8:	4620      	mov	r0, r4
   25dba:	f7ff fca1 	bl	25700 <net_is_override>
	if (net_is_override(pkt) ||
   25dbe:	b9b0      	cbnz	r0, 25dee <handle_na_input+0x2ca>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   25dc0:	b1ae      	cbz	r6, 25dee <handle_na_input+0x2ca>
   25dc2:	f1b8 0f00 	cmp.w	r8, #0
   25dc6:	d112      	bne.n	25dee <handle_na_input+0x2ca>
		if (net_is_solicited(pkt)) {
   25dc8:	4620      	mov	r0, r4
   25dca:	f7ff fc69 	bl	256a0 <net_is_solicited>
   25dce:	b388      	cbz	r0, 25e34 <handle_na_input+0x310>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   25dd0:	2101      	movs	r1, #1
   25dd2:	4628      	mov	r0, r5
   25dd4:	f7ff fab0 	bl	25338 <ipv6_nbr_set_state>
			net_ipv6_nbr_data(nbr)->reachable = 0;
   25dd8:	68eb      	ldr	r3, [r5, #12]
   25dda:	2000      	movs	r0, #0
   25ddc:	2100      	movs	r1, #0
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   25dde:	2200      	movs	r2, #0
			net_ipv6_nbr_data(nbr)->reachable = 0;
   25de0:	e9c3 0106 	strd	r0, r1, [r3, #24]
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   25de4:	621a      	str	r2, [r3, #32]
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   25de6:	4629      	mov	r1, r5
   25de8:	6a20      	ldr	r0, [r4, #32]
   25dea:	f7ff fe5f 	bl	25aac <net_ipv6_nbr_set_reachable_timer>
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   25dee:	68eb      	ldr	r3, [r5, #12]
   25df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
   25df4:	2b00      	cmp	r3, #0
   25df6:	f43f af7a 	beq.w	25cee <handle_na_input+0x1ca>
   25dfa:	4620      	mov	r0, r4
   25dfc:	f7ff fcb0 	bl	25760 <net_is_router>
   25e00:	e775      	b.n	25cee <handle_na_input+0x1ca>
		if (lladdr_changed) {
   25e02:	f1b8 0f00 	cmp.w	r8, #0
   25e06:	d0df      	beq.n	25dc8 <handle_na_input+0x2a4>
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
   25e08:	4638      	mov	r0, r7
   25e0a:	f7ff fd43 	bl	25894 <dbg_update_neighbor_lladdr.isra.23>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   25e0e:	787a      	ldrb	r2, [r7, #1]
   25e10:	f10d 010e 	add.w	r1, sp, #14
   25e14:	4638      	mov	r0, r7
   25e16:	f7ff fad2 	bl	253be <net_linkaddr_set>
   25e1a:	e7d5      	b.n	25dc8 <handle_na_input+0x2a4>
   25e1c:	2000e28c 	.word	0x2000e28c
   25e20:	0002ef38 	.word	0x0002ef38
   25e24:	0002f058 	.word	0x0002f058
   25e28:	0003515a 	.word	0x0003515a
   25e2c:	000350c9 	.word	0x000350c9
   25e30:	00035178 	.word	0x00035178
			if (lladdr_changed) {
   25e34:	f1b8 0f00 	cmp.w	r8, #0
   25e38:	d0d9      	beq.n	25dee <handle_na_input+0x2ca>
				ipv6_nbr_set_state(nbr,
   25e3a:	2102      	movs	r1, #2
   25e3c:	4628      	mov	r0, r5
   25e3e:	f7ff fa7b 	bl	25338 <ipv6_nbr_set_state>
   25e42:	e7d4      	b.n	25dee <handle_na_input+0x2ca>
			net_ipv6_nbr_data(nbr)->pending = NULL;
   25e44:	68eb      	ldr	r3, [r5, #12]
   25e46:	2200      	movs	r2, #0
   25e48:	601a      	str	r2, [r3, #0]
   25e4a:	e762      	b.n	25d12 <handle_na_input+0x1ee>

00025e4c <net_ipv6_send_ns>:
		     struct net_pkt *pending,
		     struct in6_addr *src,
		     struct in6_addr *dst,
		     struct in6_addr *tgt,
		     bool is_my_address)
{
   25e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e50:	b09d      	sub	sp, #116	; 0x74
   25e52:	461e      	mov	r6, r3
   25e54:	4688      	mov	r8, r1
   25e56:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
   25e5a:	9301      	str	r3, [sp, #4]
	struct net_buf *frag;
	struct net_nbr *nbr;
	u8_t llao_len;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   25e5c:	4631      	mov	r1, r6
{
   25e5e:	4615      	mov	r5, r2
   25e60:	4681      	mov	r9, r0
   25e62:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   25e66:	f7ff fa63 	bl	25330 <net_if_get_ll_reserve>
   25e6a:	2164      	movs	r1, #100	; 0x64
   25e6c:	f7fc faee 	bl	2244c <net_pkt_get_reserve_tx>
				     ND_NET_BUF_TIMEOUT);
	if (!pkt) {
   25e70:	4604      	mov	r4, r0
   25e72:	b138      	cbz	r0, 25e84 <net_ipv6_send_ns+0x38>
		return -ENOMEM;
	}

	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   25e74:	2164      	movs	r1, #100	; 0x64
   25e76:	f7fc fb01 	bl	2247c <net_pkt_get_frag>
	if (!frag) {
   25e7a:	4607      	mov	r7, r0
   25e7c:	b928      	cbnz	r0, 25e8a <net_ipv6_send_ns+0x3e>
		net_pkt_unref(pkt);
   25e7e:	4620      	mov	r0, r4
   25e80:	f7fc fbbd 	bl	225fe <net_pkt_unref>
		return -ENOMEM;
   25e84:	f06f 0b0b 	mvn.w	fp, #11
   25e88:	e06a      	b.n	25f60 <net_ipv6_send_ns+0x114>
		return -ENOMEM;
	}

	net_pkt_frag_add(pkt, frag);
   25e8a:	4601      	mov	r1, r0
   25e8c:	4620      	mov	r0, r4
   25e8e:	f7fc fbdd 	bl	2264c <net_pkt_frag_add>
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   25e92:	f8d9 3000 	ldr.w	r3, [r9]
	pkt->iface = iface;
   25e96:	f8c4 9020 	str.w	r9, [r4, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   25e9a:	7d5b      	ldrb	r3, [r3, #21]
   25e9c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   25ea0:	f8d9 3000 	ldr.w	r3, [r9]
   25ea4:	7d5b      	ldrb	r3, [r3, #21]
   25ea6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	pkt->family = family;
   25eaa:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   25eae:	220a      	movs	r2, #10
   25eb0:	f362 03c6 	bfi	r3, r2, #3, #4
   25eb4:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	pkt->ip_hdr_len = len;
   25eb8:	2328      	movs	r3, #40	; 0x28
   25eba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	pkt->ipv6_ext_len = len;
   25ebe:	2300      	movs	r3, #0
   25ec0:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));
	net_pkt_set_ipv6_ext_len(pkt, 0);

	net_pkt_ll_clear(pkt);
   25ec4:	4620      	mov	r0, r4
   25ec6:	f7ff fb14 	bl	254f2 <net_pkt_ll_clear>

	llao_len = get_llao_len(net_pkt_iface(pkt));
   25eca:	6a20      	ldr	r0, [r4, #32]
   25ecc:	f7ff fb36 	bl	2553c <get_llao_len>

	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   25ed0:	f100 0114 	add.w	r1, r0, #20
   25ed4:	2287      	movs	r2, #135	; 0x87
   25ed6:	b2c9      	uxtb	r1, r1
	llao_len = get_llao_len(net_pkt_iface(pkt));
   25ed8:	4681      	mov	r9, r0
		      NET_ICMPV6_NS);

	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   25eda:	3708      	adds	r7, #8
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   25edc:	4620      	mov	r0, r4
   25ede:	f7ff fae5 	bl	254ac <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   25ee2:	2114      	movs	r1, #20
   25ee4:	4638      	mov	r0, r7
   25ee6:	f7f9 fa13 	bl	1f310 <net_buf_simple_add>
   25eea:	6963      	ldr	r3, [r4, #20]
	return pkt->frags->data;
   25eec:	689b      	ldr	r3, [r3, #8]

	if (!dst) {
   25eee:	2e00      	cmp	r6, #0
   25ef0:	d13a      	bne.n	25f68 <net_ipv6_send_ns+0x11c>
	dst->s6_addr[0]   = 0xFF;
   25ef2:	f240 22ff 	movw	r2, #767	; 0x2ff
   25ef6:	619a      	str	r2, [r3, #24]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   25ef8:	771e      	strb	r6, [r3, #28]
   25efa:	775e      	strb	r6, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   25efc:	779e      	strb	r6, [r3, #30]
   25efe:	77de      	strb	r6, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   25f00:	f883 6020 	strb.w	r6, [r3, #32]
   25f04:	f883 6021 	strb.w	r6, [r3, #33]	; 0x21
	dst->s6_addr[10]  = 0;
   25f08:	f44f 7280 	mov.w	r2, #256	; 0x100
   25f0c:	845a      	strh	r2, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   25f0e:	22ff      	movs	r2, #255	; 0xff
   25f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
   25f14:	f89a 200d 	ldrb.w	r2, [sl, #13]
   25f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   25f1c:	f8ba 200e 	ldrh.w	r2, [sl, #14]
   25f20:	84da      	strh	r2, [r3, #38]	; 0x26
						    &NET_IPV6_HDR(pkt)->dst);
	} else {
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
	}

	net_ipaddr_copy(&ns_hdr.tgt, tgt);
   25f22:	aa07      	add	r2, sp, #28
   25f24:	f10a 0c10 	add.w	ip, sl, #16
   25f28:	4613      	mov	r3, r2
   25f2a:	f8da 0000 	ldr.w	r0, [sl]
   25f2e:	f8da 1004 	ldr.w	r1, [sl, #4]
   25f32:	4616      	mov	r6, r2
   25f34:	c603      	stmia	r6!, {r0, r1}
   25f36:	f10a 0a08 	add.w	sl, sl, #8
   25f3a:	45e2      	cmp	sl, ip
   25f3c:	4632      	mov	r2, r6
   25f3e:	d1f4      	bne.n	25f2a <net_ipv6_send_ns+0xde>
   25f40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   25f42:	ae18      	add	r6, sp, #96	; 0x60
   25f44:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	ret = net_icmpv6_set_ns_hdr(pkt, &ns_hdr);
   25f48:	f10d 0a5c 	add.w	sl, sp, #92	; 0x5c
   25f4c:	4651      	mov	r1, sl
   25f4e:	4620      	mov	r0, r4
   25f50:	f7fe faf2 	bl	24538 <net_icmpv6_set_ns_hdr>
	if (ret < 0) {
   25f54:	f1b0 0b00 	subs.w	fp, r0, #0
   25f58:	da20      	bge.n	25f9c <net_ipv6_send_ns+0x150>
			 llao_len, NET_ICMPV6_ND_OPT_SLLAO);
	}

	ret = net_icmpv6_set_chksum(pkt);
	if (ret < 0) {
		net_pkt_unref(pkt);
   25f5a:	4620      	mov	r0, r4
   25f5c:	f7fc fb4f 	bl	225fe <net_pkt_unref>
drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));
	net_pkt_unref(pkt);

	return -EINVAL;
}
   25f60:	4658      	mov	r0, fp
   25f62:	b01d      	add	sp, #116	; 0x74
   25f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   25f68:	f10d 0c0c 	add.w	ip, sp, #12
   25f6c:	f106 0e10 	add.w	lr, r6, #16
   25f70:	6830      	ldr	r0, [r6, #0]
   25f72:	6871      	ldr	r1, [r6, #4]
   25f74:	4662      	mov	r2, ip
   25f76:	c203      	stmia	r2!, {r0, r1}
   25f78:	3608      	adds	r6, #8
   25f7a:	4576      	cmp	r6, lr
   25f7c:	4694      	mov	ip, r2
   25f7e:	d1f7      	bne.n	25f70 <net_ipv6_send_ns+0x124>
   25f80:	ae03      	add	r6, sp, #12
   25f82:	3318      	adds	r3, #24
   25f84:	f10d 0c1c 	add.w	ip, sp, #28
   25f88:	4632      	mov	r2, r6
   25f8a:	ca03      	ldmia	r2!, {r0, r1}
   25f8c:	4562      	cmp	r2, ip
   25f8e:	6018      	str	r0, [r3, #0]
   25f90:	6059      	str	r1, [r3, #4]
   25f92:	4616      	mov	r6, r2
   25f94:	f103 0308 	add.w	r3, r3, #8
   25f98:	d1f6      	bne.n	25f88 <net_ipv6_send_ns+0x13c>
   25f9a:	e7c2      	b.n	25f22 <net_ipv6_send_ns+0xd6>
   25f9c:	6963      	ldr	r3, [r4, #20]
   25f9e:	f8d3 b008 	ldr.w	fp, [r3, #8]
	if (is_my_address) {
   25fa2:	9b01      	ldr	r3, [sp, #4]
   25fa4:	2b00      	cmp	r3, #0
   25fa6:	d064      	beq.n	26072 <net_ipv6_send_ns+0x226>
		u16_t len = ntohs(NET_IPV6_HDR(pkt)->len);
   25fa8:	f8bb 7004 	ldrh.w	r7, [fp, #4]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   25fac:	f7fe ffda 	bl	24f64 <net_ipv6_unspecified_address>
   25fb0:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
   25fb4:	4602      	mov	r2, r0
   25fb6:	f100 0a10 	add.w	sl, r0, #16
   25fba:	4665      	mov	r5, ip
   25fbc:	6810      	ldr	r0, [r2, #0]
   25fbe:	6851      	ldr	r1, [r2, #4]
   25fc0:	46e6      	mov	lr, ip
   25fc2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   25fc6:	3208      	adds	r2, #8
   25fc8:	4552      	cmp	r2, sl
   25fca:	46f4      	mov	ip, lr
   25fcc:	d1f6      	bne.n	25fbc <net_ipv6_send_ns+0x170>
   25fce:	f10b 0308 	add.w	r3, fp, #8
   25fd2:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
   25fd6:	462a      	mov	r2, r5
   25fd8:	ca03      	ldmia	r2!, {r0, r1}
   25fda:	4562      	cmp	r2, ip
   25fdc:	6018      	str	r0, [r3, #0]
   25fde:	6059      	str	r1, [r3, #4]
   25fe0:	4615      	mov	r5, r2
   25fe2:	f103 0308 	add.w	r3, r3, #8
   25fe6:	d1f6      	bne.n	25fd6 <net_ipv6_send_ns+0x18a>
   25fe8:	6963      	ldr	r3, [r4, #20]
		NET_IPV6_HDR(pkt)->len = htons(len - llao_len);
   25fea:	689a      	ldr	r2, [r3, #8]
		u16_t len = ntohs(NET_IPV6_HDR(pkt)->len);
   25fec:	023b      	lsls	r3, r7, #8
   25fee:	ea43 2317 	orr.w	r3, r3, r7, lsr #8
		NET_IPV6_HDR(pkt)->len = htons(len - llao_len);
   25ff2:	b29b      	uxth	r3, r3
   25ff4:	eba3 0909 	sub.w	r9, r3, r9
   25ff8:	fa99 f999 	rev16.w	r9, r9
   25ffc:	f8a2 9004 	strh.w	r9, [r2, #4]
	ret = net_icmpv6_set_chksum(pkt);
   26000:	4620      	mov	r0, r4
   26002:	f7fe f8a1 	bl	24148 <net_icmpv6_set_chksum>
	if (ret < 0) {
   26006:	f1b0 0b00 	subs.w	fp, r0, #0
   2600a:	dba6      	blt.n	25f5a <net_ipv6_send_ns+0x10e>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr.tgt);
   2600c:	4631      	mov	r1, r6
   2600e:	6a20      	ldr	r0, [r4, #32]
   26010:	f7ff fac2 	bl	25598 <nbr_lookup.isra.21>
	if (!nbr) {
   26014:	4605      	mov	r5, r0
   26016:	b938      	cbnz	r0, 26028 <net_ipv6_send_ns+0x1dc>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr.tgt, false,
   26018:	4602      	mov	r2, r0
   2601a:	4631      	mov	r1, r6
   2601c:	6a20      	ldr	r0, [r4, #32]
   2601e:	f7ff fbf9 	bl	25814 <nbr_new.isra.22>
		if (!nbr) {
   26022:	4605      	mov	r5, r0
   26024:	2800      	cmp	r0, #0
   26026:	d047      	beq.n	260b8 <net_ipv6_send_ns+0x26c>
	if (pending) {
   26028:	f1b8 0f00 	cmp.w	r8, #0
   2602c:	d015      	beq.n	2605a <net_ipv6_send_ns+0x20e>
		if (!net_ipv6_nbr_data(nbr)->pending) {
   2602e:	68ee      	ldr	r6, [r5, #12]
   26030:	6833      	ldr	r3, [r6, #0]
   26032:	2b00      	cmp	r3, #0
   26034:	d143      	bne.n	260be <net_ipv6_send_ns+0x272>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   26036:	4640      	mov	r0, r8
   26038:	f7fc fad6 	bl	225e8 <net_pkt_ref>
   2603c:	6030      	str	r0, [r6, #0]
		net_ipv6_nbr_data(nbr)->send_ns = k_uptime_get();
   2603e:	68ee      	ldr	r6, [r5, #12]
   26040:	f008 fcda 	bl	2e9f8 <_impl_k_uptime_get>
   26044:	e9c6 010a 	strd	r0, r1, [r6, #40]	; 0x28
		if (!k_delayed_work_remaining_get(&ipv6_ns_reply_timer)) {
   26048:	483c      	ldr	r0, [pc, #240]	; (2613c <net_ipv6_send_ns+0x2f0>)
   2604a:	f7ff f9c9 	bl	253e0 <k_delayed_work_remaining_get>
   2604e:	b920      	cbnz	r0, 2605a <net_ipv6_send_ns+0x20e>
			k_delayed_work_submit(&ipv6_ns_reply_timer,
   26050:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   26054:	4839      	ldr	r0, [pc, #228]	; (2613c <net_ipv6_send_ns+0x2f0>)
   26056:	f7ff f9d1 	bl	253fc <k_delayed_work_submit>
	if (net_send_data(pkt) < 0) {
   2605a:	4620      	mov	r0, r4
   2605c:	f7fa fbd6 	bl	2080c <net_send_data>
   26060:	2800      	cmp	r0, #0
   26062:	da67      	bge.n	26134 <net_ipv6_send_ns+0x2e8>
		if (pending) {
   26064:	f1b8 0f00 	cmp.w	r8, #0
   26068:	d02c      	beq.n	260c4 <net_ipv6_send_ns+0x278>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   2606a:	68e8      	ldr	r0, [r5, #12]
   2606c:	f7ff f985 	bl	2537a <nbr_clear_ns_pending>
   26070:	e028      	b.n	260c4 <net_ipv6_send_ns+0x278>
		if (src) {
   26072:	b36d      	cbz	r5, 260d0 <net_ipv6_send_ns+0x284>
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   26074:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
   26078:	f105 0a10 	add.w	sl, r5, #16
   2607c:	4662      	mov	r2, ip
   2607e:	6828      	ldr	r0, [r5, #0]
   26080:	6869      	ldr	r1, [r5, #4]
   26082:	46e6      	mov	lr, ip
   26084:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   26088:	3508      	adds	r5, #8
   2608a:	4555      	cmp	r5, sl
   2608c:	46f4      	mov	ip, lr
   2608e:	d1f6      	bne.n	2607e <net_ipv6_send_ns+0x232>
   26090:	4615      	mov	r5, r2
   26092:	f10b 0308 	add.w	r3, fp, #8
   26096:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   2609a:	462a      	mov	r2, r5
   2609c:	ca03      	ldmia	r2!, {r0, r1}
   2609e:	4562      	cmp	r2, ip
   260a0:	6018      	str	r0, [r3, #0]
   260a2:	6059      	str	r1, [r3, #4]
   260a4:	4615      	mov	r5, r2
   260a6:	f103 0308 	add.w	r3, r3, #8
   260aa:	d1f6      	bne.n	2609a <net_ipv6_send_ns+0x24e>
   260ac:	6963      	ldr	r3, [r4, #20]
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   260ae:	6898      	ldr	r0, [r3, #8]
   260b0:	3008      	adds	r0, #8
   260b2:	f7ff f930 	bl	25316 <net_is_ipv6_addr_unspecified>
   260b6:	b358      	cbz	r0, 26110 <net_ipv6_send_ns+0x2c4>
			if (pending) {
   260b8:	f1b8 0f00 	cmp.w	r8, #0
   260bc:	d002      	beq.n	260c4 <net_ipv6_send_ns+0x278>
				net_pkt_unref(pending);
   260be:	4640      	mov	r0, r8
   260c0:	f7fc fa9d 	bl	225fe <net_pkt_unref>
	net_pkt_unref(pkt);
   260c4:	4620      	mov	r0, r4
   260c6:	f7fc fa9a 	bl	225fe <net_pkt_unref>
	return -EINVAL;
   260ca:	f06f 0b15 	mvn.w	fp, #21
   260ce:	e747      	b.n	25f60 <net_ipv6_send_ns+0x114>
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   260d0:	f10b 0118 	add.w	r1, fp, #24
   260d4:	6a20      	ldr	r0, [r4, #32]
   260d6:	f7fb fdb1 	bl	21c3c <net_if_ipv6_select_src_addr>
   260da:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   260de:	4602      	mov	r2, r0
   260e0:	f100 0310 	add.w	r3, r0, #16
   260e4:	4665      	mov	r5, ip
   260e6:	6810      	ldr	r0, [r2, #0]
   260e8:	6851      	ldr	r1, [r2, #4]
   260ea:	46e6      	mov	lr, ip
   260ec:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   260f0:	3208      	adds	r2, #8
   260f2:	429a      	cmp	r2, r3
   260f4:	46f4      	mov	ip, lr
   260f6:	d1f6      	bne.n	260e6 <net_ipv6_send_ns+0x29a>
   260f8:	f10b 0308 	add.w	r3, fp, #8
   260fc:	462a      	mov	r2, r5
   260fe:	ca03      	ldmia	r2!, {r0, r1}
   26100:	4552      	cmp	r2, sl
   26102:	6018      	str	r0, [r3, #0]
   26104:	6059      	str	r1, [r3, #4]
   26106:	4615      	mov	r5, r2
   26108:	f103 0308 	add.w	r3, r3, #8
   2610c:	d1f6      	bne.n	260fc <net_ipv6_send_ns+0x2b0>
   2610e:	e7cd      	b.n	260ac <net_ipv6_send_ns+0x260>
		net_buf_add(frag, llao_len);
   26110:	4649      	mov	r1, r9
   26112:	4638      	mov	r0, r7
   26114:	f7f9 f8fc 	bl	1f310 <net_buf_simple_add>
		set_llao(net_if_get_link_addr(net_pkt_iface(pkt)),
   26118:	6a23      	ldr	r3, [r4, #32]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   2611a:	4620      	mov	r0, r4
	return &iface->if_dev->link_addr;
   2611c:	681d      	ldr	r5, [r3, #0]
   2611e:	f7fc fd4e 	bl	22bbe <net_pkt_icmp_data>
   26122:	3510      	adds	r5, #16
		set_llao(net_if_get_link_addr(net_pkt_iface(pkt)),
   26124:	f100 0118 	add.w	r1, r0, #24
   26128:	2301      	movs	r3, #1
   2612a:	464a      	mov	r2, r9
   2612c:	4628      	mov	r0, r5
   2612e:	f7ff f9ef 	bl	25510 <set_llao>
   26132:	e765      	b.n	26000 <net_ipv6_send_ns+0x1b4>
	return 0;
   26134:	f04f 0b00 	mov.w	fp, #0
   26138:	e712      	b.n	25f60 <net_ipv6_send_ns+0x114>
   2613a:	bf00      	nop
   2613c:	2000282c 	.word	0x2000282c

00026140 <net_ipv6_nbr_add>:
{
   26140:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   26144:	4606      	mov	r6, r0
   26146:	460f      	mov	r7, r1
   26148:	4615      	mov	r5, r2
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   2614a:	f7ff fa25 	bl	25598 <nbr_lookup.isra.21>
	if (!nbr) {
   2614e:	4604      	mov	r4, r0
   26150:	bb98      	cbnz	r0, 261ba <net_ipv6_nbr_add+0x7a>
		nbr = nbr_new(iface, addr, is_router, state);
   26152:	f89d 2020 	ldrb.w	r2, [sp, #32]
   26156:	4639      	mov	r1, r7
   26158:	4630      	mov	r0, r6
   2615a:	f7ff fb5b 	bl	25814 <nbr_new.isra.22>
		if (!nbr) {
   2615e:	4604      	mov	r4, r0
   26160:	bb58      	cbnz	r0, 261ba <net_ipv6_nbr_add+0x7a>
			NET_ERR("Could not add router neighbor %s [%s]",
   26162:	4b33      	ldr	r3, [pc, #204]	; (26230 <net_ipv6_nbr_add+0xf0>)
   26164:	681b      	ldr	r3, [r3, #0]
   26166:	075b      	lsls	r3, r3, #29
   26168:	d023      	beq.n	261b2 <net_ipv6_nbr_add+0x72>
   2616a:	2301      	movs	r3, #1
   2616c:	f04f 0600 	mov.w	r6, #0
   26170:	4a30      	ldr	r2, [pc, #192]	; (26234 <net_ipv6_nbr_add+0xf4>)
   26172:	f363 0602 	bfi	r6, r3, #0, #3
   26176:	4b30      	ldr	r3, [pc, #192]	; (26238 <net_ipv6_nbr_add+0xf8>)
   26178:	1a9b      	subs	r3, r3, r2
   2617a:	08db      	lsrs	r3, r3, #3
   2617c:	4639      	mov	r1, r7
   2617e:	f360 06c5 	bfi	r6, r0, #3, #3
   26182:	200a      	movs	r0, #10
   26184:	f363 168f 	bfi	r6, r3, #6, #10
   26188:	f7fc ffde 	bl	23148 <net_sprint_addr>
   2618c:	f7dc f940 	bl	2410 <log_strdup>
   26190:	2318      	movs	r3, #24
   26192:	4a2a      	ldr	r2, [pc, #168]	; (2623c <net_ipv6_nbr_add+0xfc>)
   26194:	7929      	ldrb	r1, [r5, #4]
   26196:	4607      	mov	r7, r0
   26198:	6828      	ldr	r0, [r5, #0]
   2619a:	f7fc fed2 	bl	22f42 <net_sprint_ll_addr_buf>
   2619e:	f7dc f937 	bl	2410 <log_strdup>
   261a2:	f8ad 6000 	strh.w	r6, [sp]
   261a6:	4603      	mov	r3, r0
   261a8:	463a      	mov	r2, r7
   261aa:	4925      	ldr	r1, [pc, #148]	; (26240 <net_ipv6_nbr_add+0x100>)
   261ac:	4825      	ldr	r0, [pc, #148]	; (26244 <net_ipv6_nbr_add+0x104>)
   261ae:	f7db ffc9 	bl	2144 <log_3>
}
   261b2:	4620      	mov	r0, r4
   261b4:	b002      	add	sp, #8
   261b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   261ba:	462a      	mov	r2, r5
   261bc:	4631      	mov	r1, r6
   261be:	4620      	mov	r0, r4
   261c0:	f7fe fd4c 	bl	24c5c <net_nbr_link>
   261c4:	3045      	adds	r0, #69	; 0x45
   261c6:	d11a      	bne.n	261fe <net_ipv6_nbr_add+0xbe>
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   261c8:	68e3      	ldr	r3, [r4, #12]
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   261ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   261ce:	2b05      	cmp	r3, #5
   261d0:	d026      	beq.n	26220 <net_ipv6_nbr_add+0xe0>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   261d2:	7860      	ldrb	r0, [r4, #1]
   261d4:	f7fe fdfe 	bl	24dd4 <net_nbr_get_lladdr>
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   261d8:	792a      	ldrb	r2, [r5, #4]
   261da:	6829      	ldr	r1, [r5, #0]
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   261dc:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   261de:	3002      	adds	r0, #2
   261e0:	f7e0 fd2b 	bl	6c3a <memcmp>
   261e4:	b1b8      	cbz	r0, 26216 <net_ipv6_nbr_add+0xd6>
			dbg_update_neighbor_lladdr(lladdr, cached_lladdr, addr);
   261e6:	4640      	mov	r0, r8
   261e8:	f7ff fb54 	bl	25894 <dbg_update_neighbor_lladdr.isra.23>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   261ec:	792a      	ldrb	r2, [r5, #4]
   261ee:	6829      	ldr	r1, [r5, #0]
   261f0:	4640      	mov	r0, r8
   261f2:	f7ff f8e4 	bl	253be <net_linkaddr_set>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   261f6:	2102      	movs	r1, #2
   261f8:	4620      	mov	r0, r4
   261fa:	f7ff f89d 	bl	25338 <ipv6_nbr_set_state>
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   261fe:	68e3      	ldr	r3, [r4, #12]
   26200:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   26204:	b963      	cbnz	r3, 26220 <net_ipv6_nbr_add+0xe0>
		ret = net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   26206:	e9cd 7300 	strd	r7, r3, [sp]
   2620a:	461a      	mov	r2, r3
   2620c:	4619      	mov	r1, r3
   2620e:	4630      	mov	r0, r6
   26210:	f7ff fe1c 	bl	25e4c <net_ipv6_send_ns>
   26214:	e004      	b.n	26220 <net_ipv6_nbr_add+0xe0>
		} else if (net_ipv6_nbr_data(nbr)->state ==
   26216:	68e3      	ldr	r3, [r4, #12]
   26218:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   2621c:	2b00      	cmp	r3, #0
   2621e:	d0ea      	beq.n	261f6 <net_ipv6_nbr_add+0xb6>
   26220:	2300      	movs	r3, #0
   26222:	461a      	mov	r2, r3
   26224:	4631      	mov	r1, r6
   26226:	4808      	ldr	r0, [pc, #32]	; (26248 <net_ipv6_nbr_add+0x108>)
   26228:	f001 fa3a 	bl	276a0 <net_mgmt_event_notify_with_info>
   2622c:	e7c1      	b.n	261b2 <net_ipv6_nbr_add+0x72>
   2622e:	bf00      	nop
   26230:	2000e28c 	.word	0x2000e28c
   26234:	0002ef38 	.word	0x0002ef38
   26238:	0002f058 	.word	0x0002f058
   2623c:	200027f2 	.word	0x200027f2
   26240:	0003503b 	.word	0x0003503b
   26244:	000352b0 	.word	0x000352b0
   26248:	f060000f 	.word	0xf060000f

0002624c <handle_ra_input>:
	return frag;
}
#endif

static enum net_verdict handle_ra_input(struct net_pkt *pkt)
{
   2624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u16_t total_len = net_pkt_get_len(pkt);
   26250:	6941      	ldr	r1, [r0, #20]
{
   26252:	b09b      	sub	sp, #108	; 0x6c
   26254:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   26256:	4608      	mov	r0, r1
   26258:	f7ff f855 	bl	25306 <net_buf_frags_len>
		      &NET_IPV6_HDR(pkt)->src,
		      &NET_IPV6_HDR(pkt)->dst);

	net_stats_update_ipv6_nd_recv(net_pkt_iface(pkt));

	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   2625c:	b280      	uxth	r0, r0
   2625e:	2839      	cmp	r0, #57	; 0x39
   26260:	d908      	bls.n	26274 <handle_ra_input+0x28>
	return pkt->frags->data;
   26262:	688b      	ldr	r3, [r1, #8]
			  sizeof(struct net_icmp_hdr) +
			  sizeof(struct net_icmpv6_ra_hdr) +
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   26264:	79da      	ldrb	r2, [r3, #7]
   26266:	2aff      	cmp	r2, #255	; 0xff
   26268:	d104      	bne.n	26274 <handle_ra_input+0x28>
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   2626a:	891a      	ldrh	r2, [r3, #8]
   2626c:	f248 03fe 	movw	r3, #33022	; 0x80fe
   26270:	429a      	cmp	r2, r3
   26272:	d00c      	beq.n	2628e <handle_ra_input+0x42>
	    !net_is_ipv6_ll_addr(&NET_IPV6_HDR(pkt)->src)) {
		struct net_icmp_hdr icmp_hdr;

		ret = net_icmpv6_get_hdr(pkt, &icmp_hdr);
   26274:	a912      	add	r1, sp, #72	; 0x48
   26276:	4620      	mov	r0, r4
   26278:	f7fd ffb4 	bl	241e4 <net_icmpv6_get_hdr>
		if (ret < 0 || icmp_hdr.code != 0) {
   2627c:	2800      	cmp	r0, #0
   2627e:	db02      	blt.n	26286 <handle_ra_input+0x3a>
   26280:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   26284:	b11b      	cbz	r3, 2628e <handle_ra_input+0x42>
	return NET_OK;

drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));

	return NET_DROP;
   26286:	2002      	movs	r0, #2
}
   26288:	b01b      	add	sp, #108	; 0x6c
   2628a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   2628e:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   26292:	ad1a      	add	r5, sp, #104	; 0x68
   26294:	312c      	adds	r1, #44	; 0x2c
   26296:	b289      	uxth	r1, r1
   26298:	f825 1d4a 	strh.w	r1, [r5, #-74]!
	return net_frag_read(frag, offset, pos, 1, value);
   2629c:	f10d 0319 	add.w	r3, sp, #25
   262a0:	9300      	str	r3, [sp, #0]
   262a2:	462a      	mov	r2, r5
   262a4:	2301      	movs	r3, #1
   262a6:	6960      	ldr	r0, [r4, #20]
   262a8:	f7fc fb42 	bl	22930 <net_frag_read>
	return net_frag_read(frag, offset, pos, len, NULL);
   262ac:	2300      	movs	r3, #0
   262ae:	9300      	str	r3, [sp, #0]
   262b0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   262b4:	2301      	movs	r3, #1
   262b6:	462a      	mov	r2, r5
   262b8:	f7fc fb3a 	bl	22930 <net_frag_read>
	if (!frag) {
   262bc:	2800      	cmp	r0, #0
   262be:	d0e2      	beq.n	26286 <handle_ra_input+0x3a>
	if (hop_limit) {
   262c0:	f89d 2019 	ldrb.w	r2, [sp, #25]
   262c4:	b122      	cbz	r2, 262d0 <handle_ra_input+0x84>
		net_ipv6_set_hop_limit(net_pkt_iface(pkt), hop_limit);
   262c6:	6a23      	ldr	r3, [r4, #32]
   262c8:	685b      	ldr	r3, [r3, #4]
	if (!iface->config.ip.ipv6) {
   262ca:	b10b      	cbz	r3, 262d0 <handle_ra_input+0x84>
	iface->config.ip.ipv6->hop_limit = hop_limit;
   262cc:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   262d0:	ab07      	add	r3, sp, #28
   262d2:	462a      	mov	r2, r5
   262d4:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   262d8:	f7fc fb84 	bl	229e4 <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   262dc:	ab08      	add	r3, sp, #32
   262de:	462a      	mov	r2, r5
   262e0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   262e4:	f7fc fb8e 	bl	22a04 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   262e8:	ab09      	add	r3, sp, #36	; 0x24
   262ea:	462a      	mov	r2, r5
   262ec:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   262f0:	f7fc fb88 	bl	22a04 <net_frag_read_be32>
	if (!frag) {
   262f4:	4606      	mov	r6, r0
   262f6:	2800      	cmp	r0, #0
   262f8:	d0c5      	beq.n	26286 <handle_ra_input+0x3a>
	ret = net_icmpv6_get_ra_hdr(pkt, &ra_hdr);
   262fa:	a90b      	add	r1, sp, #44	; 0x2c
   262fc:	4620      	mov	r0, r4
   262fe:	f7fe f9f7 	bl	246f0 <net_icmpv6_get_ra_hdr>
	if (ret < 0) {
   26302:	2800      	cmp	r0, #0
   26304:	da15      	bge.n	26332 <handle_ra_input+0xe6>
		NET_ERR("could not get ra_hdr");
   26306:	4b87      	ldr	r3, [pc, #540]	; (26524 <handle_ra_input+0x2d8>)
   26308:	681b      	ldr	r3, [r3, #0]
   2630a:	075d      	lsls	r5, r3, #29
   2630c:	d0bb      	beq.n	26286 <handle_ra_input+0x3a>
   2630e:	2301      	movs	r3, #1
   26310:	f04f 0200 	mov.w	r2, #0
   26314:	f363 0202 	bfi	r2, r3, #0, #3
   26318:	4983      	ldr	r1, [pc, #524]	; (26528 <handle_ra_input+0x2dc>)
   2631a:	4b84      	ldr	r3, [pc, #528]	; (2652c <handle_ra_input+0x2e0>)
   2631c:	4884      	ldr	r0, [pc, #528]	; (26530 <handle_ra_input+0x2e4>)
   2631e:	1a5b      	subs	r3, r3, r1
   26320:	08db      	lsrs	r3, r3, #3
   26322:	f36f 02c5 	bfc	r2, #3, #3
   26326:	f363 128f 	bfi	r2, r3, #6, #10
   2632a:	4982      	ldr	r1, [pc, #520]	; (26534 <handle_ra_input+0x2e8>)
   2632c:	f7db fede 	bl	20ec <log_1>
   26330:	e7a9      	b.n	26286 <handle_ra_input+0x3a>
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   26332:	9b08      	ldr	r3, [sp, #32]
   26334:	4a80      	ldr	r2, [pc, #512]	; (26538 <handle_ra_input+0x2ec>)
   26336:	1e59      	subs	r1, r3, #1
   26338:	4291      	cmp	r1, r2
   2633a:	d810      	bhi.n	2635e <handle_ra_input+0x112>
	    (net_if_ipv6_get_reachable_time(net_pkt_iface(pkt)) !=
   2633c:	6a22      	ldr	r2, [r4, #32]
   2633e:	6857      	ldr	r7, [r2, #4]
	if (!iface->config.ip.ipv6) {
   26340:	2f00      	cmp	r7, #0
   26342:	d07f      	beq.n	26444 <handle_ra_input+0x1f8>
	return iface->config.ip.ipv6->reachable_time;
   26344:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   26348:	990c      	ldr	r1, [sp, #48]	; 0x30
   2634a:	4291      	cmp	r1, r2
   2634c:	d007      	beq.n	2635e <handle_ra_input+0x112>
	if (!iface->config.ip.ipv6) {
   2634e:	b10f      	cbz	r7, 26354 <handle_ra_input+0x108>
	iface->config.ip.ipv6->base_reachable_time = reachable_time;
   26350:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
   26354:	4638      	mov	r0, r7
   26356:	f7fb fcd1 	bl	21cfc <net_if_ipv6_calc_reachable_time>
   2635a:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
	if (retrans_timer) {
   2635e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26360:	b122      	cbz	r2, 2636c <handle_ra_input+0x120>
		net_if_ipv6_set_retrans_timer(net_pkt_iface(pkt),
   26362:	6a23      	ldr	r3, [r4, #32]
   26364:	685b      	ldr	r3, [r3, #4]
	if (!iface->config.ip.ipv6) {
   26366:	b10b      	cbz	r3, 2636c <handle_ra_input+0x120>
	iface->config.ip.ipv6->retrans_timer = retrans_timer;
   26368:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   2636c:	4b6f      	ldr	r3, [pc, #444]	; (2652c <handle_ra_input+0x2e0>)
			NET_ERR("Prefix %s/%d could not be added to iface %p",
   2636e:	4a6e      	ldr	r2, [pc, #440]	; (26528 <handle_ra_input+0x2dc>)
   26370:	1a9b      	subs	r3, r3, r2
   26372:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
   26376:	f04f 0800 	mov.w	r8, #0
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   2637a:	f10d 031b 	add.w	r3, sp, #27
   2637e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   26382:	9300      	str	r3, [sp, #0]
   26384:	462a      	mov	r2, r5
   26386:	2301      	movs	r3, #1
   26388:	4630      	mov	r0, r6
   2638a:	f7fc fad1 	bl	22930 <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   2638e:	f10d 031a 	add.w	r3, sp, #26
   26392:	9300      	str	r3, [sp, #0]
   26394:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   26398:	2301      	movs	r3, #1
   2639a:	462a      	mov	r2, r5
   2639c:	f7fc fac8 	bl	22930 <net_frag_read>
		if (!frag) {
   263a0:	2800      	cmp	r0, #0
   263a2:	f43f af70 	beq.w	26286 <handle_ra_input+0x3a>
		switch (type) {
   263a6:	f89d 201b 	ldrb.w	r2, [sp, #27]
   263aa:	f8bd b01e 	ldrh.w	fp, [sp, #30]
   263ae:	2a03      	cmp	r2, #3
   263b0:	f000 80c6 	beq.w	26540 <handle_ra_input+0x2f4>
   263b4:	2a05      	cmp	r2, #5
   263b6:	d047      	beq.n	26448 <handle_ra_input+0x1fc>
   263b8:	2a01      	cmp	r2, #1
   263ba:	f89d 701a 	ldrb.w	r7, [sp, #26]
   263be:	f040 820c 	bne.w	267da <handle_ra_input+0x58e>
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   263c2:	2306      	movs	r3, #6
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   263c4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   263c8:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	if (net_pkt_lladdr_src(pkt)->len < lladdr.len) {
   263cc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   263d0:	2b05      	cmp	r3, #5
	lladdr.addr = llstorage.addr;
   263d2:	f10d 024a 	add.w	r2, sp, #74	; 0x4a
		lladdr.len = net_pkt_lladdr_src(pkt)->len;
   263d6:	bf98      	it	ls
   263d8:	f88d 303c 	strbls.w	r3, [sp, #60]	; 0x3c
	lladdr.addr = llstorage.addr;
   263dc:	920e      	str	r2, [sp, #56]	; 0x38
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   263de:	9200      	str	r2, [sp, #0]
   263e0:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   263e4:	462a      	mov	r2, r5
   263e6:	4659      	mov	r1, fp
   263e8:	f7fc faa2 	bl	22930 <net_frag_read>
	if (!frag && offset) {
   263ec:	4606      	mov	r6, r0
   263ee:	b910      	cbnz	r0, 263f6 <handle_ra_input+0x1aa>
   263f0:	f1bb 0f00 	cmp.w	fp, #0
   263f4:	d121      	bne.n	2643a <handle_ra_input+0x1ee>
	padding = len * 8 - 2 - lladdr.len;
   263f6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   263fa:	ebc3 03c7 	rsb	r3, r3, r7, lsl #3
   263fe:	3b02      	subs	r3, #2
	if (padding) {
   26400:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   26404:	d00c      	beq.n	26420 <handle_ra_input+0x1d4>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   26406:	2200      	movs	r2, #0
   26408:	9200      	str	r2, [sp, #0]
   2640a:	4630      	mov	r0, r6
   2640c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   26410:	462a      	mov	r2, r5
   26412:	f7fc fa8d 	bl	22930 <net_frag_read>
		if (!frag && *pos) {
   26416:	4606      	mov	r6, r0
   26418:	b910      	cbnz	r0, 26420 <handle_ra_input+0x1d4>
   2641a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   2641e:	b963      	cbnz	r3, 2643a <handle_ra_input+0x1ee>
	return pkt->frags->data;
   26420:	6963      	ldr	r3, [r4, #20]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   26422:	6899      	ldr	r1, [r3, #8]
   26424:	2302      	movs	r3, #2
   26426:	9300      	str	r3, [sp, #0]
   26428:	aa0e      	add	r2, sp, #56	; 0x38
   2642a:	2301      	movs	r3, #1
   2642c:	3108      	adds	r1, #8
   2642e:	6a20      	ldr	r0, [r4, #32]
   26430:	f7ff fe86 	bl	26140 <net_ipv6_nbr_add>
   26434:	4680      	mov	r8, r0
			if (!frag && offset) {
   26436:	2e00      	cmp	r6, #0
   26438:	d19f      	bne.n	2637a <handle_ra_input+0x12e>
   2643a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   2643e:	2b00      	cmp	r3, #0
   26440:	d03f      	beq.n	264c2 <handle_ra_input+0x276>
drop:
   26442:	e720      	b.n	26286 <handle_ra_input+0x3a>
		return 0;
   26444:	463a      	mov	r2, r7
   26446:	e77f      	b.n	26348 <handle_ra_input+0xfc>
	return net_frag_read(frag, offset, pos, len, NULL);
   26448:	2300      	movs	r3, #0
   2644a:	9300      	str	r3, [sp, #0]
   2644c:	462a      	mov	r2, r5
   2644e:	2302      	movs	r3, #2
   26450:	4659      	mov	r1, fp
   26452:	f7fc fa6d 	bl	22930 <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   26456:	ab0a      	add	r3, sp, #40	; 0x28
   26458:	462a      	mov	r2, r5
   2645a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   2645e:	f7fc fad1 	bl	22a04 <net_frag_read_be32>
			if (!frag && offset) {
   26462:	4606      	mov	r6, r0
   26464:	b920      	cbnz	r0, 26470 <handle_ra_input+0x224>
   26466:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   2646a:	2b00      	cmp	r3, #0
   2646c:	f47f af0b 	bne.w	26286 <handle_ra_input+0x3a>
			if (mtu < MIN_IPV6_MTU || mtu > MAX_IPV6_MTU) {
   26470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   26472:	f5a2 63a0 	sub.w	r3, r2, #1280	; 0x500
   26476:	f5b3 4f7b 	cmp.w	r3, #64256	; 0xfb00
   2647a:	d31c      	bcc.n	264b6 <handle_ra_input+0x26a>
				NET_ERR("Unsupported MTU %u, min is %u, "
   2647c:	4b29      	ldr	r3, [pc, #164]	; (26524 <handle_ra_input+0x2d8>)
   2647e:	681b      	ldr	r3, [r3, #0]
   26480:	075c      	lsls	r4, r3, #29
   26482:	f43f af00 	beq.w	26286 <handle_ra_input+0x3a>
   26486:	2101      	movs	r1, #1
   26488:	f04f 0300 	mov.w	r3, #0
   2648c:	f361 0302 	bfi	r3, r1, #0, #3
   26490:	4928      	ldr	r1, [pc, #160]	; (26534 <handle_ra_input+0x2e8>)
   26492:	f44f 60a0 	mov.w	r0, #1280	; 0x500
   26496:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
   2649a:	f36f 03c5 	bfc	r3, #3, #3
   2649e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   264a2:	e9cd 0214 	strd	r0, r2, [sp, #80]	; 0x50
   264a6:	f36a 138f 	bfi	r3, sl, #6, #10
   264aa:	2204      	movs	r2, #4
   264ac:	a912      	add	r1, sp, #72	; 0x48
   264ae:	4823      	ldr	r0, [pc, #140]	; (2653c <handle_ra_input+0x2f0>)
   264b0:	f7db fe63 	bl	217a <log_n>
   264b4:	e6e7      	b.n	26286 <handle_ra_input+0x3a>
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   264b6:	6a23      	ldr	r3, [r4, #32]
	iface->if_dev->mtu = mtu;
   264b8:	681b      	ldr	r3, [r3, #0]
   264ba:	831a      	strh	r2, [r3, #24]
	while (frag) {
   264bc:	2e00      	cmp	r6, #0
   264be:	f47f af5c 	bne.w	2637a <handle_ra_input+0x12e>
	return pkt->frags->data;
   264c2:	6963      	ldr	r3, [r4, #20]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   264c4:	6a20      	ldr	r0, [r4, #32]
   264c6:	6899      	ldr	r1, [r3, #8]
   264c8:	3108      	adds	r1, #8
   264ca:	f7fb fae3 	bl	21a94 <net_if_ipv6_router_lookup>
   264ce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
	if (router) {
   264d2:	4603      	mov	r3, r0
   264d4:	2800      	cmp	r0, #0
   264d6:	f000 8198 	beq.w	2680a <handle_ra_input+0x5be>
		if (!router_lifetime) {
   264da:	2a00      	cmp	r2, #0
   264dc:	f040 8188 	bne.w	267f0 <handle_ra_input+0x5a4>
			net_if_ipv6_router_rm(router);
   264e0:	f7fb fb6a 	bl	21bb8 <net_if_ipv6_router_rm>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   264e4:	f1b8 0f00 	cmp.w	r8, #0
   264e8:	d010      	beq.n	2650c <handle_ra_input+0x2c0>
   264ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
   264ee:	6818      	ldr	r0, [r3, #0]
   264f0:	b160      	cbz	r0, 2650c <handle_ra_input+0x2c0>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   264f2:	f7fa f98b 	bl	2080c <net_send_data>
   264f6:	2800      	cmp	r0, #0
   264f8:	da04      	bge.n	26504 <handle_ra_input+0x2b8>
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   264fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   264fe:	6818      	ldr	r0, [r3, #0]
   26500:	f7fc f87d 	bl	225fe <net_pkt_unref>
		nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   26504:	f8d8 000c 	ldr.w	r0, [r8, #12]
   26508:	f7fe ff37 	bl	2537a <nbr_clear_ns_pending>
	k_delayed_work_cancel(&net_pkt_iface(pkt)->config.ip.ipv6->rs_timer);
   2650c:	6a23      	ldr	r3, [r4, #32]
   2650e:	6858      	ldr	r0, [r3, #4]
   26510:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
   26514:	f008 f8ab 	bl	2e66e <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   26518:	4620      	mov	r0, r4
   2651a:	f7fc f870 	bl	225fe <net_pkt_unref>
	return NET_OK;
   2651e:	2000      	movs	r0, #0
   26520:	e6b2      	b.n	26288 <handle_ra_input+0x3c>
   26522:	bf00      	nop
   26524:	2000e28c 	.word	0x2000e28c
   26528:	0002ef38 	.word	0x0002ef38
   2652c:	0002f058 	.word	0x0002f058
   26530:	000351fc 	.word	0x000351fc
   26534:	000350ee 	.word	0x000350ee
   26538:	0036ee7f 	.word	0x0036ee7f
   2653c:	00035215 	.word	0x00035215
			frag = handle_ra_prefix(pkt, frag, length, offset,
   26540:	f89d 301a 	ldrb.w	r3, [sp, #26]
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   26544:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	prefix_info.len = len * 8 - 2;
   26548:	00db      	lsls	r3, r3, #3
   2654a:	3b02      	subs	r3, #2
   2654c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   26550:	f10d 034a 	add.w	r3, sp, #74	; 0x4a
   26554:	9300      	str	r3, [sp, #0]
   26556:	462a      	mov	r2, r5
   26558:	2301      	movs	r3, #1
   2655a:	4659      	mov	r1, fp
   2655c:	f7fc f9e8 	bl	22930 <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   26560:	f10d 034b 	add.w	r3, sp, #75	; 0x4b
   26564:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   26568:	9300      	str	r3, [sp, #0]
   2656a:	462a      	mov	r2, r5
   2656c:	2301      	movs	r3, #1
   2656e:	f7fc f9df 	bl	22930 <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   26572:	ab13      	add	r3, sp, #76	; 0x4c
   26574:	462a      	mov	r2, r5
   26576:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   2657a:	f7fc fa43 	bl	22a04 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   2657e:	ab14      	add	r3, sp, #80	; 0x50
   26580:	462a      	mov	r2, r5
   26582:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   26586:	f7fc fa3d 	bl	22a04 <net_frag_read_be32>
	return net_frag_read(frag, offset, pos, len, NULL);
   2658a:	2300      	movs	r3, #0
   2658c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   26590:	9300      	str	r3, [sp, #0]
   26592:	462a      	mov	r2, r5
   26594:	2304      	movs	r3, #4
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   26596:	af16      	add	r7, sp, #88	; 0x58
   26598:	f7fc f9ca 	bl	22930 <net_frag_read>
   2659c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   265a0:	9700      	str	r7, [sp, #0]
   265a2:	2310      	movs	r3, #16
   265a4:	462a      	mov	r2, r5
   265a6:	f7fc f9c3 	bl	22930 <net_frag_read>
	if (!frag && *pos) {
   265aa:	4606      	mov	r6, r0
   265ac:	b920      	cbnz	r0, 265b8 <handle_ra_input+0x36c>
   265ae:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   265b2:	2b00      	cmp	r3, #0
   265b4:	f47f af41 	bne.w	2643a <handle_ra_input+0x1ee>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   265b8:	e9dd 2313 	ldrd	r2, r3, [sp, #76]	; 0x4c
   265bc:	429a      	cmp	r2, r3
   265be:	f4ff af3a 	bcc.w	26436 <handle_ra_input+0x1ea>
   265c2:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   265c6:	f248 03fe 	movw	r3, #33022	; 0x80fe
   265ca:	429a      	cmp	r2, r3
   265cc:	f43f af33 	beq.w	26436 <handle_ra_input+0x1ea>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   265d0:	f99d 304b 	ldrsb.w	r3, [sp, #75]	; 0x4b
   265d4:	2b00      	cmp	r3, #0
   265d6:	da30      	bge.n	2663a <handle_ra_input+0x3ee>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   265d8:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   265dc:	6a20      	ldr	r0, [r4, #32]
   265de:	4639      	mov	r1, r7
   265e0:	f7fb f95c 	bl	2189c <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   265e4:	2800      	cmp	r0, #0
   265e6:	d17e      	bne.n	266e6 <handle_ra_input+0x49a>
		if (!prefix_info->valid_lifetime) {
   265e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   265ea:	b333      	cbz	r3, 2663a <handle_ra_input+0x3ee>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   265ec:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   265f0:	6a20      	ldr	r0, [r4, #32]
   265f2:	4639      	mov	r1, r7
   265f4:	f7fb f894 	bl	21720 <net_if_ipv6_prefix_add>
		if (prefix) {
   265f8:	2800      	cmp	r0, #0
   265fa:	d174      	bne.n	266e6 <handle_ra_input+0x49a>
			NET_ERR("Prefix %s/%d could not be added to iface %p",
   265fc:	4b86      	ldr	r3, [pc, #536]	; (26818 <handle_ra_input+0x5cc>)
   265fe:	681b      	ldr	r3, [r3, #0]
   26600:	0759      	lsls	r1, r3, #29
   26602:	d01a      	beq.n	2663a <handle_ra_input+0x3ee>
   26604:	2301      	movs	r3, #1
   26606:	f363 0902 	bfi	r9, r3, #0, #3
   2660a:	4639      	mov	r1, r7
   2660c:	4b83      	ldr	r3, [pc, #524]	; (2681c <handle_ra_input+0x5d0>)
   2660e:	930e      	str	r3, [sp, #56]	; 0x38
   26610:	f360 09c5 	bfi	r9, r0, #3, #3
   26614:	200a      	movs	r0, #10
   26616:	f7fc fd97 	bl	23148 <net_sprint_addr>
   2661a:	f7db fef9 	bl	2410 <log_strdup>
   2661e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   26622:	9310      	str	r3, [sp, #64]	; 0x40
   26624:	f36a 198f 	bfi	r9, sl, #6, #10
   26628:	6a23      	ldr	r3, [r4, #32]
   2662a:	900f      	str	r0, [sp, #60]	; 0x3c
   2662c:	9311      	str	r3, [sp, #68]	; 0x44
   2662e:	2204      	movs	r2, #4
   26630:	464b      	mov	r3, r9
   26632:	a90e      	add	r1, sp, #56	; 0x38
   26634:	487a      	ldr	r0, [pc, #488]	; (26820 <handle_ra_input+0x5d4>)
   26636:	f7db fda0 	bl	217a <log_n>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   2663a:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
   2663e:	065b      	lsls	r3, r3, #25
   26640:	f57f aef9 	bpl.w	26436 <handle_ra_input+0x1ea>
   26644:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   26646:	2b00      	cmp	r3, #0
   26648:	f43f aef5 	beq.w	26436 <handle_ra_input+0x1ea>
		    prefix_info.valid_lifetime &&
   2664c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   26650:	2b40      	cmp	r3, #64	; 0x40
   26652:	f47f aef0 	bne.w	26436 <handle_ra_input+0x1ea>
	struct in6_addr addr = { };
   26656:	220e      	movs	r2, #14
   26658:	2100      	movs	r1, #0
   2665a:	f10d 003a 	add.w	r0, sp, #58	; 0x3a
   2665e:	f7e0 fb40 	bl	6ce2 <memset>
	net_ipv6_addr_create_iid(&addr,
   26662:	6a23      	ldr	r3, [r4, #32]
   26664:	f8d3 b000 	ldr.w	fp, [r3]
	addr->s6_addr[0] = 0xfe;
   26668:	f248 03fe 	movw	r3, #33022	; 0x80fe
   2666c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   26670:	2300      	movs	r3, #0
   26672:	930f      	str	r3, [sp, #60]	; 0x3c
	switch (lladdr->len) {
   26674:	f89b 2014 	ldrb.w	r2, [fp, #20]
   26678:	2a06      	cmp	r2, #6
   2667a:	d04e      	beq.n	2671a <handle_ra_input+0x4ce>
   2667c:	2a08      	cmp	r2, #8
   2667e:	d06b      	beq.n	26758 <handle_ra_input+0x50c>
   26680:	2a02      	cmp	r2, #2
   26682:	d114      	bne.n	266ae <handle_ra_input+0x462>
		if (lladdr->type == NET_LINK_IEEE802154) {
   26684:	f89b 2015 	ldrb.w	r2, [fp, #21]
   26688:	2a01      	cmp	r2, #1
   2668a:	d110      	bne.n	266ae <handle_ra_input+0x462>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   2668c:	9310      	str	r3, [sp, #64]	; 0x40
			addr->s6_addr[11] = 0xff;
   2668e:	22ff      	movs	r2, #255	; 0xff
   26690:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
			addr->s6_addr[13] = 0;
   26694:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
			addr->s6_addr[12] = 0xfe;
   26698:	22fe      	movs	r2, #254	; 0xfe
			addr->s6_addr[14] = lladdr->addr[0];
   2669a:	f8db 3010 	ldr.w	r3, [fp, #16]
			addr->s6_addr[12] = 0xfe;
   2669e:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
			addr->s6_addr[14] = lladdr->addr[0];
   266a2:	781a      	ldrb	r2, [r3, #0]
   266a4:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
			addr->s6_addr[15] = lladdr->addr[1];
   266a8:	785b      	ldrb	r3, [r3, #1]
   266aa:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   266ae:	4639      	mov	r1, r7
   266b0:	2208      	movs	r2, #8
   266b2:	a80e      	add	r0, sp, #56	; 0x38
   266b4:	f7e0 fae8 	bl	6c88 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   266b8:	2100      	movs	r1, #0
   266ba:	a80e      	add	r0, sp, #56	; 0x38
   266bc:	f7fa fb72 	bl	20da4 <net_if_ipv6_addr_lookup>
   266c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   266c2:	9303      	str	r3, [sp, #12]
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   266c4:	4607      	mov	r7, r0
   266c6:	2800      	cmp	r0, #0
   266c8:	d07c      	beq.n	267c4 <handle_ra_input+0x578>
   266ca:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   266ce:	2b01      	cmp	r3, #1
   266d0:	d178      	bne.n	267c4 <handle_ra_input+0x578>
		if (prefix_info->valid_lifetime ==
   266d2:	9b03      	ldr	r3, [sp, #12]
   266d4:	3301      	adds	r3, #1
   266d6:	d145      	bne.n	26764 <handle_ra_input+0x518>
	ifaddr->is_infinite = is_infinite;
   266d8:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
   266dc:	f043 0301 	orr.w	r3, r3, #1
   266e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   266e4:	e6a7      	b.n	26436 <handle_ra_input+0x1ea>
	switch (prefix_info->valid_lifetime) {
   266e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   266e8:	b151      	cbz	r1, 26700 <handle_ra_input+0x4b4>
   266ea:	1c4a      	adds	r2, r1, #1
   266ec:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   266f0:	d00e      	beq.n	26710 <handle_ra_input+0x4c4>
	prefix->is_infinite = is_infinite;
   266f2:	f36f 0300 	bfc	r3, #0, #1
   266f6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
		net_if_ipv6_prefix_set_timer(prefix,
   266fa:	f7fb f92d 	bl	21958 <net_if_ipv6_prefix_set_timer>
   266fe:	e79c      	b.n	2663a <handle_ra_input+0x3ee>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   26700:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   26704:	f100 0110 	add.w	r1, r0, #16
   26708:	6a20      	ldr	r0, [r4, #32]
   2670a:	f7fb f97d 	bl	21a08 <net_if_ipv6_prefix_rm>
   2670e:	e794      	b.n	2663a <handle_ra_input+0x3ee>
   26710:	f043 0301 	orr.w	r3, r3, #1
   26714:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
   26718:	e78f      	b.n	2663a <handle_ra_input+0x3ee>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   2671a:	2203      	movs	r2, #3
   2671c:	f8db 1010 	ldr.w	r1, [fp, #16]
   26720:	a810      	add	r0, sp, #64	; 0x40
   26722:	f7e0 fab1 	bl	6c88 <memcpy>
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   26726:	f8db 1010 	ldr.w	r1, [fp, #16]
		addr->s6_addr[11] = 0xff;
   2672a:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   2672c:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
   2672e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   26732:	4411      	add	r1, r2
		addr->s6_addr[12] = 0xfe;
   26734:	23fe      	movs	r3, #254	; 0xfe
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   26736:	f10d 0045 	add.w	r0, sp, #69	; 0x45
		addr->s6_addr[12] = 0xfe;
   2673a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   2673e:	f7e0 faa3 	bl	6c88 <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   26742:	f89b 3015 	ldrb.w	r3, [fp, #21]
   26746:	2b03      	cmp	r3, #3
   26748:	d1b1      	bne.n	266ae <handle_ra_input+0x462>
		addr->s6_addr[8] ^= 0x02;
   2674a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   2674e:	f083 0302 	eor.w	r3, r3, #2
   26752:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   26756:	e7aa      	b.n	266ae <handle_ra_input+0x462>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   26758:	f8db 1010 	ldr.w	r1, [fp, #16]
   2675c:	a810      	add	r0, sp, #64	; 0x40
   2675e:	f7e0 fa93 	bl	6c88 <memcpy>
   26762:	e7f2      	b.n	2674a <handle_ra_input+0x4fe>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   26764:	9b03      	ldr	r3, [sp, #12]
   26766:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
   2676a:	d908      	bls.n	2677e <handle_ra_input+0x532>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   2676c:	9913      	ldr	r1, [sp, #76]	; 0x4c
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   2676e:	4638      	mov	r0, r7
   26770:	f7fa fb8e 	bl	20e90 <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   26774:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   26778:	f36f 0300 	bfc	r3, #0, #1
   2677c:	e7b0      	b.n	266e0 <handle_ra_input+0x494>
	if (ifaddr->lifetime.timer_timeout == 0) {
   2677e:	69c0      	ldr	r0, [r0, #28]
   26780:	b1d0      	cbz	r0, 267b8 <handle_ra_input+0x56c>
	remaining = (u64_t)ifaddr->lifetime.timer_timeout +
   26782:	6a3b      	ldr	r3, [r7, #32]
   26784:	4a27      	ldr	r2, [pc, #156]	; (26824 <handle_ra_input+0x5d8>)
   26786:	17c1      	asrs	r1, r0, #31
   26788:	fbc2 0103 	smlal	r0, r1, r2, r3
   2678c:	e9cd 0104 	strd	r0, r1, [sp, #16]
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   26790:	f008 f91c 	bl	2e9cc <_impl_k_uptime_get_32>
	return (u32_t)abs((s32_t)time1 - (s32_t)time2);
   26794:	69bb      	ldr	r3, [r7, #24]
	return (u32_t)(remaining / K_MSEC(1000));
   26796:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
	return (u32_t)abs((s32_t)time1 - (s32_t)time2);
   2679a:	1ac0      	subs	r0, r0, r3
   2679c:	2800      	cmp	r0, #0
   2679e:	bfb8      	it	lt
   267a0:	4240      	neglt	r0, r0
	return (u32_t)(remaining / K_MSEC(1000));
   267a2:	ebbb 0b00 	subs.w	fp, fp, r0
   267a6:	f16c 0c00 	sbc.w	ip, ip, #0
   267aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   267ae:	2300      	movs	r3, #0
   267b0:	4658      	mov	r0, fp
   267b2:	4661      	mov	r1, ip
   267b4:	f7d9 fd7e 	bl	2b4 <__aeabi_uldivmod>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   267b8:	9b03      	ldr	r3, [sp, #12]
   267ba:	4298      	cmp	r0, r3
   267bc:	d3d6      	bcc.n	2676c <handle_ra_input+0x520>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   267be:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   267c2:	e7d4      	b.n	2676e <handle_ra_input+0x522>
		if (prefix_info->valid_lifetime ==
   267c4:	9b03      	ldr	r3, [sp, #12]
   267c6:	6a20      	ldr	r0, [r4, #32]
   267c8:	3301      	adds	r3, #1
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   267ca:	bf0c      	ite	eq
   267cc:	2300      	moveq	r3, #0
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   267ce:	9b03      	ldrne	r3, [sp, #12]
   267d0:	2201      	movs	r2, #1
   267d2:	a90e      	add	r1, sp, #56	; 0x38
   267d4:	f7fa fbaa 	bl	20f2c <net_if_ipv6_addr_add>
   267d8:	e62d      	b.n	26436 <handle_ra_input+0x1ea>
			frag = net_frag_skip(frag, offset, &offset,
   267da:	00fb      	lsls	r3, r7, #3
   267dc:	2200      	movs	r2, #0
   267de:	3b02      	subs	r3, #2
   267e0:	9200      	str	r2, [sp, #0]
   267e2:	b29b      	uxth	r3, r3
   267e4:	462a      	mov	r2, r5
   267e6:	4659      	mov	r1, fp
   267e8:	f7fc f8a2 	bl	22930 <net_frag_read>
			if (!frag && offset) {
   267ec:	4606      	mov	r6, r0
   267ee:	e622      	b.n	26436 <handle_ra_input+0x1ea>
			if (nbr) {
   267f0:	f1b8 0f00 	cmp.w	r8, #0
   267f4:	d004      	beq.n	26800 <handle_ra_input+0x5b4>
				net_ipv6_nbr_data(nbr)->is_router = true;
   267f6:	f8d8 100c 	ldr.w	r1, [r8, #12]
   267fa:	2001      	movs	r0, #1
   267fc:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
			net_if_ipv6_router_update_lifetime(router,
   26800:	4611      	mov	r1, r2
   26802:	4618      	mov	r0, r3
   26804:	f7fb f982 	bl	21b0c <net_if_ipv6_router_update_lifetime>
   26808:	e66c      	b.n	264e4 <handle_ra_input+0x298>
	return pkt->frags->data;
   2680a:	6963      	ldr	r3, [r4, #20]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   2680c:	6a20      	ldr	r0, [r4, #32]
   2680e:	6899      	ldr	r1, [r3, #8]
   26810:	3108      	adds	r1, #8
   26812:	f7fb f981 	bl	21b18 <net_if_ipv6_router_add>
   26816:	e665      	b.n	264e4 <handle_ra_input+0x298>
   26818:	2000e28c 	.word	0x2000e28c
   2681c:	000350d9 	.word	0x000350d9
   26820:	00035242 	.word	0x00035242
   26824:	7fffff9b 	.word	0x7fffff9b

00026828 <handle_ns_input>:
{
   26828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2682c:	4604      	mov	r4, r0
   2682e:	b09d      	sub	sp, #116	; 0x74
	return net_buf_frags_len(pkt->frags);
   26830:	6940      	ldr	r0, [r0, #20]
   26832:	f7fe fd68 	bl	25306 <net_buf_frags_len>
	ret = net_icmpv6_get_ns_hdr(pkt, &ns_hdr);
   26836:	f10d 095c 	add.w	r9, sp, #92	; 0x5c
   2683a:	4605      	mov	r5, r0
   2683c:	4649      	mov	r1, r9
   2683e:	4620      	mov	r0, r4
   26840:	f7fd fe42 	bl	244c8 <net_icmpv6_get_ns_hdr>
	if (ret < 0) {
   26844:	2800      	cmp	r0, #0
   26846:	da19      	bge.n	2687c <handle_ns_input+0x54>
		NET_ERR("NULL NS header - dropping");
   26848:	4ba0      	ldr	r3, [pc, #640]	; (26acc <handle_ns_input+0x2a4>)
   2684a:	681b      	ldr	r3, [r3, #0]
   2684c:	0759      	lsls	r1, r3, #29
   2684e:	d103      	bne.n	26858 <handle_ns_input+0x30>
	return NET_DROP;
   26850:	2002      	movs	r0, #2
}
   26852:	b01d      	add	sp, #116	; 0x74
   26854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_ERR("NULL NS header - dropping");
   26858:	2301      	movs	r3, #1
   2685a:	f04f 0200 	mov.w	r2, #0
   2685e:	f363 0202 	bfi	r2, r3, #0, #3
   26862:	499b      	ldr	r1, [pc, #620]	; (26ad0 <handle_ns_input+0x2a8>)
   26864:	4b9b      	ldr	r3, [pc, #620]	; (26ad4 <handle_ns_input+0x2ac>)
   26866:	489c      	ldr	r0, [pc, #624]	; (26ad8 <handle_ns_input+0x2b0>)
   26868:	1a5b      	subs	r3, r3, r1
   2686a:	f36f 02c5 	bfc	r2, #3, #3
   2686e:	08db      	lsrs	r3, r3, #3
   26870:	499a      	ldr	r1, [pc, #616]	; (26adc <handle_ns_input+0x2b4>)
   26872:	f363 128f 	bfi	r2, r3, #6, #10
			NET_ERR("Corrupted NS message");
   26876:	f7db fc39 	bl	20ec <log_1>
   2687a:	e7e9      	b.n	26850 <handle_ns_input+0x28>
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   2687c:	b2ad      	uxth	r5, r5
   2687e:	2d3f      	cmp	r5, #63	; 0x3f
   26880:	d904      	bls.n	2688c <handle_ns_input+0x64>
	return pkt->frags->data;
   26882:	6963      	ldr	r3, [r4, #20]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   26884:	689b      	ldr	r3, [r3, #8]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   26886:	79db      	ldrb	r3, [r3, #7]
   26888:	2bff      	cmp	r3, #255	; 0xff
   2688a:	d00d      	beq.n	268a8 <handle_ns_input+0x80>
		if (net_is_ipv6_addr_mcast(&ns_hdr.tgt)) {
   2688c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   26890:	2bff      	cmp	r3, #255	; 0xff
   26892:	d109      	bne.n	268a8 <handle_ns_input+0x80>
			ret = net_icmpv6_get_hdr(pkt, &icmp_hdr);
   26894:	a913      	add	r1, sp, #76	; 0x4c
   26896:	4620      	mov	r0, r4
   26898:	f7fd fca4 	bl	241e4 <net_icmpv6_get_hdr>
			if (ret < 0 || icmp_hdr.code != 0) {
   2689c:	2800      	cmp	r0, #0
   2689e:	dbd7      	blt.n	26850 <handle_ns_input+0x28>
   268a0:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
   268a4:	2b00      	cmp	r3, #0
   268a6:	d1d3      	bne.n	26850 <handle_ns_input+0x28>
	pkt->ipv6_ext_opt_len = len;
   268a8:	2314      	movs	r3, #20
   268aa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	return net_buf_frags_len(pkt->frags);
   268ae:	6960      	ldr	r0, [r4, #20]
   268b0:	f7fe fd29 	bl	25306 <net_buf_frags_len>
	ret = net_icmpv6_get_nd_opt_hdr(pkt, &nd_opt_hdr);
   268b4:	a902      	add	r1, sp, #8
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   268b6:	f1a0 082c 	sub.w	r8, r0, #44	; 0x2c
	ret = net_icmpv6_get_nd_opt_hdr(pkt, &nd_opt_hdr);
   268ba:	4620      	mov	r0, r4
   268bc:	f7fd fe80 	bl	245c0 <net_icmpv6_get_nd_opt_hdr>
	frag = net_frag_read(pkt->frags, sllao_offset,
   268c0:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
	ret = net_icmpv6_get_nd_opt_hdr(pkt, &nd_opt_hdr);
   268c4:	4601      	mov	r1, r0
	while (!ret && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   268c6:	b919      	cbnz	r1, 268d0 <handle_ns_input+0xa8>
   268c8:	f894 a050 	ldrb.w	sl, [r4, #80]	; 0x50
   268cc:	45c2      	cmp	sl, r8
   268ce:	d32f      	bcc.n	26930 <handle_ns_input+0x108>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   268d0:	ae18      	add	r6, sp, #96	; 0x60
   268d2:	4631      	mov	r1, r6
   268d4:	6a20      	ldr	r0, [r4, #32]
   268d6:	f7fa fab9 	bl	20e4c <net_if_ipv6_addr_lookup_by_iface>
	if (!ifaddr) {
   268da:	4682      	mov	sl, r0
   268dc:	2800      	cmp	r0, #0
   268de:	d0b7      	beq.n	26850 <handle_ns_input+0x28>
	return pkt->frags->data;
   268e0:	6963      	ldr	r3, [r4, #20]
   268e2:	689d      	ldr	r5, [r3, #8]
		src = &NET_IPV6_HDR(pkt)->src;
   268e4:	f105 0708 	add.w	r7, r5, #8
		tgt = &ifaddr->address.in6_addr;
   268e8:	f100 0804 	add.w	r8, r0, #4
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   268ec:	4638      	mov	r0, r7
   268ee:	f7fe fd12 	bl	25316 <net_is_ipv6_addr_unspecified>
   268f2:	4601      	mov	r1, r0
   268f4:	2800      	cmp	r0, #0
   268f6:	f000 80f7 	beq.w	26ae8 <handle_ns_input+0x2c0>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   268fa:	69aa      	ldr	r2, [r5, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   268fc:	f240 23ff 	movw	r3, #767	; 0x2ff
   26900:	429a      	cmp	r2, r3
   26902:	d1a5      	bne.n	26850 <handle_ns_input+0x28>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   26904:	69eb      	ldr	r3, [r5, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   26906:	2b00      	cmp	r3, #0
   26908:	d1a2      	bne.n	26850 <handle_ns_input+0x28>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2690a:	6a2a      	ldr	r2, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   2690c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   26910:	d19e      	bne.n	26850 <handle_ns_input+0x28>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   26912:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   26914:	b2d2      	uxtb	r2, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   26916:	2aff      	cmp	r2, #255	; 0xff
   26918:	d19a      	bne.n	26850 <handle_ns_input+0x28>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   2691a:	f99a 2045 	ldrsb.w	r2, [sl, #69]	; 0x45
   2691e:	2602      	movs	r6, #2
   26920:	2a00      	cmp	r2, #0
   26922:	f040 8083 	bne.w	26a2c <handle_ns_input+0x204>
			dad_failed(net_pkt_iface(pkt),
   26926:	4641      	mov	r1, r8
   26928:	6a20      	ldr	r0, [r4, #32]
   2692a:	f7fe ff47 	bl	257bc <dad_failed>
   2692e:	e78f      	b.n	26850 <handle_ns_input+0x28>
		if (!nd_opt_hdr.len) {
   26930:	f89d 5009 	ldrb.w	r5, [sp, #9]
   26934:	2d00      	cmp	r5, #0
   26936:	d0cb      	beq.n	268d0 <handle_ns_input+0xa8>
		switch (nd_opt_hdr.type) {
   26938:	f89d b008 	ldrb.w	fp, [sp, #8]
   2693c:	f1bb 0f01 	cmp.w	fp, #1
   26940:	d14e      	bne.n	269e0 <handle_ns_input+0x1b8>
				    &NET_IPV6_HDR(pkt)->src)) {
   26942:	6967      	ldr	r7, [r4, #20]
   26944:	68b8      	ldr	r0, [r7, #8]
			if (net_is_ipv6_addr_unspecified(
   26946:	3008      	adds	r0, #8
   26948:	f7fe fce5 	bl	25316 <net_is_ipv6_addr_unspecified>
   2694c:	2800      	cmp	r0, #0
   2694e:	f47f af7f 	bne.w	26850 <handle_ns_input+0x28>
			if (nd_opt_hdr.len > 2) {
   26952:	2d02      	cmp	r5, #2
   26954:	d913      	bls.n	2697e <handle_ns_input+0x156>
				NET_ERR("Too long source link-layer address "
   26956:	4b5d      	ldr	r3, [pc, #372]	; (26acc <handle_ns_input+0x2a4>)
   26958:	681b      	ldr	r3, [r3, #0]
   2695a:	075a      	lsls	r2, r3, #29
   2695c:	f43f af78 	beq.w	26850 <handle_ns_input+0x28>
   26960:	f04f 0200 	mov.w	r2, #0
   26964:	f36b 0202 	bfi	r2, fp, #0, #3
   26968:	f361 02c5 	bfi	r2, r1, #3, #3
   2696c:	4b59      	ldr	r3, [pc, #356]	; (26ad4 <handle_ns_input+0x2ac>)
   2696e:	4958      	ldr	r1, [pc, #352]	; (26ad0 <handle_ns_input+0x2a8>)
   26970:	485b      	ldr	r0, [pc, #364]	; (26ae0 <handle_ns_input+0x2b8>)
   26972:	1a5b      	subs	r3, r3, r1
   26974:	08db      	lsrs	r3, r3, #3
   26976:	f363 128f 	bfi	r2, r3, #6, #10
   2697a:	4958      	ldr	r1, [pc, #352]	; (26adc <handle_ns_input+0x2b4>)
   2697c:	e77b      	b.n	26876 <handle_ns_input+0x4e>
			if (!handle_ns_neighbor(pkt, nd_opt_hdr.len,
   2697e:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
	frag = net_frag_read(pkt->frags, sllao_offset,
   26982:	9600      	str	r6, [sp, #0]
			if (!handle_ns_neighbor(pkt, nd_opt_hdr.len,
   26984:	1d8b      	adds	r3, r1, #6
						net_pkt_ip_hdr_len(pkt) +
   26986:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
			if (!handle_ns_neighbor(pkt, nd_opt_hdr.len,
   2698a:	4419      	add	r1, r3
	lladdr.len = 8 * ll_len - 2;
   2698c:	00eb      	lsls	r3, r5, #3
			if (!handle_ns_neighbor(pkt, nd_opt_hdr.len,
   2698e:	4451      	add	r1, sl
	lladdr.len = 8 * ll_len - 2;
   26990:	3b02      	subs	r3, #2
   26992:	b2db      	uxtb	r3, r3
	frag = net_frag_read(pkt->frags, sllao_offset,
   26994:	aa0b      	add	r2, sp, #44	; 0x2c
   26996:	b289      	uxth	r1, r1
   26998:	4638      	mov	r0, r7
	lladdr.len = 8 * ll_len - 2;
   2699a:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	frag = net_frag_read(pkt->frags, sllao_offset,
   2699e:	f7fb ffc7 	bl	22930 <net_frag_read>
	if (!frag && pos == 0xffff) {
   269a2:	b930      	cbnz	r0, 269b2 <handle_ns_input+0x18a>
   269a4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   269a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   269ac:	429a      	cmp	r2, r3
   269ae:	f43f af4f 	beq.w	26850 <handle_ns_input+0x28>
	nbr_lladdr.len = lladdr.len;
   269b2:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
	if (net_pkt_lladdr_src(pkt)->len < nbr_lladdr.len) {
   269b6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	nbr_lladdr.len = lladdr.len;
   269ba:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
	if (net_pkt_lladdr_src(pkt)->len < nbr_lladdr.len) {
   269be:	429a      	cmp	r2, r3
		nbr_lladdr.len = net_pkt_lladdr_src(pkt)->len;
   269c0:	bf88      	it	hi
   269c2:	f88d 3050 	strbhi.w	r3, [sp, #80]	; 0x50
   269c6:	6963      	ldr	r3, [r4, #20]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   269c8:	6a20      	ldr	r0, [r4, #32]
   269ca:	6899      	ldr	r1, [r3, #8]
	nbr_lladdr.addr = lladdr.addr;
   269cc:	9613      	str	r6, [sp, #76]	; 0x4c
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   269ce:	2300      	movs	r3, #0
   269d0:	9300      	str	r3, [sp, #0]
   269d2:	aa13      	add	r2, sp, #76	; 0x4c
   269d4:	3108      	adds	r1, #8
   269d6:	f7ff fbb3 	bl	26140 <net_ipv6_nbr_add>
			if (!handle_ns_neighbor(pkt, nd_opt_hdr.len,
   269da:	2800      	cmp	r0, #0
   269dc:	f43f af38 	beq.w	26850 <handle_ns_input+0x28>
		prev_opt_len = net_pkt_ipv6_ext_opt_len(pkt);
   269e0:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
					     (nd_opt_hdr.len << 3));
   269e4:	f89d 3009 	ldrb.w	r3, [sp, #9]
		net_pkt_set_ipv6_ext_opt_len(pkt,
   269e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   269ec:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   269ee:	429a      	cmp	r2, r3
	pkt->ipv6_ext_opt_len = len;
   269f0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   269f4:	d314      	bcc.n	26a20 <handle_ns_input+0x1f8>
			NET_ERR("Corrupted NS message");
   269f6:	4b35      	ldr	r3, [pc, #212]	; (26acc <handle_ns_input+0x2a4>)
   269f8:	681b      	ldr	r3, [r3, #0]
   269fa:	075b      	lsls	r3, r3, #29
   269fc:	f43f af28 	beq.w	26850 <handle_ns_input+0x28>
   26a00:	2301      	movs	r3, #1
   26a02:	f04f 0200 	mov.w	r2, #0
   26a06:	f363 0202 	bfi	r2, r3, #0, #3
   26a0a:	4931      	ldr	r1, [pc, #196]	; (26ad0 <handle_ns_input+0x2a8>)
   26a0c:	4b31      	ldr	r3, [pc, #196]	; (26ad4 <handle_ns_input+0x2ac>)
   26a0e:	4835      	ldr	r0, [pc, #212]	; (26ae4 <handle_ns_input+0x2bc>)
   26a10:	1a5b      	subs	r3, r3, r1
   26a12:	f36f 02c5 	bfc	r2, #3, #3
   26a16:	08db      	lsrs	r3, r3, #3
   26a18:	f363 128f 	bfi	r2, r3, #6, #10
   26a1c:	492f      	ldr	r1, [pc, #188]	; (26adc <handle_ns_input+0x2b4>)
   26a1e:	e72a      	b.n	26876 <handle_ns_input+0x4e>
		ret = net_icmpv6_get_nd_opt_hdr(pkt, &nd_opt_hdr);
   26a20:	a902      	add	r1, sp, #8
   26a22:	4620      	mov	r0, r4
   26a24:	f7fd fdcc 	bl	245c0 <net_icmpv6_get_nd_opt_hdr>
   26a28:	4601      	mov	r1, r0
   26a2a:	e74c      	b.n	268c6 <handle_ns_input+0x9e>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   26a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26a30:	762a      	strb	r2, [r5, #24]
   26a32:	766e      	strb	r6, [r5, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   26a34:	76ab      	strb	r3, [r5, #26]
   26a36:	76eb      	strb	r3, [r5, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   26a38:	772b      	strb	r3, [r5, #28]
   26a3a:	776b      	strb	r3, [r5, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   26a3c:	77ab      	strb	r3, [r5, #30]
   26a3e:	77eb      	strb	r3, [r5, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   26a40:	f885 3020 	strb.w	r3, [r5, #32]
   26a44:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   26a48:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   26a4c:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   26a50:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
   26a54:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   26a58:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
   26a5c:	2301      	movs	r3, #1
   26a5e:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	return pkt->frags->data;
   26a62:	6963      	ldr	r3, [r4, #20]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   26a64:	6a20      	ldr	r0, [r4, #32]
   26a66:	689d      	ldr	r5, [r3, #8]
   26a68:	f105 0118 	add.w	r1, r5, #24
   26a6c:	f7fb f8e6 	bl	21c3c <net_if_ipv6_select_src_addr>
   26a70:	aa03      	add	r2, sp, #12
   26a72:	4603      	mov	r3, r0
   26a74:	f100 0e10 	add.w	lr, r0, #16
   26a78:	4616      	mov	r6, r2
   26a7a:	6818      	ldr	r0, [r3, #0]
   26a7c:	6859      	ldr	r1, [r3, #4]
   26a7e:	4694      	mov	ip, r2
   26a80:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   26a84:	3308      	adds	r3, #8
   26a86:	4573      	cmp	r3, lr
   26a88:	4662      	mov	r2, ip
   26a8a:	d1f6      	bne.n	26a7a <handle_ns_input+0x252>
   26a8c:	f105 0308 	add.w	r3, r5, #8
   26a90:	ad07      	add	r5, sp, #28
   26a92:	4632      	mov	r2, r6
   26a94:	ca03      	ldmia	r2!, {r0, r1}
   26a96:	42aa      	cmp	r2, r5
   26a98:	6018      	str	r0, [r3, #0]
   26a9a:	6059      	str	r1, [r3, #4]
   26a9c:	4616      	mov	r6, r2
   26a9e:	f103 0308 	add.w	r3, r3, #8
   26aa2:	d1f6      	bne.n	26a92 <handle_ns_input+0x26a>
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   26aa4:	2320      	movs	r3, #32
   26aa6:	6962      	ldr	r2, [r4, #20]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   26aa8:	6a20      	ldr	r0, [r4, #32]
			       &NET_IPV6_HDR(pkt)->dst,
   26aaa:	6892      	ldr	r2, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   26aac:	9300      	str	r3, [sp, #0]
   26aae:	3218      	adds	r2, #24
   26ab0:	4643      	mov	r3, r8
   26ab2:	4639      	mov	r1, r7
   26ab4:	f7fe ff34 	bl	25920 <net_ipv6_send_na>
	if (!ret) {
   26ab8:	4605      	mov	r5, r0
   26aba:	2800      	cmp	r0, #0
   26abc:	f47f aec8 	bne.w	26850 <handle_ns_input+0x28>
		net_pkt_unref(pkt);
   26ac0:	4620      	mov	r0, r4
   26ac2:	f7fb fd9c 	bl	225fe <net_pkt_unref>
		return NET_OK;
   26ac6:	4628      	mov	r0, r5
   26ac8:	e6c3      	b.n	26852 <handle_ns_input+0x2a>
   26aca:	bf00      	nop
   26acc:	2000e28c 	.word	0x2000e28c
   26ad0:	0002ef38 	.word	0x0002ef38
   26ad4:	0002f058 	.word	0x0002f058
   26ad8:	00035191 	.word	0x00035191
   26adc:	0003507e 	.word	0x0003507e
   26ae0:	000351af 	.word	0x000351af
   26ae4:	000351e3 	.word	0x000351e3
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   26ae8:	4638      	mov	r0, r7
   26aea:	f7fa f95b 	bl	20da4 <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   26aee:	2800      	cmp	r0, #0
   26af0:	f47f aeae 	bne.w	26850 <handle_ns_input+0x28>
   26af4:	6963      	ldr	r3, [r4, #20]
   26af6:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   26af8:	6999      	ldr	r1, [r3, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   26afa:	f240 22ff 	movw	r2, #767	; 0x2ff
   26afe:	4291      	cmp	r1, r2
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   26b00:	f103 0e18 	add.w	lr, r3, #24
   26b04:	d109      	bne.n	26b1a <handle_ns_input+0x2f2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   26b06:	69da      	ldr	r2, [r3, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   26b08:	b93a      	cbnz	r2, 26b1a <handle_ns_input+0x2f2>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   26b0a:	6a1a      	ldr	r2, [r3, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   26b0c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   26b10:	d103      	bne.n	26b1a <handle_ns_input+0x2f2>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   26b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   26b14:	b2d2      	uxtb	r2, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   26b16:	2aff      	cmp	r2, #255	; 0xff
   26b18:	d038      	beq.n	26b8c <handle_ns_input+0x364>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   26b1a:	4671      	mov	r1, lr
   26b1c:	6a20      	ldr	r0, [r4, #32]
   26b1e:	f7fa f995 	bl	20e4c <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   26b22:	4680      	mov	r8, r0
   26b24:	2800      	cmp	r0, #0
   26b26:	f43f ae93 	beq.w	26850 <handle_ns_input+0x28>
   26b2a:	6963      	ldr	r3, [r4, #20]
   26b2c:	689a      	ldr	r2, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   26b2e:	ad0f      	add	r5, sp, #60	; 0x3c
   26b30:	f102 0308 	add.w	r3, r2, #8
   26b34:	462f      	mov	r7, r5
   26b36:	3218      	adds	r2, #24
   26b38:	6818      	ldr	r0, [r3, #0]
   26b3a:	6859      	ldr	r1, [r3, #4]
   26b3c:	46ac      	mov	ip, r5
   26b3e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   26b42:	3308      	adds	r3, #8
   26b44:	4293      	cmp	r3, r2
   26b46:	4665      	mov	r5, ip
   26b48:	d1f6      	bne.n	26b38 <handle_ns_input+0x310>
   26b4a:	ad13      	add	r5, sp, #76	; 0x4c
   26b4c:	463a      	mov	r2, r7
   26b4e:	ca03      	ldmia	r2!, {r0, r1}
   26b50:	42aa      	cmp	r2, r5
   26b52:	6018      	str	r0, [r3, #0]
   26b54:	6059      	str	r1, [r3, #4]
   26b56:	4617      	mov	r7, r2
   26b58:	f103 0308 	add.w	r3, r3, #8
   26b5c:	d1f6      	bne.n	26b4c <handle_ns_input+0x324>
   26b5e:	6963      	ldr	r3, [r4, #20]
   26b60:	689f      	ldr	r7, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr.tgt);
   26b62:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   26b66:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   26b6a:	f107 0308 	add.w	r3, r7, #8
   26b6e:	462a      	mov	r2, r5
   26b70:	ca03      	ldmia	r2!, {r0, r1}
   26b72:	454a      	cmp	r2, r9
   26b74:	6018      	str	r0, [r3, #0]
   26b76:	6059      	str	r1, [r3, #4]
   26b78:	4615      	mov	r5, r2
   26b7a:	f103 0308 	add.w	r3, r3, #8
   26b7e:	d1f6      	bne.n	26b6e <handle_ns_input+0x346>
   26b80:	6963      	ldr	r3, [r4, #20]
		src = &NET_IPV6_HDR(pkt)->src;
   26b82:	689f      	ldr	r7, [r3, #8]
		tgt = &ifaddr->address.in6_addr;
   26b84:	f108 0804 	add.w	r8, r8, #4
		src = &NET_IPV6_HDR(pkt)->src;
   26b88:	3708      	adds	r7, #8
   26b8a:	e027      	b.n	26bdc <handle_ns_input+0x3b4>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   26b8c:	aa07      	add	r2, sp, #28
   26b8e:	3308      	adds	r3, #8
   26b90:	4694      	mov	ip, r2
   26b92:	6818      	ldr	r0, [r3, #0]
   26b94:	6859      	ldr	r1, [r3, #4]
   26b96:	4615      	mov	r5, r2
   26b98:	c503      	stmia	r5!, {r0, r1}
   26b9a:	3308      	adds	r3, #8
   26b9c:	4573      	cmp	r3, lr
   26b9e:	462a      	mov	r2, r5
   26ba0:	d1f7      	bne.n	26b92 <handle_ns_input+0x36a>
   26ba2:	ad0b      	add	r5, sp, #44	; 0x2c
   26ba4:	4662      	mov	r2, ip
   26ba6:	ca03      	ldmia	r2!, {r0, r1}
   26ba8:	42aa      	cmp	r2, r5
   26baa:	6018      	str	r0, [r3, #0]
   26bac:	6059      	str	r1, [r3, #4]
   26bae:	4694      	mov	ip, r2
   26bb0:	f103 0308 	add.w	r3, r3, #8
   26bb4:	d1f6      	bne.n	26ba4 <handle_ns_input+0x37c>
   26bb6:	6963      	ldr	r3, [r4, #20]
   26bb8:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr.tgt);
   26bbc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   26bc0:	ae0f      	add	r6, sp, #60	; 0x3c
   26bc2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   26bc6:	f10c 0308 	add.w	r3, ip, #8
   26bca:	462a      	mov	r2, r5
   26bcc:	ca03      	ldmia	r2!, {r0, r1}
   26bce:	42b2      	cmp	r2, r6
   26bd0:	6018      	str	r0, [r3, #0]
   26bd2:	6059      	str	r1, [r3, #4]
   26bd4:	4615      	mov	r5, r2
   26bd6:	f103 0308 	add.w	r3, r3, #8
   26bda:	d1f6      	bne.n	26bca <handle_ns_input+0x3a2>
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   26bdc:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   26bde:	e762      	b.n	26aa6 <handle_ns_input+0x27e>

00026be0 <net_ipv6_start_dad>:
{
   26be0:	b507      	push	{r0, r1, r2, lr}
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   26be2:	2301      	movs	r3, #1
   26be4:	9301      	str	r3, [sp, #4]
   26be6:	3104      	adds	r1, #4
   26be8:	2300      	movs	r3, #0
   26bea:	9100      	str	r1, [sp, #0]
   26bec:	461a      	mov	r2, r3
   26bee:	4619      	mov	r1, r3
   26bf0:	f7ff f92c 	bl	25e4c <net_ipv6_send_ns>
}
   26bf4:	b003      	add	sp, #12
   26bf6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00026bfc <net_ipv6_prepare_for_send>:
{
   26bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   26bfe:	b085      	sub	sp, #20
	struct net_if *iface = NULL;
   26c00:	2300      	movs	r3, #0
   26c02:	9303      	str	r3, [sp, #12]
	NET_ASSERT(pkt && pkt->frags);
   26c04:	4604      	mov	r4, r0
   26c06:	b108      	cbz	r0, 26c0c <net_ipv6_prepare_for_send+0x10>
   26c08:	6943      	ldr	r3, [r0, #20]
   26c0a:	b9a3      	cbnz	r3, 26c36 <net_ipv6_prepare_for_send+0x3a>
   26c0c:	4b58      	ldr	r3, [pc, #352]	; (26d70 <net_ipv6_prepare_for_send+0x174>)
   26c0e:	681b      	ldr	r3, [r3, #0]
   26c10:	0758      	lsls	r0, r3, #29
   26c12:	d010      	beq.n	26c36 <net_ipv6_prepare_for_send+0x3a>
   26c14:	2301      	movs	r3, #1
   26c16:	f04f 0200 	mov.w	r2, #0
   26c1a:	f363 0202 	bfi	r2, r3, #0, #3
   26c1e:	4955      	ldr	r1, [pc, #340]	; (26d74 <net_ipv6_prepare_for_send+0x178>)
   26c20:	4b55      	ldr	r3, [pc, #340]	; (26d78 <net_ipv6_prepare_for_send+0x17c>)
   26c22:	4856      	ldr	r0, [pc, #344]	; (26d7c <net_ipv6_prepare_for_send+0x180>)
   26c24:	1a5b      	subs	r3, r3, r1
   26c26:	f36f 02c5 	bfc	r2, #3, #3
   26c2a:	08db      	lsrs	r3, r3, #3
   26c2c:	f363 128f 	bfi	r2, r3, #6, #10
   26c30:	4953      	ldr	r1, [pc, #332]	; (26d80 <net_ipv6_prepare_for_send+0x184>)
   26c32:	f7db fa5b 	bl	20ec <log_1>
	if (atomic_test_bit(net_pkt_iface(pkt)->if_dev->flags,
   26c36:	6a23      	ldr	r3, [r4, #32]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26c38:	681b      	ldr	r3, [r3, #0]
   26c3a:	f3bf 8f5b 	dmb	ish
   26c3e:	68db      	ldr	r3, [r3, #12]
   26c40:	f3bf 8f5b 	dmb	ish
   26c44:	0799      	lsls	r1, r3, #30
   26c46:	d477      	bmi.n	26d38 <net_ipv6_prepare_for_send+0x13c>
   26c48:	6963      	ldr	r3, [r4, #20]
	if ((net_pkt_lladdr_dst(pkt)->addr &&
   26c4a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   26c4c:	689b      	ldr	r3, [r3, #8]
   26c4e:	f103 0118 	add.w	r1, r3, #24
   26c52:	b912      	cbnz	r2, 26c5a <net_ipv6_prepare_for_send+0x5e>
	      !IS_ENABLED(CONFIG_NET_ROUTING))) ||
   26c54:	7e1b      	ldrb	r3, [r3, #24]
   26c56:	2bff      	cmp	r3, #255	; 0xff
   26c58:	d108      	bne.n	26c6c <net_ipv6_prepare_for_send+0x70>
	return pkt->forwarding;
   26c5a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_forwarding(pkt) &&
   26c5e:	075a      	lsls	r2, r3, #29
   26c60:	d46a      	bmi.n	26d38 <net_ipv6_prepare_for_send+0x13c>
   26c62:	4620      	mov	r0, r4
   26c64:	f7fe fcbc 	bl	255e0 <update_ll_reserve.part.25>
   26c68:	4604      	mov	r4, r0
   26c6a:	e065      	b.n	26d38 <net_ipv6_prepare_for_send+0x13c>
	if (net_if_ipv6_addr_onlink(&iface,
   26c6c:	a803      	add	r0, sp, #12
   26c6e:	f7fa fe3b 	bl	218e8 <net_if_ipv6_addr_onlink>
   26c72:	6963      	ldr	r3, [r4, #20]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   26c74:	689d      	ldr	r5, [r3, #8]
   26c76:	3518      	adds	r5, #24
	if (net_if_ipv6_addr_onlink(&iface,
   26c78:	2800      	cmp	r0, #0
   26c7a:	d04c      	beq.n	26d16 <net_ipv6_prepare_for_send+0x11a>
		net_pkt_set_iface(pkt, iface);
   26c7c:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   26c7e:	6223      	str	r3, [r4, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   26c80:	681a      	ldr	r2, [r3, #0]
   26c82:	7d52      	ldrb	r2, [r2, #21]
   26c84:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   26c88:	681b      	ldr	r3, [r3, #0]
   26c8a:	7d5b      	ldrb	r3, [r3, #21]
   26c8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	if (!iface) {
   26c90:	9b03      	ldr	r3, [sp, #12]
   26c92:	b97b      	cbnz	r3, 26cb4 <net_ipv6_prepare_for_send+0xb8>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   26c94:	4629      	mov	r1, r5
   26c96:	a803      	add	r0, sp, #12
   26c98:	f7fa fe26 	bl	218e8 <net_if_ipv6_addr_onlink>
   26c9c:	2800      	cmp	r0, #0
   26c9e:	d055      	beq.n	26d4c <net_ipv6_prepare_for_send+0x150>
			net_pkt_set_iface(pkt, iface);
   26ca0:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   26ca2:	6223      	str	r3, [r4, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   26ca4:	681a      	ldr	r2, [r3, #0]
   26ca6:	7d52      	ldrb	r2, [r2, #21]
   26ca8:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   26cac:	681b      	ldr	r3, [r3, #0]
   26cae:	7d5b      	ldrb	r3, [r3, #21]
   26cb0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	nbr = nbr_lookup(&net_neighbor.table, iface, nexthop);
   26cb4:	4629      	mov	r1, r5
   26cb6:	9803      	ldr	r0, [sp, #12]
   26cb8:	f7fe fc6e 	bl	25598 <nbr_lookup.isra.21>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   26cbc:	4606      	mov	r6, r0
   26cbe:	2800      	cmp	r0, #0
   26cc0:	d047      	beq.n	26d52 <net_ipv6_prepare_for_send+0x156>
   26cc2:	7840      	ldrb	r0, [r0, #1]
   26cc4:	28ff      	cmp	r0, #255	; 0xff
   26cc6:	d044      	beq.n	26d52 <net_ipv6_prepare_for_send+0x156>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   26cc8:	f7fe f884 	bl	24dd4 <net_nbr_get_lladdr>
		net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
   26ccc:	1c83      	adds	r3, r0, #2
   26cce:	6363      	str	r3, [r4, #52]	; 0x34
		net_pkt_lladdr_dst(pkt)->len = lladdr->len;
   26cd0:	7843      	ldrb	r3, [r0, #1]
   26cd2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   26cd6:	68f3      	ldr	r3, [r6, #12]
   26cd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   26cdc:	2b02      	cmp	r3, #2
   26cde:	d114      	bne.n	26d0a <net_ipv6_prepare_for_send+0x10e>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   26ce0:	4630      	mov	r0, r6
   26ce2:	2103      	movs	r1, #3
   26ce4:	f7fe fb28 	bl	25338 <ipv6_nbr_set_state>
			net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
   26ce8:	68f7      	ldr	r7, [r6, #12]
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   26cea:	f007 fe85 	bl	2e9f8 <_impl_k_uptime_get>
			net_ipv6_nbr_data(nbr)->reachable_timeout =
   26cee:	68f3      	ldr	r3, [r6, #12]
   26cf0:	f241 3688 	movw	r6, #5000	; 0x1388
			net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
   26cf4:	e9c7 0106 	strd	r0, r1, [r7, #24]
			net_ipv6_nbr_data(nbr)->reachable_timeout =
   26cf8:	621e      	str	r6, [r3, #32]
			if (!k_delayed_work_remaining_get(
   26cfa:	4822      	ldr	r0, [pc, #136]	; (26d84 <net_ipv6_prepare_for_send+0x188>)
   26cfc:	f7fe fb70 	bl	253e0 <k_delayed_work_remaining_get>
   26d00:	b918      	cbnz	r0, 26d0a <net_ipv6_prepare_for_send+0x10e>
				k_delayed_work_submit(
   26d02:	4631      	mov	r1, r6
   26d04:	481f      	ldr	r0, [pc, #124]	; (26d84 <net_ipv6_prepare_for_send+0x188>)
   26d06:	f7fe fb79 	bl	253fc <k_delayed_work_submit>
	return pkt->forwarding;
   26d0a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_forwarding(pkt) &&
   26d0e:	075b      	lsls	r3, r3, #29
   26d10:	d412      	bmi.n	26d38 <net_ipv6_prepare_for_send+0x13c>
   26d12:	4629      	mov	r1, r5
   26d14:	e7a5      	b.n	26c62 <net_ipv6_prepare_for_send+0x66>
	route = net_route_lookup(iface, dst);
   26d16:	4629      	mov	r1, r5
   26d18:	f000 fda6 	bl	27868 <net_route_lookup>
	if (route) {
   26d1c:	4606      	mov	r6, r0
   26d1e:	b170      	cbz	r0, 26d3e <net_ipv6_prepare_for_send+0x142>
		nexthop = net_route_get_nexthop(route);
   26d20:	f000 fe86 	bl	27a30 <net_route_get_nexthop>
		if (!nexthop) {
   26d24:	4605      	mov	r5, r0
   26d26:	2800      	cmp	r0, #0
   26d28:	d1b2      	bne.n	26c90 <net_ipv6_prepare_for_send+0x94>
			net_route_del(route);
   26d2a:	4630      	mov	r0, r6
   26d2c:	f000 fdf6 	bl	2791c <net_route_del>
			net_pkt_unref(pkt);
   26d30:	4620      	mov	r0, r4
   26d32:	f7fb fc64 	bl	225fe <net_pkt_unref>
			return NULL;
   26d36:	2400      	movs	r4, #0
}
   26d38:	4620      	mov	r0, r4
   26d3a:	b005      	add	sp, #20
   26d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
   26d3e:	4629      	mov	r1, r5
   26d40:	f7fa feca 	bl	21ad8 <net_if_ipv6_router_find_default>
		if (!router) {
   26d44:	b188      	cbz	r0, 26d6a <net_ipv6_prepare_for_send+0x16e>
		nexthop = &router->address.in6_addr;
   26d46:	f100 0524 	add.w	r5, r0, #36	; 0x24
   26d4a:	e7a1      	b.n	26c90 <net_ipv6_prepare_for_send+0x94>
			iface = net_pkt_iface(pkt);
   26d4c:	6a23      	ldr	r3, [r4, #32]
   26d4e:	9303      	str	r3, [sp, #12]
   26d50:	e7b0      	b.n	26cb4 <net_ipv6_prepare_for_send+0xb8>
	return pkt->frags->data;
   26d52:	6963      	ldr	r3, [r4, #20]
	ret = net_ipv6_send_ns(net_pkt_iface(pkt), pkt,
   26d54:	2600      	movs	r6, #0
   26d56:	689a      	ldr	r2, [r3, #8]
   26d58:	e9cd 5600 	strd	r5, r6, [sp]
   26d5c:	4633      	mov	r3, r6
   26d5e:	3208      	adds	r2, #8
   26d60:	4621      	mov	r1, r4
   26d62:	6a20      	ldr	r0, [r4, #32]
   26d64:	f7ff f872 	bl	25e4c <net_ipv6_send_ns>
   26d68:	e7e5      	b.n	26d36 <net_ipv6_prepare_for_send+0x13a>
		if (!nexthop) {
   26d6a:	2d00      	cmp	r5, #0
   26d6c:	d1a2      	bne.n	26cb4 <net_ipv6_prepare_for_send+0xb8>
   26d6e:	e7df      	b.n	26d30 <net_ipv6_prepare_for_send+0x134>
   26d70:	2000e28c 	.word	0x2000e28c
   26d74:	0002ef38 	.word	0x0002ef38
   26d78:	0002f058 	.word	0x0002f058
   26d7c:	00034c64 	.word	0x00034c64
   26d80:	00035057 	.word	0x00035057
   26d84:	2000280c 	.word	0x2000280c

00026d88 <ipv6_nd_reachable_timeout>:
{
   26d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d8c:	b085      	sub	sp, #20
   26d8e:	f007 fe33 	bl	2e9f8 <_impl_k_uptime_get>
   26d92:	4e52      	ldr	r6, [pc, #328]	; (26edc <ipv6_nd_reachable_timeout+0x154>)
			NET_ASSERT_INFO(false, "Static entry shall never timeout");
   26d94:	4b52      	ldr	r3, [pc, #328]	; (26ee0 <ipv6_nd_reachable_timeout+0x158>)
		if (!nbr || !nbr->ref) {
   26d96:	f8df b15c 	ldr.w	fp, [pc, #348]	; 26ef4 <ipv6_nd_reachable_timeout+0x16c>
				if (!k_delayed_work_remaining_get(
   26d9a:	4f52      	ldr	r7, [pc, #328]	; (26ee4 <ipv6_nd_reachable_timeout+0x15c>)
			NET_ASSERT_INFO(false, "Static entry shall never timeout");
   26d9c:	1af6      	subs	r6, r6, r3
   26d9e:	4680      	mov	r8, r0
   26da0:	4689      	mov	r9, r1
   26da2:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   26da6:	2500      	movs	r5, #0
		if (!nbr || !nbr->ref) {
   26da8:	f815 300b 	ldrb.w	r3, [r5, fp]
   26dac:	2b00      	cmp	r3, #0
   26dae:	d040      	beq.n	26e32 <ipv6_nd_reachable_timeout+0xaa>
   26db0:	eb0b 0405 	add.w	r4, fp, r5
		data = net_ipv6_nbr_data(nbr);
   26db4:	68e1      	ldr	r1, [r4, #12]
		if (!data) {
   26db6:	2900      	cmp	r1, #0
   26db8:	d03b      	beq.n	26e32 <ipv6_nd_reachable_timeout+0xaa>
		if (!data->reachable) {
   26dba:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   26dbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
   26dc2:	4313      	orrs	r3, r2
   26dc4:	d035      	beq.n	26e32 <ipv6_nd_reachable_timeout+0xaa>
		remaining = data->reachable + data->reachable_timeout - current;
   26dc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   26dca:	6a08      	ldr	r0, [r1, #32]
   26dcc:	1812      	adds	r2, r2, r0
   26dce:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   26dd2:	ebb2 0208 	subs.w	r2, r2, r8
   26dd6:	eb63 0309 	sbc.w	r3, r3, r9
		if (remaining > 0) {
   26dda:	2a01      	cmp	r2, #1
		remaining = data->reachable + data->reachable_timeout - current;
   26ddc:	e9cd 2302 	strd	r2, r3, [sp, #8]
		if (remaining > 0) {
   26de0:	f173 0300 	sbcs.w	r3, r3, #0
   26de4:	db08      	blt.n	26df8 <ipv6_nd_reachable_timeout+0x70>
			if (!k_delayed_work_remaining_get(
   26de6:	4638      	mov	r0, r7
   26de8:	f7fe fafa 	bl	253e0 <k_delayed_work_remaining_get>
   26dec:	bb08      	cbnz	r0, 26e32 <ipv6_nd_reachable_timeout+0xaa>
				k_delayed_work_submit(&ipv6_nd_reachable_timer,
   26dee:	9902      	ldr	r1, [sp, #8]
					k_delayed_work_submit(
   26df0:	4638      	mov	r0, r7
   26df2:	f7fe fb03 	bl	253fc <k_delayed_work_submit>
   26df6:	e01c      	b.n	26e32 <ipv6_nd_reachable_timeout+0xaa>
		data->reachable = 0;
   26df8:	2300      	movs	r3, #0
   26dfa:	2200      	movs	r2, #0
   26dfc:	e9c1 2306 	strd	r2, r3, [r1, #24]
		switch (data->state) {
   26e00:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
   26e04:	2b05      	cmp	r3, #5
   26e06:	d814      	bhi.n	26e32 <ipv6_nd_reachable_timeout+0xaa>
   26e08:	e8df f003 	tbb	[pc, r3]
   26e0c:	331e2f1a 	.word	0x331e2f1a
   26e10:	0339      	.short	0x0339
			NET_ASSERT_INFO(false, "Static entry shall never timeout");
   26e12:	4b35      	ldr	r3, [pc, #212]	; (26ee8 <ipv6_nd_reachable_timeout+0x160>)
   26e14:	681b      	ldr	r3, [r3, #0]
   26e16:	075a      	lsls	r2, r3, #29
   26e18:	d00b      	beq.n	26e32 <ipv6_nd_reachable_timeout+0xaa>
   26e1a:	2301      	movs	r3, #1
   26e1c:	f363 0a02 	bfi	sl, r3, #0, #3
   26e20:	f36f 0ac5 	bfc	sl, #3, #3
   26e24:	f366 1a8f 	bfi	sl, r6, #6, #10
   26e28:	4652      	mov	r2, sl
   26e2a:	4930      	ldr	r1, [pc, #192]	; (26eec <ipv6_nd_reachable_timeout+0x164>)
   26e2c:	4830      	ldr	r0, [pc, #192]	; (26ef0 <ipv6_nd_reachable_timeout+0x168>)
   26e2e:	f7db f95d 	bl	20ec <log_1>
   26e32:	354c      	adds	r5, #76	; 0x4c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   26e34:	f5b5 7fe4 	cmp.w	r5, #456	; 0x1c8
   26e38:	d1b6      	bne.n	26da8 <ipv6_nd_reachable_timeout+0x20>
}
   26e3a:	b005      	add	sp, #20
   26e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   26e40:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
   26e44:	2b02      	cmp	r3, #2
   26e46:	d903      	bls.n	26e50 <ipv6_nd_reachable_timeout+0xc8>
					nbr_free(nbr);
   26e48:	4620      	mov	r0, r4
   26e4a:	f7fe faa3 	bl	25394 <nbr_free>
   26e4e:	e7f0      	b.n	26e32 <ipv6_nd_reachable_timeout+0xaa>
				data->ns_count++;
   26e50:	3301      	adds	r3, #1
   26e52:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
   26e56:	2300      	movs	r3, #0
   26e58:	3104      	adds	r1, #4
   26e5a:	9100      	str	r1, [sp, #0]
   26e5c:	9301      	str	r3, [sp, #4]
   26e5e:	461a      	mov	r2, r3
   26e60:	4619      	mov	r1, r3
   26e62:	68a0      	ldr	r0, [r4, #8]
   26e64:	f7fe fff2 	bl	25e4c <net_ipv6_send_ns>
   26e68:	e7e3      	b.n	26e32 <ipv6_nd_reachable_timeout+0xaa>
			data->state = NET_IPV6_NBR_STATE_STALE;
   26e6a:	2302      	movs	r3, #2
   26e6c:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
   26e70:	e7df      	b.n	26e32 <ipv6_nd_reachable_timeout+0xaa>
			data->state = NET_IPV6_NBR_STATE_PROBE;
   26e72:	2304      	movs	r3, #4
   26e74:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
			data->ns_count = 0;
   26e78:	2300      	movs	r3, #0
   26e7a:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
			if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   26e7e:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
   26e82:	68a0      	ldr	r0, [r4, #8]
   26e84:	2b02      	cmp	r3, #2
   26e86:	f101 0204 	add.w	r2, r1, #4
   26e8a:	d90b      	bls.n	26ea4 <ipv6_nd_reachable_timeout+0x11c>
				router = net_if_ipv6_router_lookup(nbr->iface,
   26e8c:	4611      	mov	r1, r2
   26e8e:	f7fa fe01 	bl	21a94 <net_if_ipv6_router_lookup>
				if (router && !router->is_infinite) {
   26e92:	2800      	cmp	r0, #0
   26e94:	d0cd      	beq.n	26e32 <ipv6_nd_reachable_timeout+0xaa>
   26e96:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   26e9a:	075b      	lsls	r3, r3, #29
   26e9c:	d4c9      	bmi.n	26e32 <ipv6_nd_reachable_timeout+0xaa>
					net_if_ipv6_router_rm(router);
   26e9e:	f7fa fe8b 	bl	21bb8 <net_if_ipv6_router_rm>
   26ea2:	e7d1      	b.n	26e48 <ipv6_nd_reachable_timeout+0xc0>
				data->ns_count++;
   26ea4:	3301      	adds	r3, #1
   26ea6:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
   26eaa:	2300      	movs	r3, #0
   26eac:	e9cd 2300 	strd	r2, r3, [sp]
   26eb0:	4619      	mov	r1, r3
   26eb2:	461a      	mov	r2, r3
   26eb4:	f7fe ffca 	bl	25e4c <net_ipv6_send_ns>
				net_ipv6_nbr_data(nbr)->reachable =
   26eb8:	68e3      	ldr	r3, [r4, #12]
   26eba:	9302      	str	r3, [sp, #8]
   26ebc:	f007 fd9c 	bl	2e9f8 <_impl_k_uptime_get>
   26ec0:	9b02      	ldr	r3, [sp, #8]
   26ec2:	e9c3 0106 	strd	r0, r1, [r3, #24]
				net_ipv6_nbr_data(nbr)->reachable_timeout =
   26ec6:	68e3      	ldr	r3, [r4, #12]
   26ec8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   26ecc:	621c      	str	r4, [r3, #32]
				if (!k_delayed_work_remaining_get(
   26ece:	4638      	mov	r0, r7
   26ed0:	f7fe fa86 	bl	253e0 <k_delayed_work_remaining_get>
   26ed4:	2800      	cmp	r0, #0
   26ed6:	d1ac      	bne.n	26e32 <ipv6_nd_reachable_timeout+0xaa>
					k_delayed_work_submit(
   26ed8:	4621      	mov	r1, r4
   26eda:	e789      	b.n	26df0 <ipv6_nd_reachable_timeout+0x68>
   26edc:	0002f058 	.word	0x0002f058
   26ee0:	0002ef38 	.word	0x0002ef38
   26ee4:	2000280c 	.word	0x2000280c
   26ee8:	2000e28c 	.word	0x2000e28c
   26eec:	0003508e 	.word	0x0003508e
   26ef0:	00035272 	.word	0x00035272
   26ef4:	2000dd18 	.word	0x2000dd18

00026ef8 <net_ipv6_send_rs>:
{
   26ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   26efa:	2100      	movs	r1, #0
{
   26efc:	b085      	sub	sp, #20
   26efe:	4607      	mov	r7, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   26f00:	f7fe fa16 	bl	25330 <net_if_get_ll_reserve>
   26f04:	2164      	movs	r1, #100	; 0x64
   26f06:	f7fb faa1 	bl	2244c <net_pkt_get_reserve_tx>
	if (!pkt) {
   26f0a:	4604      	mov	r4, r0
   26f0c:	b138      	cbz	r0, 26f1e <net_ipv6_send_rs+0x26>
	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   26f0e:	2164      	movs	r1, #100	; 0x64
   26f10:	f7fb fab4 	bl	2247c <net_pkt_get_frag>
	if (!frag) {
   26f14:	4606      	mov	r6, r0
   26f16:	b928      	cbnz	r0, 26f24 <net_ipv6_send_rs+0x2c>
		net_pkt_unref(pkt);
   26f18:	4620      	mov	r0, r4
   26f1a:	f7fb fb70 	bl	225fe <net_pkt_unref>
		return -ENOMEM;
   26f1e:	f06f 050b 	mvn.w	r5, #11
   26f22:	e089      	b.n	27038 <net_ipv6_send_rs+0x140>
	net_pkt_frag_add(pkt, frag);
   26f24:	4601      	mov	r1, r0
   26f26:	4620      	mov	r0, r4
   26f28:	f7fb fb90 	bl	2264c <net_pkt_frag_add>
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   26f2c:	683b      	ldr	r3, [r7, #0]
	pkt->iface = iface;
   26f2e:	6227      	str	r7, [r4, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   26f30:	7d5b      	ldrb	r3, [r3, #21]
   26f32:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   26f36:	683b      	ldr	r3, [r7, #0]
   26f38:	7d5b      	ldrb	r3, [r3, #21]
   26f3a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	pkt->family = family;
   26f3e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   26f42:	220a      	movs	r2, #10
   26f44:	f362 03c6 	bfi	r3, r2, #3, #4
   26f48:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	pkt->ip_hdr_len = len;
   26f4c:	2328      	movs	r3, #40	; 0x28
   26f4e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	net_pkt_ll_clear(pkt);
   26f52:	4620      	mov	r0, r4
   26f54:	f7fe facd 	bl	254f2 <net_pkt_ll_clear>
	return pkt->frags->data;
   26f58:	6963      	ldr	r3, [r4, #20]
   26f5a:	689b      	ldr	r3, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   26f5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26f60:	2102      	movs	r1, #2
   26f62:	761a      	strb	r2, [r3, #24]
   26f64:	7659      	strb	r1, [r3, #25]
   26f66:	2200      	movs	r2, #0
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   26f68:	769a      	strb	r2, [r3, #26]
   26f6a:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   26f6c:	771a      	strb	r2, [r3, #28]
   26f6e:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   26f70:	779a      	strb	r2, [r3, #30]
   26f72:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   26f74:	f883 2020 	strb.w	r2, [r3, #32]
   26f78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   26f7c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   26f80:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   26f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   26f88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   26f8c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   26f90:	2201      	movs	r2, #1
   26f92:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   26f96:	6963      	ldr	r3, [r4, #20]
   26f98:	689d      	ldr	r5, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   26f9a:	4638      	mov	r0, r7
   26f9c:	f105 0118 	add.w	r1, r5, #24
   26fa0:	f7fa fe4c 	bl	21c3c <net_if_ipv6_select_src_addr>
   26fa4:	466a      	mov	r2, sp
   26fa6:	4603      	mov	r3, r0
   26fa8:	f100 0e10 	add.w	lr, r0, #16
   26fac:	4617      	mov	r7, r2
   26fae:	6818      	ldr	r0, [r3, #0]
   26fb0:	6859      	ldr	r1, [r3, #4]
   26fb2:	4694      	mov	ip, r2
   26fb4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   26fb8:	3308      	adds	r3, #8
   26fba:	4573      	cmp	r3, lr
   26fbc:	4662      	mov	r2, ip
   26fbe:	d1f6      	bne.n	26fae <net_ipv6_send_rs+0xb6>
   26fc0:	f105 0308 	add.w	r3, r5, #8
   26fc4:	ad04      	add	r5, sp, #16
   26fc6:	463a      	mov	r2, r7
   26fc8:	ca03      	ldmia	r2!, {r0, r1}
   26fca:	42aa      	cmp	r2, r5
   26fcc:	6018      	str	r0, [r3, #0]
   26fce:	6059      	str	r1, [r3, #4]
   26fd0:	4617      	mov	r7, r2
   26fd2:	f103 0308 	add.w	r3, r3, #8
   26fd6:	d1f6      	bne.n	26fc6 <net_ipv6_send_rs+0xce>
   26fd8:	6963      	ldr	r3, [r4, #20]
	unspec_src = net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src);
   26fda:	6898      	ldr	r0, [r3, #8]
   26fdc:	3008      	adds	r0, #8
   26fde:	f7fe f99a 	bl	25316 <net_is_ipv6_addr_unspecified>
	if (!unspec_src) {
   26fe2:	4607      	mov	r7, r0
   26fe4:	bb58      	cbnz	r0, 2703e <net_ipv6_send_rs+0x146>
		llao_len = get_llao_len(net_pkt_iface(pkt));
   26fe6:	6a20      	ldr	r0, [r4, #32]
   26fe8:	f7fe faa8 	bl	2553c <get_llao_len>
   26fec:	4605      	mov	r5, r0
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   26fee:	1d29      	adds	r1, r5, #4
   26ff0:	b2c9      	uxtb	r1, r1
   26ff2:	4620      	mov	r0, r4
   26ff4:	2285      	movs	r2, #133	; 0x85
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   26ff6:	3608      	adds	r6, #8
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   26ff8:	f7fe fa58 	bl	254ac <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   26ffc:	2104      	movs	r1, #4
   26ffe:	4630      	mov	r0, r6
   27000:	f7f8 f986 	bl	1f310 <net_buf_simple_add>
	if (!unspec_src) {
   27004:	b987      	cbnz	r7, 27028 <net_ipv6_send_rs+0x130>
		net_buf_add(frag, llao_len);
   27006:	4629      	mov	r1, r5
   27008:	4630      	mov	r0, r6
   2700a:	f7f8 f981 	bl	1f310 <net_buf_simple_add>
		set_llao(net_if_get_link_addr(net_pkt_iface(pkt)),
   2700e:	6a23      	ldr	r3, [r4, #32]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   27010:	4620      	mov	r0, r4
	return &iface->if_dev->link_addr;
   27012:	681e      	ldr	r6, [r3, #0]
   27014:	f7fb fdd3 	bl	22bbe <net_pkt_icmp_data>
   27018:	3610      	adds	r6, #16
		set_llao(net_if_get_link_addr(net_pkt_iface(pkt)),
   2701a:	f100 0108 	add.w	r1, r0, #8
   2701e:	2301      	movs	r3, #1
   27020:	462a      	mov	r2, r5
   27022:	4630      	mov	r0, r6
   27024:	f7fe fa74 	bl	25510 <set_llao>
	ret = net_icmpv6_set_chksum(pkt);
   27028:	4620      	mov	r0, r4
   2702a:	f7fd f88d 	bl	24148 <net_icmpv6_set_chksum>
	if (ret < 0) {
   2702e:	1e05      	subs	r5, r0, #0
		net_pkt_unref(pkt);
   27030:	4620      	mov	r0, r4
	if (ret < 0) {
   27032:	da06      	bge.n	27042 <net_ipv6_send_rs+0x14a>
		net_pkt_unref(pkt);
   27034:	f7fb fae3 	bl	225fe <net_pkt_unref>
}
   27038:	4628      	mov	r0, r5
   2703a:	b005      	add	sp, #20
   2703c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	u8_t llao_len = 0;
   2703e:	2500      	movs	r5, #0
   27040:	e7d5      	b.n	26fee <net_ipv6_send_rs+0xf6>
	if (net_send_data(pkt) < 0) {
   27042:	f7f9 fbe3 	bl	2080c <net_send_data>
   27046:	2800      	cmp	r0, #0
   27048:	da05      	bge.n	27056 <net_ipv6_send_rs+0x15e>
	net_pkt_unref(pkt);
   2704a:	4620      	mov	r0, r4
   2704c:	f7fb fad7 	bl	225fe <net_pkt_unref>
	return -EINVAL;
   27050:	f06f 0515 	mvn.w	r5, #21
   27054:	e7f0      	b.n	27038 <net_ipv6_send_rs+0x140>
	return 0;
   27056:	2500      	movs	r5, #0
   27058:	e7ee      	b.n	27038 <net_ipv6_send_rs+0x140>

0002705a <net_ipv6_start_rs>:
	return net_ipv6_send_rs(iface);
   2705a:	f7ff bf4d 	b.w	26ef8 <net_ipv6_send_rs>
	...

00027060 <net_ipv6_nbr_init>:
	.handler = handle_ra_input,
};
#endif /* CONFIG_NET_IPV6_ND */

void net_ipv6_nbr_init(void)
{
   27060:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   27062:	4809      	ldr	r0, [pc, #36]	; (27088 <net_ipv6_nbr_init+0x28>)
   27064:	f7fd f84a 	bl	240fc <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   27068:	4808      	ldr	r0, [pc, #32]	; (2708c <net_ipv6_nbr_init+0x2c>)
   2706a:	f7fd f847 	bl	240fc <net_icmpv6_register_handler>
	k_delayed_work_init(&ipv6_ns_reply_timer, ipv6_ns_reply_timeout);
   2706e:	4908      	ldr	r1, [pc, #32]	; (27090 <net_ipv6_nbr_init+0x30>)
   27070:	4808      	ldr	r0, [pc, #32]	; (27094 <net_ipv6_nbr_init+0x34>)
   27072:	f007 faf3 	bl	2e65c <k_delayed_work_init>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   27076:	4808      	ldr	r0, [pc, #32]	; (27098 <net_ipv6_nbr_init+0x38>)
   27078:	f7fd f840 	bl	240fc <net_icmpv6_register_handler>
	k_delayed_work_init(&ipv6_nd_reachable_timer,
   2707c:	4907      	ldr	r1, [pc, #28]	; (2709c <net_ipv6_nbr_init+0x3c>)
   2707e:	4808      	ldr	r0, [pc, #32]	; (270a0 <net_ipv6_nbr_init+0x40>)
			    ipv6_nd_reachable_timeout);
#endif
}
   27080:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&ipv6_nd_reachable_timer,
   27084:	f007 baea 	b.w	2e65c <k_delayed_work_init>
   27088:	2000dee0 	.word	0x2000dee0
   2708c:	2000dd00 	.word	0x2000dd00
   27090:	0002540d 	.word	0x0002540d
   27094:	2000282c 	.word	0x2000282c
   27098:	2000deec 	.word	0x2000deec
   2709c:	00026d89 	.word	0x00026d89
   270a0:	2000280c 	.word	0x2000280c

000270a4 <net_if_get_ll_reserve>:
	return iface->if_dev->l2;
   270a4:	6803      	ldr	r3, [r0, #0]
	return net_if_l2(iface)->reserve(iface, (void *)dst_ip6);
   270a6:	685b      	ldr	r3, [r3, #4]
   270a8:	689b      	ldr	r3, [r3, #8]
   270aa:	4718      	bx	r3

000270ac <net_pkt_append_u8_timeout.constprop.14>:
static inline bool net_pkt_append_u8_timeout(struct net_pkt *pkt, u8_t data,
   270ac:	b507      	push	{r0, r1, r2, lr}
   270ae:	aa02      	add	r2, sp, #8
	return net_pkt_append(pkt, len, data, timeout) == len;
   270b0:	2332      	movs	r3, #50	; 0x32
static inline bool net_pkt_append_u8_timeout(struct net_pkt *pkt, u8_t data,
   270b2:	f802 1d01 	strb.w	r1, [r2, #-1]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   270b6:	2101      	movs	r1, #1
   270b8:	f7fb fbf6 	bl	228a8 <net_pkt_append>
}
   270bc:	1e43      	subs	r3, r0, #1
   270be:	4258      	negs	r0, r3
   270c0:	4158      	adcs	r0, r3
   270c2:	b003      	add	sp, #12
   270c4:	f85d fb04 	ldr.w	pc, [sp], #4

000270c8 <net_pkt_append_be16_timeout.constprop.13>:
static inline bool net_pkt_append_be16_timeout(struct net_pkt *pkt,
   270c8:	b507      	push	{r0, r1, r2, lr}
	u16_t value = sys_cpu_to_be16(data);
   270ca:	aa02      	add	r2, sp, #8
   270cc:	ba49      	rev16	r1, r1
   270ce:	f822 1d02 	strh.w	r1, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   270d2:	2332      	movs	r3, #50	; 0x32
   270d4:	2102      	movs	r1, #2
   270d6:	f7fb fbe7 	bl	228a8 <net_pkt_append>
}
   270da:	1e83      	subs	r3, r0, #2
   270dc:	4258      	negs	r0, r3
   270de:	4158      	adcs	r0, r3
   270e0:	b003      	add	sp, #12
   270e2:	f85d fb04 	ldr.w	pc, [sp], #4

000270e6 <create_mldv2>:

static struct net_pkt *create_mldv2(struct net_pkt *pkt,
				    const struct in6_addr *addr,
				    u16_t record_type,
				    u8_t num_sources)
{
   270e6:	b570      	push	{r4, r5, r6, lr}
   270e8:	460d      	mov	r5, r1
	int ret;

	append(pkt, u8, record_type);
   270ea:	b2d1      	uxtb	r1, r2
{
   270ec:	4604      	mov	r4, r0
   270ee:	461e      	mov	r6, r3
	append(pkt, u8, record_type);
   270f0:	f7ff ffdc 	bl	270ac <net_pkt_append_u8_timeout.constprop.14>
   270f4:	b910      	cbnz	r0, 270fc <create_mldv2+0x16>
	}

	return pkt;

drop:
	return NULL;
   270f6:	2400      	movs	r4, #0
}
   270f8:	4620      	mov	r0, r4
   270fa:	bd70      	pop	{r4, r5, r6, pc}
	append(pkt, u8, 0);             /* aux data len */
   270fc:	2100      	movs	r1, #0
   270fe:	4620      	mov	r0, r4
   27100:	f7ff ffd4 	bl	270ac <net_pkt_append_u8_timeout.constprop.14>
   27104:	2800      	cmp	r0, #0
   27106:	d0f6      	beq.n	270f6 <create_mldv2+0x10>
	append(pkt, be16, num_sources); /* number of addresses */
   27108:	4631      	mov	r1, r6
   2710a:	4620      	mov	r0, r4
   2710c:	f7ff ffdc 	bl	270c8 <net_pkt_append_be16_timeout.constprop.13>
   27110:	2800      	cmp	r0, #0
   27112:	d0f0      	beq.n	270f6 <create_mldv2+0x10>
	return net_pkt_append(pkt, len, data, timeout) == len;
   27114:	462a      	mov	r2, r5
   27116:	2332      	movs	r3, #50	; 0x32
   27118:	2110      	movs	r1, #16
   2711a:	4620      	mov	r0, r4
   2711c:	f7fb fbc4 	bl	228a8 <net_pkt_append>
	append_all(pkt, sizeof(struct in6_addr), addr->s6_addr);
   27120:	2810      	cmp	r0, #16
   27122:	4605      	mov	r5, r0
   27124:	d1e7      	bne.n	270f6 <create_mldv2+0x10>
	if (num_sources > 0) {
   27126:	2e00      	cmp	r6, #0
   27128:	d0e6      	beq.n	270f8 <create_mldv2+0x12>
		append_all(pkt, sizeof(struct in6_addr),
   2712a:	f7fd ff1b 	bl	24f64 <net_ipv6_unspecified_address>
   2712e:	2332      	movs	r3, #50	; 0x32
   27130:	4602      	mov	r2, r0
   27132:	4629      	mov	r1, r5
   27134:	4620      	mov	r0, r4
   27136:	f7fb fbb7 	bl	228a8 <net_pkt_append>
   2713a:	2810      	cmp	r0, #16
   2713c:	d0dc      	beq.n	270f8 <create_mldv2+0x12>
   2713e:	e7da      	b.n	270f6 <create_mldv2+0x10>

00027140 <send_mldv2_raw>:

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   27140:	b5f0      	push	{r4, r5, r6, r7, lr}
   27142:	b08b      	sub	sp, #44	; 0x2c
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   27144:	f240 23ff 	movw	r3, #767	; 0x2ff
   27148:	4606      	mov	r6, r0
   2714a:	460f      	mov	r7, r1
   2714c:	f8ad 3018 	strh.w	r3, [sp, #24]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   27150:	2500      	movs	r5, #0
   27152:	f8ad 501a 	strh.w	r5, [sp, #26]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   27156:	f8ad 501c 	strh.w	r5, [sp, #28]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   2715a:	f8ad 501e 	strh.w	r5, [sp, #30]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   2715e:	f8ad 5020 	strh.w	r5, [sp, #32]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   27162:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   27166:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   2716a:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   2716e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   27172:	a906      	add	r1, sp, #24
   27174:	f7ff ff96 	bl	270a4 <net_if_get_ll_reserve>
   27178:	2132      	movs	r1, #50	; 0x32
   2717a:	f7fb f967 	bl	2244c <net_pkt_get_reserve_tx>
				     NET_BUF_TIMEOUT);
	if (!pkt) {
   2717e:	4604      	mov	r4, r0
   27180:	2800      	cmp	r0, #0
   27182:	f000 809b 	beq.w	272bc <send_mldv2_raw+0x17c>
		return -ENOMEM;
	}

	if (!net_ipv6_create(pkt,
   27186:	a906      	add	r1, sp, #24
   27188:	4630      	mov	r0, r6
   2718a:	f7fa fd57 	bl	21c3c <net_if_ipv6_select_src_addr>
   2718e:	9500      	str	r5, [sp, #0]
   27190:	4601      	mov	r1, r0
   27192:	4633      	mov	r3, r6
   27194:	aa06      	add	r2, sp, #24
   27196:	4620      	mov	r0, r4
   27198:	f7fd fee8 	bl	24f6c <net_ipv6_create>
   2719c:	b938      	cbnz	r0, 271ae <send_mldv2_raw+0x6e>
			     net_if_ipv6_select_src_addr(iface, &dst),
			     &dst,
			     iface,
			     NET_IPV6_NEXTHDR_HBHO)) {
		ret = -ENOMEM;
   2719e:	f06f 050b 	mvn.w	r5, #11

drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));
	net_stats_update_ipv6_mld_drop(net_pkt_iface(pkt));

	net_pkt_unref(pkt);
   271a2:	4620      	mov	r0, r4
   271a4:	f7fb fa2b 	bl	225fe <net_pkt_unref>

	return ret;
}
   271a8:	4628      	mov	r0, r5
   271aa:	b00b      	add	sp, #44	; 0x2c
   271ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   271ae:	6963      	ldr	r3, [r4, #20]
   271b0:	689a      	ldr	r2, [r3, #8]
   271b2:	2101      	movs	r1, #1
   271b4:	71d1      	strb	r1, [r2, #7]
	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   271b6:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   271b8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
	append(pkt, u8, IPPROTO_ICMPV6);
   271bc:	213a      	movs	r1, #58	; 0x3a
   271be:	4620      	mov	r0, r4
   271c0:	f7ff ff74 	bl	270ac <net_pkt_append_u8_timeout.constprop.14>
   271c4:	2800      	cmp	r0, #0
   271c6:	d0ea      	beq.n	2719e <send_mldv2_raw+0x5e>
	append(pkt, u8, 0);        /* length (0 means 8 bytes) */
   271c8:	4629      	mov	r1, r5
   271ca:	4620      	mov	r0, r4
   271cc:	f7ff ff6e 	bl	270ac <net_pkt_append_u8_timeout.constprop.14>
   271d0:	2800      	cmp	r0, #0
   271d2:	d0e4      	beq.n	2719e <send_mldv2_raw+0x5e>
	append(pkt, be16, 0x0502); /* RFC 2711 ch 2.1 */
   271d4:	f240 5102 	movw	r1, #1282	; 0x502
   271d8:	4620      	mov	r0, r4
   271da:	f7ff ff75 	bl	270c8 <net_pkt_append_be16_timeout.constprop.13>
   271de:	2800      	cmp	r0, #0
   271e0:	d0dd      	beq.n	2719e <send_mldv2_raw+0x5e>
	append(pkt, be16, 0);      /* pkt contains MLD msg */
   271e2:	4629      	mov	r1, r5
   271e4:	4620      	mov	r0, r4
   271e6:	f7ff ff6f 	bl	270c8 <net_pkt_append_be16_timeout.constprop.13>
   271ea:	2800      	cmp	r0, #0
   271ec:	d0d7      	beq.n	2719e <send_mldv2_raw+0x5e>
	append(pkt, u8, 0);        /* padding */
   271ee:	4629      	mov	r1, r5
   271f0:	4620      	mov	r0, r4
   271f2:	f7ff ff5b 	bl	270ac <net_pkt_append_u8_timeout.constprop.14>
   271f6:	2800      	cmp	r0, #0
   271f8:	d0d1      	beq.n	2719e <send_mldv2_raw+0x5e>
	append(pkt, u8, 0);        /* padding */
   271fa:	4629      	mov	r1, r5
   271fc:	4620      	mov	r0, r4
   271fe:	f7ff ff55 	bl	270ac <net_pkt_append_u8_timeout.constprop.14>
   27202:	2800      	cmp	r0, #0
   27204:	d0cb      	beq.n	2719e <send_mldv2_raw+0x5e>
	append(pkt, u8, NET_ICMPV6_MLDv2); /* type */
   27206:	218f      	movs	r1, #143	; 0x8f
   27208:	4620      	mov	r0, r4
   2720a:	f7ff ff4f 	bl	270ac <net_pkt_append_u8_timeout.constprop.14>
   2720e:	2800      	cmp	r0, #0
   27210:	d0c5      	beq.n	2719e <send_mldv2_raw+0x5e>
	append(pkt, u8, 0);                /* code */
   27212:	4629      	mov	r1, r5
   27214:	4620      	mov	r0, r4
   27216:	f7ff ff49 	bl	270ac <net_pkt_append_u8_timeout.constprop.14>
   2721a:	2800      	cmp	r0, #0
   2721c:	d0bf      	beq.n	2719e <send_mldv2_raw+0x5e>
	append(pkt, be16, 0);              /* chksum */
   2721e:	2100      	movs	r1, #0
   27220:	4620      	mov	r0, r4
   27222:	f7ff ff51 	bl	270c8 <net_pkt_append_be16_timeout.constprop.13>
   27226:	2800      	cmp	r0, #0
   27228:	d0b9      	beq.n	2719e <send_mldv2_raw+0x5e>
	append(pkt, be16, 0);              /* reserved field */
   2722a:	2100      	movs	r1, #0
   2722c:	4620      	mov	r0, r4
   2722e:	f7ff ff4b 	bl	270c8 <net_pkt_append_be16_timeout.constprop.13>
   27232:	2800      	cmp	r0, #0
   27234:	d0b3      	beq.n	2719e <send_mldv2_raw+0x5e>
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   27236:	6833      	ldr	r3, [r6, #0]
	pkt->iface = iface;
   27238:	6226      	str	r6, [r4, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   2723a:	7d5b      	ldrb	r3, [r3, #21]
   2723c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   27240:	6833      	ldr	r3, [r6, #0]
   27242:	7d5b      	ldrb	r3, [r3, #21]
   27244:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	net_pkt_frag_add(pkt, frags);
   27248:	4639      	mov	r1, r7
   2724a:	4620      	mov	r0, r4
   2724c:	f7fb f9fe 	bl	2264c <net_pkt_frag_add>
	ret = net_ipv6_finalize(pkt, NET_IPV6_NEXTHDR_HBHO);
   27250:	2100      	movs	r1, #0
   27252:	4620      	mov	r0, r4
   27254:	f7fd fefe 	bl	25054 <net_ipv6_finalize>
	if (ret < 0) {
   27258:	1e05      	subs	r5, r0, #0
   2725a:	dba2      	blt.n	271a2 <send_mldv2_raw+0x62>
	pkt->ipv6_ext_len = len;
   2725c:	2308      	movs	r3, #8
   2725e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   27262:	213a      	movs	r1, #58	; 0x3a
   27264:	4620      	mov	r0, r4
	if (!net_pkt_write_be16_timeout(pkt, pkt->frags,
   27266:	6966      	ldr	r6, [r4, #20]
   27268:	f7fc f84a 	bl	23300 <net_calc_chksum>
   2726c:	213a      	movs	r1, #58	; 0x3a
   2726e:	4605      	mov	r5, r0
   27270:	4620      	mov	r0, r4
   27272:	f7fc f845 	bl	23300 <net_calc_chksum>
					ntohs(~net_calc_chksum_icmpv6(pkt)),
   27276:	ea6f 2525 	mvn.w	r5, r5, asr #8
   2727a:	b2ed      	uxtb	r5, r5
   2727c:	43c0      	mvns	r0, r0
   2727e:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
	if (!net_pkt_write_be16_timeout(pkt, pkt->frags,
   27282:	b280      	uxth	r0, r0
							 u16_t offset,
							 u16_t *pos,
							 u16_t data,
							 s32_t timeout)
{
	u16_t value = htons(data);
   27284:	0203      	lsls	r3, r0, #8
   27286:	ea43 2010 	orr.w	r0, r3, r0, lsr #8

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   2728a:	f10d 0316 	add.w	r3, sp, #22
   2728e:	2232      	movs	r2, #50	; 0x32
   27290:	9301      	str	r3, [sp, #4]
   27292:	2302      	movs	r3, #2
	u16_t value = htons(data);
   27294:	f8ad 0016 	strh.w	r0, [sp, #22]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   27298:	9300      	str	r3, [sp, #0]
   2729a:	9202      	str	r2, [sp, #8]
   2729c:	ab05      	add	r3, sp, #20
   2729e:	4631      	mov	r1, r6
   272a0:	4620      	mov	r0, r4
   272a2:	f7fb fbbb 	bl	22a1c <net_pkt_write>
   272a6:	2800      	cmp	r0, #0
   272a8:	f43f af79 	beq.w	2719e <send_mldv2_raw+0x5e>
	ret = net_send_data(pkt);
   272ac:	4620      	mov	r0, r4
   272ae:	f7f9 faad 	bl	2080c <net_send_data>
	if (ret < 0) {
   272b2:	1e05      	subs	r5, r0, #0
   272b4:	f6ff af75 	blt.w	271a2 <send_mldv2_raw+0x62>
	return 0;
   272b8:	2500      	movs	r5, #0
   272ba:	e775      	b.n	271a8 <send_mldv2_raw+0x68>
		return -ENOMEM;
   272bc:	f06f 050b 	mvn.w	r5, #11
   272c0:	e772      	b.n	271a8 <send_mldv2_raw+0x68>

000272c2 <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   272c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   272c4:	460e      	mov	r6, r1
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   272c6:	2100      	movs	r1, #0
{
   272c8:	4617      	mov	r7, r2
   272ca:	4605      	mov	r5, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   272cc:	f7ff feea 	bl	270a4 <net_if_get_ll_reserve>
   272d0:	2132      	movs	r1, #50	; 0x32
   272d2:	f7fb f8bb 	bl	2244c <net_pkt_get_reserve_tx>
				     NET_BUF_TIMEOUT);
	if (!pkt) {
   272d6:	4604      	mov	r4, r0
   272d8:	b1d0      	cbz	r0, 27310 <send_mldv2+0x4e>
		return -ENOMEM;
	}

	append(pkt, be16, 1); /* number of records */
   272da:	2101      	movs	r1, #1
   272dc:	f7ff fef4 	bl	270c8 <net_pkt_append_be16_timeout.constprop.13>
   272e0:	b930      	cbnz	r0, 272f0 <send_mldv2+0x2e>
   272e2:	f06f 050b 	mvn.w	r5, #11
	ret = send_mldv2_raw(iface, pkt->frags);

	pkt->frags = NULL;

drop:
	net_pkt_unref(pkt);
   272e6:	4620      	mov	r0, r4
   272e8:	f7fb f989 	bl	225fe <net_pkt_unref>

	return ret;
}
   272ec:	4628      	mov	r0, r5
   272ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!create_mldv2(pkt, addr, mode, 1)) {
   272f0:	2301      	movs	r3, #1
   272f2:	463a      	mov	r2, r7
   272f4:	4631      	mov	r1, r6
   272f6:	4620      	mov	r0, r4
   272f8:	f7ff fef5 	bl	270e6 <create_mldv2>
   272fc:	2800      	cmp	r0, #0
   272fe:	d0f0      	beq.n	272e2 <send_mldv2+0x20>
	ret = send_mldv2_raw(iface, pkt->frags);
   27300:	4628      	mov	r0, r5
   27302:	6961      	ldr	r1, [r4, #20]
   27304:	f7ff ff1c 	bl	27140 <send_mldv2_raw>
	pkt->frags = NULL;
   27308:	2300      	movs	r3, #0
	ret = send_mldv2_raw(iface, pkt->frags);
   2730a:	4605      	mov	r5, r0
	pkt->frags = NULL;
   2730c:	6163      	str	r3, [r4, #20]
   2730e:	e7ea      	b.n	272e6 <send_mldv2+0x24>
		return -ENOMEM;
   27310:	f06f 050b 	mvn.w	r5, #11
   27314:	e7ea      	b.n	272ec <send_mldv2+0x2a>
	...

00027318 <handle_mld_query>:

#define dbg_addr_recv(pkt_str, src, dst)	\
	dbg_addr("Received", pkt_str, src, dst)

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   27318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u16_t total_len = net_pkt_get_len(pkt);
   2731c:	6947      	ldr	r7, [r0, #20]
{
   2731e:	b08c      	sub	sp, #48	; 0x30
   27320:	4604      	mov	r4, r0
	size_t bytes = 0;
   27322:	2500      	movs	r5, #0
	while (buf) {
   27324:	2f00      	cmp	r7, #0
   27326:	f040 80c3 	bne.w	274b0 <handle_mld_query+0x198>
		      &NET_IPV6_HDR(pkt)->dst);

	net_stats_update_ipv6_mld_recv(net_pkt_iface(pkt));

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
   2732a:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   2732e:	1d0b      	adds	r3, r1, #4
				net_pkt_ip_hdr_len(pkt) +
   27330:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
	frag = net_frag_get_pos(pkt,
   27334:	4419      	add	r1, r3
   27336:	aa06      	add	r2, sp, #24
   27338:	b289      	uxth	r1, r1
   2733a:	4620      	mov	r0, r4
   2733c:	f7fb fc36 	bl	22bac <net_frag_get_pos>
				net_pkt_ipv6_ext_len(pkt) +
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   27340:	ab05      	add	r3, sp, #20
   27342:	f10d 021a 	add.w	r2, sp, #26
   27346:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   2734a:	f7fb fb4b 	bl	229e4 <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   2734e:	ae08      	add	r6, sp, #32
	return net_frag_read(frag, offset, pos, len, NULL);
   27350:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   27354:	9700      	str	r7, [sp, #0]
   27356:	2302      	movs	r3, #2
   27358:	f10d 021a 	add.w	r2, sp, #26
   2735c:	f7fb fae8 	bl	22930 <net_frag_read>
   27360:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   27364:	9600      	str	r6, [sp, #0]
   27366:	2310      	movs	r3, #16
   27368:	f10d 021a 	add.w	r2, sp, #26
   2736c:	f7fb fae0 	bl	22930 <net_frag_read>
   27370:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   27374:	9700      	str	r7, [sp, #0]
   27376:	2302      	movs	r3, #2
   27378:	f10d 021a 	add.w	r2, sp, #26
   2737c:	f7fb fad8 	bl	22930 <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   27380:	f10d 0316 	add.w	r3, sp, #22
   27384:	f10d 021a 	add.w	r2, sp, #26
   27388:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   2738c:	6960      	ldr	r0, [r4, #20]
	u16_t total_len = net_pkt_get_len(pkt);
   2738e:	b2ad      	uxth	r5, r5
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   27390:	f7fb fb28 	bl	229e4 <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   27394:	b930      	cbnz	r0, 273a4 <handle_mld_query+0x8c>
   27396:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   2739a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2739e:	429a      	cmp	r2, r3
   273a0:	f000 8082 	beq.w	274a8 <handle_mld_query+0x190>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   273a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   273a8:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
		sizeof(struct in6_addr) * num_src;
   273ac:	011b      	lsls	r3, r3, #4
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   273ae:	3344      	adds	r3, #68	; 0x44
   273b0:	4413      	add	r3, r2
   273b2:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   273b4:	42ab      	cmp	r3, r5
   273b6:	d807      	bhi.n	273c8 <handle_mld_query+0xb0>
   273b8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   273bc:	d804      	bhi.n	273c8 <handle_mld_query+0xb0>
	return pkt->frags->data;
   273be:	6963      	ldr	r3, [r4, #20]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   273c0:	689b      	ldr	r3, [r3, #8]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   273c2:	79db      	ldrb	r3, [r3, #7]
   273c4:	2b01      	cmp	r3, #1
   273c6:	d009      	beq.n	273dc <handle_mld_query+0xc4>
		struct net_icmp_hdr icmp_hdr;

		ret = net_icmpv6_get_hdr(pkt, &icmp_hdr);
   273c8:	a907      	add	r1, sp, #28
   273ca:	4620      	mov	r0, r4
   273cc:	f7fc ff0a 	bl	241e4 <net_icmpv6_get_hdr>
		if (ret < 0 || icmp_hdr.code != 0) {
   273d0:	2800      	cmp	r0, #0
   273d2:	db69      	blt.n	274a8 <handle_mld_query+0x190>
   273d4:	f89d 301d 	ldrb.w	r3, [sp, #29]
   273d8:	2b00      	cmp	r3, #0
   273da:	d165      	bne.n	274a8 <handle_mld_query+0x190>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   273dc:	f7fd fdc2 	bl	24f64 <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   273e0:	2210      	movs	r2, #16
   273e2:	4601      	mov	r1, r0
   273e4:	4630      	mov	r0, r6
   273e6:	f7df fc28 	bl	6c3a <memcmp>
   273ea:	4605      	mov	r5, r0
   273ec:	2800      	cmp	r0, #0
   273ee:	d15b      	bne.n	274a8 <handle_mld_query+0x190>
		NET_DBG("Only supporting unspecified address query (%s)",
			log_strdup(net_sprint_ipv6_addr(&mcast)));
		goto drop;
	}

	send_mld_report(net_pkt_iface(pkt));
   273f0:	f8d4 8020 	ldr.w	r8, [r4, #32]
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   273f4:	f8d8 7004 	ldr.w	r7, [r8, #4]
	NET_ASSERT(ipv6);
   273f8:	b9a7      	cbnz	r7, 27424 <handle_mld_query+0x10c>
   273fa:	4b2f      	ldr	r3, [pc, #188]	; (274b8 <handle_mld_query+0x1a0>)
   273fc:	681b      	ldr	r3, [r3, #0]
   273fe:	0759      	lsls	r1, r3, #29
   27400:	d010      	beq.n	27424 <handle_mld_query+0x10c>
   27402:	2301      	movs	r3, #1
   27404:	f04f 0200 	mov.w	r2, #0
   27408:	f363 0202 	bfi	r2, r3, #0, #3
   2740c:	492b      	ldr	r1, [pc, #172]	; (274bc <handle_mld_query+0x1a4>)
   2740e:	4b2c      	ldr	r3, [pc, #176]	; (274c0 <handle_mld_query+0x1a8>)
   27410:	482c      	ldr	r0, [pc, #176]	; (274c4 <handle_mld_query+0x1ac>)
   27412:	1a5b      	subs	r3, r3, r1
   27414:	f367 02c5 	bfi	r2, r7, #3, #3
   27418:	08db      	lsrs	r3, r3, #3
   2741a:	f363 128f 	bfi	r2, r3, #6, #10
   2741e:	492a      	ldr	r1, [pc, #168]	; (274c8 <handle_mld_query+0x1b0>)
   27420:	f7da fe64 	bl	20ec <log_1>
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   27424:	2100      	movs	r1, #0
   27426:	4640      	mov	r0, r8
   27428:	f7ff fe3c 	bl	270a4 <net_if_get_ll_reserve>
   2742c:	2132      	movs	r1, #50	; 0x32
   2742e:	f7fb f80d 	bl	2244c <net_pkt_get_reserve_tx>
	if (!pkt) {
   27432:	4604      	mov	r4, r0
   27434:	2800      	cmp	r0, #0
   27436:	d037      	beq.n	274a8 <handle_mld_query+0x190>
	append(pkt, u8, 0); /* This will be the record count */
   27438:	2100      	movs	r1, #0
   2743a:	f7ff fe37 	bl	270ac <net_pkt_append_u8_timeout.constprop.14>
   2743e:	b380      	cbz	r0, 274a2 <handle_mld_query+0x18a>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   27440:	2600      	movs	r6, #0
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   27442:	f04f 0918 	mov.w	r9, #24
		if (!create_mldv2(pkt, &ipv6->mcast[i].address.in6_addr,
   27446:	f107 0adc 	add.w	sl, r7, #220	; 0xdc
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   2744a:	fb09 f106 	mul.w	r1, r9, r6
   2744e:	187b      	adds	r3, r7, r1
   27450:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
   27454:	07da      	lsls	r2, r3, #31
   27456:	d509      	bpl.n	2746c <handle_mld_query+0x154>
   27458:	079b      	lsls	r3, r3, #30
   2745a:	d507      	bpl.n	2746c <handle_mld_query+0x154>
		if (!create_mldv2(pkt, &ipv6->mcast[i].address.in6_addr,
   2745c:	2300      	movs	r3, #0
   2745e:	2202      	movs	r2, #2
   27460:	4451      	add	r1, sl
   27462:	4620      	mov	r0, r4
   27464:	f7ff fe3f 	bl	270e6 <create_mldv2>
   27468:	b1d8      	cbz	r0, 274a2 <handle_mld_query+0x18a>
		count++;
   2746a:	3501      	adds	r5, #1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   2746c:	3601      	adds	r6, #1
   2746e:	2e05      	cmp	r6, #5
   27470:	d1eb      	bne.n	2744a <handle_mld_query+0x132>
	if (count > 0) {
   27472:	2d00      	cmp	r5, #0
   27474:	dd15      	ble.n	274a2 <handle_mld_query+0x18a>
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   27476:	2332      	movs	r3, #50	; 0x32
		if (!net_pkt_write_u8_timeout(pkt, pkt->frags, 0, &pos,
   27478:	6961      	ldr	r1, [r4, #20]
   2747a:	9302      	str	r3, [sp, #8]
   2747c:	f10d 0313 	add.w	r3, sp, #19
   27480:	9301      	str	r3, [sp, #4]
   27482:	2301      	movs	r3, #1
   27484:	9300      	str	r3, [sp, #0]
   27486:	2200      	movs	r2, #0
   27488:	ab07      	add	r3, sp, #28
   2748a:	4620      	mov	r0, r4
   2748c:	f88d 5013 	strb.w	r5, [sp, #19]
   27490:	f7fb fac4 	bl	22a1c <net_pkt_write>
   27494:	b128      	cbz	r0, 274a2 <handle_mld_query+0x18a>
		send_mldv2_raw(iface, pkt->frags);
   27496:	6961      	ldr	r1, [r4, #20]
   27498:	4640      	mov	r0, r8
   2749a:	f7ff fe51 	bl	27140 <send_mldv2_raw>
		pkt->frags = NULL;
   2749e:	2300      	movs	r3, #0
   274a0:	6163      	str	r3, [r4, #20]
	net_pkt_unref(pkt);
   274a2:	4620      	mov	r0, r4
   274a4:	f7fb f8ab 	bl	225fe <net_pkt_unref>

drop:
	net_stats_update_ipv6_mld_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
   274a8:	2002      	movs	r0, #2
   274aa:	b00c      	add	sp, #48	; 0x30
   274ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   274b0:	89bb      	ldrh	r3, [r7, #12]
		buf = buf->frags;
   274b2:	683f      	ldr	r7, [r7, #0]
		bytes += buf->len;
   274b4:	441d      	add	r5, r3
   274b6:	e735      	b.n	27324 <handle_mld_query+0xc>
   274b8:	2000e288 	.word	0x2000e288
   274bc:	0002ef38 	.word	0x0002ef38
   274c0:	0002f050 	.word	0x0002f050
   274c4:	00035382 	.word	0x00035382
   274c8:	00035372 	.word	0x00035372

000274cc <net_ipv6_mld_join>:
{
   274cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   274ce:	ab02      	add	r3, sp, #8
   274d0:	460d      	mov	r5, r1
   274d2:	f843 0d04 	str.w	r0, [r3, #-4]!
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   274d6:	4628      	mov	r0, r5
   274d8:	4619      	mov	r1, r3
   274da:	f7fa f8cd 	bl	21678 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   274de:	4604      	mov	r4, r0
   274e0:	b1f0      	cbz	r0, 27520 <net_ipv6_mld_join+0x54>
	return addr->is_joined;
   274e2:	7d03      	ldrb	r3, [r0, #20]
   274e4:	079b      	lsls	r3, r3, #30
   274e6:	d418      	bmi.n	2751a <net_ipv6_mld_join+0x4e>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   274e8:	2202      	movs	r2, #2
   274ea:	4629      	mov	r1, r5
   274ec:	9801      	ldr	r0, [sp, #4]
   274ee:	f7ff fee8 	bl	272c2 <send_mldv2>
	if (ret < 0) {
   274f2:	1e06      	subs	r6, r0, #0
   274f4:	db0e      	blt.n	27514 <net_ipv6_mld_join+0x48>
	addr->is_joined = true;
   274f6:	7d23      	ldrb	r3, [r4, #20]
	net_if_mcast_monitor(iface, addr, true);
   274f8:	9801      	ldr	r0, [sp, #4]
   274fa:	f043 0302 	orr.w	r3, r3, #2
   274fe:	7523      	strb	r3, [r4, #20]
   27500:	2201      	movs	r2, #1
   27502:	4629      	mov	r1, r5
   27504:	f7fa f8f4 	bl	216f0 <net_if_mcast_monitor>
   27508:	2300      	movs	r3, #0
   2750a:	461a      	mov	r2, r3
   2750c:	9901      	ldr	r1, [sp, #4]
   2750e:	4809      	ldr	r0, [pc, #36]	; (27534 <net_ipv6_mld_join+0x68>)
   27510:	f000 f8c6 	bl	276a0 <net_mgmt_event_notify_with_info>
}
   27514:	4630      	mov	r0, r6
   27516:	b002      	add	sp, #8
   27518:	bd70      	pop	{r4, r5, r6, pc}
		return -EALREADY;
   2751a:	f06f 0644 	mvn.w	r6, #68	; 0x44
   2751e:	e7f9      	b.n	27514 <net_ipv6_mld_join+0x48>
		maddr = net_if_ipv6_maddr_add(iface, addr);
   27520:	4629      	mov	r1, r5
   27522:	9801      	ldr	r0, [sp, #4]
   27524:	f7f9 feda 	bl	212dc <net_if_ipv6_maddr_add>
		if (!maddr) {
   27528:	4604      	mov	r4, r0
   2752a:	2800      	cmp	r0, #0
   2752c:	d1dc      	bne.n	274e8 <net_ipv6_mld_join+0x1c>
			return -ENOMEM;
   2752e:	f06f 060b 	mvn.w	r6, #11
   27532:	e7ef      	b.n	27514 <net_ipv6_mld_join+0x48>
   27534:	f0600007 	.word	0xf0600007

00027538 <net_ipv6_mld_leave>:
{
   27538:	b570      	push	{r4, r5, r6, lr}
   2753a:	4604      	mov	r4, r0
   2753c:	460e      	mov	r6, r1
	if (!net_if_ipv6_maddr_rm(iface, addr)) {
   2753e:	f7f9 ff05 	bl	2134c <net_if_ipv6_maddr_rm>
   27542:	b198      	cbz	r0, 2756c <net_ipv6_mld_leave+0x34>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_INCLUDE);
   27544:	2201      	movs	r2, #1
   27546:	4631      	mov	r1, r6
   27548:	4620      	mov	r0, r4
   2754a:	f7ff feba 	bl	272c2 <send_mldv2>
	if (ret < 0) {
   2754e:	1e05      	subs	r5, r0, #0
   27550:	db0a      	blt.n	27568 <net_ipv6_mld_leave+0x30>
	net_if_mcast_monitor(iface, addr, false);
   27552:	2200      	movs	r2, #0
   27554:	4631      	mov	r1, r6
   27556:	4620      	mov	r0, r4
   27558:	f7fa f8ca 	bl	216f0 <net_if_mcast_monitor>
   2755c:	2300      	movs	r3, #0
   2755e:	461a      	mov	r2, r3
   27560:	4621      	mov	r1, r4
   27562:	4804      	ldr	r0, [pc, #16]	; (27574 <net_ipv6_mld_leave+0x3c>)
   27564:	f000 f89c 	bl	276a0 <net_mgmt_event_notify_with_info>
}
   27568:	4628      	mov	r0, r5
   2756a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2756c:	f06f 0515 	mvn.w	r5, #21
   27570:	e7fa      	b.n	27568 <net_ipv6_mld_leave+0x30>
   27572:	bf00      	nop
   27574:	f0600008 	.word	0xf0600008

00027578 <net_ipv6_mld_init>:
	.handler = handle_mld_query,
};

void net_ipv6_mld_init(void)
{
	net_icmpv6_register_handler(&mld_query_input_handler);
   27578:	4801      	ldr	r0, [pc, #4]	; (27580 <net_ipv6_mld_init+0x8>)
   2757a:	f7fc bdbf 	b.w	240fc <net_icmpv6_register_handler>
   2757e:	bf00      	nop
   27580:	2000def8 	.word	0x2000def8

00027584 <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   27584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (out_event < 0 || !events[out_event].event) {
   27588:	4f3f      	ldr	r7, [pc, #252]	; (27688 <mgmt_thread+0x104>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2758a:	4840      	ldr	r0, [pc, #256]	; (2768c <mgmt_thread+0x108>)
   2758c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27590:	f006 fe9a 	bl	2e2c8 <_impl_k_sem_take>
   27594:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27598:	483d      	ldr	r0, [pc, #244]	; (27690 <mgmt_thread+0x10c>)
   2759a:	f006 fe95 	bl	2e2c8 <_impl_k_sem_take>
   2759e:	4b3d      	ldr	r3, [pc, #244]	; (27694 <mgmt_thread+0x110>)
   275a0:	f9b3 5000 	ldrsh.w	r5, [r3]
   275a4:	2d00      	cmp	r5, #0
   275a6:	db21      	blt.n	275ec <mgmt_thread+0x68>
   275a8:	f857 2035 	ldr.w	r2, [r7, r5, lsl #3]
   275ac:	b1f2      	cbz	r2, 275ec <mgmt_thread+0x68>
	if (o_idx == in_event) {
   275ae:	493a      	ldr	r1, [pc, #232]	; (27698 <mgmt_thread+0x114>)
   275b0:	f9b1 0000 	ldrsh.w	r0, [r1]
	out_event++;
   275b4:	1c6a      	adds	r2, r5, #1
   275b6:	b212      	sxth	r2, r2
	if (o_idx == in_event) {
   275b8:	42a8      	cmp	r0, r5
	out_event++;
   275ba:	801a      	strh	r2, [r3, #0]
	if (o_idx == in_event) {
   275bc:	d112      	bne.n	275e4 <mgmt_thread+0x60>
		in_event = -1;
   275be:	f64f 72ff 	movw	r2, #65535	; 0xffff
   275c2:	800a      	strh	r2, [r1, #0]
		out_event = 0;
   275c4:	801a      	strh	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   275c6:	4e35      	ldr	r6, [pc, #212]	; (2769c <mgmt_thread+0x118>)
   275c8:	6834      	ldr	r4, [r6, #0]
   275ca:	b9cc      	cbnz	r4, 27600 <mgmt_thread+0x7c>
	mgmt_event->event = 0;
   275cc:	2300      	movs	r3, #0
   275ce:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
	mgmt_event->iface = NULL;
   275d2:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   275d6:	482e      	ldr	r0, [pc, #184]	; (27690 <mgmt_thread+0x10c>)
   275d8:	606b      	str	r3, [r5, #4]
   275da:	f006 fe4e 	bl	2e27a <_impl_k_sem_give>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   275de:	f006 fdad 	bl	2e13c <_impl_k_yield>
   275e2:	e7d2      	b.n	2758a <mgmt_thread+0x6>
	} else if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   275e4:	2a02      	cmp	r2, #2
   275e6:	d1ee      	bne.n	275c6 <mgmt_thread+0x42>
		out_event = 0;
   275e8:	2200      	movs	r2, #0
   275ea:	e7eb      	b.n	275c4 <mgmt_thread+0x40>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   275ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   275f0:	2100      	movs	r1, #0
   275f2:	4826      	ldr	r0, [pc, #152]	; (2768c <mgmt_thread+0x108>)
   275f4:	f006 fe38 	bl	2e268 <_impl_k_sem_init>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   275f8:	4825      	ldr	r0, [pc, #148]	; (27690 <mgmt_thread+0x10c>)
   275fa:	f006 fe3e 	bl	2e27a <_impl_k_sem_give>
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);
			k_sem_give(&net_mgmt_lock);

			continue;
   275fe:	e7c4      	b.n	2758a <mgmt_thread+0x6>
	return node->next;
   27600:	f04f 0800 	mov.w	r8, #0
   27604:	f8d4 9000 	ldr.w	r9, [r4]
   27608:	eb07 0ac5 	add.w	sl, r7, r5, lsl #3
	parent->next = child;
   2760c:	46c3      	mov	fp, r8
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
   2760e:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   27612:	68a0      	ldr	r0, [r4, #8]
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
   27614:	ea81 0300 	eor.w	r3, r1, r0
   27618:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
   2761c:	d121      	bne.n	27662 <mgmt_thread+0xde>
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
   2761e:	f3c3 430a 	ubfx	r3, r3, #16, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   27622:	b9f3      	cbnz	r3, 27662 <mgmt_thread+0xde>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   27624:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   27626:	b11b      	cbz	r3, 27630 <mgmt_thread+0xac>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   27628:	b282      	uxth	r2, r0
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   2762a:	b10a      	cbz	r2, 27630 <mgmt_thread+0xac>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   2762c:	4218      	tst	r0, r3
   2762e:	d018      	beq.n	27662 <mgmt_thread+0xde>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   27630:	0100      	lsls	r0, r0, #4
   27632:	6863      	ldr	r3, [r4, #4]
   27634:	f8da 2004 	ldr.w	r2, [sl, #4]
   27638:	d522      	bpl.n	27680 <mgmt_thread+0xfc>
			if (sync_data->iface &&
   2763a:	6998      	ldr	r0, [r3, #24]
   2763c:	b108      	cbz	r0, 27642 <mgmt_thread+0xbe>
   2763e:	4282      	cmp	r2, r0
   27640:	d10f      	bne.n	27662 <mgmt_thread+0xde>
			cb->raised_event = mgmt_event->event;
   27642:	60a1      	str	r1, [r4, #8]
			sync_data->iface = mgmt_event->iface;
   27644:	619a      	str	r2, [r3, #24]
   27646:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   27648:	f1b8 0f00 	cmp.w	r8, #0
   2764c:	d110      	bne.n	27670 <mgmt_thread+0xec>
   2764e:	6871      	ldr	r1, [r6, #4]
	list->head = node;
   27650:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   27652:	428c      	cmp	r4, r1
   27654:	d100      	bne.n	27658 <mgmt_thread+0xd4>
	list->tail = node;
   27656:	6072      	str	r2, [r6, #4]
	parent->next = child;
   27658:	f8c4 b000 	str.w	fp, [r4]
   2765c:	4618      	mov	r0, r3
   2765e:	f006 fe0c 	bl	2e27a <_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   27662:	f1b9 0f00 	cmp.w	r9, #0
   27666:	d0b1      	beq.n	275cc <mgmt_thread+0x48>
	return node->next;
   27668:	464c      	mov	r4, r9
   2766a:	f8d9 9000 	ldr.w	r9, [r9]
   2766e:	e7ce      	b.n	2760e <mgmt_thread+0x8a>
	parent->next = child;
   27670:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   27674:	6872      	ldr	r2, [r6, #4]
   27676:	4294      	cmp	r4, r2
	list->tail = node;
   27678:	bf08      	it	eq
   2767a:	f8c6 8004 	streq.w	r8, [r6, #4]
   2767e:	e7eb      	b.n	27658 <mgmt_thread+0xd4>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   27680:	4620      	mov	r0, r4
   27682:	4798      	blx	r3
			prev = &cb->node;
   27684:	46a0      	mov	r8, r4
   27686:	e7ec      	b.n	27662 <mgmt_thread+0xde>
   27688:	20002854 	.word	0x20002854
   2768c:	2000e380 	.word	0x2000e380
   27690:	2000e368 	.word	0x2000e368
   27694:	200028d8 	.word	0x200028d8
   27698:	20002868 	.word	0x20002868
   2769c:	2000284c 	.word	0x2000284c

000276a0 <net_mgmt_event_notify_with_info>:
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
   276a0:	4b22      	ldr	r3, [pc, #136]	; (2772c <net_mgmt_event_notify_with_info+0x8c>)
   276a2:	681b      	ldr	r3, [r3, #0]
   276a4:	ea6f 7213 	mvn.w	r2, r3, lsr #28
   276a8:	f002 0203 	and.w	r2, r2, #3
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
   276ac:	ea12 7210 	ands.w	r2, r2, r0, lsr #28
	k_sem_give(&net_mgmt_lock);
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
   276b0:	b570      	push	{r4, r5, r6, lr}
   276b2:	4604      	mov	r4, r0
   276b4:	460d      	mov	r5, r1
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
   276b6:	d137      	bne.n	27728 <net_mgmt_event_notify_with_info+0x88>
		  NET_MGMT_GET_LAYER_CODE(global_event_mask)) ==
   276b8:	ea6f 4213 	mvn.w	r2, r3, lsr #16
   276bc:	f3c2 020a 	ubfx	r2, r2, #0, #11
		 NET_MGMT_GET_LAYER(mgmt_event)) &&
   276c0:	ea12 4210 	ands.w	r2, r2, r0, lsr #16
   276c4:	d130      	bne.n	27728 <net_mgmt_event_notify_with_info+0x88>
		  NET_MGMT_GET_COMMAND(global_event_mask)) ==
   276c6:	43db      	mvns	r3, r3
   276c8:	b29b      	uxth	r3, r3
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
   276ca:	4203      	tst	r3, r0
   276cc:	d12c      	bne.n	27728 <net_mgmt_event_notify_with_info+0x88>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   276ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   276d2:	4817      	ldr	r0, [pc, #92]	; (27730 <net_mgmt_event_notify_with_info+0x90>)
	events[i_idx].event = mgmt_event;
   276d4:	4e17      	ldr	r6, [pc, #92]	; (27734 <net_mgmt_event_notify_with_info+0x94>)
   276d6:	f006 fdf7 	bl	2e2c8 <_impl_k_sem_take>
	i_idx = in_event + 1;
   276da:	4917      	ldr	r1, [pc, #92]	; (27738 <net_mgmt_event_notify_with_info+0x98>)
	if (i_idx == out_event) {
   276dc:	4817      	ldr	r0, [pc, #92]	; (2773c <net_mgmt_event_notify_with_info+0x9c>)
	i_idx = in_event + 1;
   276de:	880b      	ldrh	r3, [r1, #0]
   276e0:	3301      	adds	r3, #1
   276e2:	b21b      	sxth	r3, r3
		i_idx = 0;
   276e4:	2b02      	cmp	r3, #2
   276e6:	bf08      	it	eq
   276e8:	2300      	moveq	r3, #0
	events[i_idx].iface = iface;
   276ea:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
	events[i_idx].event = mgmt_event;
   276ee:	f846 4033 	str.w	r4, [r6, r3, lsl #3]
	events[i_idx].iface = iface;
   276f2:	6055      	str	r5, [r2, #4]
	if (i_idx == out_event) {
   276f4:	f9b0 2000 	ldrsh.w	r2, [r0]
   276f8:	4293      	cmp	r3, r2
   276fa:	d111      	bne.n	27720 <net_mgmt_event_notify_with_info+0x80>
		u16_t o_idx = out_event + 1;
   276fc:	1c5a      	adds	r2, r3, #1
   276fe:	b292      	uxth	r2, r2
			o_idx = 0;
   27700:	2a02      	cmp	r2, #2
   27702:	bf08      	it	eq
   27704:	2200      	moveq	r2, #0
		if (events[o_idx].event) {
   27706:	f856 4032 	ldr.w	r4, [r6, r2, lsl #3]
   2770a:	b104      	cbz	r4, 2770e <net_mgmt_event_notify_with_info+0x6e>
			out_event = o_idx;
   2770c:	8002      	strh	r2, [r0, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2770e:	4808      	ldr	r0, [pc, #32]	; (27730 <net_mgmt_event_notify_with_info+0x90>)
	in_event = i_idx;
   27710:	800b      	strh	r3, [r1, #0]
   27712:	f006 fdb2 	bl	2e27a <_impl_k_sem_give>
   27716:	480a      	ldr	r0, [pc, #40]	; (27740 <net_mgmt_event_notify_with_info+0xa0>)
			NET_MGMT_GET_COMMAND(mgmt_event));

		mgmt_push_event(mgmt_event, iface, info, length);
		k_sem_give(&network_event);
	}
}
   27718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2771c:	f006 bdad 	b.w	2e27a <_impl_k_sem_give>
	} else if (out_event < 0) {
   27720:	2a00      	cmp	r2, #0
		out_event = i_idx;
   27722:	bfb8      	it	lt
   27724:	8003      	strhlt	r3, [r0, #0]
   27726:	e7f2      	b.n	2770e <net_mgmt_event_notify_with_info+0x6e>
}
   27728:	bd70      	pop	{r4, r5, r6, pc}
   2772a:	bf00      	nop
   2772c:	20002864 	.word	0x20002864
   27730:	2000e368 	.word	0x2000e368
   27734:	20002854 	.word	0x20002854
   27738:	20002868 	.word	0x20002868
   2773c:	200028d8 	.word	0x200028d8
   27740:	2000e380 	.word	0x2000e380

00027744 <net_mgmt_event_init>:
	list->head = NULL;
   27744:	4b14      	ldr	r3, [pc, #80]	; (27798 <net_mgmt_event_init+0x54>)
void net_mgmt_event_init(void)
{
	sys_slist_init(&event_callbacks);
	global_event_mask = 0;

	in_event = -1;
   27746:	4a15      	ldr	r2, [pc, #84]	; (2779c <net_mgmt_event_init+0x58>)
	out_event = -1;

	(void)memset(events, 0, CONFIG_NET_MGMT_EVENT_QUEUE_SIZE *
   27748:	4815      	ldr	r0, [pc, #84]	; (277a0 <net_mgmt_event_init+0x5c>)
{
   2774a:	b530      	push	{r4, r5, lr}
   2774c:	2400      	movs	r4, #0
	list->tail = NULL;
   2774e:	e9c3 4400 	strd	r4, r4, [r3]
	global_event_mask = 0;
   27752:	4b14      	ldr	r3, [pc, #80]	; (277a4 <net_mgmt_event_init+0x60>)
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   27754:	4d14      	ldr	r5, [pc, #80]	; (277a8 <net_mgmt_event_init+0x64>)
   27756:	601c      	str	r4, [r3, #0]
	in_event = -1;
   27758:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2775c:	8013      	strh	r3, [r2, #0]
	out_event = -1;
   2775e:	4a13      	ldr	r2, [pc, #76]	; (277ac <net_mgmt_event_init+0x68>)
{
   27760:	b087      	sub	sp, #28
	out_event = -1;
   27762:	8013      	strh	r3, [r2, #0]
	(void)memset(events, 0, CONFIG_NET_MGMT_EVENT_QUEUE_SIZE *
   27764:	4621      	mov	r1, r4
   27766:	2210      	movs	r2, #16
   27768:	f7df fabb 	bl	6ce2 <memset>
   2776c:	f06f 0308 	mvn.w	r3, #8
   27770:	e9cd 4302 	strd	r4, r3, [sp, #8]
   27774:	e9cd 4404 	strd	r4, r4, [sp, #16]
   27778:	e9cd 4400 	strd	r4, r4, [sp]
   2777c:	4b0c      	ldr	r3, [pc, #48]	; (277b0 <net_mgmt_event_init+0x6c>)
   2777e:	490d      	ldr	r1, [pc, #52]	; (277b4 <net_mgmt_event_init+0x70>)
   27780:	f44f 7200 	mov.w	r2, #512	; 0x200
   27784:	4628      	mov	r0, r5
   27786:	f006 fe49 	bl	2e41c <_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   2778a:	490b      	ldr	r1, [pc, #44]	; (277b8 <net_mgmt_event_init+0x74>)
   2778c:	4628      	mov	r0, r5
	k_thread_name_set(&mgmt_thread_data, "net_mgmt");

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   2778e:	b007      	add	sp, #28
   27790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   27794:	f006 be10 	b.w	2e3b8 <_impl_k_thread_name_set>
   27798:	2000284c 	.word	0x2000284c
   2779c:	20002868 	.word	0x20002868
   277a0:	20002854 	.word	0x20002854
   277a4:	20002864 	.word	0x20002864
   277a8:	2000286c 	.word	0x2000286c
   277ac:	200028d8 	.word	0x200028d8
   277b0:	00027585 	.word	0x00027585
   277b4:	2000bf18 	.word	0x2000bf18
   277b8:	000353ab 	.word	0x000353ab

000277bc <sys_slist_find_and_remove.constprop.10>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   277bc:	b510      	push	{r4, lr}
   277be:	4a0e      	ldr	r2, [pc, #56]	; (277f8 <sys_slist_find_and_remove.constprop.10+0x3c>)
   277c0:	6813      	ldr	r3, [r2, #0]
   277c2:	2100      	movs	r1, #0
   277c4:	b90b      	cbnz	r3, 277ca <sys_slist_find_and_remove.constprop.10+0xe>
   277c6:	4618      	mov	r0, r3
   277c8:	e00b      	b.n	277e2 <sys_slist_find_and_remove.constprop.10+0x26>
   277ca:	4283      	cmp	r3, r0
   277cc:	681c      	ldr	r4, [r3, #0]
   277ce:	d10f      	bne.n	277f0 <sys_slist_find_and_remove.constprop.10+0x34>
Z_GENLIST_REMOVE(slist, snode)
   277d0:	b941      	cbnz	r1, 277e4 <sys_slist_find_and_remove.constprop.10+0x28>
   277d2:	6851      	ldr	r1, [r2, #4]
	list->head = node;
   277d4:	6014      	str	r4, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   277d6:	428b      	cmp	r3, r1
   277d8:	d100      	bne.n	277dc <sys_slist_find_and_remove.constprop.10+0x20>
	list->tail = node;
   277da:	6054      	str	r4, [r2, #4]
	parent->next = child;
   277dc:	2200      	movs	r2, #0
   277de:	601a      	str	r2, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   277e0:	2001      	movs	r0, #1
   277e2:	bd10      	pop	{r4, pc}
	parent->next = child;
   277e4:	600c      	str	r4, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   277e6:	6850      	ldr	r0, [r2, #4]
   277e8:	4283      	cmp	r3, r0
	list->tail = node;
   277ea:	bf08      	it	eq
   277ec:	6051      	streq	r1, [r2, #4]
   277ee:	e7f5      	b.n	277dc <sys_slist_find_and_remove.constprop.10+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   277f0:	4619      	mov	r1, r3
   277f2:	4623      	mov	r3, r4
   277f4:	e7e6      	b.n	277c4 <sys_slist_find_and_remove.constprop.10+0x8>
   277f6:	bf00      	nop
   277f8:	200028dc 	.word	0x200028dc

000277fc <net_route_entry_remove>:
   277fc:	4770      	bx	lr
	...

00027800 <net_route_get_nbr>:
{
	return (struct net_route_entry *)nbr->data;
}

struct net_nbr *net_route_get_nbr(struct net_route_entry *route)
{
   27800:	b538      	push	{r3, r4, r5, lr}
	int i;

	NET_ASSERT(route);
   27802:	4604      	mov	r4, r0
   27804:	b9a0      	cbnz	r0, 27830 <net_route_get_nbr+0x30>
   27806:	4b12      	ldr	r3, [pc, #72]	; (27850 <net_route_get_nbr+0x50>)
   27808:	681b      	ldr	r3, [r3, #0]
   2780a:	075b      	lsls	r3, r3, #29
   2780c:	d010      	beq.n	27830 <net_route_get_nbr+0x30>
   2780e:	2301      	movs	r3, #1
   27810:	f04f 0200 	mov.w	r2, #0
   27814:	f363 0202 	bfi	r2, r3, #0, #3
   27818:	490e      	ldr	r1, [pc, #56]	; (27854 <net_route_get_nbr+0x54>)
   2781a:	4b0f      	ldr	r3, [pc, #60]	; (27858 <net_route_get_nbr+0x58>)
   2781c:	1a5b      	subs	r3, r3, r1
   2781e:	f360 02c5 	bfi	r2, r0, #3, #3
   27822:	08db      	lsrs	r3, r3, #3
   27824:	f363 128f 	bfi	r2, r3, #6, #10
   27828:	490c      	ldr	r1, [pc, #48]	; (2785c <net_route_get_nbr+0x5c>)
   2782a:	480d      	ldr	r0, [pc, #52]	; (27860 <net_route_get_nbr+0x60>)
   2782c:	f7da fc5e 	bl	20ec <log_1>

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   27830:	4a0c      	ldr	r2, [pc, #48]	; (27864 <net_route_get_nbr+0x64>)
{
   27832:	2300      	movs	r3, #0
   27834:	2138      	movs	r1, #56	; 0x38
   27836:	fb01 f003 	mul.w	r0, r1, r3
		if (!nbr->ref) {
   2783a:	5c85      	ldrb	r5, [r0, r2]
   2783c:	b11d      	cbz	r5, 27846 <net_route_get_nbr+0x46>
   2783e:	4410      	add	r0, r2
			continue;
		}

		if (nbr->data == (u8_t *)route) {
   27840:	68c5      	ldr	r5, [r0, #12]
   27842:	42a5      	cmp	r5, r4
   27844:	d003      	beq.n	2784e <net_route_get_nbr+0x4e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   27846:	3301      	adds	r3, #1
   27848:	2b06      	cmp	r3, #6
   2784a:	d1f4      	bne.n	27836 <net_route_get_nbr+0x36>

			return nbr;
		}
	}

	return NULL;
   2784c:	2000      	movs	r0, #0
}
   2784e:	bd38      	pop	{r3, r4, r5, pc}
   27850:	2000e2a0 	.word	0x2000e2a0
   27854:	0002ef38 	.word	0x0002ef38
   27858:	0002f080 	.word	0x0002f080
   2785c:	000353eb 	.word	0x000353eb
   27860:	00035435 	.word	0x00035435
   27864:	2000df04 	.word	0x2000df04

00027868 <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   27868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   2786c:	2600      	movs	r6, #0
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   2786e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 27918 <net_route_lookup+0xb0>
{
   27872:	9000      	str	r0, [sp, #0]
   27874:	460b      	mov	r3, r1
	u8_t longest_match = 0;
   27876:	46b0      	mov	r8, r6
	struct net_route_entry *route, *found = NULL;
   27878:	4635      	mov	r5, r6
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   2787a:	f018 0f80 	tst.w	r8, #128	; 0x80
   2787e:	d13a      	bne.n	278f6 <net_route_lookup+0x8e>
   27880:	2238      	movs	r2, #56	; 0x38
   27882:	4372      	muls	r2, r6
		if (!nbr->ref) {
   27884:	f812 1009 	ldrb.w	r1, [r2, r9]
   27888:	b391      	cbz	r1, 278f0 <net_route_lookup+0x88>
			continue;
		}

		if (iface && nbr->iface != iface) {
   2788a:	9900      	ldr	r1, [sp, #0]
   2788c:	b129      	cbz	r1, 2789a <net_route_lookup+0x32>
   2788e:	eb09 0102 	add.w	r1, r9, r2
   27892:	9800      	ldr	r0, [sp, #0]
   27894:	6889      	ldr	r1, [r1, #8]
   27896:	4281      	cmp	r1, r0
   27898:	d12a      	bne.n	278f0 <net_route_lookup+0x88>
			continue;
		}

		route = net_route_data(nbr);
   2789a:	444a      	add	r2, r9
   2789c:	68d7      	ldr	r7, [r2, #12]

		if (route->prefix_len >= longest_match &&
   2789e:	f897 4020 	ldrb.w	r4, [r7, #32]
   278a2:	4544      	cmp	r4, r8
   278a4:	d324      	bcc.n	278f0 <net_route_lookup+0x88>
	if (length > 128) {
   278a6:	2c80      	cmp	r4, #128	; 0x80
   278a8:	d822      	bhi.n	278f0 <net_route_lookup+0x88>
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
   278aa:	f107 0b10 	add.w	fp, r7, #16
	if (memcmp(addr1, addr2, bytes)) {
   278ae:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
   278b2:	4618      	mov	r0, r3
   278b4:	4652      	mov	r2, sl
   278b6:	4659      	mov	r1, fp
   278b8:	9301      	str	r3, [sp, #4]
   278ba:	f7df f9be 	bl	6c3a <memcmp>
   278be:	9b01      	ldr	r3, [sp, #4]
   278c0:	b9b0      	cbnz	r0, 278f0 <net_route_lookup+0x88>
	u8_t bits = 128 - length;
   278c2:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   278c6:	f014 0407 	ands.w	r4, r4, #7
   278ca:	d00e      	beq.n	278ea <net_route_lookup+0x82>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   278cc:	f81b 200a 	ldrb.w	r2, [fp, sl]
   278d0:	f813 100a 	ldrb.w	r1, [r3, sl]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   278d4:	f1c4 0008 	rsb	r0, r4, #8
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   278d8:	4051      	eors	r1, r2
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   278da:	22ff      	movs	r2, #255	; 0xff
   278dc:	4082      	lsls	r2, r0
   278de:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
   278e2:	fa02 f404 	lsl.w	r4, r2, r4
		if (route->prefix_len >= longest_match &&
   278e6:	4221      	tst	r1, r4
   278e8:	d102      	bne.n	278f0 <net_route_lookup+0x88>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   278ea:	f897 8020 	ldrb.w	r8, [r7, #32]
   278ee:	463d      	mov	r5, r7
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   278f0:	3601      	adds	r6, #1
   278f2:	2e06      	cmp	r6, #6
   278f4:	d1c1      	bne.n	2787a <net_route_lookup+0x12>
		}
	}

	if (found) {
   278f6:	b14d      	cbz	r5, 2790c <net_route_lookup+0xa4>
	sys_slist_find_and_remove(&routes, &route->node);
   278f8:	4628      	mov	r0, r5
   278fa:	f7ff ff5f 	bl	277bc <sys_slist_find_and_remove.constprop.10>
Z_GENLIST_PREPEND(slist, snode)
   278fe:	4b05      	ldr	r3, [pc, #20]	; (27914 <net_route_lookup+0xac>)
   27900:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   27902:	602a      	str	r2, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   27904:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   27906:	601d      	str	r5, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   27908:	b902      	cbnz	r2, 2790c <net_route_lookup+0xa4>
	list->tail = node;
   2790a:	605d      	str	r5, [r3, #4]

		update_route_access(found);
	}

	return found;
}
   2790c:	4628      	mov	r0, r5
   2790e:	b003      	add	sp, #12
   27910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27914:	200028dc 	.word	0x200028dc
   27918:	2000df04 	.word	0x2000df04

0002791c <net_route_del>:

	return route;
}

int net_route_del(struct net_route_entry *route)
{
   2791c:	b538      	push	{r3, r4, r5, lr}
	struct net_route_nexthop *nexthop_route;
#if defined(CONFIG_NET_MGMT_EVENT_INFO)
       struct net_event_ipv6_route info;
#endif

	if (!route) {
   2791e:	4604      	mov	r4, r0
   27920:	b1d0      	cbz	r0, 27958 <net_route_del+0x3c>
   27922:	2300      	movs	r3, #0
   27924:	68c1      	ldr	r1, [r0, #12]
   27926:	480f      	ldr	r0, [pc, #60]	; (27964 <net_route_del+0x48>)
   27928:	461a      	mov	r2, r3
   2792a:	f7ff feb9 	bl	276a0 <net_mgmt_event_notify_with_info>
					sizeof(struct net_event_ipv6_route));
#else
	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, route->iface);
#endif

	sys_slist_find_and_remove(&routes, &route->node);
   2792e:	4620      	mov	r0, r4
   27930:	f7ff ff44 	bl	277bc <sys_slist_find_and_remove.constprop.10>

	nbr = net_route_get_nbr(route);
   27934:	4620      	mov	r0, r4
   27936:	f7ff ff63 	bl	27800 <net_route_get_nbr>
	if (!nbr) {
   2793a:	4605      	mov	r5, r0
   2793c:	b178      	cbz	r0, 2795e <net_route_del+0x42>
		return -ENOENT;
	}

	net_route_info("Deleted", route, &route->addr);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   2793e:	6864      	ldr	r4, [r4, #4]
   27940:	b12c      	cbz	r4, 2794e <net_route_del+0x32>
		if (!nexthop_route->nbr) {
   27942:	6860      	ldr	r0, [r4, #4]
   27944:	b108      	cbz	r0, 2794a <net_route_del+0x2e>
	net_nbr_unref(nbr);
   27946:	f7fd f969 	bl	24c1c <net_nbr_unref>
	return node->next;
   2794a:	6824      	ldr	r4, [r4, #0]
   2794c:	e7f8      	b.n	27940 <net_route_del+0x24>
	net_nbr_unref(nbr);
   2794e:	4628      	mov	r0, r5
   27950:	f7fd f964 	bl	24c1c <net_nbr_unref>
		nbr_nexthop_put(nexthop_route->nbr);
	}

	nbr_free(nbr);

	return 0;
   27954:	2000      	movs	r0, #0
}
   27956:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   27958:	f06f 0015 	mvn.w	r0, #21
   2795c:	e7fb      	b.n	27956 <net_route_del+0x3a>
		return -ENOENT;
   2795e:	f06f 0001 	mvn.w	r0, #1
   27962:	e7f8      	b.n	27956 <net_route_del+0x3a>
   27964:	f060000c 	.word	0xf060000c

00027968 <net_route_del_by_nexthop>:

int net_route_del_by_nexthop(struct net_if *iface, struct in6_addr *nexthop)
{
   27968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2796c:	460d      	mov	r5, r1
	int count = 0, status = 0;
	struct net_nbr *nbr_nexthop;
	struct net_route_nexthop *nexthop_route;
	int i, ret;

	NET_ASSERT(iface);
   2796e:	4604      	mov	r4, r0
   27970:	b9a0      	cbnz	r0, 2799c <net_route_del_by_nexthop+0x34>
   27972:	4b28      	ldr	r3, [pc, #160]	; (27a14 <net_route_del_by_nexthop+0xac>)
   27974:	681b      	ldr	r3, [r3, #0]
   27976:	075a      	lsls	r2, r3, #29
   27978:	d026      	beq.n	279c8 <net_route_del_by_nexthop+0x60>
   2797a:	2301      	movs	r3, #1
   2797c:	f04f 0200 	mov.w	r2, #0
   27980:	f363 0202 	bfi	r2, r3, #0, #3
   27984:	4924      	ldr	r1, [pc, #144]	; (27a18 <net_route_del_by_nexthop+0xb0>)
   27986:	4b25      	ldr	r3, [pc, #148]	; (27a1c <net_route_del_by_nexthop+0xb4>)
   27988:	1a5b      	subs	r3, r3, r1
   2798a:	f360 02c5 	bfi	r2, r0, #3, #3
   2798e:	08db      	lsrs	r3, r3, #3
   27990:	f363 128f 	bfi	r2, r3, #6, #10
   27994:	4922      	ldr	r1, [pc, #136]	; (27a20 <net_route_del_by_nexthop+0xb8>)
   27996:	4823      	ldr	r0, [pc, #140]	; (27a24 <net_route_del_by_nexthop+0xbc>)
   27998:	f7da fba8 	bl	20ec <log_1>
	NET_ASSERT(nexthop);
   2799c:	b9a5      	cbnz	r5, 279c8 <net_route_del_by_nexthop+0x60>
   2799e:	4b1d      	ldr	r3, [pc, #116]	; (27a14 <net_route_del_by_nexthop+0xac>)
   279a0:	681b      	ldr	r3, [r3, #0]
   279a2:	075b      	lsls	r3, r3, #29
   279a4:	d010      	beq.n	279c8 <net_route_del_by_nexthop+0x60>
   279a6:	2301      	movs	r3, #1
   279a8:	f04f 0200 	mov.w	r2, #0
   279ac:	f363 0202 	bfi	r2, r3, #0, #3
   279b0:	4919      	ldr	r1, [pc, #100]	; (27a18 <net_route_del_by_nexthop+0xb0>)
   279b2:	4b1a      	ldr	r3, [pc, #104]	; (27a1c <net_route_del_by_nexthop+0xb4>)
   279b4:	481c      	ldr	r0, [pc, #112]	; (27a28 <net_route_del_by_nexthop+0xc0>)
   279b6:	1a5b      	subs	r3, r3, r1
   279b8:	f365 02c5 	bfi	r2, r5, #3, #3
   279bc:	08db      	lsrs	r3, r3, #3
   279be:	f363 128f 	bfi	r2, r3, #6, #10
   279c2:	4917      	ldr	r1, [pc, #92]	; (27a20 <net_route_del_by_nexthop+0xb8>)
   279c4:	f7da fb92 	bl	20ec <log_1>

	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
   279c8:	4629      	mov	r1, r5
   279ca:	4620      	mov	r0, r4
   279cc:	f7fd ffa6 	bl	2591c <net_ipv6_nbr_lookup>
   279d0:	2400      	movs	r4, #0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
		struct net_nbr *nbr = get_nbr(i);
		struct net_route_entry *route = net_route_data(nbr);
   279d2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 27a2c <net_route_del_by_nexthop+0xc4>
	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
   279d6:	4607      	mov	r7, r0
	int count = 0, status = 0;
   279d8:	4626      	mov	r6, r4
   279da:	4625      	mov	r5, r4
		struct net_route_entry *route = net_route_data(nbr);
   279dc:	eb08 0304 	add.w	r3, r8, r4
   279e0:	68d8      	ldr	r0, [r3, #12]

		if (!route) {
   279e2:	b140      	cbz	r0, 279f6 <net_route_del_by_nexthop+0x8e>
			continue;
		}

		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
   279e4:	6843      	ldr	r3, [r0, #4]
   279e6:	b133      	cbz	r3, 279f6 <net_route_del_by_nexthop+0x8e>
					     node) {
			if (nexthop_route->nbr == nbr_nexthop) {
   279e8:	685a      	ldr	r2, [r3, #4]
   279ea:	42ba      	cmp	r2, r7
   279ec:	d10d      	bne.n	27a0a <net_route_del_by_nexthop+0xa2>
				/* This route contains this nexthop */
				ret = net_route_del(route);
   279ee:	f7ff ff95 	bl	2791c <net_route_del>
				if (!ret) {
   279f2:	b960      	cbnz	r0, 27a0e <net_route_del_by_nexthop+0xa6>
					count++;
   279f4:	3501      	adds	r5, #1
   279f6:	3438      	adds	r4, #56	; 0x38
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   279f8:	f5b4 7fa8 	cmp.w	r4, #336	; 0x150
   279fc:	d1ee      	bne.n	279dc <net_route_del_by_nexthop+0x74>
				break;
			}
		}
	}

	if (count) {
   279fe:	b90d      	cbnz	r5, 27a04 <net_route_del_by_nexthop+0x9c>
   27a00:	ea06 75e6 	and.w	r5, r6, r6, asr #31
	} else if (status < 0) {
		return status;
	}

	return 0;
}
   27a04:	4628      	mov	r0, r5
   27a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27a0a:	681b      	ldr	r3, [r3, #0]
   27a0c:	e7eb      	b.n	279e6 <net_route_del_by_nexthop+0x7e>
   27a0e:	4606      	mov	r6, r0
   27a10:	e7f1      	b.n	279f6 <net_route_del_by_nexthop+0x8e>
   27a12:	bf00      	nop
   27a14:	2000e2a0 	.word	0x2000e2a0
   27a18:	0002ef38 	.word	0x0002ef38
   27a1c:	0002f080 	.word	0x0002f080
   27a20:	000353fd 	.word	0x000353fd
   27a24:	000346d4 	.word	0x000346d4
   27a28:	00035416 	.word	0x00035416
   27a2c:	2000df04 	.word	0x2000df04

00027a30 <net_route_get_nexthop>:

	return status;
}

struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
   27a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   27a34:	2800      	cmp	r0, #0
   27a36:	d03d      	beq.n	27ab4 <net_route_get_nexthop+0x84>
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   27a38:	6844      	ldr	r4, [r0, #4]
   27a3a:	2c00      	cmp	r4, #0
   27a3c:	d03a      	beq.n	27ab4 <net_route_get_nexthop+0x84>
   27a3e:	4d1e      	ldr	r5, [pc, #120]	; (27ab8 <net_route_get_nexthop+0x88>)
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);
   27a40:	4b1e      	ldr	r3, [pc, #120]	; (27abc <net_route_get_nexthop+0x8c>)
   27a42:	f8df 8080 	ldr.w	r8, [pc, #128]	; 27ac4 <net_route_get_nexthop+0x94>
   27a46:	f8df 9080 	ldr.w	r9, [pc, #128]	; 27ac8 <net_route_get_nexthop+0x98>
   27a4a:	f8df a080 	ldr.w	sl, [pc, #128]	; 27acc <net_route_get_nexthop+0x9c>
   27a4e:	1aed      	subs	r5, r5, r3
   27a50:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   27a54:	6863      	ldr	r3, [r4, #4]
   27a56:	785b      	ldrb	r3, [r3, #1]
   27a58:	2bff      	cmp	r3, #255	; 0xff
   27a5a:	d10f      	bne.n	27a7c <net_route_get_nexthop+0x4c>
   27a5c:	f8d8 3000 	ldr.w	r3, [r8]
   27a60:	075a      	lsls	r2, r3, #29
   27a62:	d00b      	beq.n	27a7c <net_route_get_nexthop+0x4c>
   27a64:	2301      	movs	r3, #1
   27a66:	f363 0602 	bfi	r6, r3, #0, #3
   27a6a:	f36f 06c5 	bfc	r6, #3, #3
   27a6e:	f365 168f 	bfi	r6, r5, #6, #10
   27a72:	4632      	mov	r2, r6
   27a74:	4649      	mov	r1, r9
   27a76:	4650      	mov	r0, sl
   27a78:	f7da fb38 	bl	20ec <log_1>

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   27a7c:	6863      	ldr	r3, [r4, #4]
   27a7e:	785a      	ldrb	r2, [r3, #1]
   27a80:	2aff      	cmp	r2, #255	; 0xff
   27a82:	d014      	beq.n	27aae <net_route_get_nexthop+0x7e>
			continue;
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
   27a84:	68d8      	ldr	r0, [r3, #12]
		if (ipv6_nbr_data) {
   27a86:	b110      	cbz	r0, 27a8e <net_route_get_nexthop+0x5e>
			addr = &ipv6_nbr_data->addr;
   27a88:	3004      	adds	r0, #4
			NET_ERR("could not get neighbor data from next hop");
		}
	}

	return NULL;
}
   27a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			NET_ERR("could not get neighbor data from next hop");
   27a8e:	f8d8 3000 	ldr.w	r3, [r8]
   27a92:	075b      	lsls	r3, r3, #29
   27a94:	d00b      	beq.n	27aae <net_route_get_nexthop+0x7e>
   27a96:	2301      	movs	r3, #1
   27a98:	f363 0702 	bfi	r7, r3, #0, #3
   27a9c:	f360 07c5 	bfi	r7, r0, #3, #3
   27aa0:	f365 178f 	bfi	r7, r5, #6, #10
   27aa4:	463a      	mov	r2, r7
   27aa6:	4649      	mov	r1, r9
   27aa8:	4805      	ldr	r0, [pc, #20]	; (27ac0 <net_route_get_nexthop+0x90>)
   27aaa:	f7da fb1f 	bl	20ec <log_1>
   27aae:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   27ab0:	2c00      	cmp	r4, #0
   27ab2:	d1cf      	bne.n	27a54 <net_route_get_nexthop+0x24>
		return NULL;
   27ab4:	2000      	movs	r0, #0
   27ab6:	e7e8      	b.n	27a8a <net_route_get_nexthop+0x5a>
   27ab8:	0002f080 	.word	0x0002f080
   27abc:	0002ef38 	.word	0x0002ef38
   27ac0:	0003549b 	.word	0x0003549b
   27ac4:	2000e2a0 	.word	0x2000e2a0
   27ac8:	000353c4 	.word	0x000353c4
   27acc:	00035452 	.word	0x00035452

00027ad0 <net_route_foreach>:

int net_route_foreach(net_route_cb_t cb, void *user_data)
{
   27ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27ad4:	2400      	movs	r4, #0
		nbr = get_nbr(i);
		if (!nbr) {
			continue;
		}

		route = net_route_data(nbr);
   27ad6:	f8df 8024 	ldr.w	r8, [pc, #36]	; 27afc <net_route_foreach+0x2c>
{
   27ada:	4606      	mov	r6, r0
   27adc:	460f      	mov	r7, r1
	int i, ret = 0;
   27ade:	4625      	mov	r5, r4
		route = net_route_data(nbr);
   27ae0:	eb08 0304 	add.w	r3, r8, r4
   27ae4:	68d8      	ldr	r0, [r3, #12]
		if (!route) {
   27ae6:	b110      	cbz	r0, 27aee <net_route_foreach+0x1e>
			continue;
		}

		cb(route, user_data);
   27ae8:	4639      	mov	r1, r7
   27aea:	47b0      	blx	r6

		ret++;
   27aec:	3501      	adds	r5, #1
   27aee:	3438      	adds	r4, #56	; 0x38
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   27af0:	f5b4 7fa8 	cmp.w	r4, #336	; 0x150
   27af4:	d1f4      	bne.n	27ae0 <net_route_foreach+0x10>
	}

	return ret;
}
   27af6:	4628      	mov	r0, r5
   27af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27afc:	2000df04 	.word	0x2000df04

00027b00 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   27b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27b02:	4607      	mov	r7, r0
   27b04:	460d      	mov	r5, r1
   27b06:	4616      	mov	r6, r2
   27b08:	461c      	mov	r4, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   27b0a:	f7fd ff07 	bl	2591c <net_ipv6_nbr_lookup>
   27b0e:	b120      	cbz	r0, 27b1a <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   27b10:	2300      	movs	r3, #0
   27b12:	6033      	str	r3, [r6, #0]
		*nexthop = dst;
   27b14:	6025      	str	r5, [r4, #0]
			return false;
		}

		*nexthop = &router->address.in6_addr;

		return true;
   27b16:	2001      	movs	r0, #1
   27b18:	e00b      	b.n	27b32 <net_route_get_info+0x32>
	*route = net_route_lookup(iface, dst);
   27b1a:	4629      	mov	r1, r5
   27b1c:	4638      	mov	r0, r7
   27b1e:	f7ff fea3 	bl	27868 <net_route_lookup>
   27b22:	6030      	str	r0, [r6, #0]
	if (*route) {
   27b24:	b130      	cbz	r0, 27b34 <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   27b26:	f7ff ff83 	bl	27a30 <net_route_get_nexthop>
   27b2a:	6020      	str	r0, [r4, #0]
		if (!*nexthop) {
   27b2c:	3000      	adds	r0, #0
   27b2e:	bf18      	it	ne
   27b30:	2001      	movne	r0, #1
	}

	return false;
}
   27b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
   27b34:	4629      	mov	r1, r5
   27b36:	f7f9 ffcf 	bl	21ad8 <net_if_ipv6_router_find_default>
		if (!router) {
   27b3a:	2800      	cmp	r0, #0
   27b3c:	d0f9      	beq.n	27b32 <net_route_get_info+0x32>
		*nexthop = &router->address.in6_addr;
   27b3e:	3024      	adds	r0, #36	; 0x24
   27b40:	6020      	str	r0, [r4, #0]
   27b42:	e7e8      	b.n	27b16 <net_route_get_info+0x16>

00027b44 <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   27b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27b46:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(NULL, nexthop);
   27b48:	2000      	movs	r0, #0
   27b4a:	f7fd fee7 	bl	2591c <net_ipv6_nbr_lookup>
	if (!nbr) {
   27b4e:	4606      	mov	r6, r0
   27b50:	2800      	cmp	r0, #0
   27b52:	d04c      	beq.n	27bee <net_route_packet+0xaa>
		NET_DBG("Cannot find %s neighbor",
			log_strdup(net_sprint_ipv6_addr(nexthop)));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   27b54:	7840      	ldrb	r0, [r0, #1]
   27b56:	f7fd f93d 	bl	24dd4 <net_nbr_get_lladdr>
	if (!lladdr) {
   27b5a:	4605      	mov	r5, r0
   27b5c:	2800      	cmp	r0, #0
   27b5e:	d049      	beq.n	27bf4 <net_route_packet+0xb0>
	 * link layer. This is done at runtime because we can have multiple
	 * network technologies enabled.
	 */
	if (net_if_l2(net_pkt_iface(pkt)) != &NET_L2_GET_NAME(DUMMY)) {
#endif
		if (!net_pkt_lladdr_src(pkt)->addr) {
   27b60:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   27b62:	b910      	cbnz	r0, 27b6a <net_route_packet+0x26>
		 * same, then something went wrong in route lookup.
		 */
		if (!memcmp(net_pkt_lladdr_src(pkt)->addr, lladdr->addr,
			    lladdr->len)) {
			NET_ERR("Src ll and Dst ll are same");
			return -EINVAL;
   27b64:	f06f 0015 	mvn.w	r0, #21
	net_pkt_lladdr_dst(pkt)->len = lladdr->len;

	net_pkt_set_iface(pkt, nbr->iface);

	return net_send_data(pkt);
}
   27b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!memcmp(net_pkt_lladdr_src(pkt)->addr, lladdr->addr,
   27b6a:	1caf      	adds	r7, r5, #2
   27b6c:	786a      	ldrb	r2, [r5, #1]
   27b6e:	4639      	mov	r1, r7
   27b70:	f7df f863 	bl	6c3a <memcmp>
   27b74:	b9a8      	cbnz	r0, 27ba2 <net_route_packet+0x5e>
			NET_ERR("Src ll and Dst ll are same");
   27b76:	4b21      	ldr	r3, [pc, #132]	; (27bfc <net_route_packet+0xb8>)
   27b78:	681b      	ldr	r3, [r3, #0]
   27b7a:	075b      	lsls	r3, r3, #29
   27b7c:	d0f2      	beq.n	27b64 <net_route_packet+0x20>
   27b7e:	2301      	movs	r3, #1
   27b80:	f04f 0200 	mov.w	r2, #0
   27b84:	f363 0202 	bfi	r2, r3, #0, #3
   27b88:	491d      	ldr	r1, [pc, #116]	; (27c00 <net_route_packet+0xbc>)
   27b8a:	4b1e      	ldr	r3, [pc, #120]	; (27c04 <net_route_packet+0xc0>)
   27b8c:	1a5b      	subs	r3, r3, r1
   27b8e:	f360 02c5 	bfi	r2, r0, #3, #3
   27b92:	08db      	lsrs	r3, r3, #3
   27b94:	f363 128f 	bfi	r2, r3, #6, #10
   27b98:	491b      	ldr	r1, [pc, #108]	; (27c08 <net_route_packet+0xc4>)
   27b9a:	481c      	ldr	r0, [pc, #112]	; (27c0c <net_route_packet+0xc8>)
   27b9c:	f7da faa6 	bl	20ec <log_1>
   27ba0:	e7e0      	b.n	27b64 <net_route_packet+0x20>
	pkt->forwarding = forward;
   27ba2:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   27ba6:	f043 0304 	orr.w	r3, r3, #4
   27baa:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	return net_if_get_link_addr(pkt->iface);
   27bae:	6a23      	ldr	r3, [r4, #32]
   27bb0:	681b      	ldr	r3, [r3, #0]
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   27bb2:	691a      	ldr	r2, [r3, #16]
   27bb4:	62e2      	str	r2, [r4, #44]	; 0x2c
	net_pkt_lladdr_src(pkt)->type = net_pkt_lladdr_if(pkt)->type;
   27bb6:	7d5a      	ldrb	r2, [r3, #21]
   27bb8:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   27bbc:	7d1b      	ldrb	r3, [r3, #20]
   27bbe:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
   27bc2:	6367      	str	r7, [r4, #52]	; 0x34
	net_pkt_lladdr_dst(pkt)->type = lladdr->type;
   27bc4:	782b      	ldrb	r3, [r5, #0]
   27bc6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	net_pkt_lladdr_dst(pkt)->len = lladdr->len;
   27bca:	786b      	ldrb	r3, [r5, #1]
   27bcc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_pkt_set_iface(pkt, nbr->iface);
   27bd0:	68b3      	ldr	r3, [r6, #8]
	pkt->iface = iface;
   27bd2:	6223      	str	r3, [r4, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   27bd4:	681a      	ldr	r2, [r3, #0]
   27bd6:	7d52      	ldrb	r2, [r2, #21]
   27bd8:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   27bdc:	681b      	ldr	r3, [r3, #0]
   27bde:	7d5b      	ldrb	r3, [r3, #21]
   27be0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return net_send_data(pkt);
   27be4:	4620      	mov	r0, r4
}
   27be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return net_send_data(pkt);
   27bea:	f7f8 be0f 	b.w	2080c <net_send_data>
		return -ENOENT;
   27bee:	f06f 0001 	mvn.w	r0, #1
   27bf2:	e7b9      	b.n	27b68 <net_route_packet+0x24>
		return -ESRCH;
   27bf4:	f06f 0002 	mvn.w	r0, #2
   27bf8:	e7b6      	b.n	27b68 <net_route_packet+0x24>
   27bfa:	bf00      	nop
   27bfc:	2000e2a0 	.word	0x2000e2a0
   27c00:	0002ef38 	.word	0x0002ef38
   27c04:	0002f080 	.word	0x0002f080
   27c08:	000353da 	.word	0x000353da
   27c0c:	000354c9 	.word	0x000354c9

00027c10 <net_route_init>:
	NET_DBG("Allocated %d routing entries (%zu bytes)",
		CONFIG_NET_MAX_ROUTES, sizeof(net_route_entries_pool));

	NET_DBG("Allocated %d nexthop entries (%zu bytes)",
		CONFIG_NET_MAX_NEXTHOPS, sizeof(net_route_nexthop_pool));
}
   27c10:	4770      	bx	lr

00027c12 <net_analyze_stack_get_values>:

static inline void net_analyze_stack_get_values(const char *stack,
						size_t size,
						unsigned *pcnt,
						unsigned *unused)
{
   27c12:	b530      	push	{r4, r5, lr}
	size_t unused = 0;
   27c14:	2400      	movs	r4, #0
	for (i = 0; i < size; i++) {
   27c16:	42a1      	cmp	r1, r4
   27c18:	d002      	beq.n	27c20 <net_analyze_stack_get_values+0xe>
		if (checked_stack[i] == 0xaaU) {
   27c1a:	5d05      	ldrb	r5, [r0, r4]
   27c1c:	2daa      	cmp	r5, #170	; 0xaa
   27c1e:	d007      	beq.n	27c30 <net_analyze_stack_get_values+0x1e>
	*unused = stack_unused_space_get(stack, size);
   27c20:	601c      	str	r4, [r3, #0]

	/* Calculate the real size reserved for the stack */
	*pcnt = ((size - *unused) * 100) / size;
   27c22:	1b0c      	subs	r4, r1, r4
   27c24:	2364      	movs	r3, #100	; 0x64
   27c26:	435c      	muls	r4, r3
   27c28:	fbb4 f4f1 	udiv	r4, r4, r1
   27c2c:	6014      	str	r4, [r2, #0]
}
   27c2e:	bd30      	pop	{r4, r5, pc}
			unused++;
   27c30:	3401      	adds	r4, #1
   27c32:	e7f0      	b.n	27c16 <net_analyze_stack_get_values+0x4>

00027c34 <tcp_sent_cb>:
static void tcp_sent_cb(struct net_context *context,
			int status,
			void *token,
			void *user_data)
{
	PR_SHELL(tcp_shell, "Message sent\n");
   27c34:	4b02      	ldr	r3, [pc, #8]	; (27c40 <tcp_sent_cb+0xc>)
   27c36:	4a03      	ldr	r2, [pc, #12]	; (27c44 <tcp_sent_cb+0x10>)
   27c38:	6818      	ldr	r0, [r3, #0]
   27c3a:	2100      	movs	r1, #0
   27c3c:	f7db bd90 	b.w	3760 <shell_fprintf>
   27c40:	20002a14 	.word	0x20002a14
   27c44:	00036e91 	.word	0x00036e91

00027c48 <net_context_is_used>:
{
   27c48:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   27c4a:	4604      	mov	r4, r0
   27c4c:	b9a0      	cbnz	r0, 27c78 <net_context_is_used+0x30>
   27c4e:	4b0d      	ldr	r3, [pc, #52]	; (27c84 <net_context_is_used+0x3c>)
   27c50:	681b      	ldr	r3, [r3, #0]
   27c52:	075b      	lsls	r3, r3, #29
   27c54:	d010      	beq.n	27c78 <net_context_is_used+0x30>
   27c56:	2301      	movs	r3, #1
   27c58:	f04f 0200 	mov.w	r2, #0
   27c5c:	f363 0202 	bfi	r2, r3, #0, #3
   27c60:	4909      	ldr	r1, [pc, #36]	; (27c88 <net_context_is_used+0x40>)
   27c62:	4b0a      	ldr	r3, [pc, #40]	; (27c8c <net_context_is_used+0x44>)
   27c64:	1a5b      	subs	r3, r3, r1
   27c66:	f360 02c5 	bfi	r2, r0, #3, #3
   27c6a:	08db      	lsrs	r3, r3, #3
   27c6c:	f363 128f 	bfi	r2, r3, #6, #10
   27c70:	4907      	ldr	r1, [pc, #28]	; (27c90 <net_context_is_used+0x48>)
   27c72:	4808      	ldr	r0, [pc, #32]	; (27c94 <net_context_is_used+0x4c>)
   27c74:	f7da fa3a 	bl	20ec <log_1>
	return context->flags & NET_CONTEXT_IN_USE;
   27c78:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
}
   27c7c:	f000 0001 	and.w	r0, r0, #1
   27c80:	bd10      	pop	{r4, pc}
   27c82:	bf00      	nop
   27c84:	2000e2a4 	.word	0x2000e2a4
   27c88:	0002ef38 	.word	0x0002ef38
   27c8c:	0002f088 	.word	0x0002f088
   27c90:	00035525 	.word	0x00035525
   27c94:	00030684 	.word	0x00030684

00027c98 <cmd_net_ipv6>:
{
   27c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (shell_help_requested(shell)) {
   27c9a:	6883      	ldr	r3, [r0, #8]
   27c9c:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27ca0:	f3c4 0440 	ubfx	r4, r4, #1, #1
{
   27ca4:	4605      	mov	r5, r0
	if (shell_help_requested(shell)) {
   27ca6:	b13c      	cbz	r4, 27cb8 <cmd_net_ipv6+0x20>
		shell_help_print(shell, NULL, 0);
   27ca8:	2200      	movs	r2, #0
   27caa:	4611      	mov	r1, r2
   27cac:	f7db fe5c 	bl	3968 <shell_help_print>
		return -ENOEXEC;
   27cb0:	f06f 0007 	mvn.w	r0, #7
}
   27cb4:	b003      	add	sp, #12
   27cb6:	bd30      	pop	{r4, r5, pc}
	PR("IPv6 support                              : %s\n",
   27cb8:	4b27      	ldr	r3, [pc, #156]	; (27d58 <cmd_net_ipv6+0xc0>)
   27cba:	4a28      	ldr	r2, [pc, #160]	; (27d5c <cmd_net_ipv6+0xc4>)
   27cbc:	4621      	mov	r1, r4
   27cbe:	f7db fd4f 	bl	3760 <shell_fprintf>
	PR("IPv6 fragmentation support                : %s\n",
   27cc2:	4b27      	ldr	r3, [pc, #156]	; (27d60 <cmd_net_ipv6+0xc8>)
   27cc4:	4a27      	ldr	r2, [pc, #156]	; (27d64 <cmd_net_ipv6+0xcc>)
   27cc6:	4621      	mov	r1, r4
   27cc8:	4628      	mov	r0, r5
   27cca:	f7db fd49 	bl	3760 <shell_fprintf>
	PR("Multicast Listener Discovery support      : %s\n",
   27cce:	4b22      	ldr	r3, [pc, #136]	; (27d58 <cmd_net_ipv6+0xc0>)
   27cd0:	4a25      	ldr	r2, [pc, #148]	; (27d68 <cmd_net_ipv6+0xd0>)
   27cd2:	4621      	mov	r1, r4
   27cd4:	4628      	mov	r0, r5
   27cd6:	f7db fd43 	bl	3760 <shell_fprintf>
	PR("Neighbor cache support                    : %s\n",
   27cda:	4b1f      	ldr	r3, [pc, #124]	; (27d58 <cmd_net_ipv6+0xc0>)
   27cdc:	4a23      	ldr	r2, [pc, #140]	; (27d6c <cmd_net_ipv6+0xd4>)
   27cde:	4621      	mov	r1, r4
   27ce0:	4628      	mov	r0, r5
   27ce2:	f7db fd3d 	bl	3760 <shell_fprintf>
	PR("Neighbor discovery support                : %s\n",
   27ce6:	4b1c      	ldr	r3, [pc, #112]	; (27d58 <cmd_net_ipv6+0xc0>)
   27ce8:	4a21      	ldr	r2, [pc, #132]	; (27d70 <cmd_net_ipv6+0xd8>)
   27cea:	4621      	mov	r1, r4
   27cec:	4628      	mov	r0, r5
   27cee:	f7db fd37 	bl	3760 <shell_fprintf>
	PR("Duplicate address detection (DAD) support : %s\n",
   27cf2:	4b19      	ldr	r3, [pc, #100]	; (27d58 <cmd_net_ipv6+0xc0>)
   27cf4:	4a1f      	ldr	r2, [pc, #124]	; (27d74 <cmd_net_ipv6+0xdc>)
   27cf6:	4621      	mov	r1, r4
   27cf8:	4628      	mov	r0, r5
   27cfa:	f7db fd31 	bl	3760 <shell_fprintf>
	PR("Router advertisement RDNSS option support : %s\n",
   27cfe:	4b16      	ldr	r3, [pc, #88]	; (27d58 <cmd_net_ipv6+0xc0>)
   27d00:	4a1d      	ldr	r2, [pc, #116]	; (27d78 <cmd_net_ipv6+0xe0>)
   27d02:	4621      	mov	r1, r4
   27d04:	4628      	mov	r0, r5
   27d06:	f7db fd2b 	bl	3760 <shell_fprintf>
	PR("6lo header compression support            : %s\n",
   27d0a:	4b13      	ldr	r3, [pc, #76]	; (27d58 <cmd_net_ipv6+0xc0>)
   27d0c:	4a1b      	ldr	r2, [pc, #108]	; (27d7c <cmd_net_ipv6+0xe4>)
   27d0e:	4621      	mov	r1, r4
   27d10:	4628      	mov	r0, r5
   27d12:	f7db fd25 	bl	3760 <shell_fprintf>
	PR("Max number of IPv6 network interfaces "
   27d16:	2301      	movs	r3, #1
   27d18:	4a19      	ldr	r2, [pc, #100]	; (27d80 <cmd_net_ipv6+0xe8>)
   27d1a:	4621      	mov	r1, r4
   27d1c:	4628      	mov	r0, r5
   27d1e:	f7db fd1f 	bl	3760 <shell_fprintf>
	PR("Max number of unicast IPv6 addresses "
   27d22:	2303      	movs	r3, #3
   27d24:	4a17      	ldr	r2, [pc, #92]	; (27d84 <cmd_net_ipv6+0xec>)
   27d26:	4621      	mov	r1, r4
   27d28:	4628      	mov	r0, r5
   27d2a:	f7db fd19 	bl	3760 <shell_fprintf>
	PR("Max number of multicast IPv6 addresses "
   27d2e:	2305      	movs	r3, #5
   27d30:	4a15      	ldr	r2, [pc, #84]	; (27d88 <cmd_net_ipv6+0xf0>)
   27d32:	4621      	mov	r1, r4
   27d34:	4628      	mov	r0, r5
   27d36:	f7db fd13 	bl	3760 <shell_fprintf>
	PR("Max number of IPv6 prefixes per network "
   27d3a:	2302      	movs	r3, #2
   27d3c:	4a13      	ldr	r2, [pc, #76]	; (27d8c <cmd_net_ipv6+0xf4>)
   27d3e:	4621      	mov	r1, r4
   27d40:	4628      	mov	r0, r5
   27d42:	f7db fd0d 	bl	3760 <shell_fprintf>
	net_if_foreach(address_lifetime_cb, &user_data);
   27d46:	4812      	ldr	r0, [pc, #72]	; (27d90 <cmd_net_ipv6+0xf8>)
   27d48:	4669      	mov	r1, sp
	user_data.user_data = NULL;
   27d4a:	e9cd 5400 	strd	r5, r4, [sp]
	net_if_foreach(address_lifetime_cb, &user_data);
   27d4e:	f7fa f8cb 	bl	21ee8 <net_if_foreach>
	return 0;
   27d52:	4620      	mov	r0, r4
   27d54:	e7ae      	b.n	27cb4 <cmd_net_ipv6+0x1c>
   27d56:	bf00      	nop
   27d58:	0002f8b4 	.word	0x0002f8b4
   27d5c:	000359ac 	.word	0x000359ac
   27d60:	000344b2 	.word	0x000344b2
   27d64:	000359dc 	.word	0x000359dc
   27d68:	00035a0c 	.word	0x00035a0c
   27d6c:	00035a3c 	.word	0x00035a3c
   27d70:	00035a6c 	.word	0x00035a6c
   27d74:	00035a9c 	.word	0x00035a9c
   27d78:	00035acc 	.word	0x00035acc
   27d7c:	00035afc 	.word	0x00035afc
   27d80:	00035b2c 	.word	0x00035b2c
   27d84:	00035b6f 	.word	0x00035b6f
   27d88:	00035bb2 	.word	0x00035bb2
   27d8c:	00035bf5 	.word	0x00035bf5
   27d90:	00029231 	.word	0x00029231

00027d94 <cmd_net_nbr_rm>:
{
   27d94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (shell_help_requested(shell)) {
   27d96:	6883      	ldr	r3, [r0, #8]
   27d98:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27d9c:	f3c4 0440 	ubfx	r4, r4, #1, #1
{
   27da0:	4605      	mov	r5, r0
   27da2:	4616      	mov	r6, r2
	if (shell_help_requested(shell)) {
   27da4:	b13c      	cbz	r4, 27db6 <cmd_net_nbr_rm+0x22>
		shell_help_print(shell, NULL, 0);
   27da6:	2200      	movs	r2, #0
   27da8:	4611      	mov	r1, r2
   27daa:	f7db fddd 	bl	3968 <shell_help_print>
		return -ENOEXEC;
   27dae:	f06f 0007 	mvn.w	r0, #7
}
   27db2:	b004      	add	sp, #16
   27db4:	bd70      	pop	{r4, r5, r6, pc}
	if (!argv[1]) {
   27db6:	6851      	ldr	r1, [r2, #4]
   27db8:	b921      	cbnz	r1, 27dc4 <cmd_net_nbr_rm+0x30>
		PR_WARNING("Neighbor IPv6 address missing.\n");
   27dba:	4a14      	ldr	r2, [pc, #80]	; (27e0c <cmd_net_nbr_rm+0x78>)
   27dbc:	2104      	movs	r1, #4
   27dbe:	f7db fccf 	bl	3760 <shell_fprintf>
   27dc2:	e7f4      	b.n	27dae <cmd_net_nbr_rm+0x1a>
	ret = net_addr_pton(AF_INET6, argv[1], &addr);
   27dc4:	466a      	mov	r2, sp
   27dc6:	200a      	movs	r0, #10
   27dc8:	f7fb f9d4 	bl	23174 <net_addr_pton>
	if (ret < 0) {
   27dcc:	2800      	cmp	r0, #0
   27dce:	da06      	bge.n	27dde <cmd_net_nbr_rm+0x4a>
		PR_WARNING("Cannot parse '%s'\n", argv[1]);
   27dd0:	6873      	ldr	r3, [r6, #4]
   27dd2:	4a0f      	ldr	r2, [pc, #60]	; (27e10 <cmd_net_nbr_rm+0x7c>)
		PR_WARNING("Cannot remove neighbor %s\n",
   27dd4:	2104      	movs	r1, #4
   27dd6:	4628      	mov	r0, r5
   27dd8:	f7db fcc2 	bl	3760 <shell_fprintf>
   27ddc:	e7e7      	b.n	27dae <cmd_net_nbr_rm+0x1a>
	if (!net_ipv6_nbr_rm(NULL, &addr)) {
   27dde:	4669      	mov	r1, sp
   27de0:	4620      	mov	r0, r4
   27de2:	f7fd fd83 	bl	258ec <net_ipv6_nbr_rm>
		PR_WARNING("Cannot remove neighbor %s\n",
   27de6:	4669      	mov	r1, sp
	if (!net_ipv6_nbr_rm(NULL, &addr)) {
   27de8:	b928      	cbnz	r0, 27df6 <cmd_net_nbr_rm+0x62>
		PR_WARNING("Cannot remove neighbor %s\n",
   27dea:	200a      	movs	r0, #10
   27dec:	f7fb f9ac 	bl	23148 <net_sprint_addr>
   27df0:	4a08      	ldr	r2, [pc, #32]	; (27e14 <cmd_net_nbr_rm+0x80>)
   27df2:	4603      	mov	r3, r0
   27df4:	e7ee      	b.n	27dd4 <cmd_net_nbr_rm+0x40>
		PR("Neighbor %s removed.\n", net_sprint_ipv6_addr(&addr));
   27df6:	200a      	movs	r0, #10
   27df8:	f7fb f9a6 	bl	23148 <net_sprint_addr>
   27dfc:	4a06      	ldr	r2, [pc, #24]	; (27e18 <cmd_net_nbr_rm+0x84>)
   27dfe:	4603      	mov	r3, r0
   27e00:	4621      	mov	r1, r4
   27e02:	4628      	mov	r0, r5
   27e04:	f7db fcac 	bl	3760 <shell_fprintf>
	return 0;
   27e08:	4620      	mov	r0, r4
   27e0a:	e7d2      	b.n	27db2 <cmd_net_nbr_rm+0x1e>
   27e0c:	00035d0c 	.word	0x00035d0c
   27e10:	00035d2c 	.word	0x00035d2c
   27e14:	00035d3f 	.word	0x00035d3f
   27e18:	00035d5a 	.word	0x00035d5a

00027e1c <nbr_address_get>:

#define NBR_ADDRESS_CMD &nbr_address

static void nbr_address_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   27e1c:	2300      	movs	r3, #0
{
   27e1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	entry->handler = NULL;
   27e20:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   27e22:	604b      	str	r3, [r1, #4]
	entry->subcmd = &nbr_address;
   27e24:	4b0e      	ldr	r3, [pc, #56]	; (27e60 <nbr_address_get+0x44>)
   27e26:	608b      	str	r3, [r1, #8]
{
   27e28:	460d      	mov	r5, r1
	if (idx == 0) {
   27e2a:	4604      	mov	r4, r0
   27e2c:	b988      	cbnz	r0, 27e52 <nbr_address_get+0x36>
		memset(nbr_address_buffer, 0, sizeof(nbr_address_buffer));
   27e2e:	4601      	mov	r1, r0
   27e30:	22f0      	movs	r2, #240	; 0xf0
   27e32:	480c      	ldr	r0, [pc, #48]	; (27e64 <nbr_address_get+0x48>)
   27e34:	f7de ff55 	bl	6ce2 <memset>
	int count = 0;
   27e38:	a902      	add	r1, sp, #8
	net_ipv6_nbr_foreach(nbr_address_cb, &count);
   27e3a:	480b      	ldr	r0, [pc, #44]	; (27e68 <nbr_address_get+0x4c>)
	int count = 0;
   27e3c:	f841 4d04 	str.w	r4, [r1, #-4]!
	net_ipv6_nbr_foreach(nbr_address_cb, &count);
   27e40:	f7fd fd48 	bl	258d4 <net_ipv6_nbr_foreach>
	if (!nbr_address_buffer[idx][0]) {
   27e44:	2328      	movs	r3, #40	; 0x28
   27e46:	4a07      	ldr	r2, [pc, #28]	; (27e64 <nbr_address_get+0x48>)
   27e48:	435c      	muls	r4, r3
   27e4a:	1913      	adds	r3, r2, r4
   27e4c:	5d12      	ldrb	r2, [r2, r4]
   27e4e:	b91a      	cbnz	r2, 27e58 <nbr_address_get+0x3c>
   27e50:	e001      	b.n	27e56 <nbr_address_get+0x3a>
	if (idx >= CONFIG_NET_IPV6_MAX_NEIGHBORS) {
   27e52:	2805      	cmp	r0, #5
   27e54:	d9f6      	bls.n	27e44 <nbr_address_get+0x28>
		return NULL;
   27e56:	2300      	movs	r3, #0
	entry->syntax = set_nbr_address(idx);
   27e58:	602b      	str	r3, [r5, #0]
}
   27e5a:	b003      	add	sp, #12
   27e5c:	bd30      	pop	{r4, r5, pc}
   27e5e:	bf00      	nop
   27e60:	00036368 	.word	0x00036368
   27e64:	2000291c 	.word	0x2000291c
   27e68:	00027e6d 	.word	0x00027e6d

00027e6c <nbr_address_cb>:
{
   27e6c:	b538      	push	{r3, r4, r5, lr}
	if (*count >= CONFIG_NET_IPV6_MAX_NEIGHBORS) {
   27e6e:	680d      	ldr	r5, [r1, #0]
   27e70:	2d05      	cmp	r5, #5
{
   27e72:	460c      	mov	r4, r1
	if (*count >= CONFIG_NET_IPV6_MAX_NEIGHBORS) {
   27e74:	dc0f      	bgt.n	27e96 <nbr_address_cb+0x2a>
		 "%s", net_sprint_ipv6_addr(&net_ipv6_nbr_data(nbr)->addr));
   27e76:	68c1      	ldr	r1, [r0, #12]
	snprintk(nbr_address_buffer[*count], NET_IPV6_ADDR_LEN,
   27e78:	200a      	movs	r0, #10
   27e7a:	3104      	adds	r1, #4
   27e7c:	f7fb f964 	bl	23148 <net_sprint_addr>
   27e80:	4603      	mov	r3, r0
   27e82:	4805      	ldr	r0, [pc, #20]	; (27e98 <nbr_address_cb+0x2c>)
   27e84:	4a05      	ldr	r2, [pc, #20]	; (27e9c <nbr_address_cb+0x30>)
   27e86:	2128      	movs	r1, #40	; 0x28
   27e88:	fb01 0005 	mla	r0, r1, r5, r0
   27e8c:	f7d9 fb08 	bl	14a0 <snprintk>
	(*count)++;
   27e90:	6823      	ldr	r3, [r4, #0]
   27e92:	3301      	adds	r3, #1
   27e94:	6023      	str	r3, [r4, #0]
}
   27e96:	bd38      	pop	{r3, r4, r5, pc}
   27e98:	2000291c 	.word	0x2000291c
   27e9c:	0002fdfc 	.word	0x0002fdfc

00027ea0 <cmd_net_mem>:
{
   27ea0:	b570      	push	{r4, r5, r6, lr}
	if (shell_help_requested(shell)) {
   27ea2:	6883      	ldr	r3, [r0, #8]
   27ea4:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27ea8:	f3c4 0440 	ubfx	r4, r4, #1, #1
{
   27eac:	b094      	sub	sp, #80	; 0x50
   27eae:	4605      	mov	r5, r0
	if (shell_help_requested(shell)) {
   27eb0:	b13c      	cbz	r4, 27ec2 <cmd_net_mem+0x22>
		shell_help_print(shell, NULL, 0);
   27eb2:	2200      	movs	r2, #0
   27eb4:	4611      	mov	r1, r2
   27eb6:	f7db fd57 	bl	3968 <shell_help_print>
		return -ENOEXEC;
   27eba:	f06f 0007 	mvn.w	r0, #7
}
   27ebe:	b014      	add	sp, #80	; 0x50
   27ec0:	bd70      	pop	{r4, r5, r6, pc}
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
   27ec2:	ab05      	add	r3, sp, #20
   27ec4:	aa04      	add	r2, sp, #16
   27ec6:	a903      	add	r1, sp, #12
   27ec8:	a802      	add	r0, sp, #8
   27eca:	f7fa fe4f 	bl	22b6c <net_pkt_get_info>
	PR("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
   27ece:	f44f 7380 	mov.w	r3, #256	; 0x100
   27ed2:	4a24      	ldr	r2, [pc, #144]	; (27f64 <cmd_net_mem+0xc4>)
   27ed4:	4621      	mov	r1, r4
   27ed6:	4628      	mov	r0, r5
   27ed8:	f7db fc42 	bl	3760 <shell_fprintf>
	PR("Network buffer pools:\n");
   27edc:	4a22      	ldr	r2, [pc, #136]	; (27f68 <cmd_net_mem+0xc8>)
   27ede:	4621      	mov	r1, r4
   27ee0:	4628      	mov	r0, r5
   27ee2:	f7db fc3d 	bl	3760 <shell_fprintf>
	PR("(CONFIG_NET_BUF_POOL_USAGE to see free #s)\n");
   27ee6:	4a21      	ldr	r2, [pc, #132]	; (27f6c <cmd_net_mem+0xcc>)
   27ee8:	4621      	mov	r1, r4
   27eea:	4628      	mov	r0, r5
   27eec:	f7db fc38 	bl	3760 <shell_fprintf>
	PR("Address\t\tTotal\tName\n");
   27ef0:	4a1f      	ldr	r2, [pc, #124]	; (27f70 <cmd_net_mem+0xd0>)
   27ef2:	4621      	mov	r1, r4
   27ef4:	4628      	mov	r0, r5
   27ef6:	f7db fc33 	bl	3760 <shell_fprintf>
	PR("%p\t%d\tRX\n", rx, rx->num_blocks);
   27efa:	9b02      	ldr	r3, [sp, #8]
   27efc:	689a      	ldr	r2, [r3, #8]
   27efe:	9200      	str	r2, [sp, #0]
   27f00:	4621      	mov	r1, r4
   27f02:	4a1c      	ldr	r2, [pc, #112]	; (27f74 <cmd_net_mem+0xd4>)
   27f04:	4628      	mov	r0, r5
   27f06:	f7db fc2b 	bl	3760 <shell_fprintf>
	PR("%p\t%d\tTX\n", tx, tx->num_blocks);
   27f0a:	9b03      	ldr	r3, [sp, #12]
   27f0c:	689a      	ldr	r2, [r3, #8]
   27f0e:	9200      	str	r2, [sp, #0]
   27f10:	4621      	mov	r1, r4
   27f12:	4a19      	ldr	r2, [pc, #100]	; (27f78 <cmd_net_mem+0xd8>)
   27f14:	4628      	mov	r0, r5
   27f16:	f7db fc23 	bl	3760 <shell_fprintf>
	PR("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
   27f1a:	9b04      	ldr	r3, [sp, #16]
   27f1c:	8a1a      	ldrh	r2, [r3, #16]
   27f1e:	9200      	str	r2, [sp, #0]
   27f20:	4621      	mov	r1, r4
   27f22:	4a16      	ldr	r2, [pc, #88]	; (27f7c <cmd_net_mem+0xdc>)
   27f24:	4628      	mov	r0, r5
   27f26:	f7db fc1b 	bl	3760 <shell_fprintf>
	PR("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
   27f2a:	9b05      	ldr	r3, [sp, #20]
   27f2c:	8a1a      	ldrh	r2, [r3, #16]
   27f2e:	9200      	str	r2, [sp, #0]
   27f30:	4621      	mov	r1, r4
   27f32:	4a13      	ldr	r2, [pc, #76]	; (27f80 <cmd_net_mem+0xe0>)
   27f34:	4628      	mov	r0, r5
		(void)memset(&info, 0, sizeof(info));
   27f36:	ae08      	add	r6, sp, #32
	PR("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
   27f38:	f7db fc12 	bl	3760 <shell_fprintf>
		(void)memset(&info, 0, sizeof(info));
   27f3c:	2230      	movs	r2, #48	; 0x30
   27f3e:	4621      	mov	r1, r4
   27f40:	4630      	mov	r0, r6
   27f42:	f7de fece 	bl	6ce2 <memset>
		net_context_foreach(context_info, &user_data);
   27f46:	a906      	add	r1, sp, #24
   27f48:	480e      	ldr	r0, [pc, #56]	; (27f84 <cmd_net_mem+0xe4>)
		user_data.user_data = &info;
   27f4a:	e9cd 5606 	strd	r5, r6, [sp, #24]
		net_context_foreach(context_info, &user_data);
   27f4e:	f7f8 fbdb 	bl	20708 <net_context_foreach>
		if (!info.are_external_pools) {
   27f52:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
   27f56:	b919      	cbnz	r1, 27f60 <cmd_net_mem+0xc0>
			PR("No external memory pools found.\n");
   27f58:	4a0b      	ldr	r2, [pc, #44]	; (27f88 <cmd_net_mem+0xe8>)
   27f5a:	4628      	mov	r0, r5
   27f5c:	f7db fc00 	bl	3760 <shell_fprintf>
	return 0;
   27f60:	2000      	movs	r0, #0
   27f62:	e7ac      	b.n	27ebe <cmd_net_mem+0x1e>
   27f64:	00035c38 	.word	0x00035c38
   27f68:	00035c52 	.word	0x00035c52
   27f6c:	00035c69 	.word	0x00035c69
   27f70:	00035c95 	.word	0x00035c95
   27f74:	00035caa 	.word	0x00035caa
   27f78:	00035cb4 	.word	0x00035cb4
   27f7c:	00035cbe 	.word	0x00035cbe
   27f80:	00035ccd 	.word	0x00035ccd
   27f84:	000293bd 	.word	0x000293bd
   27f88:	00035cdc 	.word	0x00035cdc

00027f8c <iface_index_get>:
{
   27f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	entry->handler = NULL;
   27f8e:	2300      	movs	r3, #0
	struct net_if *iface = net_if_get_by_index(idx);
   27f90:	b2c7      	uxtb	r7, r0
{
   27f92:	4606      	mov	r6, r0
	entry->handler = NULL;
   27f94:	60cb      	str	r3, [r1, #12]
	struct net_if *iface = net_if_get_by_index(idx);
   27f96:	4638      	mov	r0, r7
{
   27f98:	460d      	mov	r5, r1
	struct net_if *iface = net_if_get_by_index(idx);
   27f9a:	f7f9 ff69 	bl	21e70 <net_if_get_by_index>
	if (!iface) {
   27f9e:	b328      	cbz	r0, 27fec <iface_index_get+0x60>
	return iface->if_dev->l2;
   27fa0:	6803      	ldr	r3, [r0, #0]
	snprintk(iface_help_buffer[idx], MAX_IFACE_HELP_STR_LEN,
   27fa2:	4c14      	ldr	r4, [pc, #80]	; (27ff4 <iface_index_get+0x68>)
	if (net_if_l2(iface) == &NET_L2_GET_NAME(BLUETOOTH)) {
   27fa4:	f8d3 c004 	ldr.w	ip, [r3, #4]
	snprintk(iface_help_buffer[idx], MAX_IFACE_HELP_STR_LEN,
   27fa8:	4a13      	ldr	r2, [pc, #76]	; (27ff8 <iface_index_get+0x6c>)
   27faa:	9000      	str	r0, [sp, #0]
   27fac:	211c      	movs	r1, #28
   27fae:	4813      	ldr	r0, [pc, #76]	; (27ffc <iface_index_get+0x70>)
   27fb0:	4b13      	ldr	r3, [pc, #76]	; (28000 <iface_index_get+0x74>)
   27fb2:	fb01 4406 	mla	r4, r1, r6, r4
   27fb6:	459c      	cmp	ip, r3
   27fb8:	bf0c      	ite	eq
   27fba:	4603      	moveq	r3, r0
   27fbc:	4613      	movne	r3, r2
   27fbe:	4a11      	ldr	r2, [pc, #68]	; (28004 <iface_index_get+0x78>)
   27fc0:	4620      	mov	r0, r4
   27fc2:	f7d9 fa6d 	bl	14a0 <snprintk>
	entry->subcmd = &iface_index;
   27fc6:	4b10      	ldr	r3, [pc, #64]	; (28008 <iface_index_get+0x7c>)
	entry->help  = set_iface_index_help(idx);
   27fc8:	606c      	str	r4, [r5, #4]
	entry->subcmd = &iface_index;
   27fca:	60ab      	str	r3, [r5, #8]
	struct net_if *iface = net_if_get_by_index(idx);
   27fcc:	4638      	mov	r0, r7
   27fce:	f7f9 ff4f 	bl	21e70 <net_if_get_by_index>
	if (!iface) {
   27fd2:	b168      	cbz	r0, 27ff0 <iface_index_get+0x64>
	snprintk(iface_index_buffer[idx], MAX_IFACE_STR_LEN, "%zu", idx);
   27fd4:	4c0d      	ldr	r4, [pc, #52]	; (2800c <iface_index_get+0x80>)
   27fd6:	4a0e      	ldr	r2, [pc, #56]	; (28010 <iface_index_get+0x84>)
   27fd8:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   27fdc:	4633      	mov	r3, r6
   27fde:	2104      	movs	r1, #4
   27fe0:	4620      	mov	r0, r4
   27fe2:	f7d9 fa5d 	bl	14a0 <snprintk>
	entry->syntax = set_iface_index_buffer(idx);
   27fe6:	602c      	str	r4, [r5, #0]
}
   27fe8:	b003      	add	sp, #12
   27fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   27fec:	4604      	mov	r4, r0
   27fee:	e7ea      	b.n	27fc6 <iface_index_get+0x3a>
		return NULL;
   27ff0:	4604      	mov	r4, r0
   27ff2:	e7f8      	b.n	27fe6 <iface_index_get+0x5a>
   27ff4:	200028fc 	.word	0x200028fc
   27ff8:	0003632a 	.word	0x0003632a
   27ffc:	00036320 	.word	0x00036320
   28000:	0002ef24 	.word	0x0002ef24
   28004:	00036339 	.word	0x00036339
   28008:	00036318 	.word	0x00036318
   2800c:	20002918 	.word	0x20002918
   28010:	00031fa0 	.word	0x00031fa0

00028014 <cmd_net_conn>:
{
   28014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int count = 0;
   28016:	2200      	movs	r2, #0
	if (shell_help_requested(shell)) {
   28018:	6883      	ldr	r3, [r0, #8]
	int count = 0;
   2801a:	9201      	str	r2, [sp, #4]
   2801c:	f8d3 124c 	ldr.w	r1, [r3, #588]	; 0x24c
   28020:	f3c1 0140 	ubfx	r1, r1, #1, #1
{
   28024:	4604      	mov	r4, r0
	if (shell_help_requested(shell)) {
   28026:	b131      	cbz	r1, 28036 <cmd_net_conn+0x22>
		shell_help_print(shell, NULL, 0);
   28028:	4611      	mov	r1, r2
   2802a:	f7db fc9d 	bl	3968 <shell_help_print>
		return -ENOEXEC;
   2802e:	f06f 0007 	mvn.w	r0, #7
}
   28032:	b004      	add	sp, #16
   28034:	bd10      	pop	{r4, pc}
	PR("     Context   \tIface         Flags Local           \tRemote\n");
   28036:	4a14      	ldr	r2, [pc, #80]	; (28088 <cmd_net_conn+0x74>)
   28038:	f7db fb92 	bl	3760 <shell_fprintf>
	user_data.user_data = &count;
   2803c:	ab01      	add	r3, sp, #4
	net_context_foreach(context_cb, &user_data);
   2803e:	a902      	add	r1, sp, #8
   28040:	4812      	ldr	r0, [pc, #72]	; (2808c <cmd_net_conn+0x78>)
	user_data.shell = shell;
   28042:	9402      	str	r4, [sp, #8]
	user_data.user_data = &count;
   28044:	9303      	str	r3, [sp, #12]
	net_context_foreach(context_cb, &user_data);
   28046:	f7f8 fb5f 	bl	20708 <net_context_foreach>
	if (count == 0) {
   2804a:	9901      	ldr	r1, [sp, #4]
   2804c:	b919      	cbnz	r1, 28056 <cmd_net_conn+0x42>
		PR("No connections\n");
   2804e:	4a10      	ldr	r2, [pc, #64]	; (28090 <cmd_net_conn+0x7c>)
   28050:	4620      	mov	r0, r4
   28052:	f7db fb85 	bl	3760 <shell_fprintf>
	PR("\nTCP        Context   Src port Dst port   "
   28056:	4a0f      	ldr	r2, [pc, #60]	; (28094 <cmd_net_conn+0x80>)
   28058:	2100      	movs	r1, #0
   2805a:	4620      	mov	r0, r4
   2805c:	f7db fb80 	bl	3760 <shell_fprintf>
	count = 0;
   28060:	2300      	movs	r3, #0
	net_tcp_foreach(tcp_cb, &user_data);
   28062:	a902      	add	r1, sp, #8
   28064:	480c      	ldr	r0, [pc, #48]	; (28098 <cmd_net_conn+0x84>)
	count = 0;
   28066:	9301      	str	r3, [sp, #4]
	net_tcp_foreach(tcp_cb, &user_data);
   28068:	f002 f9b2 	bl	2a3d0 <net_tcp_foreach>
	if (count == 0) {
   2806c:	9901      	ldr	r1, [sp, #4]
   2806e:	b919      	cbnz	r1, 28078 <cmd_net_conn+0x64>
		PR("No TCP connections\n");
   28070:	4a0a      	ldr	r2, [pc, #40]	; (2809c <cmd_net_conn+0x88>)
   28072:	4620      	mov	r0, r4
   28074:	f7db fb74 	bl	3760 <shell_fprintf>
	PR_INFO("\nEnable CONFIG_NET_TCP_LOG_LEVEL_DBG=y for additional info\n");
   28078:	4620      	mov	r0, r4
   2807a:	4a09      	ldr	r2, [pc, #36]	; (280a0 <cmd_net_conn+0x8c>)
   2807c:	2103      	movs	r1, #3
   2807e:	f7db fb6f 	bl	3760 <shell_fprintf>
	return 0;
   28082:	2000      	movs	r0, #0
   28084:	e7d5      	b.n	28032 <cmd_net_conn+0x1e>
   28086:	bf00      	nop
   28088:	00035738 	.word	0x00035738
   2808c:	000288fd 	.word	0x000288fd
   28090:	00035775 	.word	0x00035775
   28094:	00035785 	.word	0x00035785
   28098:	000280a5 	.word	0x000280a5
   2809c:	000357d2 	.word	0x000357d2
   280a0:	000357e6 	.word	0x000357e6

000280a4 <tcp_cb>:
{
   280a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   280a8:	b08b      	sub	sp, #44	; 0x2c
   280aa:	4604      	mov	r4, r0
	int *count = data->user_data;
   280ac:	e9d1 6500 	ldrd	r6, r5, [r1]
	u16_t recv_mss = net_tcp_get_recv_mss(tcp);
   280b0:	f001 fecc 	bl	29e4c <net_tcp_get_recv_mss>
	PR("%p %p   %5u    %5u %10u %10u %5u   %s\n",
   280b4:	6827      	ldr	r7, [r4, #0]
   280b6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   280ba:	f8b7 800a 	ldrh.w	r8, [r7, #10]
   280be:	f8b7 9016 	ldrh.w	r9, [r7, #22]
   280c2:	9309      	str	r3, [sp, #36]	; 0x24
	u16_t recv_mss = net_tcp_get_recv_mss(tcp);
   280c4:	4682      	mov	sl, r0
 *
 * @param tcp TCP context
 */
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   280c6:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
	PR("%p %p   %5u    %5u %10u %10u %5u   %s\n",
   280ca:	f8d4 b094 	ldr.w	fp, [r4, #148]	; 0x94
   280ce:	f3c0 3043 	ubfx	r0, r0, #13, #4
   280d2:	f001 ff5b 	bl	29f8c <net_tcp_state_str>
   280d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   280d8:	9303      	str	r3, [sp, #12]
   280da:	ea4f 2209 	mov.w	r2, r9, lsl #8
   280de:	ea4f 2308 	mov.w	r3, r8, lsl #8
   280e2:	ea42 2219 	orr.w	r2, r2, r9, lsr #8
   280e6:	ea43 2318 	orr.w	r3, r3, r8, lsr #8
   280ea:	b292      	uxth	r2, r2
   280ec:	b29b      	uxth	r3, r3
   280ee:	e9cd a005 	strd	sl, r0, [sp, #20]
   280f2:	9202      	str	r2, [sp, #8]
   280f4:	e9cd 7300 	strd	r7, r3, [sp]
   280f8:	f8cd b010 	str.w	fp, [sp, #16]
   280fc:	4623      	mov	r3, r4
   280fe:	4a05      	ldr	r2, [pc, #20]	; (28114 <tcp_cb+0x70>)
   28100:	2100      	movs	r1, #0
   28102:	4630      	mov	r0, r6
   28104:	f7db fb2c 	bl	3760 <shell_fprintf>
	(*count)++;
   28108:	682b      	ldr	r3, [r5, #0]
   2810a:	3301      	adds	r3, #1
   2810c:	602b      	str	r3, [r5, #0]
}
   2810e:	b00b      	add	sp, #44	; 0x2c
   28110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28114:	00036e3f 	.word	0x00036e3f

00028118 <cmd_net_allocs.part.26>:
static int cmd_net_tcp(const struct shell *shell, size_t argc, char *argv[])
   28118:	b508      	push	{r3, lr}
		shell_help_print(shell, NULL, 0);
   2811a:	2200      	movs	r2, #0
   2811c:	4611      	mov	r1, r2
   2811e:	f7db fc23 	bl	3968 <shell_help_print>
}
   28122:	f06f 0007 	mvn.w	r0, #7
   28126:	bd08      	pop	{r3, pc}

00028128 <cmd_net_tcp>:
	if (shell_help_requested(shell)) {
   28128:	6883      	ldr	r3, [r0, #8]
   2812a:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
   2812e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   28132:	b10b      	cbz	r3, 28138 <cmd_net_tcp+0x10>
   28134:	f7ff bff0 	b.w	28118 <cmd_net_allocs.part.26>
}
   28138:	4618      	mov	r0, r3
   2813a:	4770      	bx	lr

0002813c <cmd_net_vlan>:
{
   2813c:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   2813e:	6883      	ldr	r3, [r0, #8]
   28140:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   28144:	f3c4 0440 	ubfx	r4, r4, #1, #1
   28148:	b11c      	cbz	r4, 28152 <cmd_net_vlan+0x16>
}
   2814a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2814e:	f7ff bfe3 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("Set CONFIG_NET_VLAN to enable virtual LAN support.\n");
   28152:	4a03      	ldr	r2, [pc, #12]	; (28160 <cmd_net_vlan+0x24>)
   28154:	2103      	movs	r1, #3
   28156:	f7db fb03 	bl	3760 <shell_fprintf>
}
   2815a:	4620      	mov	r0, r4
   2815c:	bd10      	pop	{r4, pc}
   2815e:	bf00      	nop
   28160:	000360bd 	.word	0x000360bd

00028164 <cmd_net_vlan_del>:
{
   28164:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   28166:	6883      	ldr	r3, [r0, #8]
   28168:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   2816c:	f3c4 0440 	ubfx	r4, r4, #1, #1
   28170:	b11c      	cbz	r4, 2817a <cmd_net_vlan_del+0x16>
}
   28172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28176:	f7ff bfcf 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("Set CONFIG_NET_VLAN to enable virtual LAN support.\n");
   2817a:	4a03      	ldr	r2, [pc, #12]	; (28188 <cmd_net_vlan_del+0x24>)
   2817c:	2103      	movs	r1, #3
   2817e:	f7db faef 	bl	3760 <shell_fprintf>
}
   28182:	4620      	mov	r0, r4
   28184:	bd10      	pop	{r4, pc}
   28186:	bf00      	nop
   28188:	000360bd 	.word	0x000360bd

0002818c <cmd_net_vlan_add>:
{
   2818c:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   2818e:	6883      	ldr	r3, [r0, #8]
   28190:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   28194:	f3c4 0440 	ubfx	r4, r4, #1, #1
   28198:	b11c      	cbz	r4, 281a2 <cmd_net_vlan_add+0x16>
}
   2819a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2819e:	f7ff bfbb 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("Set CONFIG_NET_VLAN to enable virtual LAN support.\n");
   281a2:	4a03      	ldr	r2, [pc, #12]	; (281b0 <cmd_net_vlan_add+0x24>)
   281a4:	2103      	movs	r1, #3
   281a6:	f7db fadb 	bl	3760 <shell_fprintf>
}
   281aa:	4620      	mov	r0, r4
   281ac:	bd10      	pop	{r4, pc}
   281ae:	bf00      	nop
   281b0:	000360bd 	.word	0x000360bd

000281b4 <cmd_net_stats>:
{
   281b4:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   281b6:	6883      	ldr	r3, [r0, #8]
   281b8:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   281bc:	f3c4 0440 	ubfx	r4, r4, #1, #1
   281c0:	b11c      	cbz	r4, 281ca <cmd_net_stats+0x16>
}
   281c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   281c6:	f7ff bfa7 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("Network statistics not enabled. Set CONFIG_NET_STATISTICS "
   281ca:	4a03      	ldr	r2, [pc, #12]	; (281d8 <cmd_net_stats+0x24>)
   281cc:	2103      	movs	r1, #3
   281ce:	f7db fac7 	bl	3760 <shell_fprintf>
}
   281d2:	4620      	mov	r0, r4
   281d4:	bd10      	pop	{r4, pc}
   281d6:	bf00      	nop
   281d8:	00035f05 	.word	0x00035f05

000281dc <cmd_net_stats_iface>:
{
   281dc:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   281de:	6883      	ldr	r3, [r0, #8]
   281e0:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   281e4:	f3c4 0440 	ubfx	r4, r4, #1, #1
   281e8:	b11c      	cbz	r4, 281f2 <cmd_net_stats_iface+0x16>
}
   281ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   281ee:	f7ff bf93 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("Network statistics not enabled. Set CONFIG_NET_STATISTICS "
   281f2:	4a03      	ldr	r2, [pc, #12]	; (28200 <cmd_net_stats_iface+0x24>)
   281f4:	2103      	movs	r1, #3
   281f6:	f7db fab3 	bl	3760 <shell_fprintf>
}
   281fa:	4620      	mov	r0, r4
   281fc:	bd10      	pop	{r4, pc}
   281fe:	bf00      	nop
   28200:	00035f05 	.word	0x00035f05

00028204 <cmd_net_stats_all>:
{
   28204:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   28206:	6883      	ldr	r3, [r0, #8]
   28208:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   2820c:	f3c4 0440 	ubfx	r4, r4, #1, #1
   28210:	b11c      	cbz	r4, 2821a <cmd_net_stats_all+0x16>
}
   28212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28216:	f7ff bf7f 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("Network statistics not enabled. Set CONFIG_NET_STATISTICS "
   2821a:	4a03      	ldr	r2, [pc, #12]	; (28228 <cmd_net_stats_all+0x24>)
   2821c:	2103      	movs	r1, #3
   2821e:	f7db fa9f 	bl	3760 <shell_fprintf>
}
   28222:	4620      	mov	r0, r4
   28224:	bd10      	pop	{r4, pc}
   28226:	bf00      	nop
   28228:	00035f05 	.word	0x00035f05

0002822c <cmd_net_stacks>:
{
   2822c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (shell_help_requested(shell)) {
   28230:	6883      	ldr	r3, [r0, #8]
   28232:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
   28236:	079b      	lsls	r3, r3, #30
{
   28238:	b08c      	sub	sp, #48	; 0x30
   2823a:	4605      	mov	r5, r0
	if (shell_help_requested(shell)) {
   2823c:	f140 8089 	bpl.w	28352 <cmd_net_stacks+0x126>
		shell_help_print(shell, NULL, 0);
   28240:	2200      	movs	r2, #0
   28242:	4611      	mov	r1, r2
   28244:	f7db fb90 	bl	3968 <shell_help_print>
		return -ENOEXEC;
   28248:	f06f 0007 	mvn.w	r0, #7
}
   2824c:	b00c      	add	sp, #48	; 0x30
   2824e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
   28252:	6921      	ldr	r1, [r4, #16]
   28254:	6820      	ldr	r0, [r4, #0]
   28256:	f7ff fcdc 	bl	27c12 <net_analyze_stack_get_values>
		if (info->idx >= 0) {
   2825a:	f8d4 e018 	ldr.w	lr, [r4, #24]
   2825e:	6923      	ldr	r3, [r4, #16]
   28260:	f1be 0f00 	cmp.w	lr, #0
   28264:	e9dd c20a 	ldrd	ip, r2, [sp, #40]	; 0x28
   28268:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
   2826c:	db61      	blt.n	28332 <cmd_net_stacks+0x106>
			PR("%s-%d [%s-%d] stack size %zu/%zu bytes "
   2826e:	e9cd 3c07 	strd	r3, ip, [sp, #28]
   28272:	eba3 0c02 	sub.w	ip, r3, r2
   28276:	e9cd 2c05 	strd	r2, ip, [sp, #20]
   2827a:	e9cd 0303 	strd	r0, r3, [sp, #12]
   2827e:	e9cd 1e01 	strd	r1, lr, [sp, #4]
   28282:	6963      	ldr	r3, [r4, #20]
   28284:	9300      	str	r3, [sp, #0]
   28286:	6863      	ldr	r3, [r4, #4]
   28288:	4642      	mov	r2, r8
   2828a:	2100      	movs	r1, #0
   2828c:	4628      	mov	r0, r5
   2828e:	f7db fa67 	bl	3760 <shell_fprintf>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   28292:	3420      	adds	r4, #32
   28294:	42b4      	cmp	r4, r6
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
   28296:	ab0b      	add	r3, sp, #44	; 0x2c
   28298:	aa0a      	add	r2, sp, #40	; 0x28
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   2829a:	d1da      	bne.n	28252 <cmd_net_stacks+0x26>
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_main_stack),
   2829c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   282a0:	482f      	ldr	r0, [pc, #188]	; (28360 <cmd_net_stacks+0x134>)
   282a2:	f7ff fcb6 	bl	27c12 <net_analyze_stack_get_values>
	PR("%s [%s] stack size %d/%d bytes unused %u usage %d/%d (%u %%)\n",
   282a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   282aa:	f44f 6400 	mov.w	r4, #2048	; 0x800
   282ae:	9206      	str	r2, [sp, #24]
   282b0:	1ae2      	subs	r2, r4, r3
   282b2:	e9cd 3203 	strd	r3, r2, [sp, #12]
   282b6:	4b2b      	ldr	r3, [pc, #172]	; (28364 <cmd_net_stacks+0x138>)
   282b8:	9300      	str	r3, [sp, #0]
   282ba:	4a2b      	ldr	r2, [pc, #172]	; (28368 <cmd_net_stacks+0x13c>)
   282bc:	4b2b      	ldr	r3, [pc, #172]	; (2836c <cmd_net_stacks+0x140>)
   282be:	9405      	str	r4, [sp, #20]
   282c0:	2100      	movs	r1, #0
   282c2:	4628      	mov	r0, r5
   282c4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   282c8:	f7db fa4a 	bl	3760 <shell_fprintf>
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_interrupt_stack),
   282cc:	ab0b      	add	r3, sp, #44	; 0x2c
   282ce:	aa0a      	add	r2, sp, #40	; 0x28
   282d0:	4621      	mov	r1, r4
   282d2:	4827      	ldr	r0, [pc, #156]	; (28370 <cmd_net_stacks+0x144>)
   282d4:	f7ff fc9d 	bl	27c12 <net_analyze_stack_get_values>
	PR("%s [%s] stack size %d/%d bytes unused %u usage %d/%d (%u %%)\n",
   282d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   282dc:	e9cd 4205 	strd	r4, r2, [sp, #20]
   282e0:	1ae2      	subs	r2, r4, r3
   282e2:	e9cd 3203 	strd	r3, r2, [sp, #12]
   282e6:	4b23      	ldr	r3, [pc, #140]	; (28374 <cmd_net_stacks+0x148>)
   282e8:	9300      	str	r3, [sp, #0]
   282ea:	4a1f      	ldr	r2, [pc, #124]	; (28368 <cmd_net_stacks+0x13c>)
   282ec:	4b22      	ldr	r3, [pc, #136]	; (28378 <cmd_net_stacks+0x14c>)
   282ee:	2100      	movs	r1, #0
   282f0:	4628      	mov	r0, r5
   282f2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   282f6:	f7db fa33 	bl	3760 <shell_fprintf>
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(sys_work_q_stack),
   282fa:	ab0b      	add	r3, sp, #44	; 0x2c
   282fc:	aa0a      	add	r2, sp, #40	; 0x28
   282fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
   28302:	481e      	ldr	r0, [pc, #120]	; (2837c <cmd_net_stacks+0x150>)
   28304:	f7ff fc85 	bl	27c12 <net_analyze_stack_get_values>
	PR("%s [%s] stack size %d/%d bytes unused %u usage %d/%d (%u %%)\n",
   28308:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   2830c:	9306      	str	r3, [sp, #24]
   2830e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   28312:	1a99      	subs	r1, r3, r2
   28314:	9305      	str	r3, [sp, #20]
   28316:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2831a:	4b19      	ldr	r3, [pc, #100]	; (28380 <cmd_net_stacks+0x154>)
   2831c:	9300      	str	r3, [sp, #0]
   2831e:	e9cd 2103 	strd	r2, r1, [sp, #12]
   28322:	4628      	mov	r0, r5
   28324:	4b17      	ldr	r3, [pc, #92]	; (28384 <cmd_net_stacks+0x158>)
   28326:	4a10      	ldr	r2, [pc, #64]	; (28368 <cmd_net_stacks+0x13c>)
   28328:	2100      	movs	r1, #0
   2832a:	f7db fa19 	bl	3760 <shell_fprintf>
   2832e:	2000      	movs	r0, #0
   28330:	e78c      	b.n	2824c <cmd_net_stacks+0x20>
			PR("%s [%s] stack size %zu/%zu bytes unused %u "
   28332:	e9cd 3c05 	strd	r3, ip, [sp, #20]
   28336:	eba3 0c02 	sub.w	ip, r3, r2
   2833a:	e9cd 2c03 	strd	r2, ip, [sp, #12]
   2833e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   28342:	9100      	str	r1, [sp, #0]
   28344:	6863      	ldr	r3, [r4, #4]
   28346:	463a      	mov	r2, r7
   28348:	2100      	movs	r1, #0
   2834a:	4628      	mov	r0, r5
   2834c:	f7db fa08 	bl	3760 <shell_fprintf>
   28350:	e79f      	b.n	28292 <cmd_net_stacks+0x66>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   28352:	4c0d      	ldr	r4, [pc, #52]	; (28388 <cmd_net_stacks+0x15c>)
   28354:	4e0d      	ldr	r6, [pc, #52]	; (2838c <cmd_net_stacks+0x160>)
			PR("%s [%s] stack size %zu/%zu bytes unused %u "
   28356:	4f0e      	ldr	r7, [pc, #56]	; (28390 <cmd_net_stacks+0x164>)
			PR("%s-%d [%s-%d] stack size %zu/%zu bytes "
   28358:	f8df 8038 	ldr.w	r8, [pc, #56]	; 28394 <cmd_net_stacks+0x168>
   2835c:	e79a      	b.n	28294 <cmd_net_stacks+0x68>
   2835e:	bf00      	nop
   28360:	2000c1b0 	.word	0x2000c1b0
   28364:	00035ed1 	.word	0x00035ed1
   28368:	00035e93 	.word	0x00035e93
   2836c:	00035e8e 	.word	0x00035e8e
   28370:	2000caf0 	.word	0x2000caf0
   28374:	00035edd 	.word	0x00035edd
   28378:	00030b36 	.word	0x00030b36
   2837c:	2000d2f0 	.word	0x2000d2f0
   28380:	00035ef4 	.word	0x00035ef4
   28384:	00035eee 	.word	0x00035eee
   28388:	2000e5a0 	.word	0x2000e5a0
   2838c:	2000e600 	.word	0x2000e600
   28390:	00035e4c 	.word	0x00035e4c
   28394:	00035e04 	.word	0x00035e04

00028398 <cmd_net_rpl>:
{
   28398:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   2839a:	6883      	ldr	r3, [r0, #8]
   2839c:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   283a0:	f3c4 0440 	ubfx	r4, r4, #1, #1
   283a4:	b11c      	cbz	r4, 283ae <cmd_net_rpl+0x16>
}
   283a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   283aa:	f7ff beb5 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("RPL not enabled, set CONFIG_NET_RPL to enable it.\n");
   283ae:	4a03      	ldr	r2, [pc, #12]	; (283bc <cmd_net_rpl+0x24>)
   283b0:	2103      	movs	r1, #3
   283b2:	f7db f9d5 	bl	3760 <shell_fprintf>
}
   283b6:	4620      	mov	r0, r4
   283b8:	bd10      	pop	{r4, pc}
   283ba:	bf00      	nop
   283bc:	00035dd1 	.word	0x00035dd1

000283c0 <cmd_net_http>:
{
   283c0:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   283c2:	6883      	ldr	r3, [r0, #8]
   283c4:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   283c8:	f3c4 0440 	ubfx	r4, r4, #1, #1
   283cc:	b11c      	cbz	r4, 283d6 <cmd_net_http+0x16>
}
   283ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   283d2:	f7ff bea1 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("Enable CONFIG_NET_DEBUG_HTTP_CONN and CONFIG_HTTP_SERVER "
   283d6:	4a03      	ldr	r2, [pc, #12]	; (283e4 <cmd_net_http+0x24>)
   283d8:	2103      	movs	r1, #3
   283da:	f7db f9c1 	bl	3760 <shell_fprintf>
}
   283de:	4620      	mov	r0, r4
   283e0:	bd10      	pop	{r4, pc}
   283e2:	bf00      	nop
   283e4:	0003589c 	.word	0x0003589c

000283e8 <cmd_net_http_monitor>:
{
   283e8:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   283ea:	6883      	ldr	r3, [r0, #8]
   283ec:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   283f0:	f3c4 0440 	ubfx	r4, r4, #1, #1
   283f4:	b11c      	cbz	r4, 283fe <cmd_net_http_monitor+0x16>
}
   283f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   283fa:	f7ff be8d 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("Enable CONFIG_NET_DEBUG_HTTP_CONN and CONFIG_HTTP_SERVER "
   283fe:	4a03      	ldr	r2, [pc, #12]	; (2840c <cmd_net_http_monitor+0x24>)
   28400:	2103      	movs	r1, #3
   28402:	f7db f9ad 	bl	3760 <shell_fprintf>
}
   28406:	4620      	mov	r0, r4
   28408:	bd10      	pop	{r4, pc}
   2840a:	bf00      	nop
   2840c:	0003589c 	.word	0x0003589c

00028410 <cmd_net_gptp>:
{
   28410:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   28412:	6883      	ldr	r3, [r0, #8]
   28414:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   28418:	f3c4 0440 	ubfx	r4, r4, #1, #1
   2841c:	b11c      	cbz	r4, 28426 <cmd_net_gptp+0x16>
}
   2841e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28422:	f7ff be79 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("gPTP not supported, set CONFIG_NET_GPTP to enable it.\n");
   28426:	4a03      	ldr	r2, [pc, #12]	; (28434 <cmd_net_gptp+0x24>)
   28428:	2103      	movs	r1, #3
   2842a:	f7db f999 	bl	3760 <shell_fprintf>
}
   2842e:	4620      	mov	r0, r4
   28430:	bd10      	pop	{r4, pc}
   28432:	bf00      	nop
   28434:	00035865 	.word	0x00035865

00028438 <cmd_net_gptp_port>:
{
   28438:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   2843a:	6883      	ldr	r3, [r0, #8]
   2843c:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   28440:	f3c4 0440 	ubfx	r4, r4, #1, #1
   28444:	b11c      	cbz	r4, 2844e <cmd_net_gptp_port+0x16>
}
   28446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2844a:	f7ff be65 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("gPTP not supported, set CONFIG_NET_GPTP to enable it.\n");
   2844e:	4a03      	ldr	r2, [pc, #12]	; (2845c <cmd_net_gptp_port+0x24>)
   28450:	2103      	movs	r1, #3
   28452:	f7db f985 	bl	3760 <shell_fprintf>
}
   28456:	4620      	mov	r0, r4
   28458:	bd10      	pop	{r4, pc}
   2845a:	bf00      	nop
   2845c:	00035865 	.word	0x00035865

00028460 <cmd_net_dns>:
{
   28460:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   28462:	6883      	ldr	r3, [r0, #8]
   28464:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   28468:	f3c4 0440 	ubfx	r4, r4, #1, #1
   2846c:	b11c      	cbz	r4, 28476 <cmd_net_dns+0x16>
}
   2846e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28472:	f7ff be51 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("DNS resolver not supported. Set CONFIG_DNS_RESOLVER to "
   28476:	4a03      	ldr	r2, [pc, #12]	; (28484 <cmd_net_dns+0x24>)
   28478:	2103      	movs	r1, #3
   2847a:	f7db f971 	bl	3760 <shell_fprintf>
}
   2847e:	4620      	mov	r0, r4
   28480:	bd10      	pop	{r4, pc}
   28482:	bf00      	nop
   28484:	00035822 	.word	0x00035822

00028488 <cmd_net_dns_query>:
{
   28488:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   2848a:	6883      	ldr	r3, [r0, #8]
   2848c:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   28490:	f3c4 0440 	ubfx	r4, r4, #1, #1
   28494:	b11c      	cbz	r4, 2849e <cmd_net_dns_query+0x16>
}
   28496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2849a:	f7ff be3d 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("DNS resolver not supported. Set CONFIG_DNS_RESOLVER to "
   2849e:	4a03      	ldr	r2, [pc, #12]	; (284ac <cmd_net_dns_query+0x24>)
   284a0:	2103      	movs	r1, #3
   284a2:	f7db f95d 	bl	3760 <shell_fprintf>
}
   284a6:	4620      	mov	r0, r4
   284a8:	bd10      	pop	{r4, pc}
   284aa:	bf00      	nop
   284ac:	00035822 	.word	0x00035822

000284b0 <cmd_net_dns_cancel>:
{
   284b0:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   284b2:	6883      	ldr	r3, [r0, #8]
   284b4:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   284b8:	f3c4 0440 	ubfx	r4, r4, #1, #1
   284bc:	b11c      	cbz	r4, 284c6 <cmd_net_dns_cancel+0x16>
}
   284be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   284c2:	f7ff be29 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("DNS resolver not supported. Set CONFIG_DNS_RESOLVER to "
   284c6:	4a03      	ldr	r2, [pc, #12]	; (284d4 <cmd_net_dns_cancel+0x24>)
   284c8:	2103      	movs	r1, #3
   284ca:	f7db f949 	bl	3760 <shell_fprintf>
}
   284ce:	4620      	mov	r0, r4
   284d0:	bd10      	pop	{r4, pc}
   284d2:	bf00      	nop
   284d4:	00035822 	.word	0x00035822

000284d8 <cmd_net_arp_flush>:
{
   284d8:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   284da:	6883      	ldr	r3, [r0, #8]
   284dc:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   284e0:	f3c4 0440 	ubfx	r4, r4, #1, #1
   284e4:	b11c      	cbz	r4, 284ee <cmd_net_arp_flush+0x16>
}
   284e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   284ea:	f7ff be15 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("Enable CONFIG_NET_ARP, CONFIG_NET_IPV4 and "
   284ee:	4a03      	ldr	r2, [pc, #12]	; (284fc <cmd_net_arp_flush+0x24>)
   284f0:	2103      	movs	r1, #3
   284f2:	f7db f935 	bl	3760 <shell_fprintf>
}
   284f6:	4620      	mov	r0, r4
   284f8:	bd10      	pop	{r4, pc}
   284fa:	bf00      	nop
   284fc:	000356dd 	.word	0x000356dd

00028500 <cmd_net_app>:
{
   28500:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   28502:	6883      	ldr	r3, [r0, #8]
   28504:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   28508:	f3c4 0440 	ubfx	r4, r4, #1, #1
   2850c:	b11c      	cbz	r4, 28516 <cmd_net_app+0x16>
}
   2850e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28512:	f7ff be01 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("Enable CONFIG_NET_APP_LOG_LEVEL_DBG and either "
   28516:	4a03      	ldr	r2, [pc, #12]	; (28524 <cmd_net_app+0x24>)
   28518:	2103      	movs	r1, #3
   2851a:	f7db f921 	bl	3760 <shell_fprintf>
}
   2851e:	4620      	mov	r0, r4
   28520:	bd10      	pop	{r4, pc}
   28522:	bf00      	nop
   28524:	00035653 	.word	0x00035653

00028528 <cmd_net_allocs>:
{
   28528:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   2852a:	6883      	ldr	r3, [r0, #8]
   2852c:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   28530:	f3c4 0440 	ubfx	r4, r4, #1, #1
   28534:	b11c      	cbz	r4, 2853e <cmd_net_allocs+0x16>
}
   28536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2853a:	f7ff bded 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("Enable CONFIG_NET_DEBUG_NET_PKT to see allocations.\n");
   2853e:	4a03      	ldr	r2, [pc, #12]	; (2854c <cmd_net_allocs+0x24>)
   28540:	2103      	movs	r1, #3
   28542:	f7db f90d 	bl	3760 <shell_fprintf>
}
   28546:	4620      	mov	r0, r4
   28548:	bd10      	pop	{r4, pc}
   2854a:	bf00      	nop
   2854c:	0003561e 	.word	0x0003561e

00028550 <tcp_connected>:
{
   28550:	4b0b      	ldr	r3, [pc, #44]	; (28580 <tcp_connected+0x30>)
   28552:	b510      	push	{r4, lr}
   28554:	4604      	mov	r4, r0
   28556:	6818      	ldr	r0, [r3, #0]
	if (status < 0) {
   28558:	1e0b      	subs	r3, r1, #0
   2855a:	da0a      	bge.n	28572 <tcp_connected+0x22>
		PR_SHELL(tcp_shell, "TCP connection failed (%d)\n", status);
   2855c:	4a09      	ldr	r2, [pc, #36]	; (28584 <tcp_connected+0x34>)
   2855e:	2100      	movs	r1, #0
   28560:	f7db f8fe 	bl	3760 <shell_fprintf>
		net_context_put(context);
   28564:	4620      	mov	r0, r4
   28566:	f7f7 fc7f 	bl	1fe68 <net_context_put>
		tcp_ctx = NULL;
   2856a:	4b07      	ldr	r3, [pc, #28]	; (28588 <tcp_connected+0x38>)
   2856c:	2200      	movs	r2, #0
   2856e:	601a      	str	r2, [r3, #0]
}
   28570:	bd10      	pop	{r4, pc}
		PR_SHELL(tcp_shell, "TCP connected\n");
   28572:	4a06      	ldr	r2, [pc, #24]	; (2858c <tcp_connected+0x3c>)
   28574:	2100      	movs	r1, #0
}
   28576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PR_SHELL(tcp_shell, "TCP connected\n");
   2857a:	f7db b8f1 	b.w	3760 <shell_fprintf>
   2857e:	bf00      	nop
   28580:	20002a14 	.word	0x20002a14
   28584:	00036e66 	.word	0x00036e66
   28588:	20002a10 	.word	0x20002a10
   2858c:	00036e82 	.word	0x00036e82

00028590 <cmd_net_tcp_close>:
{
   28590:	b570      	push	{r4, r5, r6, lr}
	if (shell_help_requested(shell)) {
   28592:	6883      	ldr	r3, [r0, #8]
   28594:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   28598:	f3c4 0440 	ubfx	r4, r4, #1, #1
{
   2859c:	4605      	mov	r5, r0
	if (shell_help_requested(shell)) {
   2859e:	b11c      	cbz	r4, 285a8 <cmd_net_tcp_close+0x18>
}
   285a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   285a4:	f7ff bdb8 	b.w	28118 <cmd_net_allocs.part.26>
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   285a8:	4e10      	ldr	r6, [pc, #64]	; (285ec <cmd_net_tcp_close+0x5c>)
   285aa:	6830      	ldr	r0, [r6, #0]
   285ac:	b938      	cbnz	r0, 285be <cmd_net_tcp_close+0x2e>
		PR_WARNING("Not connected\n");
   285ae:	4a10      	ldr	r2, [pc, #64]	; (285f0 <cmd_net_tcp_close+0x60>)
   285b0:	2104      	movs	r1, #4
   285b2:	4628      	mov	r0, r5
   285b4:	f7db f8d4 	bl	3760 <shell_fprintf>
		return -ENOEXEC;
   285b8:	f06f 0007 	mvn.w	r0, #7
}
   285bc:	bd70      	pop	{r4, r5, r6, pc}
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   285be:	f7ff fb43 	bl	27c48 <net_context_is_used>
   285c2:	2800      	cmp	r0, #0
   285c4:	d0f3      	beq.n	285ae <cmd_net_tcp_close+0x1e>
	ret = net_context_put(tcp_ctx);
   285c6:	6830      	ldr	r0, [r6, #0]
   285c8:	f7f7 fc4e 	bl	1fe68 <net_context_put>
	if (ret < 0) {
   285cc:	1e03      	subs	r3, r0, #0
   285ce:	da05      	bge.n	285dc <cmd_net_tcp_close+0x4c>
		PR_WARNING("Cannot close the connection (%d)\n", ret);
   285d0:	4a08      	ldr	r2, [pc, #32]	; (285f4 <cmd_net_tcp_close+0x64>)
   285d2:	2104      	movs	r1, #4
   285d4:	4628      	mov	r0, r5
   285d6:	f7db f8c3 	bl	3760 <shell_fprintf>
   285da:	e7ed      	b.n	285b8 <cmd_net_tcp_close+0x28>
	PR("Connection closed.\n");
   285dc:	4628      	mov	r0, r5
   285de:	4a06      	ldr	r2, [pc, #24]	; (285f8 <cmd_net_tcp_close+0x68>)
   285e0:	4621      	mov	r1, r4
   285e2:	f7db f8bd 	bl	3760 <shell_fprintf>
	tcp_ctx = NULL;
   285e6:	6034      	str	r4, [r6, #0]
	return 0;
   285e8:	4620      	mov	r0, r4
   285ea:	e7e7      	b.n	285bc <cmd_net_tcp_close+0x2c>
   285ec:	20002a10 	.word	0x20002a10
   285f0:	00035f4e 	.word	0x00035f4e
   285f4:	00035f5d 	.word	0x00035f5d
   285f8:	00035f7f 	.word	0x00035f7f

000285fc <get_iface_idx>:
{
   285fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   285fe:	4605      	mov	r5, r0
	if (!index_str) {
   28600:	460c      	mov	r4, r1
   28602:	b939      	cbnz	r1, 28614 <get_iface_idx+0x18>
		PR_WARNING("Interface index is missing.\n");
   28604:	4a11      	ldr	r2, [pc, #68]	; (2864c <get_iface_idx+0x50>)
   28606:	2104      	movs	r1, #4
   28608:	f7db f8aa 	bl	3760 <shell_fprintf>
   2860c:	f06f 0015 	mvn.w	r0, #21
}
   28610:	b003      	add	sp, #12
   28612:	bd30      	pop	{r4, r5, pc}
	idx = strtol(index_str, &endptr, 10);
   28614:	220a      	movs	r2, #10
   28616:	a901      	add	r1, sp, #4
   28618:	4620      	mov	r0, r4
   2861a:	f7de f99b 	bl	6954 <strtol>
	if (*endptr != '\0') {
   2861e:	9b01      	ldr	r3, [sp, #4]
   28620:	781b      	ldrb	r3, [r3, #0]
   28622:	b143      	cbz	r3, 28636 <get_iface_idx+0x3a>
		PR_WARNING("Invalid index %s\n", index_str);
   28624:	4628      	mov	r0, r5
   28626:	4623      	mov	r3, r4
   28628:	4a09      	ldr	r2, [pc, #36]	; (28650 <get_iface_idx+0x54>)
   2862a:	2104      	movs	r1, #4
   2862c:	f7db f898 	bl	3760 <shell_fprintf>
		return -ENOENT;
   28630:	f06f 0001 	mvn.w	r0, #1
   28634:	e7ec      	b.n	28610 <get_iface_idx+0x14>
	if (idx < 0 || idx > 255) {
   28636:	28ff      	cmp	r0, #255	; 0xff
   28638:	d9ea      	bls.n	28610 <get_iface_idx+0x14>
		PR_WARNING("Invalid index %d\n", idx);
   2863a:	4603      	mov	r3, r0
   2863c:	4a05      	ldr	r2, [pc, #20]	; (28654 <get_iface_idx+0x58>)
   2863e:	4628      	mov	r0, r5
   28640:	2104      	movs	r1, #4
   28642:	f7db f88d 	bl	3760 <shell_fprintf>
		return -ERANGE;
   28646:	f06f 0025 	mvn.w	r0, #37	; 0x25
   2864a:	e7e1      	b.n	28610 <get_iface_idx+0x14>
   2864c:	00036141 	.word	0x00036141
   28650:	0003615e 	.word	0x0003615e
   28654:	00036170 	.word	0x00036170

00028658 <cmd_net_iface_down>:
{
   28658:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (shell_help_requested(shell)) {
   2865a:	6883      	ldr	r3, [r0, #8]
   2865c:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
   28660:	079b      	lsls	r3, r3, #30
{
   28662:	4605      	mov	r5, r0
	if (shell_help_requested(shell)) {
   28664:	d506      	bpl.n	28674 <cmd_net_iface_down+0x1c>
		shell_help_print(shell, NULL, 0);
   28666:	2200      	movs	r2, #0
   28668:	4611      	mov	r1, r2
   2866a:	f7db f97d 	bl	3968 <shell_help_print>
		return -ENOEXEC;
   2866e:	f06f 0407 	mvn.w	r4, #7
   28672:	e021      	b.n	286b8 <cmd_net_iface_down+0x60>
	idx = get_iface_idx(shell, argv[1]);
   28674:	6851      	ldr	r1, [r2, #4]
   28676:	f7ff ffc1 	bl	285fc <get_iface_idx>
	if (idx < 0) {
   2867a:	1e06      	subs	r6, r0, #0
   2867c:	dbf7      	blt.n	2866e <cmd_net_iface_down+0x16>
	iface = net_if_get_by_index(idx);
   2867e:	b2f0      	uxtb	r0, r6
   28680:	f7f9 fbf6 	bl	21e70 <net_if_get_by_index>
	if (!iface) {
   28684:	b930      	cbnz	r0, 28694 <cmd_net_iface_down+0x3c>
		PR_WARNING("No such interface in index %d\n", idx);
   28686:	4633      	mov	r3, r6
   28688:	4a0d      	ldr	r2, [pc, #52]	; (286c0 <cmd_net_iface_down+0x68>)
   2868a:	2104      	movs	r1, #4
   2868c:	4628      	mov	r0, r5
   2868e:	f7db f867 	bl	3760 <shell_fprintf>
   28692:	e7ec      	b.n	2866e <cmd_net_iface_down+0x16>
	ret = net_if_down(iface);
   28694:	f7f9 fc82 	bl	21f9c <net_if_down>
	if (ret) {
   28698:	4604      	mov	r4, r0
   2869a:	b138      	cbz	r0, 286ac <cmd_net_iface_down+0x54>
		PR_WARNING("Cannot take interface %d down (%d)\n", idx, ret);
   2869c:	9000      	str	r0, [sp, #0]
   2869e:	4633      	mov	r3, r6
   286a0:	4a08      	ldr	r2, [pc, #32]	; (286c4 <cmd_net_iface_down+0x6c>)
   286a2:	2104      	movs	r1, #4
   286a4:	4628      	mov	r0, r5
   286a6:	f7db f85b 	bl	3760 <shell_fprintf>
   286aa:	e7e0      	b.n	2866e <cmd_net_iface_down+0x16>
		PR("Interface %d is down\n", idx);
   286ac:	4601      	mov	r1, r0
   286ae:	4633      	mov	r3, r6
   286b0:	4a05      	ldr	r2, [pc, #20]	; (286c8 <cmd_net_iface_down+0x70>)
   286b2:	4628      	mov	r0, r5
   286b4:	f7db f854 	bl	3760 <shell_fprintf>
}
   286b8:	4620      	mov	r0, r4
   286ba:	b002      	add	sp, #8
   286bc:	bd70      	pop	{r4, r5, r6, pc}
   286be:	bf00      	nop
   286c0:	00035900 	.word	0x00035900
   286c4:	0003591f 	.word	0x0003591f
   286c8:	00035943 	.word	0x00035943

000286cc <cmd_net_iface>:
{
   286cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (shell_help_requested(shell)) {
   286ce:	6883      	ldr	r3, [r0, #8]
   286d0:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
   286d4:	079b      	lsls	r3, r3, #30
{
   286d6:	4604      	mov	r4, r0
	if (shell_help_requested(shell)) {
   286d8:	d506      	bpl.n	286e8 <cmd_net_iface+0x1c>
		shell_help_print(shell, NULL, 0);
   286da:	2200      	movs	r2, #0
   286dc:	4611      	mov	r1, r2
   286de:	f7db f943 	bl	3968 <shell_help_print>
			return -ENOEXEC;
   286e2:	f06f 0007 	mvn.w	r0, #7
   286e6:	e018      	b.n	2871a <cmd_net_iface+0x4e>
	if (argv[1]) {
   286e8:	6851      	ldr	r1, [r2, #4]
   286ea:	b171      	cbz	r1, 2870a <cmd_net_iface+0x3e>
		idx = get_iface_idx(shell, argv[1]);
   286ec:	f7ff ff86 	bl	285fc <get_iface_idx>
		if (idx < 0) {
   286f0:	1e05      	subs	r5, r0, #0
   286f2:	dbf6      	blt.n	286e2 <cmd_net_iface+0x16>
		iface = net_if_get_by_index(idx);
   286f4:	b2e8      	uxtb	r0, r5
   286f6:	f7f9 fbbb 	bl	21e70 <net_if_get_by_index>
		if (!iface) {
   286fa:	b938      	cbnz	r0, 2870c <cmd_net_iface+0x40>
			PR_WARNING("No such interface in index %d\n", idx);
   286fc:	462b      	mov	r3, r5
   286fe:	4a08      	ldr	r2, [pc, #32]	; (28720 <cmd_net_iface+0x54>)
   28700:	2104      	movs	r1, #4
   28702:	4620      	mov	r0, r4
   28704:	f7db f82c 	bl	3760 <shell_fprintf>
   28708:	e7eb      	b.n	286e2 <cmd_net_iface+0x16>
	struct net_if *iface = NULL;
   2870a:	4608      	mov	r0, r1
	user_data.user_data = iface;
   2870c:	e9cd 4000 	strd	r4, r0, [sp]
	net_if_foreach(iface_cb, &user_data);
   28710:	4669      	mov	r1, sp
   28712:	4804      	ldr	r0, [pc, #16]	; (28724 <cmd_net_iface+0x58>)
   28714:	f7f9 fbe8 	bl	21ee8 <net_if_foreach>
	return 0;
   28718:	2000      	movs	r0, #0
}
   2871a:	b003      	add	sp, #12
   2871c:	bd30      	pop	{r4, r5, pc}
   2871e:	bf00      	nop
   28720:	00035900 	.word	0x00035900
   28724:	00028b0d 	.word	0x00028b0d

00028728 <cmd_net_nbr>:
{
   28728:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int count = 0;
   2872a:	2200      	movs	r2, #0
	if (shell_help_requested(shell)) {
   2872c:	6883      	ldr	r3, [r0, #8]
	int count = 0;
   2872e:	9201      	str	r2, [sp, #4]
   28730:	f8d3 524c 	ldr.w	r5, [r3, #588]	; 0x24c
   28734:	f3c5 0540 	ubfx	r5, r5, #1, #1
{
   28738:	4606      	mov	r6, r0
	if (shell_help_requested(shell)) {
   2873a:	b13d      	cbz	r5, 2874c <cmd_net_nbr+0x24>
		shell_help_print(shell, NULL, 0);
   2873c:	4611      	mov	r1, r2
   2873e:	f7db f913 	bl	3968 <shell_help_print>
   28742:	f06f 0407 	mvn.w	r4, #7
}
   28746:	4620      	mov	r0, r4
   28748:	b004      	add	sp, #16
   2874a:	bd70      	pop	{r4, r5, r6, pc}
	user_data.shell = shell;
   2874c:	9002      	str	r0, [sp, #8]
	user_data.user_data = &count;
   2874e:	ab01      	add	r3, sp, #4
	net_ipv6_nbr_foreach(nbr_cb, &user_data);
   28750:	a902      	add	r1, sp, #8
   28752:	4807      	ldr	r0, [pc, #28]	; (28770 <cmd_net_nbr+0x48>)
	user_data.user_data = &count;
   28754:	9303      	str	r3, [sp, #12]
	net_ipv6_nbr_foreach(nbr_cb, &user_data);
   28756:	f7fd f8bd 	bl	258d4 <net_ipv6_nbr_foreach>
	if (count == 0) {
   2875a:	9c01      	ldr	r4, [sp, #4]
   2875c:	b92c      	cbnz	r4, 2876a <cmd_net_nbr+0x42>
		PR("No neighbors.\n");
   2875e:	4a05      	ldr	r2, [pc, #20]	; (28774 <cmd_net_nbr+0x4c>)
   28760:	4621      	mov	r1, r4
   28762:	4630      	mov	r0, r6
   28764:	f7da fffc 	bl	3760 <shell_fprintf>
   28768:	e7ed      	b.n	28746 <cmd_net_nbr+0x1e>
	return 0;
   2876a:	462c      	mov	r4, r5
   2876c:	e7eb      	b.n	28746 <cmd_net_nbr+0x1e>
   2876e:	bf00      	nop
   28770:	0002912d 	.word	0x0002912d
   28774:	00035cfd 	.word	0x00035cfd

00028778 <cmd_net_tcp_connect>:
{
   28778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (shell_help_requested(shell)) {
   2877c:	6883      	ldr	r3, [r0, #8]
   2877e:	f8d3 624c 	ldr.w	r6, [r3, #588]	; 0x24c
   28782:	f3c6 0640 	ubfx	r6, r6, #1, #1
{
   28786:	b091      	sub	sp, #68	; 0x44
   28788:	4604      	mov	r4, r0
   2878a:	4617      	mov	r7, r2
	if (shell_help_requested(shell)) {
   2878c:	b146      	cbz	r6, 287a0 <cmd_net_tcp_connect+0x28>
		shell_help_print(shell, NULL, 0);
   2878e:	2200      	movs	r2, #0
   28790:	4611      	mov	r1, r2
   28792:	f7db f8e9 	bl	3968 <shell_help_print>
		return -ENOEXEC;
   28796:	f06f 0007 	mvn.w	r0, #7
}
   2879a:	b011      	add	sp, #68	; 0x44
   2879c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (tcp_ctx && net_context_is_used(tcp_ctx)) {
   287a0:	4d4a      	ldr	r5, [pc, #296]	; (288cc <cmd_net_tcp_connect+0x154>)
   287a2:	6828      	ldr	r0, [r5, #0]
   287a4:	b140      	cbz	r0, 287b8 <cmd_net_tcp_connect+0x40>
   287a6:	f7ff fa4f 	bl	27c48 <net_context_is_used>
   287aa:	b128      	cbz	r0, 287b8 <cmd_net_tcp_connect+0x40>
		PR("Already connected\n");
   287ac:	4a48      	ldr	r2, [pc, #288]	; (288d0 <cmd_net_tcp_connect+0x158>)
   287ae:	4631      	mov	r1, r6
		PR_WARNING("Peer port missing.\n");
   287b0:	4620      	mov	r0, r4
   287b2:	f7da ffd5 	bl	3760 <shell_fprintf>
   287b6:	e7ee      	b.n	28796 <cmd_net_tcp_connect+0x1e>
	if (!argv[++arg]) {
   287b8:	f8d7 9004 	ldr.w	r9, [r7, #4]
   287bc:	f1b9 0f00 	cmp.w	r9, #0
   287c0:	d102      	bne.n	287c8 <cmd_net_tcp_connect+0x50>
		PR_WARNING("Peer IP address missing.\n");
   287c2:	4a44      	ldr	r2, [pc, #272]	; (288d4 <cmd_net_tcp_connect+0x15c>)
		PR_WARNING("Peer port missing.\n");
   287c4:	2104      	movs	r1, #4
   287c6:	e7f3      	b.n	287b0 <cmd_net_tcp_connect+0x38>
	if (!argv[++arg]) {
   287c8:	68b8      	ldr	r0, [r7, #8]
   287ca:	b908      	cbnz	r0, 287d0 <cmd_net_tcp_connect+0x58>
		PR_WARNING("Peer port missing.\n");
   287cc:	4a42      	ldr	r2, [pc, #264]	; (288d8 <cmd_net_tcp_connect+0x160>)
   287ce:	e7f9      	b.n	287c4 <cmd_net_tcp_connect+0x4c>
	port = strtol(argv[arg], &endptr, 10);
   287d0:	220a      	movs	r2, #10
   287d2:	a903      	add	r1, sp, #12
   287d4:	f7de f8be 	bl	6954 <strtol>
	if (*endptr != '\0') {
   287d8:	9b03      	ldr	r3, [sp, #12]
   287da:	f893 8000 	ldrb.w	r8, [r3]
	port = strtol(argv[arg], &endptr, 10);
   287de:	4606      	mov	r6, r0
	if (*endptr != '\0') {
   287e0:	f1b8 0f00 	cmp.w	r8, #0
   287e4:	d006      	beq.n	287f4 <cmd_net_tcp_connect+0x7c>
		PR_WARNING("Invalid port %s\n", argv[arg]);
   287e6:	68bb      	ldr	r3, [r7, #8]
   287e8:	4a3c      	ldr	r2, [pc, #240]	; (288dc <cmd_net_tcp_connect+0x164>)
   287ea:	2104      	movs	r1, #4
   287ec:	4620      	mov	r0, r4
   287ee:	f7da ffb7 	bl	3760 <shell_fprintf>
   287f2:	e7d0      	b.n	28796 <cmd_net_tcp_connect+0x1e>
	struct net_if *iface = net_if_get_default();
   287f4:	f7f8 fa86 	bl	20d04 <net_if_get_default>
		ret = net_addr_pton(AF_INET6, host,
   287f8:	aa0b      	add	r2, sp, #44	; 0x2c
	struct net_if *iface = net_if_get_default();
   287fa:	4607      	mov	r7, r0
		ret = net_addr_pton(AF_INET6, host,
   287fc:	4649      	mov	r1, r9
   287fe:	200a      	movs	r0, #10
   28800:	f7fa fcb8 	bl	23174 <net_addr_pton>
		if (ret < 0) {
   28804:	2800      	cmp	r0, #0
   28806:	da06      	bge.n	28816 <cmd_net_tcp_connect+0x9e>
			PR_WARNING("Invalid IPv6 address\n");
   28808:	4a35      	ldr	r2, [pc, #212]	; (288e0 <cmd_net_tcp_connect+0x168>)
   2880a:	2104      	movs	r1, #4
   2880c:	4620      	mov	r0, r4
   2880e:	f7da ffa7 	bl	3760 <shell_fprintf>
	return 0;
   28812:	2000      	movs	r0, #0
   28814:	e7c1      	b.n	2879a <cmd_net_tcp_connect+0x22>
		net_sin6(&addr)->sin6_port = htons(port);
   28816:	ba76      	rev16	r6, r6
		nbr = net_ipv6_nbr_lookup(NULL, &net_sin6(&addr)->sin6_addr);
   28818:	a90b      	add	r1, sp, #44	; 0x2c
   2881a:	4640      	mov	r0, r8
		net_sin6(&addr)->sin6_port = htons(port);
   2881c:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
		nbr = net_ipv6_nbr_lookup(NULL, &net_sin6(&addr)->sin6_addr);
   28820:	f7fd f87c 	bl	2591c <net_ipv6_nbr_lookup>
		if (nbr) {
   28824:	b100      	cbz	r0, 28828 <cmd_net_tcp_connect+0xb0>
			iface = nbr->iface;
   28826:	6887      	ldr	r7, [r0, #8]
	my6addr = net_if_ipv6_select_src_addr(iface,
   28828:	a905      	add	r1, sp, #20
   2882a:	4638      	mov	r0, r7
   2882c:	f7f9 fa06 	bl	21c3c <net_if_ipv6_select_src_addr>
		family = addr.sa_family = myaddr.sa_family = AF_INET6;
   28830:	260a      	movs	r6, #10
	memcpy(&net_sin6(myaddr)->sin6_addr, my6addr, sizeof(struct in6_addr));
   28832:	2210      	movs	r2, #16
   28834:	4601      	mov	r1, r0
   28836:	a805      	add	r0, sp, #20
   28838:	f7de fa26 	bl	6c88 <memcpy>
			PR("Connecting from [%s]:%u ",
   2883c:	a905      	add	r1, sp, #20
   2883e:	4630      	mov	r0, r6
		family = addr.sa_family = myaddr.sa_family = AF_INET6;
   28840:	9604      	str	r6, [sp, #16]
   28842:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
			PR("Connecting from [%s]:%u ",
   28846:	f7fa fc7f 	bl	23148 <net_sprint_addr>
   2884a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   2884e:	0213      	lsls	r3, r2, #8
   28850:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   28854:	b29b      	uxth	r3, r3
   28856:	4a23      	ldr	r2, [pc, #140]	; (288e4 <cmd_net_tcp_connect+0x16c>)
   28858:	9300      	str	r3, [sp, #0]
   2885a:	2100      	movs	r1, #0
   2885c:	4603      	mov	r3, r0
   2885e:	4620      	mov	r0, r4
   28860:	f7da ff7e 	bl	3760 <shell_fprintf>
			PR("to [%s]:%u\n",
   28864:	a90b      	add	r1, sp, #44	; 0x2c
   28866:	4630      	mov	r0, r6
   28868:	f7fa fc6e 	bl	23148 <net_sprint_addr>
   2886c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   28870:	0213      	lsls	r3, r2, #8
   28872:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   28876:	b29b      	uxth	r3, r3
   28878:	9300      	str	r3, [sp, #0]
   2887a:	4a1b      	ldr	r2, [pc, #108]	; (288e8 <cmd_net_tcp_connect+0x170>)
   2887c:	4603      	mov	r3, r0
   2887e:	2100      	movs	r1, #0
   28880:	4620      	mov	r0, r4
   28882:	f7da ff6d 	bl	3760 <shell_fprintf>
	ret = net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx);
   28886:	4b11      	ldr	r3, [pc, #68]	; (288cc <cmd_net_tcp_connect+0x154>)
   28888:	2206      	movs	r2, #6
   2888a:	2101      	movs	r1, #1
   2888c:	4630      	mov	r0, r6
   2888e:	f7f7 f95b 	bl	1fb48 <net_context_get>
	if (ret < 0) {
   28892:	1e03      	subs	r3, r0, #0
   28894:	da05      	bge.n	288a2 <cmd_net_tcp_connect+0x12a>
		PR_WARNING("Cannot get TCP context (%d)\n", ret);
   28896:	4a15      	ldr	r2, [pc, #84]	; (288ec <cmd_net_tcp_connect+0x174>)
		PR_WARNING("Cannot bind TCP (%d)\n", ret);
   28898:	2104      	movs	r1, #4
   2889a:	4620      	mov	r0, r4
   2889c:	f7da ff60 	bl	3760 <shell_fprintf>
   288a0:	e7b7      	b.n	28812 <cmd_net_tcp_connect+0x9a>
	ret = net_context_bind(*ctx, &myaddr, addrlen);
   288a2:	2218      	movs	r2, #24
   288a4:	a904      	add	r1, sp, #16
   288a6:	6828      	ldr	r0, [r5, #0]
   288a8:	f7f7 fb1a 	bl	1fee0 <net_context_bind>
	if (ret < 0) {
   288ac:	1e03      	subs	r3, r0, #0
   288ae:	da01      	bge.n	288b4 <cmd_net_tcp_connect+0x13c>
		PR_WARNING("Cannot bind TCP (%d)\n", ret);
   288b0:	4a0f      	ldr	r2, [pc, #60]	; (288f0 <cmd_net_tcp_connect+0x178>)
   288b2:	e7f1      	b.n	28898 <cmd_net_tcp_connect+0x120>
	tcp_shell = shell;
   288b4:	4b0f      	ldr	r3, [pc, #60]	; (288f4 <cmd_net_tcp_connect+0x17c>)
	net_context_connect(*ctx, &addr, addrlen, tcp_connected,
   288b6:	6828      	ldr	r0, [r5, #0]
	tcp_shell = shell;
   288b8:	601c      	str	r4, [r3, #0]
	net_context_connect(*ctx, &addr, addrlen, tcp_connected,
   288ba:	2400      	movs	r4, #0
   288bc:	e9cd 4400 	strd	r4, r4, [sp]
   288c0:	4b0d      	ldr	r3, [pc, #52]	; (288f8 <cmd_net_tcp_connect+0x180>)
   288c2:	2218      	movs	r2, #24
   288c4:	a90a      	add	r1, sp, #40	; 0x28
   288c6:	f7f7 fccf 	bl	20268 <net_context_connect>
   288ca:	e7a2      	b.n	28812 <cmd_net_tcp_connect+0x9a>
   288cc:	20002a10 	.word	0x20002a10
   288d0:	00035f93 	.word	0x00035f93
   288d4:	00035fa6 	.word	0x00035fa6
   288d8:	00035fc0 	.word	0x00035fc0
   288dc:	00035fd4 	.word	0x00035fd4
   288e0:	00035fe5 	.word	0x00035fe5
   288e4:	00035ffb 	.word	0x00035ffb
   288e8:	00036014 	.word	0x00036014
   288ec:	00036020 	.word	0x00036020
   288f0:	0003603d 	.word	0x0003603d
   288f4:	20002a14 	.word	0x20002a14
   288f8:	00028551 	.word	0x00028551

000288fc <context_cb>:
{
   288fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28900:	4604      	mov	r4, r0
   28902:	b0a1      	sub	sp, #132	; 0x84
	int *count = data->user_data;
   28904:	e9d1 9700 	ldrd	r9, r7, [r1]
	char addr_remote[ADDR_LEN + 7] = "";
   28908:	222b      	movs	r2, #43	; 0x2b
   2890a:	2100      	movs	r1, #0
   2890c:	a815      	add	r0, sp, #84	; 0x54
   2890e:	9114      	str	r1, [sp, #80]	; 0x50
   28910:	f7de f9e7 	bl	6ce2 <memset>
	if (context->local.family == AF_INET6) {
   28914:	8925      	ldrh	r5, [r4, #8]
   28916:	2d0a      	cmp	r5, #10
   28918:	ae08      	add	r6, sp, #32
   2891a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
   2891e:	d14a      	bne.n	289b6 <context_cb+0xba>
		snprintk(addr_local, local_len, "[%s]:%u",
   28920:	68e1      	ldr	r1, [r4, #12]
   28922:	4628      	mov	r0, r5
   28924:	f7fa fc10 	bl	23148 <net_sprint_addr>
			 ntohs(net_sin6_ptr(&context->local)->sin6_port));
   28928:	8962      	ldrh	r2, [r4, #10]
   2892a:	0213      	lsls	r3, r2, #8
   2892c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		snprintk(addr_local, local_len, "[%s]:%u",
   28930:	b29b      	uxth	r3, r3
   28932:	4a28      	ldr	r2, [pc, #160]	; (289d4 <context_cb+0xd8>)
   28934:	9300      	str	r3, [sp, #0]
   28936:	212f      	movs	r1, #47	; 0x2f
   28938:	4603      	mov	r3, r0
   2893a:	4630      	mov	r0, r6
   2893c:	f7d8 fdb0 	bl	14a0 <snprintk>
		snprintk(addr_remote, remote_len, "[%s]:%u",
   28940:	f104 0118 	add.w	r1, r4, #24
   28944:	4628      	mov	r0, r5
   28946:	f7fa fbff 	bl	23148 <net_sprint_addr>
			 ntohs(net_sin6(&context->remote)->sin6_port));
   2894a:	8ae2      	ldrh	r2, [r4, #22]
   2894c:	0213      	lsls	r3, r2, #8
   2894e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		snprintk(addr_remote, remote_len, "[%s]:%u",
   28952:	b29b      	uxth	r3, r3
   28954:	9300      	str	r3, [sp, #0]
   28956:	4a1f      	ldr	r2, [pc, #124]	; (289d4 <context_cb+0xd8>)
   28958:	4603      	mov	r3, r0
   2895a:	212f      	movs	r1, #47	; 0x2f
   2895c:	4640      	mov	r0, r8
   2895e:	f7d8 fd9f 	bl	14a0 <snprintk>
	PR("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   28962:	683b      	ldr	r3, [r7, #0]
	return net_if_get_by_index(context->iface);
   28964:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
   28968:	1c5d      	adds	r5, r3, #1
   2896a:	f7f9 fa81 	bl	21e70 <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_FAMILY) {
   2896e:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   28972:	9400      	str	r4, [sp, #0]
   28974:	f013 0f10 	tst.w	r3, #16
   28978:	bf14      	ite	ne
   2897a:	2236      	movne	r2, #54	; 0x36
   2897c:	2234      	moveq	r2, #52	; 0x34
   2897e:	f013 0f20 	tst.w	r3, #32
   28982:	bf14      	ite	ne
   28984:	2153      	movne	r1, #83	; 0x53
   28986:	2144      	moveq	r1, #68	; 0x44
   28988:	f013 0f40 	tst.w	r3, #64	; 0x40
   2898c:	bf14      	ite	ne
   2898e:	2354      	movne	r3, #84	; 0x54
   28990:	2355      	moveq	r3, #85	; 0x55
   28992:	e9cd 1303 	strd	r1, r3, [sp, #12]
   28996:	e9cd 0201 	strd	r0, r2, [sp, #4]
   2899a:	462b      	mov	r3, r5
   2899c:	e9cd 6805 	strd	r6, r8, [sp, #20]
   289a0:	4a0d      	ldr	r2, [pc, #52]	; (289d8 <context_cb+0xdc>)
   289a2:	2100      	movs	r1, #0
   289a4:	4648      	mov	r0, r9
   289a6:	f7da fedb 	bl	3760 <shell_fprintf>
	(*count)++;
   289aa:	683b      	ldr	r3, [r7, #0]
   289ac:	3301      	adds	r3, #1
   289ae:	603b      	str	r3, [r7, #0]
}
   289b0:	b021      	add	sp, #132	; 0x84
   289b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (context->local.family == AF_UNSPEC) {
   289b6:	b92d      	cbnz	r5, 289c4 <context_cb+0xc8>
		snprintk(addr_local, local_len, "AF_UNSPEC");
   289b8:	4a08      	ldr	r2, [pc, #32]	; (289dc <context_cb+0xe0>)
   289ba:	212f      	movs	r1, #47	; 0x2f
   289bc:	4630      	mov	r0, r6
   289be:	f7d8 fd6f 	bl	14a0 <snprintk>
   289c2:	e7ce      	b.n	28962 <context_cb+0x66>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
   289c4:	462b      	mov	r3, r5
   289c6:	4a06      	ldr	r2, [pc, #24]	; (289e0 <context_cb+0xe4>)
   289c8:	212f      	movs	r1, #47	; 0x2f
   289ca:	4630      	mov	r0, r6
   289cc:	f7d8 fd68 	bl	14a0 <snprintk>
   289d0:	e7c7      	b.n	28962 <context_cb+0x66>
   289d2:	bf00      	nop
   289d4:	00030649 	.word	0x00030649
   289d8:	00036106 	.word	0x00036106
   289dc:	000360f1 	.word	0x000360f1
   289e0:	000360fb 	.word	0x000360fb

000289e4 <cmd_net_tcp_send>:
{
   289e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (shell_help_requested(shell)) {
   289e8:	6883      	ldr	r3, [r0, #8]
   289ea:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   289ee:	f3c4 0440 	ubfx	r4, r4, #1, #1
{
   289f2:	4605      	mov	r5, r0
   289f4:	4617      	mov	r7, r2
	if (shell_help_requested(shell)) {
   289f6:	b144      	cbz	r4, 28a0a <cmd_net_tcp_send+0x26>
		shell_help_print(shell, NULL, 0);
   289f8:	2200      	movs	r2, #0
   289fa:	4611      	mov	r1, r2
   289fc:	f7da ffb4 	bl	3968 <shell_help_print>
		return -ENOEXEC;
   28a00:	f06f 0007 	mvn.w	r0, #7
}
   28a04:	b004      	add	sp, #16
   28a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   28a0a:	4e23      	ldr	r6, [pc, #140]	; (28a98 <cmd_net_tcp_send+0xb4>)
   28a0c:	6830      	ldr	r0, [r6, #0]
   28a0e:	b928      	cbnz	r0, 28a1c <cmd_net_tcp_send+0x38>
		PR_WARNING("Not connected\n");
   28a10:	4a22      	ldr	r2, [pc, #136]	; (28a9c <cmd_net_tcp_send+0xb8>)
		PR_WARNING("Out of pkts, msg cannot be sent.\n");
   28a12:	2104      	movs	r1, #4
   28a14:	4628      	mov	r0, r5
   28a16:	f7da fea3 	bl	3760 <shell_fprintf>
   28a1a:	e7f1      	b.n	28a00 <cmd_net_tcp_send+0x1c>
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   28a1c:	f7ff f914 	bl	27c48 <net_context_is_used>
   28a20:	2800      	cmp	r0, #0
   28a22:	d0f5      	beq.n	28a10 <cmd_net_tcp_send+0x2c>
	if (!argv[++arg]) {
   28a24:	687b      	ldr	r3, [r7, #4]
   28a26:	b90b      	cbnz	r3, 28a2c <cmd_net_tcp_send+0x48>
		PR_WARNING("No data to send.\n");
   28a28:	4a1d      	ldr	r2, [pc, #116]	; (28aa0 <cmd_net_tcp_send+0xbc>)
   28a2a:	e7f2      	b.n	28a12 <cmd_net_tcp_send+0x2e>
	pkt = net_pkt_get_tx(tcp_ctx, TCP_TIMEOUT);
   28a2c:	6830      	ldr	r0, [r6, #0]
   28a2e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   28a32:	f7f9 fd49 	bl	224c8 <net_pkt_get_tx>
	if (!pkt) {
   28a36:	4606      	mov	r6, r0
   28a38:	b908      	cbnz	r0, 28a3e <cmd_net_tcp_send+0x5a>
		PR_WARNING("Out of pkts, msg cannot be sent.\n");
   28a3a:	4a1a      	ldr	r2, [pc, #104]	; (28aa4 <cmd_net_tcp_send+0xc0>)
   28a3c:	e7e9      	b.n	28a12 <cmd_net_tcp_send+0x2e>
	ret = net_pkt_append_all(pkt, strlen(argv[arg]), (u8_t *)argv[arg],
   28a3e:	6878      	ldr	r0, [r7, #4]
   28a40:	f7de f8cc 	bl	6bdc <strlen>
   28a44:	fa1f f880 	uxth.w	r8, r0
	return net_pkt_append(pkt, len, data, timeout) == len;
   28a48:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   28a4c:	687a      	ldr	r2, [r7, #4]
   28a4e:	4641      	mov	r1, r8
   28a50:	4630      	mov	r0, r6
   28a52:	f7f9 ff29 	bl	228a8 <net_pkt_append>
	if (!ret) {
   28a56:	4580      	cmp	r8, r0
   28a58:	d008      	beq.n	28a6c <cmd_net_tcp_send+0x88>
		PR_WARNING("Cannot build msg (out of pkts)\n");
   28a5a:	4a13      	ldr	r2, [pc, #76]	; (28aa8 <cmd_net_tcp_send+0xc4>)
   28a5c:	2104      	movs	r1, #4
   28a5e:	4628      	mov	r0, r5
   28a60:	f7da fe7e 	bl	3760 <shell_fprintf>
		net_pkt_unref(pkt);
   28a64:	4630      	mov	r0, r6
   28a66:	f7f9 fdca 	bl	225fe <net_pkt_unref>
   28a6a:	e7c9      	b.n	28a00 <cmd_net_tcp_send+0x1c>
	user_data.shell = shell;
   28a6c:	ab04      	add	r3, sp, #16
	ret = net_context_send(pkt, tcp_sent_cb, TCP_TIMEOUT, NULL,
   28a6e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
	user_data.shell = shell;
   28a72:	f843 5d08 	str.w	r5, [r3, #-8]!
	ret = net_context_send(pkt, tcp_sent_cb, TCP_TIMEOUT, NULL,
   28a76:	490d      	ldr	r1, [pc, #52]	; (28aac <cmd_net_tcp_send+0xc8>)
   28a78:	9300      	str	r3, [sp, #0]
   28a7a:	4630      	mov	r0, r6
   28a7c:	4623      	mov	r3, r4
   28a7e:	f7f7 fcfd 	bl	2047c <net_context_send>
	if (ret < 0) {
   28a82:	1e03      	subs	r3, r0, #0
   28a84:	da05      	bge.n	28a92 <cmd_net_tcp_send+0xae>
		PR_WARNING("Cannot send msg (%d)\n", ret);
   28a86:	4a0a      	ldr	r2, [pc, #40]	; (28ab0 <cmd_net_tcp_send+0xcc>)
   28a88:	2104      	movs	r1, #4
   28a8a:	4628      	mov	r0, r5
   28a8c:	f7da fe68 	bl	3760 <shell_fprintf>
   28a90:	e7e8      	b.n	28a64 <cmd_net_tcp_send+0x80>
	return 0;
   28a92:	4620      	mov	r0, r4
   28a94:	e7b6      	b.n	28a04 <cmd_net_tcp_send+0x20>
   28a96:	bf00      	nop
   28a98:	20002a10 	.word	0x20002a10
   28a9c:	00035f4e 	.word	0x00035f4e
   28aa0:	00036053 	.word	0x00036053
   28aa4:	00036065 	.word	0x00036065
   28aa8:	00036087 	.word	0x00036087
   28aac:	00027c35 	.word	0x00027c35
   28ab0:	000360a7 	.word	0x000360a7

00028ab4 <net_if_is_up>:
{
   28ab4:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   28ab6:	4604      	mov	r4, r0
   28ab8:	b9a0      	cbnz	r0, 28ae4 <net_if_is_up+0x30>
   28aba:	4b0f      	ldr	r3, [pc, #60]	; (28af8 <net_if_is_up+0x44>)
   28abc:	681b      	ldr	r3, [r3, #0]
   28abe:	075b      	lsls	r3, r3, #29
   28ac0:	d010      	beq.n	28ae4 <net_if_is_up+0x30>
   28ac2:	2301      	movs	r3, #1
   28ac4:	f04f 0200 	mov.w	r2, #0
   28ac8:	f363 0202 	bfi	r2, r3, #0, #3
   28acc:	490b      	ldr	r1, [pc, #44]	; (28afc <net_if_is_up+0x48>)
   28ace:	4b0c      	ldr	r3, [pc, #48]	; (28b00 <net_if_is_up+0x4c>)
   28ad0:	1a5b      	subs	r3, r3, r1
   28ad2:	f360 02c5 	bfi	r2, r0, #3, #3
   28ad6:	08db      	lsrs	r3, r3, #3
   28ad8:	f363 128f 	bfi	r2, r3, #6, #10
   28adc:	4909      	ldr	r1, [pc, #36]	; (28b04 <net_if_is_up+0x50>)
   28ade:	480a      	ldr	r0, [pc, #40]	; (28b08 <net_if_is_up+0x54>)
   28ae0:	f7d9 fb04 	bl	20ec <log_1>
   28ae4:	6823      	ldr	r3, [r4, #0]
   28ae6:	f3bf 8f5b 	dmb	ish
   28aea:	68d8      	ldr	r0, [r3, #12]
   28aec:	f3bf 8f5b 	dmb	ish
}
   28af0:	f000 0001 	and.w	r0, r0, #1
   28af4:	bd10      	pop	{r4, pc}
   28af6:	bf00      	nop
   28af8:	2000e2a4 	.word	0x2000e2a4
   28afc:	0002ef38 	.word	0x0002ef38
   28b00:	0002f088 	.word	0x0002f088
   28b04:	00035518 	.word	0x00035518
   28b08:	000346d4 	.word	0x000346d4

00028b0c <iface_cb>:
{
   28b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (data->user_data && data->user_data != iface) {
   28b10:	684b      	ldr	r3, [r1, #4]
{
   28b12:	b085      	sub	sp, #20
   28b14:	4606      	mov	r6, r0
	if (data->user_data && data->user_data != iface) {
   28b16:	b113      	cbz	r3, 28b1e <iface_cb+0x12>
   28b18:	4283      	cmp	r3, r0
   28b1a:	f040 813f 	bne.w	28d9c <iface_cb+0x290>
	return iface->if_dev->l2;
   28b1e:	6833      	ldr	r3, [r6, #0]
		*extra = "==============";
   28b20:	4da0      	ldr	r5, [pc, #640]	; (28da4 <iface_cb+0x298>)
	if (net_if_l2(iface) == &NET_L2_GET_NAME(BLUETOOTH)) {
   28b22:	685a      	ldr	r2, [r3, #4]
		*extra = "==============";
   28b24:	4ba0      	ldr	r3, [pc, #640]	; (28da8 <iface_cb+0x29c>)
	const struct shell *shell = data->shell;
   28b26:	680c      	ldr	r4, [r1, #0]
		*extra = "==============";
   28b28:	4fa0      	ldr	r7, [pc, #640]	; (28dac <iface_cb+0x2a0>)
   28b2a:	429a      	cmp	r2, r3
   28b2c:	4ba0      	ldr	r3, [pc, #640]	; (28db0 <iface_cb+0x2a4>)
   28b2e:	bf18      	it	ne
   28b30:	461d      	movne	r5, r3
   28b32:	4ba0      	ldr	r3, [pc, #640]	; (28db4 <iface_cb+0x2a8>)
	PR("\nInterface %p (%s) [%d]\n", iface, iface2str(iface, &extra),
   28b34:	4630      	mov	r0, r6
		*extra = "==============";
   28b36:	bf18      	it	ne
   28b38:	461f      	movne	r7, r3
	PR("\nInterface %p (%s) [%d]\n", iface, iface2str(iface, &extra),
   28b3a:	f7f9 f9a5 	bl	21e88 <net_if_get_by_iface>
   28b3e:	4633      	mov	r3, r6
   28b40:	e9cd 7000 	strd	r7, r0, [sp]
   28b44:	4a9c      	ldr	r2, [pc, #624]	; (28db8 <iface_cb+0x2ac>)
   28b46:	2100      	movs	r1, #0
   28b48:	4620      	mov	r0, r4
   28b4a:	f7da fe09 	bl	3760 <shell_fprintf>
	PR("===========================%s\n", extra);
   28b4e:	4620      	mov	r0, r4
   28b50:	462b      	mov	r3, r5
   28b52:	4a9a      	ldr	r2, [pc, #616]	; (28dbc <iface_cb+0x2b0>)
   28b54:	2100      	movs	r1, #0
   28b56:	f7da fe03 	bl	3760 <shell_fprintf>
	if (!net_if_is_up(iface)) {
   28b5a:	4630      	mov	r0, r6
   28b5c:	f7ff ffaa 	bl	28ab4 <net_if_is_up>
   28b60:	b938      	cbnz	r0, 28b72 <iface_cb+0x66>
		PR_INFO("Interface is down.\n");
   28b62:	4a97      	ldr	r2, [pc, #604]	; (28dc0 <iface_cb+0x2b4>)
   28b64:	2103      	movs	r1, #3
   28b66:	4620      	mov	r0, r4
}
   28b68:	b005      	add	sp, #20
   28b6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		PR_INFO("Interface is down.\n");
   28b6e:	f7da bdf7 	b.w	3760 <shell_fprintf>
	if (net_if_get_link_addr(iface) &&
   28b72:	6831      	ldr	r1, [r6, #0]
   28b74:	f111 0f10 	cmn.w	r1, #16
   28b78:	d00c      	beq.n	28b94 <iface_cb+0x88>
	    net_if_get_link_addr(iface)->addr) {
   28b7a:	6908      	ldr	r0, [r1, #16]
	if (net_if_get_link_addr(iface) &&
   28b7c:	b150      	cbz	r0, 28b94 <iface_cb+0x88>
	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   28b7e:	2318      	movs	r3, #24
   28b80:	4a90      	ldr	r2, [pc, #576]	; (28dc4 <iface_cb+0x2b8>)
   28b82:	7d09      	ldrb	r1, [r1, #20]
   28b84:	f7fa f9dd 	bl	22f42 <net_sprint_ll_addr_buf>
		PR("Link addr : %s\n",
   28b88:	4a8f      	ldr	r2, [pc, #572]	; (28dc8 <iface_cb+0x2bc>)
   28b8a:	4603      	mov	r3, r0
   28b8c:	2100      	movs	r1, #0
   28b8e:	4620      	mov	r0, r4
   28b90:	f7da fde6 	bl	3760 <shell_fprintf>
	return iface->if_dev->mtu;
   28b94:	6833      	ldr	r3, [r6, #0]
	PR("MTU       : %d\n", net_if_get_mtu(iface));
   28b96:	4a8d      	ldr	r2, [pc, #564]	; (28dcc <iface_cb+0x2c0>)
   28b98:	8b1b      	ldrh	r3, [r3, #24]
		PR("\t%s %s %s%s\n",
   28b9a:	f8df a248 	ldr.w	sl, [pc, #584]	; 28de4 <iface_cb+0x2d8>
   28b9e:	f8df b270 	ldr.w	fp, [pc, #624]	; 28e10 <iface_cb+0x304>
	PR("MTU       : %d\n", net_if_get_mtu(iface));
   28ba2:	2100      	movs	r1, #0
   28ba4:	4620      	mov	r0, r4
   28ba6:	f7da fddb 	bl	3760 <shell_fprintf>
	PR("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
   28baa:	2303      	movs	r3, #3
   28bac:	4a88      	ldr	r2, [pc, #544]	; (28dd0 <iface_cb+0x2c4>)
	ipv6 = iface->config.ip.ipv6;
   28bae:	6875      	ldr	r5, [r6, #4]
	PR("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
   28bb0:	2100      	movs	r1, #0
   28bb2:	4620      	mov	r0, r4
   28bb4:	f7da fdd4 	bl	3760 <shell_fprintf>
	count = 0;
   28bb8:	2700      	movs	r7, #0
   28bba:	f105 0904 	add.w	r9, r5, #4
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_ADDR; i++) {
   28bbe:	46b8      	mov	r8, r7
   28bc0:	2d00      	cmp	r5, #0
   28bc2:	d170      	bne.n	28ca6 <iface_cb+0x19a>
	if (count == 0) {
   28bc4:	b927      	cbnz	r7, 28bd0 <iface_cb+0xc4>
		PR("\t<none>\n");
   28bc6:	4a83      	ldr	r2, [pc, #524]	; (28dd4 <iface_cb+0x2c8>)
   28bc8:	4639      	mov	r1, r7
   28bca:	4620      	mov	r0, r4
   28bcc:	f7da fdc8 	bl	3760 <shell_fprintf>
	PR("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
   28bd0:	2305      	movs	r3, #5
   28bd2:	4a81      	ldr	r2, [pc, #516]	; (28dd8 <iface_cb+0x2cc>)
		PR("\t%s\n", net_sprint_ipv6_addr(&mcast->address.in6_addr));
   28bd4:	f8df b23c 	ldr.w	fp, [pc, #572]	; 28e14 <iface_cb+0x308>
	PR("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
   28bd8:	2100      	movs	r1, #0
   28bda:	4620      	mov	r0, r4
   28bdc:	f7da fdc0 	bl	3760 <shell_fprintf>
	count = 0;
   28be0:	2700      	movs	r7, #0
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_MADDR; i++) {
   28be2:	46b8      	mov	r8, r7
		if (!mcast->is_used) {
   28be4:	f04f 0918 	mov.w	r9, #24
		PR("\t%s\n", net_sprint_ipv6_addr(&mcast->address.in6_addr));
   28be8:	f105 0adc 	add.w	sl, r5, #220	; 0xdc
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_MADDR; i++) {
   28bec:	2d00      	cmp	r5, #0
   28bee:	f040 8093 	bne.w	28d18 <iface_cb+0x20c>
	if (count == 0) {
   28bf2:	b927      	cbnz	r7, 28bfe <iface_cb+0xf2>
		PR("\t<none>\n");
   28bf4:	4a77      	ldr	r2, [pc, #476]	; (28dd4 <iface_cb+0x2c8>)
   28bf6:	4639      	mov	r1, r7
   28bf8:	4620      	mov	r0, r4
   28bfa:	f7da fdb1 	bl	3760 <shell_fprintf>
	PR("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   28bfe:	2302      	movs	r3, #2
   28c00:	4a76      	ldr	r2, [pc, #472]	; (28ddc <iface_cb+0x2d0>)
		PR("\t%s/%d%s\n",
   28c02:	f8df b214 	ldr.w	fp, [pc, #532]	; 28e18 <iface_cb+0x30c>
	PR("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   28c06:	2100      	movs	r1, #0
   28c08:	4620      	mov	r0, r4
   28c0a:	f7da fda9 	bl	3760 <shell_fprintf>
	count = 0;
   28c0e:	2700      	movs	r7, #0
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_PREFIX; i++) {
   28c10:	46b8      	mov	r8, r7
   28c12:	2d00      	cmp	r5, #0
   28c14:	f040 8099 	bne.w	28d4a <iface_cb+0x23e>
	if (count == 0) {
   28c18:	b927      	cbnz	r7, 28c24 <iface_cb+0x118>
		PR("\t<none>\n");
   28c1a:	4a6e      	ldr	r2, [pc, #440]	; (28dd4 <iface_cb+0x2c8>)
   28c1c:	4639      	mov	r1, r7
   28c1e:	4620      	mov	r0, r4
   28c20:	f7da fd9e 	bl	3760 <shell_fprintf>
	router = net_if_ipv6_router_find_default(iface, NULL);
   28c24:	4630      	mov	r0, r6
   28c26:	2100      	movs	r1, #0
   28c28:	f7f8 ff56 	bl	21ad8 <net_if_ipv6_router_find_default>
	if (router) {
   28c2c:	4606      	mov	r6, r0
   28c2e:	b1c0      	cbz	r0, 28c62 <iface_cb+0x156>
		PR("IPv6 default router :\n");
   28c30:	4a6b      	ldr	r2, [pc, #428]	; (28de0 <iface_cb+0x2d4>)
   28c32:	2100      	movs	r1, #0
   28c34:	4620      	mov	r0, r4
   28c36:	f7da fd93 	bl	3760 <shell_fprintf>
		PR("\t%s%s\n",
   28c3a:	f106 0124 	add.w	r1, r6, #36	; 0x24
   28c3e:	200a      	movs	r0, #10
   28c40:	f7fa fa82 	bl	23148 <net_sprint_addr>
   28c44:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   28c48:	4a66      	ldr	r2, [pc, #408]	; (28de4 <iface_cb+0x2d8>)
   28c4a:	f013 0f04 	tst.w	r3, #4
   28c4e:	4b66      	ldr	r3, [pc, #408]	; (28de8 <iface_cb+0x2dc>)
   28c50:	bf08      	it	eq
   28c52:	4613      	moveq	r3, r2
   28c54:	9300      	str	r3, [sp, #0]
   28c56:	4a65      	ldr	r2, [pc, #404]	; (28dec <iface_cb+0x2e0>)
   28c58:	4603      	mov	r3, r0
   28c5a:	2100      	movs	r1, #0
   28c5c:	4620      	mov	r0, r4
   28c5e:	f7da fd7f 	bl	3760 <shell_fprintf>
	if (ipv6) {
   28c62:	2d00      	cmp	r5, #0
   28c64:	f000 809a 	beq.w	28d9c <iface_cb+0x290>
		PR("IPv6 hop limit           : %d\n",
   28c68:	f895 31cc 	ldrb.w	r3, [r5, #460]	; 0x1cc
   28c6c:	4a60      	ldr	r2, [pc, #384]	; (28df0 <iface_cb+0x2e4>)
   28c6e:	4620      	mov	r0, r4
   28c70:	2100      	movs	r1, #0
   28c72:	f7da fd75 	bl	3760 <shell_fprintf>
		PR("IPv6 base reachable time : %d\n",
   28c76:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
   28c7a:	4a5e      	ldr	r2, [pc, #376]	; (28df4 <iface_cb+0x2e8>)
   28c7c:	4620      	mov	r0, r4
   28c7e:	2100      	movs	r1, #0
   28c80:	f7da fd6e 	bl	3760 <shell_fprintf>
		PR("IPv6 reachable time      : %d\n",
   28c84:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   28c88:	4a5b      	ldr	r2, [pc, #364]	; (28df8 <iface_cb+0x2ec>)
   28c8a:	4620      	mov	r0, r4
   28c8c:	2100      	movs	r1, #0
   28c8e:	f7da fd67 	bl	3760 <shell_fprintf>
		PR("IPv6 retransmit timer    : %d\n",
   28c92:	f8d5 31c8 	ldr.w	r3, [r5, #456]	; 0x1c8
   28c96:	4a59      	ldr	r2, [pc, #356]	; (28dfc <iface_cb+0x2f0>)
   28c98:	2100      	movs	r1, #0
   28c9a:	4620      	mov	r0, r4
}
   28c9c:	b005      	add	sp, #20
   28c9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		PR("IPv6 retransmit timer    : %d\n",
   28ca2:	f7da bd5d 	b.w	3760 <shell_fprintf>
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_ADDR; i++) {
   28ca6:	f1b8 0f03 	cmp.w	r8, #3
   28caa:	d08b      	beq.n	28bc4 <iface_cb+0xb8>
		if (!unicast->is_used) {
   28cac:	2348      	movs	r3, #72	; 0x48
   28cae:	fb03 5308 	mla	r3, r3, r8, r5
   28cb2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   28cb6:	0799      	lsls	r1, r3, #30
   28cb8:	d529      	bpl.n	28d0e <iface_cb+0x202>
		PR("\t%s %s %s%s\n",
   28cba:	4649      	mov	r1, r9
   28cbc:	200a      	movs	r0, #10
   28cbe:	f7fa fa43 	bl	23148 <net_sprint_addr>
   28cc2:	f899 2040 	ldrb.w	r2, [r9, #64]	; 0x40
   28cc6:	2a04      	cmp	r2, #4
   28cc8:	bf96      	itet	ls
   28cca:	494d      	ldrls	r1, [pc, #308]	; (28e00 <iface_cb+0x2f4>)
   28ccc:	494d      	ldrhi	r1, [pc, #308]	; (28e04 <iface_cb+0x2f8>)
   28cce:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
   28cd2:	f899 2041 	ldrb.w	r2, [r9, #65]	; 0x41
   28cd6:	3201      	adds	r2, #1
   28cd8:	b2d2      	uxtb	r2, r2
   28cda:	2a03      	cmp	r2, #3
   28cdc:	4603      	mov	r3, r0
   28cde:	bf96      	itet	ls
   28ce0:	4849      	ldrls	r0, [pc, #292]	; (28e08 <iface_cb+0x2fc>)
	switch (addr_state) {
   28ce2:	484a      	ldrhi	r0, [pc, #296]	; (28e0c <iface_cb+0x300>)
   28ce4:	f850 0022 	ldrls.w	r0, [r0, r2, lsl #2]
		PR("\t%s %s %s%s\n",
   28ce8:	2248      	movs	r2, #72	; 0x48
   28cea:	fb02 5208 	mla	r2, r2, r8, r5
		count++;
   28cee:	3701      	adds	r7, #1
		PR("\t%s %s %s%s\n",
   28cf0:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
   28cf4:	9100      	str	r1, [sp, #0]
   28cf6:	f012 0f01 	tst.w	r2, #1
   28cfa:	4a3b      	ldr	r2, [pc, #236]	; (28de8 <iface_cb+0x2dc>)
   28cfc:	bf08      	it	eq
   28cfe:	4652      	moveq	r2, sl
   28d00:	e9cd 0201 	strd	r0, r2, [sp, #4]
   28d04:	2100      	movs	r1, #0
   28d06:	465a      	mov	r2, fp
   28d08:	4620      	mov	r0, r4
   28d0a:	f7da fd29 	bl	3760 <shell_fprintf>
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_ADDR; i++) {
   28d0e:	f108 0801 	add.w	r8, r8, #1
   28d12:	f109 0948 	add.w	r9, r9, #72	; 0x48
   28d16:	e753      	b.n	28bc0 <iface_cb+0xb4>
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_MADDR; i++) {
   28d18:	f1b8 0f05 	cmp.w	r8, #5
   28d1c:	f43f af69 	beq.w	28bf2 <iface_cb+0xe6>
		if (!mcast->is_used) {
   28d20:	fb09 f108 	mul.w	r1, r9, r8
   28d24:	186b      	adds	r3, r5, r1
   28d26:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
   28d2a:	07da      	lsls	r2, r3, #31
   28d2c:	d50a      	bpl.n	28d44 <iface_cb+0x238>
		PR("\t%s\n", net_sprint_ipv6_addr(&mcast->address.in6_addr));
   28d2e:	4451      	add	r1, sl
   28d30:	200a      	movs	r0, #10
   28d32:	f7fa fa09 	bl	23148 <net_sprint_addr>
   28d36:	465a      	mov	r2, fp
   28d38:	4603      	mov	r3, r0
   28d3a:	2100      	movs	r1, #0
   28d3c:	4620      	mov	r0, r4
   28d3e:	f7da fd0f 	bl	3760 <shell_fprintf>
		count++;
   28d42:	3701      	adds	r7, #1
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_MADDR; i++) {
   28d44:	f108 0801 	add.w	r8, r8, #1
   28d48:	e750      	b.n	28bec <iface_cb+0xe0>
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_PREFIX; i++) {
   28d4a:	f1b8 0f02 	cmp.w	r8, #2
   28d4e:	f43f af63 	beq.w	28c18 <iface_cb+0x10c>
		if (!prefix->is_used) {
   28d52:	2128      	movs	r1, #40	; 0x28
   28d54:	fb01 f108 	mul.w	r1, r1, r8
   28d58:	eb05 0a01 	add.w	sl, r5, r1
   28d5c:	f89a 0175 	ldrb.w	r0, [sl, #373]	; 0x175
   28d60:	0783      	lsls	r3, r0, #30
   28d62:	d518      	bpl.n	28d96 <iface_cb+0x28a>
		PR("\t%s/%d%s\n",
   28d64:	f505 70b0 	add.w	r0, r5, #352	; 0x160
   28d68:	4401      	add	r1, r0
   28d6a:	200a      	movs	r0, #10
   28d6c:	f7fa f9ec 	bl	23148 <net_sprint_addr>
   28d70:	f89a 3175 	ldrb.w	r3, [sl, #373]	; 0x175
   28d74:	491b      	ldr	r1, [pc, #108]	; (28de4 <iface_cb+0x2d8>)
   28d76:	f89a 2174 	ldrb.w	r2, [sl, #372]	; 0x174
   28d7a:	f013 0f01 	tst.w	r3, #1
   28d7e:	4b1a      	ldr	r3, [pc, #104]	; (28de8 <iface_cb+0x2dc>)
   28d80:	bf08      	it	eq
   28d82:	460b      	moveq	r3, r1
   28d84:	e9cd 2300 	strd	r2, r3, [sp]
   28d88:	2100      	movs	r1, #0
   28d8a:	4603      	mov	r3, r0
   28d8c:	465a      	mov	r2, fp
   28d8e:	4620      	mov	r0, r4
   28d90:	f7da fce6 	bl	3760 <shell_fprintf>
		count++;
   28d94:	3701      	adds	r7, #1
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_PREFIX; i++) {
   28d96:	f108 0801 	add.w	r8, r8, #1
   28d9a:	e73a      	b.n	28c12 <iface_cb+0x106>
}
   28d9c:	b005      	add	sp, #20
   28d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28da2:	bf00      	nop
   28da4:	00036187 	.word	0x00036187
   28da8:	0002ef24 	.word	0x0002ef24
   28dac:	00036320 	.word	0x00036320
   28db0:	00036182 	.word	0x00036182
   28db4:	0003632a 	.word	0x0003632a
   28db8:	000361aa 	.word	0x000361aa
   28dbc:	00035592 	.word	0x00035592
   28dc0:	000361c3 	.word	0x000361c3
   28dc4:	200028e4 	.word	0x200028e4
   28dc8:	000361d7 	.word	0x000361d7
   28dcc:	000361e7 	.word	0x000361e7
   28dd0:	000361f7 	.word	0x000361f7
   28dd4:	00036226 	.word	0x00036226
   28dd8:	0003622f 	.word	0x0003622f
   28ddc:	00036258 	.word	0x00036258
   28de0:	0003627b 	.word	0x0003627b
   28de4:	0002f21b 	.word	0x0002f21b
   28de8:	000361a0 	.word	0x000361a0
   28dec:	00036292 	.word	0x00036292
   28df0:	00036299 	.word	0x00036299
   28df4:	000362b8 	.word	0x000362b8
   28df8:	000362d7 	.word	0x000362d7
   28dfc:	000362f6 	.word	0x000362f6
   28e00:	000354f4 	.word	0x000354f4
   28e04:	00036191 	.word	0x00036191
   28e08:	00035508 	.word	0x00035508
   28e0c:	0003530e 	.word	0x0003530e
   28e10:	00036219 	.word	0x00036219
   28e14:	00036253 	.word	0x00036253
   28e18:	00036271 	.word	0x00036271

00028e1c <cmd_net_iface_up>:
{
   28e1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (shell_help_requested(shell)) {
   28e1e:	6883      	ldr	r3, [r0, #8]
   28e20:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
   28e24:	079b      	lsls	r3, r3, #30
{
   28e26:	4605      	mov	r5, r0
	if (shell_help_requested(shell)) {
   28e28:	d506      	bpl.n	28e38 <cmd_net_iface_up+0x1c>
		shell_help_print(shell, NULL, 0);
   28e2a:	2200      	movs	r2, #0
   28e2c:	4611      	mov	r1, r2
   28e2e:	f7da fd9b 	bl	3968 <shell_help_print>
		return -ENOEXEC;
   28e32:	f06f 0407 	mvn.w	r4, #7
   28e36:	e029      	b.n	28e8c <cmd_net_iface_up+0x70>
	idx = get_iface_idx(shell, argv[1]);
   28e38:	6851      	ldr	r1, [r2, #4]
   28e3a:	f7ff fbdf 	bl	285fc <get_iface_idx>
	if (idx < 0) {
   28e3e:	1e06      	subs	r6, r0, #0
   28e40:	dbf7      	blt.n	28e32 <cmd_net_iface_up+0x16>
	iface = net_if_get_by_index(idx);
   28e42:	b2f0      	uxtb	r0, r6
   28e44:	f7f9 f814 	bl	21e70 <net_if_get_by_index>
	if (!iface) {
   28e48:	4604      	mov	r4, r0
   28e4a:	b930      	cbnz	r0, 28e5a <cmd_net_iface_up+0x3e>
		PR_WARNING("No such interface in index %d\n", idx);
   28e4c:	4a11      	ldr	r2, [pc, #68]	; (28e94 <cmd_net_iface_up+0x78>)
   28e4e:	4633      	mov	r3, r6
		PR_WARNING("Interface %d is already up.\n", idx);
   28e50:	2104      	movs	r1, #4
   28e52:	4628      	mov	r0, r5
   28e54:	f7da fc84 	bl	3760 <shell_fprintf>
   28e58:	e7eb      	b.n	28e32 <cmd_net_iface_up+0x16>
	if (net_if_is_up(iface)) {
   28e5a:	f7ff fe2b 	bl	28ab4 <net_if_is_up>
   28e5e:	b110      	cbz	r0, 28e66 <cmd_net_iface_up+0x4a>
		PR_WARNING("Interface %d is already up.\n", idx);
   28e60:	4633      	mov	r3, r6
   28e62:	4a0d      	ldr	r2, [pc, #52]	; (28e98 <cmd_net_iface_up+0x7c>)
   28e64:	e7f4      	b.n	28e50 <cmd_net_iface_up+0x34>
	ret = net_if_up(iface);
   28e66:	4620      	mov	r0, r4
   28e68:	f7f9 f856 	bl	21f18 <net_if_up>
	if (ret) {
   28e6c:	4604      	mov	r4, r0
   28e6e:	b138      	cbz	r0, 28e80 <cmd_net_iface_up+0x64>
		PR_WARNING("Cannot take interface %d up (%d)\n", idx, ret);
   28e70:	9000      	str	r0, [sp, #0]
   28e72:	4633      	mov	r3, r6
   28e74:	4a09      	ldr	r2, [pc, #36]	; (28e9c <cmd_net_iface_up+0x80>)
   28e76:	2104      	movs	r1, #4
   28e78:	4628      	mov	r0, r5
   28e7a:	f7da fc71 	bl	3760 <shell_fprintf>
   28e7e:	e7d8      	b.n	28e32 <cmd_net_iface_up+0x16>
		PR("Interface %d is up\n", idx);
   28e80:	4601      	mov	r1, r0
   28e82:	4633      	mov	r3, r6
   28e84:	4a06      	ldr	r2, [pc, #24]	; (28ea0 <cmd_net_iface_up+0x84>)
   28e86:	4628      	mov	r0, r5
   28e88:	f7da fc6a 	bl	3760 <shell_fprintf>
}
   28e8c:	4620      	mov	r0, r4
   28e8e:	b002      	add	sp, #8
   28e90:	bd70      	pop	{r4, r5, r6, pc}
   28e92:	bf00      	nop
   28e94:	00035900 	.word	0x00035900
   28e98:	00035959 	.word	0x00035959
   28e9c:	00035976 	.word	0x00035976
   28ea0:	00035998 	.word	0x00035998

00028ea4 <_handle_ipv6_echo_reply>:
	PR_SHELL(shell_for_ping, "Received echo reply from %s to %s\n",
   28ea4:	4b11      	ldr	r3, [pc, #68]	; (28eec <_handle_ipv6_echo_reply+0x48>)
{
   28ea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	PR_SHELL(shell_for_ping, "Received echo reply from %s to %s\n",
   28ea8:	681d      	ldr	r5, [r3, #0]
	return pkt->frags->data;
   28eaa:	6943      	ldr	r3, [r0, #20]
   28eac:	6899      	ldr	r1, [r3, #8]
{
   28eae:	4604      	mov	r4, r0
	PR_SHELL(shell_for_ping, "Received echo reply from %s to %s\n",
   28eb0:	3108      	adds	r1, #8
   28eb2:	200a      	movs	r0, #10
   28eb4:	f7fa f948 	bl	23148 <net_sprint_addr>
   28eb8:	6963      	ldr	r3, [r4, #20]
   28eba:	6899      	ldr	r1, [r3, #8]
   28ebc:	4606      	mov	r6, r0
   28ebe:	3118      	adds	r1, #24
   28ec0:	200a      	movs	r0, #10
   28ec2:	f7fa f941 	bl	23148 <net_sprint_addr>
   28ec6:	4633      	mov	r3, r6
   28ec8:	4a09      	ldr	r2, [pc, #36]	; (28ef0 <_handle_ipv6_echo_reply+0x4c>)
   28eca:	9000      	str	r0, [sp, #0]
   28ecc:	2100      	movs	r1, #0
   28ece:	4628      	mov	r0, r5
   28ed0:	f7da fc46 	bl	3760 <shell_fprintf>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   28ed4:	4807      	ldr	r0, [pc, #28]	; (28ef4 <_handle_ipv6_echo_reply+0x50>)
   28ed6:	f005 f9d0 	bl	2e27a <_impl_k_sem_give>
	net_icmpv6_unregister_handler(&ping6_handler);
   28eda:	4807      	ldr	r0, [pc, #28]	; (28ef8 <_handle_ipv6_echo_reply+0x54>)
   28edc:	f7fb f918 	bl	24110 <net_icmpv6_unregister_handler>
	net_pkt_unref(pkt);
   28ee0:	4620      	mov	r0, r4
   28ee2:	f7f9 fb8c 	bl	225fe <net_pkt_unref>
}
   28ee6:	2000      	movs	r0, #0
   28ee8:	b002      	add	sp, #8
   28eea:	bd70      	pop	{r4, r5, r6, pc}
   28eec:	20002a0c 	.word	0x20002a0c
   28ef0:	00035539 	.word	0x00035539
   28ef4:	2000e398 	.word	0x2000e398
   28ef8:	2000e054 	.word	0x2000e054

00028efc <cmd_net_ping>:
{
   28efc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (shell_help_requested(shell)) {
   28efe:	6883      	ldr	r3, [r0, #8]
   28f00:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   28f04:	f3c4 0440 	ubfx	r4, r4, #1, #1
{
   28f08:	b085      	sub	sp, #20
   28f0a:	4605      	mov	r5, r0
	if (shell_help_requested(shell)) {
   28f0c:	b144      	cbz	r4, 28f20 <cmd_net_ping+0x24>
		shell_help_print(shell, NULL, 0);
   28f0e:	2200      	movs	r2, #0
   28f10:	4611      	mov	r1, r2
   28f12:	f7da fd29 	bl	3968 <shell_help_print>
		return -ENOEXEC;
   28f16:	f06f 0407 	mvn.w	r4, #7
}
   28f1a:	4620      	mov	r0, r4
   28f1c:	b005      	add	sp, #20
   28f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	host = argv[1];
   28f20:	6856      	ldr	r6, [r2, #4]
	if (!host) {
   28f22:	b926      	cbnz	r6, 28f2e <cmd_net_ping+0x32>
		PR_WARNING("Target host missing\n");
   28f24:	4a27      	ldr	r2, [pc, #156]	; (28fc4 <cmd_net_ping+0xc8>)
   28f26:	2104      	movs	r1, #4
			PR_WARNING("Invalid IP address\n");
   28f28:	f7da fc1a 	bl	3760 <shell_fprintf>
   28f2c:	e7f3      	b.n	28f16 <cmd_net_ping+0x1a>
	shell_for_ping = shell;
   28f2e:	4b26      	ldr	r3, [pc, #152]	; (28fc8 <cmd_net_ping+0xcc>)
   28f30:	6018      	str	r0, [r3, #0]
	struct net_if *iface = net_if_get_default();
   28f32:	f7f7 fee7 	bl	20d04 <net_if_get_default>
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   28f36:	466a      	mov	r2, sp
	struct net_if *iface = net_if_get_default();
   28f38:	4607      	mov	r7, r0
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   28f3a:	4631      	mov	r1, r6
   28f3c:	200a      	movs	r0, #10
   28f3e:	f7fa f919 	bl	23174 <net_addr_pton>
   28f42:	2800      	cmp	r0, #0
   28f44:	db3c      	blt.n	28fc0 <cmd_net_ping+0xc4>
	net_icmpv6_register_handler(&ping6_handler);
   28f46:	4821      	ldr	r0, [pc, #132]	; (28fcc <cmd_net_ping+0xd0>)
   28f48:	f7fb f8d8 	bl	240fc <net_icmpv6_register_handler>
	nbr = net_ipv6_nbr_lookup(NULL, &ipv6_target);
   28f4c:	4669      	mov	r1, sp
   28f4e:	4620      	mov	r0, r4
   28f50:	f7fc fce4 	bl	2591c <net_ipv6_nbr_lookup>
	if (nbr) {
   28f54:	b100      	cbz	r0, 28f58 <cmd_net_ping+0x5c>
		iface = nbr->iface;
   28f56:	6887      	ldr	r7, [r0, #8]
	route = net_route_lookup(NULL, &ipv6_target);
   28f58:	4669      	mov	r1, sp
   28f5a:	2000      	movs	r0, #0
   28f5c:	f7fe fc84 	bl	27868 <net_route_lookup>
	if (route) {
   28f60:	b100      	cbz	r0, 28f64 <cmd_net_ping+0x68>
		iface = route->iface;
   28f62:	68c7      	ldr	r7, [r0, #12]
					   sys_rand32_get(),
   28f64:	f7dc ff16 	bl	5d94 <sys_rand32_get>
   28f68:	4604      	mov	r4, r0
					   sys_rand32_get());
   28f6a:	f7dc ff13 	bl	5d94 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   28f6e:	b2a2      	uxth	r2, r4
   28f70:	b283      	uxth	r3, r0
   28f72:	4669      	mov	r1, sp
   28f74:	4638      	mov	r0, r7
   28f76:	f7fb fd60 	bl	24a3a <net_icmpv6_send_echo_request>
	if (ret) {
   28f7a:	4604      	mov	r4, r0
   28f7c:	b140      	cbz	r0, 28f90 <cmd_net_ping+0x94>
	net_icmpv6_unregister_handler(&ping6_handler);
   28f7e:	4813      	ldr	r0, [pc, #76]	; (28fcc <cmd_net_ping+0xd0>)
   28f80:	f7fb f8c6 	bl	24110 <net_icmpv6_unregister_handler>
	} else if (ret == -EIO) {
   28f84:	3405      	adds	r4, #5
   28f86:	d11b      	bne.n	28fc0 <cmd_net_ping+0xc4>
		PR_WARNING("Cannot send IPv6 ping\n");
   28f88:	4a11      	ldr	r2, [pc, #68]	; (28fd0 <cmd_net_ping+0xd4>)
			PR_WARNING("Invalid IP address\n");
   28f8a:	2104      	movs	r1, #4
   28f8c:	4628      	mov	r0, r5
   28f8e:	e7cb      	b.n	28f28 <cmd_net_ping+0x2c>
		PR("Sent a ping to %s\n", host);
   28f90:	4601      	mov	r1, r0
   28f92:	4633      	mov	r3, r6
   28f94:	4a0f      	ldr	r2, [pc, #60]	; (28fd4 <cmd_net_ping+0xd8>)
   28f96:	4628      	mov	r0, r5
   28f98:	f7da fbe2 	bl	3760 <shell_fprintf>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   28f9c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   28fa0:	480d      	ldr	r0, [pc, #52]	; (28fd8 <cmd_net_ping+0xdc>)
   28fa2:	f005 f991 	bl	2e2c8 <_impl_k_sem_take>
	if (ret == -EAGAIN) {
   28fa6:	300b      	adds	r0, #11
   28fa8:	d1b7      	bne.n	28f1a <cmd_net_ping+0x1e>
		PR_INFO("Ping timeout\n");
   28faa:	4a0c      	ldr	r2, [pc, #48]	; (28fdc <cmd_net_ping+0xe0>)
   28fac:	2103      	movs	r1, #3
   28fae:	4628      	mov	r0, r5
   28fb0:	f7da fbd6 	bl	3760 <shell_fprintf>
	net_icmpv6_unregister_handler(&ping6_handler);
   28fb4:	4805      	ldr	r0, [pc, #20]	; (28fcc <cmd_net_ping+0xd0>)
   28fb6:	f7fb f8ab 	bl	24110 <net_icmpv6_unregister_handler>
		return -ETIMEDOUT;
   28fba:	f06f 043b 	mvn.w	r4, #59	; 0x3b
   28fbe:	e7ac      	b.n	28f1a <cmd_net_ping+0x1e>
			PR_WARNING("Invalid IP address\n");
   28fc0:	4a07      	ldr	r2, [pc, #28]	; (28fe0 <cmd_net_ping+0xe4>)
   28fc2:	e7e2      	b.n	28f8a <cmd_net_ping+0x8e>
   28fc4:	00035d70 	.word	0x00035d70
   28fc8:	20002a0c 	.word	0x20002a0c
   28fcc:	2000e054 	.word	0x2000e054
   28fd0:	00035d98 	.word	0x00035d98
   28fd4:	00035d85 	.word	0x00035d85
   28fd8:	2000e398 	.word	0x2000e398
   28fdc:	00035dc3 	.word	0x00035dc3
   28fe0:	00035daf 	.word	0x00035daf

00028fe4 <iface_per_route_cb>:
	return iface->if_dev->l2;
   28fe4:	6803      	ldr	r3, [r0, #0]
{
   28fe6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (net_if_l2(iface) == &NET_L2_GET_NAME(BLUETOOTH)) {
   28fe8:	685a      	ldr	r2, [r3, #4]
   28fea:	4b11      	ldr	r3, [pc, #68]	; (29030 <iface_per_route_cb+0x4c>)
	const struct shell *shell = data->shell;
   28fec:	680f      	ldr	r7, [r1, #0]
		*extra = "==============";
   28fee:	4e11      	ldr	r6, [pc, #68]	; (29034 <iface_per_route_cb+0x50>)
	if (net_if_l2(iface) == &NET_L2_GET_NAME(BLUETOOTH)) {
   28ff0:	429a      	cmp	r2, r3
		*extra = "==============";
   28ff2:	4b11      	ldr	r3, [pc, #68]	; (29038 <iface_per_route_cb+0x54>)
   28ff4:	4a11      	ldr	r2, [pc, #68]	; (2903c <iface_per_route_cb+0x58>)
   28ff6:	bf18      	it	ne
   28ff8:	461e      	movne	r6, r3
   28ffa:	4b11      	ldr	r3, [pc, #68]	; (29040 <iface_per_route_cb+0x5c>)
   28ffc:	bf18      	it	ne
   28ffe:	4613      	movne	r3, r2
{
   29000:	460c      	mov	r4, r1
   29002:	4605      	mov	r5, r0
	PR("\nIPv6 routes for interface %p (%s)\n", iface,
   29004:	9300      	str	r3, [sp, #0]
   29006:	4a0f      	ldr	r2, [pc, #60]	; (29044 <iface_per_route_cb+0x60>)
   29008:	4603      	mov	r3, r0
   2900a:	2100      	movs	r1, #0
   2900c:	4638      	mov	r0, r7
   2900e:	f7da fba7 	bl	3760 <shell_fprintf>
	PR("=======================================%s\n", extra);
   29012:	4638      	mov	r0, r7
   29014:	4633      	mov	r3, r6
   29016:	4a0c      	ldr	r2, [pc, #48]	; (29048 <iface_per_route_cb+0x64>)
   29018:	2100      	movs	r1, #0
   2901a:	f7da fba1 	bl	3760 <shell_fprintf>
	net_route_foreach(route_cb, data);
   2901e:	480b      	ldr	r0, [pc, #44]	; (2904c <iface_per_route_cb+0x68>)
	data->user_data = iface;
   29020:	6065      	str	r5, [r4, #4]
	net_route_foreach(route_cb, data);
   29022:	4621      	mov	r1, r4
}
   29024:	b003      	add	sp, #12
   29026:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	net_route_foreach(route_cb, data);
   2902a:	f7fe bd51 	b.w	27ad0 <net_route_foreach>
   2902e:	bf00      	nop
   29030:	0002ef24 	.word	0x0002ef24
   29034:	00036187 	.word	0x00036187
   29038:	00036182 	.word	0x00036182
   2903c:	0003632a 	.word	0x0003632a
   29040:	00036320 	.word	0x00036320
   29044:	00036341 	.word	0x00036341
   29048:	00035586 	.word	0x00035586
   2904c:	00029051 	.word	0x00029051

00029050 <route_cb>:
{
   29050:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (entry->iface != iface) {
   29054:	684b      	ldr	r3, [r1, #4]
   29056:	68c2      	ldr	r2, [r0, #12]
   29058:	429a      	cmp	r2, r3
{
   2905a:	4604      	mov	r4, r0
	if (entry->iface != iface) {
   2905c:	d142      	bne.n	290e4 <route_cb+0x94>
	const struct shell *shell = data->shell;
   2905e:	680d      	ldr	r5, [r1, #0]
	PR("IPv6 prefix : %s/%d\n", net_sprint_ipv6_addr(&entry->addr),
   29060:	f100 0110 	add.w	r1, r0, #16
   29064:	200a      	movs	r0, #10
   29066:	f7fa f86f 	bl	23148 <net_sprint_addr>
   2906a:	f894 3020 	ldrb.w	r3, [r4, #32]
   2906e:	9300      	str	r3, [sp, #0]
   29070:	4a1e      	ldr	r2, [pc, #120]	; (290ec <route_cb+0x9c>)
   29072:	4603      	mov	r3, r0
   29074:	2100      	movs	r1, #0
   29076:	4628      	mov	r0, r5
   29078:	f7da fb72 	bl	3760 <shell_fprintf>
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   2907c:	6864      	ldr	r4, [r4, #4]
   2907e:	2600      	movs	r6, #0
   29080:	b1cc      	cbz	r4, 290b6 <route_cb+0x66>
		PR("\tneighbor : %p\t", nexthop_route->nbr);
   29082:	4f1b      	ldr	r7, [pc, #108]	; (290f0 <route_cb+0xa0>)
   29084:	f8df 8074 	ldr.w	r8, [pc, #116]	; 290fc <route_cb+0xac>
			PR("addr : %s\n", net_sprint_ll_addr(lladdr->addr,
   29088:	f8df 9074 	ldr.w	r9, [pc, #116]	; 29100 <route_cb+0xb0>
		if (!nexthop_route->nbr) {
   2908c:	6863      	ldr	r3, [r4, #4]
   2908e:	b173      	cbz	r3, 290ae <route_cb+0x5e>
		PR("\tneighbor : %p\t", nexthop_route->nbr);
   29090:	4628      	mov	r0, r5
   29092:	463a      	mov	r2, r7
   29094:	2100      	movs	r1, #0
   29096:	f7da fb63 	bl	3760 <shell_fprintf>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   2909a:	6863      	ldr	r3, [r4, #4]
   2909c:	7858      	ldrb	r0, [r3, #1]
   2909e:	28ff      	cmp	r0, #255	; 0xff
   290a0:	d111      	bne.n	290c6 <route_cb+0x76>
			PR("addr : <unknown>\n");
   290a2:	4a14      	ldr	r2, [pc, #80]	; (290f4 <route_cb+0xa4>)
   290a4:	2100      	movs	r1, #0
   290a6:	4628      	mov	r0, r5
   290a8:	f7da fb5a 	bl	3760 <shell_fprintf>
		count++;
   290ac:	3601      	adds	r6, #1
   290ae:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   290b0:	2c00      	cmp	r4, #0
   290b2:	d1eb      	bne.n	2908c <route_cb+0x3c>
	if (count == 0) {
   290b4:	b9b6      	cbnz	r6, 290e4 <route_cb+0x94>
		PR("\t<none>\n");
   290b6:	4a10      	ldr	r2, [pc, #64]	; (290f8 <route_cb+0xa8>)
   290b8:	2100      	movs	r1, #0
   290ba:	4628      	mov	r0, r5
}
   290bc:	b003      	add	sp, #12
   290be:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		PR("\t<none>\n");
   290c2:	f7da bb4d 	b.w	3760 <shell_fprintf>
			lladdr = net_nbr_get_lladdr(nexthop_route->nbr->idx);
   290c6:	f7fb fe85 	bl	24dd4 <net_nbr_get_lladdr>
   290ca:	4642      	mov	r2, r8
   290cc:	7841      	ldrb	r1, [r0, #1]
   290ce:	2318      	movs	r3, #24
   290d0:	3002      	adds	r0, #2
   290d2:	f7f9 ff36 	bl	22f42 <net_sprint_ll_addr_buf>
			PR("addr : %s\n", net_sprint_ll_addr(lladdr->addr,
   290d6:	464a      	mov	r2, r9
   290d8:	4603      	mov	r3, r0
   290da:	2100      	movs	r1, #0
   290dc:	4628      	mov	r0, r5
   290de:	f7da fb3f 	bl	3760 <shell_fprintf>
   290e2:	e7e3      	b.n	290ac <route_cb+0x5c>
}
   290e4:	b003      	add	sp, #12
   290e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   290ea:	bf00      	nop
   290ec:	0003644c 	.word	0x0003644c
   290f0:	00036461 	.word	0x00036461
   290f4:	00036471 	.word	0x00036471
   290f8:	00036226 	.word	0x00036226
   290fc:	200028e4 	.word	0x200028e4
   29100:	000361dc 	.word	0x000361dc

00029104 <cmd_net_arp>:
{
   29104:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   29106:	6883      	ldr	r3, [r0, #8]
   29108:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   2910c:	f3c4 0440 	ubfx	r4, r4, #1, #1
   29110:	b11c      	cbz	r4, 2911a <cmd_net_arp+0x16>
}
   29112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29116:	f7fe bfff 	b.w	28118 <cmd_net_allocs.part.26>
	PR_INFO("Enable CONFIG_NET_ARP, CONFIG_NET_IPV4 and "
   2911a:	4a03      	ldr	r2, [pc, #12]	; (29128 <cmd_net_arp+0x24>)
   2911c:	2103      	movs	r1, #3
   2911e:	f7da fb1f 	bl	3760 <shell_fprintf>
}
   29122:	4620      	mov	r0, r4
   29124:	bd10      	pop	{r4, pc}
   29126:	bf00      	nop
   29128:	000356dd 	.word	0x000356dd

0002912c <nbr_cb>:
{
   2912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int *count = data->user_data;
   29130:	e9d1 8900 	ldrd	r8, r9, [r1]
	if (*count == 0) {
   29134:	f8d9 1000 	ldr.w	r1, [r9]
{
   29138:	b091      	sub	sp, #68	; 0x44
   2913a:	4604      	mov	r4, r0
	if (*count == 0) {
   2913c:	b921      	cbnz	r1, 29148 <nbr_cb+0x1c>
		PR("     Neighbor   Interface        Flags State     "
   2913e:	4b36      	ldr	r3, [pc, #216]	; (29218 <nbr_cb+0xec>)
   29140:	4a36      	ldr	r2, [pc, #216]	; (2921c <nbr_cb+0xf0>)
   29142:	4640      	mov	r0, r8
   29144:	f7da fb0c 	bl	3760 <shell_fprintf>
	(*count)++;
   29148:	f8d9 3000 	ldr.w	r3, [r9]
		state_pad = "    ";
   2914c:	4d32      	ldr	r5, [pc, #200]	; (29218 <nbr_cb+0xec>)
	(*count)++;
   2914e:	3301      	adds	r3, #1
   29150:	f8c9 3000 	str.w	r3, [r9]
	state_str = net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state);
   29154:	68e3      	ldr	r3, [r4, #12]
   29156:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
   2915a:	f7fc fbaf 	bl	258bc <net_ipv6_nbr_state2str>
   2915e:	4683      	mov	fp, r0
	if (strlen(state_str) == 5) {
   29160:	f7dd fd3c 	bl	6bdc <strlen>
		state_pad = "    ";
   29164:	4b2e      	ldr	r3, [pc, #184]	; (29220 <nbr_cb+0xf4>)
   29166:	2805      	cmp	r0, #5
   29168:	bf08      	it	eq
   2916a:	461d      	moveq	r5, r3
	remaining = net_ipv6_nbr_data(nbr)->reachable +
   2916c:	68e3      	ldr	r3, [r4, #12]
   2916e:	e9d3 6706 	ldrd	r6, r7, [r3, #24]
		    net_ipv6_nbr_data(nbr)->reachable_timeout -
   29172:	6a1a      	ldr	r2, [r3, #32]
	remaining = net_ipv6_nbr_data(nbr)->reachable +
   29174:	18b0      	adds	r0, r6, r2
   29176:	eb47 71e2 	adc.w	r1, r7, r2, asr #31
   2917a:	4606      	mov	r6, r0
   2917c:	460f      	mov	r7, r1
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   2917e:	f005 fc3b 	bl	2e9f8 <_impl_k_uptime_get>
	PR("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   29182:	68a3      	ldr	r3, [r4, #8]
   29184:	930c      	str	r3, [sp, #48]	; 0x30
   29186:	68e3      	ldr	r3, [r4, #12]
   29188:	f8d9 9000 	ldr.w	r9, [r9]
   2918c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   2918e:	920d      	str	r2, [sp, #52]	; 0x34
	remaining = net_ipv6_nbr_data(nbr)->reachable +
   29190:	1a36      	subs	r6, r6, r0
	PR("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   29192:	7822      	ldrb	r2, [r4, #0]
   29194:	7860      	ldrb	r0, [r4, #1]
   29196:	920e      	str	r2, [sp, #56]	; 0x38
	remaining = net_ipv6_nbr_data(nbr)->reachable +
   29198:	eb67 0701 	sbc.w	r7, r7, r1
   2919c:	2e00      	cmp	r6, #0
	PR("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   2919e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
   291a2:	f893 a035 	ldrb.w	sl, [r3, #53]	; 0x35
   291a6:	920f      	str	r2, [sp, #60]	; 0x3c
   291a8:	f177 0300 	sbcs.w	r3, r7, #0
   291ac:	bfb8      	it	lt
   291ae:	2600      	movlt	r6, #0
   291b0:	28ff      	cmp	r0, #255	; 0xff
   291b2:	d02e      	beq.n	29212 <nbr_cb+0xe6>
   291b4:	f7fb fe0e 	bl	24dd4 <net_nbr_get_lladdr>
   291b8:	4607      	mov	r7, r0
   291ba:	7860      	ldrb	r0, [r4, #1]
   291bc:	f7fb fe0a 	bl	24dd4 <net_nbr_get_lladdr>
   291c0:	2318      	movs	r3, #24
   291c2:	7841      	ldrb	r1, [r0, #1]
   291c4:	4a17      	ldr	r2, [pc, #92]	; (29224 <nbr_cb+0xf8>)
   291c6:	1cb8      	adds	r0, r7, #2
   291c8:	f7f9 febb 	bl	22f42 <net_sprint_ll_addr_buf>
   291cc:	4607      	mov	r7, r0
   291ce:	7860      	ldrb	r0, [r4, #1]
   291d0:	f7fb fe00 	bl	24dd4 <net_nbr_get_lladdr>
   291d4:	68e1      	ldr	r1, [r4, #12]
   291d6:	200a      	movs	r0, #10
   291d8:	3104      	adds	r1, #4
   291da:	f7f9 ffb5 	bl	23148 <net_sprint_addr>
   291de:	4b0e      	ldr	r3, [pc, #56]	; (29218 <nbr_cb+0xec>)
   291e0:	900b      	str	r0, [sp, #44]	; 0x2c
   291e2:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
   291e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   291e8:	9304      	str	r3, [sp, #16]
   291ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   291ec:	9303      	str	r3, [sp, #12]
   291ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   291f0:	9302      	str	r3, [sp, #8]
   291f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   291f4:	4a0c      	ldr	r2, [pc, #48]	; (29228 <nbr_cb+0xfc>)
   291f6:	e9cd 4300 	strd	r4, r3, [sp]
   291fa:	e9cd 5607 	strd	r5, r6, [sp, #28]
   291fe:	e9cd ab05 	strd	sl, fp, [sp, #20]
   29202:	464b      	mov	r3, r9
   29204:	2100      	movs	r1, #0
   29206:	4640      	mov	r0, r8
   29208:	f7da faaa 	bl	3760 <shell_fprintf>
}
   2920c:	b011      	add	sp, #68	; 0x44
   2920e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	PR("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   29212:	4f06      	ldr	r7, [pc, #24]	; (2922c <nbr_cb+0x100>)
   29214:	e7db      	b.n	291ce <nbr_cb+0xa2>
   29216:	bf00      	nop
   29218:	0002f21b 	.word	0x0002f21b
   2921c:	00036377 	.word	0x00036377
   29220:	00036370 	.word	0x00036370
   29224:	200028e4 	.word	0x200028e4
   29228:	000363cd 	.word	0x000363cd
   2922c:	00036375 	.word	0x00036375

00029230 <address_lifetime_cb>:
{
   29230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29234:	e9d0 3700 	ldrd	r3, r7, [r0]
	if (net_if_l2(iface) == &NET_L2_GET_NAME(BLUETOOTH)) {
   29238:	685a      	ldr	r2, [r3, #4]
		*extra = "==============";
   2923a:	4b4f      	ldr	r3, [pc, #316]	; (29378 <address_lifetime_cb+0x148>)
	const struct shell *shell = data->shell;
   2923c:	680e      	ldr	r6, [r1, #0]
		*extra = "==============";
   2923e:	4c4f      	ldr	r4, [pc, #316]	; (2937c <address_lifetime_cb+0x14c>)
   29240:	429a      	cmp	r2, r3
   29242:	4b4f      	ldr	r3, [pc, #316]	; (29380 <address_lifetime_cb+0x150>)
   29244:	4a4f      	ldr	r2, [pc, #316]	; (29384 <address_lifetime_cb+0x154>)
{
   29246:	b08b      	sub	sp, #44	; 0x2c
		*extra = "==============";
   29248:	bf18      	it	ne
   2924a:	461c      	movne	r4, r3
   2924c:	4b4e      	ldr	r3, [pc, #312]	; (29388 <address_lifetime_cb+0x158>)
   2924e:	bf18      	it	ne
   29250:	4613      	movne	r3, r2
	PR("\nIPv6 addresses for interface %p (%s)\n", iface,
   29252:	9300      	str	r3, [sp, #0]
   29254:	4a4d      	ldr	r2, [pc, #308]	; (2938c <address_lifetime_cb+0x15c>)
   29256:	4603      	mov	r3, r0
   29258:	2100      	movs	r1, #0
{
   2925a:	4682      	mov	sl, r0
	PR("\nIPv6 addresses for interface %p (%s)\n", iface,
   2925c:	4630      	mov	r0, r6
   2925e:	f7da fa7f 	bl	3760 <shell_fprintf>
	PR("==========================================%s\n", extra);
   29262:	4623      	mov	r3, r4
   29264:	4a4a      	ldr	r2, [pc, #296]	; (29390 <address_lifetime_cb+0x160>)
   29266:	2100      	movs	r1, #0
   29268:	4630      	mov	r0, r6
   2926a:	f7da fa79 	bl	3760 <shell_fprintf>
	if (!ipv6) {
   2926e:	b93f      	cbnz	r7, 29280 <address_lifetime_cb+0x50>
		PR("No IPv6 config found for this interface.\n");
   29270:	4a48      	ldr	r2, [pc, #288]	; (29394 <address_lifetime_cb+0x164>)
   29272:	4639      	mov	r1, r7
   29274:	4630      	mov	r0, r6
   29276:	f7da fa73 	bl	3760 <shell_fprintf>
}
   2927a:	b00b      	add	sp, #44	; 0x2c
   2927c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	PR("Type      \tState    \tLifetime (sec)\tAddress\n");
   29280:	4a45      	ldr	r2, [pc, #276]	; (29398 <address_lifetime_cb+0x168>)
   29282:	2100      	movs	r1, #0
   29284:	4630      	mov	r0, r6
   29286:	f7da fa6b 	bl	3760 <shell_fprintf>
   2928a:	1d3c      	adds	r4, r7, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2928c:	2500      	movs	r5, #0
		if (!ipv6->unicast[i].is_used ||
   2928e:	2348      	movs	r3, #72	; 0x48
   29290:	fb03 7305 	mla	r3, r3, r5, r7
   29294:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   29298:	079b      	lsls	r3, r3, #30
   2929a:	d547      	bpl.n	2932c <address_lifetime_cb+0xfc>
   2929c:	f834 3c04 	ldrh.w	r3, [r4, #-4]
   292a0:	2b0a      	cmp	r3, #10
   292a2:	d143      	bne.n	2932c <address_lifetime_cb+0xfc>
			(u64_t)ipv6->unicast[i].lifetime.wrap_counter *
   292a4:	e9d4 9206 	ldrd	r9, r2, [r4, #24]
   292a8:	9204      	str	r2, [sp, #16]
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   292aa:	f005 fb8f 	bl	2e9cc <_impl_k_uptime_get_32>
			(u64_t)time_diff(k_uptime_get_32(),
   292ae:	6963      	ldr	r3, [r4, #20]
   292b0:	9305      	str	r3, [sp, #20]
   292b2:	4680      	mov	r8, r0
		prefix = net_if_ipv6_prefix_get(iface,
   292b4:	4621      	mov	r1, r4
   292b6:	4650      	mov	r0, sl
   292b8:	f7f8 fab6 	bl	21828 <net_if_ipv6_prefix_get>
		if (prefix) {
   292bc:	9a04      	ldr	r2, [sp, #16]
   292be:	2800      	cmp	r0, #0
   292c0:	d03a      	beq.n	29338 <address_lifetime_cb+0x108>
			prefix_len = prefix->len;
   292c2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
			prefix_len = 128;
   292c6:	9304      	str	r3, [sp, #16]
		if (ipv6->unicast[i].is_infinite) {
   292c8:	2148      	movs	r1, #72	; 0x48
   292ca:	fb01 7105 	mla	r1, r1, r5, r7
   292ce:	f10d 0b1c 	add.w	fp, sp, #28
   292d2:	f891 1047 	ldrb.w	r1, [r1, #71]	; 0x47
   292d6:	f011 0f01 	tst.w	r1, #1
   292da:	d02f      	beq.n	2933c <address_lifetime_cb+0x10c>
			snprintk(remaining_str, sizeof(remaining_str) - 1,
   292dc:	4a2f      	ldr	r2, [pc, #188]	; (2939c <address_lifetime_cb+0x16c>)
   292de:	210b      	movs	r1, #11
   292e0:	4658      	mov	r0, fp
   292e2:	f7d8 f8dd 	bl	14a0 <snprintk>
		PR("%s  \t%s\t%s    \t%s/%d\n",
   292e6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   292ea:	2b04      	cmp	r3, #4
   292ec:	bf96      	itet	ls
   292ee:	4a2c      	ldrls	r2, [pc, #176]	; (293a0 <address_lifetime_cb+0x170>)
   292f0:	f8df 80c0 	ldrhi.w	r8, [pc, #192]	; 293b4 <address_lifetime_cb+0x184>
   292f4:	f852 8023 	ldrls.w	r8, [r2, r3, lsl #2]
   292f8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
   292fc:	3201      	adds	r2, #1
   292fe:	b2d2      	uxtb	r2, r2
   29300:	2a03      	cmp	r2, #3
   29302:	bf96      	itet	ls
   29304:	4b27      	ldrls	r3, [pc, #156]	; (293a4 <address_lifetime_cb+0x174>)
	switch (addr_state) {
   29306:	f8df 90b0 	ldrhi.w	r9, [pc, #176]	; 293b8 <address_lifetime_cb+0x188>
   2930a:	f853 9022 	ldrls.w	r9, [r3, r2, lsl #2]
		PR("%s  \t%s\t%s    \t%s/%d\n",
   2930e:	4621      	mov	r1, r4
   29310:	200a      	movs	r0, #10
   29312:	f7f9 ff19 	bl	23148 <net_sprint_addr>
   29316:	9b04      	ldr	r3, [sp, #16]
   29318:	4a23      	ldr	r2, [pc, #140]	; (293a8 <address_lifetime_cb+0x178>)
   2931a:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2931e:	e9cd 9b00 	strd	r9, fp, [sp]
   29322:	4643      	mov	r3, r8
   29324:	2100      	movs	r1, #0
   29326:	4630      	mov	r0, r6
   29328:	f7da fa1a 	bl	3760 <shell_fprintf>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2932c:	3501      	adds	r5, #1
   2932e:	2d03      	cmp	r5, #3
   29330:	f104 0448 	add.w	r4, r4, #72	; 0x48
   29334:	d1ab      	bne.n	2928e <address_lifetime_cb+0x5e>
   29336:	e7a0      	b.n	2927a <address_lifetime_cb+0x4a>
			prefix_len = 128;
   29338:	2380      	movs	r3, #128	; 0x80
   2933a:	e7c4      	b.n	292c6 <address_lifetime_cb+0x96>
		remaining = (u64_t)ipv6->unicast[i].lifetime.timer_timeout +
   2933c:	4648      	mov	r0, r9
   2933e:	4b1b      	ldr	r3, [pc, #108]	; (293ac <address_lifetime_cb+0x17c>)
   29340:	17c1      	asrs	r1, r0, #31
   29342:	fbc3 0102 	smlal	r0, r1, r3, r2
	return (u32_t)abs((s32_t)time1 - (s32_t)time2);
   29346:	9b05      	ldr	r3, [sp, #20]
   29348:	eba8 0803 	sub.w	r8, r8, r3
   2934c:	f1b8 0f00 	cmp.w	r8, #0
   29350:	bfb8      	it	lt
   29352:	f1c8 0800 	rsblt	r8, r8, #0
				 "%u", (u32_t)(remaining / 1000));
   29356:	ebb0 0008 	subs.w	r0, r0, r8
   2935a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2935e:	f04f 0300 	mov.w	r3, #0
   29362:	f161 0100 	sbc.w	r1, r1, #0
   29366:	f7d6 ffa5 	bl	2b4 <__aeabi_uldivmod>
			snprintk(remaining_str, sizeof(remaining_str) - 1,
   2936a:	4a11      	ldr	r2, [pc, #68]	; (293b0 <address_lifetime_cb+0x180>)
   2936c:	4603      	mov	r3, r0
   2936e:	210b      	movs	r1, #11
   29370:	4658      	mov	r0, fp
   29372:	f7d8 f895 	bl	14a0 <snprintk>
   29376:	e7b6      	b.n	292e6 <address_lifetime_cb+0xb6>
   29378:	0002ef24 	.word	0x0002ef24
   2937c:	00036187 	.word	0x00036187
   29380:	00036182 	.word	0x00036182
   29384:	0003632a 	.word	0x0003632a
   29388:	00036320 	.word	0x00036320
   2938c:	0003555c 	.word	0x0003555c
   29390:	00035583 	.word	0x00035583
   29394:	000355b1 	.word	0x000355b1
   29398:	000355db 	.word	0x000355db
   2939c:	000361a1 	.word	0x000361a1
   293a0:	000354f4 	.word	0x000354f4
   293a4:	00035508 	.word	0x00035508
   293a8:	00035608 	.word	0x00035608
   293ac:	7fffff9b 	.word	0x7fffff9b
   293b0:	00033936 	.word	0x00033936
   293b4:	00036191 	.word	0x00036191
   293b8:	0003530e 	.word	0x0003530e

000293bc <context_info>:
{
   293bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   293be:	4607      	mov	r7, r0
	struct ctx_info *info = data->user_data;
   293c0:	e9d1 6400 	ldrd	r6, r4, [r1]
	if (!net_context_is_used(context)) {
   293c4:	f7fe fc40 	bl	27c48 <net_context_is_used>
   293c8:	b158      	cbz	r0, 293e2 <context_info+0x26>
	if (context->tx_slab) {
   293ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   293cc:	b1fb      	cbz	r3, 2940e <context_info+0x52>
		slab = context->tx_slab();
   293ce:	4798      	blx	r3
   293d0:	f104 0308 	add.w	r3, r4, #8
   293d4:	4605      	mov	r5, r0
   293d6:	f104 021c 	add.w	r2, r4, #28
		if (slab) {
   293da:	b125      	cbz	r5, 293e6 <context_info+0x2a>
			if (info->tx_slabs[i] == slab) {
   293dc:	6819      	ldr	r1, [r3, #0]
   293de:	428d      	cmp	r5, r1
   293e0:	d104      	bne.n	293ec <context_info+0x30>
}
   293e2:	b003      	add	sp, #12
   293e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (info->data_pools[i] == pool) {
   293e6:	6959      	ldr	r1, [r3, #20]
   293e8:	2900      	cmp	r1, #0
   293ea:	d0fa      	beq.n	293e2 <context_info+0x26>
   293ec:	3304      	adds	r3, #4
	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   293ee:	429a      	cmp	r2, r3
   293f0:	d1f3      	bne.n	293da <context_info+0x1e>
		PR("%p\t%d\tETX\n", slab, slab->num_blocks);
   293f2:	68ab      	ldr	r3, [r5, #8]
   293f4:	9300      	str	r3, [sp, #0]
   293f6:	4a16      	ldr	r2, [pc, #88]	; (29450 <context_info+0x94>)
   293f8:	462b      	mov	r3, r5
   293fa:	2100      	movs	r1, #0
   293fc:	4630      	mov	r0, r6
   293fe:	f7da f9af 	bl	3760 <shell_fprintf>
		info->are_external_pools = true;
   29402:	2301      	movs	r3, #1
   29404:	7123      	strb	r3, [r4, #4]
		info->tx_slabs[info->pos] = slab;
   29406:	6823      	ldr	r3, [r4, #0]
   29408:	3302      	adds	r3, #2
   2940a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
	if (context->data_pool) {
   2940e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29410:	b1cb      	cbz	r3, 29446 <context_info+0x8a>
		pool = context->data_pool();
   29412:	4798      	blx	r3
   29414:	f104 031c 	add.w	r3, r4, #28
   29418:	4605      	mov	r5, r0
   2941a:	f104 0230 	add.w	r2, r4, #48	; 0x30
			if (info->data_pools[i] == pool) {
   2941e:	f853 1b04 	ldr.w	r1, [r3], #4
   29422:	428d      	cmp	r5, r1
   29424:	d0dd      	beq.n	293e2 <context_info+0x26>
	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   29426:	429a      	cmp	r2, r3
   29428:	d1f9      	bne.n	2941e <context_info+0x62>
		PR("%p\t%d\tEDATA\n", pool, pool->buf_count);
   2942a:	8a2b      	ldrh	r3, [r5, #16]
   2942c:	9300      	str	r3, [sp, #0]
   2942e:	4a09      	ldr	r2, [pc, #36]	; (29454 <context_info+0x98>)
   29430:	462b      	mov	r3, r5
   29432:	2100      	movs	r1, #0
   29434:	4630      	mov	r0, r6
   29436:	f7da f993 	bl	3760 <shell_fprintf>
		info->are_external_pools = true;
   2943a:	2301      	movs	r3, #1
   2943c:	7123      	strb	r3, [r4, #4]
		info->data_pools[info->pos] = pool;
   2943e:	6823      	ldr	r3, [r4, #0]
   29440:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   29444:	61dd      	str	r5, [r3, #28]
	info->pos++;
   29446:	6823      	ldr	r3, [r4, #0]
   29448:	3301      	adds	r3, #1
   2944a:	6023      	str	r3, [r4, #0]
   2944c:	e7c9      	b.n	293e2 <context_info+0x26>
   2944e:	bf00      	nop
   29450:	00036129 	.word	0x00036129
   29454:	00036134 	.word	0x00036134

00029458 <cmd_net_route>:
{
   29458:	b513      	push	{r0, r1, r4, lr}
	if (shell_help_requested(shell)) {
   2945a:	6882      	ldr	r2, [r0, #8]
   2945c:	f8d2 424c 	ldr.w	r4, [r2, #588]	; 0x24c
   29460:	f3c4 0440 	ubfx	r4, r4, #1, #1
   29464:	b13c      	cbz	r4, 29476 <cmd_net_route+0x1e>
		shell_help_print(shell, NULL, 0);
   29466:	2200      	movs	r2, #0
   29468:	4611      	mov	r1, r2
   2946a:	f7da fa7d 	bl	3968 <shell_help_print>
   2946e:	f06f 0007 	mvn.w	r0, #7
}
   29472:	b002      	add	sp, #8
   29474:	bd10      	pop	{r4, pc}
	user_data.shell = shell;
   29476:	a902      	add	r1, sp, #8
   29478:	f841 0d08 	str.w	r0, [r1, #-8]!
	net_if_foreach(iface_per_route_cb, &user_data);
   2947c:	4802      	ldr	r0, [pc, #8]	; (29488 <cmd_net_route+0x30>)
   2947e:	f7f8 fd33 	bl	21ee8 <net_if_foreach>
	return 0;
   29482:	4620      	mov	r0, r4
   29484:	e7f5      	b.n	29472 <cmd_net_route+0x1a>
   29486:	bf00      	nop
   29488:	00028fe5 	.word	0x00028fe5

0002948c <net_shell_init>:
SHELL_CMD_REGISTER(net, &net_commands, "Networking commands", NULL);

int net_shell_init(void)
{
	return 0;
}
   2948c:	2000      	movs	r0, #0
   2948e:	4770      	bx	lr

00029490 <net_is_ipv6_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   29490:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   29492:	b942      	cbnz	r2, 294a6 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   29494:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   29496:	b933      	cbnz	r3, 294a6 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   29498:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2949a:	b922      	cbnz	r2, 294a6 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   2949c:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2949e:	fab0 f080 	clz	r0, r0
   294a2:	0940      	lsrs	r0, r0, #5
   294a4:	4770      	bx	lr
   294a6:	2000      	movs	r0, #0
   294a8:	4770      	bx	lr

000294aa <check_addr>:
	return pkt->family;
   294aa:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   294ae:	b510      	push	{r4, lr}
   294b0:	460c      	mov	r4, r1
	if (addr->sa_family != net_pkt_family(pkt)) {
   294b2:	8809      	ldrh	r1, [r1, #0]
   294b4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   294b8:	4299      	cmp	r1, r3
   294ba:	d116      	bne.n	294ea <check_addr+0x40>
		return false;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   294bc:	2b0a      	cmp	r3, #10
   294be:	d116      	bne.n	294ee <check_addr+0x44>
   294c0:	290a      	cmp	r1, #10
   294c2:	d114      	bne.n	294ee <check_addr+0x44>
   294c4:	6943      	ldr	r3, [r0, #20]
   294c6:	6899      	ldr	r1, [r3, #8]
		struct in6_addr *addr6;

		if (is_remote) {
   294c8:	b16a      	cbz	r2, 294e6 <check_addr+0x3c>
			addr6 = &NET_IPV6_HDR(pkt)->src;
   294ca:	3108      	adds	r1, #8
		} else {
			addr6 = &NET_IPV6_HDR(pkt)->dst;
		}

		if (!net_is_ipv6_addr_unspecified(
			    &net_sin6(addr)->sin6_addr)) {
   294cc:	3404      	adds	r4, #4
		if (!net_is_ipv6_addr_unspecified(
   294ce:	4620      	mov	r0, r4
   294d0:	f7ff ffde 	bl	29490 <net_is_ipv6_addr_unspecified>
   294d4:	b930      	cbnz	r0, 294e4 <check_addr+0x3a>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   294d6:	2210      	movs	r2, #16
   294d8:	4620      	mov	r0, r4
   294da:	f7dd fbae 	bl	6c3a <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   294de:	fab0 f080 	clz	r0, r0
   294e2:	0940      	lsrs	r0, r0, #5
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
}
   294e4:	bd10      	pop	{r4, pc}
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   294e6:	3118      	adds	r1, #24
   294e8:	e7f0      	b.n	294cc <check_addr+0x22>
		return false;
   294ea:	2000      	movs	r0, #0
   294ec:	e7fa      	b.n	294e4 <check_addr+0x3a>
	return true;
   294ee:	2001      	movs	r0, #1
   294f0:	e7f8      	b.n	294e4 <check_addr+0x3a>
	...

000294f4 <net_conn_unregister>:
{
   294f4:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   294f6:	4b0b      	ldr	r3, [pc, #44]	; (29524 <net_conn_unregister+0x30>)
   294f8:	4298      	cmp	r0, r3
   294fa:	d30c      	bcc.n	29516 <net_conn_unregister+0x22>
   294fc:	33f0      	adds	r3, #240	; 0xf0
   294fe:	4298      	cmp	r0, r3
   29500:	d809      	bhi.n	29516 <net_conn_unregister+0x22>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   29502:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   29506:	07db      	lsls	r3, r3, #31
   29508:	d508      	bpl.n	2951c <net_conn_unregister+0x28>
	(void)memset(conn, 0, sizeof(*conn));
   2950a:	223c      	movs	r2, #60	; 0x3c
   2950c:	2100      	movs	r1, #0
   2950e:	f7dd fbe8 	bl	6ce2 <memset>
	return 0;
   29512:	2000      	movs	r0, #0
}
   29514:	bd08      	pop	{r3, pc}
		return -EINVAL;
   29516:	f06f 0015 	mvn.w	r0, #21
   2951a:	e7fb      	b.n	29514 <net_conn_unregister+0x20>
		return -ENOENT;
   2951c:	f06f 0001 	mvn.w	r0, #1
   29520:	e7f8      	b.n	29514 <net_conn_unregister+0x20>
   29522:	bf00      	nop
   29524:	20002a18 	.word	0x20002a18

00029528 <net_conn_register>:
{
   29528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2952c:	b087      	sub	sp, #28
   2952e:	f8df 8264 	ldr.w	r8, [pc, #612]	; 29794 <net_conn_register+0x26c>
   29532:	9301      	str	r3, [sp, #4]
   29534:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   29538:	9302      	str	r3, [sp, #8]
   2953a:	9b01      	ldr	r3, [sp, #4]
   2953c:	ba5b      	rev16	r3, r3
   2953e:	f8ad 300e 	strh.w	r3, [sp, #14]
   29542:	b29b      	uxth	r3, r3
   29544:	9304      	str	r3, [sp, #16]
   29546:	9b02      	ldr	r3, [sp, #8]
   29548:	fa93 fb93 	rev16.w	fp, r3
   2954c:	fa1f f38b 	uxth.w	r3, fp
   29550:	4682      	mov	sl, r0
   29552:	460e      	mov	r6, r1
   29554:	4617      	mov	r7, r2
   29556:	9305      	str	r3, [sp, #20]
   29558:	2400      	movs	r4, #0
   2955a:	f108 0904 	add.w	r9, r8, #4
   2955e:	eb08 0504 	add.w	r5, r8, r4
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   29562:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   29566:	07da      	lsls	r2, r3, #31
   29568:	d416      	bmi.n	29598 <net_conn_register+0x70>
   2956a:	343c      	adds	r4, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2956c:	2cf0      	cmp	r4, #240	; 0xf0
   2956e:	d1f6      	bne.n	2955e <net_conn_register+0x36>
   29570:	4988      	ldr	r1, [pc, #544]	; (29794 <net_conn_register+0x26c>)
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   29572:	2400      	movs	r4, #0
   29574:	223c      	movs	r2, #60	; 0x3c
   29576:	fb02 f904 	mul.w	r9, r2, r4
   2957a:	eb01 0809 	add.w	r8, r1, r9
		if (conns[i].flags & NET_CONN_IN_USE) {
   2957e:	f898 3039 	ldrb.w	r3, [r8, #57]	; 0x39
   29582:	f013 0301 	ands.w	r3, r3, #1
   29586:	d05b      	beq.n	29640 <net_conn_register+0x118>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   29588:	3401      	adds	r4, #1
   2958a:	2c04      	cmp	r4, #4
   2958c:	d1f3      	bne.n	29576 <net_conn_register+0x4e>
	return -ENOENT;
   2958e:	f06f 0001 	mvn.w	r0, #1
}
   29592:	b007      	add	sp, #28
   29594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conns[i].proto != proto) {
   29598:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
   2959c:	4552      	cmp	r2, sl
   2959e:	d1e4      	bne.n	2956a <net_conn_register+0x42>
   295a0:	f003 0302 	and.w	r3, r3, #2
		if (remote_addr) {
   295a4:	b1be      	cbz	r6, 295d6 <net_conn_register+0xae>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   295a6:	2b00      	cmp	r3, #0
   295a8:	d0df      	beq.n	2956a <net_conn_register+0x42>
			if (remote_addr->sa_family == AF_INET6 &&
   295aa:	8833      	ldrh	r3, [r6, #0]
   295ac:	2b0a      	cmp	r3, #10
   295ae:	d1dc      	bne.n	2956a <net_conn_register+0x42>
   295b0:	f834 3008 	ldrh.w	r3, [r4, r8]
   295b4:	2b0a      	cmp	r3, #10
   295b6:	d1d8      	bne.n	2956a <net_conn_register+0x42>
   295b8:	2210      	movs	r2, #16
   295ba:	eb09 0104 	add.w	r1, r9, r4
   295be:	1d30      	adds	r0, r6, #4
   295c0:	f7dd fb3b 	bl	6c3a <memcmp>
				if (!net_ipv6_addr_cmp(
   295c4:	2800      	cmp	r0, #0
   295c6:	d1d0      	bne.n	2956a <net_conn_register+0x42>
   295c8:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   295cc:	f003 0304 	and.w	r3, r3, #4
		if (local_addr) {
   295d0:	b927      	cbnz	r7, 295dc <net_conn_register+0xb4>
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   295d2:	b19b      	cbz	r3, 295fc <net_conn_register+0xd4>
   295d4:	e7c9      	b.n	2956a <net_conn_register+0x42>
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   295d6:	2b00      	cmp	r3, #0
   295d8:	d0f6      	beq.n	295c8 <net_conn_register+0xa0>
   295da:	e7c6      	b.n	2956a <net_conn_register+0x42>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   295dc:	2b00      	cmp	r3, #0
   295de:	d0c4      	beq.n	2956a <net_conn_register+0x42>
			if (local_addr->sa_family == AF_INET6 &&
   295e0:	883b      	ldrh	r3, [r7, #0]
   295e2:	2b0a      	cmp	r3, #10
   295e4:	d1c1      	bne.n	2956a <net_conn_register+0x42>
   295e6:	8b2b      	ldrh	r3, [r5, #24]
   295e8:	2b0a      	cmp	r3, #10
   295ea:	d1be      	bne.n	2956a <net_conn_register+0x42>
   295ec:	4b6a      	ldr	r3, [pc, #424]	; (29798 <net_conn_register+0x270>)
   295ee:	2210      	movs	r2, #16
   295f0:	1919      	adds	r1, r3, r4
   295f2:	1d38      	adds	r0, r7, #4
   295f4:	f7dd fb21 	bl	6c3a <memcmp>
				if (!net_ipv6_addr_cmp(
   295f8:	2800      	cmp	r0, #0
   295fa:	d1b6      	bne.n	2956a <net_conn_register+0x42>
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   295fc:	886b      	ldrh	r3, [r5, #2]
   295fe:	9904      	ldr	r1, [sp, #16]
   29600:	428b      	cmp	r3, r1
   29602:	eb08 0204 	add.w	r2, r8, r4
   29606:	d1b0      	bne.n	2956a <net_conn_register+0x42>
		if (net_sin(&conns[i].local_addr)->sin_port !=
   29608:	8b6b      	ldrh	r3, [r5, #26]
   2960a:	9905      	ldr	r1, [sp, #20]
   2960c:	428b      	cmp	r3, r1
   2960e:	d1ac      	bne.n	2956a <net_conn_register+0x42>
		NET_ERR("Identical connection handler %p already found.",
   29610:	4b62      	ldr	r3, [pc, #392]	; (2979c <net_conn_register+0x274>)
   29612:	681b      	ldr	r3, [r3, #0]
   29614:	075b      	lsls	r3, r3, #29
   29616:	d010      	beq.n	2963a <net_conn_register+0x112>
   29618:	2101      	movs	r1, #1
   2961a:	f04f 0300 	mov.w	r3, #0
   2961e:	f361 0302 	bfi	r3, r1, #0, #3
   29622:	485f      	ldr	r0, [pc, #380]	; (297a0 <net_conn_register+0x278>)
   29624:	495f      	ldr	r1, [pc, #380]	; (297a4 <net_conn_register+0x27c>)
   29626:	1a09      	subs	r1, r1, r0
   29628:	08c9      	lsrs	r1, r1, #3
   2962a:	f36f 03c5 	bfc	r3, #3, #3
   2962e:	f361 138f 	bfi	r3, r1, #6, #10
   29632:	485d      	ldr	r0, [pc, #372]	; (297a8 <net_conn_register+0x280>)
   29634:	495d      	ldr	r1, [pc, #372]	; (297ac <net_conn_register+0x284>)
   29636:	f7d8 fd6d 	bl	2114 <log_2>
		return -EALREADY;
   2963a:	f06f 0044 	mvn.w	r0, #68	; 0x44
   2963e:	e7a8      	b.n	29592 <net_conn_register+0x6a>
		if (remote_addr) {
   29640:	2e00      	cmp	r6, #0
   29642:	d066      	beq.n	29712 <net_conn_register+0x1ea>
			if (remote_addr->sa_family == AF_INET6) {
   29644:	8832      	ldrh	r2, [r6, #0]
   29646:	2a0a      	cmp	r2, #10
   29648:	d14a      	bne.n	296e0 <net_conn_register+0x1b8>
				memcpy(&conns[i].remote_addr, remote_addr,
   2964a:	2218      	movs	r2, #24
   2964c:	4631      	mov	r1, r6
   2964e:	4640      	mov	r0, r8
   29650:	f7dd fb1a 	bl	6c88 <memcpy>
				if (net_is_ipv6_addr_unspecified(
   29654:	1d30      	adds	r0, r6, #4
   29656:	f7ff ff1b 	bl	29490 <net_is_ipv6_addr_unspecified>
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   2965a:	f898 3039 	ldrb.w	r3, [r8, #57]	; 0x39
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
   2965e:	2800      	cmp	r0, #0
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   29660:	f043 0302 	orr.w	r3, r3, #2
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
   29664:	bf14      	ite	ne
   29666:	2508      	movne	r5, #8
   29668:	2520      	moveq	r5, #32
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   2966a:	f888 3039 	strb.w	r3, [r8, #57]	; 0x39
		if (local_addr) {
   2966e:	2f00      	cmp	r7, #0
   29670:	d068      	beq.n	29744 <net_conn_register+0x21c>
			if (local_addr->sa_family == AF_INET6) {
   29672:	883b      	ldrh	r3, [r7, #0]
   29674:	2b0a      	cmp	r3, #10
   29676:	d151      	bne.n	2971c <net_conn_register+0x1f4>
				memcpy(&conns[i].local_addr, local_addr,
   29678:	4b46      	ldr	r3, [pc, #280]	; (29794 <net_conn_register+0x26c>)
   2967a:	9304      	str	r3, [sp, #16]
   2967c:	f109 0018 	add.w	r0, r9, #24
   29680:	4418      	add	r0, r3
   29682:	2218      	movs	r2, #24
   29684:	4639      	mov	r1, r7
   29686:	f7dd faff 	bl	6c88 <memcpy>
				if (net_is_ipv6_addr_unspecified(
   2968a:	1d38      	adds	r0, r7, #4
   2968c:	f7ff ff00 	bl	29490 <net_is_ipv6_addr_unspecified>
   29690:	9b04      	ldr	r3, [sp, #16]
   29692:	2800      	cmp	r0, #0
   29694:	d03f      	beq.n	29716 <net_conn_register+0x1ee>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   29696:	f045 0504 	orr.w	r5, r5, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   2969a:	223c      	movs	r2, #60	; 0x3c
   2969c:	fb02 3304 	mla	r3, r2, r4, r3
   296a0:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   296a4:	f042 0204 	orr.w	r2, r2, #4
   296a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   296ac:	2e00      	cmp	r6, #0
   296ae:	d049      	beq.n	29744 <net_conn_register+0x21c>
			if (remote_addr->sa_family != local_addr->sa_family) {
   296b0:	8832      	ldrh	r2, [r6, #0]
   296b2:	883b      	ldrh	r3, [r7, #0]
   296b4:	429a      	cmp	r2, r3
   296b6:	d045      	beq.n	29744 <net_conn_register+0x21c>
				NET_ERR("Address families different");
   296b8:	4b38      	ldr	r3, [pc, #224]	; (2979c <net_conn_register+0x274>)
   296ba:	681b      	ldr	r3, [r3, #0]
   296bc:	075a      	lsls	r2, r3, #29
   296be:	d013      	beq.n	296e8 <net_conn_register+0x1c0>
   296c0:	2301      	movs	r3, #1
   296c2:	f04f 0200 	mov.w	r2, #0
   296c6:	f363 0202 	bfi	r2, r3, #0, #3
   296ca:	4935      	ldr	r1, [pc, #212]	; (297a0 <net_conn_register+0x278>)
   296cc:	4b35      	ldr	r3, [pc, #212]	; (297a4 <net_conn_register+0x27c>)
   296ce:	4838      	ldr	r0, [pc, #224]	; (297b0 <net_conn_register+0x288>)
   296d0:	1a5b      	subs	r3, r3, r1
   296d2:	f36f 02c5 	bfc	r2, #3, #3
   296d6:	08db      	lsrs	r3, r3, #3
   296d8:	f363 128f 	bfi	r2, r3, #6, #10
   296dc:	4933      	ldr	r1, [pc, #204]	; (297ac <net_conn_register+0x284>)
   296de:	e015      	b.n	2970c <net_conn_register+0x1e4>
				NET_ERR("Remote address family not set");
   296e0:	4a2e      	ldr	r2, [pc, #184]	; (2979c <net_conn_register+0x274>)
   296e2:	6812      	ldr	r2, [r2, #0]
   296e4:	0750      	lsls	r0, r2, #29
   296e6:	d102      	bne.n	296ee <net_conn_register+0x1c6>
				return -EINVAL;
   296e8:	f06f 0015 	mvn.w	r0, #21
   296ec:	e751      	b.n	29592 <net_conn_register+0x6a>
				NET_ERR("Remote address family not set");
   296ee:	2101      	movs	r1, #1
   296f0:	f04f 0200 	mov.w	r2, #0
   296f4:	f361 0202 	bfi	r2, r1, #0, #3
   296f8:	f363 02c5 	bfi	r2, r3, #3, #3
   296fc:	4928      	ldr	r1, [pc, #160]	; (297a0 <net_conn_register+0x278>)
   296fe:	4b29      	ldr	r3, [pc, #164]	; (297a4 <net_conn_register+0x27c>)
   29700:	482c      	ldr	r0, [pc, #176]	; (297b4 <net_conn_register+0x28c>)
   29702:	1a5b      	subs	r3, r3, r1
   29704:	08db      	lsrs	r3, r3, #3
   29706:	4929      	ldr	r1, [pc, #164]	; (297ac <net_conn_register+0x284>)
   29708:	f363 128f 	bfi	r2, r3, #6, #10
				NET_ERR("Address families different");
   2970c:	f7d8 fcee 	bl	20ec <log_1>
   29710:	e7ea      	b.n	296e8 <net_conn_register+0x1c0>
	u8_t rank = 0;
   29712:	4635      	mov	r5, r6
   29714:	e7ab      	b.n	2966e <net_conn_register+0x146>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   29716:	f045 0510 	orr.w	r5, r5, #16
   2971a:	e7be      	b.n	2969a <net_conn_register+0x172>
				NET_ERR("Local address family not set");
   2971c:	4b1f      	ldr	r3, [pc, #124]	; (2979c <net_conn_register+0x274>)
   2971e:	681b      	ldr	r3, [r3, #0]
   29720:	0759      	lsls	r1, r3, #29
   29722:	d0e1      	beq.n	296e8 <net_conn_register+0x1c0>
   29724:	2301      	movs	r3, #1
   29726:	f04f 0200 	mov.w	r2, #0
   2972a:	f363 0202 	bfi	r2, r3, #0, #3
   2972e:	491c      	ldr	r1, [pc, #112]	; (297a0 <net_conn_register+0x278>)
   29730:	4b1c      	ldr	r3, [pc, #112]	; (297a4 <net_conn_register+0x27c>)
   29732:	4821      	ldr	r0, [pc, #132]	; (297b8 <net_conn_register+0x290>)
   29734:	1a5b      	subs	r3, r3, r1
   29736:	f36f 02c5 	bfc	r2, #3, #3
   2973a:	08db      	lsrs	r3, r3, #3
   2973c:	f363 128f 	bfi	r2, r3, #6, #10
   29740:	491a      	ldr	r1, [pc, #104]	; (297ac <net_conn_register+0x284>)
   29742:	e7e3      	b.n	2970c <net_conn_register+0x1e4>
		if (remote_port) {
   29744:	9b01      	ldr	r3, [sp, #4]
   29746:	b12b      	cbz	r3, 29754 <net_conn_register+0x22c>
			net_sin(&conns[i].remote_addr)->sin_port =
   29748:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2974c:	f8a8 3002 	strh.w	r3, [r8, #2]
			rank |= NET_RANK_REMOTE_PORT;
   29750:	f045 0502 	orr.w	r5, r5, #2
		if (local_port) {
   29754:	9a02      	ldr	r2, [sp, #8]
   29756:	4b0f      	ldr	r3, [pc, #60]	; (29794 <net_conn_register+0x26c>)
   29758:	b122      	cbz	r2, 29764 <net_conn_register+0x23c>
			net_sin(&conns[i].local_addr)->sin_port =
   2975a:	4499      	add	r9, r3
			rank |= NET_RANK_LOCAL_PORT;
   2975c:	f045 0501 	orr.w	r5, r5, #1
			net_sin(&conns[i].local_addr)->sin_port =
   29760:	f8a9 b01a 	strh.w	fp, [r9, #26]
		conns[i].flags |= NET_CONN_IN_USE;
   29764:	223c      	movs	r2, #60	; 0x3c
   29766:	fb02 3404 	mla	r4, r2, r4, r3
   2976a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conns[i].rank = rank;
   2976e:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
		conns[i].flags |= NET_CONN_IN_USE;
   29772:	f043 0301 	orr.w	r3, r3, #1
   29776:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conns[i].cb = cb;
   2977a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2977c:	6323      	str	r3, [r4, #48]	; 0x30
		conns[i].user_data = user_data;
   2977e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   29780:	6363      	str	r3, [r4, #52]	; 0x34
		if (handle) {
   29782:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		conns[i].proto = proto;
   29784:	f884 a038 	strb.w	sl, [r4, #56]	; 0x38
		if (handle) {
   29788:	b10b      	cbz	r3, 2978e <net_conn_register+0x266>
			*handle = (struct net_conn_handle *)&conns[i];
   2978a:	f8c3 8000 	str.w	r8, [r3]
		return 0;
   2978e:	2000      	movs	r0, #0
   29790:	e6ff      	b.n	29592 <net_conn_register+0x6a>
   29792:	bf00      	nop
   29794:	20002a18 	.word	0x20002a18
   29798:	20002a34 	.word	0x20002a34
   2979c:	2000e270 	.word	0x2000e270
   297a0:	0002ef38 	.word	0x0002ef38
   297a4:	0002f020 	.word	0x0002f020
   297a8:	00036eb1 	.word	0x00036eb1
   297ac:	00036e9f 	.word	0x00036e9f
   297b0:	00036f27 	.word	0x00036f27
   297b4:	00036ee4 	.word	0x00036ee4
   297b8:	00036f06 	.word	0x00036f06

000297bc <net_conn_input>:

	return my_src_addr && (src_port == dst_port);
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   297bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   297c0:	2811      	cmp	r0, #17
{
   297c2:	b089      	sub	sp, #36	; 0x24
   297c4:	4680      	mov	r8, r0
   297c6:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   297c8:	d149      	bne.n	2985e <net_conn_input+0xa2>
		struct net_udp_hdr hdr, *udp_hdr;

		ARG_UNUSED(hdr);

		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   297ca:	a903      	add	r1, sp, #12
   297cc:	4620      	mov	r0, r4
   297ce:	f001 fea5 	bl	2b51c <net_udp_get_hdr>
		if (!udp_hdr) {
   297d2:	b908      	cbnz	r0, 297d8 <net_conn_input+0x1c>
	}

drop:
	net_stats_update_per_proto_drop(pkt_iface, proto);

	return NET_DROP;
   297d4:	2002      	movs	r0, #2
   297d6:	e072      	b.n	298be <net_conn_input+0x102>
		src_port = udp_hdr->src_port;
   297d8:	f8b0 a000 	ldrh.w	sl, [r0]
		dst_port = udp_hdr->dst_port;
   297dc:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = udp_hdr->chksum;
   297e0:	f8b0 9006 	ldrh.w	r9, [r0, #6]
	return pkt->frags->data;
   297e4:	6963      	ldr	r3, [r4, #20]
   297e6:	6898      	ldr	r0, [r3, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   297e8:	7803      	ldrb	r3, [r0, #0]
   297ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   297ee:	2b60      	cmp	r3, #96	; 0x60
   297f0:	d106      	bne.n	29800 <net_conn_input+0x44>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   297f2:	2100      	movs	r1, #0
   297f4:	3008      	adds	r0, #8
   297f6:	f7f7 fad5 	bl	20da4 <net_if_ipv6_addr_lookup>
		if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   297fa:	b108      	cbz	r0, 29800 <net_conn_input+0x44>
	if (is_invalid_packet(pkt, src_port, dst_port)) {
   297fc:	45da      	cmp	sl, fp
   297fe:	d0e9      	beq.n	297d4 <net_conn_input+0x18>
{
   29800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29804:	4d4b      	ldr	r5, [pc, #300]	; (29934 <net_conn_input+0x178>)
   29806:	2600      	movs	r6, #0
   29808:	461f      	mov	r7, r3
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   2980a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   2980e:	07d1      	lsls	r1, r2, #31
   29810:	d53c      	bpl.n	2988c <net_conn_input+0xd0>
		if (conns[i].proto != proto) {
   29812:	f895 1020 	ldrb.w	r1, [r5, #32]
   29816:	4541      	cmp	r1, r8
   29818:	d138      	bne.n	2988c <net_conn_input+0xd0>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   2981a:	f835 0c16 	ldrh.w	r0, [r5, #-22]
   2981e:	f1a5 0118 	sub.w	r1, r5, #24
   29822:	b108      	cbz	r0, 29828 <net_conn_input+0x6c>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   29824:	4550      	cmp	r0, sl
   29826:	d131      	bne.n	2988c <net_conn_input+0xd0>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   29828:	8868      	ldrh	r0, [r5, #2]
   2982a:	b108      	cbz	r0, 29830 <net_conn_input+0x74>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   2982c:	4558      	cmp	r0, fp
   2982e:	d12d      	bne.n	2988c <net_conn_input+0xd0>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   29830:	0790      	lsls	r0, r2, #30
   29832:	d423      	bmi.n	2987c <net_conn_input+0xc0>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   29834:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   29838:	0751      	lsls	r1, r2, #29
   2983a:	d507      	bpl.n	2984c <net_conn_input+0x90>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   2983c:	2200      	movs	r2, #0
   2983e:	4629      	mov	r1, r5
   29840:	4620      	mov	r0, r4
   29842:	9301      	str	r3, [sp, #4]
   29844:	f7ff fe31 	bl	294aa <check_addr>
   29848:	9b01      	ldr	r3, [sp, #4]
   2984a:	b1f8      	cbz	r0, 2988c <net_conn_input+0xd0>
		if (best_match >= 0 &&
   2984c:	1c7a      	adds	r2, r7, #1
   2984e:	d139      	bne.n	298c4 <net_conn_input+0x108>
		if (best_rank < conns[i].rank) {
   29850:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   29854:	4293      	cmp	r3, r2
			best_rank = conns[i].rank;
   29856:	bfbc      	itt	lt
   29858:	b213      	sxthlt	r3, r2
   2985a:	4637      	movlt	r7, r6
   2985c:	e016      	b.n	2988c <net_conn_input+0xd0>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   2985e:	2806      	cmp	r0, #6
   29860:	d1b8      	bne.n	297d4 <net_conn_input+0x18>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   29862:	a903      	add	r1, sp, #12
   29864:	4620      	mov	r0, r4
   29866:	f000 fddb 	bl	2a420 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   2986a:	2800      	cmp	r0, #0
   2986c:	d0b2      	beq.n	297d4 <net_conn_input+0x18>
		src_port = tcp_hdr->src_port;
   2986e:	f8b0 a000 	ldrh.w	sl, [r0]
		dst_port = tcp_hdr->dst_port;
   29872:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = tcp_hdr->chksum;
   29876:	f8b0 9010 	ldrh.w	r9, [r0, #16]
   2987a:	e7b3      	b.n	297e4 <net_conn_input+0x28>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   2987c:	2201      	movs	r2, #1
   2987e:	4620      	mov	r0, r4
   29880:	9301      	str	r3, [sp, #4]
   29882:	f7ff fe12 	bl	294aa <check_addr>
   29886:	9b01      	ldr	r3, [sp, #4]
   29888:	2800      	cmp	r0, #0
   2988a:	d1d3      	bne.n	29834 <net_conn_input+0x78>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2988c:	3601      	adds	r6, #1
   2988e:	2e04      	cmp	r6, #4
   29890:	f105 053c 	add.w	r5, r5, #60	; 0x3c
   29894:	d1b9      	bne.n	2980a <net_conn_input+0x4e>
	if (best_match >= 0) {
   29896:	1c7b      	adds	r3, r7, #1
   29898:	d038      	beq.n	2990c <net_conn_input+0x150>
		if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   2989a:	f1b8 0f11 	cmp.w	r8, #17
   2989e:	d124      	bne.n	298ea <net_conn_input+0x12e>
		    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
   298a0:	6a20      	ldr	r0, [r4, #32]
   298a2:	f7f8 fae2 	bl	21e6a <net_if_need_calc_rx_checksum>
		    proto == IPPROTO_UDP &&
   298a6:	b9a8      	cbnz	r0, 298d4 <net_conn_input+0x118>
		if (conns[best_match].cb(&conns[best_match], pkt,
   298a8:	4b23      	ldr	r3, [pc, #140]	; (29938 <net_conn_input+0x17c>)
   298aa:	203c      	movs	r0, #60	; 0x3c
   298ac:	fb00 3007 	mla	r0, r0, r7, r3
   298b0:	e9d0 320c 	ldrd	r3, r2, [r0, #48]	; 0x30
   298b4:	4621      	mov	r1, r4
   298b6:	4798      	blx	r3
   298b8:	2802      	cmp	r0, #2
   298ba:	d08b      	beq.n	297d4 <net_conn_input+0x18>
		return NET_OK;
   298bc:	2000      	movs	r0, #0
}
   298be:	b009      	add	sp, #36	; 0x24
   298c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   298c4:	491c      	ldr	r1, [pc, #112]	; (29938 <net_conn_input+0x17c>)
   298c6:	223c      	movs	r2, #60	; 0x3c
   298c8:	fb02 1207 	mla	r2, r2, r7, r1
		if (best_match >= 0 &&
   298cc:	8852      	ldrh	r2, [r2, #2]
   298ce:	2a00      	cmp	r2, #0
   298d0:	d0be      	beq.n	29850 <net_conn_input+0x94>
   298d2:	e7db      	b.n	2988c <net_conn_input+0xd0>
			net_udp_set_chksum(pkt, pkt->frags);
   298d4:	6961      	ldr	r1, [r4, #20]
   298d6:	4620      	mov	r0, r4
   298d8:	f001 fd76 	bl	2b3c8 <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   298dc:	6961      	ldr	r1, [r4, #20]
   298de:	4620      	mov	r0, r4
   298e0:	f001 fddc 	bl	2b49c <net_udp_get_chksum>
			if (chksum != chksum_calc) {
   298e4:	4548      	cmp	r0, r9
   298e6:	d0df      	beq.n	298a8 <net_conn_input+0xec>
   298e8:	e774      	b.n	297d4 <net_conn_input+0x18>
		} else if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   298ea:	f1b8 0f06 	cmp.w	r8, #6
   298ee:	d1db      	bne.n	298a8 <net_conn_input+0xec>
			   net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
   298f0:	6a20      	ldr	r0, [r4, #32]
   298f2:	f7f8 faba 	bl	21e6a <net_if_need_calc_rx_checksum>
			   proto == IPPROTO_TCP &&
   298f6:	2800      	cmp	r0, #0
   298f8:	d0d6      	beq.n	298a8 <net_conn_input+0xec>
			net_tcp_set_chksum(pkt, pkt->frags);
   298fa:	6961      	ldr	r1, [r4, #20]
   298fc:	4620      	mov	r0, r4
   298fe:	f001 f803 	bl	2a908 <net_tcp_set_chksum>
			chksum_calc = net_tcp_get_chksum(pkt, pkt->frags);
   29902:	6961      	ldr	r1, [r4, #20]
   29904:	4620      	mov	r0, r4
   29906:	f000 ffbd 	bl	2a884 <net_tcp_get_chksum>
   2990a:	e7eb      	b.n	298e4 <net_conn_input+0x128>
	return pkt->family;
   2990c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_family(pkt) == AF_INET6 &&
   29910:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   29914:	2b0a      	cmp	r3, #10
   29916:	f47f af5d 	bne.w	297d4 <net_conn_input+0x18>
	return pkt->frags->data;
   2991a:	6963      	ldr	r3, [r4, #20]
	    net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   2991c:	689b      	ldr	r3, [r3, #8]
	if (net_pkt_family(pkt) == AF_INET6 &&
   2991e:	7e1b      	ldrb	r3, [r3, #24]
   29920:	2bff      	cmp	r3, #255	; 0xff
   29922:	f43f af57 	beq.w	297d4 <net_conn_input+0x18>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   29926:	2300      	movs	r3, #0
   29928:	4632      	mov	r2, r6
   2992a:	2101      	movs	r1, #1
   2992c:	4620      	mov	r0, r4
   2992e:	f7fa ff17 	bl	24760 <net_icmpv6_send_error>
   29932:	e74f      	b.n	297d4 <net_conn_input+0x18>
   29934:	20002a30 	.word	0x20002a30
   29938:	20002a18 	.word	0x20002a18

0002993c <net_conn_init>:
		for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
			conn_cache[i].idx = -1;
		}
	} while (0);
#endif /* CONFIG_NET_CONN_CACHE */
}
   2993c:	4770      	bx	lr

0002993e <sys_get_be32>:
	return ((u16_t)src[0] << 8) | src[1];
   2993e:	7803      	ldrb	r3, [r0, #0]
   29940:	7842      	ldrb	r2, [r0, #1]
   29942:	7881      	ldrb	r1, [r0, #2]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   29944:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
   29948:	78c3      	ldrb	r3, [r0, #3]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   2994a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   2994e:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   29952:	4770      	bx	lr

00029954 <handle_fin_timeout>:
	struct net_tcp *tcp =
		CONTAINER_OF(work, struct net_tcp, fin_timer);

	NET_DBG("Did not receive FIN in %dms", FIN_TIMEOUT);

	net_context_unref(tcp->context);
   29954:	f850 0c28 	ldr.w	r0, [r0, #-40]
   29958:	f7f6 ba58 	b.w	1fe0c <net_context_unref>

0002995c <k_delayed_work_submit>:
   2995c:	460a      	mov	r2, r1
   2995e:	4601      	mov	r1, r0
   29960:	4801      	ldr	r0, [pc, #4]	; (29968 <k_delayed_work_submit+0xc>)
   29962:	f004 bed3 	b.w	2e70c <k_delayed_work_submit_to_queue>
   29966:	bf00      	nop
   29968:	200037b0 	.word	0x200037b0

0002996c <net_tcp_is_used>:
	return tcp->flags & NET_TCP_IN_USE;
   2996c:	f8b0 00bc 	ldrh.w	r0, [r0, #188]	; 0xbc
}
   29970:	f3c0 1040 	ubfx	r0, r0, #5, #1
   29974:	4770      	bx	lr
	...

00029978 <net_context_get_ip_proto>:
{
   29978:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   2997a:	4604      	mov	r4, r0
   2997c:	b9a0      	cbnz	r0, 299a8 <net_context_get_ip_proto+0x30>
   2997e:	4b0e      	ldr	r3, [pc, #56]	; (299b8 <net_context_get_ip_proto+0x40>)
   29980:	681b      	ldr	r3, [r3, #0]
   29982:	075b      	lsls	r3, r3, #29
   29984:	d010      	beq.n	299a8 <net_context_get_ip_proto+0x30>
   29986:	2301      	movs	r3, #1
   29988:	f04f 0200 	mov.w	r2, #0
   2998c:	f363 0202 	bfi	r2, r3, #0, #3
   29990:	490a      	ldr	r1, [pc, #40]	; (299bc <net_context_get_ip_proto+0x44>)
   29992:	4b0b      	ldr	r3, [pc, #44]	; (299c0 <net_context_get_ip_proto+0x48>)
   29994:	1a5b      	subs	r3, r3, r1
   29996:	f360 02c5 	bfi	r2, r0, #3, #3
   2999a:	08db      	lsrs	r3, r3, #3
   2999c:	f363 128f 	bfi	r2, r3, #6, #10
   299a0:	4908      	ldr	r1, [pc, #32]	; (299c4 <net_context_get_ip_proto+0x4c>)
   299a2:	4809      	ldr	r0, [pc, #36]	; (299c8 <net_context_get_ip_proto+0x50>)
   299a4:	f7d8 fba2 	bl	20ec <log_1>
	if (context->flags & NET_CONTEXT_PROTO) {
   299a8:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
	return IPPROTO_UDP;
   299ac:	f013 0f40 	tst.w	r3, #64	; 0x40
}
   299b0:	bf14      	ite	ne
   299b2:	2006      	movne	r0, #6
   299b4:	2011      	moveq	r0, #17
   299b6:	bd10      	pop	{r4, pc}
   299b8:	2000e2b4 	.word	0x2000e2b4
   299bc:	0002ef38 	.word	0x0002ef38
   299c0:	0002f0a8 	.word	0x0002f0a8
   299c4:	000370a2 	.word	0x000370a2
   299c8:	00030684 	.word	0x00030684

000299cc <net_context_get_family>:
{
   299cc:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   299ce:	4604      	mov	r4, r0
   299d0:	b9a0      	cbnz	r0, 299fc <net_context_get_family+0x30>
   299d2:	4b0e      	ldr	r3, [pc, #56]	; (29a0c <net_context_get_family+0x40>)
   299d4:	681b      	ldr	r3, [r3, #0]
   299d6:	075b      	lsls	r3, r3, #29
   299d8:	d010      	beq.n	299fc <net_context_get_family+0x30>
   299da:	2301      	movs	r3, #1
   299dc:	f04f 0200 	mov.w	r2, #0
   299e0:	f363 0202 	bfi	r2, r3, #0, #3
   299e4:	490a      	ldr	r1, [pc, #40]	; (29a10 <net_context_get_family+0x44>)
   299e6:	4b0b      	ldr	r3, [pc, #44]	; (29a14 <net_context_get_family+0x48>)
   299e8:	1a5b      	subs	r3, r3, r1
   299ea:	f360 02c5 	bfi	r2, r0, #3, #3
   299ee:	08db      	lsrs	r3, r3, #3
   299f0:	f363 128f 	bfi	r2, r3, #6, #10
   299f4:	4908      	ldr	r1, [pc, #32]	; (29a18 <net_context_get_family+0x4c>)
   299f6:	4809      	ldr	r0, [pc, #36]	; (29a1c <net_context_get_family+0x50>)
   299f8:	f7d8 fb78 	bl	20ec <log_1>
	if (context->flags & NET_CONTEXT_FAMILY) {
   299fc:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
	return AF_INET;
   29a00:	f013 0f10 	tst.w	r3, #16
}
   29a04:	bf14      	ite	ne
   29a06:	200a      	movne	r0, #10
   29a08:	2002      	moveq	r0, #2
   29a0a:	bd10      	pop	{r4, pc}
   29a0c:	2000e2b4 	.word	0x2000e2b4
   29a10:	0002ef38 	.word	0x0002ef38
   29a14:	0002f0a8 	.word	0x0002f0a8
   29a18:	0003708b 	.word	0x0003708b
   29a1c:	00030684 	.word	0x00030684

00029a20 <net_context_get_state>:
{
   29a20:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   29a22:	4604      	mov	r4, r0
   29a24:	b9a0      	cbnz	r0, 29a50 <net_context_get_state+0x30>
   29a26:	4b0d      	ldr	r3, [pc, #52]	; (29a5c <net_context_get_state+0x3c>)
   29a28:	681b      	ldr	r3, [r3, #0]
   29a2a:	075b      	lsls	r3, r3, #29
   29a2c:	d010      	beq.n	29a50 <net_context_get_state+0x30>
   29a2e:	2301      	movs	r3, #1
   29a30:	f04f 0200 	mov.w	r2, #0
   29a34:	f363 0202 	bfi	r2, r3, #0, #3
   29a38:	4909      	ldr	r1, [pc, #36]	; (29a60 <net_context_get_state+0x40>)
   29a3a:	4b0a      	ldr	r3, [pc, #40]	; (29a64 <net_context_get_state+0x44>)
   29a3c:	1a5b      	subs	r3, r3, r1
   29a3e:	f360 02c5 	bfi	r2, r0, #3, #3
   29a42:	08db      	lsrs	r3, r3, #3
   29a44:	f363 128f 	bfi	r2, r3, #6, #10
   29a48:	4907      	ldr	r1, [pc, #28]	; (29a68 <net_context_get_state+0x48>)
   29a4a:	4808      	ldr	r0, [pc, #32]	; (29a6c <net_context_get_state+0x4c>)
   29a4c:	f7d8 fb4e 	bl	20ec <log_1>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   29a50:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
}
   29a54:	f3c0 0041 	ubfx	r0, r0, #1, #2
   29a58:	bd10      	pop	{r4, pc}
   29a5a:	bf00      	nop
   29a5c:	2000e2b4 	.word	0x2000e2b4
   29a60:	0002ef38 	.word	0x0002ef38
   29a64:	0002f0a8 	.word	0x0002f0a8
   29a68:	0003705f 	.word	0x0003705f
   29a6c:	00030684 	.word	0x00030684

00029a70 <net_context_set_state>:
{
   29a70:	b538      	push	{r3, r4, r5, lr}
   29a72:	460d      	mov	r5, r1
	NET_ASSERT(context);
   29a74:	4604      	mov	r4, r0
   29a76:	b9a0      	cbnz	r0, 29aa2 <net_context_set_state+0x32>
   29a78:	4b0e      	ldr	r3, [pc, #56]	; (29ab4 <net_context_set_state+0x44>)
   29a7a:	681b      	ldr	r3, [r3, #0]
   29a7c:	075b      	lsls	r3, r3, #29
   29a7e:	d010      	beq.n	29aa2 <net_context_set_state+0x32>
   29a80:	2301      	movs	r3, #1
   29a82:	f04f 0200 	mov.w	r2, #0
   29a86:	f363 0202 	bfi	r2, r3, #0, #3
   29a8a:	490b      	ldr	r1, [pc, #44]	; (29ab8 <net_context_set_state+0x48>)
   29a8c:	4b0b      	ldr	r3, [pc, #44]	; (29abc <net_context_set_state+0x4c>)
   29a8e:	1a5b      	subs	r3, r3, r1
   29a90:	f360 02c5 	bfi	r2, r0, #3, #3
   29a94:	08db      	lsrs	r3, r3, #3
   29a96:	f363 128f 	bfi	r2, r3, #6, #10
   29a9a:	4909      	ldr	r1, [pc, #36]	; (29ac0 <net_context_set_state+0x50>)
   29a9c:	4809      	ldr	r0, [pc, #36]	; (29ac4 <net_context_set_state+0x54>)
   29a9e:	f7d8 fb25 	bl	20ec <log_1>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   29aa2:	f894 1065 	ldrb.w	r1, [r4, #101]	; 0x65
   29aa6:	f021 0106 	bic.w	r1, r1, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   29aaa:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
   29aae:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
}
   29ab2:	bd38      	pop	{r3, r4, r5, pc}
   29ab4:	2000e2b4 	.word	0x2000e2b4
   29ab8:	0002ef38 	.word	0x0002ef38
   29abc:	0002f0a8 	.word	0x0002f0a8
   29ac0:	00037075 	.word	0x00037075
   29ac4:	00030684 	.word	0x00030684

00029ac8 <net_context_get_iface>:
{
   29ac8:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   29aca:	4604      	mov	r4, r0
   29acc:	b9a0      	cbnz	r0, 29af8 <net_context_get_iface+0x30>
   29ace:	4b0d      	ldr	r3, [pc, #52]	; (29b04 <net_context_get_iface+0x3c>)
   29ad0:	681b      	ldr	r3, [r3, #0]
   29ad2:	075b      	lsls	r3, r3, #29
   29ad4:	d010      	beq.n	29af8 <net_context_get_iface+0x30>
   29ad6:	2301      	movs	r3, #1
   29ad8:	f04f 0200 	mov.w	r2, #0
   29adc:	f363 0202 	bfi	r2, r3, #0, #3
   29ae0:	4909      	ldr	r1, [pc, #36]	; (29b08 <net_context_get_iface+0x40>)
   29ae2:	4b0a      	ldr	r3, [pc, #40]	; (29b0c <net_context_get_iface+0x44>)
   29ae4:	1a5b      	subs	r3, r3, r1
   29ae6:	f360 02c5 	bfi	r2, r0, #3, #3
   29aea:	08db      	lsrs	r3, r3, #3
   29aec:	f363 128f 	bfi	r2, r3, #6, #10
   29af0:	4907      	ldr	r1, [pc, #28]	; (29b10 <net_context_get_iface+0x48>)
   29af2:	4808      	ldr	r0, [pc, #32]	; (29b14 <net_context_get_iface+0x4c>)
   29af4:	f7d8 fafa 	bl	20ec <log_1>
	return net_if_get_by_index(context->iface);
   29af8:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
}
   29afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_get_by_index(context->iface);
   29b00:	f7f8 b9b6 	b.w	21e70 <net_if_get_by_index>
   29b04:	2000e2b4 	.word	0x2000e2b4
   29b08:	0002ef38 	.word	0x0002ef38
   29b0c:	0002f0a8 	.word	0x0002f0a8
   29b10:	000370bb 	.word	0x000370bb
   29b14:	00030684 	.word	0x00030684

00029b18 <net_tcp_header_fits>:
{
   29b18:	b510      	push	{r4, lr}
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   29b1a:	2214      	movs	r2, #20
{
   29b1c:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   29b1e:	f7f9 fc67 	bl	233f0 <net_header_fits>
   29b22:	2800      	cmp	r0, #0
}
   29b24:	bf14      	ite	ne
   29b26:	4620      	movne	r0, r4
   29b28:	2000      	moveq	r0, #0
   29b2a:	bd10      	pop	{r4, pc}

00029b2c <net_tcp_queue_pkt.isra.20>:
static int net_tcp_queue_pkt(struct net_context *context, struct net_pkt *pkt)
   29b2c:	b538      	push	{r3, r4, r5, lr}
	parent->next = child;
   29b2e:	2200      	movs	r2, #0
   29b30:	4605      	mov	r5, r0
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   29b32:	6800      	ldr	r0, [r0, #0]
   29b34:	644a      	str	r2, [r1, #68]	; 0x44
Z_GENLIST_APPEND(slist, snode)
   29b36:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
static int net_tcp_queue_pkt(struct net_context *context, struct net_pkt *pkt)
   29b3a:	460c      	mov	r4, r1
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   29b3c:	f101 0344 	add.w	r3, r1, #68	; 0x44
   29b40:	bb32      	cbnz	r2, 29b90 <net_tcp_queue_pkt.isra.20+0x64>
	list->head = node;
   29b42:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
   29b46:	3054      	adds	r0, #84	; 0x54
   29b48:	f004 fe50 	bl	2e7ec <z_timeout_remaining>
   29b4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   29b50:	2264      	movs	r2, #100	; 0x64
   29b52:	2300      	movs	r3, #0
   29b54:	fb80 0101 	smull	r0, r1, r0, r1
   29b58:	f7d6 fbac 	bl	2b4 <__aeabi_uldivmod>
	if (k_delayed_work_remaining_get(&context->tcp->retry_timer) == 0) {
   29b5c:	b948      	cbnz	r0, 29b72 <net_tcp_queue_pkt.isra.20+0x46>
		k_delayed_work_submit(&context->tcp->retry_timer,
   29b5e:	6828      	ldr	r0, [r5, #0]
	return ((u32_t)1 << tcp->retry_timeout_shift) *
   29b60:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
		k_delayed_work_submit(&context->tcp->retry_timer,
   29b64:	21c8      	movs	r1, #200	; 0xc8
	return ((u32_t)1 << tcp->retry_timeout_shift) *
   29b66:	f003 031f 	and.w	r3, r3, #31
		k_delayed_work_submit(&context->tcp->retry_timer,
   29b6a:	4099      	lsls	r1, r3
   29b6c:	3048      	adds	r0, #72	; 0x48
   29b6e:	f7ff fef5 	bl	2995c <k_delayed_work_submit>
	return pkt->family;
   29b72:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	do_ref_if_needed(context->tcp, pkt);
   29b76:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   29b7a:	2b0a      	cmp	r3, #10
   29b7c:	d103      	bne.n	29b86 <net_tcp_queue_pkt.isra.20+0x5a>
   29b7e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   29b82:	2b02      	cmp	r3, #2
   29b84:	d002      	beq.n	29b8c <net_tcp_queue_pkt.isra.20+0x60>
   29b86:	4620      	mov	r0, r4
   29b88:	f7f8 fd2e 	bl	225e8 <net_pkt_ref>
}
   29b8c:	2000      	movs	r0, #0
   29b8e:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   29b90:	6013      	str	r3, [r2, #0]
	list->tail = node;
   29b92:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
   29b96:	e7d6      	b.n	29b46 <net_tcp_queue_pkt.isra.20+0x1a>

00029b98 <net_context_set_iface.isra.21>:
static inline void net_context_set_iface(struct net_context *context,
   29b98:	b538      	push	{r3, r4, r5, lr}
   29b9a:	4605      	mov	r5, r0
	NET_ASSERT(iface);
   29b9c:	460c      	mov	r4, r1
   29b9e:	b9a1      	cbnz	r1, 29bca <net_context_set_iface.isra.21+0x32>
   29ba0:	4b0c      	ldr	r3, [pc, #48]	; (29bd4 <net_context_set_iface.isra.21+0x3c>)
   29ba2:	681b      	ldr	r3, [r3, #0]
   29ba4:	075b      	lsls	r3, r3, #29
   29ba6:	d010      	beq.n	29bca <net_context_set_iface.isra.21+0x32>
   29ba8:	2301      	movs	r3, #1
   29baa:	f04f 0200 	mov.w	r2, #0
   29bae:	f363 0202 	bfi	r2, r3, #0, #3
   29bb2:	f361 02c5 	bfi	r2, r1, #3, #3
   29bb6:	4b08      	ldr	r3, [pc, #32]	; (29bd8 <net_context_set_iface.isra.21+0x40>)
   29bb8:	4908      	ldr	r1, [pc, #32]	; (29bdc <net_context_set_iface.isra.21+0x44>)
   29bba:	4809      	ldr	r0, [pc, #36]	; (29be0 <net_context_set_iface.isra.21+0x48>)
   29bbc:	1a5b      	subs	r3, r3, r1
   29bbe:	08db      	lsrs	r3, r3, #3
   29bc0:	f363 128f 	bfi	r2, r3, #6, #10
   29bc4:	4907      	ldr	r1, [pc, #28]	; (29be4 <net_context_set_iface.isra.21+0x4c>)
   29bc6:	f7d8 fa91 	bl	20ec <log_1>
	context->iface = net_if_get_by_iface(iface);
   29bca:	4620      	mov	r0, r4
   29bcc:	f7f8 f95c 	bl	21e88 <net_if_get_by_iface>
   29bd0:	7028      	strb	r0, [r5, #0]
}
   29bd2:	bd38      	pop	{r3, r4, r5, pc}
   29bd4:	2000e2b4 	.word	0x2000e2b4
   29bd8:	0002f0a8 	.word	0x0002f0a8
   29bdc:	0002ef38 	.word	0x0002ef38
   29be0:	000346d4 	.word	0x000346d4
   29be4:	000370d1 	.word	0x000370d1

00029be8 <prepare_segment.isra.19>:
static int prepare_segment(struct net_tcp *tcp,
   29be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_context *context = tcp->context;
   29bec:	f8d0 9000 	ldr.w	r9, [r0]
static int prepare_segment(struct net_tcp *tcp,
   29bf0:	b085      	sub	sp, #20
   29bf2:	4605      	mov	r5, r0
   29bf4:	460f      	mov	r7, r1
   29bf6:	4614      	mov	r4, r2
   29bf8:	469b      	mov	fp, r3
	NET_ASSERT(context);
   29bfa:	f1b9 0f00 	cmp.w	r9, #0
   29bfe:	d114      	bne.n	29c2a <prepare_segment.isra.19+0x42>
   29c00:	4b61      	ldr	r3, [pc, #388]	; (29d88 <prepare_segment.isra.19+0x1a0>)
   29c02:	681b      	ldr	r3, [r3, #0]
   29c04:	075a      	lsls	r2, r3, #29
   29c06:	d010      	beq.n	29c2a <prepare_segment.isra.19+0x42>
   29c08:	2301      	movs	r3, #1
   29c0a:	f04f 0200 	mov.w	r2, #0
   29c0e:	f363 0202 	bfi	r2, r3, #0, #3
   29c12:	495e      	ldr	r1, [pc, #376]	; (29d8c <prepare_segment.isra.19+0x1a4>)
   29c14:	4b5e      	ldr	r3, [pc, #376]	; (29d90 <prepare_segment.isra.19+0x1a8>)
   29c16:	485f      	ldr	r0, [pc, #380]	; (29d94 <prepare_segment.isra.19+0x1ac>)
   29c18:	1a5b      	subs	r3, r3, r1
   29c1a:	f369 02c5 	bfi	r2, r9, #3, #3
   29c1e:	08db      	lsrs	r3, r3, #3
   29c20:	f363 128f 	bfi	r2, r3, #6, #10
   29c24:	495c      	ldr	r1, [pc, #368]	; (29d98 <prepare_segment.isra.19+0x1b0>)
   29c26:	f7d8 fa61 	bl	20ec <log_1>
	if (pkt) {
   29c2a:	b1e4      	cbz	r4, 29c66 <prepare_segment.isra.19+0x7e>
		pkt->frags = NULL;
   29c2c:	2300      	movs	r3, #0
		tail = pkt->frags;
   29c2e:	f8d4 a014 	ldr.w	sl, [r4, #20]
		pkt->frags = NULL;
   29c32:	6163      	str	r3, [r4, #20]
		pkt_allocated = false;
   29c34:	4698      	mov	r8, r3
   29c36:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_family(pkt) == AF_INET6) {
   29c3a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   29c3e:	2b0a      	cmp	r3, #10
   29c40:	f040 809b 	bne.w	29d7a <prepare_segment.isra.19+0x192>
				    net_sin6_ptr(segment->src_addr)->sin6_addr,
   29c44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
		alloc_pkt = net_context_create_ipv6(tcp->context, pkt,
   29c48:	4621      	mov	r1, r4
   29c4a:	3304      	adds	r3, #4
   29c4c:	6852      	ldr	r2, [r2, #4]
   29c4e:	6828      	ldr	r0, [r5, #0]
   29c50:	f7f6 fa44 	bl	200dc <net_context_create_ipv6>
		if (!alloc_pkt) {
   29c54:	b9a8      	cbnz	r0, 29c82 <prepare_segment.isra.19+0x9a>
			status = -ENOMEM;
   29c56:	f06f 050b 	mvn.w	r5, #11
	if (pkt_allocated) {
   29c5a:	f1b8 0f00 	cmp.w	r8, #0
   29c5e:	d17f      	bne.n	29d60 <prepare_segment.isra.19+0x178>
		pkt->frags = tail;
   29c60:	f8c4 a014 	str.w	sl, [r4, #20]
   29c64:	e085      	b.n	29d72 <prepare_segment.isra.19+0x18a>
		pkt = net_pkt_get_tx(context, ALLOC_TIMEOUT);
   29c66:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   29c6a:	4648      	mov	r0, r9
   29c6c:	f7f8 fc2c 	bl	224c8 <net_pkt_get_tx>
		if (!pkt) {
   29c70:	4604      	mov	r4, r0
   29c72:	2800      	cmp	r0, #0
   29c74:	f000 8084 	beq.w	29d80 <prepare_segment.isra.19+0x198>
		pkt_allocated = true;
   29c78:	f04f 0801 	mov.w	r8, #1
	struct net_buf *header, *tail = NULL;
   29c7c:	f04f 0a00 	mov.w	sl, #0
   29c80:	e7d9      	b.n	29c36 <prepare_segment.isra.19+0x4e>
		dst_port = net_sin6(segment->dst_addr)->sin6_port;
   29c82:	697b      	ldr	r3, [r7, #20]
   29c84:	885b      	ldrh	r3, [r3, #2]
   29c86:	9301      	str	r3, [sp, #4]
		src_port = ((struct sockaddr_in6_ptr *)&context->local)->
   29c88:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   29c8c:	9302      	str	r3, [sp, #8]
	return pkt->frags->data;
   29c8e:	6963      	ldr	r3, [r4, #20]
		NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_TCP;
   29c90:	689b      	ldr	r3, [r3, #8]
   29c92:	2206      	movs	r2, #6
   29c94:	719a      	strb	r2, [r3, #6]
	header = net_pkt_get_data(context, ALLOC_TIMEOUT);
   29c96:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   29c9a:	4648      	mov	r0, r9
   29c9c:	f7f8 fc44 	bl	22528 <net_pkt_get_data>
	if (!header) {
   29ca0:	4605      	mov	r5, r0
   29ca2:	2800      	cmp	r0, #0
   29ca4:	d0d7      	beq.n	29c56 <prepare_segment.isra.19+0x6e>
	net_pkt_frag_add(pkt, header);
   29ca6:	4601      	mov	r1, r0
   29ca8:	4620      	mov	r0, r4
   29caa:	f7f8 fccf 	bl	2264c <net_pkt_frag_add>
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   29cae:	f105 0208 	add.w	r2, r5, #8
   29cb2:	2114      	movs	r1, #20
   29cb4:	4610      	mov	r0, r2
   29cb6:	9203      	str	r2, [sp, #12]
   29cb8:	f7f5 fb2a 	bl	1f310 <net_buf_simple_add>
	if (segment->options && segment->optlen) {
   29cbc:	68fb      	ldr	r3, [r7, #12]
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   29cbe:	4605      	mov	r5, r0
	if (segment->options && segment->optlen) {
   29cc0:	2b00      	cmp	r3, #0
   29cc2:	d051      	beq.n	29d68 <prepare_segment.isra.19+0x180>
   29cc4:	7afe      	ldrb	r6, [r7, #11]
   29cc6:	9a03      	ldr	r2, [sp, #12]
   29cc8:	b17e      	cbz	r6, 29cea <prepare_segment.isra.19+0x102>
	memcpy(net_buf_add(header, len), data, len);
   29cca:	4631      	mov	r1, r6
   29ccc:	4610      	mov	r0, r2
   29cce:	9303      	str	r3, [sp, #12]
   29cd0:	f7f5 fb1e 	bl	1f310 <net_buf_simple_add>
   29cd4:	9b03      	ldr	r3, [sp, #12]
   29cd6:	4632      	mov	r2, r6
   29cd8:	4619      	mov	r1, r3
   29cda:	f7dc ffd5 	bl	6c88 <memcpy>
	if ((len & 0x3u) != 0u) {
   29cde:	07b3      	lsls	r3, r6, #30
   29ce0:	d003      	beq.n	29cea <prepare_segment.isra.19+0x102>
		optlen = (len & 0xfffCu) + 4u;
   29ce2:	f026 0603 	bic.w	r6, r6, #3
   29ce6:	3604      	adds	r6, #4
   29ce8:	b2f6      	uxtb	r6, r6
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   29cea:	3614      	adds	r6, #20
	tcp_hdr->src_port = src_port;
   29cec:	9b02      	ldr	r3, [sp, #8]
   29cee:	802b      	strh	r3, [r5, #0]
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   29cf0:	00b6      	lsls	r6, r6, #2
   29cf2:	732e      	strb	r6, [r5, #12]
	tcp_hdr->dst_port = dst_port;
   29cf4:	9b01      	ldr	r3, [sp, #4]
   29cf6:	806b      	strh	r3, [r5, #2]
	sys_put_be32(segment->seq, tcp_hdr->seq);
   29cf8:	683b      	ldr	r3, [r7, #0]
	dst[1] = val;
   29cfa:	71eb      	strb	r3, [r5, #7]
	sys_put_be16(val >> 16, dst);
   29cfc:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val;
   29cfe:	716a      	strb	r2, [r5, #5]
	dst[0] = val >> 8;
   29d00:	0a11      	lsrs	r1, r2, #8
   29d02:	f3c3 2207 	ubfx	r2, r3, #8, #8
   29d06:	7129      	strb	r1, [r5, #4]
   29d08:	71aa      	strb	r2, [r5, #6]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   29d0a:	687b      	ldr	r3, [r7, #4]
	dst[1] = val;
   29d0c:	72eb      	strb	r3, [r5, #11]
	sys_put_be16(val >> 16, dst);
   29d0e:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val;
   29d10:	726a      	strb	r2, [r5, #9]
	dst[0] = val >> 8;
   29d12:	0a11      	lsrs	r1, r2, #8
   29d14:	f3c3 2207 	ubfx	r2, r3, #8, #8
   29d18:	72aa      	strb	r2, [r5, #10]
   29d1a:	7229      	strb	r1, [r5, #8]
	tcp_hdr->flags = segment->flags;
   29d1c:	7abb      	ldrb	r3, [r7, #10]
   29d1e:	736b      	strb	r3, [r5, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   29d20:	893b      	ldrh	r3, [r7, #8]
	dst[1] = val;
   29d22:	73eb      	strb	r3, [r5, #15]
	dst[0] = val >> 8;
   29d24:	0a1a      	lsrs	r2, r3, #8
	tcp_hdr->urg[0] = 0;
   29d26:	2300      	movs	r3, #0
   29d28:	73aa      	strb	r2, [r5, #14]
   29d2a:	74ab      	strb	r3, [r5, #18]
	tcp_hdr->urg[1] = 0;
   29d2c:	74eb      	strb	r3, [r5, #19]
	if (tail) {
   29d2e:	f1ba 0f00 	cmp.w	sl, #0
   29d32:	d003      	beq.n	29d3c <prepare_segment.isra.19+0x154>
		net_pkt_frag_add(pkt, tail);
   29d34:	4651      	mov	r1, sl
   29d36:	4620      	mov	r0, r4
   29d38:	f7f8 fc88 	bl	2264c <net_pkt_frag_add>
	return pkt->family;
   29d3c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_family(pkt) == AF_INET6) {
   29d40:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   29d44:	2b0a      	cmp	r3, #10
   29d46:	d111      	bne.n	29d6c <prepare_segment.isra.19+0x184>
					 net_context_get_ip_proto(context));
   29d48:	4648      	mov	r0, r9
   29d4a:	f7ff fe15 	bl	29978 <net_context_get_ip_proto>
		return net_ipv6_finalize(pkt,
   29d4e:	4601      	mov	r1, r0
   29d50:	4620      	mov	r0, r4
   29d52:	f7fb f97f 	bl	25054 <net_ipv6_finalize>
	if (status < 0) {
   29d56:	1e05      	subs	r5, r0, #0
   29d58:	da08      	bge.n	29d6c <prepare_segment.isra.19+0x184>
		if (pkt_allocated) {
   29d5a:	f1b8 0f00 	cmp.w	r8, #0
   29d5e:	d008      	beq.n	29d72 <prepare_segment.isra.19+0x18a>
		net_pkt_unref(pkt);
   29d60:	4620      	mov	r0, r4
   29d62:	f7f8 fc4c 	bl	225fe <net_pkt_unref>
   29d66:	e004      	b.n	29d72 <prepare_segment.isra.19+0x18a>
	u8_t optlen = 0;
   29d68:	461e      	mov	r6, r3
   29d6a:	e7be      	b.n	29cea <prepare_segment.isra.19+0x102>
	*out_pkt = pkt;
   29d6c:	f8cb 4000 	str.w	r4, [fp]
	return 0;
   29d70:	2500      	movs	r5, #0
}
   29d72:	4628      	mov	r0, r5
   29d74:	b005      	add	sp, #20
   29d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = -EINVAL;
   29d7a:	f06f 0515 	mvn.w	r5, #21
   29d7e:	e76c      	b.n	29c5a <prepare_segment.isra.19+0x72>
			return -ENOMEM;
   29d80:	f06f 050b 	mvn.w	r5, #11
   29d84:	e7f5      	b.n	29d72 <prepare_segment.isra.19+0x18a>
   29d86:	bf00      	nop
   29d88:	2000e2b4 	.word	0x2000e2b4
   29d8c:	0002ef38 	.word	0x0002ef38
   29d90:	0002f0a8 	.word	0x0002f0a8
   29d94:	00030684 	.word	0x00030684
   29d98:	000370e7 	.word	0x000370e7

00029d9c <net_tcp_alloc>:
{
   29d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29d9e:	4607      	mov	r7, r0
	__asm__ volatile(
   29da0:	f04f 0320 	mov.w	r3, #32
   29da4:	f3ef 8411 	mrs	r4, BASEPRI
   29da8:	f383 8811 	msr	BASEPRI, r3
		if (!net_tcp_is_used(&tcp_context[i])) {
   29dac:	4924      	ldr	r1, [pc, #144]	; (29e40 <net_tcp_alloc+0xa4>)
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   29dae:	2300      	movs	r3, #0
		if (!net_tcp_is_used(&tcp_context[i])) {
   29db0:	25c0      	movs	r5, #192	; 0xc0
   29db2:	460e      	mov	r6, r1
   29db4:	fb05 1203 	mla	r2, r5, r3, r1
   29db8:	4610      	mov	r0, r2
   29dba:	f7ff fdd7 	bl	2996c <net_tcp_is_used>
   29dbe:	bbc8      	cbnz	r0, 29e34 <net_tcp_alloc+0x98>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   29dc0:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	; 0xbc
   29dc4:	f041 0120 	orr.w	r1, r1, #32
   29dc8:	f8a2 10bc 	strh.w	r1, [r2, #188]	; 0xbc
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29dcc:	f384 8811 	msr	BASEPRI, r4
	if (i >= NET_MAX_TCP_CONTEXT) {
   29dd0:	2b05      	cmp	r3, #5
   29dd2:	d033      	beq.n	29e3c <net_tcp_alloc+0xa0>
   29dd4:	22c0      	movs	r2, #192	; 0xc0
   29dd6:	fb02 f503 	mul.w	r5, r2, r3
	(void)memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   29dda:	1974      	adds	r4, r6, r5
   29ddc:	2100      	movs	r1, #0
   29dde:	4620      	mov	r0, r4
   29de0:	f7dc ff7f 	bl	6ce2 <memset>
	tcp_context[i].flags = NET_TCP_IN_USE;
   29de4:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
   29de8:	2101      	movs	r1, #1
   29dea:	f361 124c 	bfi	r2, r1, #5, #8
   29dee:	f8a4 20bc 	strh.w	r2, [r4, #188]	; 0xbc
	tcp_context[i].state = NET_TCP_CLOSED;
   29df2:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   29df6:	f36f 3250 	bfc	r2, #13, #4
   29dfa:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
	tcp_context[i].context = context;
   29dfe:	5177      	str	r7, [r6, r5]
	return sys_rand32_get();
   29e00:	f7db ffc8 	bl	5d94 <sys_rand32_get>
	tcp_context[i].accept_cb = NULL;
   29e04:	2700      	movs	r7, #0
	tcp_context[i].send_seq = tcp_init_isn();
   29e06:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   29e0a:	4b0e      	ldr	r3, [pc, #56]	; (29e44 <net_tcp_alloc+0xa8>)
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   29e0c:	490e      	ldr	r1, [pc, #56]	; (29e48 <net_tcp_alloc+0xac>)
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   29e0e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   29e12:	f105 0048 	add.w	r0, r5, #72	; 0x48
   29e16:	4430      	add	r0, r6
	tcp_context[i].accept_cb = NULL;
   29e18:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   29e1c:	f004 fc1e 	bl	2e65c <k_delayed_work_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   29e20:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   29e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29e28:	4639      	mov	r1, r7
   29e2a:	4430      	add	r0, r6
   29e2c:	f004 fa1c 	bl	2e268 <_impl_k_sem_init>
}
   29e30:	4620      	mov	r0, r4
   29e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   29e34:	3301      	adds	r3, #1
   29e36:	2b05      	cmp	r3, #5
   29e38:	d1bc      	bne.n	29db4 <net_tcp_alloc+0x18>
   29e3a:	e7c7      	b.n	29dcc <net_tcp_alloc+0x30>
		return NULL;
   29e3c:	2400      	movs	r4, #0
   29e3e:	e7f7      	b.n	29e30 <net_tcp_alloc+0x94>
   29e40:	20002b50 	.word	0x20002b50
   29e44:	02180500 	.word	0x02180500
   29e48:	0002ab05 	.word	0x0002ab05

00029e4c <net_tcp_get_recv_mss>:
{
   29e4c:	b510      	push	{r4, lr}
   29e4e:	4604      	mov	r4, r0
	sa_family_t family = net_context_get_family(tcp->context);
   29e50:	6800      	ldr	r0, [r0, #0]
   29e52:	f7ff fdbb 	bl	299cc <net_context_get_family>
	else if (family == AF_INET6) {
   29e56:	280a      	cmp	r0, #10
   29e58:	d112      	bne.n	29e80 <net_tcp_get_recv_mss+0x34>
		struct net_if *iface = net_context_get_iface(tcp->context);
   29e5a:	6820      	ldr	r0, [r4, #0]
   29e5c:	f7ff fe34 	bl	29ac8 <net_context_get_iface>
		if (iface && net_if_get_mtu(iface) >= NET_IPV6TCPH_LEN) {
   29e60:	b158      	cbz	r0, 29e7a <net_tcp_get_recv_mss+0x2e>
	return iface->if_dev->mtu;
   29e62:	6803      	ldr	r3, [r0, #0]
   29e64:	8b18      	ldrh	r0, [r3, #24]
   29e66:	283b      	cmp	r0, #59	; 0x3b
   29e68:	d907      	bls.n	29e7a <net_tcp_get_recv_mss+0x2e>
			mss = net_if_get_mtu(iface) - NET_IPV6TCPH_LEN;
   29e6a:	383c      	subs	r0, #60	; 0x3c
   29e6c:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
   29e70:	bfb8      	it	lt
   29e72:	f44f 60a0 	movlt.w	r0, #1280	; 0x500
		return mss;
   29e76:	b280      	uxth	r0, r0
}
   29e78:	bd10      	pop	{r4, pc}
			mss = NET_IPV6_MTU;
   29e7a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
   29e7e:	e7fa      	b.n	29e76 <net_tcp_get_recv_mss+0x2a>
	return 0;
   29e80:	2000      	movs	r0, #0
   29e82:	e7f9      	b.n	29e78 <net_tcp_get_recv_mss+0x2c>

00029e84 <net_tcp_set_syn_opt>:
	*optionlen = 0;
   29e84:	2300      	movs	r3, #0
{
   29e86:	b570      	push	{r4, r5, r6, lr}
	*optionlen = 0;
   29e88:	7013      	strb	r3, [r2, #0]
{
   29e8a:	4615      	mov	r5, r2
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   29e8c:	f8b0 20bc 	ldrh.w	r2, [r0, #188]	; 0xbc
   29e90:	0552      	lsls	r2, r2, #21
{
   29e92:	4604      	mov	r4, r0
   29e94:	460e      	mov	r6, r1
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   29e96:	d417      	bmi.n	29ec8 <net_tcp_set_syn_opt+0x44>
		recv_mss = net_tcp_get_recv_mss(tcp);
   29e98:	f7ff ffd8 	bl	29e4c <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   29e9c:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   29ea0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   29ea4:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
	recv_mss |= (NET_TCP_MSS_OPT << 24) | (NET_TCP_MSS_SIZE << 16);
   29ea8:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
	UNALIGNED_PUT(htonl(recv_mss),
   29eac:	0204      	lsls	r4, r0, #8
   29eae:	f240 4302 	movw	r3, #1026	; 0x402
   29eb2:	782a      	ldrb	r2, [r5, #0]
   29eb4:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   29eb8:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   29ebc:	4320      	orrs	r0, r4
   29ebe:	50b0      	str	r0, [r6, r2]
	*optionlen += NET_TCP_MSS_SIZE;
   29ec0:	782b      	ldrb	r3, [r5, #0]
   29ec2:	3304      	adds	r3, #4
   29ec4:	702b      	strb	r3, [r5, #0]
}
   29ec6:	bd70      	pop	{r4, r5, r6, pc}
		recv_mss = 0;
   29ec8:	4618      	mov	r0, r3
   29eca:	e7ed      	b.n	29ea8 <net_tcp_set_syn_opt+0x24>

00029ecc <net_tcp_prepare_reset>:
{
   29ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29ed0:	4604      	mov	r4, r0
   29ed2:	b08a      	sub	sp, #40	; 0x28
   29ed4:	460d      	mov	r5, r1
   29ed6:	4617      	mov	r7, r2
	struct tcp_segment segment = { 0 };
   29ed8:	2100      	movs	r1, #0
   29eda:	2218      	movs	r2, #24
   29edc:	a804      	add	r0, sp, #16
{
   29ede:	461e      	mov	r6, r3
	struct tcp_segment segment = { 0 };
   29ee0:	f7dc feff 	bl	6ce2 <memset>
	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   29ee4:	6820      	ldr	r0, [r4, #0]
   29ee6:	f7ff fd9b 	bl	29a20 <net_context_get_state>
   29eea:	b300      	cbz	r0, 29f2e <net_tcp_prepare_reset+0x62>
	return (enum net_tcp_state)tcp->state;
   29eec:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   29ef0:	f3c3 3343 	ubfx	r3, r3, #13, #4
   29ef4:	2b02      	cmp	r3, #2
   29ef6:	d032      	beq.n	29f5e <net_tcp_prepare_reset+0x92>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   29ef8:	2b09      	cmp	r3, #9
   29efa:	d030      	beq.n	29f5e <net_tcp_prepare_reset+0x92>
		segment.ack = tcp->send_ack;
   29efc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   29f00:	9305      	str	r3, [sp, #20]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   29f02:	2314      	movs	r3, #20
   29f04:	f88d 301a 	strb.w	r3, [sp, #26]
		segment.seq = tcp->send_seq;
   29f08:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   29f0c:	9304      	str	r3, [sp, #16]
		if (!local) {
   29f0e:	b98d      	cbnz	r5, 29f34 <net_tcp_prepare_reset+0x68>
			segment.src_addr = &tcp->context->local;
   29f10:	6823      	ldr	r3, [r4, #0]
   29f12:	3308      	adds	r3, #8
   29f14:	9308      	str	r3, [sp, #32]
		segment.wnd = 0;
   29f16:	2200      	movs	r2, #0
		status = prepare_segment(tcp, &segment, NULL, pkt);
   29f18:	4633      	mov	r3, r6
   29f1a:	a904      	add	r1, sp, #16
   29f1c:	4620      	mov	r0, r4
		segment.dst_addr = remote;
   29f1e:	9709      	str	r7, [sp, #36]	; 0x24
		segment.wnd = 0;
   29f20:	f8ad 2018 	strh.w	r2, [sp, #24]
		segment.options = NULL;
   29f24:	9207      	str	r2, [sp, #28]
		segment.optlen = 0;
   29f26:	f88d 201b 	strb.w	r2, [sp, #27]
		status = prepare_segment(tcp, &segment, NULL, pkt);
   29f2a:	f7ff fe5d 	bl	29be8 <prepare_segment.isra.19>
}
   29f2e:	b00a      	add	sp, #40	; 0x28
   29f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(addr, 0, sizeof(struct sockaddr_ptr));
   29f34:	f10d 0804 	add.w	r8, sp, #4
   29f38:	220c      	movs	r2, #12
   29f3a:	2100      	movs	r1, #0
   29f3c:	4640      	mov	r0, r8
   29f3e:	f7dc fed0 	bl	6ce2 <memset>
	if (local->sa_family == AF_INET6) {
   29f42:	882b      	ldrh	r3, [r5, #0]
   29f44:	2b0a      	cmp	r3, #10
   29f46:	d107      	bne.n	29f58 <net_tcp_prepare_reset+0x8c>
		net_sin6_ptr(addr)->sin6_family = AF_INET6;
   29f48:	f8ad 3004 	strh.w	r3, [sp, #4]
		net_sin6_ptr(addr)->sin6_addr = &net_sin6(local)->sin6_addr;
   29f4c:	3504      	adds	r5, #4
		net_sin6_ptr(addr)->sin6_port = net_sin6(local)->sin6_port;
   29f4e:	f835 3c02 	ldrh.w	r3, [r5, #-2]
   29f52:	f8ad 3006 	strh.w	r3, [sp, #6]
		net_sin6_ptr(addr)->sin6_addr = &net_sin6(local)->sin6_addr;
   29f56:	9502      	str	r5, [sp, #8]
			segment.src_addr = &src_addr_ptr;
   29f58:	f8cd 8020 	str.w	r8, [sp, #32]
   29f5c:	e7db      	b.n	29f16 <net_tcp_prepare_reset+0x4a>
	int status = 0;
   29f5e:	2000      	movs	r0, #0
	return status;
   29f60:	e7e5      	b.n	29f2e <net_tcp_prepare_reset+0x62>

00029f62 <send_reset.isra.23>:
	}

	return ret;
}

static int send_reset(struct net_context *context,
   29f62:	b513      	push	{r0, r1, r4, lr}
		      struct sockaddr *local,
		      struct sockaddr *remote)
{
	struct net_pkt *pkt = NULL;
   29f64:	ab02      	add	r3, sp, #8
   29f66:	2400      	movs	r4, #0
   29f68:	f843 4d04 	str.w	r4, [r3, #-4]!
	int ret;

	ret = net_tcp_prepare_reset(context->tcp, local, remote, &pkt);
   29f6c:	f7ff ffae 	bl	29ecc <net_tcp_prepare_reset>
	if (ret || !pkt) {
   29f70:	4604      	mov	r4, r0
   29f72:	b940      	cbnz	r0, 29f86 <send_reset.isra.23+0x24>
   29f74:	9801      	ldr	r0, [sp, #4]
   29f76:	b130      	cbz	r0, 29f86 <send_reset.isra.23+0x24>
		return ret;
	}

	print_send_info(pkt, "RST");

	ret = net_send_data(pkt);
   29f78:	f7f6 fc48 	bl	2080c <net_send_data>
	if (ret < 0) {
   29f7c:	1e04      	subs	r4, r0, #0
   29f7e:	da02      	bge.n	29f86 <send_reset.isra.23+0x24>
		net_pkt_unref(pkt);
   29f80:	9801      	ldr	r0, [sp, #4]
   29f82:	f7f8 fb3c 	bl	225fe <net_pkt_unref>
	}

	return ret;
}
   29f86:	4620      	mov	r0, r4
   29f88:	b002      	add	sp, #8
   29f8a:	bd10      	pop	{r4, pc}

00029f8c <net_tcp_state_str>:
{
   29f8c:	280a      	cmp	r0, #10
   29f8e:	bf9a      	itte	ls
   29f90:	4b02      	ldrls	r3, [pc, #8]	; (29f9c <net_tcp_state_str+0x10>)
   29f92:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   29f96:	4802      	ldrhi	r0, [pc, #8]	; (29fa0 <net_tcp_state_str+0x14>)
}
   29f98:	4770      	bx	lr
   29f9a:	bf00      	nop
   29f9c:	00036f50 	.word	0x00036f50
   29fa0:	0002f21b 	.word	0x0002f21b

00029fa4 <net_tcp_init>:
}
   29fa4:	4770      	bx	lr
	...

00029fa8 <net_tcp_change_state>:
{
   29fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29faa:	460d      	mov	r5, r1
	NET_ASSERT(tcp);
   29fac:	4604      	mov	r4, r0
   29fae:	b9a0      	cbnz	r0, 29fda <net_tcp_change_state+0x32>
   29fb0:	4b28      	ldr	r3, [pc, #160]	; (2a054 <net_tcp_change_state+0xac>)
   29fb2:	681b      	ldr	r3, [r3, #0]
   29fb4:	075a      	lsls	r2, r3, #29
   29fb6:	d010      	beq.n	29fda <net_tcp_change_state+0x32>
   29fb8:	2301      	movs	r3, #1
   29fba:	f04f 0200 	mov.w	r2, #0
   29fbe:	f363 0202 	bfi	r2, r3, #0, #3
   29fc2:	4925      	ldr	r1, [pc, #148]	; (2a058 <net_tcp_change_state+0xb0>)
   29fc4:	4b25      	ldr	r3, [pc, #148]	; (2a05c <net_tcp_change_state+0xb4>)
   29fc6:	1a5b      	subs	r3, r3, r1
   29fc8:	f360 02c5 	bfi	r2, r0, #3, #3
   29fcc:	08db      	lsrs	r3, r3, #3
   29fce:	f363 128f 	bfi	r2, r3, #6, #10
   29fd2:	4923      	ldr	r1, [pc, #140]	; (2a060 <net_tcp_change_state+0xb8>)
   29fd4:	4823      	ldr	r0, [pc, #140]	; (2a064 <net_tcp_change_state+0xbc>)
   29fd6:	f7d8 f889 	bl	20ec <log_1>
   29fda:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
	if (net_tcp_get_state(tcp) == new_state) {
   29fde:	f3c3 3343 	ubfx	r3, r3, #13, #4
   29fe2:	42ab      	cmp	r3, r5
   29fe4:	d033      	beq.n	2a04e <net_tcp_change_state+0xa6>
	NET_ASSERT(new_state >= NET_TCP_CLOSED &&
   29fe6:	2d0a      	cmp	r5, #10
   29fe8:	d914      	bls.n	2a014 <net_tcp_change_state+0x6c>
   29fea:	4b1a      	ldr	r3, [pc, #104]	; (2a054 <net_tcp_change_state+0xac>)
   29fec:	681b      	ldr	r3, [r3, #0]
   29fee:	075b      	lsls	r3, r3, #29
   29ff0:	d010      	beq.n	2a014 <net_tcp_change_state+0x6c>
   29ff2:	2301      	movs	r3, #1
   29ff4:	f04f 0200 	mov.w	r2, #0
   29ff8:	f363 0202 	bfi	r2, r3, #0, #3
   29ffc:	4916      	ldr	r1, [pc, #88]	; (2a058 <net_tcp_change_state+0xb0>)
   29ffe:	4b17      	ldr	r3, [pc, #92]	; (2a05c <net_tcp_change_state+0xb4>)
   2a000:	4819      	ldr	r0, [pc, #100]	; (2a068 <net_tcp_change_state+0xc0>)
   2a002:	1a5b      	subs	r3, r3, r1
   2a004:	f36f 02c5 	bfc	r2, #3, #3
   2a008:	08db      	lsrs	r3, r3, #3
   2a00a:	f363 128f 	bfi	r2, r3, #6, #10
   2a00e:	4914      	ldr	r1, [pc, #80]	; (2a060 <net_tcp_change_state+0xb8>)
   2a010:	f7d8 f86c 	bl	20ec <log_1>
	tcp->state = new_state;
   2a014:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2a018:	f365 3350 	bfi	r3, r5, #13, #4
	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   2a01c:	f015 050f 	ands.w	r5, r5, #15
	tcp->state = new_state;
   2a020:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   2a024:	d113      	bne.n	2a04e <net_tcp_change_state+0xa6>
	if (!tcp->context) {
   2a026:	6823      	ldr	r3, [r4, #0]
   2a028:	b18b      	cbz	r3, 2a04e <net_tcp_change_state+0xa6>
	if (tcp->context->conn_handler) {
   2a02a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   2a02c:	b118      	cbz	r0, 2a036 <net_tcp_change_state+0x8e>
	return net_conn_unregister(handle);
   2a02e:	f7ff fa61 	bl	294f4 <net_conn_unregister>
		tcp->context->conn_handler = NULL;
   2a032:	6823      	ldr	r3, [r4, #0]
   2a034:	62dd      	str	r5, [r3, #44]	; 0x2c
	if (tcp->accept_cb) {
   2a036:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
   2a03a:	b145      	cbz	r5, 2a04e <net_tcp_change_state+0xa6>
		tcp->accept_cb(tcp->context,
   2a03c:	6820      	ldr	r0, [r4, #0]
   2a03e:	6803      	ldr	r3, [r0, #0]
   2a040:	9300      	str	r3, [sp, #0]
   2a042:	2218      	movs	r2, #24
   2a044:	f06f 0333 	mvn.w	r3, #51	; 0x33
   2a048:	f100 0114 	add.w	r1, r0, #20
   2a04c:	47a8      	blx	r5
}
   2a04e:	b003      	add	sp, #12
   2a050:	bd30      	pop	{r4, r5, pc}
   2a052:	bf00      	nop
   2a054:	2000e2b4 	.word	0x2000e2b4
   2a058:	0002ef38 	.word	0x0002ef38
   2a05c:	0002f0a8 	.word	0x0002f0a8
   2a060:	00036fb5 	.word	0x00036fb5
   2a064:	00037134 	.word	0x00037134
   2a068:	0003714f 	.word	0x0003714f

0002a06c <net_tcp_release>:
{
   2a06c:	b570      	push	{r4, r5, r6, lr}
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   2a06e:	4604      	mov	r4, r0
   2a070:	2800      	cmp	r0, #0
   2a072:	d051      	beq.n	2a118 <net_tcp_release+0xac>
   2a074:	4b2a      	ldr	r3, [pc, #168]	; (2a120 <net_tcp_release+0xb4>)
   2a076:	4298      	cmp	r0, r3
   2a078:	d34e      	bcc.n	2a118 <net_tcp_release+0xac>
   2a07a:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
   2a07e:	4298      	cmp	r0, r3
   2a080:	d24a      	bcs.n	2a118 <net_tcp_release+0xac>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   2a082:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2a086:	b1db      	cbz	r3, 2a0c0 <net_tcp_release+0x54>
   2a088:	f1b3 0044 	subs.w	r0, r3, #68	; 0x44
   2a08c:	d018      	beq.n	2a0c0 <net_tcp_release+0x54>
	return node->next;
   2a08e:	681d      	ldr	r5, [r3, #0]
   2a090:	b105      	cbz	r5, 2a094 <net_tcp_release+0x28>
   2a092:	3d44      	subs	r5, #68	; 0x44
	parent->next = child;
   2a094:	2600      	movs	r6, #0
	return node->next;
   2a096:	4603      	mov	r3, r0
Z_GENLIST_REMOVE(slist, snode)
   2a098:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
	return node->next;
   2a09c:	f853 2f44 	ldr.w	r2, [r3, #68]!
	list->head = node;
   2a0a0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   2a0a4:	4299      	cmp	r1, r3
	list->tail = node;
   2a0a6:	bf08      	it	eq
   2a0a8:	f8c4 208c 	streq.w	r2, [r4, #140]	; 0x8c
	parent->next = child;
   2a0ac:	6446      	str	r6, [r0, #68]	; 0x44
		net_pkt_unref(pkt);
   2a0ae:	f7f8 faa6 	bl	225fe <net_pkt_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   2a0b2:	b12d      	cbz	r5, 2a0c0 <net_tcp_release+0x54>
	return node->next;
   2a0b4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   2a0b6:	b103      	cbz	r3, 2a0ba <net_tcp_release+0x4e>
   2a0b8:	3b44      	subs	r3, #68	; 0x44
   2a0ba:	4628      	mov	r0, r5
   2a0bc:	461d      	mov	r5, r3
   2a0be:	e7ea      	b.n	2a096 <net_tcp_release+0x2a>
	sem->count = 0;
   2a0c0:	2500      	movs	r5, #0
	k_delayed_work_cancel(&tcp->retry_timer);
   2a0c2:	f104 0048 	add.w	r0, r4, #72	; 0x48
   2a0c6:	f004 fad2 	bl	2e66e <k_delayed_work_cancel>
   2a0ca:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
	k_delayed_work_cancel(&tcp->ack_timer);
   2a0ce:	f104 0008 	add.w	r0, r4, #8
   2a0d2:	f004 facc 	bl	2e66e <k_delayed_work_cancel>
	k_delayed_work_cancel(&tcp->fin_timer);
   2a0d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2a0da:	f004 fac8 	bl	2e66e <k_delayed_work_cancel>
	k_delayed_work_cancel(&tcp->timewait_timer);
   2a0de:	f104 0068 	add.w	r0, r4, #104	; 0x68
   2a0e2:	f004 fac4 	bl	2e66e <k_delayed_work_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   2a0e6:	4629      	mov	r1, r5
   2a0e8:	4620      	mov	r0, r4
   2a0ea:	f7ff ff5d 	bl	29fa8 <net_tcp_change_state>
	tcp->context = NULL;
   2a0ee:	6025      	str	r5, [r4, #0]
	__asm__ volatile(
   2a0f0:	f04f 0320 	mov.w	r3, #32
   2a0f4:	f3ef 8111 	mrs	r1, BASEPRI
   2a0f8:	f383 8811 	msr	BASEPRI, r3
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   2a0fc:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   2a100:	f3c3 1247 	ubfx	r2, r3, #5, #8
   2a104:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   2a108:	f362 134c 	bfi	r3, r2, #5, #8
   2a10c:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a110:	f381 8811 	msr	BASEPRI, r1
	return 0;
   2a114:	4628      	mov	r0, r5
}
   2a116:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2a118:	f06f 0015 	mvn.w	r0, #21
   2a11c:	e7fb      	b.n	2a116 <net_tcp_release+0xaa>
   2a11e:	bf00      	nop
   2a120:	20002b50 	.word	0x20002b50

0002a124 <net_tcp_prepare_segment>:
{
   2a124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a128:	b087      	sub	sp, #28
   2a12a:	4604      	mov	r4, r0
   2a12c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2a12e:	460d      	mov	r5, r1
   2a130:	4691      	mov	r9, r2
	struct tcp_segment segment = { 0 };
   2a132:	2100      	movs	r1, #0
   2a134:	2218      	movs	r2, #24
   2a136:	4668      	mov	r0, sp
{
   2a138:	4698      	mov	r8, r3
	struct tcp_segment segment = { 0 };
   2a13a:	f7dc fdd2 	bl	6ce2 <memset>
	if (!local) {
   2a13e:	b90e      	cbnz	r6, 2a144 <net_tcp_prepare_segment+0x20>
		local = &tcp->context->local;
   2a140:	6826      	ldr	r6, [r4, #0]
   2a142:	3608      	adds	r6, #8
	if (flags & NET_TCP_ACK) {
   2a144:	06e9      	lsls	r1, r5, #27
	seq = tcp->send_seq;
   2a146:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
	if (flags & NET_TCP_ACK) {
   2a14a:	d50f      	bpl.n	2a16c <net_tcp_prepare_segment+0x48>
	return (enum net_tcp_state)tcp->state;
   2a14c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2a150:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   2a154:	2b07      	cmp	r3, #7
   2a156:	d13d      	bne.n	2a1d4 <net_tcp_prepare_segment+0xb0>
			if (flags & NET_TCP_FIN) {
   2a158:	07ea      	lsls	r2, r5, #31
   2a15a:	d503      	bpl.n	2a164 <net_tcp_prepare_segment+0x40>
				flags &= ~NET_TCP_FIN;
   2a15c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   2a160:	2109      	movs	r1, #9
   2a162:	e000      	b.n	2a166 <net_tcp_prepare_segment+0x42>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   2a164:	210a      	movs	r1, #10
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   2a166:	4620      	mov	r0, r4
   2a168:	f7ff ff1e 	bl	29fa8 <net_tcp_change_state>
	if (flags & NET_TCP_FIN) {
   2a16c:	07eb      	lsls	r3, r5, #31
   2a16e:	d510      	bpl.n	2a192 <net_tcp_prepare_segment+0x6e>
   2a170:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2a174:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   2a178:	330d      	adds	r3, #13
   2a17a:	f003 030f 	and.w	r3, r3, #15
   2a17e:	2b01      	cmp	r3, #1
		flags |= NET_TCP_ACK;
   2a180:	f045 0510 	orr.w	r5, r5, #16
		seq++;
   2a184:	f107 0701 	add.w	r7, r7, #1
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   2a188:	d803      	bhi.n	2a192 <net_tcp_prepare_segment+0x6e>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   2a18a:	2107      	movs	r1, #7
   2a18c:	4620      	mov	r0, r4
   2a18e:	f7ff ff0b 	bl	29fa8 <net_tcp_change_state>
	return tcp->recv_wnd;
   2a192:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
	segment.dst_addr = remote;
   2a196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2a198:	9205      	str	r2, [sp, #20]
	segment.wnd = wnd;
   2a19a:	f8ad 3008 	strh.w	r3, [sp, #8]
	segment.seq = tcp->send_seq;
   2a19e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   2a1a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
	segment.seq = tcp->send_seq;
   2a1a4:	9200      	str	r2, [sp, #0]
	segment.ack = tcp->send_ack;
   2a1a6:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   2a1aa:	9201      	str	r2, [sp, #4]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   2a1ac:	4669      	mov	r1, sp
   2a1ae:	681a      	ldr	r2, [r3, #0]
	segment.src_addr = (struct sockaddr_ptr *)local;
   2a1b0:	9604      	str	r6, [sp, #16]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   2a1b2:	4620      	mov	r0, r4
	segment.flags = flags;
   2a1b4:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.options = options;
   2a1b8:	f8cd 900c 	str.w	r9, [sp, #12]
	segment.optlen = optlen;
   2a1bc:	f88d 800b 	strb.w	r8, [sp, #11]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   2a1c0:	f7ff fd12 	bl	29be8 <prepare_segment.isra.19>
	if (status < 0) {
   2a1c4:	2800      	cmp	r0, #0
	return 0;
   2a1c6:	bfa4      	itt	ge
   2a1c8:	2000      	movge	r0, #0
	tcp->send_seq = seq;
   2a1ca:	f8c4 7090 	strge.w	r7, [r4, #144]	; 0x90
}
   2a1ce:	b007      	add	sp, #28
   2a1d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   2a1d4:	2b08      	cmp	r3, #8
   2a1d6:	d0c3      	beq.n	2a160 <net_tcp_prepare_segment+0x3c>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   2a1d8:	2b05      	cmp	r3, #5
   2a1da:	d1c7      	bne.n	2a16c <net_tcp_prepare_segment+0x48>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   2a1dc:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   2a1e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2a1e4:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
			flags |= NET_TCP_FIN;
   2a1e8:	f045 0501 	orr.w	r5, r5, #1
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   2a1ec:	2106      	movs	r1, #6
   2a1ee:	e7ba      	b.n	2a166 <net_tcp_prepare_segment+0x42>

0002a1f0 <net_tcp_prepare_ack>:
{
   2a1f0:	b570      	push	{r4, r5, r6, lr}
   2a1f2:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
	switch (net_tcp_get_state(tcp)) {
   2a1f6:	f3c3 3343 	ubfx	r3, r3, #13, #4
   2a1fa:	2b03      	cmp	r3, #3
{
   2a1fc:	b088      	sub	sp, #32
   2a1fe:	4604      	mov	r4, r0
   2a200:	460d      	mov	r5, r1
   2a202:	4616      	mov	r6, r2
	switch (net_tcp_get_state(tcp)) {
   2a204:	d00a      	beq.n	2a21c <net_tcp_prepare_ack+0x2c>
   2a206:	d302      	bcc.n	2a20e <net_tcp_prepare_ack+0x1e>
   2a208:	3b06      	subs	r3, #6
   2a20a:	2b01      	cmp	r3, #1
   2a20c:	d915      	bls.n	2a23a <net_tcp_prepare_ack+0x4a>
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   2a20e:	2300      	movs	r3, #0
   2a210:	e9cd 5601 	strd	r5, r6, [sp, #4]
   2a214:	9300      	str	r3, [sp, #0]
   2a216:	461a      	mov	r2, r3
   2a218:	2110      	movs	r1, #16
   2a21a:	e00c      	b.n	2a236 <net_tcp_prepare_ack+0x46>
		net_tcp_set_syn_opt(tcp, options, &optionlen);
   2a21c:	f10d 0217 	add.w	r2, sp, #23
   2a220:	a906      	add	r1, sp, #24
   2a222:	f7ff fe2f 	bl	29e84 <net_tcp_set_syn_opt>
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   2a226:	e9cd 5601 	strd	r5, r6, [sp, #4]
   2a22a:	2200      	movs	r2, #0
   2a22c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2a230:	9200      	str	r2, [sp, #0]
   2a232:	2112      	movs	r1, #18
   2a234:	aa06      	add	r2, sp, #24
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   2a236:	4620      	mov	r0, r4
   2a238:	e005      	b.n	2a246 <net_tcp_prepare_ack+0x56>
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   2a23a:	2300      	movs	r3, #0
   2a23c:	e9cd 1201 	strd	r1, r2, [sp, #4]
   2a240:	9300      	str	r3, [sp, #0]
   2a242:	461a      	mov	r2, r3
   2a244:	2111      	movs	r1, #17
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   2a246:	f7ff ff6d 	bl	2a124 <net_tcp_prepare_segment>
}
   2a24a:	b008      	add	sp, #32
   2a24c:	bd70      	pop	{r4, r5, r6, pc}
	...

0002a250 <net_tcp_queue_data>:
{
   2a250:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a252:	b087      	sub	sp, #28
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   2a254:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	size_t data_len = net_pkt_get_len(pkt);
   2a256:	694f      	ldr	r7, [r1, #20]
{
   2a258:	9105      	str	r1, [sp, #20]
   2a25a:	4604      	mov	r4, r0
	size_t bytes = 0;
   2a25c:	2500      	movs	r5, #0
	while (buf) {
   2a25e:	2f00      	cmp	r7, #0
   2a260:	d13d      	bne.n	2a2de <net_tcp_queue_data+0x8e>
	if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   2a262:	4620      	mov	r0, r4
   2a264:	f7ff fbdc 	bl	29a20 <net_context_get_state>
   2a268:	2802      	cmp	r0, #2
   2a26a:	d140      	bne.n	2a2ee <net_tcp_queue_data+0x9e>
	NET_ASSERT(context->tcp);
   2a26c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2a26e:	b9a3      	cbnz	r3, 2a29a <net_tcp_queue_data+0x4a>
   2a270:	4b22      	ldr	r3, [pc, #136]	; (2a2fc <net_tcp_queue_data+0xac>)
   2a272:	681b      	ldr	r3, [r3, #0]
   2a274:	075b      	lsls	r3, r3, #29
   2a276:	d010      	beq.n	2a29a <net_tcp_queue_data+0x4a>
   2a278:	2301      	movs	r3, #1
   2a27a:	f04f 0200 	mov.w	r2, #0
   2a27e:	f363 0202 	bfi	r2, r3, #0, #3
   2a282:	491f      	ldr	r1, [pc, #124]	; (2a300 <net_tcp_queue_data+0xb0>)
   2a284:	4b1f      	ldr	r3, [pc, #124]	; (2a304 <net_tcp_queue_data+0xb4>)
   2a286:	4820      	ldr	r0, [pc, #128]	; (2a308 <net_tcp_queue_data+0xb8>)
   2a288:	1a5b      	subs	r3, r3, r1
   2a28a:	f367 02c5 	bfi	r2, r7, #3, #3
   2a28e:	08db      	lsrs	r3, r3, #3
   2a290:	f363 128f 	bfi	r2, r3, #6, #10
   2a294:	491d      	ldr	r1, [pc, #116]	; (2a30c <net_tcp_queue_data+0xbc>)
   2a296:	f7d7 ff29 	bl	20ec <log_1>
	if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   2a29a:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2a29c:	f8b0 20bc 	ldrh.w	r2, [r0, #188]	; 0xbc
   2a2a0:	f3c2 1247 	ubfx	r2, r2, #5, #8
   2a2a4:	f012 0208 	ands.w	r2, r2, #8
   2a2a8:	d124      	bne.n	2a2f4 <net_tcp_queue_data+0xa4>
	net_pkt_set_appdatalen(pkt, net_pkt_get_len(pkt));
   2a2aa:	9905      	ldr	r1, [sp, #20]
   2a2ac:	694b      	ldr	r3, [r1, #20]
   2a2ae:	b9d3      	cbnz	r3, 2a2e6 <net_tcp_queue_data+0x96>
   2a2b0:	87ca      	strh	r2, [r1, #62]	; 0x3e
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   2a2b2:	aa05      	add	r2, sp, #20
   2a2b4:	e9cd 6201 	strd	r6, r2, [sp, #4]
   2a2b8:	9300      	str	r3, [sp, #0]
   2a2ba:	461a      	mov	r2, r3
   2a2bc:	2118      	movs	r1, #24
   2a2be:	f7ff ff31 	bl	2a124 <net_tcp_prepare_segment>
	if (ret) {
   2a2c2:	b950      	cbnz	r0, 2a2da <net_tcp_queue_data+0x8a>
	context->tcp->send_seq += data_len;
   2a2c4:	4620      	mov	r0, r4
	return net_tcp_queue_pkt(context, pkt);
   2a2c6:	9905      	ldr	r1, [sp, #20]
	context->tcp->send_seq += data_len;
   2a2c8:	f850 2f44 	ldr.w	r2, [r0, #68]!
   2a2cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   2a2d0:	441d      	add	r5, r3
   2a2d2:	f8c2 5090 	str.w	r5, [r2, #144]	; 0x90
	return net_tcp_queue_pkt(context, pkt);
   2a2d6:	f7ff fc29 	bl	29b2c <net_tcp_queue_pkt.isra.20>
}
   2a2da:	b007      	add	sp, #28
   2a2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
   2a2de:	89bb      	ldrh	r3, [r7, #12]
		buf = buf->frags;
   2a2e0:	683f      	ldr	r7, [r7, #0]
		bytes += buf->len;
   2a2e2:	441d      	add	r5, r3
   2a2e4:	e7bb      	b.n	2a25e <net_tcp_queue_data+0xe>
   2a2e6:	899f      	ldrh	r7, [r3, #12]
		buf = buf->frags;
   2a2e8:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2a2ea:	443a      	add	r2, r7
   2a2ec:	e7df      	b.n	2a2ae <net_tcp_queue_data+0x5e>
		return -ENOTCONN;
   2a2ee:	f06f 0038 	mvn.w	r0, #56	; 0x38
   2a2f2:	e7f2      	b.n	2a2da <net_tcp_queue_data+0x8a>
		return -ESHUTDOWN;
   2a2f4:	f06f 0039 	mvn.w	r0, #57	; 0x39
   2a2f8:	e7ef      	b.n	2a2da <net_tcp_queue_data+0x8a>
   2a2fa:	bf00      	nop
   2a2fc:	2000e2b4 	.word	0x2000e2b4
   2a300:	0002ef38 	.word	0x0002ef38
   2a304:	0002f0a8 	.word	0x0002f0a8
   2a308:	000371f7 	.word	0x000371f7
   2a30c:	00036f7c 	.word	0x00036f7c

0002a310 <send_syn_segment.isra.26>:
static inline int send_syn_segment(struct net_context *context,
   2a310:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a312:	461c      	mov	r4, r3
   2a314:	b089      	sub	sp, #36	; 0x24
	struct net_pkt *pkt = NULL;
   2a316:	2300      	movs	r3, #0
	if (flags == NET_TCP_SYN) {
   2a318:	2c02      	cmp	r4, #2
static inline int send_syn_segment(struct net_context *context,
   2a31a:	4605      	mov	r5, r0
   2a31c:	460e      	mov	r6, r1
   2a31e:	4617      	mov	r7, r2
	struct net_pkt *pkt = NULL;
   2a320:	9305      	str	r3, [sp, #20]
	u8_t optionlen = 0;
   2a322:	f88d 3013 	strb.w	r3, [sp, #19]
	if (flags == NET_TCP_SYN) {
   2a326:	d105      	bne.n	2a334 <send_syn_segment.isra.26+0x24>
		net_tcp_set_syn_opt(context->tcp, options, &optionlen);
   2a328:	f10d 0213 	add.w	r2, sp, #19
   2a32c:	a906      	add	r1, sp, #24
   2a32e:	6800      	ldr	r0, [r0, #0]
   2a330:	f7ff fda8 	bl	29e84 <net_tcp_set_syn_opt>
	ret = net_tcp_prepare_segment(context->tcp, flags, options, optionlen,
   2a334:	aa05      	add	r2, sp, #20
   2a336:	e9cd 7201 	strd	r7, r2, [sp, #4]
   2a33a:	b2e1      	uxtb	r1, r4
   2a33c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2a340:	9600      	str	r6, [sp, #0]
   2a342:	aa06      	add	r2, sp, #24
   2a344:	6828      	ldr	r0, [r5, #0]
   2a346:	f7ff feed 	bl	2a124 <net_tcp_prepare_segment>
	if (ret) {
   2a34a:	4604      	mov	r4, r0
   2a34c:	b938      	cbnz	r0, 2a35e <send_syn_segment.isra.26+0x4e>
	ret = net_send_data(pkt);
   2a34e:	9805      	ldr	r0, [sp, #20]
   2a350:	f7f6 fa5c 	bl	2080c <net_send_data>
	if (ret < 0) {
   2a354:	1e04      	subs	r4, r0, #0
   2a356:	da05      	bge.n	2a364 <send_syn_segment.isra.26+0x54>
		net_pkt_unref(pkt);
   2a358:	9805      	ldr	r0, [sp, #20]
   2a35a:	f7f8 f950 	bl	225fe <net_pkt_unref>
}
   2a35e:	4620      	mov	r0, r4
   2a360:	b009      	add	sp, #36	; 0x24
   2a362:	bdf0      	pop	{r4, r5, r6, r7, pc}
	context->tcp->send_seq++;
   2a364:	682a      	ldr	r2, [r5, #0]
   2a366:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   2a36a:	3301      	adds	r3, #1
   2a36c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   2a370:	e7f5      	b.n	2a35e <send_syn_segment.isra.26+0x4e>

0002a372 <handle_timewait_timeout>:
{
   2a372:	b538      	push	{r3, r4, r5, lr}
   2a374:	6d43      	ldr	r3, [r0, #84]	; 0x54
	if (net_tcp_get_state(tcp) == NET_TCP_TIME_WAIT) {
   2a376:	f3c3 3343 	ubfx	r3, r3, #13, #4
   2a37a:	2b09      	cmp	r3, #9
{
   2a37c:	4604      	mov	r4, r0
	if (net_tcp_get_state(tcp) == NET_TCP_TIME_WAIT) {
   2a37e:	d112      	bne.n	2a3a6 <handle_timewait_timeout+0x34>
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   2a380:	3868      	subs	r0, #104	; 0x68
   2a382:	2100      	movs	r1, #0
   2a384:	f7ff fe10 	bl	29fa8 <net_tcp_change_state>
		if (tcp->context->recv_cb) {
   2a388:	f854 0c68 	ldr.w	r0, [r4, #-104]
   2a38c:	6b05      	ldr	r5, [r0, #48]	; 0x30
   2a38e:	b125      	cbz	r5, 2a39a <handle_timewait_timeout+0x28>
			tcp->context->recv_cb(tcp->context, NULL, 0,
   2a390:	2200      	movs	r2, #0
   2a392:	f854 3c64 	ldr.w	r3, [r4, #-100]
   2a396:	4611      	mov	r1, r2
   2a398:	47a8      	blx	r5
		net_context_unref(tcp->context);
   2a39a:	f854 0c68 	ldr.w	r0, [r4, #-104]
}
   2a39e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_context_unref(tcp->context);
   2a3a2:	f7f5 bd33 	b.w	1fe0c <net_context_unref>
}
   2a3a6:	bd38      	pop	{r3, r4, r5, pc}

0002a3a8 <handle_ack_timeout>:
   2a3a8:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   2a3ac:	f3c3 3343 	ubfx	r3, r3, #13, #4
   2a3b0:	2b06      	cmp	r3, #6
{
   2a3b2:	b510      	push	{r4, lr}
   2a3b4:	4604      	mov	r4, r0
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   2a3b6:	d109      	bne.n	2a3cc <handle_ack_timeout+0x24>
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   2a3b8:	3808      	subs	r0, #8
   2a3ba:	2100      	movs	r1, #0
   2a3bc:	f7ff fdf4 	bl	29fa8 <net_tcp_change_state>
		net_context_unref(tcp->context);
   2a3c0:	f854 0c08 	ldr.w	r0, [r4, #-8]
}
   2a3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_context_unref(tcp->context);
   2a3c8:	f7f5 bd20 	b.w	1fe0c <net_context_unref>
}
   2a3cc:	bd10      	pop	{r4, pc}
	...

0002a3d0 <net_tcp_foreach>:
{
   2a3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a3d4:	4605      	mov	r5, r0
   2a3d6:	460e      	mov	r6, r1
	__asm__ volatile(
   2a3d8:	f04f 0220 	mov.w	r2, #32
   2a3dc:	f3ef 8311 	mrs	r3, BASEPRI
   2a3e0:	f382 8811 	msr	BASEPRI, r2
   2a3e4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 2a41c <net_tcp_foreach+0x4c>
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   2a3e8:	2400      	movs	r4, #0
   2a3ea:	27c0      	movs	r7, #192	; 0xc0
   2a3ec:	fb07 8204 	mla	r2, r7, r4, r8
		if (!net_tcp_is_used(&tcp_context[i])) {
   2a3f0:	4610      	mov	r0, r2
   2a3f2:	f7ff fabb 	bl	2996c <net_tcp_is_used>
   2a3f6:	b150      	cbz	r0, 2a40e <net_tcp_foreach+0x3e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a3f8:	f383 8811 	msr	BASEPRI, r3
		cb(&tcp_context[i], user_data);
   2a3fc:	4631      	mov	r1, r6
   2a3fe:	4610      	mov	r0, r2
   2a400:	47a8      	blx	r5
	__asm__ volatile(
   2a402:	f04f 0220 	mov.w	r2, #32
   2a406:	f3ef 8311 	mrs	r3, BASEPRI
   2a40a:	f382 8811 	msr	BASEPRI, r2
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   2a40e:	3401      	adds	r4, #1
   2a410:	2c05      	cmp	r4, #5
   2a412:	d1eb      	bne.n	2a3ec <net_tcp_foreach+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a414:	f383 8811 	msr	BASEPRI, r3
}
   2a418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a41c:	20002b50 	.word	0x20002b50

0002a420 <net_tcp_get_hdr>:
{
   2a420:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2a422:	4606      	mov	r6, r0
   2a424:	460c      	mov	r4, r1
	tcp_hdr = net_pkt_tcp_data(pkt);
   2a426:	f7f8 fbf1 	bl	22c0c <net_pkt_tcp_data>
	if (!tcp_hdr) {
   2a42a:	4605      	mov	r5, r0
   2a42c:	b9b8      	cbnz	r0, 2a45e <net_tcp_get_hdr+0x3e>
		NET_ERR("NULL TCP header!");
   2a42e:	4b41      	ldr	r3, [pc, #260]	; (2a534 <net_tcp_get_hdr+0x114>)
   2a430:	681b      	ldr	r3, [r3, #0]
   2a432:	075b      	lsls	r3, r3, #29
   2a434:	d010      	beq.n	2a458 <net_tcp_get_hdr+0x38>
   2a436:	2301      	movs	r3, #1
   2a438:	f04f 0200 	mov.w	r2, #0
   2a43c:	f363 0202 	bfi	r2, r3, #0, #3
   2a440:	493d      	ldr	r1, [pc, #244]	; (2a538 <net_tcp_get_hdr+0x118>)
   2a442:	4b3e      	ldr	r3, [pc, #248]	; (2a53c <net_tcp_get_hdr+0x11c>)
   2a444:	1a5b      	subs	r3, r3, r1
   2a446:	f360 02c5 	bfi	r2, r0, #3, #3
   2a44a:	08db      	lsrs	r3, r3, #3
   2a44c:	f363 128f 	bfi	r2, r3, #6, #10
   2a450:	493b      	ldr	r1, [pc, #236]	; (2a540 <net_tcp_get_hdr+0x120>)
   2a452:	483c      	ldr	r0, [pc, #240]	; (2a544 <net_tcp_get_hdr+0x124>)
   2a454:	f7d7 fe4a 	bl	20ec <log_1>
}
   2a458:	4628      	mov	r0, r5
   2a45a:	b004      	add	sp, #16
   2a45c:	bd70      	pop	{r4, r5, r6, pc}
	if (net_tcp_header_fits(pkt, tcp_hdr)) {
   2a45e:	4601      	mov	r1, r0
   2a460:	4630      	mov	r0, r6
   2a462:	f7ff fb59 	bl	29b18 <net_tcp_header_fits>
   2a466:	2800      	cmp	r0, #0
   2a468:	d1f6      	bne.n	2a458 <net_tcp_get_hdr+0x38>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2a46a:	f8b6 304c 	ldrh.w	r3, [r6, #76]	; 0x4c
   2a46e:	f896 1041 	ldrb.w	r1, [r6, #65]	; 0x41
   2a472:	9400      	str	r4, [sp, #0]
   2a474:	4419      	add	r1, r3
   2a476:	f10d 020e 	add.w	r2, sp, #14
   2a47a:	2302      	movs	r3, #2
   2a47c:	b289      	uxth	r1, r1
   2a47e:	6970      	ldr	r0, [r6, #20]
   2a480:	f7f8 fa56 	bl	22930 <net_frag_read>
			     (u8_t *)&hdr->dst_port);
   2a484:	1ca3      	adds	r3, r4, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   2a486:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2a48a:	9300      	str	r3, [sp, #0]
   2a48c:	f10d 020e 	add.w	r2, sp, #14
   2a490:	2302      	movs	r3, #2
   2a492:	f7f8 fa4d 	bl	22930 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->seq), hdr->seq);
   2a496:	1d23      	adds	r3, r4, #4
   2a498:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2a49c:	9300      	str	r3, [sp, #0]
   2a49e:	f10d 020e 	add.w	r2, sp, #14
   2a4a2:	2304      	movs	r3, #4
   2a4a4:	f7f8 fa44 	bl	22930 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->ack), hdr->ack);
   2a4a8:	f104 0308 	add.w	r3, r4, #8
   2a4ac:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2a4b0:	9300      	str	r3, [sp, #0]
   2a4b2:	f10d 020e 	add.w	r2, sp, #14
   2a4b6:	2304      	movs	r3, #4
   2a4b8:	f7f8 fa3a 	bl	22930 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->offset);
   2a4bc:	f104 030c 	add.w	r3, r4, #12
	return net_frag_read(frag, offset, pos, 1, value);
   2a4c0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2a4c4:	9300      	str	r3, [sp, #0]
   2a4c6:	f10d 020e 	add.w	r2, sp, #14
   2a4ca:	2301      	movs	r3, #1
   2a4cc:	f7f8 fa30 	bl	22930 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   2a4d0:	f104 030d 	add.w	r3, r4, #13
   2a4d4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2a4d8:	9300      	str	r3, [sp, #0]
   2a4da:	f10d 020e 	add.w	r2, sp, #14
   2a4de:	2301      	movs	r3, #1
   2a4e0:	f7f8 fa26 	bl	22930 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd);
   2a4e4:	f104 030e 	add.w	r3, r4, #14
   2a4e8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2a4ec:	9300      	str	r3, [sp, #0]
   2a4ee:	f10d 020e 	add.w	r2, sp, #14
   2a4f2:	2302      	movs	r3, #2
   2a4f4:	f7f8 fa1c 	bl	22930 <net_frag_read>
			     (u8_t *)&hdr->chksum);
   2a4f8:	f104 0310 	add.w	r3, r4, #16
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   2a4fc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2a500:	9300      	str	r3, [sp, #0]
   2a502:	f10d 020e 	add.w	r2, sp, #14
   2a506:	2302      	movs	r3, #2
   2a508:	f7f8 fa12 	bl	22930 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->urg), hdr->urg);
   2a50c:	f104 0312 	add.w	r3, r4, #18
   2a510:	9300      	str	r3, [sp, #0]
   2a512:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2a516:	2302      	movs	r3, #2
   2a518:	f10d 020e 	add.w	r2, sp, #14
   2a51c:	f7f8 fa08 	bl	22930 <net_frag_read>
	if (!frag && pos == 0xffff) {
   2a520:	b930      	cbnz	r0, 2a530 <net_tcp_get_hdr+0x110>
   2a522:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		return NULL;
   2a526:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2a52a:	429a      	cmp	r2, r3
   2a52c:	bf08      	it	eq
   2a52e:	2400      	moveq	r4, #0
   2a530:	4625      	mov	r5, r4
   2a532:	e791      	b.n	2a458 <net_tcp_get_hdr+0x38>
   2a534:	2000e2b4 	.word	0x2000e2b4
   2a538:	0002ef38 	.word	0x0002ef38
   2a53c:	0002f0a8 	.word	0x0002f0a8
   2a540:	00036fca 	.word	0x00036fca
   2a544:	000371e2 	.word	0x000371e2

0002a548 <net_tcp_ack_received>:
{
   2a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_tcp *tcp = ctx->tcp;
   2a54c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   2a54e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   2a552:	1acb      	subs	r3, r1, r3
	if (net_tcp_seq_greater(ack, ctx->tcp->send_seq)) {
   2a554:	2b00      	cmp	r3, #0
{
   2a556:	b08b      	sub	sp, #44	; 0x2c
   2a558:	4680      	mov	r8, r0
   2a55a:	468a      	mov	sl, r1
	if (net_tcp_seq_greater(ack, ctx->tcp->send_seq)) {
   2a55c:	dc25      	bgt.n	2a5aa <net_tcp_ack_received+0x62>
   2a55e:	4b5e      	ldr	r3, [pc, #376]	; (2a6d8 <net_tcp_ack_received+0x190>)
			NET_ERR("pkt %p has no TCP header", pkt);
   2a560:	4a5e      	ldr	r2, [pc, #376]	; (2a6dc <net_tcp_ack_received+0x194>)
   2a562:	f8df b17c 	ldr.w	fp, [pc, #380]	; 2a6e0 <net_tcp_ack_received+0x198>
   2a566:	1a9b      	subs	r3, r3, r2
   2a568:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   2a56c:	9301      	str	r3, [sp, #4]
	bool valid_ack = false;
   2a56e:	2400      	movs	r4, #0
Z_GENLIST_IS_EMPTY(slist)
   2a570:	f8d5 6088 	ldr.w	r6, [r5, #136]	; 0x88
	while (!sys_slist_is_empty(list)) {
   2a574:	bbae      	cbnz	r6, 2a5e2 <net_tcp_ack_received+0x9a>
	if (valid_ack) {
   2a576:	2c00      	cmp	r4, #0
   2a578:	f000 80ab 	beq.w	2a6d2 <net_tcp_ack_received+0x18a>
		restart_timer(ctx->tcp);
   2a57c:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   2a580:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
   2a584:	f105 0048 	add.w	r0, r5, #72	; 0x48
   2a588:	2b00      	cmp	r3, #0
   2a58a:	f000 8088 	beq.w	2a69e <net_tcp_ack_received+0x156>
		tcp->flags |= NET_TCP_RETRYING;
   2a58e:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
   2a592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2a596:	f8a5 30bc 	strh.w	r3, [r5, #188]	; 0xbc
		tcp->retry_timeout_shift = 0;
   2a59a:	f36f 0304 	bfc	r3, #0, #5
   2a59e:	f885 30bc 	strb.w	r3, [r5, #188]	; 0xbc
		k_delayed_work_submit(&tcp->retry_timer, retry_timeout(tcp));
   2a5a2:	21c8      	movs	r1, #200	; 0xc8
   2a5a4:	f7ff f9da 	bl	2995c <k_delayed_work_submit>
   2a5a8:	e017      	b.n	2a5da <net_tcp_ack_received+0x92>
		NET_ERR("ctx %p: ACK for unsent data", ctx);
   2a5aa:	4b4d      	ldr	r3, [pc, #308]	; (2a6e0 <net_tcp_ack_received+0x198>)
   2a5ac:	681c      	ldr	r4, [r3, #0]
   2a5ae:	f014 0407 	ands.w	r4, r4, #7
   2a5b2:	d012      	beq.n	2a5da <net_tcp_ack_received+0x92>
   2a5b4:	2201      	movs	r2, #1
   2a5b6:	f04f 0300 	mov.w	r3, #0
   2a5ba:	f362 0302 	bfi	r3, r2, #0, #3
   2a5be:	4947      	ldr	r1, [pc, #284]	; (2a6dc <net_tcp_ack_received+0x194>)
   2a5c0:	4a45      	ldr	r2, [pc, #276]	; (2a6d8 <net_tcp_ack_received+0x190>)
   2a5c2:	1a52      	subs	r2, r2, r1
   2a5c4:	08d2      	lsrs	r2, r2, #3
   2a5c6:	f36f 03c5 	bfc	r3, #3, #3
   2a5ca:	f362 138f 	bfi	r3, r2, #6, #10
   2a5ce:	4945      	ldr	r1, [pc, #276]	; (2a6e4 <net_tcp_ack_received+0x19c>)
   2a5d0:	4602      	mov	r2, r0
   2a5d2:	4845      	ldr	r0, [pc, #276]	; (2a6e8 <net_tcp_ack_received+0x1a0>)
   2a5d4:	f7d7 fd9e 	bl	2114 <log_2>
		return false;
   2a5d8:	2400      	movs	r4, #0
}
   2a5da:	4620      	mov	r0, r4
   2a5dc:	b00b      	add	sp, #44	; 0x2c
   2a5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   2a5e2:	f1a6 0744 	sub.w	r7, r6, #68	; 0x44
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2a5e6:	a905      	add	r1, sp, #20
   2a5e8:	4638      	mov	r0, r7
   2a5ea:	f7ff ff19 	bl	2a420 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   2a5ee:	bb00      	cbnz	r0, 2a632 <net_tcp_ack_received+0xea>
			NET_ERR("pkt %p has no TCP header", pkt);
   2a5f0:	f8db 3000 	ldr.w	r3, [fp]
   2a5f4:	0759      	lsls	r1, r3, #29
   2a5f6:	d00d      	beq.n	2a614 <net_tcp_ack_received+0xcc>
   2a5f8:	2301      	movs	r3, #1
   2a5fa:	f363 0902 	bfi	r9, r3, #0, #3
   2a5fe:	9b01      	ldr	r3, [sp, #4]
   2a600:	4938      	ldr	r1, [pc, #224]	; (2a6e4 <net_tcp_ack_received+0x19c>)
   2a602:	f360 09c5 	bfi	r9, r0, #3, #3
   2a606:	f363 198f 	bfi	r9, r3, #6, #10
   2a60a:	464b      	mov	r3, r9
   2a60c:	463a      	mov	r2, r7
   2a60e:	4837      	ldr	r0, [pc, #220]	; (2a6ec <net_tcp_ack_received+0x1a4>)
   2a610:	f7d7 fd80 	bl	2114 <log_2>
Z_GENLIST_REMOVE(slist, snode)
   2a614:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
	return node->next;
   2a618:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   2a61a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   2a61e:	4296      	cmp	r6, r2
	list->tail = node;
   2a620:	bf08      	it	eq
   2a622:	f8c5 308c 	streq.w	r3, [r5, #140]	; 0x8c
	parent->next = child;
   2a626:	2300      	movs	r3, #0
   2a628:	6033      	str	r3, [r6, #0]
			net_pkt_unref(pkt);
   2a62a:	4638      	mov	r0, r7
   2a62c:	f7f7 ffe7 	bl	225fe <net_pkt_unref>
   2a630:	e79e      	b.n	2a570 <net_tcp_ack_received+0x28>
		if (tcp_hdr->flags & NET_TCP_SYN) {
   2a632:	7b43      	ldrb	r3, [r0, #13]
		seq_len = net_pkt_appdatalen(pkt);
   2a634:	f836 1c06 	ldrh.w	r1, [r6, #-6]
		if (tcp_hdr->flags & NET_TCP_SYN) {
   2a638:	079a      	lsls	r2, r3, #30
			seq_len += 1;
   2a63a:	bf48      	it	mi
   2a63c:	3101      	addmi	r1, #1
		if (tcp_hdr->flags & NET_TCP_FIN) {
   2a63e:	f013 0301 	ands.w	r3, r3, #1
			seq_len += 1;
   2a642:	bf18      	it	ne
   2a644:	3101      	addne	r1, #1
		last_seq = sys_get_be32(tcp_hdr->seq) + seq_len - 1;
   2a646:	3004      	adds	r0, #4
   2a648:	e9cd 1302 	strd	r1, r3, [sp, #8]
   2a64c:	f7ff f977 	bl	2993e <sys_get_be32>
   2a650:	f10a 0201 	add.w	r2, sl, #1
   2a654:	9902      	ldr	r1, [sp, #8]
   2a656:	1a10      	subs	r0, r2, r0
   2a658:	1a40      	subs	r0, r0, r1
		if (!net_tcp_seq_greater(ack, last_seq)) {
   2a65a:	2800      	cmp	r0, #0
   2a65c:	dd8b      	ble.n	2a576 <net_tcp_ack_received+0x2e>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   2a65e:	9b03      	ldr	r3, [sp, #12]
   2a660:	b14b      	cbz	r3, 2a676 <net_tcp_ack_received+0x12e>
   2a662:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   2a666:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   2a66a:	2b07      	cmp	r3, #7
   2a66c:	d113      	bne.n	2a696 <net_tcp_ack_received+0x14e>
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   2a66e:	2108      	movs	r1, #8
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   2a670:	4628      	mov	r0, r5
   2a672:	f7ff fc99 	bl	29fa8 <net_tcp_change_state>
Z_GENLIST_REMOVE(slist, snode)
   2a676:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
	return node->next;
   2a67a:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   2a67c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   2a680:	4296      	cmp	r6, r2
	list->tail = node;
   2a682:	bf08      	it	eq
   2a684:	f8c5 308c 	streq.w	r3, [r5, #140]	; 0x8c
	parent->next = child;
   2a688:	2300      	movs	r3, #0
   2a68a:	6033      	str	r3, [r6, #0]
		net_pkt_unref(pkt);
   2a68c:	4638      	mov	r0, r7
   2a68e:	f7f7 ffb6 	bl	225fe <net_pkt_unref>
		valid_ack = true;
   2a692:	2401      	movs	r4, #1
   2a694:	e76c      	b.n	2a570 <net_tcp_ack_received+0x28>
			} else if (s == NET_TCP_CLOSING) {
   2a696:	2b0a      	cmp	r3, #10
   2a698:	d1ed      	bne.n	2a676 <net_tcp_ack_received+0x12e>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   2a69a:	2109      	movs	r1, #9
   2a69c:	e7e8      	b.n	2a670 <net_tcp_ack_received+0x128>
			(tcp->fin_sent && tcp->fin_rcvd)) {
   2a69e:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
	} else if (CONFIG_NET_TCP_TIME_WAIT_DELAY != 0 &&
   2a6a2:	f003 0306 	and.w	r3, r3, #6
   2a6a6:	2b06      	cmp	r3, #6
   2a6a8:	d106      	bne.n	2a6b8 <net_tcp_ack_received+0x170>
		k_delayed_work_submit(&tcp->retry_timer,
   2a6aa:	21fa      	movs	r1, #250	; 0xfa
   2a6ac:	f7ff f956 	bl	2995c <k_delayed_work_submit>
		net_context_ref(tcp->context);
   2a6b0:	6828      	ldr	r0, [r5, #0]
   2a6b2:	f7f5 fb9d 	bl	1fdf0 <net_context_ref>
   2a6b6:	e790      	b.n	2a5da <net_tcp_ack_received+0x92>
		k_delayed_work_cancel(&tcp->retry_timer);
   2a6b8:	f003 ffd9 	bl	2e66e <k_delayed_work_cancel>
		tcp->flags &= ~NET_TCP_RETRYING;
   2a6bc:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
   2a6c0:	f3c3 1247 	ubfx	r2, r3, #5, #8
   2a6c4:	f022 0210 	bic.w	r2, r2, #16
   2a6c8:	f362 134c 	bfi	r3, r2, #5, #8
   2a6cc:	f8a5 30bc 	strh.w	r3, [r5, #188]	; 0xbc
   2a6d0:	e783      	b.n	2a5da <net_tcp_ack_received+0x92>
	return true;
   2a6d2:	2401      	movs	r4, #1
   2a6d4:	e781      	b.n	2a5da <net_tcp_ack_received+0x92>
   2a6d6:	bf00      	nop
   2a6d8:	0002f0a8 	.word	0x0002f0a8
   2a6dc:	0002ef38 	.word	0x0002ef38
   2a6e0:	2000e2b4 	.word	0x2000e2b4
   2a6e4:	00036fa0 	.word	0x00036fa0
   2a6e8:	000370f7 	.word	0x000370f7
   2a6ec:	00037117 	.word	0x00037117

0002a6f0 <net_tcp_validate_seq>:
{
   2a6f0:	b510      	push	{r4, lr}
   2a6f2:	b086      	sub	sp, #24
   2a6f4:	4604      	mov	r4, r0
   2a6f6:	4608      	mov	r0, r1
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2a6f8:	a901      	add	r1, sp, #4
   2a6fa:	f7ff fe91 	bl	2a420 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   2a6fe:	b170      	cbz	r0, 2a71e <net_tcp_validate_seq+0x2e>
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   2a700:	3004      	adds	r0, #4
   2a702:	f7ff f91c 	bl	2993e <sys_get_be32>
   2a706:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   2a70a:	1a83      	subs	r3, r0, r2
				tcp->send_ack) >= 0) &&
   2a70c:	2b00      	cmp	r3, #0
	return tcp->recv_wnd;
   2a70e:	bfa1      	itttt	ge
   2a710:	f8b4 30b8 	ldrhge.w	r3, [r4, #184]	; 0xb8
   2a714:	189b      	addge	r3, r3, r2
   2a716:	1ac0      	subge	r0, r0, r3
				tcp->send_ack) >= 0) &&
   2a718:	0fc0      	lsrge	r0, r0, #31
   2a71a:	bfb8      	it	lt
   2a71c:	2000      	movlt	r0, #0
}
   2a71e:	b006      	add	sp, #24
   2a720:	bd10      	pop	{r4, pc}
	...

0002a724 <net_tcp_set_hdr>:
{
   2a724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a728:	b087      	sub	sp, #28
   2a72a:	4605      	mov	r5, r0
   2a72c:	460c      	mov	r4, r1
	if (net_tcp_header_fits(pkt, hdr)) {
   2a72e:	f7ff f9f3 	bl	29b18 <net_tcp_header_fits>
   2a732:	4680      	mov	r8, r0
   2a734:	2800      	cmp	r0, #0
   2a736:	f040 8094 	bne.w	2a862 <net_tcp_set_hdr+0x13e>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2a73a:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
   2a73e:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
   2a742:	6969      	ldr	r1, [r5, #20]
   2a744:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
   2a748:	2702      	movs	r7, #2
   2a74a:	441a      	add	r2, r3
   2a74c:	b292      	uxth	r2, r2
   2a74e:	f10d 0316 	add.w	r3, sp, #22
   2a752:	e9cd 4601 	strd	r4, r6, [sp, #4]
   2a756:	9700      	str	r7, [sp, #0]
   2a758:	4628      	mov	r0, r5
   2a75a:	f7f8 f95f 	bl	22a1c <net_pkt_write>
			     (u8_t *)&hdr->dst_port, ALLOC_TIMEOUT);
   2a75e:	19e3      	adds	r3, r4, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   2a760:	4601      	mov	r1, r0
   2a762:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2a766:	9602      	str	r6, [sp, #8]
   2a768:	e9cd 7300 	strd	r7, r3, [sp]
   2a76c:	4628      	mov	r0, r5
   2a76e:	f10d 0316 	add.w	r3, sp, #22
   2a772:	f7f8 f953 	bl	22a1c <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->seq), hdr->seq,
   2a776:	f04f 0904 	mov.w	r9, #4
   2a77a:	1d23      	adds	r3, r4, #4
   2a77c:	4601      	mov	r1, r0
   2a77e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2a782:	9301      	str	r3, [sp, #4]
   2a784:	f8cd 9000 	str.w	r9, [sp]
   2a788:	f10d 0316 	add.w	r3, sp, #22
   2a78c:	9602      	str	r6, [sp, #8]
   2a78e:	4628      	mov	r0, r5
   2a790:	f7f8 f944 	bl	22a1c <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->ack), hdr->ack,
   2a794:	f104 0308 	add.w	r3, r4, #8
   2a798:	e9cd 9300 	strd	r9, r3, [sp]
   2a79c:	4601      	mov	r1, r0
   2a79e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2a7a2:	9602      	str	r6, [sp, #8]
   2a7a4:	f10d 0316 	add.w	r3, sp, #22
   2a7a8:	4628      	mov	r0, r5
   2a7aa:	f7f8 f937 	bl	22a1c <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->offset),
   2a7ae:	f04f 0901 	mov.w	r9, #1
   2a7b2:	f104 030c 	add.w	r3, r4, #12
   2a7b6:	4601      	mov	r1, r0
   2a7b8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2a7bc:	9301      	str	r3, [sp, #4]
   2a7be:	9602      	str	r6, [sp, #8]
   2a7c0:	f10d 0316 	add.w	r3, sp, #22
   2a7c4:	f8cd 9000 	str.w	r9, [sp]
   2a7c8:	4628      	mov	r0, r5
   2a7ca:	f7f8 f927 	bl	22a1c <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->flags),
   2a7ce:	f104 030d 	add.w	r3, r4, #13
   2a7d2:	4601      	mov	r1, r0
   2a7d4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2a7d8:	9602      	str	r6, [sp, #8]
   2a7da:	e9cd 9300 	strd	r9, r3, [sp]
   2a7de:	4628      	mov	r0, r5
   2a7e0:	f10d 0316 	add.w	r3, sp, #22
   2a7e4:	f7f8 f91a 	bl	22a1c <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd,
   2a7e8:	f104 030e 	add.w	r3, r4, #14
   2a7ec:	4601      	mov	r1, r0
   2a7ee:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2a7f2:	9602      	str	r6, [sp, #8]
   2a7f4:	e9cd 7300 	strd	r7, r3, [sp]
   2a7f8:	4628      	mov	r0, r5
   2a7fa:	f10d 0316 	add.w	r3, sp, #22
   2a7fe:	f7f8 f90d 	bl	22a1c <net_pkt_write>
			     (u8_t *)&hdr->chksum, ALLOC_TIMEOUT);
   2a802:	f104 0310 	add.w	r3, r4, #16
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   2a806:	4601      	mov	r1, r0
   2a808:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2a80c:	9602      	str	r6, [sp, #8]
   2a80e:	e9cd 7300 	strd	r7, r3, [sp]
   2a812:	4628      	mov	r0, r5
   2a814:	f10d 0316 	add.w	r3, sp, #22
   2a818:	f7f8 f900 	bl	22a1c <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->urg), hdr->urg,
   2a81c:	f104 0312 	add.w	r3, r4, #18
   2a820:	e9cd 7300 	strd	r7, r3, [sp]
   2a824:	4601      	mov	r1, r0
   2a826:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2a82a:	9602      	str	r6, [sp, #8]
   2a82c:	f10d 0316 	add.w	r3, sp, #22
   2a830:	4628      	mov	r0, r5
   2a832:	f7f8 f8f3 	bl	22a1c <net_pkt_write>
	if (!frag) {
   2a836:	b9c0      	cbnz	r0, 2a86a <net_tcp_set_hdr+0x146>
		NET_ASSERT(frag);
   2a838:	4b0d      	ldr	r3, [pc, #52]	; (2a870 <net_tcp_set_hdr+0x14c>)
   2a83a:	681b      	ldr	r3, [r3, #0]
   2a83c:	075b      	lsls	r3, r3, #29
   2a83e:	d00f      	beq.n	2a860 <net_tcp_set_hdr+0x13c>
   2a840:	490c      	ldr	r1, [pc, #48]	; (2a874 <net_tcp_set_hdr+0x150>)
   2a842:	4b0d      	ldr	r3, [pc, #52]	; (2a878 <net_tcp_set_hdr+0x154>)
   2a844:	480d      	ldr	r0, [pc, #52]	; (2a87c <net_tcp_set_hdr+0x158>)
   2a846:	f04f 0200 	mov.w	r2, #0
   2a84a:	1a5b      	subs	r3, r3, r1
   2a84c:	f369 0202 	bfi	r2, r9, #0, #3
   2a850:	f368 02c5 	bfi	r2, r8, #3, #3
   2a854:	08db      	lsrs	r3, r3, #3
   2a856:	f363 128f 	bfi	r2, r3, #6, #10
   2a85a:	4909      	ldr	r1, [pc, #36]	; (2a880 <net_tcp_set_hdr+0x15c>)
   2a85c:	f7d7 fc46 	bl	20ec <log_1>
   2a860:	4644      	mov	r4, r8
}
   2a862:	4620      	mov	r0, r4
   2a864:	b007      	add	sp, #28
   2a866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return hdr;
   2a86a:	46a0      	mov	r8, r4
   2a86c:	e7f8      	b.n	2a860 <net_tcp_set_hdr+0x13c>
   2a86e:	bf00      	nop
   2a870:	2000e2b4 	.word	0x2000e2b4
   2a874:	0002ef38 	.word	0x0002ef38
   2a878:	0002f0a8 	.word	0x0002f0a8
   2a87c:	00037245 	.word	0x00037245
   2a880:	00036fda 	.word	0x00036fda

0002a884 <net_tcp_get_chksum>:
{
   2a884:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2a886:	4604      	mov	r4, r0
   2a888:	460e      	mov	r6, r1
	hdr = net_pkt_tcp_data(pkt);
   2a88a:	f7f8 f9bf 	bl	22c0c <net_pkt_tcp_data>
   2a88e:	4605      	mov	r5, r0
	if (net_tcp_header_fits(pkt, hdr)) {
   2a890:	4601      	mov	r1, r0
   2a892:	4620      	mov	r0, r4
   2a894:	f7ff f940 	bl	29b18 <net_tcp_header_fits>
   2a898:	b110      	cbz	r0, 2a8a0 <net_tcp_get_chksum+0x1c>
		return hdr->chksum;
   2a89a:	8a28      	ldrh	r0, [r5, #16]
}
   2a89c:	b004      	add	sp, #16
   2a89e:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read(frag,
   2a8a0:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   2a8a4:	f101 0310 	add.w	r3, r1, #16
			     net_pkt_ip_hdr_len(pkt) +
   2a8a8:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
	frag = net_frag_read(frag,
   2a8ac:	4419      	add	r1, r3
   2a8ae:	ab03      	add	r3, sp, #12
   2a8b0:	9300      	str	r3, [sp, #0]
   2a8b2:	f10d 020e 	add.w	r2, sp, #14
   2a8b6:	2302      	movs	r3, #2
   2a8b8:	b289      	uxth	r1, r1
   2a8ba:	4630      	mov	r0, r6
   2a8bc:	f7f8 f838 	bl	22930 <net_frag_read>
	NET_ASSERT(frag);
   2a8c0:	b9a0      	cbnz	r0, 2a8ec <net_tcp_get_chksum+0x68>
   2a8c2:	4b0c      	ldr	r3, [pc, #48]	; (2a8f4 <net_tcp_get_chksum+0x70>)
   2a8c4:	681b      	ldr	r3, [r3, #0]
   2a8c6:	075b      	lsls	r3, r3, #29
   2a8c8:	d010      	beq.n	2a8ec <net_tcp_get_chksum+0x68>
   2a8ca:	2301      	movs	r3, #1
   2a8cc:	f04f 0200 	mov.w	r2, #0
   2a8d0:	f363 0202 	bfi	r2, r3, #0, #3
   2a8d4:	4908      	ldr	r1, [pc, #32]	; (2a8f8 <net_tcp_get_chksum+0x74>)
   2a8d6:	4b09      	ldr	r3, [pc, #36]	; (2a8fc <net_tcp_get_chksum+0x78>)
   2a8d8:	1a5b      	subs	r3, r3, r1
   2a8da:	f360 02c5 	bfi	r2, r0, #3, #3
   2a8de:	08db      	lsrs	r3, r3, #3
   2a8e0:	f363 128f 	bfi	r2, r3, #6, #10
   2a8e4:	4906      	ldr	r1, [pc, #24]	; (2a900 <net_tcp_get_chksum+0x7c>)
   2a8e6:	4807      	ldr	r0, [pc, #28]	; (2a904 <net_tcp_get_chksum+0x80>)
   2a8e8:	f7d7 fc00 	bl	20ec <log_1>
	return chksum;
   2a8ec:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   2a8f0:	e7d4      	b.n	2a89c <net_tcp_get_chksum+0x18>
   2a8f2:	bf00      	nop
   2a8f4:	2000e2b4 	.word	0x2000e2b4
   2a8f8:	0002ef38 	.word	0x0002ef38
   2a8fc:	0002f0a8 	.word	0x0002f0a8
   2a900:	00036fea 	.word	0x00036fea
   2a904:	00037245 	.word	0x00037245

0002a908 <net_tcp_set_chksum>:
{
   2a908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a90c:	b086      	sub	sp, #24
	u16_t chksum = 0;
   2a90e:	2700      	movs	r7, #0
{
   2a910:	4604      	mov	r4, r0
   2a912:	460d      	mov	r5, r1
	u16_t chksum = 0;
   2a914:	f8ad 7014 	strh.w	r7, [sp, #20]
	hdr = net_pkt_tcp_data(pkt);
   2a918:	f7f8 f978 	bl	22c0c <net_pkt_tcp_data>
   2a91c:	4606      	mov	r6, r0
	if (net_tcp_header_fits(pkt, hdr)) {
   2a91e:	4601      	mov	r1, r0
   2a920:	4620      	mov	r0, r4
   2a922:	f7ff f8f9 	bl	29b18 <net_tcp_header_fits>
   2a926:	b158      	cbz	r0, 2a940 <net_tcp_set_chksum+0x38>
		hdr->chksum = 0;
   2a928:	7437      	strb	r7, [r6, #16]
   2a92a:	7477      	strb	r7, [r6, #17]
	return net_calc_chksum(pkt, IPPROTO_TCP);
   2a92c:	2106      	movs	r1, #6
   2a92e:	4620      	mov	r0, r4
   2a930:	f7f8 fce6 	bl	23300 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_tcp(pkt);
   2a934:	43c0      	mvns	r0, r0
   2a936:	8230      	strh	r0, [r6, #16]
}
   2a938:	4628      	mov	r0, r5
   2a93a:	b006      	add	sp, #24
   2a93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	frag = net_pkt_write(pkt, frag,
   2a940:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   2a944:	f102 0310 	add.w	r3, r2, #16
			     net_pkt_ip_hdr_len(pkt) +
   2a948:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
	frag = net_pkt_write(pkt, frag,
   2a94c:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
   2a950:	441a      	add	r2, r3
   2a952:	ae05      	add	r6, sp, #20
   2a954:	2702      	movs	r7, #2
   2a956:	f10d 0316 	add.w	r3, sp, #22
   2a95a:	b292      	uxth	r2, r2
   2a95c:	4629      	mov	r1, r5
   2a95e:	f8cd 8008 	str.w	r8, [sp, #8]
   2a962:	9601      	str	r6, [sp, #4]
   2a964:	9700      	str	r7, [sp, #0]
   2a966:	4620      	mov	r0, r4
   2a968:	f7f8 f858 	bl	22a1c <net_pkt_write>
   2a96c:	2106      	movs	r1, #6
   2a96e:	4605      	mov	r5, r0
   2a970:	4620      	mov	r0, r4
   2a972:	f7f8 fcc5 	bl	23300 <net_calc_chksum>
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2a976:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2a97a:	9700      	str	r7, [sp, #0]
	chksum = ~net_calc_chksum_tcp(pkt);
   2a97c:	43c0      	mvns	r0, r0
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2a97e:	3a02      	subs	r2, #2
	chksum = ~net_calc_chksum_tcp(pkt);
   2a980:	f8ad 0014 	strh.w	r0, [sp, #20]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2a984:	4629      	mov	r1, r5
   2a986:	e9cd 6801 	strd	r6, r8, [sp, #4]
   2a98a:	f10d 0316 	add.w	r3, sp, #22
   2a98e:	b292      	uxth	r2, r2
   2a990:	4620      	mov	r0, r4
   2a992:	f7f8 f843 	bl	22a1c <net_pkt_write>
	NET_ASSERT(frag);
   2a996:	4605      	mov	r5, r0
   2a998:	2800      	cmp	r0, #0
   2a99a:	d1cd      	bne.n	2a938 <net_tcp_set_chksum+0x30>
   2a99c:	4b0a      	ldr	r3, [pc, #40]	; (2a9c8 <net_tcp_set_chksum+0xc0>)
   2a99e:	681b      	ldr	r3, [r3, #0]
   2a9a0:	075b      	lsls	r3, r3, #29
   2a9a2:	d0c9      	beq.n	2a938 <net_tcp_set_chksum+0x30>
   2a9a4:	2301      	movs	r3, #1
   2a9a6:	f04f 0200 	mov.w	r2, #0
   2a9aa:	f363 0202 	bfi	r2, r3, #0, #3
   2a9ae:	4907      	ldr	r1, [pc, #28]	; (2a9cc <net_tcp_set_chksum+0xc4>)
   2a9b0:	4b07      	ldr	r3, [pc, #28]	; (2a9d0 <net_tcp_set_chksum+0xc8>)
   2a9b2:	1a5b      	subs	r3, r3, r1
   2a9b4:	f360 02c5 	bfi	r2, r0, #3, #3
   2a9b8:	08db      	lsrs	r3, r3, #3
   2a9ba:	f363 128f 	bfi	r2, r3, #6, #10
   2a9be:	4905      	ldr	r1, [pc, #20]	; (2a9d4 <net_tcp_set_chksum+0xcc>)
   2a9c0:	4805      	ldr	r0, [pc, #20]	; (2a9d8 <net_tcp_set_chksum+0xd0>)
   2a9c2:	f7d7 fb93 	bl	20ec <log_1>
   2a9c6:	e7b7      	b.n	2a938 <net_tcp_set_chksum+0x30>
   2a9c8:	2000e2b4 	.word	0x2000e2b4
   2a9cc:	0002ef38 	.word	0x0002ef38
   2a9d0:	0002f0a8 	.word	0x0002f0a8
   2a9d4:	00036ffd 	.word	0x00036ffd
   2a9d8:	00037245 	.word	0x00037245

0002a9dc <net_tcp_send_pkt>:
{
   2a9dc:	b570      	push	{r4, r5, r6, lr}
   2a9de:	b086      	sub	sp, #24
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2a9e0:	a901      	add	r1, sp, #4
{
   2a9e2:	4605      	mov	r5, r0
	struct net_context *ctx = net_pkt_context(pkt);
   2a9e4:	6986      	ldr	r6, [r0, #24]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2a9e6:	f7ff fd1b 	bl	2a420 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   2a9ea:	4604      	mov	r4, r0
   2a9ec:	b9c0      	cbnz	r0, 2aa20 <net_tcp_send_pkt+0x44>
		NET_ERR("Packet %p does not contain TCP header", pkt);
   2a9ee:	4b40      	ldr	r3, [pc, #256]	; (2aaf0 <net_tcp_send_pkt+0x114>)
   2a9f0:	681b      	ldr	r3, [r3, #0]
   2a9f2:	0758      	lsls	r0, r3, #29
   2a9f4:	d011      	beq.n	2aa1a <net_tcp_send_pkt+0x3e>
   2a9f6:	2201      	movs	r2, #1
   2a9f8:	f04f 0300 	mov.w	r3, #0
   2a9fc:	f362 0302 	bfi	r3, r2, #0, #3
   2aa00:	493c      	ldr	r1, [pc, #240]	; (2aaf4 <net_tcp_send_pkt+0x118>)
   2aa02:	4a3d      	ldr	r2, [pc, #244]	; (2aaf8 <net_tcp_send_pkt+0x11c>)
   2aa04:	483d      	ldr	r0, [pc, #244]	; (2aafc <net_tcp_send_pkt+0x120>)
   2aa06:	1a52      	subs	r2, r2, r1
   2aa08:	08d2      	lsrs	r2, r2, #3
   2aa0a:	f364 03c5 	bfi	r3, r4, #3, #3
   2aa0e:	f362 138f 	bfi	r3, r2, #6, #10
   2aa12:	493b      	ldr	r1, [pc, #236]	; (2ab00 <net_tcp_send_pkt+0x124>)
   2aa14:	462a      	mov	r2, r5
   2aa16:	f7d7 fb7d 	bl	2114 <log_2>
		return -EMSGSIZE;
   2aa1a:	f06f 0423 	mvn.w	r4, #35	; 0x23
   2aa1e:	e059      	b.n	2aad4 <net_tcp_send_pkt+0xf8>
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   2aa20:	3008      	adds	r0, #8
   2aa22:	f7fe ff8c 	bl	2993e <sys_get_be32>
   2aa26:	6c73      	ldr	r3, [r6, #68]	; 0x44
   2aa28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   2aa2c:	4298      	cmp	r0, r3
   2aa2e:	d018      	beq.n	2aa62 <net_tcp_send_pkt+0x86>
	sys_put_be16(val >> 16, dst);
   2aa30:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   2aa32:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   2aa34:	7262      	strb	r2, [r4, #9]
	dst[0] = val >> 8;
   2aa36:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2aa3a:	72a2      	strb	r2, [r4, #10]
   2aa3c:	7221      	strb	r1, [r4, #8]
	dst[1] = val;
   2aa3e:	72e3      	strb	r3, [r4, #11]
		calc_chksum = true;
   2aa40:	2201      	movs	r2, #1
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   2aa42:	6c73      	ldr	r3, [r6, #68]	; 0x44
   2aa44:	e9d3 3125 	ldrd	r3, r1, [r3, #148]	; 0x94
   2aa48:	4299      	cmp	r1, r3
   2aa4a:	d00c      	beq.n	2aa66 <net_tcp_send_pkt+0x8a>
		(tcp_hdr->flags & NET_TCP_ACK) == 0) {
   2aa4c:	7b63      	ldrb	r3, [r4, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   2aa4e:	06d9      	lsls	r1, r3, #27
   2aa50:	d409      	bmi.n	2aa66 <net_tcp_send_pkt+0x8a>
		tcp_hdr->flags |= NET_TCP_ACK;
   2aa52:	f043 0310 	orr.w	r3, r3, #16
   2aa56:	7363      	strb	r3, [r4, #13]
		net_tcp_set_chksum(pkt, pkt->frags);
   2aa58:	6969      	ldr	r1, [r5, #20]
   2aa5a:	4628      	mov	r0, r5
   2aa5c:	f7ff ff54 	bl	2a908 <net_tcp_set_chksum>
   2aa60:	e003      	b.n	2aa6a <net_tcp_send_pkt+0x8e>
	bool calc_chksum = false;
   2aa62:	2200      	movs	r2, #0
   2aa64:	e7ed      	b.n	2aa42 <net_tcp_send_pkt+0x66>
	if (calc_chksum) {
   2aa66:	2a00      	cmp	r2, #0
   2aa68:	d1f6      	bne.n	2aa58 <net_tcp_send_pkt+0x7c>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   2aa6a:	7b62      	ldrb	r2, [r4, #13]
   2aa6c:	6c73      	ldr	r3, [r6, #68]	; 0x44
   2aa6e:	07d2      	lsls	r2, r2, #31
		ctx->tcp->fin_sent = 1;
   2aa70:	bf42      	ittt	mi
   2aa72:	f893 20be 	ldrbmi.w	r2, [r3, #190]	; 0xbe
   2aa76:	f042 0202 	orrmi.w	r2, r2, #2
   2aa7a:	f883 20be 	strbmi.w	r2, [r3, #190]	; 0xbe
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   2aa7e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   2aa82:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	net_tcp_set_hdr(pkt, tcp_hdr);
   2aa86:	4621      	mov	r1, r4
   2aa88:	4628      	mov	r0, r5
   2aa8a:	f7ff fe4b 	bl	2a724 <net_tcp_set_hdr>
	return pkt->family;
   2aa8e:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
	if (is_6lo_technology(pkt)) {
   2aa92:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   2aa96:	2b0a      	cmp	r3, #10
   2aa98:	d109      	bne.n	2aaae <net_tcp_send_pkt+0xd2>
   2aa9a:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   2aa9e:	2b02      	cmp	r3, #2
   2aaa0:	d105      	bne.n	2aaae <net_tcp_send_pkt+0xd2>
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   2aaa2:	6c73      	ldr	r3, [r6, #68]	; 0x44
   2aaa4:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   2aaa8:	b108      	cbz	r0, 2aaae <net_tcp_send_pkt+0xd2>
   2aaaa:	3844      	subs	r0, #68	; 0x44
   2aaac:	b920      	cbnz	r0, 2aab8 <net_tcp_send_pkt+0xdc>
	return net_send_data(pkt);
   2aaae:	4628      	mov	r0, r5
   2aab0:	f7f5 feac 	bl	2080c <net_send_data>
   2aab4:	4604      	mov	r4, r0
   2aab6:	e00d      	b.n	2aad4 <net_tcp_send_pkt+0xf8>
			if (check_pkt == pkt) {
   2aab8:	42a8      	cmp	r0, r5
   2aaba:	d00e      	beq.n	2aada <net_tcp_send_pkt+0xfe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2aabc:	f110 0f44 	cmn.w	r0, #68	; 0x44
   2aac0:	d0f5      	beq.n	2aaae <net_tcp_send_pkt+0xd2>
	return node->next;
   2aac2:	6c40      	ldr	r0, [r0, #68]	; 0x44
   2aac4:	e7f0      	b.n	2aaa8 <net_tcp_send_pkt+0xcc>
			ret = net_send_data(new_pkt);
   2aac6:	f7f5 fea1 	bl	2080c <net_send_data>
			if (ret < 0) {
   2aaca:	1e04      	subs	r4, r0, #0
   2aacc:	da02      	bge.n	2aad4 <net_tcp_send_pkt+0xf8>
				net_pkt_unref(new_pkt);
   2aace:	4628      	mov	r0, r5
   2aad0:	f7f7 fd95 	bl	225fe <net_pkt_unref>
}
   2aad4:	4620      	mov	r0, r4
   2aad6:	b006      	add	sp, #24
   2aad8:	bd70      	pop	{r4, r5, r6, pc}
			new_pkt = net_pkt_clone(pkt, ALLOC_TIMEOUT);
   2aada:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   2aade:	f7f8 f921 	bl	22d24 <net_pkt_clone>
			if (!new_pkt) {
   2aae2:	4605      	mov	r5, r0
   2aae4:	2800      	cmp	r0, #0
   2aae6:	d1ee      	bne.n	2aac6 <net_tcp_send_pkt+0xea>
				return -ENOMEM;
   2aae8:	f06f 040b 	mvn.w	r4, #11
   2aaec:	e7f2      	b.n	2aad4 <net_tcp_send_pkt+0xf8>
   2aaee:	bf00      	nop
   2aaf0:	2000e2b4 	.word	0x2000e2b4
   2aaf4:	0002ef38 	.word	0x0002ef38
   2aaf8:	0002f0a8 	.word	0x0002f0a8
   2aafc:	0003721b 	.word	0x0003721b
   2ab00:	00036f8f 	.word	0x00036f8f

0002ab04 <tcp_retry_expired>:
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   2ab04:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
   2ab06:	b570      	push	{r4, r5, r6, lr}
   2ab08:	4604      	mov	r4, r0
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   2ab0a:	2b00      	cmp	r3, #0
   2ab0c:	d050      	beq.n	2abb0 <tcp_retry_expired+0xac>
		tcp->retry_timeout_shift++;
   2ab0e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   2ab12:	1c53      	adds	r3, r2, #1
   2ab14:	f003 031f 	and.w	r3, r3, #31
   2ab18:	f363 0204 	bfi	r2, r3, #0, #5
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   2ab1c:	2b09      	cmp	r3, #9
		tcp->retry_timeout_shift++;
   2ab1e:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   2ab22:	d90f      	bls.n	2ab44 <tcp_retry_expired+0x40>
	struct net_context *ctx = tcp->context;
   2ab24:	f850 5c48 	ldr.w	r5, [r0, #-72]
	if (ctx->recv_cb) {
   2ab28:	6b2e      	ldr	r6, [r5, #48]	; 0x30
   2ab2a:	b136      	cbz	r6, 2ab3a <tcp_retry_expired+0x36>
		ctx->recv_cb(ctx, NULL, -ECONNRESET, tcp->recv_user_data);
   2ab2c:	f850 3c44 	ldr.w	r3, [r0, #-68]
   2ab30:	f06f 0235 	mvn.w	r2, #53	; 0x35
   2ab34:	2100      	movs	r1, #0
   2ab36:	4628      	mov	r0, r5
   2ab38:	47b0      	blx	r6
	net_context_unref(ctx);
   2ab3a:	4628      	mov	r0, r5
}
   2ab3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_context_unref(tcp->context);
   2ab40:	f7f5 b964 	b.w	1fe0c <net_context_unref>
		k_delayed_work_submit(&tcp->retry_timer, retry_timeout(tcp));
   2ab44:	21c8      	movs	r1, #200	; 0xc8
   2ab46:	4099      	lsls	r1, r3
   2ab48:	f7fe ff08 	bl	2995c <k_delayed_work_submit>
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   2ab4c:	6c22      	ldr	r2, [r4, #64]	; 0x40
	return pkt->sent_or_eof;
   2ab4e:	7953      	ldrb	r3, [r2, #5]
		if (net_pkt_sent(pkt)) {
   2ab50:	07d9      	lsls	r1, r3, #31
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   2ab52:	f1a2 0444 	sub.w	r4, r2, #68	; 0x44
		if (net_pkt_sent(pkt)) {
   2ab56:	d511      	bpl.n	2ab7c <tcp_retry_expired+0x78>
			do_ref_if_needed(tcp, pkt);
   2ab58:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   2ab5c:	2b0a      	cmp	r3, #10
   2ab5e:	d103      	bne.n	2ab68 <tcp_retry_expired+0x64>
   2ab60:	f812 3c0b 	ldrb.w	r3, [r2, #-11]
   2ab64:	2b02      	cmp	r3, #2
   2ab66:	d003      	beq.n	2ab70 <tcp_retry_expired+0x6c>
   2ab68:	4620      	mov	r0, r4
   2ab6a:	f7f7 fd3d 	bl	225e8 <net_pkt_ref>
   2ab6e:	4604      	mov	r4, r0
	pkt->sent_or_eof = sent;
   2ab70:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   2ab74:	f36f 0300 	bfc	r3, #0, #1
   2ab78:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	pkt->pkt_queued = send;
   2ab7c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   2ab80:	f043 0302 	orr.w	r3, r3, #2
   2ab84:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   2ab88:	4620      	mov	r0, r4
   2ab8a:	f7ff ff27 	bl	2a9dc <net_tcp_send_pkt>
   2ab8e:	2800      	cmp	r0, #0
   2ab90:	da17      	bge.n	2abc2 <tcp_retry_expired+0xbe>
	return pkt->family;
   2ab92:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   2ab96:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   2ab9a:	2b0a      	cmp	r3, #10
   2ab9c:	d103      	bne.n	2aba6 <tcp_retry_expired+0xa2>
   2ab9e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   2aba2:	2b02      	cmp	r3, #2
   2aba4:	d00d      	beq.n	2abc2 <tcp_retry_expired+0xbe>
			net_pkt_unref(pkt);
   2aba6:	4620      	mov	r0, r4
}
   2aba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_pkt_unref(pkt);
   2abac:	f7f7 bd27 	b.w	225fe <net_pkt_unref>
		if (tcp->fin_sent && tcp->fin_rcvd) {
   2abb0:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   2abb4:	f003 0306 	and.w	r3, r3, #6
   2abb8:	2b06      	cmp	r3, #6
   2abba:	d102      	bne.n	2abc2 <tcp_retry_expired+0xbe>
			net_context_unref(tcp->context);
   2abbc:	f850 0c48 	ldr.w	r0, [r0, #-72]
   2abc0:	e7bc      	b.n	2ab3c <tcp_retry_expired+0x38>
}
   2abc2:	bd70      	pop	{r4, r5, r6, pc}

0002abc4 <net_tcp_send_data>:
{
   2abc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2abc8:	4698      	mov	r8, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   2abca:	6c43      	ldr	r3, [r0, #68]	; 0x44
   2abcc:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
{
   2abd0:	4606      	mov	r6, r0
   2abd2:	460d      	mov	r5, r1
   2abd4:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   2abd6:	b91c      	cbnz	r4, 2abe0 <net_tcp_send_data+0x1c>
	if (cb) {
   2abd8:	bb2d      	cbnz	r5, 2ac26 <net_tcp_send_data+0x62>
}
   2abda:	2000      	movs	r0, #0
   2abdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   2abe0:	3c44      	subs	r4, #68	; 0x44
   2abe2:	2c00      	cmp	r4, #0
   2abe4:	d0f8      	beq.n	2abd8 <net_tcp_send_data+0x14>
	return pkt->pkt_queued;
   2abe6:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
		if (net_pkt_queued(pkt)) {
   2abea:	079a      	lsls	r2, r3, #30
   2abec:	d419      	bmi.n	2ac22 <net_tcp_send_data+0x5e>
		if (!net_pkt_sent(pkt)) {
   2abee:	07db      	lsls	r3, r3, #31
   2abf0:	d417      	bmi.n	2ac22 <net_tcp_send_data+0x5e>
			ret = net_tcp_send_pkt(pkt);
   2abf2:	4620      	mov	r0, r4
   2abf4:	f7ff fef2 	bl	2a9dc <net_tcp_send_pkt>
			if (ret < 0 && !is_6lo_technology(pkt)) {
   2abf8:	2800      	cmp	r0, #0
   2abfa:	da0c      	bge.n	2ac16 <net_tcp_send_data+0x52>
	return pkt->family;
   2abfc:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   2ac00:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   2ac04:	2b0a      	cmp	r3, #10
   2ac06:	d103      	bne.n	2ac10 <net_tcp_send_data+0x4c>
   2ac08:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   2ac0c:	2b02      	cmp	r3, #2
   2ac0e:	d002      	beq.n	2ac16 <net_tcp_send_data+0x52>
				net_pkt_unref(pkt);
   2ac10:	4620      	mov	r0, r4
   2ac12:	f7f7 fcf4 	bl	225fe <net_pkt_unref>
	pkt->pkt_queued = send;
   2ac16:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   2ac1a:	f043 0302 	orr.w	r3, r3, #2
   2ac1e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   2ac22:	6c64      	ldr	r4, [r4, #68]	; 0x44
   2ac24:	e7d7      	b.n	2abd6 <net_tcp_send_data+0x12>
		cb(context, 0, token, user_data);
   2ac26:	4643      	mov	r3, r8
   2ac28:	463a      	mov	r2, r7
   2ac2a:	2100      	movs	r1, #0
   2ac2c:	4630      	mov	r0, r6
   2ac2e:	47a8      	blx	r5
   2ac30:	e7d3      	b.n	2abda <net_tcp_send_data+0x16>

0002ac32 <send_ack.isra.30>:
static int send_ack(struct net_context *context,
   2ac32:	b513      	push	{r0, r1, r4, lr}
	struct net_pkt *pkt = NULL;
   2ac34:	2300      	movs	r3, #0
   2ac36:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   2ac38:	b91a      	cbnz	r2, 2ac42 <send_ack.isra.30+0x10>
   2ac3a:	e9d0 4325 	ldrd	r4, r3, [r0, #148]	; 0x94
   2ac3e:	429c      	cmp	r4, r3
   2ac40:	d00f      	beq.n	2ac62 <send_ack.isra.30+0x30>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   2ac42:	aa01      	add	r2, sp, #4
   2ac44:	f7ff fad4 	bl	2a1f0 <net_tcp_prepare_ack>
	if (ret) {
   2ac48:	4604      	mov	r4, r0
   2ac4a:	b938      	cbnz	r0, 2ac5c <send_ack.isra.30+0x2a>
	ret = net_tcp_send_pkt(pkt);
   2ac4c:	9801      	ldr	r0, [sp, #4]
   2ac4e:	f7ff fec5 	bl	2a9dc <net_tcp_send_pkt>
	if (ret < 0) {
   2ac52:	1e04      	subs	r4, r0, #0
   2ac54:	da02      	bge.n	2ac5c <send_ack.isra.30+0x2a>
		net_pkt_unref(pkt);
   2ac56:	9801      	ldr	r0, [sp, #4]
   2ac58:	f7f7 fcd1 	bl	225fe <net_pkt_unref>
}
   2ac5c:	4620      	mov	r0, r4
   2ac5e:	b002      	add	sp, #8
   2ac60:	bd10      	pop	{r4, pc}
		return 0;
   2ac62:	4614      	mov	r4, r2
   2ac64:	e7fa      	b.n	2ac5c <send_ack.isra.30+0x2a>
	...

0002ac68 <tcp_established>:
 *
 * Prototype:
 * enum net_verdict tcp_established(struct net_conn *conn, struct net_pkt *pkt,
 *                                  void *user_data)
 */
NET_CONN_CB(tcp_established)
   2ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac6c:	4680      	mov	r8, r0
   2ac6e:	b08d      	sub	sp, #52	; 0x34
   2ac70:	4614      	mov	r4, r2
   2ac72:	4610      	mov	r0, r2
   2ac74:	4689      	mov	r9, r1
   2ac76:	f7f5 f8bb 	bl	1fdf0 <net_context_ref>
	struct net_tcp_hdr hdr, *tcp_hdr;
	enum net_verdict ret = NET_OK;
	u8_t tcp_flags;
	u16_t data_len;

	NET_ASSERT(context && context->tcp);
   2ac7a:	b10c      	cbz	r4, 2ac80 <tcp_established+0x18>
   2ac7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2ac7e:	b9a3      	cbnz	r3, 2acaa <tcp_established+0x42>
   2ac80:	4b87      	ldr	r3, [pc, #540]	; (2aea0 <tcp_established+0x238>)
   2ac82:	681b      	ldr	r3, [r3, #0]
   2ac84:	0758      	lsls	r0, r3, #29
   2ac86:	d010      	beq.n	2acaa <tcp_established+0x42>
   2ac88:	2301      	movs	r3, #1
   2ac8a:	f04f 0200 	mov.w	r2, #0
   2ac8e:	f363 0202 	bfi	r2, r3, #0, #3
   2ac92:	4984      	ldr	r1, [pc, #528]	; (2aea4 <tcp_established+0x23c>)
   2ac94:	4b84      	ldr	r3, [pc, #528]	; (2aea8 <tcp_established+0x240>)
   2ac96:	4885      	ldr	r0, [pc, #532]	; (2aeac <tcp_established+0x244>)
   2ac98:	1a5b      	subs	r3, r3, r1
   2ac9a:	f36f 02c5 	bfc	r2, #3, #3
   2ac9e:	08db      	lsrs	r3, r3, #3
   2aca0:	f363 128f 	bfi	r2, r3, #6, #10
   2aca4:	4982      	ldr	r1, [pc, #520]	; (2aeb0 <tcp_established+0x248>)
   2aca6:	f7d7 fa21 	bl	20ec <log_1>

	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2acaa:	a907      	add	r1, sp, #28
   2acac:	4648      	mov	r0, r9
   2acae:	f7ff fbb7 	bl	2a420 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   2acb2:	4607      	mov	r7, r0
   2acb4:	b938      	cbnz	r0, 2acc6 <tcp_established+0x5e>
					 context->tcp->recv_user_data);
		}

		net_context_unref(context);

		return NET_DROP;
   2acb6:	2502      	movs	r5, #2
NET_CONN_CB(tcp_established)
   2acb8:	4620      	mov	r0, r4
   2acba:	f7f5 f8a7 	bl	1fe0c <net_context_unref>
   2acbe:	4628      	mov	r0, r5
   2acc0:	b00d      	add	sp, #52	; 0x34
   2acc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   2acc6:	f8d4 b044 	ldr.w	fp, [r4, #68]	; 0x44
   2acca:	f8db 30bc 	ldr.w	r3, [fp, #188]	; 0xbc
   2acce:	f3c3 3343 	ubfx	r3, r3, #13, #4
   2acd2:	2b03      	cmp	r3, #3
   2acd4:	d818      	bhi.n	2ad08 <tcp_established+0xa0>
		NET_ERR("Context %p in wrong state %d",
   2acd6:	4a72      	ldr	r2, [pc, #456]	; (2aea0 <tcp_established+0x238>)
   2acd8:	6812      	ldr	r2, [r2, #0]
   2acda:	0751      	lsls	r1, r2, #29
   2acdc:	d0eb      	beq.n	2acb6 <tcp_established+0x4e>
   2acde:	2201      	movs	r2, #1
   2ace0:	f04f 0100 	mov.w	r1, #0
   2ace4:	f362 0102 	bfi	r1, r2, #0, #3
   2ace8:	486e      	ldr	r0, [pc, #440]	; (2aea4 <tcp_established+0x23c>)
   2acea:	4a6f      	ldr	r2, [pc, #444]	; (2aea8 <tcp_established+0x240>)
   2acec:	1a12      	subs	r2, r2, r0
   2acee:	08d2      	lsrs	r2, r2, #3
   2acf0:	f36f 01c5 	bfc	r1, #3, #3
   2acf4:	f362 118f 	bfi	r1, r2, #6, #10
   2acf8:	f8ad 1000 	strh.w	r1, [sp]
   2acfc:	4622      	mov	r2, r4
   2acfe:	496c      	ldr	r1, [pc, #432]	; (2aeb0 <tcp_established+0x248>)
   2ad00:	486c      	ldr	r0, [pc, #432]	; (2aeb4 <tcp_established+0x24c>)
   2ad02:	f7d7 fa1f 	bl	2144 <log_3>
   2ad06:	e7d6      	b.n	2acb6 <tcp_established+0x4e>
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   2ad08:	3004      	adds	r0, #4
   2ad0a:	f7fe fe18 	bl	2993e <sys_get_be32>
   2ad0e:	f8db 3094 	ldr.w	r3, [fp, #148]	; 0x94
   2ad12:	eba0 0a03 	sub.w	sl, r0, r3
   2ad16:	f1ba 0f00 	cmp.w	sl, #0
   2ad1a:	da05      	bge.n	2ad28 <tcp_established+0xc0>
		send_ack(context, &conn->remote_addr, true);
   2ad1c:	2201      	movs	r2, #1
   2ad1e:	4641      	mov	r1, r8
   2ad20:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2ad22:	f7ff ff86 	bl	2ac32 <send_ack.isra.30>
   2ad26:	e7c6      	b.n	2acb6 <tcp_established+0x4e>
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   2ad28:	d1c5      	bne.n	2acb6 <tcp_established+0x4e>
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   2ad2a:	7b7e      	ldrb	r6, [r7, #13]
	if (tcp_flags & NET_TCP_RST) {
   2ad2c:	f016 0504 	ands.w	r5, r6, #4
   2ad30:	d012      	beq.n	2ad58 <tcp_established+0xf0>
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   2ad32:	4649      	mov	r1, r9
   2ad34:	4658      	mov	r0, fp
   2ad36:	f7ff fcdb 	bl	2a6f0 <net_tcp_validate_seq>
   2ad3a:	2800      	cmp	r0, #0
   2ad3c:	d0bb      	beq.n	2acb6 <tcp_established+0x4e>
		if (context->recv_cb) {
   2ad3e:	6b25      	ldr	r5, [r4, #48]	; 0x30
   2ad40:	b135      	cbz	r5, 2ad50 <tcp_established+0xe8>
			context->recv_cb(context, NULL, -ECONNRESET,
   2ad42:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2ad44:	f06f 0235 	mvn.w	r2, #53	; 0x35
   2ad48:	685b      	ldr	r3, [r3, #4]
   2ad4a:	4651      	mov	r1, sl
   2ad4c:	4620      	mov	r0, r4
   2ad4e:	47a8      	blx	r5
		net_context_unref(context);
   2ad50:	4620      	mov	r0, r4
   2ad52:	f7f5 f85b 	bl	1fe0c <net_context_unref>
   2ad56:	e7ae      	b.n	2acb6 <tcp_established+0x4e>
	}

	/* Handle TCP state transition */
	if (tcp_flags & NET_TCP_ACK) {
   2ad58:	06f2      	lsls	r2, r6, #27
   2ad5a:	d513      	bpl.n	2ad84 <tcp_established+0x11c>
		if (!net_tcp_ack_received(context,
   2ad5c:	f107 0008 	add.w	r0, r7, #8
   2ad60:	f7fe fded 	bl	2993e <sys_get_be32>
   2ad64:	4601      	mov	r1, r0
   2ad66:	4620      	mov	r0, r4
   2ad68:	f7ff fbee 	bl	2a548 <net_tcp_ack_received>
   2ad6c:	2800      	cmp	r0, #0
   2ad6e:	d0a2      	beq.n	2acb6 <tcp_established+0x4e>

		/* TCP state might be changed after maintaining the sent pkt
		 * list, e.g., an ack of FIN is received.
		 */

		if (net_tcp_get_state(context->tcp)
   2ad70:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2ad72:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2ad76:	f3c3 3343 	ubfx	r3, r3, #13, #4
   2ad7a:	2b07      	cmp	r3, #7
   2ad7c:	d146      	bne.n	2ae0c <tcp_established+0x1a4>
			   == NET_TCP_FIN_WAIT_1) {
			/* Active close: step to FIN_WAIT_2 */
			net_tcp_change_state(context->tcp, NET_TCP_FIN_WAIT_2);
   2ad7e:	2108      	movs	r1, #8
   2ad80:	f7ff f912 	bl	29fa8 <net_tcp_change_state>
			net_pkt_unref(pkt);
			goto clean_up;
		}
	}

	if (tcp_flags & NET_TCP_FIN) {
   2ad84:	f016 0701 	ands.w	r7, r6, #1
   2ad88:	d016      	beq.n	2adb8 <tcp_established+0x150>
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   2ad8a:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2ad8c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2ad90:	f3c3 3343 	ubfx	r3, r3, #13, #4
   2ad94:	2b04      	cmp	r3, #4
   2ad96:	d15e      	bne.n	2ae56 <tcp_established+0x1ee>
			/* Passive close: step to CLOSE_WAIT */
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   2ad98:	2105      	movs	r1, #5
   2ad9a:	f7ff f905 	bl	29fa8 <net_tcp_change_state>
			/* We should receive ACK next in order to get rid of
			 * LAST_ACK state that we are entering in a short while.
			 * But we need to be prepared to NOT to receive it as
			 * otherwise the connection would be stuck forever.
			 */
			k_delayed_work_submit(&context->tcp->ack_timer,
   2ad9e:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2ada0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2ada4:	3008      	adds	r0, #8
   2ada6:	f7fe fdd9 	bl	2995c <k_delayed_work_submit>
			k_delayed_work_cancel(&context->tcp->fin_timer);
			/* Active close: step to TIME_WAIT */
			net_tcp_change_state(context->tcp, NET_TCP_TIME_WAIT);
		}

		context->tcp->fin_rcvd = 1;
   2adaa:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2adac:	f892 30be 	ldrb.w	r3, [r2, #190]	; 0xbe
   2adb0:	f043 0304 	orr.w	r3, r3, #4
   2adb4:	f882 30be 	strb.w	r3, [r2, #190]	; 0xbe
	}

	net_pkt_set_appdata_values(pkt, IPPROTO_TCP);
   2adb8:	2106      	movs	r1, #6
   2adba:	4648      	mov	r0, r9
   2adbc:	f7f7 ff5c 	bl	22c78 <net_pkt_set_appdata_values>

	data_len = net_pkt_appdatalen(pkt);
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   2adc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
	data_len = net_pkt_appdatalen(pkt);
   2adc2:	f8b9 603e 	ldrh.w	r6, [r9, #62]	; 0x3e
	return tcp->recv_wnd;
   2adc6:	f8b3 10b8 	ldrh.w	r1, [r3, #184]	; 0xb8
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   2adca:	428e      	cmp	r6, r1
   2adcc:	d94d      	bls.n	2ae6a <tcp_established+0x202>
		 * for net_tcp_get_recv_wnd(context->tcp) == 0, but
		 * given the if above, we know that if data_len == 1,
		 * then net_tcp_get_recv_wnd(context->tcp) can be only 0
		 * here.
		 */
		if (data_len == 1) {
   2adce:	2e01      	cmp	r6, #1
   2add0:	d0a4      	beq.n	2ad1c <tcp_established+0xb4>
			goto resend_ack;
		}

		NET_ERR("Context %p: overflow of recv window (%d vs %d), "
   2add2:	4b33      	ldr	r3, [pc, #204]	; (2aea0 <tcp_established+0x238>)
   2add4:	681b      	ldr	r3, [r3, #0]
   2add6:	075b      	lsls	r3, r3, #29
   2add8:	f43f af6d 	beq.w	2acb6 <tcp_established+0x4e>
   2addc:	2201      	movs	r2, #1
   2adde:	f04f 0300 	mov.w	r3, #0
   2ade2:	f362 0302 	bfi	r3, r2, #0, #3
   2ade6:	482f      	ldr	r0, [pc, #188]	; (2aea4 <tcp_established+0x23c>)
   2ade8:	4a2f      	ldr	r2, [pc, #188]	; (2aea8 <tcp_established+0x240>)
   2adea:	1a12      	subs	r2, r2, r0
   2adec:	08d2      	lsrs	r2, r2, #3
   2adee:	f36f 03c5 	bfc	r3, #3, #3
   2adf2:	f362 138f 	bfi	r3, r2, #6, #10
   2adf6:	4a2e      	ldr	r2, [pc, #184]	; (2aeb0 <tcp_established+0x248>)
   2adf8:	482f      	ldr	r0, [pc, #188]	; (2aeb8 <tcp_established+0x250>)
   2adfa:	e9cd 2403 	strd	r2, r4, [sp, #12]
   2adfe:	e9cd 1605 	strd	r1, r6, [sp, #20]
   2ae02:	2204      	movs	r2, #4
   2ae04:	a903      	add	r1, sp, #12
   2ae06:	f7d7 f9b8 	bl	217a <log_n>
   2ae0a:	e754      	b.n	2acb6 <tcp_established+0x4e>
		} else if (net_tcp_get_state(context->tcp)
   2ae0c:	2b06      	cmp	r3, #6
   2ae0e:	d1b9      	bne.n	2ad84 <tcp_established+0x11c>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSED);
   2ae10:	4629      	mov	r1, r5
   2ae12:	f7ff f8c9 	bl	29fa8 <net_tcp_change_state>
			net_pkt_unref(pkt);
   2ae16:	4648      	mov	r0, r9
   2ae18:	f7f7 fbf1 	bl	225fe <net_pkt_unref>
	}

	send_ack(context, &conn->remote_addr, false);

clean_up:
	if (net_tcp_get_state(context->tcp) == NET_TCP_TIME_WAIT) {
   2ae1c:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2ae1e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2ae22:	f3c3 3343 	ubfx	r3, r3, #13, #4
   2ae26:	2b09      	cmp	r3, #9
   2ae28:	d103      	bne.n	2ae32 <tcp_established+0x1ca>
		k_delayed_work_submit(&context->tcp->timewait_timer,
   2ae2a:	21fa      	movs	r1, #250	; 0xfa
   2ae2c:	3068      	adds	r0, #104	; 0x68
   2ae2e:	f7fe fd95 	bl	2995c <k_delayed_work_submit>
				      CONFIG_NET_TCP_TIME_WAIT_DELAY);
	}

	if (net_tcp_get_state(context->tcp) == NET_TCP_CLOSED) {
   2ae32:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2ae34:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   2ae38:	f3c2 3243 	ubfx	r2, r2, #13, #4
   2ae3c:	2a00      	cmp	r2, #0
   2ae3e:	f47f af3b 	bne.w	2acb8 <tcp_established+0x50>
		if (context->recv_cb) {
   2ae42:	6b26      	ldr	r6, [r4, #48]	; 0x30
   2ae44:	b11e      	cbz	r6, 2ae4e <tcp_established+0x1e6>
			context->recv_cb(context, NULL, 0,
   2ae46:	685b      	ldr	r3, [r3, #4]
   2ae48:	4611      	mov	r1, r2
   2ae4a:	4620      	mov	r0, r4
   2ae4c:	47b0      	blx	r6
					 context->tcp->recv_user_data);
		}

		net_context_unref(context);
   2ae4e:	4620      	mov	r0, r4
   2ae50:	f7f4 ffdc 	bl	1fe0c <net_context_unref>
   2ae54:	e730      	b.n	2acb8 <tcp_established+0x50>
		} else if (net_tcp_get_state(context->tcp)
   2ae56:	2b08      	cmp	r3, #8
   2ae58:	d1a7      	bne.n	2adaa <tcp_established+0x142>
			k_delayed_work_cancel(&context->tcp->fin_timer);
   2ae5a:	3028      	adds	r0, #40	; 0x28
   2ae5c:	f003 fc07 	bl	2e66e <k_delayed_work_cancel>
			net_tcp_change_state(context->tcp, NET_TCP_TIME_WAIT);
   2ae60:	2109      	movs	r1, #9
   2ae62:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2ae64:	f7ff f8a0 	bl	29fa8 <net_tcp_change_state>
   2ae68:	e79f      	b.n	2adaa <tcp_established+0x142>
	if (data_len > 0) {
   2ae6a:	b18e      	cbz	r6, 2ae90 <tcp_established+0x228>
		ret = net_context_packet_received(conn, pkt,
   2ae6c:	685a      	ldr	r2, [r3, #4]
   2ae6e:	4649      	mov	r1, r9
   2ae70:	4640      	mov	r0, r8
   2ae72:	f7f4 fdf7 	bl	1fa64 <net_context_packet_received>
   2ae76:	4605      	mov	r5, r0
	context->tcp->send_ack += data_len;
   2ae78:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2ae7a:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   2ae7e:	441e      	add	r6, r3
	if (tcp_flags & NET_TCP_FIN) {
   2ae80:	b95f      	cbnz	r7, 2ae9a <tcp_established+0x232>
		context->tcp->send_ack += 1;
   2ae82:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94
	send_ack(context, &conn->remote_addr, false);
   2ae86:	2200      	movs	r2, #0
   2ae88:	4641      	mov	r1, r8
   2ae8a:	f7ff fed2 	bl	2ac32 <send_ack.isra.30>
   2ae8e:	e7c5      	b.n	2ae1c <tcp_established+0x1b4>
		net_pkt_unref(pkt);
   2ae90:	4648      	mov	r0, r9
   2ae92:	f7f7 fbb4 	bl	225fe <net_pkt_unref>
	enum net_verdict ret = NET_OK;
   2ae96:	4635      	mov	r5, r6
   2ae98:	e7ee      	b.n	2ae78 <tcp_established+0x210>
		context->tcp->send_ack += 1;
   2ae9a:	3601      	adds	r6, #1
   2ae9c:	e7f1      	b.n	2ae82 <tcp_established+0x21a>
   2ae9e:	bf00      	nop
   2aea0:	2000e2b4 	.word	0x2000e2b4
   2aea4:	0002ef38 	.word	0x0002ef38
   2aea8:	0002f0a8 	.word	0x0002f0a8
   2aeac:	000372d1 	.word	0x000372d1
   2aeb0:	00037029 	.word	0x00037029
   2aeb4:	00037300 	.word	0x00037300
   2aeb8:	00037321 	.word	0x00037321

0002aebc <tcp_synack_received>:
 * Prototype:
 * enum net_verdict tcp_synack_received(struct net_conn *conn,
 *                                      struct net_pkt *pkt,
 *                                      void *user_data)
 */
NET_CONN_CB(tcp_synack_received)
   2aebc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aebe:	4610      	mov	r0, r2
   2aec0:	b097      	sub	sp, #92	; 0x5c
   2aec2:	4614      	mov	r4, r2
   2aec4:	460d      	mov	r5, r1
   2aec6:	f7f4 ff93 	bl	1fdf0 <net_context_ref>
{
	struct net_context *context = (struct net_context *)user_data;
	struct net_tcp_hdr hdr, *tcp_hdr;
	int ret;

	NET_ASSERT(context && context->tcp);
   2aeca:	b10c      	cbz	r4, 2aed0 <tcp_synack_received+0x14>
   2aecc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2aece:	b9a3      	cbnz	r3, 2aefa <tcp_synack_received+0x3e>
   2aed0:	4b54      	ldr	r3, [pc, #336]	; (2b024 <tcp_synack_received+0x168>)
   2aed2:	681b      	ldr	r3, [r3, #0]
   2aed4:	0758      	lsls	r0, r3, #29
   2aed6:	d010      	beq.n	2aefa <tcp_synack_received+0x3e>
   2aed8:	2301      	movs	r3, #1
   2aeda:	f04f 0200 	mov.w	r2, #0
   2aede:	f363 0202 	bfi	r2, r3, #0, #3
   2aee2:	4951      	ldr	r1, [pc, #324]	; (2b028 <tcp_synack_received+0x16c>)
   2aee4:	4b51      	ldr	r3, [pc, #324]	; (2b02c <tcp_synack_received+0x170>)
   2aee6:	4852      	ldr	r0, [pc, #328]	; (2b030 <tcp_synack_received+0x174>)
   2aee8:	1a5b      	subs	r3, r3, r1
   2aeea:	f36f 02c5 	bfc	r2, #3, #3
   2aeee:	08db      	lsrs	r3, r3, #3
   2aef0:	f363 128f 	bfi	r2, r3, #6, #10
   2aef4:	494f      	ldr	r1, [pc, #316]	; (2b034 <tcp_synack_received+0x178>)
   2aef6:	f7d7 f8f9 	bl	20ec <log_1>
   2aefa:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2aefc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc

	switch (net_tcp_get_state(context->tcp)) {
   2af00:	f3c3 3343 	ubfx	r3, r3, #13, #4
   2af04:	2b02      	cmp	r3, #2
   2af06:	d170      	bne.n	2afea <tcp_synack_received+0x12e>
	case NET_TCP_SYN_SENT:
		net_context_set_iface(context, net_pkt_iface(pkt));
   2af08:	6a29      	ldr	r1, [r5, #32]
   2af0a:	f104 0064 	add.w	r0, r4, #100	; 0x64
   2af0e:	f7fe fe43 	bl	29b98 <net_context_set_iface.isra.21>
		return NET_DROP;
	}

	net_pkt_set_context(pkt, context);

	NET_ASSERT(net_pkt_iface(pkt));
   2af12:	6a2b      	ldr	r3, [r5, #32]
	pkt->context = ctx;
   2af14:	61ac      	str	r4, [r5, #24]
   2af16:	b9a3      	cbnz	r3, 2af42 <tcp_synack_received+0x86>
   2af18:	4a42      	ldr	r2, [pc, #264]	; (2b024 <tcp_synack_received+0x168>)
   2af1a:	6812      	ldr	r2, [r2, #0]
   2af1c:	0751      	lsls	r1, r2, #29
   2af1e:	d010      	beq.n	2af42 <tcp_synack_received+0x86>
   2af20:	2101      	movs	r1, #1
   2af22:	f04f 0200 	mov.w	r2, #0
   2af26:	f361 0202 	bfi	r2, r1, #0, #3
   2af2a:	f363 02c5 	bfi	r2, r3, #3, #3
   2af2e:	493e      	ldr	r1, [pc, #248]	; (2b028 <tcp_synack_received+0x16c>)
   2af30:	4b3e      	ldr	r3, [pc, #248]	; (2b02c <tcp_synack_received+0x170>)
   2af32:	4841      	ldr	r0, [pc, #260]	; (2b038 <tcp_synack_received+0x17c>)
   2af34:	1a5b      	subs	r3, r3, r1
   2af36:	08db      	lsrs	r3, r3, #3
   2af38:	f363 128f 	bfi	r2, r3, #6, #10
   2af3c:	493d      	ldr	r1, [pc, #244]	; (2b034 <tcp_synack_received+0x178>)
   2af3e:	f7d7 f8d5 	bl	20ec <log_1>

	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2af42:	a905      	add	r1, sp, #20
   2af44:	4628      	mov	r0, r5
   2af46:	f7ff fa6b 	bl	2a420 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   2af4a:	4606      	mov	r6, r0
   2af4c:	2800      	cmp	r0, #0
   2af4e:	d04c      	beq.n	2afea <tcp_synack_received+0x12e>
		return NET_DROP;
	}

	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   2af50:	7b47      	ldrb	r7, [r0, #13]
   2af52:	077a      	lsls	r2, r7, #29
   2af54:	d50e      	bpl.n	2af74 <tcp_synack_received+0xb8>
		/* We only accept RST packet that has valid seq field. */
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   2af56:	4629      	mov	r1, r5
   2af58:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2af5a:	f7ff fbc9 	bl	2a6f0 <net_tcp_validate_seq>
   2af5e:	2800      	cmp	r0, #0
   2af60:	d043      	beq.n	2afea <tcp_synack_received+0x12e>
			return NET_DROP;
		}

		net_stats_update_tcp_seg_rst(net_pkt_iface(pkt));

		if (context->connect_cb) {
   2af62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2af64:	2b00      	cmp	r3, #0
   2af66:	d040      	beq.n	2afea <tcp_synack_received+0x12e>
			context->connect_cb(context, -ECONNREFUSED,
   2af68:	6822      	ldr	r2, [r4, #0]
   2af6a:	f06f 013c 	mvn.w	r1, #60	; 0x3c
		send_ack(context, &remote_addr, false);

		k_sem_give(&context->tcp->connect_wait);

		if (context->connect_cb) {
			context->connect_cb(context, 0, context->user_data);
   2af6e:	4620      	mov	r0, r4
   2af70:	4798      	blx	r3
   2af72:	e03a      	b.n	2afea <tcp_synack_received+0x12e>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {
   2af74:	07bb      	lsls	r3, r7, #30
   2af76:	d506      	bpl.n	2af86 <tcp_synack_received+0xca>
			sys_get_be32(tcp_hdr->seq) + 1;
   2af78:	3004      	adds	r0, #4
   2af7a:	f7fe fce0 	bl	2993e <sys_get_be32>
		context->tcp->send_ack =
   2af7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
			sys_get_be32(tcp_hdr->seq) + 1;
   2af80:	3001      	adds	r0, #1
		context->tcp->send_ack =
   2af82:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	if (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {
   2af86:	f007 073f 	and.w	r7, r7, #63	; 0x3f
   2af8a:	2f12      	cmp	r7, #18
   2af8c:	d12d      	bne.n	2afea <tcp_synack_received+0x12e>
		if (net_pkt_get_src_addr(
   2af8e:	2218      	movs	r2, #24
   2af90:	a910      	add	r1, sp, #64	; 0x40
   2af92:	4628      	mov	r0, r5
   2af94:	f7f7 fe00 	bl	22b98 <net_pkt_get_src_addr>
   2af98:	2800      	cmp	r0, #0
   2af9a:	db26      	blt.n	2afea <tcp_synack_received+0x12e>
		if (net_pkt_get_dst_addr(
   2af9c:	2218      	movs	r2, #24
   2af9e:	a90a      	add	r1, sp, #40	; 0x28
   2afa0:	4628      	mov	r0, r5
   2afa2:	f7f7 fdfe 	bl	22ba2 <net_pkt_get_dst_addr>
   2afa6:	2800      	cmp	r0, #0
   2afa8:	db1f      	blt.n	2afea <tcp_synack_received+0x12e>
	return net_conn_unregister(handle);
   2afaa:	4625      	mov	r5, r4
   2afac:	f855 0f2c 	ldr.w	r0, [r5, #44]!
   2afb0:	f7fe faa0 	bl	294f4 <net_conn_unregister>
				       ntohs(tcp_hdr->src_port),
   2afb4:	8832      	ldrh	r2, [r6, #0]
				       ntohs(tcp_hdr->dst_port),
   2afb6:	8871      	ldrh	r1, [r6, #2]
				       ntohs(tcp_hdr->src_port),
   2afb8:	0213      	lsls	r3, r2, #8
   2afba:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   2afbe:	4a1f      	ldr	r2, [pc, #124]	; (2b03c <tcp_synack_received+0x180>)
   2afc0:	9201      	str	r2, [sp, #4]
				       ntohs(tcp_hdr->dst_port),
   2afc2:	020a      	lsls	r2, r1, #8
   2afc4:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
   2afc8:	b292      	uxth	r2, r2
   2afca:	9200      	str	r2, [sp, #0]
   2afcc:	e9cd 4502 	strd	r4, r5, [sp, #8]
   2afd0:	b29b      	uxth	r3, r3
   2afd2:	aa0a      	add	r2, sp, #40	; 0x28
   2afd4:	a910      	add	r1, sp, #64	; 0x40
   2afd6:	2006      	movs	r0, #6
   2afd8:	f7fe faa6 	bl	29528 <net_conn_register>
		if (ret < 0) {
   2afdc:	2800      	cmp	r0, #0
   2afde:	da0a      	bge.n	2aff6 <tcp_synack_received+0x13a>
			send_reset(context, &local_addr, &remote_addr);
   2afe0:	aa10      	add	r2, sp, #64	; 0x40
   2afe2:	a90a      	add	r1, sp, #40	; 0x28
   2afe4:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2afe6:	f7fe ffbc 	bl	29f62 <send_reset.isra.23>
NET_CONN_CB(tcp_synack_received)
   2afea:	4620      	mov	r0, r4
   2afec:	f7f4 ff0e 	bl	1fe0c <net_context_unref>
   2aff0:	2002      	movs	r0, #2
   2aff2:	b017      	add	sp, #92	; 0x5c
   2aff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);
   2aff6:	2104      	movs	r1, #4
   2aff8:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2affa:	f7fe ffd5 	bl	29fa8 <net_tcp_change_state>
		net_context_set_state(context, NET_CONTEXT_CONNECTED);
   2affe:	2102      	movs	r1, #2
   2b000:	4620      	mov	r0, r4
   2b002:	f7fe fd35 	bl	29a70 <net_context_set_state>
		send_ack(context, &remote_addr, false);
   2b006:	2200      	movs	r2, #0
   2b008:	a910      	add	r1, sp, #64	; 0x40
   2b00a:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2b00c:	f7ff fe11 	bl	2ac32 <send_ack.isra.30>
		k_sem_give(&context->tcp->connect_wait);
   2b010:	6c60      	ldr	r0, [r4, #68]	; 0x44
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2b012:	30a0      	adds	r0, #160	; 0xa0
   2b014:	f003 f931 	bl	2e27a <_impl_k_sem_give>
		if (context->connect_cb) {
   2b018:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2b01a:	2b00      	cmp	r3, #0
   2b01c:	d0e5      	beq.n	2afea <tcp_synack_received+0x12e>
			context->connect_cb(context, 0, context->user_data);
   2b01e:	6822      	ldr	r2, [r4, #0]
   2b020:	2100      	movs	r1, #0
   2b022:	e7a4      	b.n	2af6e <tcp_synack_received+0xb2>
   2b024:	2000e2b4 	.word	0x2000e2b4
   2b028:	0002ef38 	.word	0x0002ef38
   2b02c:	0002f0a8 	.word	0x0002f0a8
   2b030:	000372d1 	.word	0x000372d1
   2b034:	0003703a 	.word	0x0003703a
   2b038:	000346aa 	.word	0x000346aa
   2b03c:	0002ac69 	.word	0x0002ac69

0002b040 <tcp_hdr_len>:
{
   2b040:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2b042:	a901      	add	r1, sp, #4
   2b044:	f7ff f9ec 	bl	2a420 <net_tcp_get_hdr>
	if (tcp_hdr) {
   2b048:	b110      	cbz	r0, 2b050 <tcp_hdr_len+0x10>
		return NET_TCP_HDR_LEN(tcp_hdr);
   2b04a:	7b00      	ldrb	r0, [r0, #12]
   2b04c:	0900      	lsrs	r0, r0, #4
   2b04e:	0080      	lsls	r0, r0, #2
}
   2b050:	b007      	add	sp, #28
   2b052:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0002b058 <net_tcp_recv>:
{
   2b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NET_ASSERT(context->tcp);
   2b05a:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   2b05c:	4605      	mov	r5, r0
   2b05e:	460f      	mov	r7, r1
   2b060:	4616      	mov	r6, r2
	NET_ASSERT(context->tcp);
   2b062:	b9a3      	cbnz	r3, 2b08e <net_tcp_recv+0x36>
   2b064:	4a16      	ldr	r2, [pc, #88]	; (2b0c0 <net_tcp_recv+0x68>)
   2b066:	6812      	ldr	r2, [r2, #0]
   2b068:	0752      	lsls	r2, r2, #29
   2b06a:	d010      	beq.n	2b08e <net_tcp_recv+0x36>
   2b06c:	2101      	movs	r1, #1
   2b06e:	f04f 0200 	mov.w	r2, #0
   2b072:	f361 0202 	bfi	r2, r1, #0, #3
   2b076:	f363 02c5 	bfi	r2, r3, #3, #3
   2b07a:	4912      	ldr	r1, [pc, #72]	; (2b0c4 <net_tcp_recv+0x6c>)
   2b07c:	4b12      	ldr	r3, [pc, #72]	; (2b0c8 <net_tcp_recv+0x70>)
   2b07e:	4813      	ldr	r0, [pc, #76]	; (2b0cc <net_tcp_recv+0x74>)
   2b080:	1a5b      	subs	r3, r3, r1
   2b082:	08db      	lsrs	r3, r3, #3
   2b084:	f363 128f 	bfi	r2, r3, #6, #10
   2b088:	4911      	ldr	r1, [pc, #68]	; (2b0d0 <net_tcp_recv+0x78>)
   2b08a:	f7d7 f82f 	bl	20ec <log_1>
	if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   2b08e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   2b090:	f8b3 00bc 	ldrh.w	r0, [r3, #188]	; 0xbc
   2b094:	f3c0 1047 	ubfx	r0, r0, #5, #8
   2b098:	f010 0408 	ands.w	r4, r0, #8
   2b09c:	d109      	bne.n	2b0b2 <net_tcp_recv+0x5a>
	} else if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   2b09e:	4628      	mov	r0, r5
   2b0a0:	f7fe fcbe 	bl	29a20 <net_context_get_state>
   2b0a4:	2802      	cmp	r0, #2
   2b0a6:	d107      	bne.n	2b0b8 <net_tcp_recv+0x60>
	context->tcp->recv_user_data = user_data;
   2b0a8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
	context->recv_cb = cb;
   2b0aa:	632f      	str	r7, [r5, #48]	; 0x30
	return 0;
   2b0ac:	4620      	mov	r0, r4
	context->tcp->recv_user_data = user_data;
   2b0ae:	605e      	str	r6, [r3, #4]
}
   2b0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ESHUTDOWN;
   2b0b2:	f06f 0039 	mvn.w	r0, #57	; 0x39
   2b0b6:	e7fb      	b.n	2b0b0 <net_tcp_recv+0x58>
		return -ENOTCONN;
   2b0b8:	f06f 0038 	mvn.w	r0, #56	; 0x38
   2b0bc:	e7f8      	b.n	2b0b0 <net_tcp_recv+0x58>
   2b0be:	bf00      	nop
   2b0c0:	2000e2b4 	.word	0x2000e2b4
   2b0c4:	0002ef38 	.word	0x0002ef38
   2b0c8:	0002f0a8 	.word	0x0002f0a8
   2b0cc:	000371f7 	.word	0x000371f7
   2b0d0:	00037010 	.word	0x00037010

0002b0d4 <net_tcp_put>:
{
   2b0d4:	b530      	push	{r4, r5, lr}
   2b0d6:	b087      	sub	sp, #28
   2b0d8:	4604      	mov	r4, r0
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   2b0da:	f7fe fc4d 	bl	29978 <net_context_get_ip_proto>
   2b0de:	2806      	cmp	r0, #6
   2b0e0:	d138      	bne.n	2b154 <net_tcp_put+0x80>
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   2b0e2:	4620      	mov	r0, r4
   2b0e4:	f7fe fc9c 	bl	29a20 <net_context_get_state>
   2b0e8:	2802      	cmp	r0, #2
   2b0ea:	d109      	bne.n	2b100 <net_tcp_put+0x2c>
		    && !context->tcp->fin_rcvd) {
   2b0ec:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2b0ee:	f890 50be 	ldrb.w	r5, [r0, #190]	; 0xbe
   2b0f2:	f015 0504 	ands.w	r5, r5, #4
   2b0f6:	d009      	beq.n	2b10c <net_tcp_put+0x38>
		return -ENOTCONN;
   2b0f8:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   2b0fc:	b007      	add	sp, #28
   2b0fe:	bd30      	pop	{r4, r5, pc}
		     net_context_get_state(context) == NET_CONTEXT_LISTENING)
   2b100:	4620      	mov	r0, r4
   2b102:	f7fe fc8d 	bl	29a20 <net_context_get_state>
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   2b106:	2803      	cmp	r0, #3
   2b108:	d0f0      	beq.n	2b0ec <net_tcp_put+0x18>
   2b10a:	e7f5      	b.n	2b0f8 <net_tcp_put+0x24>
			k_delayed_work_submit(&context->tcp->fin_timer,
   2b10c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2b110:	3028      	adds	r0, #40	; 0x28
   2b112:	f7fe fc23 	bl	2995c <k_delayed_work_submit>
	struct net_pkt *pkt = NULL;
   2b116:	ab06      	add	r3, sp, #24
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   2b118:	462a      	mov	r2, r5
	struct net_pkt *pkt = NULL;
   2b11a:	f843 5d04 	str.w	r5, [r3, #-4]!
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   2b11e:	9302      	str	r3, [sp, #8]
				      NULL, &ctx->remote, &pkt);
   2b120:	f104 0314 	add.w	r3, r4, #20
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   2b124:	e9cd 5300 	strd	r5, r3, [sp]
   2b128:	2101      	movs	r1, #1
   2b12a:	462b      	mov	r3, r5
   2b12c:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2b12e:	f7fe fff9 	bl	2a124 <net_tcp_prepare_segment>
	if (ret || !pkt) {
   2b132:	b968      	cbnz	r0, 2b150 <net_tcp_put+0x7c>
   2b134:	9905      	ldr	r1, [sp, #20]
   2b136:	b159      	cbz	r1, 2b150 <net_tcp_put+0x7c>
	net_tcp_queue_pkt(ctx, pkt);
   2b138:	f104 0044 	add.w	r0, r4, #68	; 0x44
   2b13c:	f7fe fcf6 	bl	29b2c <net_tcp_queue_pkt.isra.20>
	ret = net_tcp_send_pkt(pkt);
   2b140:	9805      	ldr	r0, [sp, #20]
   2b142:	f7ff fc4b 	bl	2a9dc <net_tcp_send_pkt>
	if (ret < 0) {
   2b146:	2800      	cmp	r0, #0
   2b148:	da02      	bge.n	2b150 <net_tcp_put+0x7c>
		net_pkt_unref(pkt);
   2b14a:	9805      	ldr	r0, [sp, #20]
   2b14c:	f7f7 fa57 	bl	225fe <net_pkt_unref>
			return 0;
   2b150:	2000      	movs	r0, #0
   2b152:	e7d3      	b.n	2b0fc <net_tcp_put+0x28>
	return -EOPNOTSUPP;
   2b154:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   2b158:	e7d0      	b.n	2b0fc <net_tcp_put+0x28>
	...

0002b15c <net_tcp_get>:
{
   2b15c:	b510      	push	{r4, lr}
   2b15e:	4604      	mov	r4, r0
	context->tcp = net_tcp_alloc(context);
   2b160:	f7fe fe1c 	bl	29d9c <net_tcp_alloc>
   2b164:	6460      	str	r0, [r4, #68]	; 0x44
	if (!context->tcp) {
   2b166:	b9b8      	cbnz	r0, 2b198 <net_tcp_get+0x3c>
		NET_ASSERT_INFO(context->tcp, "Cannot allocate TCP context");
   2b168:	4b13      	ldr	r3, [pc, #76]	; (2b1b8 <net_tcp_get+0x5c>)
   2b16a:	681b      	ldr	r3, [r3, #0]
   2b16c:	075b      	lsls	r3, r3, #29
   2b16e:	d010      	beq.n	2b192 <net_tcp_get+0x36>
   2b170:	2301      	movs	r3, #1
   2b172:	f04f 0200 	mov.w	r2, #0
   2b176:	f363 0202 	bfi	r2, r3, #0, #3
   2b17a:	4910      	ldr	r1, [pc, #64]	; (2b1bc <net_tcp_get+0x60>)
   2b17c:	4b10      	ldr	r3, [pc, #64]	; (2b1c0 <net_tcp_get+0x64>)
   2b17e:	1a5b      	subs	r3, r3, r1
   2b180:	f360 02c5 	bfi	r2, r0, #3, #3
   2b184:	08db      	lsrs	r3, r3, #3
   2b186:	f363 128f 	bfi	r2, r3, #6, #10
   2b18a:	490e      	ldr	r1, [pc, #56]	; (2b1c4 <net_tcp_get+0x68>)
   2b18c:	480e      	ldr	r0, [pc, #56]	; (2b1c8 <net_tcp_get+0x6c>)
   2b18e:	f7d6 ffad 	bl	20ec <log_1>
		return -ENOBUFS;
   2b192:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2b196:	e00e      	b.n	2b1b6 <net_tcp_get+0x5a>
	k_delayed_work_init(&context->tcp->ack_timer, handle_ack_timeout);
   2b198:	490c      	ldr	r1, [pc, #48]	; (2b1cc <net_tcp_get+0x70>)
   2b19a:	3008      	adds	r0, #8
   2b19c:	f003 fa5e 	bl	2e65c <k_delayed_work_init>
	k_delayed_work_init(&context->tcp->fin_timer, handle_fin_timeout);
   2b1a0:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2b1a2:	490b      	ldr	r1, [pc, #44]	; (2b1d0 <net_tcp_get+0x74>)
   2b1a4:	3028      	adds	r0, #40	; 0x28
   2b1a6:	f003 fa59 	bl	2e65c <k_delayed_work_init>
	k_delayed_work_init(&context->tcp->timewait_timer,
   2b1aa:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2b1ac:	4909      	ldr	r1, [pc, #36]	; (2b1d4 <net_tcp_get+0x78>)
   2b1ae:	3068      	adds	r0, #104	; 0x68
   2b1b0:	f003 fa54 	bl	2e65c <k_delayed_work_init>
	return 0;
   2b1b4:	2000      	movs	r0, #0
}
   2b1b6:	bd10      	pop	{r4, pc}
   2b1b8:	2000e2b4 	.word	0x2000e2b4
   2b1bc:	0002ef38 	.word	0x0002ef38
   2b1c0:	0002f0a8 	.word	0x0002f0a8
   2b1c4:	0003701d 	.word	0x0003701d
   2b1c8:	000371a2 	.word	0x000371a2
   2b1cc:	0002a3a9 	.word	0x0002a3a9
   2b1d0:	00029955 	.word	0x00029955
   2b1d4:	0002a373 	.word	0x0002a373

0002b1d8 <net_tcp_unref>:
{
   2b1d8:	b538      	push	{r3, r4, r5, lr}
	if (!context->tcp)
   2b1da:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   2b1dc:	4604      	mov	r4, r0
	if (!context->tcp)
   2b1de:	b90b      	cbnz	r3, 2b1e4 <net_tcp_unref+0xc>
}
   2b1e0:	2000      	movs	r0, #0
   2b1e2:	bd38      	pop	{r3, r4, r5, pc}
		if (tcp_backlog[i].tcp != context->tcp) {
   2b1e4:	4d09      	ldr	r5, [pc, #36]	; (2b20c <net_tcp_unref+0x34>)
   2b1e6:	682a      	ldr	r2, [r5, #0]
   2b1e8:	4293      	cmp	r3, r2
   2b1ea:	d108      	bne.n	2b1fe <net_tcp_unref+0x26>
		k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   2b1ec:	f105 000c 	add.w	r0, r5, #12
   2b1f0:	f003 fa3d 	bl	2e66e <k_delayed_work_cancel>
		(void)memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   2b1f4:	2248      	movs	r2, #72	; 0x48
   2b1f6:	2100      	movs	r1, #0
   2b1f8:	4628      	mov	r0, r5
   2b1fa:	f7db fd72 	bl	6ce2 <memset>
	net_tcp_release(context->tcp);
   2b1fe:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2b200:	f7fe ff34 	bl	2a06c <net_tcp_release>
	context->tcp = NULL;
   2b204:	2300      	movs	r3, #0
   2b206:	6463      	str	r3, [r4, #68]	; 0x44
	return 0;
   2b208:	e7ea      	b.n	2b1e0 <net_tcp_unref+0x8>
   2b20a:	bf00      	nop
   2b20c:	20002b08 	.word	0x20002b08

0002b210 <net_tcp_connect>:
		    u16_t rport,
		    u16_t lport,
		    s32_t timeout,
		    net_context_connect_cb_t cb,
		    void *user_data)
{
   2b210:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2b214:	4698      	mov	r8, r3
	int ret;

	NET_ASSERT(context->tcp);
   2b216:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   2b218:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2b21a:	4604      	mov	r4, r0
   2b21c:	460d      	mov	r5, r1
   2b21e:	4617      	mov	r7, r2
	NET_ASSERT(context->tcp);
   2b220:	b9a3      	cbnz	r3, 2b24c <net_tcp_connect+0x3c>
   2b222:	4a29      	ldr	r2, [pc, #164]	; (2b2c8 <net_tcp_connect+0xb8>)
   2b224:	6812      	ldr	r2, [r2, #0]
   2b226:	0752      	lsls	r2, r2, #29
   2b228:	d010      	beq.n	2b24c <net_tcp_connect+0x3c>
   2b22a:	2101      	movs	r1, #1
   2b22c:	f04f 0200 	mov.w	r2, #0
   2b230:	f361 0202 	bfi	r2, r1, #0, #3
   2b234:	f363 02c5 	bfi	r2, r3, #3, #3
   2b238:	4924      	ldr	r1, [pc, #144]	; (2b2cc <net_tcp_connect+0xbc>)
   2b23a:	4b25      	ldr	r3, [pc, #148]	; (2b2d0 <net_tcp_connect+0xc0>)
   2b23c:	4825      	ldr	r0, [pc, #148]	; (2b2d4 <net_tcp_connect+0xc4>)
   2b23e:	1ac9      	subs	r1, r1, r3
   2b240:	08c9      	lsrs	r1, r1, #3
   2b242:	f361 128f 	bfi	r2, r1, #6, #10
   2b246:	4924      	ldr	r1, [pc, #144]	; (2b2d8 <net_tcp_connect+0xc8>)
   2b248:	f7d6 ff50 	bl	20ec <log_1>
	if (context->flags & NET_CONTEXT_TYPE) {
   2b24c:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   2b250:	069b      	lsls	r3, r3, #26
   2b252:	d402      	bmi.n	2b25a <net_tcp_connect+0x4a>

	if (net_context_get_type(context) != SOCK_STREAM) {
		return -ENOTSUP;
   2b254:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2b258:	e030      	b.n	2b2bc <net_tcp_connect+0xac>
	}

	/* We need to register a handler, otherwise the SYN-ACK
	 * packet would not be received.
	 */
	ret = net_tcp_register(addr,
   2b25a:	f104 022c 	add.w	r2, r4, #44	; 0x2c
   2b25e:	e9cd 4202 	strd	r4, r2, [sp, #8]
   2b262:	4a1e      	ldr	r2, [pc, #120]	; (2b2dc <net_tcp_connect+0xcc>)
   2b264:	9201      	str	r2, [sp, #4]
   2b266:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2b26a:	ba52      	rev16	r2, r2
   2b26c:	b292      	uxth	r2, r2
   2b26e:	fa98 f398 	rev16.w	r3, r8
   2b272:	9200      	str	r2, [sp, #0]
   2b274:	b29b      	uxth	r3, r3
   2b276:	463a      	mov	r2, r7
   2b278:	4629      	mov	r1, r5
   2b27a:	2006      	movs	r0, #6
   2b27c:	f7fe f954 	bl	29528 <net_conn_register>
			       ntohs(rport),
			       ntohs(lport),
			       tcp_synack_received,
			       context,
			       &context->conn_handler);
	if (ret < 0) {
   2b280:	2800      	cmp	r0, #0
   2b282:	db1b      	blt.n	2b2bc <net_tcp_connect+0xac>
		return ret;
	}

	context->connect_cb = cb;
   2b284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b286:	63a3      	str	r3, [r4, #56]	; 0x38
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   2b288:	4627      	mov	r7, r4
	context->user_data = user_data;
   2b28a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b28c:	6023      	str	r3, [r4, #0]

	net_context_set_state(context, NET_CONTEXT_CONNECTING);
   2b28e:	2101      	movs	r1, #1
   2b290:	4620      	mov	r0, r4
   2b292:	f7fe fbed 	bl	29a70 <net_context_set_state>
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   2b296:	f857 0f44 	ldr.w	r0, [r7, #68]!
   2b29a:	2102      	movs	r1, #2
   2b29c:	f7fe fe84 	bl	29fa8 <net_tcp_change_state>
	return send_syn_segment(context, NULL, remote, NET_TCP_SYN, "SYN");
   2b2a0:	2302      	movs	r3, #2
   2b2a2:	462a      	mov	r2, r5
   2b2a4:	2100      	movs	r1, #0
   2b2a6:	4638      	mov	r0, r7
   2b2a8:	f7ff f832 	bl	2a310 <send_syn_segment.isra.26>

	send_syn(context, addr);

	/* in tcp_synack_received() we give back this semaphore */
	if (timeout != 0 && k_sem_take(&context->tcp->connect_wait, timeout)) {
   2b2ac:	b12e      	cbz	r6, 2b2ba <net_tcp_connect+0xaa>
   2b2ae:	6c60      	ldr	r0, [r4, #68]	; 0x44
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2b2b0:	4631      	mov	r1, r6
   2b2b2:	30a0      	adds	r0, #160	; 0xa0
   2b2b4:	f003 f808 	bl	2e2c8 <_impl_k_sem_take>
   2b2b8:	b918      	cbnz	r0, 2b2c2 <net_tcp_connect+0xb2>
		return -ETIMEDOUT;
	}

	return 0;
   2b2ba:	2000      	movs	r0, #0
}
   2b2bc:	b004      	add	sp, #16
   2b2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ETIMEDOUT;
   2b2c2:	f06f 003b 	mvn.w	r0, #59	; 0x3b
   2b2c6:	e7f9      	b.n	2b2bc <net_tcp_connect+0xac>
   2b2c8:	2000e2b4 	.word	0x2000e2b4
   2b2cc:	0002f0a8 	.word	0x0002f0a8
   2b2d0:	0002ef38 	.word	0x0002ef38
   2b2d4:	000371f7 	.word	0x000371f7
   2b2d8:	0003704f 	.word	0x0003704f
   2b2dc:	0002aebd 	.word	0x0002aebd

0002b2e0 <net_udp_header_fits>:
{
   2b2e0:	b510      	push	{r4, lr}
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2b2e2:	2208      	movs	r2, #8
{
   2b2e4:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2b2e6:	f7f8 f883 	bl	233f0 <net_header_fits>
   2b2ea:	2800      	cmp	r0, #0
}
   2b2ec:	bf14      	ite	ne
   2b2ee:	4620      	movne	r0, r4
   2b2f0:	2000      	moveq	r0, #0
   2b2f2:	bd10      	pop	{r4, pc}

0002b2f4 <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_pkt *pkt,
			       u16_t offset,
			       u16_t src_port,
			       u16_t dst_port)
{
   2b2f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2b2f8:	f8ad 2006 	strh.w	r2, [sp, #6]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   2b2fc:	f10d 020e 	add.w	r2, sp, #14
{
   2b300:	f8ad 3004 	strh.w	r3, [sp, #4]
   2b304:	4604      	mov	r4, r0
	frag = net_frag_get_pos(pkt, offset, &pos);
   2b306:	f7f7 fc51 	bl	22bac <net_frag_get_pos>
   2b30a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	if (!frag && pos == 0xffff) {
   2b30e:	b940      	cbnz	r0, 2b322 <net_udp_insert+0x2e>
   2b310:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2b314:	4293      	cmp	r3, r2
   2b316:	d106      	bne.n	2b326 <net_udp_insert+0x32>
		NET_DBG("Offset %d out of pkt len %zd",
			offset, net_pkt_get_len(pkt));
		return NULL;
   2b318:	2400      	movs	r4, #0
	return pkt;

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   2b31a:	4620      	mov	r0, r4
   2b31c:	b004      	add	sp, #16
   2b31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (frag && pos != 0) {
   2b322:	2b00      	cmp	r3, #0
   2b324:	d1f8      	bne.n	2b318 <net_udp_insert+0x24>
	if (pkt->frags != frag) {
   2b326:	6965      	ldr	r5, [r4, #20]
   2b328:	42a8      	cmp	r0, r5
   2b32a:	d145      	bne.n	2b3b8 <net_udp_insert+0xc4>
	if (!prev) {
   2b32c:	2d00      	cmp	r5, #0
   2b32e:	d0f3      	beq.n	2b318 <net_udp_insert+0x24>
	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   2b330:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2b334:	4620      	mov	r0, r4
   2b336:	f7f7 f8a1 	bl	2247c <net_pkt_get_frag>
	if (!udp) {
   2b33a:	4680      	mov	r8, r0
   2b33c:	2800      	cmp	r0, #0
   2b33e:	d0eb      	beq.n	2b318 <net_udp_insert+0x24>
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   2b340:	f100 0708 	add.w	r7, r0, #8
   2b344:	2202      	movs	r2, #2
   2b346:	f10d 0106 	add.w	r1, sp, #6
   2b34a:	4638      	mov	r0, r7
   2b34c:	f7f3 ffe6 	bl	1f31c <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   2b350:	2202      	movs	r2, #2
   2b352:	a901      	add	r1, sp, #4
   2b354:	4638      	mov	r0, r7
   2b356:	f7f3 ffe1 	bl	1f31c <net_buf_simple_add_mem>
	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   2b35a:	6966      	ldr	r6, [r4, #20]
	size_t bytes = 0;
   2b35c:	2300      	movs	r3, #0
	while (buf) {
   2b35e:	bb7e      	cbnz	r6, 2b3c0 <net_udp_insert+0xcc>
   2b360:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   2b364:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
   2b368:	f1c1 0108 	rsb	r1, r1, #8
   2b36c:	1a89      	subs	r1, r1, r2
   2b36e:	4419      	add	r1, r3
   2b370:	b289      	uxth	r1, r1
   2b372:	4638      	mov	r0, r7
   2b374:	f7f3 fff2 	bl	1f35c <net_buf_simple_add_be16>
	net_buf_add_be16(udp, 0); /* chksum */
   2b378:	4631      	mov	r1, r6
   2b37a:	4638      	mov	r0, r7
   2b37c:	f7f3 ffee 	bl	1f35c <net_buf_simple_add_be16>
	net_buf_frag_insert(prev, udp);
   2b380:	4641      	mov	r1, r8
   2b382:	4628      	mov	r0, r5
   2b384:	f7f3 ff9d 	bl	1f2c2 <net_buf_frag_insert>
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   2b388:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   2b38c:	f101 0308 	add.w	r3, r1, #8
   2b390:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
   2b394:	4419      	add	r1, r3
   2b396:	f10d 020e 	add.w	r2, sp, #14
   2b39a:	b289      	uxth	r1, r1
   2b39c:	4620      	mov	r0, r4
   2b39e:	f7f7 fc05 	bl	22bac <net_frag_get_pos>
	if (frag) {
   2b3a2:	2800      	cmp	r0, #0
   2b3a4:	d0b9      	beq.n	2b31a <net_udp_insert+0x26>
		net_pkt_set_appdata(pkt, frag->data + pos);
   2b3a6:	6883      	ldr	r3, [r0, #8]
   2b3a8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2b3ac:	4413      	add	r3, r2
	pkt->appdata = data;
   2b3ae:	6263      	str	r3, [r4, #36]	; 0x24
   2b3b0:	e7b3      	b.n	2b31a <net_udp_insert+0x26>
			if (tmp->frags == frag) {
   2b3b2:	4298      	cmp	r0, r3
   2b3b4:	d0bc      	beq.n	2b330 <net_udp_insert+0x3c>
   2b3b6:	461d      	mov	r5, r3
		while (tmp->frags) {
   2b3b8:	682b      	ldr	r3, [r5, #0]
   2b3ba:	2b00      	cmp	r3, #0
   2b3bc:	d1f9      	bne.n	2b3b2 <net_udp_insert+0xbe>
   2b3be:	e7ab      	b.n	2b318 <net_udp_insert+0x24>
		bytes += buf->len;
   2b3c0:	89b2      	ldrh	r2, [r6, #12]
		buf = buf->frags;
   2b3c2:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
   2b3c4:	4413      	add	r3, r2
   2b3c6:	e7ca      	b.n	2b35e <net_udp_insert+0x6a>

0002b3c8 <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   2b3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b3cc:	b086      	sub	sp, #24
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   2b3ce:	2700      	movs	r7, #0
{
   2b3d0:	4604      	mov	r4, r0
   2b3d2:	460d      	mov	r5, r1
	u16_t chksum = 0;
   2b3d4:	f8ad 7014 	strh.w	r7, [sp, #20]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   2b3d8:	f7f7 fc04 	bl	22be4 <net_pkt_udp_data>
   2b3dc:	4606      	mov	r6, r0
	if (net_udp_header_fits(pkt, hdr)) {
   2b3de:	4601      	mov	r1, r0
   2b3e0:	4620      	mov	r0, r4
   2b3e2:	f7ff ff7d 	bl	2b2e0 <net_udp_header_fits>
   2b3e6:	b158      	cbz	r0, 2b400 <net_udp_set_chksum+0x38>
		hdr->chksum = 0;
   2b3e8:	71b7      	strb	r7, [r6, #6]
   2b3ea:	71f7      	strb	r7, [r6, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   2b3ec:	2111      	movs	r1, #17
   2b3ee:	4620      	mov	r0, r4
   2b3f0:	f7f7 ff86 	bl	23300 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   2b3f4:	43c0      	mvns	r0, r0
   2b3f6:	80f0      	strh	r0, [r6, #6]
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   2b3f8:	4628      	mov	r0, r5
   2b3fa:	b006      	add	sp, #24
   2b3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	frag = net_pkt_write(pkt, frag,
   2b400:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   2b404:	1d93      	adds	r3, r2, #6
			     net_pkt_ip_hdr_len(pkt) +
   2b406:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
	frag = net_pkt_write(pkt, frag,
   2b40a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   2b40e:	441a      	add	r2, r3
   2b410:	ae05      	add	r6, sp, #20
   2b412:	2702      	movs	r7, #2
   2b414:	f10d 0316 	add.w	r3, sp, #22
   2b418:	b292      	uxth	r2, r2
   2b41a:	4629      	mov	r1, r5
   2b41c:	f8cd 8008 	str.w	r8, [sp, #8]
   2b420:	9601      	str	r6, [sp, #4]
   2b422:	9700      	str	r7, [sp, #0]
   2b424:	4620      	mov	r0, r4
   2b426:	f7f7 faf9 	bl	22a1c <net_pkt_write>
   2b42a:	2111      	movs	r1, #17
   2b42c:	4605      	mov	r5, r0
   2b42e:	4620      	mov	r0, r4
   2b430:	f7f7 ff66 	bl	23300 <net_calc_chksum>
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2b434:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2b438:	9700      	str	r7, [sp, #0]
	chksum = ~net_calc_chksum_udp(pkt);
   2b43a:	43c0      	mvns	r0, r0
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2b43c:	3a02      	subs	r2, #2
	chksum = ~net_calc_chksum_udp(pkt);
   2b43e:	f8ad 0014 	strh.w	r0, [sp, #20]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2b442:	4629      	mov	r1, r5
   2b444:	e9cd 6801 	strd	r6, r8, [sp, #4]
   2b448:	f10d 0316 	add.w	r3, sp, #22
   2b44c:	b292      	uxth	r2, r2
   2b44e:	4620      	mov	r0, r4
   2b450:	f7f7 fae4 	bl	22a1c <net_pkt_write>
	NET_ASSERT(frag);
   2b454:	4605      	mov	r5, r0
   2b456:	2800      	cmp	r0, #0
   2b458:	d1ce      	bne.n	2b3f8 <net_udp_set_chksum+0x30>
   2b45a:	4b0b      	ldr	r3, [pc, #44]	; (2b488 <net_udp_set_chksum+0xc0>)
   2b45c:	681b      	ldr	r3, [r3, #0]
   2b45e:	075b      	lsls	r3, r3, #29
   2b460:	d0ca      	beq.n	2b3f8 <net_udp_set_chksum+0x30>
   2b462:	2301      	movs	r3, #1
   2b464:	f04f 0200 	mov.w	r2, #0
   2b468:	f363 0202 	bfi	r2, r3, #0, #3
   2b46c:	4907      	ldr	r1, [pc, #28]	; (2b48c <net_udp_set_chksum+0xc4>)
   2b46e:	4b08      	ldr	r3, [pc, #32]	; (2b490 <net_udp_set_chksum+0xc8>)
   2b470:	1a5b      	subs	r3, r3, r1
   2b472:	f360 02c5 	bfi	r2, r0, #3, #3
   2b476:	08db      	lsrs	r3, r3, #3
   2b478:	f363 128f 	bfi	r2, r3, #6, #10
   2b47c:	4905      	ldr	r1, [pc, #20]	; (2b494 <net_udp_set_chksum+0xcc>)
   2b47e:	4806      	ldr	r0, [pc, #24]	; (2b498 <net_udp_set_chksum+0xd0>)
   2b480:	f7d6 fe34 	bl	20ec <log_1>
   2b484:	e7b8      	b.n	2b3f8 <net_udp_set_chksum+0x30>
   2b486:	bf00      	nop
   2b488:	2000e2b8 	.word	0x2000e2b8
   2b48c:	0002ef38 	.word	0x0002ef38
   2b490:	0002f0b0 	.word	0x0002f0b0
   2b494:	00037361 	.word	0x00037361
   2b498:	00037245 	.word	0x00037245

0002b49c <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   2b49c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2b49e:	4604      	mov	r4, r0
   2b4a0:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   2b4a2:	f7f7 fb9f 	bl	22be4 <net_pkt_udp_data>
   2b4a6:	4605      	mov	r5, r0
	if (net_udp_header_fits(pkt, hdr)) {
   2b4a8:	4601      	mov	r1, r0
   2b4aa:	4620      	mov	r0, r4
   2b4ac:	f7ff ff18 	bl	2b2e0 <net_udp_header_fits>
   2b4b0:	b110      	cbz	r0, 2b4b8 <net_udp_get_chksum+0x1c>
		return hdr->chksum;
   2b4b2:	88e8      	ldrh	r0, [r5, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   2b4b4:	b004      	add	sp, #16
   2b4b6:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read(frag,
   2b4b8:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   2b4bc:	1d8b      	adds	r3, r1, #6
			     net_pkt_ip_hdr_len(pkt) +
   2b4be:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
	frag = net_frag_read(frag,
   2b4c2:	4419      	add	r1, r3
   2b4c4:	ab03      	add	r3, sp, #12
   2b4c6:	9300      	str	r3, [sp, #0]
   2b4c8:	f10d 020e 	add.w	r2, sp, #14
   2b4cc:	2302      	movs	r3, #2
   2b4ce:	b289      	uxth	r1, r1
   2b4d0:	4630      	mov	r0, r6
   2b4d2:	f7f7 fa2d 	bl	22930 <net_frag_read>
	NET_ASSERT(frag);
   2b4d6:	b9a0      	cbnz	r0, 2b502 <net_udp_get_chksum+0x66>
   2b4d8:	4b0b      	ldr	r3, [pc, #44]	; (2b508 <net_udp_get_chksum+0x6c>)
   2b4da:	681b      	ldr	r3, [r3, #0]
   2b4dc:	075b      	lsls	r3, r3, #29
   2b4de:	d010      	beq.n	2b502 <net_udp_get_chksum+0x66>
   2b4e0:	2301      	movs	r3, #1
   2b4e2:	f04f 0200 	mov.w	r2, #0
   2b4e6:	f363 0202 	bfi	r2, r3, #0, #3
   2b4ea:	4908      	ldr	r1, [pc, #32]	; (2b50c <net_udp_get_chksum+0x70>)
   2b4ec:	4b08      	ldr	r3, [pc, #32]	; (2b510 <net_udp_get_chksum+0x74>)
   2b4ee:	1a5b      	subs	r3, r3, r1
   2b4f0:	f360 02c5 	bfi	r2, r0, #3, #3
   2b4f4:	08db      	lsrs	r3, r3, #3
   2b4f6:	f363 128f 	bfi	r2, r3, #6, #10
   2b4fa:	4906      	ldr	r1, [pc, #24]	; (2b514 <net_udp_get_chksum+0x78>)
   2b4fc:	4806      	ldr	r0, [pc, #24]	; (2b518 <net_udp_get_chksum+0x7c>)
   2b4fe:	f7d6 fdf5 	bl	20ec <log_1>
	return chksum;
   2b502:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   2b506:	e7d5      	b.n	2b4b4 <net_udp_get_chksum+0x18>
   2b508:	2000e2b8 	.word	0x2000e2b8
   2b50c:	0002ef38 	.word	0x0002ef38
   2b510:	0002f0b0 	.word	0x0002f0b0
   2b514:	00037374 	.word	0x00037374
   2b518:	00037245 	.word	0x00037245

0002b51c <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   2b51c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b51e:	b085      	sub	sp, #20
   2b520:	4606      	mov	r6, r0
   2b522:	460d      	mov	r5, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   2b524:	f7f7 fb5e 	bl	22be4 <net_pkt_udp_data>
	if (net_udp_header_fits(pkt, udp_hdr)) {
   2b528:	4601      	mov	r1, r0
	udp_hdr = net_pkt_udp_data(pkt);
   2b52a:	4607      	mov	r7, r0
	if (net_udp_header_fits(pkt, udp_hdr)) {
   2b52c:	4630      	mov	r0, r6
   2b52e:	f7ff fed7 	bl	2b2e0 <net_udp_header_fits>
   2b532:	4604      	mov	r4, r0
   2b534:	2800      	cmp	r0, #0
   2b536:	d140      	bne.n	2b5ba <net_udp_get_hdr+0x9e>
		return udp_hdr;
	}

	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2b538:	f8b6 304c 	ldrh.w	r3, [r6, #76]	; 0x4c
   2b53c:	f896 1041 	ldrb.w	r1, [r6, #65]	; 0x41
   2b540:	9500      	str	r5, [sp, #0]
   2b542:	4419      	add	r1, r3
   2b544:	f10d 020e 	add.w	r2, sp, #14
   2b548:	2302      	movs	r3, #2
   2b54a:	b289      	uxth	r1, r1
   2b54c:	6970      	ldr	r0, [r6, #20]
   2b54e:	f7f7 f9ef 	bl	22930 <net_frag_read>
			     net_pkt_ipv6_ext_len(pkt),
			     &pos, sizeof(hdr->src_port),
			     (u8_t *)&hdr->src_port);
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
			     (u8_t *)&hdr->dst_port);
   2b552:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   2b554:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2b558:	9300      	str	r3, [sp, #0]
   2b55a:	f10d 020e 	add.w	r2, sp, #14
   2b55e:	2302      	movs	r3, #2
   2b560:	f7f7 f9e6 	bl	22930 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
			     (u8_t *)&hdr->len);
   2b564:	1d2b      	adds	r3, r5, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   2b566:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2b56a:	9300      	str	r3, [sp, #0]
   2b56c:	f10d 020e 	add.w	r2, sp, #14
   2b570:	2302      	movs	r3, #2
   2b572:	f7f7 f9dd 	bl	22930 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum);
   2b576:	1dab      	adds	r3, r5, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   2b578:	9300      	str	r3, [sp, #0]
   2b57a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2b57e:	2302      	movs	r3, #2
   2b580:	f10d 020e 	add.w	r2, sp, #14
   2b584:	f7f7 f9d4 	bl	22930 <net_frag_read>
	if (!frag) {
   2b588:	b9c8      	cbnz	r0, 2b5be <net_udp_get_hdr+0xa2>
		NET_ASSERT(frag);
   2b58a:	4b0e      	ldr	r3, [pc, #56]	; (2b5c4 <net_udp_get_hdr+0xa8>)
   2b58c:	681b      	ldr	r3, [r3, #0]
   2b58e:	075b      	lsls	r3, r3, #29
   2b590:	d010      	beq.n	2b5b4 <net_udp_get_hdr+0x98>
   2b592:	2301      	movs	r3, #1
   2b594:	f04f 0200 	mov.w	r2, #0
   2b598:	f363 0202 	bfi	r2, r3, #0, #3
   2b59c:	490a      	ldr	r1, [pc, #40]	; (2b5c8 <net_udp_get_hdr+0xac>)
   2b59e:	4b0b      	ldr	r3, [pc, #44]	; (2b5cc <net_udp_get_hdr+0xb0>)
   2b5a0:	480b      	ldr	r0, [pc, #44]	; (2b5d0 <net_udp_get_hdr+0xb4>)
   2b5a2:	1a5b      	subs	r3, r3, r1
   2b5a4:	f364 02c5 	bfi	r2, r4, #3, #3
   2b5a8:	08db      	lsrs	r3, r3, #3
   2b5aa:	f363 128f 	bfi	r2, r3, #6, #10
   2b5ae:	4909      	ldr	r1, [pc, #36]	; (2b5d4 <net_udp_get_hdr+0xb8>)
   2b5b0:	f7d6 fd9c 	bl	20ec <log_1>
		return NULL;
	}

	return hdr;
}
   2b5b4:	4620      	mov	r0, r4
   2b5b6:	b005      	add	sp, #20
   2b5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return udp_hdr;
   2b5ba:	463c      	mov	r4, r7
   2b5bc:	e7fa      	b.n	2b5b4 <net_udp_get_hdr+0x98>
	return hdr;
   2b5be:	462c      	mov	r4, r5
   2b5c0:	e7f8      	b.n	2b5b4 <net_udp_get_hdr+0x98>
   2b5c2:	bf00      	nop
   2b5c4:	2000e2b8 	.word	0x2000e2b8
   2b5c8:	0002ef38 	.word	0x0002ef38
   2b5cc:	0002f0b0 	.word	0x0002f0b0
   2b5d0:	00037245 	.word	0x00037245
   2b5d4:	00037387 	.word	0x00037387

0002b5d8 <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   2b5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b5dc:	b086      	sub	sp, #24
   2b5de:	4604      	mov	r4, r0
   2b5e0:	460d      	mov	r5, r1
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   2b5e2:	f7ff fe7d 	bl	2b2e0 <net_udp_header_fits>
   2b5e6:	4606      	mov	r6, r0
   2b5e8:	b120      	cbz	r0, 2b5f4 <net_udp_set_hdr+0x1c>
		return hdr;
   2b5ea:	462e      	mov	r6, r5
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   2b5ec:	4630      	mov	r0, r6
   2b5ee:	b006      	add	sp, #24
   2b5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2b5f4:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   2b5f8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
   2b5fc:	6961      	ldr	r1, [r4, #20]
   2b5fe:	2702      	movs	r7, #2
   2b600:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   2b604:	441a      	add	r2, r3
   2b606:	b292      	uxth	r2, r2
   2b608:	f10d 0316 	add.w	r3, sp, #22
   2b60c:	e9cd 5801 	strd	r5, r8, [sp, #4]
   2b610:	9700      	str	r7, [sp, #0]
   2b612:	4620      	mov	r0, r4
   2b614:	f7f7 fa02 	bl	22a1c <net_pkt_write>
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   2b618:	19eb      	adds	r3, r5, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   2b61a:	4601      	mov	r1, r0
   2b61c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2b620:	f8cd 8008 	str.w	r8, [sp, #8]
   2b624:	e9cd 7300 	strd	r7, r3, [sp]
   2b628:	4620      	mov	r0, r4
   2b62a:	f10d 0316 	add.w	r3, sp, #22
   2b62e:	f7f7 f9f5 	bl	22a1c <net_pkt_write>
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   2b632:	1d2b      	adds	r3, r5, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   2b634:	4601      	mov	r1, r0
   2b636:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2b63a:	f8cd 8008 	str.w	r8, [sp, #8]
   2b63e:	e9cd 7300 	strd	r7, r3, [sp]
   2b642:	4620      	mov	r0, r4
   2b644:	f10d 0316 	add.w	r3, sp, #22
   2b648:	f7f7 f9e8 	bl	22a1c <net_pkt_write>
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   2b64c:	1dab      	adds	r3, r5, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   2b64e:	e9cd 7300 	strd	r7, r3, [sp]
   2b652:	4601      	mov	r1, r0
   2b654:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2b658:	f8cd 8008 	str.w	r8, [sp, #8]
   2b65c:	f10d 0316 	add.w	r3, sp, #22
   2b660:	4620      	mov	r0, r4
   2b662:	f7f7 f9db 	bl	22a1c <net_pkt_write>
	if (!frag) {
   2b666:	2800      	cmp	r0, #0
   2b668:	d1bf      	bne.n	2b5ea <net_udp_set_hdr+0x12>
		NET_ASSERT(frag);
   2b66a:	4b0b      	ldr	r3, [pc, #44]	; (2b698 <net_udp_set_hdr+0xc0>)
   2b66c:	681b      	ldr	r3, [r3, #0]
   2b66e:	075b      	lsls	r3, r3, #29
   2b670:	d0bc      	beq.n	2b5ec <net_udp_set_hdr+0x14>
   2b672:	2301      	movs	r3, #1
   2b674:	f04f 0200 	mov.w	r2, #0
   2b678:	f363 0202 	bfi	r2, r3, #0, #3
   2b67c:	4907      	ldr	r1, [pc, #28]	; (2b69c <net_udp_set_hdr+0xc4>)
   2b67e:	4b08      	ldr	r3, [pc, #32]	; (2b6a0 <net_udp_set_hdr+0xc8>)
   2b680:	4808      	ldr	r0, [pc, #32]	; (2b6a4 <net_udp_set_hdr+0xcc>)
   2b682:	1a5b      	subs	r3, r3, r1
   2b684:	f366 02c5 	bfi	r2, r6, #3, #3
   2b688:	08db      	lsrs	r3, r3, #3
   2b68a:	f363 128f 	bfi	r2, r3, #6, #10
   2b68e:	4906      	ldr	r1, [pc, #24]	; (2b6a8 <net_udp_set_hdr+0xd0>)
   2b690:	f7d6 fd2c 	bl	20ec <log_1>
   2b694:	e7aa      	b.n	2b5ec <net_udp_set_hdr+0x14>
   2b696:	bf00      	nop
   2b698:	2000e2b8 	.word	0x2000e2b8
   2b69c:	0002ef38 	.word	0x0002ef38
   2b6a0:	0002f0b0 	.word	0x0002f0b0
   2b6a4:	00037245 	.word	0x00037245
   2b6a8:	00037397 	.word	0x00037397

0002b6ac <rlen_encode>:
 * @param [in] len Value to encode
 *
 * @retval 0 always
 */
static int rlen_encode(u8_t *buf, u32_t len)
{
   2b6ac:	b510      	push	{r4, lr}
   2b6ae:	2300      	movs	r3, #0
	u8_t encoded;
	u8_t i;

	i = 0;
	do {
		encoded = len % 128;
   2b6b0:	f001 027f 	and.w	r2, r1, #127	; 0x7f
		 * set the top bit of this byte
		 */
		if (len > 0) {
			encoded = encoded | 128;
		}
		buf[i++] = encoded;
   2b6b4:	b2dc      	uxtb	r4, r3
		if (len > 0) {
   2b6b6:	09c9      	lsrs	r1, r1, #7
			encoded = encoded | 128;
   2b6b8:	bf18      	it	ne
   2b6ba:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
		buf[i++] = encoded;
   2b6be:	5502      	strb	r2, [r0, r4]
   2b6c0:	3301      	adds	r3, #1
	} while (len > 0);
   2b6c2:	2900      	cmp	r1, #0
   2b6c4:	d1f4      	bne.n	2b6b0 <rlen_encode+0x4>

	return 0;
}
   2b6c6:	4608      	mov	r0, r1
   2b6c8:	bd10      	pop	{r4, pc}

0002b6ca <rlen_decode>:
 * @retval 0 on success
 * @retval -ENOMEM if size < 4
 */
static int rlen_decode(u32_t *rlen, u16_t *rlen_size,
		       u8_t *buf, u16_t size)
{
   2b6ca:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t value = 0;
	u32_t mult = 1;
	u16_t i = 0;
   2b6cc:	2400      	movs	r4, #0
   2b6ce:	3a01      	subs	r2, #1
	u32_t mult = 1;
   2b6d0:	2601      	movs	r6, #1
	u32_t value = 0;
   2b6d2:	4625      	mov	r5, r4
	u8_t encoded;

	do {
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
   2b6d4:	42a3      	cmp	r3, r4
   2b6d6:	d011      	beq.n	2b6fc <rlen_decode+0x32>
			return -ENOMEM;
		}

		encoded = buf[i++];
   2b6d8:	f812 7f01 	ldrb.w	r7, [r2, #1]!
   2b6dc:	3401      	adds	r4, #1
		value += (encoded & 127) * mult;
   2b6de:	f007 0c7f 	and.w	ip, r7, #127	; 0x7f
		mult *= 128;
	} while ((encoded & 128) != 0);
   2b6e2:	063f      	lsls	r7, r7, #24
		value += (encoded & 127) * mult;
   2b6e4:	fb06 550c 	mla	r5, r6, ip, r5
		encoded = buf[i++];
   2b6e8:	b2a4      	uxth	r4, r4
		mult *= 128;
   2b6ea:	ea4f 16c6 	mov.w	r6, r6, lsl #7
	} while ((encoded & 128) != 0);
   2b6ee:	d403      	bmi.n	2b6f8 <rlen_decode+0x2e>

	*rlen = value;
   2b6f0:	6005      	str	r5, [r0, #0]
	*rlen_size = i;
   2b6f2:	800c      	strh	r4, [r1, #0]

	return 0;
   2b6f4:	2000      	movs	r0, #0
}
   2b6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
   2b6f8:	2c04      	cmp	r4, #4
   2b6fa:	d1eb      	bne.n	2b6d4 <rlen_decode+0xa>
			return -ENOMEM;
   2b6fc:	f06f 000b 	mvn.w	r0, #11
   2b700:	e7f9      	b.n	2b6f6 <rlen_decode+0x2c>

0002b702 <unpack_pktid_validate>:
 */
static
int unpack_pktid(u8_t *buf, u16_t length, enum mqtt_packet *type,
		 u8_t *reserved, u16_t *pkt_id)
{
	if (length < MSG_PKTID_ONLY_SIZE) {
   2b702:	2903      	cmp	r1, #3
 * @retval -EINVAL
 */
static
int unpack_pktid_validate(u8_t *buf, u16_t length, u16_t *pkt_id,
			  u8_t expected_type, u8_t expected_reserv)
{
   2b704:	b510      	push	{r4, lr}
	if (length < MSG_PKTID_ONLY_SIZE) {
   2b706:	d802      	bhi.n	2b70e <unpack_pktid_validate+0xc>
{
   2b708:	f06f 0015 	mvn.w	r0, #21
	if (type != expected_type || reserved != expected_reserv) {
		return -EINVAL;
	}

	return 0;
}
   2b70c:	bd10      	pop	{r4, pc}
	if (buf[1] != PACKET_ID_SIZE) {
   2b70e:	7841      	ldrb	r1, [r0, #1]
   2b710:	2902      	cmp	r1, #2
   2b712:	d1f9      	bne.n	2b708 <unpack_pktid_validate+0x6>
	*pkt_id = ntohs(*(u16_t *)(buf + 2));
   2b714:	8844      	ldrh	r4, [r0, #2]
	*type = buf[0] >> 4;
   2b716:	7801      	ldrb	r1, [r0, #0]
	*pkt_id = ntohs(*(u16_t *)(buf + 2));
   2b718:	0220      	lsls	r0, r4, #8
   2b71a:	ea40 2014 	orr.w	r0, r0, r4, lsr #8
	if (type != expected_type || reserved != expected_reserv) {
   2b71e:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
	*pkt_id = ntohs(*(u16_t *)(buf + 2));
   2b722:	8010      	strh	r0, [r2, #0]
	if (type != expected_type || reserved != expected_reserv) {
   2b724:	d1f0      	bne.n	2b708 <unpack_pktid_validate+0x6>
   2b726:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2b72a:	f001 010f 	and.w	r1, r1, #15
   2b72e:	428b      	cmp	r3, r1
   2b730:	d1ea      	bne.n	2b708 <unpack_pktid_validate+0x6>
	return 0;
   2b732:	2000      	movs	r0, #0
   2b734:	e7ea      	b.n	2b70c <unpack_pktid_validate+0xa>

0002b736 <compute_rlen_size>:
	if (len <= 127) {
   2b736:	297f      	cmp	r1, #127	; 0x7f
   2b738:	d803      	bhi.n	2b742 <compute_rlen_size+0xc>
		*size = 1;
   2b73a:	2301      	movs	r3, #1
		*size = 3;
   2b73c:	8003      	strh	r3, [r0, #0]
}
   2b73e:	2000      	movs	r0, #0
   2b740:	4770      	bx	lr
	} else if (len >= 128 && len <= 16383) {
   2b742:	3980      	subs	r1, #128	; 0x80
   2b744:	f5b1 5f7e 	cmp.w	r1, #16256	; 0x3f80
		*size = 2;
   2b748:	bf34      	ite	cc
   2b74a:	2302      	movcc	r3, #2
		*size = 3;
   2b74c:	2303      	movcs	r3, #3
   2b74e:	e7f5      	b.n	2b73c <compute_rlen_size+0x6>

0002b750 <unpack_zerolen_validate.constprop.1>:
 */
static
int unpack_zerolen(u8_t *buf, u16_t length, enum mqtt_packet *pkt_type,
		   u8_t *reserved)
{
	if (length < MSG_ZEROLEN_SIZE) {
   2b750:	2901      	cmp	r1, #1
   2b752:	d903      	bls.n	2b75c <unpack_zerolen_validate.constprop.1+0xc>
		return -EINVAL;
	}

	*pkt_type = buf[0] >> 4;
   2b754:	7803      	ldrb	r3, [r0, #0]
	*reserved = buf[0] & 0x0F;

	if (buf[1] != 0) {
   2b756:	7840      	ldrb	r0, [r0, #1]
	*pkt_type = buf[0] >> 4;
   2b758:	0919      	lsrs	r1, r3, #4
	if (buf[1] != 0) {
   2b75a:	b110      	cbz	r0, 2b762 <unpack_zerolen_validate.constprop.1+0x12>
	rc = unpack_zerolen(buf, length, &pkt_type, &reserved);
	if (rc != 0) {
		return rc;
	}

	if (pkt_type != expected_type || reserved != expected_reserved) {
   2b75c:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	return 0;
}
   2b760:	4770      	bx	lr
	if (pkt_type != expected_type || reserved != expected_reserved) {
   2b762:	428a      	cmp	r2, r1
   2b764:	d1fa      	bne.n	2b75c <unpack_zerolen_validate.constprop.1+0xc>
   2b766:	f013 0f0f 	tst.w	r3, #15
	return 0;
   2b76a:	bf14      	ite	ne
   2b76c:	f06f 0015 	mvnne.w	r0, #21
   2b770:	2000      	moveq	r0, #0
   2b772:	4770      	bx	lr

0002b774 <mqtt_pack_subscribe_unsubscribe>:
{
   2b774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b778:	b087      	sub	sp, #28
   2b77a:	468a      	mov	sl, r1
   2b77c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
   2b780:	9300      	str	r3, [sp, #0]
   2b782:	4606      	mov	r6, r0
   2b784:	4693      	mov	fp, r2
   2b786:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
	if (items <= 0) {
   2b78a:	b929      	cbnz	r1, 2b798 <mqtt_pack_subscribe_unsubscribe+0x24>
		return -EINVAL;
   2b78c:	f06f 0415 	mvn.w	r4, #21
}
   2b790:	4620      	mov	r0, r4
   2b792:	b007      	add	sp, #28
   2b794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (type != MQTT_SUBSCRIBE && type != MQTT_UNSUBSCRIBE) {
   2b798:	f008 03fd 	and.w	r3, r8, #253	; 0xfd
   2b79c:	2b08      	cmp	r3, #8
   2b79e:	d1f5      	bne.n	2b78c <mqtt_pack_subscribe_unsubscribe+0x18>
	rc = subscribe_size(&rlen_size, &payload, items, topics,
   2b7a0:	f1a8 0308 	sub.w	r3, r8, #8
   2b7a4:	425a      	negs	r2, r3
   2b7a6:	415a      	adcs	r2, r3
   2b7a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b7aa:	008f      	lsls	r7, r1, #2
   2b7ac:	f1a3 0904 	sub.w	r9, r3, #4
   2b7b0:	461d      	mov	r5, r3
	*payload_size = PACKET_ID_SIZE;
   2b7b2:	2402      	movs	r4, #2
   2b7b4:	eb09 0307 	add.w	r3, r9, r7
	for (i = 0; i < items; i++) {
   2b7b8:	454b      	cmp	r3, r9
   2b7ba:	d12d      	bne.n	2b818 <mqtt_pack_subscribe_unsubscribe+0xa4>
	*payload_size += items * INT_SIZE;
   2b7bc:	eb04 0441 	add.w	r4, r4, r1, lsl #1
   2b7c0:	b2a2      	uxth	r2, r4
	rc = compute_rlen_size(rlen_size, *payload_size);
   2b7c2:	4611      	mov	r1, r2
   2b7c4:	f10d 0016 	add.w	r0, sp, #22
   2b7c8:	f7ff ffb5 	bl	2b736 <compute_rlen_size>
	if (rc != 0) {
   2b7cc:	4604      	mov	r4, r0
   2b7ce:	2800      	cmp	r0, #0
   2b7d0:	d1dc      	bne.n	2b78c <mqtt_pack_subscribe_unsubscribe+0x18>
	if ((rlen_size + payload + 1) > size) {
   2b7d2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   2b7d6:	4413      	add	r3, r2
   2b7d8:	3301      	adds	r3, #1
   2b7da:	455b      	cmp	r3, fp
   2b7dc:	dc5a      	bgt.n	2b894 <mqtt_pack_subscribe_unsubscribe+0x120>
	buf[0] = (type << 4) + 0x02;
   2b7de:	4630      	mov	r0, r6
   2b7e0:	ea4f 1308 	mov.w	r3, r8, lsl #4
   2b7e4:	3302      	adds	r3, #2
	rlen_encode(buf + PACKET_TYPE_SIZE, payload);
   2b7e6:	4611      	mov	r1, r2
	buf[0] = (type << 4) + 0x02;
   2b7e8:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, payload);
   2b7ec:	f7ff ff5e 	bl	2b6ac <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   2b7f0:	f8bd 9016 	ldrh.w	r9, [sp, #22]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + offset));
   2b7f4:	9a00      	ldr	r2, [sp, #0]
	offset = PACKET_TYPE_SIZE + rlen_size;
   2b7f6:	f109 0301 	add.w	r3, r9, #1
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + offset));
   2b7fa:	b29b      	uxth	r3, r3
   2b7fc:	ba52      	rev16	r2, r2
   2b7fe:	52f2      	strh	r2, [r6, r3]
   2b800:	e9dd 3b11 	ldrd	r3, fp, [sp, #68]	; 0x44
	offset += PACKET_ID_SIZE;
   2b804:	f109 0903 	add.w	r9, r9, #3
   2b808:	fa1f f989 	uxth.w	r9, r9
   2b80c:	441f      	add	r7, r3
	for (i = 0; i < items; i++) {
   2b80e:	42bd      	cmp	r5, r7
   2b810:	d112      	bne.n	2b838 <mqtt_pack_subscribe_unsubscribe+0xc4>
	*length = offset;
   2b812:	f8aa 9000 	strh.w	r9, [sl]
	return 0;
   2b816:	e7bb      	b.n	2b790 <mqtt_pack_subscribe_unsubscribe+0x1c>
		*payload_size += mqtt_strlen(topics[i]) +
   2b818:	f859 0f04 	ldr.w	r0, [r9, #4]!
	if (str) {
   2b81c:	b140      	cbz	r0, 2b830 <mqtt_pack_subscribe_unsubscribe+0xbc>
   2b81e:	e9cd 3102 	strd	r3, r1, [sp, #8]
   2b822:	9201      	str	r2, [sp, #4]
		return (u16_t)strlen(str);
   2b824:	f7db f9da 	bl	6bdc <strlen>
   2b828:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   2b82c:	9903      	ldr	r1, [sp, #12]
   2b82e:	b280      	uxth	r0, r0
		*payload_size += mqtt_strlen(topics[i]) +
   2b830:	4410      	add	r0, r2
   2b832:	4404      	add	r4, r0
   2b834:	b2a4      	uxth	r4, r4
   2b836:	e7bf      	b.n	2b7b8 <mqtt_pack_subscribe_unsubscribe+0x44>
		u16_t topic_len = mqtt_strlen(topics[i]);
   2b838:	6828      	ldr	r0, [r5, #0]
   2b83a:	4629      	mov	r1, r5
	if (str) {
   2b83c:	b340      	cbz	r0, 2b890 <mqtt_pack_subscribe_unsubscribe+0x11c>
   2b83e:	9500      	str	r5, [sp, #0]
		return (u16_t)strlen(str);
   2b840:	f7db f9cc 	bl	6bdc <strlen>
   2b844:	9900      	ldr	r1, [sp, #0]
   2b846:	b283      	uxth	r3, r0
		UNALIGNED_PUT(htons(topic_len), (u16_t *)(buf + offset));
   2b848:	ba5a      	rev16	r2, r3
   2b84a:	f826 2009 	strh.w	r2, [r6, r9]
		offset += INT_SIZE;
   2b84e:	f109 0902 	add.w	r9, r9, #2
   2b852:	fa1f f989 	uxth.w	r9, r9
		memcpy(buf + offset, topics[i], topic_len);
   2b856:	461a      	mov	r2, r3
   2b858:	eb06 0009 	add.w	r0, r6, r9
   2b85c:	6809      	ldr	r1, [r1, #0]
   2b85e:	9300      	str	r3, [sp, #0]
   2b860:	f7db fa12 	bl	6c88 <memcpy>
		offset += topic_len;
   2b864:	9b00      	ldr	r3, [sp, #0]
		if (type == MQTT_SUBSCRIBE) {
   2b866:	f1b8 0f08 	cmp.w	r8, #8
		offset += topic_len;
   2b86a:	4499      	add	r9, r3
   2b86c:	f105 0504 	add.w	r5, r5, #4
   2b870:	fa1f f989 	uxth.w	r9, r9
		if (type == MQTT_SUBSCRIBE) {
   2b874:	d109      	bne.n	2b88a <mqtt_pack_subscribe_unsubscribe+0x116>
			buf[offset] = qos[i] & 0x03;
   2b876:	f89b 3000 	ldrb.w	r3, [fp]
   2b87a:	f003 0303 	and.w	r3, r3, #3
   2b87e:	f806 3009 	strb.w	r3, [r6, r9]
			offset += QoS_SIZE;
   2b882:	f109 0901 	add.w	r9, r9, #1
   2b886:	fa1f f989 	uxth.w	r9, r9
   2b88a:	f10b 0b01 	add.w	fp, fp, #1
   2b88e:	e7be      	b.n	2b80e <mqtt_pack_subscribe_unsubscribe+0x9a>
	return 0;
   2b890:	4603      	mov	r3, r0
   2b892:	e7d9      	b.n	2b848 <mqtt_pack_subscribe_unsubscribe+0xd4>
		return -ENOMEM;
   2b894:	f06f 040b 	mvn.w	r4, #11
   2b898:	e77a      	b.n	2b790 <mqtt_pack_subscribe_unsubscribe+0x1c>

0002b89a <mqtt_pack_puback>:
	if (size < MSG_PKTID_ONLY_SIZE) {
   2b89a:	2a03      	cmp	r2, #3
   2b89c:	d909      	bls.n	2b8b2 <mqtt_pack_puback+0x18>
	buf[0] = (type << 4) + (reserved & 0x0F);
   2b89e:	2240      	movs	r2, #64	; 0x40
   2b8a0:	7002      	strb	r2, [r0, #0]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   2b8a2:	ba5b      	rev16	r3, r3
	buf[1] = PACKET_ID_SIZE;
   2b8a4:	2202      	movs	r2, #2
   2b8a6:	7042      	strb	r2, [r0, #1]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   2b8a8:	8043      	strh	r3, [r0, #2]
	*length = MSG_PKTID_ONLY_SIZE;
   2b8aa:	2304      	movs	r3, #4
   2b8ac:	800b      	strh	r3, [r1, #0]
	return 0;
   2b8ae:	2000      	movs	r0, #0
   2b8b0:	4770      	bx	lr
		return -ENOMEM;
   2b8b2:	f06f 000b 	mvn.w	r0, #11
}
   2b8b6:	4770      	bx	lr

0002b8b8 <mqtt_pack_pubrec>:
	if (size < MSG_PKTID_ONLY_SIZE) {
   2b8b8:	2a03      	cmp	r2, #3
   2b8ba:	d909      	bls.n	2b8d0 <mqtt_pack_pubrec+0x18>
	buf[0] = (type << 4) + (reserved & 0x0F);
   2b8bc:	2250      	movs	r2, #80	; 0x50
   2b8be:	7002      	strb	r2, [r0, #0]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   2b8c0:	ba5b      	rev16	r3, r3
	buf[1] = PACKET_ID_SIZE;
   2b8c2:	2202      	movs	r2, #2
   2b8c4:	7042      	strb	r2, [r0, #1]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   2b8c6:	8043      	strh	r3, [r0, #2]
	*length = MSG_PKTID_ONLY_SIZE;
   2b8c8:	2304      	movs	r3, #4
   2b8ca:	800b      	strh	r3, [r1, #0]
	return 0;
   2b8cc:	2000      	movs	r0, #0
   2b8ce:	4770      	bx	lr
		return -ENOMEM;
   2b8d0:	f06f 000b 	mvn.w	r0, #11
}
   2b8d4:	4770      	bx	lr

0002b8d6 <mqtt_pack_pubrel>:
	if (size < MSG_PKTID_ONLY_SIZE) {
   2b8d6:	2a03      	cmp	r2, #3
   2b8d8:	d909      	bls.n	2b8ee <mqtt_pack_pubrel+0x18>
	buf[0] = (type << 4) + (reserved & 0x0F);
   2b8da:	2262      	movs	r2, #98	; 0x62
   2b8dc:	7002      	strb	r2, [r0, #0]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   2b8de:	ba5b      	rev16	r3, r3
	buf[1] = PACKET_ID_SIZE;
   2b8e0:	2202      	movs	r2, #2
   2b8e2:	7042      	strb	r2, [r0, #1]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   2b8e4:	8043      	strh	r3, [r0, #2]
	*length = MSG_PKTID_ONLY_SIZE;
   2b8e6:	2304      	movs	r3, #4
   2b8e8:	800b      	strh	r3, [r1, #0]
	return 0;
   2b8ea:	2000      	movs	r0, #0
   2b8ec:	4770      	bx	lr
		return -ENOMEM;
   2b8ee:	f06f 000b 	mvn.w	r0, #11
}
   2b8f2:	4770      	bx	lr

0002b8f4 <mqtt_pack_pubcomp>:
	if (size < MSG_PKTID_ONLY_SIZE) {
   2b8f4:	2a03      	cmp	r2, #3
   2b8f6:	d909      	bls.n	2b90c <mqtt_pack_pubcomp+0x18>
	buf[0] = (type << 4) + (reserved & 0x0F);
   2b8f8:	2270      	movs	r2, #112	; 0x70
   2b8fa:	7002      	strb	r2, [r0, #0]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   2b8fc:	ba5b      	rev16	r3, r3
	buf[1] = PACKET_ID_SIZE;
   2b8fe:	2202      	movs	r2, #2
   2b900:	7042      	strb	r2, [r0, #1]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   2b902:	8043      	strh	r3, [r0, #2]
	*length = MSG_PKTID_ONLY_SIZE;
   2b904:	2304      	movs	r3, #4
   2b906:	800b      	strh	r3, [r1, #0]
	return 0;
   2b908:	2000      	movs	r0, #0
   2b90a:	4770      	bx	lr
		return -ENOMEM;
   2b90c:	f06f 000b 	mvn.w	r0, #11
}
   2b910:	4770      	bx	lr

0002b912 <mqtt_pack_connect>:
{
   2b912:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2b916:	461c      	mov	r4, r3
   2b918:	460e      	mov	r6, r1
	pkt_size += msg->client_id_len;
   2b91a:	8919      	ldrh	r1, [r3, #8]
	if (msg->will_flag) {
   2b91c:	7a9b      	ldrb	r3, [r3, #10]
{
   2b91e:	4605      	mov	r5, r0
	if (msg->will_flag) {
   2b920:	07d8      	lsls	r0, r3, #31
		pkt_size += msg->will_msg_len;
   2b922:	bf41      	itttt	mi
   2b924:	8aa3      	ldrhmi	r3, [r4, #20]
   2b926:	18c9      	addmi	r1, r1, r3
   2b928:	8ba3      	ldrhmi	r3, [r4, #28]
   2b92a:	3106      	addmi	r1, #6
   2b92c:	bf48      	it	mi
   2b92e:	18c9      	addmi	r1, r1, r3
	if (msg->user_name) {
   2b930:	6a23      	ldr	r3, [r4, #32]
	pkt_size += msg->client_id_len;
   2b932:	bf58      	it	pl
   2b934:	3102      	addpl	r1, #2
		pkt_size += msg->will_msg_len;
   2b936:	b289      	uxth	r1, r1
	if (msg->user_name) {
   2b938:	b11b      	cbz	r3, 2b942 <mqtt_pack_connect+0x30>
		pkt_size += msg->user_name_len;
   2b93a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   2b93c:	3302      	adds	r3, #2
   2b93e:	4419      	add	r1, r3
   2b940:	b289      	uxth	r1, r1
	if (msg->password) {
   2b942:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2b944:	b11b      	cbz	r3, 2b94e <mqtt_pack_connect+0x3c>
		pkt_size += msg->password_len;
   2b946:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   2b948:	3302      	adds	r3, #2
   2b94a:	4419      	add	r1, r3
   2b94c:	b289      	uxth	r1, r1
	pkt_size += CONNECT_VARIABLE_HDR_SIZE;
   2b94e:	310a      	adds	r1, #10
   2b950:	fa1f f981 	uxth.w	r9, r1
	rc = compute_rlen_size(&rlen_size, pkt_size);
   2b954:	4649      	mov	r1, r9
   2b956:	f10d 0006 	add.w	r0, sp, #6
   2b95a:	f7ff feec 	bl	2b736 <compute_rlen_size>
	if (rc != 0) {
   2b95e:	4680      	mov	r8, r0
   2b960:	2800      	cmp	r0, #0
   2b962:	f040 80b4 	bne.w	2bace <mqtt_pack_connect+0x1bc>
	total_buf_size = PACKET_TYPE_SIZE + rlen_size + pkt_size;
   2b966:	f8bd 7006 	ldrh.w	r7, [sp, #6]
   2b96a:	3701      	adds	r7, #1
   2b96c:	444f      	add	r7, r9
   2b96e:	b2bf      	uxth	r7, r7
	if (total_buf_size > size) {
   2b970:	4297      	cmp	r7, r2
   2b972:	f200 80af 	bhi.w	2bad4 <mqtt_pack_connect+0x1c2>
	buf[0] = MQTT_CONNECT << 4;
   2b976:	4628      	mov	r0, r5
   2b978:	2310      	movs	r3, #16
	rlen_encode(buf + PACKET_TYPE_SIZE, pkt_size);
   2b97a:	4649      	mov	r1, r9
	buf[0] = MQTT_CONNECT << 4;
   2b97c:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, pkt_size);
   2b980:	f7ff fe94 	bl	2b6ac <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   2b984:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   2b988:	1c43      	adds	r3, r0, #1
	buf[offset + 0] = 0x00;
   2b98a:	b29b      	uxth	r3, r3
	buf[offset + 2] = 'M';
   2b98c:	214d      	movs	r1, #77	; 0x4d
	buf[offset + 0] = 0x00;
   2b98e:	f805 8003 	strb.w	r8, [r5, r3]
	buf[offset + 1] = 0x04;
   2b992:	442b      	add	r3, r5
   2b994:	2204      	movs	r2, #4
	buf[offset + 2] = 'M';
   2b996:	7099      	strb	r1, [r3, #2]
	buf[offset + 3] = 'Q';
   2b998:	2151      	movs	r1, #81	; 0x51
   2b99a:	70d9      	strb	r1, [r3, #3]
	buf[offset + 4] = 'T';
   2b99c:	2154      	movs	r1, #84	; 0x54
   2b99e:	7119      	strb	r1, [r3, #4]
	buf[offset + 5] = 'T';
   2b9a0:	7159      	strb	r1, [r3, #5]
	buf[offset + 1] = 0x04;
   2b9a2:	705a      	strb	r2, [r3, #1]
	buf[offset + 6] = 0x04;
   2b9a4:	719a      	strb	r2, [r3, #6]
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   2b9a6:	6a22      	ldr	r2, [r4, #32]
			  ((msg->will_qos & 0x03) << 3) |
   2b9a8:	f894 e00b 	ldrb.w	lr, [r4, #11]
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   2b9ac:	2a00      	cmp	r2, #0
   2b9ae:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   2b9b0:	bf14      	ite	ne
   2b9b2:	f06f 0c7f 	mvnne.w	ip, #127	; 0x7f
   2b9b6:	f04f 0c00 	moveq.w	ip, #0
   2b9ba:	2a00      	cmp	r2, #0
			  (msg->will_retain ? 1 << 5 : 0) |
   2b9bc:	7b22      	ldrb	r2, [r4, #12]
			  ((msg->will_qos & 0x03) << 3) |
   2b9be:	ea4f 0ece 	mov.w	lr, lr, lsl #3
			  (msg->will_retain ? 1 << 5 : 0) |
   2b9c2:	ea4f 1242 	mov.w	r2, r2, lsl #5
			  ((msg->will_qos & 0x03) << 3) |
   2b9c6:	f00e 0e18 	and.w	lr, lr, #24
			  (msg->will_retain ? 1 << 5 : 0) |
   2b9ca:	f002 0220 	and.w	r2, r2, #32
			  (msg->will_flag ? 1 << 2 : 0) |
   2b9ce:	ea42 020e 	orr.w	r2, r2, lr
   2b9d2:	f894 e00a 	ldrb.w	lr, [r4, #10]
   2b9d6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
   2b9da:	f00e 0e04 	and.w	lr, lr, #4
   2b9de:	ea42 020e 	orr.w	r2, r2, lr
			  (msg->clean_session ? 1 << 1 : 0);
   2b9e2:	f894 e000 	ldrb.w	lr, [r4]
   2b9e6:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
   2b9ea:	f00e 0e02 	and.w	lr, lr, #2
			  (msg->will_flag ? 1 << 2 : 0) |
   2b9ee:	ea42 020e 	orr.w	r2, r2, lr
   2b9f2:	ea4c 0202 	orr.w	r2, ip, r2
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   2b9f6:	bf14      	ite	ne
   2b9f8:	2140      	movne	r1, #64	; 0x40
   2b9fa:	2100      	moveq	r1, #0
			  (msg->will_flag ? 1 << 2 : 0) |
   2b9fc:	4311      	orrs	r1, r2
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   2b9fe:	71d9      	strb	r1, [r3, #7]
	UNALIGNED_PUT(htons(msg->keep_alive), (u16_t *)(buf + offset + 8));
   2ba00:	8be1      	ldrh	r1, [r4, #30]
   2ba02:	020a      	lsls	r2, r1, #8
   2ba04:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
   2ba08:	811a      	strh	r2, [r3, #8]
	UNALIGNED_PUT(htons(msg->client_id_len),
   2ba0a:	8921      	ldrh	r1, [r4, #8]
	offset += 8 + INT_SIZE;
   2ba0c:	f100 030b 	add.w	r3, r0, #11
	UNALIGNED_PUT(htons(msg->client_id_len),
   2ba10:	b29b      	uxth	r3, r3
   2ba12:	020a      	lsls	r2, r1, #8
   2ba14:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
   2ba18:	52ea      	strh	r2, [r5, r3]
	offset += INT_SIZE;
   2ba1a:	300d      	adds	r0, #13
   2ba1c:	fa1f f980 	uxth.w	r9, r0
	memcpy(buf + offset, msg->client_id, msg->client_id_len);
   2ba20:	8922      	ldrh	r2, [r4, #8]
   2ba22:	6861      	ldr	r1, [r4, #4]
   2ba24:	eb05 0009 	add.w	r0, r5, r9
   2ba28:	f7db f92e 	bl	6c88 <memcpy>
	offset += msg->client_id_len;
   2ba2c:	8920      	ldrh	r0, [r4, #8]
	if (msg->will_flag) {
   2ba2e:	7aa3      	ldrb	r3, [r4, #10]
	offset += msg->client_id_len;
   2ba30:	4448      	add	r0, r9
	if (msg->will_flag) {
   2ba32:	07db      	lsls	r3, r3, #31
	offset += msg->client_id_len;
   2ba34:	b280      	uxth	r0, r0
	if (msg->will_flag) {
   2ba36:	d524      	bpl.n	2ba82 <mqtt_pack_connect+0x170>
		UNALIGNED_PUT(htons(msg->will_topic_len),
   2ba38:	8aa2      	ldrh	r2, [r4, #20]
   2ba3a:	0213      	lsls	r3, r2, #8
   2ba3c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   2ba40:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   2ba42:	3002      	adds	r0, #2
   2ba44:	fa1f f980 	uxth.w	r9, r0
		memcpy(buf + offset, msg->will_topic,
   2ba48:	8aa2      	ldrh	r2, [r4, #20]
   2ba4a:	6921      	ldr	r1, [r4, #16]
   2ba4c:	eb05 0009 	add.w	r0, r5, r9
   2ba50:	f7db f91a 	bl	6c88 <memcpy>
		offset += msg->will_topic_len;
   2ba54:	8aa0      	ldrh	r0, [r4, #20]
		UNALIGNED_PUT(htons(msg->will_msg_len),
   2ba56:	8ba2      	ldrh	r2, [r4, #28]
		offset += msg->will_topic_len;
   2ba58:	4481      	add	r9, r0
   2ba5a:	fa1f f989 	uxth.w	r9, r9
		UNALIGNED_PUT(htons(msg->will_msg_len),
   2ba5e:	0213      	lsls	r3, r2, #8
   2ba60:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   2ba64:	f825 3009 	strh.w	r3, [r5, r9]
		offset += INT_SIZE;
   2ba68:	f109 0902 	add.w	r9, r9, #2
   2ba6c:	fa1f f989 	uxth.w	r9, r9
		memcpy(buf + offset, msg->will_msg, msg->will_msg_len);
   2ba70:	8ba2      	ldrh	r2, [r4, #28]
   2ba72:	69a1      	ldr	r1, [r4, #24]
   2ba74:	eb05 0009 	add.w	r0, r5, r9
   2ba78:	f7db f906 	bl	6c88 <memcpy>
		offset += msg->will_msg_len;
   2ba7c:	8ba0      	ldrh	r0, [r4, #28]
   2ba7e:	4448      	add	r0, r9
   2ba80:	b280      	uxth	r0, r0
	if (msg->user_name) {
   2ba82:	6a23      	ldr	r3, [r4, #32]
   2ba84:	b183      	cbz	r3, 2baa8 <mqtt_pack_connect+0x196>
		UNALIGNED_PUT(htons(msg->user_name_len),
   2ba86:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   2ba88:	0213      	lsls	r3, r2, #8
   2ba8a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   2ba8e:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   2ba90:	3002      	adds	r0, #2
   2ba92:	fa1f f980 	uxth.w	r9, r0
		memcpy(buf + offset, msg->user_name, msg->user_name_len);
   2ba96:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   2ba98:	6a21      	ldr	r1, [r4, #32]
   2ba9a:	eb05 0009 	add.w	r0, r5, r9
   2ba9e:	f7db f8f3 	bl	6c88 <memcpy>
		offset += msg->user_name_len;
   2baa2:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
   2baa4:	4448      	add	r0, r9
   2baa6:	b280      	uxth	r0, r0
	if (msg->password) {
   2baa8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2baaa:	b15b      	cbz	r3, 2bac4 <mqtt_pack_connect+0x1b2>
		UNALIGNED_PUT(htons(msg->password_len),
   2baac:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   2baae:	0213      	lsls	r3, r2, #8
   2bab0:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   2bab4:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   2bab6:	3002      	adds	r0, #2
		memcpy(buf + offset, msg->password, msg->password_len);
   2bab8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   2baba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2babc:	fa15 f080 	uxtah	r0, r5, r0
   2bac0:	f7db f8e2 	bl	6c88 <memcpy>
	*length = total_buf_size;
   2bac4:	8037      	strh	r7, [r6, #0]
}
   2bac6:	4640      	mov	r0, r8
   2bac8:	b003      	add	sp, #12
   2baca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   2bace:	f06f 0815 	mvn.w	r8, #21
   2bad2:	e7f8      	b.n	2bac6 <mqtt_pack_connect+0x1b4>
		return -ENOMEM;
   2bad4:	f06f 080b 	mvn.w	r8, #11
   2bad8:	e7f5      	b.n	2bac6 <mqtt_pack_connect+0x1b4>

0002bada <mqtt_pack_subscribe>:
{
   2bada:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return mqtt_pack_subscribe_unsubscribe(buf, length, size, pkt_id,
   2badc:	2408      	movs	r4, #8
   2bade:	9403      	str	r4, [sp, #12]
   2bae0:	9c08      	ldr	r4, [sp, #32]
   2bae2:	9402      	str	r4, [sp, #8]
   2bae4:	9c07      	ldr	r4, [sp, #28]
   2bae6:	9401      	str	r4, [sp, #4]
   2bae8:	f89d 4018 	ldrb.w	r4, [sp, #24]
   2baec:	9400      	str	r4, [sp, #0]
   2baee:	f7ff fe41 	bl	2b774 <mqtt_pack_subscribe_unsubscribe>
}
   2baf2:	b004      	add	sp, #16
   2baf4:	bd10      	pop	{r4, pc}

0002baf6 <mqtt_unpack_suback>:
{
   2baf6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2bafa:	461e      	mov	r6, r3
   2bafc:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   2bb00:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	*pkt_id = 0;
   2bb02:	2300      	movs	r3, #0
   2bb04:	8013      	strh	r3, [r2, #0]
{
   2bb06:	4605      	mov	r5, r0
   2bb08:	4689      	mov	r9, r1
   2bb0a:	4690      	mov	r8, r2
	*items = 0;
   2bb0c:	7033      	strb	r3, [r6, #0]
	if (elements <= 0) {
   2bb0e:	b927      	cbnz	r7, 2bb1a <mqtt_unpack_suback+0x24>
		return -EINVAL;
   2bb10:	f06f 0015 	mvn.w	r0, #21
}
   2bb14:	b003      	add	sp, #12
   2bb16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((buf[0] & 0xF0) != (MQTT_SUBACK << 4)) {
   2bb1a:	7803      	ldrb	r3, [r0, #0]
   2bb1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2bb20:	2b90      	cmp	r3, #144	; 0x90
   2bb22:	d1f5      	bne.n	2bb10 <mqtt_unpack_suback+0x1a>
	rc = rlen_decode(&rlen, &rlen_size, buf + PACKET_TYPE_SIZE,
   2bb24:	1e4b      	subs	r3, r1, #1
   2bb26:	1c42      	adds	r2, r0, #1
   2bb28:	b29b      	uxth	r3, r3
   2bb2a:	f10d 0102 	add.w	r1, sp, #2
   2bb2e:	a801      	add	r0, sp, #4
   2bb30:	f7ff fdcb 	bl	2b6ca <rlen_decode>
	if (rc != 0) {
   2bb34:	2800      	cmp	r0, #0
   2bb36:	d1eb      	bne.n	2bb10 <mqtt_unpack_suback+0x1a>
	if (PACKET_TYPE_SIZE + rlen + rlen_size > length) {
   2bb38:	9a01      	ldr	r2, [sp, #4]
   2bb3a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2bb3e:	1c51      	adds	r1, r2, #1
   2bb40:	4419      	add	r1, r3
   2bb42:	4549      	cmp	r1, r9
   2bb44:	d8e4      	bhi.n	2bb10 <mqtt_unpack_suback+0x1a>
	offset = PACKET_TYPE_SIZE + rlen_size;
   2bb46:	1c59      	adds	r1, r3, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   2bb48:	b289      	uxth	r1, r1
	*items = rlen - PACKET_ID_SIZE;
   2bb4a:	3a02      	subs	r2, #2
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   2bb4c:	f835 c001 	ldrh.w	ip, [r5, r1]
	*items = rlen - PACKET_ID_SIZE;
   2bb50:	b2d2      	uxtb	r2, r2
	*pkt_id = ntohs(val_u16);
   2bb52:	ea4f 210c 	mov.w	r1, ip, lsl #8
   2bb56:	ea41 211c 	orr.w	r1, r1, ip, lsr #8
	offset += PACKET_ID_SIZE;
   2bb5a:	3303      	adds	r3, #3
	if (*items > elements) {
   2bb5c:	42ba      	cmp	r2, r7
	*pkt_id = ntohs(val_u16);
   2bb5e:	f8a8 1000 	strh.w	r1, [r8]
	offset += PACKET_ID_SIZE;
   2bb62:	b29b      	uxth	r3, r3
	*items = rlen - PACKET_ID_SIZE;
   2bb64:	7032      	strb	r2, [r6, #0]
	if (*items > elements) {
   2bb66:	d8d3      	bhi.n	2bb10 <mqtt_unpack_suback+0x1a>
   2bb68:	4602      	mov	r2, r0
	for (i = 0; i < *items; i++) {
   2bb6a:	f896 c000 	ldrb.w	ip, [r6]
   2bb6e:	b2d7      	uxtb	r7, r2
   2bb70:	1899      	adds	r1, r3, r2
   2bb72:	45bc      	cmp	ip, r7
   2bb74:	b289      	uxth	r1, r1
   2bb76:	d9cd      	bls.n	2bb14 <mqtt_unpack_suback+0x1e>
		qos = *(buf + offset);
   2bb78:	5c69      	ldrb	r1, [r5, r1]
		if (qos < MQTT_QoS0 || qos > MQTT_QoS2) {
   2bb7a:	2902      	cmp	r1, #2
   2bb7c:	f102 0201 	add.w	r2, r2, #1
   2bb80:	d8c6      	bhi.n	2bb10 <mqtt_unpack_suback+0x1a>
		granted_qos[i] = qos;
   2bb82:	55e1      	strb	r1, [r4, r7]
   2bb84:	e7f1      	b.n	2bb6a <mqtt_unpack_suback+0x74>

0002bb86 <mqtt_pack_publish>:
{
   2bb86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2bb8a:	460e      	mov	r6, r1
	if (msg->qos < MQTT_QoS0 || msg->qos > MQTT_QoS2) {
   2bb8c:	7859      	ldrb	r1, [r3, #1]
   2bb8e:	2902      	cmp	r1, #2
{
   2bb90:	4605      	mov	r5, r0
   2bb92:	4698      	mov	r8, r3
	if (msg->qos < MQTT_QoS0 || msg->qos > MQTT_QoS2) {
   2bb94:	d905      	bls.n	2bba2 <mqtt_pack_publish+0x1c>
		return -EINVAL;
   2bb96:	f06f 0715 	mvn.w	r7, #21
}
   2bb9a:	4638      	mov	r0, r7
   2bb9c:	b002      	add	sp, #8
   2bb9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	payload = INT_SIZE + msg->topic_len +
   2bba2:	2900      	cmp	r1, #0
   2bba4:	899b      	ldrh	r3, [r3, #12]
   2bba6:	f8b8 1014 	ldrh.w	r1, [r8, #20]
   2bbaa:	440b      	add	r3, r1
   2bbac:	bf0c      	ite	eq
   2bbae:	2400      	moveq	r4, #0
   2bbb0:	2402      	movne	r4, #2
   2bbb2:	3302      	adds	r3, #2
   2bbb4:	441c      	add	r4, r3
   2bbb6:	b2a4      	uxth	r4, r4
	rc = compute_rlen_size(&rlen_size, payload);
   2bbb8:	4621      	mov	r1, r4
   2bbba:	f10d 0006 	add.w	r0, sp, #6
   2bbbe:	f7ff fdba 	bl	2b736 <compute_rlen_size>
	if (rc != 0) {
   2bbc2:	4607      	mov	r7, r0
   2bbc4:	2800      	cmp	r0, #0
   2bbc6:	d1e6      	bne.n	2bb96 <mqtt_pack_publish+0x10>
	if (PACKET_TYPE_SIZE + rlen_size + payload > size) {
   2bbc8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2bbcc:	3301      	adds	r3, #1
   2bbce:	4423      	add	r3, r4
   2bbd0:	4293      	cmp	r3, r2
   2bbd2:	dc43      	bgt.n	2bc5c <mqtt_pack_publish+0xd6>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   2bbd4:	f898 3000 	ldrb.w	r3, [r8]
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   2bbd8:	f898 1001 	ldrb.w	r1, [r8, #1]
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   2bbdc:	2b00      	cmp	r3, #0
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   2bbde:	f898 3002 	ldrb.w	r3, [r8, #2]
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   2bbe2:	bf0c      	ite	eq
   2bbe4:	2230      	moveq	r2, #48	; 0x30
   2bbe6:	2238      	movne	r2, #56	; 0x38
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   2bbe8:	3300      	adds	r3, #0
   2bbea:	bf18      	it	ne
   2bbec:	2301      	movne	r3, #1
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   2bbee:	4628      	mov	r0, r5
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   2bbf0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   2bbf4:	4313      	orrs	r3, r2
	rlen_encode(buf + PACKET_TYPE_SIZE, payload);
   2bbf6:	4621      	mov	r1, r4
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   2bbf8:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, payload);
   2bbfc:	f7ff fd56 	bl	2b6ac <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   2bc00:	f8bd 4006 	ldrh.w	r4, [sp, #6]
	UNALIGNED_PUT(htons(msg->topic_len), (u16_t *)(buf + offset));
   2bc04:	f8b8 100c 	ldrh.w	r1, [r8, #12]
	offset = PACKET_TYPE_SIZE + rlen_size;
   2bc08:	1c63      	adds	r3, r4, #1
	UNALIGNED_PUT(htons(msg->topic_len), (u16_t *)(buf + offset));
   2bc0a:	b29b      	uxth	r3, r3
   2bc0c:	020a      	lsls	r2, r1, #8
   2bc0e:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
   2bc12:	52ea      	strh	r2, [r5, r3]
	offset += INT_SIZE;
   2bc14:	3403      	adds	r4, #3
   2bc16:	b2a4      	uxth	r4, r4
	memcpy(buf + offset, msg->topic, msg->topic_len);
   2bc18:	1928      	adds	r0, r5, r4
   2bc1a:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   2bc1e:	f8d8 1008 	ldr.w	r1, [r8, #8]
   2bc22:	f7db f831 	bl	6c88 <memcpy>
	offset += msg->topic_len;
   2bc26:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   2bc2a:	441c      	add	r4, r3
	if (msg->qos > MQTT_QoS0) {
   2bc2c:	f898 3001 	ldrb.w	r3, [r8, #1]
	offset += msg->topic_len;
   2bc30:	b2a4      	uxth	r4, r4
	if (msg->qos > MQTT_QoS0) {
   2bc32:	b13b      	cbz	r3, 2bc44 <mqtt_pack_publish+0xbe>
		UNALIGNED_PUT(htons(msg->pkt_id), (u16_t *)(buf + offset));
   2bc34:	f8b8 2004 	ldrh.w	r2, [r8, #4]
   2bc38:	0213      	lsls	r3, r2, #8
   2bc3a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   2bc3e:	532b      	strh	r3, [r5, r4]
		offset += PACKET_ID_SIZE;
   2bc40:	3402      	adds	r4, #2
   2bc42:	b2a4      	uxth	r4, r4
	memcpy(buf + offset, msg->msg, msg->msg_len);
   2bc44:	1928      	adds	r0, r5, r4
   2bc46:	f8b8 2014 	ldrh.w	r2, [r8, #20]
   2bc4a:	f8d8 1010 	ldr.w	r1, [r8, #16]
   2bc4e:	f7db f81b 	bl	6c88 <memcpy>
	offset += msg->msg_len;
   2bc52:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   2bc56:	441c      	add	r4, r3
	*length = offset;
   2bc58:	8034      	strh	r4, [r6, #0]
	return 0;
   2bc5a:	e79e      	b.n	2bb9a <mqtt_pack_publish+0x14>
		return -ENOMEM;
   2bc5c:	f06f 070b 	mvn.w	r7, #11
   2bc60:	e79b      	b.n	2bb9a <mqtt_pack_publish+0x14>

0002bc62 <mqtt_unpack_publish>:
{
   2bc62:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (buf[0] >> 4 != MQTT_PUBLISH) {
   2bc64:	7803      	ldrb	r3, [r0, #0]
{
   2bc66:	4614      	mov	r4, r2
	if (buf[0] >> 4 != MQTT_PUBLISH) {
   2bc68:	091a      	lsrs	r2, r3, #4
   2bc6a:	2a03      	cmp	r2, #3
{
   2bc6c:	4605      	mov	r5, r0
   2bc6e:	460e      	mov	r6, r1
	if (buf[0] >> 4 != MQTT_PUBLISH) {
   2bc70:	d003      	beq.n	2bc7a <mqtt_unpack_publish+0x18>
		return -EINVAL;
   2bc72:	f06f 0015 	mvn.w	r0, #21
}
   2bc76:	b002      	add	sp, #8
   2bc78:	bd70      	pop	{r4, r5, r6, pc}
	msg->dup = (buf[0] & 0x08) >> 3;
   2bc7a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   2bc7e:	7023      	strb	r3, [r4, #0]
	msg->qos = (buf[0] & 0x06) >> 1;
   2bc80:	7803      	ldrb	r3, [r0, #0]
	msg->retain = buf[0] & 0x01;
   2bc82:	4602      	mov	r2, r0
	msg->qos = (buf[0] & 0x06) >> 1;
   2bc84:	f3c3 0341 	ubfx	r3, r3, #1, #2
   2bc88:	7063      	strb	r3, [r4, #1]
	msg->retain = buf[0] & 0x01;
   2bc8a:	f812 3b01 	ldrb.w	r3, [r2], #1
   2bc8e:	f003 0301 	and.w	r3, r3, #1
   2bc92:	70a3      	strb	r3, [r4, #2]
	rc = rlen_decode(&rmlen, &rmlen_size, buf + PACKET_TYPE_SIZE,
   2bc94:	1e4b      	subs	r3, r1, #1
   2bc96:	b29b      	uxth	r3, r3
   2bc98:	f10d 0102 	add.w	r1, sp, #2
   2bc9c:	a801      	add	r0, sp, #4
   2bc9e:	f7ff fd14 	bl	2b6ca <rlen_decode>
	if (rc != 0) {
   2bca2:	2800      	cmp	r0, #0
   2bca4:	d1e5      	bne.n	2bc72 <mqtt_unpack_publish+0x10>
	if ((PACKET_TYPE_SIZE + rmlen_size + rmlen) > length) {
   2bca6:	9b01      	ldr	r3, [sp, #4]
   2bca8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2bcac:	3301      	adds	r3, #1
   2bcae:	4413      	add	r3, r2
   2bcb0:	42b3      	cmp	r3, r6
   2bcb2:	d8de      	bhi.n	2bc72 <mqtt_unpack_publish+0x10>
	offset = PACKET_TYPE_SIZE + rmlen_size;
   2bcb4:	1c53      	adds	r3, r2, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   2bcb6:	b29b      	uxth	r3, r3
	offset += INT_SIZE;
   2bcb8:	3203      	adds	r2, #3
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   2bcba:	5ae9      	ldrh	r1, [r5, r3]
	msg->topic_len = ntohs(val_u16);
   2bcbc:	020b      	lsls	r3, r1, #8
   2bcbe:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   2bcc2:	b29b      	uxth	r3, r3
	offset += INT_SIZE;
   2bcc4:	b292      	uxth	r2, r2
	msg->topic_len = ntohs(val_u16);
   2bcc6:	81a3      	strh	r3, [r4, #12]
	if (offset + msg->topic_len > length) {
   2bcc8:	4413      	add	r3, r2
   2bcca:	42b3      	cmp	r3, r6
   2bccc:	dcd1      	bgt.n	2bc72 <mqtt_unpack_publish+0x10>
	msg->topic = (char *)(buf + offset);
   2bcce:	442a      	add	r2, r5
   2bcd0:	60a2      	str	r2, [r4, #8]
	if (msg->qos == MQTT_QoS1 || msg->qos == MQTT_QoS2) {
   2bcd2:	7862      	ldrb	r2, [r4, #1]
	offset += msg->topic_len;
   2bcd4:	b29b      	uxth	r3, r3
	if (msg->qos == MQTT_QoS1 || msg->qos == MQTT_QoS2) {
   2bcd6:	3a01      	subs	r2, #1
   2bcd8:	2a01      	cmp	r2, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   2bcda:	bf97      	itett	ls
   2bcdc:	5ae9      	ldrhls	r1, [r5, r3]
		msg->pkt_id = 0;
   2bcde:	80a0      	strhhi	r0, [r4, #4]
		offset += PACKET_ID_SIZE;
   2bce0:	3302      	addls	r3, #2
		msg->pkt_id = ntohs(val_u16);
   2bce2:	020a      	lslls	r2, r1, #8
		offset += PACKET_ID_SIZE;
   2bce4:	bf98      	it	ls
   2bce6:	b29b      	uxthls	r3, r3
	msg->msg_len = length - offset;
   2bce8:	eba6 0603 	sub.w	r6, r6, r3
		msg->pkt_id = ntohs(val_u16);
   2bcec:	bf98      	it	ls
   2bcee:	ea42 2211 	orrls.w	r2, r2, r1, lsr #8
	msg->msg = buf + offset;
   2bcf2:	442b      	add	r3, r5
		msg->pkt_id = ntohs(val_u16);
   2bcf4:	bf98      	it	ls
   2bcf6:	80a2      	strhls	r2, [r4, #4]
	msg->msg_len = length - offset;
   2bcf8:	82a6      	strh	r6, [r4, #20]
	msg->msg = buf + offset;
   2bcfa:	6123      	str	r3, [r4, #16]
	return 0;
   2bcfc:	e7bb      	b.n	2bc76 <mqtt_unpack_publish+0x14>

0002bcfe <mqtt_unpack_connack>:
	if (length < CONNACK_SIZE) {
   2bcfe:	2903      	cmp	r1, #3
   2bd00:	d90d      	bls.n	2bd1e <mqtt_unpack_connack+0x20>
	if (buf[0] != (MQTT_CONNACK << 4) || buf[1] != 2) {
   2bd02:	7801      	ldrb	r1, [r0, #0]
   2bd04:	2920      	cmp	r1, #32
   2bd06:	d10a      	bne.n	2bd1e <mqtt_unpack_connack+0x20>
   2bd08:	7841      	ldrb	r1, [r0, #1]
   2bd0a:	2902      	cmp	r1, #2
   2bd0c:	d107      	bne.n	2bd1e <mqtt_unpack_connack+0x20>
	if (buf[2] > 1) {
   2bd0e:	7881      	ldrb	r1, [r0, #2]
   2bd10:	2901      	cmp	r1, #1
   2bd12:	d804      	bhi.n	2bd1e <mqtt_unpack_connack+0x20>
	*session = buf[2];
   2bd14:	7011      	strb	r1, [r2, #0]
	*connect_rc = buf[3];
   2bd16:	78c2      	ldrb	r2, [r0, #3]
   2bd18:	701a      	strb	r2, [r3, #0]
	return 0;
   2bd1a:	2000      	movs	r0, #0
   2bd1c:	4770      	bx	lr
		return -EINVAL;
   2bd1e:	f06f 0015 	mvn.w	r0, #21
}
   2bd22:	4770      	bx	lr

0002bd24 <mqtt_pack_disconnect>:
	if (size < MSG_ZEROLEN_SIZE) {
   2bd24:	2a01      	cmp	r2, #1
	buf[0] = (pkt_type << 4) + (reserved & 0x0F);
   2bd26:	bf81      	itttt	hi
   2bd28:	23e0      	movhi	r3, #224	; 0xe0
   2bd2a:	7003      	strbhi	r3, [r0, #0]
	*length = MSG_ZEROLEN_SIZE;
   2bd2c:	2202      	movhi	r2, #2
	buf[1] = 0x00;
   2bd2e:	2300      	movhi	r3, #0
   2bd30:	bf83      	ittte	hi
   2bd32:	7043      	strbhi	r3, [r0, #1]
	return 0;
   2bd34:	4618      	movhi	r0, r3
	*length = MSG_ZEROLEN_SIZE;
   2bd36:	800a      	strhhi	r2, [r1, #0]
		return -ENOMEM;
   2bd38:	f06f 000b 	mvnls.w	r0, #11
}
   2bd3c:	4770      	bx	lr

0002bd3e <mqtt_unpack_puback>:
{
   2bd3e:	b507      	push	{r0, r1, r2, lr}
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBACK,
   2bd40:	2300      	movs	r3, #0
   2bd42:	9300      	str	r3, [sp, #0]
   2bd44:	2304      	movs	r3, #4
   2bd46:	f7ff fcdc 	bl	2b702 <unpack_pktid_validate>
}
   2bd4a:	b003      	add	sp, #12
   2bd4c:	f85d fb04 	ldr.w	pc, [sp], #4

0002bd50 <mqtt_unpack_pubrec>:
{
   2bd50:	b507      	push	{r0, r1, r2, lr}
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREC,
   2bd52:	2300      	movs	r3, #0
   2bd54:	9300      	str	r3, [sp, #0]
   2bd56:	2305      	movs	r3, #5
   2bd58:	f7ff fcd3 	bl	2b702 <unpack_pktid_validate>
}
   2bd5c:	b003      	add	sp, #12
   2bd5e:	f85d fb04 	ldr.w	pc, [sp], #4

0002bd62 <mqtt_unpack_pubrel>:
{
   2bd62:	b507      	push	{r0, r1, r2, lr}
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREL,
   2bd64:	2302      	movs	r3, #2
   2bd66:	9300      	str	r3, [sp, #0]
   2bd68:	2306      	movs	r3, #6
   2bd6a:	f7ff fcca 	bl	2b702 <unpack_pktid_validate>
}
   2bd6e:	b003      	add	sp, #12
   2bd70:	f85d fb04 	ldr.w	pc, [sp], #4

0002bd74 <mqtt_unpack_pubcomp>:
{
   2bd74:	b507      	push	{r0, r1, r2, lr}
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBCOMP,
   2bd76:	2300      	movs	r3, #0
   2bd78:	9300      	str	r3, [sp, #0]
   2bd7a:	2307      	movs	r3, #7
   2bd7c:	f7ff fcc1 	bl	2b702 <unpack_pktid_validate>
}
   2bd80:	b003      	add	sp, #12
   2bd82:	f85d fb04 	ldr.w	pc, [sp], #4

0002bd86 <mqtt_unpack_unsuback>:
{
   2bd86:	b507      	push	{r0, r1, r2, lr}
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_UNSUBACK,
   2bd88:	2300      	movs	r3, #0
   2bd8a:	9300      	str	r3, [sp, #0]
   2bd8c:	230b      	movs	r3, #11
   2bd8e:	f7ff fcb8 	bl	2b702 <unpack_pktid_validate>
}
   2bd92:	b003      	add	sp, #12
   2bd94:	f85d fb04 	ldr.w	pc, [sp], #4

0002bd98 <mqtt_unpack_pingresp>:
	return unpack_zerolen_validate(buf, length, MQTT_PINGREQ, 0x00);
}

int mqtt_unpack_pingresp(u8_t *buf, u16_t length)
{
	return unpack_zerolen_validate(buf, length, MQTT_PINGRESP, 0x00);
   2bd98:	220d      	movs	r2, #13
   2bd9a:	f7ff bcd9 	b.w	2b750 <unpack_zerolen_validate.constprop.1>
	...

0002bda0 <mqtt_rx_pub_msgs>:
	u16_t pkt_id;
	u16_t len;
	u8_t *data;
	int rc;

	switch (type) {
   2bda0:	2a06      	cmp	r2, #6
{
   2bda2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bda4:	4605      	mov	r5, r0
   2bda6:	4616      	mov	r6, r2
   2bda8:	4608      	mov	r0, r1
	switch (type) {
   2bdaa:	d017      	beq.n	2bddc <mqtt_rx_pub_msgs+0x3c>
   2bdac:	2a07      	cmp	r2, #7
   2bdae:	d012      	beq.n	2bdd6 <mqtt_rx_pub_msgs+0x36>
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   2bdb0:	2a05      	cmp	r2, #5
   2bdb2:	4a1c      	ldr	r2, [pc, #112]	; (2be24 <mqtt_rx_pub_msgs+0x84>)
   2bdb4:	4c1c      	ldr	r4, [pc, #112]	; (2be28 <mqtt_rx_pub_msgs+0x88>)
   2bdb6:	4b1d      	ldr	r3, [pc, #116]	; (2be2c <mqtt_rx_pub_msgs+0x8c>)
   2bdb8:	bf1c      	itt	ne
   2bdba:	2400      	movne	r4, #0
   2bdbc:	4613      	movne	r3, r2

	data = rx->data;
	len = rx->len;

	/* 4 bytes message */
	rc = unpack(data, len, &pkt_id);
   2bdbe:	8981      	ldrh	r1, [r0, #12]
   2bdc0:	6880      	ldr	r0, [r0, #8]
   2bdc2:	f10d 0206 	add.w	r2, sp, #6
   2bdc6:	4798      	blx	r3
	if (rc != 0) {
   2bdc8:	4601      	mov	r1, r0
   2bdca:	b150      	cbz	r0, 2bde2 <mqtt_rx_pub_msgs+0x42>
		return -EINVAL;
   2bdcc:	f06f 0615 	mvn.w	r6, #21
	if (rc != 0) {
		return -EINVAL;
	}

	return 0;
}
   2bdd0:	4630      	mov	r0, r6
   2bdd2:	b003      	add	sp, #12
   2bdd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   2bdd6:	2400      	movs	r4, #0
		unpack = mqtt_unpack_pubcomp;
   2bdd8:	4b15      	ldr	r3, [pc, #84]	; (2be30 <mqtt_rx_pub_msgs+0x90>)
   2bdda:	e7f0      	b.n	2bdbe <mqtt_rx_pub_msgs+0x1e>
		response = mqtt_tx_pubcomp;
   2bddc:	4c15      	ldr	r4, [pc, #84]	; (2be34 <mqtt_rx_pub_msgs+0x94>)
		unpack = mqtt_unpack_pubrel;
   2bdde:	4b16      	ldr	r3, [pc, #88]	; (2be38 <mqtt_rx_pub_msgs+0x98>)
		break;
   2bde0:	e7ed      	b.n	2bdbe <mqtt_rx_pub_msgs+0x1e>
	if (type == MQTT_PUBREL) {
   2bde2:	2e06      	cmp	r6, #6
   2bde4:	d116      	bne.n	2be14 <mqtt_rx_pub_msgs+0x74>
		if (ctx->app_type != MQTT_APP_PUBLISHER) {
   2bde6:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   2bdea:	2b01      	cmp	r3, #1
   2bdec:	d0ee      	beq.n	2bdcc <mqtt_rx_pub_msgs+0x2c>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
   2bdee:	f8d5 7094 	ldr.w	r7, [r5, #148]	; 0x94
   2bdf2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   2bdf6:	4633      	mov	r3, r6
   2bdf8:	4628      	mov	r0, r5
   2bdfa:	47b8      	blx	r7
		rc = ctx->publish_tx(ctx, pkt_id, type);
   2bdfc:	4606      	mov	r6, r0
	if (rc != 0) {
   2bdfe:	2800      	cmp	r0, #0
   2be00:	d1e4      	bne.n	2bdcc <mqtt_rx_pub_msgs+0x2c>
	if (!response) {
   2be02:	2c00      	cmp	r4, #0
   2be04:	d0e4      	beq.n	2bdd0 <mqtt_rx_pub_msgs+0x30>
	rc = response(ctx, pkt_id);
   2be06:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   2be0a:	4628      	mov	r0, r5
   2be0c:	47a0      	blx	r4
	if (rc != 0) {
   2be0e:	2800      	cmp	r0, #0
   2be10:	d0de      	beq.n	2bdd0 <mqtt_rx_pub_msgs+0x30>
   2be12:	e7db      	b.n	2bdcc <mqtt_rx_pub_msgs+0x2c>
		rc = ctx->publish_tx(ctx, pkt_id, type);
   2be14:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   2be18:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   2be1c:	4632      	mov	r2, r6
   2be1e:	4628      	mov	r0, r5
   2be20:	4798      	blx	r3
   2be22:	e7eb      	b.n	2bdfc <mqtt_rx_pub_msgs+0x5c>
   2be24:	0002bd3f 	.word	0x0002bd3f
   2be28:	0002bee1 	.word	0x0002bee1
   2be2c:	0002bd51 	.word	0x0002bd51
   2be30:	0002bd75 	.word	0x0002bd75
   2be34:	0002bedb 	.word	0x0002bedb
   2be38:	0002bd63 	.word	0x0002bd63

0002be3c <app_connected>:
	}

#if defined(CONFIG_MQTT_LIB_TLS)
	k_sem_give(&mqtt->tls_hs_wait);
#endif
}
   2be3c:	4770      	bx	lr

0002be3e <mqtt_tx_pub_msgs>:
{
   2be3e:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (pkt_type) {
   2be40:	2a06      	cmp	r2, #6
{
   2be42:	b085      	sub	sp, #20
   2be44:	4605      	mov	r5, r0
   2be46:	460b      	mov	r3, r1
	switch (pkt_type) {
   2be48:	d037      	beq.n	2beba <mqtt_tx_pub_msgs+0x7c>
   2be4a:	2a07      	cmp	r2, #7
   2be4c:	d02b      	beq.n	2bea6 <mqtt_tx_pub_msgs+0x68>
   2be4e:	2a05      	cmp	r2, #5
		rc = mqtt_pack_pubrec(msg, &len, sizeof(msg), id);
   2be50:	f10d 010a 	add.w	r1, sp, #10
   2be54:	f04f 0204 	mov.w	r2, #4
   2be58:	a803      	add	r0, sp, #12
	switch (pkt_type) {
   2be5a:	d02b      	beq.n	2beb4 <mqtt_tx_pub_msgs+0x76>
		rc = mqtt_pack_puback(msg, &len, sizeof(msg), id);
   2be5c:	f7ff fd1d 	bl	2b89a <mqtt_pack_puback>
		rc = mqtt_pack_pubrel(msg, &len, sizeof(msg), id);
   2be60:	4604      	mov	r4, r0
	if (rc != 0) {
   2be62:	bba0      	cbnz	r0, 2bece <mqtt_tx_pub_msgs+0x90>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   2be64:	4601      	mov	r1, r0
   2be66:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   2be68:	4628      	mov	r0, r5
   2be6a:	f7d9 fd1b 	bl	58a4 <net_app_get_net_pkt>
	if (tx == NULL) {
   2be6e:	4606      	mov	r6, r0
   2be70:	b380      	cbz	r0, 2bed4 <mqtt_tx_pub_msgs+0x96>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   2be72:	f8bd 700a 	ldrh.w	r7, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   2be76:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   2be78:	aa03      	add	r2, sp, #12
   2be7a:	4639      	mov	r1, r7
   2be7c:	f7f6 fd14 	bl	228a8 <net_pkt_append>
	if (rc != true) {
   2be80:	4287      	cmp	r7, r0
   2be82:	d121      	bne.n	2bec8 <mqtt_tx_pub_msgs+0x8a>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   2be84:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   2be86:	9401      	str	r4, [sp, #4]
   2be88:	9300      	str	r3, [sp, #0]
   2be8a:	4622      	mov	r2, r4
   2be8c:	4623      	mov	r3, r4
   2be8e:	4631      	mov	r1, r6
   2be90:	4628      	mov	r0, r5
   2be92:	f7d9 fc9d 	bl	57d0 <net_app_send_pkt>
	if (rc < 0) {
   2be96:	1e04      	subs	r4, r0, #0
   2be98:	da02      	bge.n	2bea0 <mqtt_tx_pub_msgs+0x62>
	net_pkt_unref(tx);
   2be9a:	4630      	mov	r0, r6
   2be9c:	f7f6 fbaf 	bl	225fe <net_pkt_unref>
}
   2bea0:	4620      	mov	r0, r4
   2bea2:	b005      	add	sp, #20
   2bea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = mqtt_pack_pubcomp(msg, &len, sizeof(msg), id);
   2bea6:	2204      	movs	r2, #4
   2bea8:	f10d 010a 	add.w	r1, sp, #10
   2beac:	a803      	add	r0, sp, #12
   2beae:	f7ff fd21 	bl	2b8f4 <mqtt_pack_pubcomp>
   2beb2:	e7d5      	b.n	2be60 <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrec(msg, &len, sizeof(msg), id);
   2beb4:	f7ff fd00 	bl	2b8b8 <mqtt_pack_pubrec>
   2beb8:	e7d2      	b.n	2be60 <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrel(msg, &len, sizeof(msg), id);
   2beba:	2204      	movs	r2, #4
   2bebc:	f10d 010a 	add.w	r1, sp, #10
   2bec0:	a803      	add	r0, sp, #12
   2bec2:	f7ff fd08 	bl	2b8d6 <mqtt_pack_pubrel>
   2bec6:	e7cb      	b.n	2be60 <mqtt_tx_pub_msgs+0x22>
		rc = -ENOMEM;
   2bec8:	f06f 040b 	mvn.w	r4, #11
   2becc:	e7e5      	b.n	2be9a <mqtt_tx_pub_msgs+0x5c>
		return -EINVAL;
   2bece:	f06f 0415 	mvn.w	r4, #21
   2bed2:	e7e5      	b.n	2bea0 <mqtt_tx_pub_msgs+0x62>
		return -ENOMEM;
   2bed4:	f06f 040b 	mvn.w	r4, #11
   2bed8:	e7e2      	b.n	2bea0 <mqtt_tx_pub_msgs+0x62>

0002beda <mqtt_tx_pubcomp>:
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBCOMP);
   2beda:	2207      	movs	r2, #7
   2bedc:	f7ff bfaf 	b.w	2be3e <mqtt_tx_pub_msgs>

0002bee0 <mqtt_tx_pubrel>:
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREL);
   2bee0:	2206      	movs	r2, #6
   2bee2:	f7ff bfac 	b.w	2be3e <mqtt_tx_pub_msgs>

0002bee6 <app_recv>:

static
void app_recv(struct net_app_ctx *ctx, struct net_pkt *pkt, int status,
	      void *data)
{
   2bee6:	b510      	push	{r4, lr}
   2bee8:	460c      	mov	r4, r1
	struct mqtt_ctx *mqtt = (struct mqtt_ctx *)data;

	/* net_app_ctx is already referenced to by the mqtt_ctx struct */
	ARG_UNUSED(ctx);

	if (status || !pkt) {
   2beea:	b95a      	cbnz	r2, 2bf04 <app_recv+0x1e>
   2beec:	b151      	cbz	r1, 2bf04 <app_recv+0x1e>
		return;
	}

	if (net_pkt_appdatalen(pkt) == 0) {
   2beee:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
   2bef0:	b11a      	cbz	r2, 2befa <app_recv+0x14>
		goto lb_exit;
	}

	mqtt->rcv(mqtt, pkt);
   2bef2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   2bef6:	4618      	mov	r0, r3
   2bef8:	4790      	blx	r2

lb_exit:
	net_pkt_unref(pkt);
   2befa:	4620      	mov	r0, r4
}
   2befc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_pkt_unref(pkt);
   2bf00:	f7f6 bb7d 	b.w	225fe <net_pkt_unref>
}
   2bf04:	bd10      	pop	{r4, pc}
	...

0002bf08 <mqtt_tx_connect>:
{
   2bf08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bf0a:	4604      	mov	r4, r0
   2bf0c:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   2bf0e:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   2bf10:	481d      	ldr	r0, [pc, #116]	; (2bf88 <mqtt_tx_connect+0x80>)
   2bf12:	f7f3 f96f 	bl	1f1f4 <net_buf_alloc_fixed>
	if (data == NULL) {
   2bf16:	4605      	mov	r5, r0
   2bf18:	b398      	cbz	r0, 2bf82 <mqtt_tx_connect+0x7a>
	ctx->clean_session = msg->clean_session ? 1 : 0;
   2bf1a:	7832      	ldrb	r2, [r6, #0]
   2bf1c:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   2bf20:	f362 0300 	bfi	r3, r2, #0, #1
   2bf24:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	rc = mqtt_pack_connect(data->data, &data->len, MSG_SIZE, msg);
   2bf28:	f100 010c 	add.w	r1, r0, #12
   2bf2c:	4633      	mov	r3, r6
   2bf2e:	2280      	movs	r2, #128	; 0x80
   2bf30:	6880      	ldr	r0, [r0, #8]
   2bf32:	f7ff fcee 	bl	2b912 <mqtt_pack_connect>
	if (rc != 0) {
   2bf36:	4606      	mov	r6, r0
   2bf38:	b9d0      	cbnz	r0, 2bf70 <mqtt_tx_connect+0x68>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   2bf3a:	4601      	mov	r1, r0
   2bf3c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   2bf3e:	4620      	mov	r0, r4
   2bf40:	f7d9 fcb0 	bl	58a4 <net_app_get_net_pkt>
	if (tx == NULL) {
   2bf44:	4607      	mov	r7, r0
   2bf46:	b1c8      	cbz	r0, 2bf7c <mqtt_tx_connect+0x74>
	net_pkt_frag_add(tx, data);
   2bf48:	4629      	mov	r1, r5
   2bf4a:	f7f6 fb7f 	bl	2264c <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   2bf4e:	9601      	str	r6, [sp, #4]
   2bf50:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   2bf52:	9300      	str	r3, [sp, #0]
   2bf54:	4620      	mov	r0, r4
   2bf56:	4633      	mov	r3, r6
   2bf58:	4632      	mov	r2, r6
   2bf5a:	4639      	mov	r1, r7
   2bf5c:	f7d9 fc38 	bl	57d0 <net_app_send_pkt>
	if (rc < 0) {
   2bf60:	1e04      	subs	r4, r0, #0
   2bf62:	da02      	bge.n	2bf6a <mqtt_tx_connect+0x62>
		net_pkt_unref(tx);
   2bf64:	4638      	mov	r0, r7
   2bf66:	f7f6 fb4a 	bl	225fe <net_pkt_unref>
}
   2bf6a:	4620      	mov	r0, r4
   2bf6c:	b003      	add	sp, #12
   2bf6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = -EINVAL;
   2bf70:	f06f 0415 	mvn.w	r4, #21
	net_pkt_frag_unref(data);
   2bf74:	4628      	mov	r0, r5
   2bf76:	f7f6 fb3e 	bl	225f6 <net_pkt_frag_unref>
	return rc;
   2bf7a:	e7f6      	b.n	2bf6a <mqtt_tx_connect+0x62>
		rc = -ENOMEM;
   2bf7c:	f06f 040b 	mvn.w	r4, #11
   2bf80:	e7f8      	b.n	2bf74 <mqtt_tx_connect+0x6c>
		return -ENOMEM;
   2bf82:	f06f 040b 	mvn.w	r4, #11
   2bf86:	e7f0      	b.n	2bf6a <mqtt_tx_connect+0x62>
   2bf88:	2000e4f4 	.word	0x2000e4f4

0002bf8c <mqtt_tx_disconnect>:
{
   2bf8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bf8e:	b085      	sub	sp, #20
   2bf90:	4604      	mov	r4, r0
	rc = mqtt_pack_disconnect(msg, &len, sizeof(msg));
   2bf92:	2202      	movs	r2, #2
   2bf94:	f10d 010e 	add.w	r1, sp, #14
   2bf98:	a803      	add	r0, sp, #12
   2bf9a:	f7ff fec3 	bl	2bd24 <mqtt_pack_disconnect>
	if (rc != 0) {
   2bf9e:	4605      	mov	r5, r0
   2bfa0:	bb70      	cbnz	r0, 2c000 <mqtt_tx_disconnect+0x74>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   2bfa2:	4601      	mov	r1, r0
   2bfa4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   2bfa6:	4620      	mov	r0, r4
   2bfa8:	f7d9 fc7c 	bl	58a4 <net_app_get_net_pkt>
	if (tx == NULL) {
   2bfac:	4607      	mov	r7, r0
   2bfae:	b350      	cbz	r0, 2c006 <mqtt_tx_disconnect+0x7a>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   2bfb0:	f8bd 600e 	ldrh.w	r6, [sp, #14]
   2bfb4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   2bfb6:	aa03      	add	r2, sp, #12
   2bfb8:	4631      	mov	r1, r6
   2bfba:	f7f6 fc75 	bl	228a8 <net_pkt_append>
	if (rc != true) {
   2bfbe:	4286      	cmp	r6, r0
   2bfc0:	d118      	bne.n	2bff4 <mqtt_tx_disconnect+0x68>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   2bfc2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   2bfc4:	9300      	str	r3, [sp, #0]
   2bfc6:	9501      	str	r5, [sp, #4]
   2bfc8:	462b      	mov	r3, r5
   2bfca:	462a      	mov	r2, r5
   2bfcc:	4639      	mov	r1, r7
   2bfce:	4620      	mov	r0, r4
   2bfd0:	f7d9 fbfe 	bl	57d0 <net_app_send_pkt>
	if (rc < 0) {
   2bfd4:	1e06      	subs	r6, r0, #0
   2bfd6:	db0f      	blt.n	2bff8 <mqtt_tx_disconnect+0x6c>
	ctx->connected = 0;
   2bfd8:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   2bfdc:	f365 0341 	bfi	r3, r5, #1, #1
   2bfe0:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->disconnect) {
   2bfe4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   2bfe8:	b10b      	cbz	r3, 2bfee <mqtt_tx_disconnect+0x62>
		ctx->disconnect(ctx);
   2bfea:	4620      	mov	r0, r4
   2bfec:	4798      	blx	r3
}
   2bfee:	4630      	mov	r0, r6
   2bff0:	b005      	add	sp, #20
   2bff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = -ENOMEM;
   2bff4:	f06f 060b 	mvn.w	r6, #11
	net_pkt_unref(tx);
   2bff8:	4638      	mov	r0, r7
   2bffa:	f7f6 fb00 	bl	225fe <net_pkt_unref>
	return rc;
   2bffe:	e7f6      	b.n	2bfee <mqtt_tx_disconnect+0x62>
		return -EINVAL;
   2c000:	f06f 0615 	mvn.w	r6, #21
   2c004:	e7f3      	b.n	2bfee <mqtt_tx_disconnect+0x62>
		return -ENOMEM;
   2c006:	f06f 060b 	mvn.w	r6, #11
   2c00a:	e7f0      	b.n	2bfee <mqtt_tx_disconnect+0x62>

0002c00c <mqtt_tx_puback>:
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBACK);
   2c00c:	2204      	movs	r2, #4
   2c00e:	f7ff bf16 	b.w	2be3e <mqtt_tx_pub_msgs>

0002c012 <mqtt_tx_pubrec>:
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREC);
   2c012:	2205      	movs	r2, #5
   2c014:	f7ff bf13 	b.w	2be3e <mqtt_tx_pub_msgs>

0002c018 <mqtt_tx_publish>:
{
   2c018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c01a:	4605      	mov	r5, r0
   2c01c:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   2c01e:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   2c020:	481a      	ldr	r0, [pc, #104]	; (2c08c <mqtt_tx_publish+0x74>)
   2c022:	f7f3 f8e7 	bl	1f1f4 <net_buf_alloc_fixed>
	if (data == NULL) {
   2c026:	4604      	mov	r4, r0
   2c028:	b360      	cbz	r0, 2c084 <mqtt_tx_publish+0x6c>
	rc = mqtt_pack_publish(data->data, &data->len, data->size, msg);
   2c02a:	4633      	mov	r3, r6
   2c02c:	89c2      	ldrh	r2, [r0, #14]
   2c02e:	f100 010c 	add.w	r1, r0, #12
   2c032:	6880      	ldr	r0, [r0, #8]
   2c034:	f7ff fda7 	bl	2bb86 <mqtt_pack_publish>
	if (rc != 0) {
   2c038:	4606      	mov	r6, r0
   2c03a:	b9d0      	cbnz	r0, 2c072 <mqtt_tx_publish+0x5a>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   2c03c:	4601      	mov	r1, r0
   2c03e:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   2c040:	4628      	mov	r0, r5
   2c042:	f7d9 fc2f 	bl	58a4 <net_app_get_net_pkt>
	if (tx == NULL) {
   2c046:	4607      	mov	r7, r0
   2c048:	b1c8      	cbz	r0, 2c07e <mqtt_tx_publish+0x66>
	net_pkt_frag_add(tx, data);
   2c04a:	4621      	mov	r1, r4
   2c04c:	f7f6 fafe 	bl	2264c <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   2c050:	9601      	str	r6, [sp, #4]
   2c052:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   2c054:	9300      	str	r3, [sp, #0]
   2c056:	4628      	mov	r0, r5
   2c058:	4633      	mov	r3, r6
   2c05a:	4632      	mov	r2, r6
   2c05c:	4639      	mov	r1, r7
   2c05e:	f7d9 fbb7 	bl	57d0 <net_app_send_pkt>
	if (rc < 0) {
   2c062:	1e05      	subs	r5, r0, #0
   2c064:	da02      	bge.n	2c06c <mqtt_tx_publish+0x54>
		net_pkt_unref(tx);
   2c066:	4638      	mov	r0, r7
   2c068:	f7f6 fac9 	bl	225fe <net_pkt_unref>
}
   2c06c:	4628      	mov	r0, r5
   2c06e:	b003      	add	sp, #12
   2c070:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = -EINVAL;
   2c072:	f06f 0515 	mvn.w	r5, #21
	net_pkt_frag_unref(data);
   2c076:	4620      	mov	r0, r4
   2c078:	f7f6 fabd 	bl	225f6 <net_pkt_frag_unref>
	return rc;
   2c07c:	e7f6      	b.n	2c06c <mqtt_tx_publish+0x54>
		rc = -ENOMEM;
   2c07e:	f06f 050b 	mvn.w	r5, #11
   2c082:	e7f8      	b.n	2c076 <mqtt_tx_publish+0x5e>
		return -ENOMEM;
   2c084:	f06f 050b 	mvn.w	r5, #11
   2c088:	e7f0      	b.n	2c06c <mqtt_tx_publish+0x54>
   2c08a:	bf00      	nop
   2c08c:	2000e4f4 	.word	0x2000e4f4

0002c090 <mqtt_tx_subscribe>:
{
   2c090:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2c094:	4605      	mov	r5, r0
   2c096:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   2c098:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   2c09a:	481e      	ldr	r0, [pc, #120]	; (2c114 <mqtt_tx_subscribe+0x84>)
{
   2c09c:	4617      	mov	r7, r2
   2c09e:	4698      	mov	r8, r3
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   2c0a0:	f7f3 f8a8 	bl	1f1f4 <net_buf_alloc_fixed>
	if (data == NULL) {
   2c0a4:	4604      	mov	r4, r0
   2c0a6:	b388      	cbz	r0, 2c10c <mqtt_tx_subscribe+0x7c>
	rc = mqtt_pack_subscribe(data->data, &data->len, data->size,
   2c0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c0aa:	89c2      	ldrh	r2, [r0, #14]
   2c0ac:	9700      	str	r7, [sp, #0]
   2c0ae:	e9cd 8301 	strd	r8, r3, [sp, #4]
   2c0b2:	f100 010c 	add.w	r1, r0, #12
   2c0b6:	4633      	mov	r3, r6
   2c0b8:	6880      	ldr	r0, [r0, #8]
   2c0ba:	f7ff fd0e 	bl	2bada <mqtt_pack_subscribe>
	if (rc != 0) {
   2c0be:	4606      	mov	r6, r0
   2c0c0:	b9d8      	cbnz	r0, 2c0fa <mqtt_tx_subscribe+0x6a>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   2c0c2:	4601      	mov	r1, r0
   2c0c4:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   2c0c6:	4628      	mov	r0, r5
   2c0c8:	f7d9 fbec 	bl	58a4 <net_app_get_net_pkt>
	if (tx == NULL) {
   2c0cc:	4607      	mov	r7, r0
   2c0ce:	b1d0      	cbz	r0, 2c106 <mqtt_tx_subscribe+0x76>
	net_pkt_frag_add(tx, data);
   2c0d0:	4621      	mov	r1, r4
   2c0d2:	f7f6 fabb 	bl	2264c <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   2c0d6:	9601      	str	r6, [sp, #4]
   2c0d8:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   2c0da:	9300      	str	r3, [sp, #0]
   2c0dc:	4628      	mov	r0, r5
   2c0de:	4633      	mov	r3, r6
   2c0e0:	4632      	mov	r2, r6
   2c0e2:	4639      	mov	r1, r7
   2c0e4:	f7d9 fb74 	bl	57d0 <net_app_send_pkt>
	if (rc < 0) {
   2c0e8:	1e05      	subs	r5, r0, #0
   2c0ea:	da02      	bge.n	2c0f2 <mqtt_tx_subscribe+0x62>
		net_pkt_unref(tx);
   2c0ec:	4638      	mov	r0, r7
   2c0ee:	f7f6 fa86 	bl	225fe <net_pkt_unref>
}
   2c0f2:	4628      	mov	r0, r5
   2c0f4:	b004      	add	sp, #16
   2c0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = -EINVAL;
   2c0fa:	f06f 0515 	mvn.w	r5, #21
	net_pkt_frag_unref(data);
   2c0fe:	4620      	mov	r0, r4
   2c100:	f7f6 fa79 	bl	225f6 <net_pkt_frag_unref>
	return rc;
   2c104:	e7f5      	b.n	2c0f2 <mqtt_tx_subscribe+0x62>
		rc = -ENOMEM;
   2c106:	f06f 050b 	mvn.w	r5, #11
   2c10a:	e7f8      	b.n	2c0fe <mqtt_tx_subscribe+0x6e>
		return -ENOMEM;
   2c10c:	f06f 050b 	mvn.w	r5, #11
   2c110:	e7ef      	b.n	2c0f2 <mqtt_tx_subscribe+0x62>
   2c112:	bf00      	nop
   2c114:	2000e4f4 	.word	0x2000e4f4

0002c118 <mqtt_rx_connack>:
{
   2c118:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c11a:	4605      	mov	r5, r0
   2c11c:	4608      	mov	r0, r1
   2c11e:	4616      	mov	r6, r2
	rc = mqtt_unpack_connack(data, len, &session, &connect_rc);
   2c120:	f10d 0306 	add.w	r3, sp, #6
   2c124:	f10d 0207 	add.w	r2, sp, #7
   2c128:	8989      	ldrh	r1, [r1, #12]
   2c12a:	6880      	ldr	r0, [r0, #8]
   2c12c:	f7ff fde7 	bl	2bcfe <mqtt_unpack_connack>
	if (rc != 0) {
   2c130:	4604      	mov	r4, r0
   2c132:	b990      	cbnz	r0, 2c15a <mqtt_rx_connack+0x42>
	switch (clean_session) {
   2c134:	2e01      	cmp	r6, #1
   2c136:	d110      	bne.n	2c15a <mqtt_rx_connack+0x42>
 		if (/*session == 0 && */connect_rc == 0) {
   2c138:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2c13c:	b96b      	cbnz	r3, 2c15a <mqtt_rx_connack+0x42>
	ctx->connected = 1;
   2c13e:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
   2c142:	f043 0302 	orr.w	r3, r3, #2
   2c146:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
	if (ctx->connect) {
   2c14a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
   2c14e:	b10b      	cbz	r3, 2c154 <mqtt_rx_connack+0x3c>
		ctx->connect(ctx);
   2c150:	4628      	mov	r0, r5
   2c152:	4798      	blx	r3
}
   2c154:	4620      	mov	r0, r4
   2c156:	b002      	add	sp, #8
   2c158:	bd70      	pop	{r4, r5, r6, pc}
		rc = -EINVAL;
   2c15a:	f06f 0415 	mvn.w	r4, #21
	return rc;
   2c15e:	e7f9      	b.n	2c154 <mqtt_rx_connack+0x3c>

0002c160 <mqtt_rx_puback>:
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBACK);
   2c160:	2204      	movs	r2, #4
   2c162:	f7ff be1d 	b.w	2bda0 <mqtt_rx_pub_msgs>

0002c166 <mqtt_rx_pubcomp>:
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBCOMP);
   2c166:	2207      	movs	r2, #7
   2c168:	f7ff be1a 	b.w	2bda0 <mqtt_rx_pub_msgs>

0002c16c <mqtt_rx_pubrec>:
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREC);
   2c16c:	2205      	movs	r2, #5
   2c16e:	f7ff be17 	b.w	2bda0 <mqtt_rx_pub_msgs>

0002c172 <mqtt_rx_pubrel>:
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREL);
   2c172:	2206      	movs	r2, #6
   2c174:	f7ff be14 	b.w	2bda0 <mqtt_rx_pub_msgs>

0002c178 <mqtt_rx_pingresp>:
{
   2c178:	b508      	push	{r3, lr}
   2c17a:	460b      	mov	r3, r1
	rc = mqtt_unpack_pingresp(rx->data, rx->len);
   2c17c:	8989      	ldrh	r1, [r1, #12]
   2c17e:	6898      	ldr	r0, [r3, #8]
   2c180:	f7ff fe0a 	bl	2bd98 <mqtt_unpack_pingresp>
	if (rc != 0) {
   2c184:	2800      	cmp	r0, #0
}
   2c186:	bf18      	it	ne
   2c188:	f06f 0015 	mvnne.w	r0, #21
   2c18c:	bd08      	pop	{r3, pc}

0002c18e <mqtt_rx_suback>:
{
   2c18e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	rc = mqtt_unpack_suback(data, len, &pkt_id, &items,
   2c190:	2301      	movs	r3, #1
{
   2c192:	4605      	mov	r5, r0
	rc = mqtt_unpack_suback(data, len, &pkt_id, &items,
   2c194:	ae03      	add	r6, sp, #12
{
   2c196:	4608      	mov	r0, r1
	rc = mqtt_unpack_suback(data, len, &pkt_id, &items,
   2c198:	8989      	ldrh	r1, [r1, #12]
   2c19a:	9300      	str	r3, [sp, #0]
   2c19c:	9601      	str	r6, [sp, #4]
   2c19e:	f10d 030d 	add.w	r3, sp, #13
   2c1a2:	f10d 020e 	add.w	r2, sp, #14
   2c1a6:	6880      	ldr	r0, [r0, #8]
   2c1a8:	f7ff fca5 	bl	2baf6 <mqtt_unpack_suback>
	if (rc != 0) {
   2c1ac:	b118      	cbz	r0, 2c1b6 <mqtt_rx_suback+0x28>
		return -EINVAL;
   2c1ae:	f06f 0015 	mvn.w	r0, #21
}
   2c1b2:	b004      	add	sp, #16
   2c1b4:	bd70      	pop	{r4, r5, r6, pc}
	if (!ctx->subscribe) {
   2c1b6:	f8d5 4098 	ldr.w	r4, [r5, #152]	; 0x98
   2c1ba:	2c00      	cmp	r4, #0
   2c1bc:	d0f7      	beq.n	2c1ae <mqtt_rx_suback+0x20>
	rc = ctx->subscribe(ctx, pkt_id, items, suback_qos);
   2c1be:	4633      	mov	r3, r6
   2c1c0:	f89d 200d 	ldrb.w	r2, [sp, #13]
   2c1c4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2c1c8:	4628      	mov	r0, r5
   2c1ca:	47a0      	blx	r4
	if (rc != 0) {
   2c1cc:	2800      	cmp	r0, #0
   2c1ce:	d0f0      	beq.n	2c1b2 <mqtt_rx_suback+0x24>
   2c1d0:	e7ed      	b.n	2c1ae <mqtt_rx_suback+0x20>

0002c1d2 <mqtt_rx_unsuback>:
{
   2c1d2:	b513      	push	{r0, r1, r4, lr}
   2c1d4:	460b      	mov	r3, r1
   2c1d6:	4604      	mov	r4, r0
	rc = mqtt_unpack_unsuback(data, len, &pkt_id);
   2c1d8:	f10d 0206 	add.w	r2, sp, #6
   2c1dc:	8989      	ldrh	r1, [r1, #12]
   2c1de:	6898      	ldr	r0, [r3, #8]
   2c1e0:	f7ff fdd1 	bl	2bd86 <mqtt_unpack_unsuback>
	if (rc != 0) {
   2c1e4:	b118      	cbz	r0, 2c1ee <mqtt_rx_unsuback+0x1c>
		return -EINVAL;
   2c1e6:	f06f 0015 	mvn.w	r0, #21
}
   2c1ea:	b002      	add	sp, #8
   2c1ec:	bd10      	pop	{r4, pc}
	if (!ctx->unsubscribe) {
   2c1ee:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   2c1f2:	2b00      	cmp	r3, #0
   2c1f4:	d0f7      	beq.n	2c1e6 <mqtt_rx_unsuback+0x14>
	rc = ctx->unsubscribe(ctx, pkt_id);
   2c1f6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   2c1fa:	4620      	mov	r0, r4
   2c1fc:	4798      	blx	r3
	if (rc != 0) {
   2c1fe:	2800      	cmp	r0, #0
   2c200:	d0f3      	beq.n	2c1ea <mqtt_rx_unsuback+0x18>
   2c202:	e7f0      	b.n	2c1e6 <mqtt_rx_unsuback+0x14>

0002c204 <mqtt_rx_publish>:
{
   2c204:	b530      	push	{r4, r5, lr}
   2c206:	460b      	mov	r3, r1
   2c208:	b087      	sub	sp, #28
   2c20a:	4604      	mov	r4, r0
	rc = mqtt_unpack_publish(rx->data, rx->len, &msg);
   2c20c:	466a      	mov	r2, sp
   2c20e:	8989      	ldrh	r1, [r1, #12]
   2c210:	6898      	ldr	r0, [r3, #8]
   2c212:	f7ff fd26 	bl	2bc62 <mqtt_unpack_publish>
	if (rc != 0) {
   2c216:	b118      	cbz	r0, 2c220 <mqtt_rx_publish+0x1c>
		rc = -EINVAL;
   2c218:	f06f 0015 	mvn.w	r0, #21
}
   2c21c:	b007      	add	sp, #28
   2c21e:	bd30      	pop	{r4, r5, pc}
	rc = ctx->publish_rx(ctx, &msg, msg.pkt_id, MQTT_PUBLISH);
   2c220:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   2c224:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   2c228:	2303      	movs	r3, #3
   2c22a:	4669      	mov	r1, sp
   2c22c:	4620      	mov	r0, r4
   2c22e:	47a8      	blx	r5
	if (rc != 0) {
   2c230:	2800      	cmp	r0, #0
   2c232:	d1f1      	bne.n	2c218 <mqtt_rx_publish+0x14>
	switch (msg.qos) {
   2c234:	f89d 3001 	ldrb.w	r3, [sp, #1]
   2c238:	2b01      	cmp	r3, #1
   2c23a:	d008      	beq.n	2c24e <mqtt_rx_publish+0x4a>
   2c23c:	d3ee      	bcc.n	2c21c <mqtt_rx_publish+0x18>
   2c23e:	2b02      	cmp	r3, #2
   2c240:	d1ea      	bne.n	2c218 <mqtt_rx_publish+0x14>
		rc = mqtt_tx_pubrec(ctx, msg.pkt_id);
   2c242:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2c246:	4620      	mov	r0, r4
   2c248:	f7ff fee3 	bl	2c012 <mqtt_tx_pubrec>
		break;
   2c24c:	e7e6      	b.n	2c21c <mqtt_rx_publish+0x18>
		rc = mqtt_tx_puback(ctx, msg.pkt_id);
   2c24e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2c252:	4620      	mov	r0, r4
   2c254:	f7ff feda 	bl	2c00c <mqtt_tx_puback>
		break;
   2c258:	e7e0      	b.n	2c21c <mqtt_rx_publish+0x18>
	...

0002c25c <mqtt_parser>:
{
   2c25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	data_len = net_pkt_appdatalen(rx);
   2c25e:	8fcc      	ldrh	r4, [r1, #62]	; 0x3e
	if (data_len < min_size || data_len > CONFIG_MQTT_MSG_MAX_SIZE) {
   2c260:	1ea3      	subs	r3, r4, #2
   2c262:	2b7e      	cmp	r3, #126	; 0x7e
{
   2c264:	4606      	mov	r6, r0
   2c266:	460f      	mov	r7, r1
	if (data_len < min_size || data_len > CONFIG_MQTT_MSG_MAX_SIZE) {
   2c268:	d903      	bls.n	2c272 <mqtt_parser+0x16>
		return -ENOMEM;
   2c26a:	f06f 040b 	mvn.w	r4, #11
}
   2c26e:	4620      	mov	r0, r4
   2c270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   2c272:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   2c274:	4833      	ldr	r0, [pc, #204]	; (2c344 <mqtt_parser+0xe8>)
   2c276:	f7f2 ffbd 	bl	1f1f4 <net_buf_alloc_fixed>
	if (data == NULL) {
   2c27a:	4605      	mov	r5, r0
   2c27c:	2800      	cmp	r0, #0
   2c27e:	d0f4      	beq.n	2c26a <mqtt_parser+0xe>
	offset = net_pkt_get_len(rx) - data_len;
   2c280:	6979      	ldr	r1, [r7, #20]
	size_t bytes = 0;
   2c282:	2200      	movs	r2, #0
   2c284:	4608      	mov	r0, r1
	while (buf) {
   2c286:	b950      	cbnz	r0, 2c29e <mqtt_parser+0x42>
   2c288:	1b12      	subs	r2, r2, r4
	rc = net_frag_linear_copy(data, rx->frags, offset, data_len);
   2c28a:	4623      	mov	r3, r4
   2c28c:	b292      	uxth	r2, r2
   2c28e:	4628      	mov	r0, r5
   2c290:	f7f6 fa8e 	bl	227b0 <net_frag_linear_copy>
	if (rc != 0) {
   2c294:	b138      	cbz	r0, 2c2a6 <mqtt_parser+0x4a>
	net_pkt_frag_unref(data);
   2c296:	4628      	mov	r0, r5
   2c298:	f7f6 f9ad 	bl	225f6 <net_pkt_frag_unref>
   2c29c:	e7e5      	b.n	2c26a <mqtt_parser+0xe>
		bytes += buf->len;
   2c29e:	8983      	ldrh	r3, [r0, #12]
		buf = buf->frags;
   2c2a0:	6800      	ldr	r0, [r0, #0]
		bytes += buf->len;
   2c2a2:	441a      	add	r2, r3
   2c2a4:	e7ef      	b.n	2c286 <mqtt_parser+0x2a>
	pkt_type = MQTT_PACKET_TYPE(data->data[0]);
   2c2a6:	68ab      	ldr	r3, [r5, #8]
   2c2a8:	781f      	ldrb	r7, [r3, #0]
   2c2aa:	093f      	lsrs	r7, r7, #4
	switch (pkt_type) {
   2c2ac:	1ebb      	subs	r3, r7, #2
   2c2ae:	2b0b      	cmp	r3, #11
   2c2b0:	d845      	bhi.n	2c33e <mqtt_parser+0xe2>
   2c2b2:	e8df f003 	tbb	[pc, r3]
   2c2b6:	3006      	.short	0x3006
   2c2b8:	2635211c 	.word	0x2635211c
   2c2bc:	3f443a44 	.word	0x3f443a44
   2c2c0:	2b44      	.short	0x2b44
		if (!ctx->connected) {
   2c2c2:	f896 20a9 	ldrb.w	r2, [r6, #169]	; 0xa9
   2c2c6:	0793      	lsls	r3, r2, #30
   2c2c8:	d439      	bmi.n	2c33e <mqtt_parser+0xe2>
			rc = mqtt_rx_connack(ctx, data, ctx->clean_session);
   2c2ca:	f002 0201 	and.w	r2, r2, #1
   2c2ce:	4629      	mov	r1, r5
   2c2d0:	4630      	mov	r0, r6
   2c2d2:	f7ff ff21 	bl	2c118 <mqtt_rx_connack>
		rc = mqtt_rx_unsuback(ctx, data);
   2c2d6:	4604      	mov	r4, r0
	if (rc != 0 && ctx->malformed) {
   2c2d8:	b128      	cbz	r0, 2c2e6 <mqtt_parser+0x8a>
   2c2da:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   2c2de:	b113      	cbz	r3, 2c2e6 <mqtt_parser+0x8a>
		ctx->malformed(ctx, pkt_type);
   2c2e0:	4639      	mov	r1, r7
   2c2e2:	4630      	mov	r0, r6
   2c2e4:	4798      	blx	r3
	net_pkt_frag_unref(data);
   2c2e6:	4628      	mov	r0, r5
   2c2e8:	f7f6 f985 	bl	225f6 <net_pkt_frag_unref>
	return rc;
   2c2ec:	e7bf      	b.n	2c26e <mqtt_parser+0x12>
		rc = mqtt_rx_puback(ctx, data);
   2c2ee:	4629      	mov	r1, r5
   2c2f0:	4630      	mov	r0, r6
   2c2f2:	f7ff ff35 	bl	2c160 <mqtt_rx_puback>
   2c2f6:	e7ee      	b.n	2c2d6 <mqtt_parser+0x7a>
		rc = mqtt_rx_pubrec(ctx, data);
   2c2f8:	4629      	mov	r1, r5
   2c2fa:	4630      	mov	r0, r6
   2c2fc:	f7ff ff36 	bl	2c16c <mqtt_rx_pubrec>
   2c300:	e7e9      	b.n	2c2d6 <mqtt_parser+0x7a>
		rc = mqtt_rx_pubcomp(ctx, data);
   2c302:	4629      	mov	r1, r5
   2c304:	4630      	mov	r0, r6
   2c306:	f7ff ff2e 	bl	2c166 <mqtt_rx_pubcomp>
   2c30a:	e7e4      	b.n	2c2d6 <mqtt_parser+0x7a>
		rc = mqtt_rx_pingresp(ctx, data);
   2c30c:	4629      	mov	r1, r5
   2c30e:	4630      	mov	r0, r6
   2c310:	f7ff ff32 	bl	2c178 <mqtt_rx_pingresp>
   2c314:	e7df      	b.n	2c2d6 <mqtt_parser+0x7a>
		rc = mqtt_rx_publish(ctx, data);
   2c316:	4629      	mov	r1, r5
   2c318:	4630      	mov	r0, r6
   2c31a:	f7ff ff73 	bl	2c204 <mqtt_rx_publish>
   2c31e:	e7da      	b.n	2c2d6 <mqtt_parser+0x7a>
		rc = mqtt_rx_pubrel(ctx, data);
   2c320:	4629      	mov	r1, r5
   2c322:	4630      	mov	r0, r6
   2c324:	f7ff ff25 	bl	2c172 <mqtt_rx_pubrel>
   2c328:	e7d5      	b.n	2c2d6 <mqtt_parser+0x7a>
		rc = mqtt_rx_suback(ctx, data);
   2c32a:	4629      	mov	r1, r5
   2c32c:	4630      	mov	r0, r6
   2c32e:	f7ff ff2e 	bl	2c18e <mqtt_rx_suback>
   2c332:	e7d0      	b.n	2c2d6 <mqtt_parser+0x7a>
		rc = mqtt_rx_unsuback(ctx, data);
   2c334:	4629      	mov	r1, r5
   2c336:	4630      	mov	r0, r6
   2c338:	f7ff ff4b 	bl	2c1d2 <mqtt_rx_unsuback>
   2c33c:	e7cb      	b.n	2c2d6 <mqtt_parser+0x7a>
			rc = -EINVAL;
   2c33e:	f06f 0415 	mvn.w	r4, #21
   2c342:	e7ca      	b.n	2c2da <mqtt_parser+0x7e>
   2c344:	2000e4f4 	.word	0x2000e4f4

0002c348 <mqtt_connect>:

int mqtt_connect(struct mqtt_ctx *ctx)
{
   2c348:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;

	if (!ctx) {
   2c34a:	4604      	mov	r4, r0
{
   2c34c:	b086      	sub	sp, #24
	if (!ctx) {
   2c34e:	b348      	cbz	r0, 2c3a4 <mqtt_connect+0x5c>
					  const char *peer_addr_str,
					  u16_t peer_port,
					  s32_t timeout,
					  void *user_data)
{
	return net_app_init_client(ctx,
   2c350:	9004      	str	r0, [sp, #16]
   2c352:	6f83      	ldr	r3, [r0, #120]	; 0x78
   2c354:	9303      	str	r3, [sp, #12]
   2c356:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
   2c35a:	9302      	str	r3, [sp, #8]
   2c35c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   2c360:	9301      	str	r3, [sp, #4]
   2c362:	2600      	movs	r6, #0
   2c364:	9600      	str	r6, [sp, #0]
   2c366:	4633      	mov	r3, r6
   2c368:	2206      	movs	r2, #6
   2c36a:	2101      	movs	r1, #1
   2c36c:	f7d9 fb22 	bl	59b4 <net_app_init_client>
				     NULL,
				     ctx->peer_addr_str,
				     ctx->peer_port,
				     ctx->net_init_timeout,
				     ctx);
	if (rc < 0) {
   2c370:	1e05      	subs	r5, r0, #0
   2c372:	db0e      	blt.n	2c392 <mqtt_connect+0x4a>
		goto error_connect;
	}

	rc = net_app_set_cb(&ctx->net_app_ctx,
   2c374:	9600      	str	r6, [sp, #0]
   2c376:	4633      	mov	r3, r6
   2c378:	4a0c      	ldr	r2, [pc, #48]	; (2c3ac <mqtt_connect+0x64>)
   2c37a:	490d      	ldr	r1, [pc, #52]	; (2c3b0 <mqtt_connect+0x68>)
   2c37c:	4620      	mov	r0, r4
   2c37e:	f7d9 fa14 	bl	57aa <net_app_set_cb>
			    app_connected,
			    app_recv,
			    NULL,
			    NULL);
	if (rc < 0) {
   2c382:	1e05      	subs	r5, r0, #0
   2c384:	db05      	blt.n	2c392 <mqtt_connect+0x4a>
	if (rc < 0) {
		goto error_connect;
	}
#endif

	rc = net_app_connect(&ctx->net_app_ctx, ctx->net_timeout);
   2c386:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   2c388:	4620      	mov	r0, r4
   2c38a:	f7d9 fc4f 	bl	5c2c <net_app_connect>
	if (rc < 0) {
   2c38e:	1e05      	subs	r5, r0, #0
   2c390:	da05      	bge.n	2c39e <mqtt_connect+0x56>

	return rc;

error_connect:
	/* clean net app context, so mqtt_connect() can be called repeatedly */
	net_app_close(&ctx->net_app_ctx);
   2c392:	4620      	mov	r0, r4
   2c394:	f7d9 faa8 	bl	58e8 <net_app_close>
	net_app_release(&ctx->net_app_ctx);
   2c398:	4620      	mov	r0, r4
   2c39a:	f7d9 f9e3 	bl	5764 <net_app_release>

	return rc;
}
   2c39e:	4628      	mov	r0, r5
   2c3a0:	b006      	add	sp, #24
   2c3a2:	bd70      	pop	{r4, r5, r6, pc}
		return -EFAULT;
   2c3a4:	f06f 050d 	mvn.w	r5, #13
   2c3a8:	e7f9      	b.n	2c39e <mqtt_connect+0x56>
   2c3aa:	bf00      	nop
   2c3ac:	0002bee7 	.word	0x0002bee7
   2c3b0:	0002be3d 	.word	0x0002be3d

0002c3b4 <mqtt_init>:

int mqtt_init(struct mqtt_ctx *ctx, enum mqtt_app app_type)
{
	/* So far, only clean session = 1 is supported */
	ctx->clean_session = 1;
   2c3b4:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
	ctx->connected = 0;

	ctx->app_type = app_type;
   2c3b8:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
	ctx->connected = 0;
   2c3bc:	f043 0301 	orr.w	r3, r3, #1
   2c3c0:	f36f 0341 	bfc	r3, #1, #1
   2c3c4:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9
	ctx->rcv = mqtt_parser;
   2c3c8:	4b02      	ldr	r3, [pc, #8]	; (2c3d4 <mqtt_init+0x20>)
   2c3ca:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	k_sem_init(&ctx->tls_hs_wait, 0, 1);
#endif

	return 0;
}
   2c3ce:	2000      	movs	r0, #0
   2c3d0:	4770      	bx	lr
   2c3d2:	bf00      	nop
   2c3d4:	0002c25d 	.word	0x0002c25d

0002c3d8 <mqtt_close>:

int mqtt_close(struct mqtt_ctx *ctx)
{
   2c3d8:	b510      	push	{r4, lr}
	if (!ctx) {
   2c3da:	4604      	mov	r4, r0
   2c3dc:	b158      	cbz	r0, 2c3f6 <mqtt_close+0x1e>
		return -EFAULT;
	}

	if (ctx->net_app_ctx.is_init) {
   2c3de:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   2c3e2:	f013 0301 	ands.w	r3, r3, #1
   2c3e6:	d009      	beq.n	2c3fc <mqtt_close+0x24>
		net_app_close(&ctx->net_app_ctx);
   2c3e8:	f7d9 fa7e 	bl	58e8 <net_app_close>
		net_app_release(&ctx->net_app_ctx);
   2c3ec:	4620      	mov	r0, r4
   2c3ee:	f7d9 f9b9 	bl	5764 <net_app_release>
	}

	return 0;
   2c3f2:	2000      	movs	r0, #0
}
   2c3f4:	bd10      	pop	{r4, pc}
		return -EFAULT;
   2c3f6:	f06f 000d 	mvn.w	r0, #13
   2c3fa:	e7fb      	b.n	2c3f4 <mqtt_close+0x1c>
	return 0;
   2c3fc:	4618      	mov	r0, r3
   2c3fe:	e7f9      	b.n	2c3f4 <mqtt_close+0x1c>

0002c400 <net_config_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_config_init(const char *app_info, u32_t flags, s32_t timeout)
{
   2c400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c404:	460c      	mov	r4, r1
   2c406:	4615      	mov	r5, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   2c408:	f7f4 fc7c 	bl	20d04 <net_if_get_default>

	if (app_info) {
		NET_INFO("%s", log_strdup(app_info));
	}

	if (!iface) {
   2c40c:	b9b8      	cbnz	r0, 2c43e <net_config_init+0x3e>
		NET_ERR("No network interfaces");
   2c40e:	4b2f      	ldr	r3, [pc, #188]	; (2c4cc <net_config_init+0xcc>)
   2c410:	681b      	ldr	r3, [r3, #0]
   2c412:	075c      	lsls	r4, r3, #29
   2c414:	d010      	beq.n	2c438 <net_config_init+0x38>
   2c416:	2301      	movs	r3, #1
   2c418:	f04f 0200 	mov.w	r2, #0
   2c41c:	f363 0202 	bfi	r2, r3, #0, #3
   2c420:	492b      	ldr	r1, [pc, #172]	; (2c4d0 <net_config_init+0xd0>)
   2c422:	4b2c      	ldr	r3, [pc, #176]	; (2c4d4 <net_config_init+0xd4>)
   2c424:	1a5b      	subs	r3, r3, r1
   2c426:	f360 02c5 	bfi	r2, r0, #3, #3
   2c42a:	08db      	lsrs	r3, r3, #3
   2c42c:	f363 128f 	bfi	r2, r3, #6, #10
   2c430:	4929      	ldr	r1, [pc, #164]	; (2c4d8 <net_config_init+0xd8>)
   2c432:	482a      	ldr	r0, [pc, #168]	; (2c4dc <net_config_init+0xdc>)
   2c434:	f7d5 fe5a 	bl	20ec <log_1>
		return -ENODEV;
   2c438:	f06f 0012 	mvn.w	r0, #18
   2c43c:	e00d      	b.n	2c45a <net_config_init+0x5a>

	if (flags & NET_CONFIG_NEED_IPV6) {
		count++;
	}

	if (flags & NET_CONFIG_NEED_IPV4) {
   2c43e:	0760      	lsls	r0, r4, #29
	if (flags & NET_CONFIG_NEED_IPV6) {
   2c440:	f3c4 0140 	ubfx	r1, r4, #1, #1
		count++;
   2c444:	bf48      	it	mi
   2c446:	3101      	addmi	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   2c448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c44c:	4824      	ldr	r0, [pc, #144]	; (2c4e0 <net_config_init+0xe0>)
   2c44e:	f001 ff0b 	bl	2e268 <_impl_k_sem_init>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   2c452:	2d00      	cmp	r5, #0
   2c454:	db35      	blt.n	2c4c2 <net_config_init+0xc2>
		count = -1;
	} else if (timeout == 0) {
   2c456:	d102      	bne.n	2c45e <net_config_init+0x5e>
	if (!count && timeout) {
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   2c458:	2000      	movs	r0, #0
}
   2c45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		count = timeout / 1000 + 1;
   2c45e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2c462:	fb95 f4f4 	sdiv	r4, r5, r4
   2c466:	3401      	adds	r4, #1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2c468:	4f1e      	ldr	r7, [pc, #120]	; (2c4e4 <net_config_init+0xe4>)
K_SYSCALL_DECLARE1(K_SYSCALL_K_SEM_COUNT_GET, k_sem_count_get, unsigned int, struct k_sem *, sem)
   2c46a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2c4e0 <net_config_init+0xe0>
   2c46e:	3c01      	subs	r4, #1
	int loop = timeout / LOOP_DIVIDER;
   2c470:	260a      	movs	r6, #10
   2c472:	fb95 f6f6 	sdiv	r6, r5, r6
	while (count--) {
   2c476:	1c62      	adds	r2, r4, #1
   2c478:	d0ee      	beq.n	2c458 <net_config_init+0x58>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2c47a:	4631      	mov	r1, r6
   2c47c:	4638      	mov	r0, r7
   2c47e:	f001 ff23 	bl	2e2c8 <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   2c482:	b308      	cbz	r0, 2c4c8 <net_config_init+0xc8>
			if (!k_sem_count_get(&counter)) {
   2c484:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2c488:	b9f3      	cbnz	r3, 2c4c8 <net_config_init+0xc8>
	if (!count && timeout) {
   2c48a:	2c00      	cmp	r4, #0
   2c48c:	d1e4      	bne.n	2c458 <net_config_init+0x58>
   2c48e:	2d00      	cmp	r5, #0
   2c490:	d0e2      	beq.n	2c458 <net_config_init+0x58>
		NET_ERR("Timeout while waiting setup");
   2c492:	4b0e      	ldr	r3, [pc, #56]	; (2c4cc <net_config_init+0xcc>)
   2c494:	681b      	ldr	r3, [r3, #0]
   2c496:	075b      	lsls	r3, r3, #29
   2c498:	d010      	beq.n	2c4bc <net_config_init+0xbc>
   2c49a:	2301      	movs	r3, #1
   2c49c:	f04f 0200 	mov.w	r2, #0
   2c4a0:	f363 0202 	bfi	r2, r3, #0, #3
   2c4a4:	490a      	ldr	r1, [pc, #40]	; (2c4d0 <net_config_init+0xd0>)
   2c4a6:	4b0b      	ldr	r3, [pc, #44]	; (2c4d4 <net_config_init+0xd4>)
   2c4a8:	480f      	ldr	r0, [pc, #60]	; (2c4e8 <net_config_init+0xe8>)
   2c4aa:	1a5b      	subs	r3, r3, r1
   2c4ac:	f364 02c5 	bfi	r2, r4, #3, #3
   2c4b0:	08db      	lsrs	r3, r3, #3
   2c4b2:	f363 128f 	bfi	r2, r3, #6, #10
   2c4b6:	4908      	ldr	r1, [pc, #32]	; (2c4d8 <net_config_init+0xd8>)
   2c4b8:	f7d5 fe18 	bl	20ec <log_1>
		return -ETIMEDOUT;
   2c4bc:	f06f 003b 	mvn.w	r0, #59	; 0x3b
   2c4c0:	e7cb      	b.n	2c45a <net_config_init+0x5a>
		count = -1;
   2c4c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2c4c6:	e7cf      	b.n	2c468 <net_config_init+0x68>
   2c4c8:	3c01      	subs	r4, #1
   2c4ca:	e7d4      	b.n	2c476 <net_config_init+0x76>
   2c4cc:	2000e268 	.word	0x2000e268
   2c4d0:	0002ef38 	.word	0x0002ef38
   2c4d4:	0002f010 	.word	0x0002f010
   2c4d8:	000373c9 	.word	0x000373c9
   2c4dc:	0003744c 	.word	0x0003744c
   2c4e0:	20002f10 	.word	0x20002f10
   2c4e4:	2000e3c8 	.word	0x2000e3c8
   2c4e8:	00037466 	.word	0x00037466

0002c4ec <init_net_app>:

#if defined(CONFIG_NET_CONFIG_AUTO_INIT)
static int init_net_app(struct device *device)
{
   2c4ec:	b510      	push	{r4, lr}
	ret = _net_config_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_config_bt_setup();
   2c4ee:	f000 f845 	bl	2c57c <_net_config_bt_setup>
	if (ret < 0) {
   2c4f2:	1e02      	subs	r2, r0, #0
   2c4f4:	da14      	bge.n	2c520 <init_net_app+0x34>
		NET_ERR("Cannot setup Bluetooth interface (%d)", ret);
   2c4f6:	4b1a      	ldr	r3, [pc, #104]	; (2c560 <init_net_app+0x74>)
   2c4f8:	681b      	ldr	r3, [r3, #0]
   2c4fa:	0759      	lsls	r1, r3, #29
   2c4fc:	d010      	beq.n	2c520 <init_net_app+0x34>
   2c4fe:	2101      	movs	r1, #1
   2c500:	f04f 0300 	mov.w	r3, #0
   2c504:	f361 0302 	bfi	r3, r1, #0, #3
   2c508:	4816      	ldr	r0, [pc, #88]	; (2c564 <init_net_app+0x78>)
   2c50a:	4917      	ldr	r1, [pc, #92]	; (2c568 <init_net_app+0x7c>)
   2c50c:	1a09      	subs	r1, r1, r0
   2c50e:	08c9      	lsrs	r1, r1, #3
   2c510:	f36f 03c5 	bfc	r3, #3, #3
   2c514:	f361 138f 	bfi	r3, r1, #6, #10
   2c518:	4814      	ldr	r0, [pc, #80]	; (2c56c <init_net_app+0x80>)
   2c51a:	4915      	ldr	r1, [pc, #84]	; (2c570 <init_net_app+0x84>)
   2c51c:	f7d5 fdfa 	bl	2114 <log_2>
	if (IS_ENABLED(CONFIG_NET_CONFIG_NEED_IPV4)) {
		flags |= NET_CONFIG_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_config_init("Initializing network", flags,
   2c520:	f247 5230 	movw	r2, #30000	; 0x7530
   2c524:	2100      	movs	r1, #0
   2c526:	4813      	ldr	r0, [pc, #76]	; (2c574 <init_net_app+0x88>)
   2c528:	f7ff ff6a 	bl	2c400 <net_config_init>
			      K_SECONDS(CONFIG_NET_CONFIG_INIT_TIMEOUT));
	if (ret < 0) {
   2c52c:	1e04      	subs	r4, r0, #0
   2c52e:	da15      	bge.n	2c55c <init_net_app+0x70>
		NET_ERR("Network initialization failed (%d)", ret);
   2c530:	4b0b      	ldr	r3, [pc, #44]	; (2c560 <init_net_app+0x74>)
   2c532:	681b      	ldr	r3, [r3, #0]
   2c534:	075b      	lsls	r3, r3, #29
   2c536:	d011      	beq.n	2c55c <init_net_app+0x70>
   2c538:	2201      	movs	r2, #1
   2c53a:	f04f 0300 	mov.w	r3, #0
   2c53e:	f362 0302 	bfi	r3, r2, #0, #3
   2c542:	4908      	ldr	r1, [pc, #32]	; (2c564 <init_net_app+0x78>)
   2c544:	4a08      	ldr	r2, [pc, #32]	; (2c568 <init_net_app+0x7c>)
   2c546:	480c      	ldr	r0, [pc, #48]	; (2c578 <init_net_app+0x8c>)
   2c548:	1a52      	subs	r2, r2, r1
   2c54a:	08d2      	lsrs	r2, r2, #3
   2c54c:	f36f 03c5 	bfc	r3, #3, #3
   2c550:	f362 138f 	bfi	r3, r2, #6, #10
   2c554:	4906      	ldr	r1, [pc, #24]	; (2c570 <init_net_app+0x84>)
   2c556:	4622      	mov	r2, r4
   2c558:	f7d5 fddc 	bl	2114 <log_2>
	}

	return ret;
}
   2c55c:	4620      	mov	r0, r4
   2c55e:	bd10      	pop	{r4, pc}
   2c560:	2000e268 	.word	0x2000e268
   2c564:	0002ef38 	.word	0x0002ef38
   2c568:	0002f010 	.word	0x0002f010
   2c56c:	000373e6 	.word	0x000373e6
   2c570:	000373d9 	.word	0x000373d9
   2c574:	00037410 	.word	0x00037410
   2c578:	00037425 	.word	0x00037425

0002c57c <_net_config_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_config_bt_setup(void)
{
   2c57c:	b510      	push	{r4, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   2c57e:	2000      	movs	r0, #0
   2c580:	f7dd fea0 	bl	a2c4 <bt_enable>
	if (err < 0 && err != -EALREADY) {
   2c584:	2800      	cmp	r0, #0
   2c586:	da02      	bge.n	2c58e <_net_config_bt_setup+0x12>
   2c588:	f110 0f45 	cmn.w	r0, #69	; 0x45
   2c58c:	d109      	bne.n	2c5a2 <_net_config_bt_setup+0x26>
		return err;
	}

	dev = device_get_binding("net_bt");
   2c58e:	480d      	ldr	r0, [pc, #52]	; (2c5c4 <_net_config_bt_setup+0x48>)
   2c590:	f000 ff7a 	bl	2d488 <device_get_binding>
	if (!dev) {
   2c594:	b190      	cbz	r0, 2c5bc <_net_config_bt_setup+0x40>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   2c596:	f7f4 fba3 	bl	20ce0 <net_if_lookup_by_dev>
	if (!iface) {
   2c59a:	4604      	mov	r4, r0
   2c59c:	b910      	cbnz	r0, 2c5a4 <_net_config_bt_setup+0x28>
		return -EINVAL;
   2c59e:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}
#endif

	return 0;
}
   2c5a2:	bd10      	pop	{r4, pc}
	bt_gatt_service_register(&ipss_svc);
   2c5a4:	4808      	ldr	r0, [pc, #32]	; (2c5c8 <_net_config_bt_setup+0x4c>)
   2c5a6:	f7e2 f8e5 	bl	e774 <bt_gatt_service_register>
	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, ADV_STR,
   2c5aa:	2303      	movs	r3, #3
   2c5ac:	4a07      	ldr	r2, [pc, #28]	; (2c5cc <_net_config_bt_setup+0x50>)
   2c5ae:	4808      	ldr	r0, [pc, #32]	; (2c5d0 <_net_config_bt_setup+0x54>)
   2c5b0:	4621      	mov	r1, r4
   2c5b2:	f7f3 f8d9 	bl	1f768 <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   2c5b6:	2800      	cmp	r0, #0
   2c5b8:	d0f3      	beq.n	2c5a2 <_net_config_bt_setup+0x26>
   2c5ba:	e7f0      	b.n	2c59e <_net_config_bt_setup+0x22>
		return -ENODEV;
   2c5bc:	f06f 0012 	mvn.w	r0, #18
   2c5c0:	e7ef      	b.n	2c5a2 <_net_config_bt_setup+0x26>
   2c5c2:	bf00      	nop
   2c5c4:	00034210 	.word	0x00034210
   2c5c8:	2000e07c 	.word	0x2000e07c
   2c5cc:	0003201f 	.word	0x0003201f
   2c5d0:	61550001 	.word	0x61550001

0002c5d4 <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	u8_t channel_id = channel_cfg->channel_id;
   2c5d4:	7908      	ldrb	r0, [r1, #4]
{
   2c5d6:	b570      	push	{r4, r5, r6, lr}
	u8_t channel_id = channel_cfg->channel_id;
   2c5d8:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= NRF_SAADC_CHANNEL_COUNT) {
   2c5dc:	2c07      	cmp	r4, #7
   2c5de:	d842      	bhi.n	2c666 <adc_nrfx_channel_setup+0x92>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
   2c5e0:	780b      	ldrb	r3, [r1, #0]
   2c5e2:	2b09      	cmp	r3, #9
   2c5e4:	d82a      	bhi.n	2c63c <adc_nrfx_channel_setup+0x68>
   2c5e6:	e8df f003 	tbb	[pc, r3]
   2c5ea:	4341      	.short	0x4341
   2c5ec:	29211f05 	.word	0x29211f05
   2c5f0:	27292523 	.word	0x27292523
		break;
	case ADC_GAIN_1_5:
		config.gain = NRF_SAADC_GAIN1_5;
		break;
	case ADC_GAIN_1_4:
		config.gain = NRF_SAADC_GAIN1_4;
   2c5f4:	2302      	movs	r3, #2
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
   2c5f6:	784a      	ldrb	r2, [r1, #1]
   2c5f8:	2a03      	cmp	r2, #3
   2c5fa:	d068      	beq.n	2c6ce <adc_nrfx_channel_setup+0xfa>
   2c5fc:	2a04      	cmp	r2, #4
   2c5fe:	d039      	beq.n	2c674 <adc_nrfx_channel_setup+0xa0>
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
		break;
	default:
		LOG_ERR("Selected ADC reference is not valid");
   2c600:	4b49      	ldr	r3, [pc, #292]	; (2c728 <adc_nrfx_channel_setup+0x154>)
   2c602:	681b      	ldr	r3, [r3, #0]
   2c604:	075a      	lsls	r2, r3, #29
   2c606:	d02e      	beq.n	2c666 <adc_nrfx_channel_setup+0x92>
   2c608:	2301      	movs	r3, #1
   2c60a:	f04f 0200 	mov.w	r2, #0
   2c60e:	f363 0202 	bfi	r2, r3, #0, #3
   2c612:	4946      	ldr	r1, [pc, #280]	; (2c72c <adc_nrfx_channel_setup+0x158>)
   2c614:	4b46      	ldr	r3, [pc, #280]	; (2c730 <adc_nrfx_channel_setup+0x15c>)
   2c616:	4847      	ldr	r0, [pc, #284]	; (2c734 <adc_nrfx_channel_setup+0x160>)
   2c618:	1a5b      	subs	r3, r3, r1
   2c61a:	f36f 02c5 	bfc	r2, #3, #3
   2c61e:	08db      	lsrs	r3, r3, #3
   2c620:	f363 128f 	bfi	r2, r3, #6, #10
   2c624:	4944      	ldr	r1, [pc, #272]	; (2c738 <adc_nrfx_channel_setup+0x164>)
   2c626:	e01c      	b.n	2c662 <adc_nrfx_channel_setup+0x8e>
		config.gain = NRF_SAADC_GAIN1_3;
   2c628:	2303      	movs	r3, #3
		break;
   2c62a:	e7e4      	b.n	2c5f6 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN1_2;
   2c62c:	2304      	movs	r3, #4
		break;
   2c62e:	e7e2      	b.n	2c5f6 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN1;
   2c630:	2305      	movs	r3, #5
		break;
   2c632:	e7e0      	b.n	2c5f6 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN2;
   2c634:	2306      	movs	r3, #6
		break;
   2c636:	e7de      	b.n	2c5f6 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   2c638:	2307      	movs	r3, #7
		break;
   2c63a:	e7dc      	b.n	2c5f6 <adc_nrfx_channel_setup+0x22>
		LOG_ERR("Selected ADC gain is not valid");
   2c63c:	4b3a      	ldr	r3, [pc, #232]	; (2c728 <adc_nrfx_channel_setup+0x154>)
   2c63e:	681b      	ldr	r3, [r3, #0]
   2c640:	0759      	lsls	r1, r3, #29
   2c642:	d010      	beq.n	2c666 <adc_nrfx_channel_setup+0x92>
   2c644:	2301      	movs	r3, #1
   2c646:	f04f 0200 	mov.w	r2, #0
   2c64a:	f363 0202 	bfi	r2, r3, #0, #3
   2c64e:	4937      	ldr	r1, [pc, #220]	; (2c72c <adc_nrfx_channel_setup+0x158>)
   2c650:	4b37      	ldr	r3, [pc, #220]	; (2c730 <adc_nrfx_channel_setup+0x15c>)
   2c652:	483a      	ldr	r0, [pc, #232]	; (2c73c <adc_nrfx_channel_setup+0x168>)
   2c654:	1a5b      	subs	r3, r3, r1
   2c656:	f36f 02c5 	bfc	r2, #3, #3
   2c65a:	08db      	lsrs	r3, r3, #3
   2c65c:	4936      	ldr	r1, [pc, #216]	; (2c738 <adc_nrfx_channel_setup+0x164>)
   2c65e:	f363 128f 	bfi	r2, r3, #6, #10
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40):
		config.acq_time = NRF_SAADC_ACQTIME_40US;
		break;
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
   2c662:	f7d5 fd43 	bl	20ec <log_1>
		return -EINVAL;
   2c666:	f06f 0015 	mvn.w	r0, #21
   2c66a:	e02f      	b.n	2c6cc <adc_nrfx_channel_setup+0xf8>
	nrf_saadc_channel_config_t config = {
   2c66c:	2300      	movs	r3, #0
   2c66e:	e7c2      	b.n	2c5f6 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN1_5;
   2c670:	2301      	movs	r3, #1
   2c672:	e7c0      	b.n	2c5f6 <adc_nrfx_channel_setup+0x22>
	nrf_saadc_channel_config_t config = {
   2c674:	2600      	movs	r6, #0
	switch (channel_cfg->acquisition_time) {
   2c676:	884a      	ldrh	r2, [r1, #2]
   2c678:	f244 050a 	movw	r5, #16394	; 0x400a
   2c67c:	42aa      	cmp	r2, r5
   2c67e:	d009      	beq.n	2c694 <adc_nrfx_channel_setup+0xc0>
   2c680:	d827      	bhi.n	2c6d2 <adc_nrfx_channel_setup+0xfe>
   2c682:	f244 0503 	movw	r5, #16387	; 0x4003
   2c686:	42aa      	cmp	r2, r5
   2c688:	d049      	beq.n	2c71e <adc_nrfx_channel_setup+0x14a>
   2c68a:	f244 0505 	movw	r5, #16389	; 0x4005
   2c68e:	42aa      	cmp	r2, r5
   2c690:	d047      	beq.n	2c722 <adc_nrfx_channel_setup+0x14e>
   2c692:	bb82      	cbnz	r2, 2c6f6 <adc_nrfx_channel_setup+0x122>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   2c694:	2202      	movs	r2, #2
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   2c696:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   2c69a:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   2c69c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   2c6a0:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   2c6a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    NRF_SAADC->CH[channel].CONFIG =
   2c6a8:	0122      	lsls	r2, r4, #4
   2c6aa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2c6ae:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
	/* Keep the channel disabled in hardware (set positive input to
	 * NRF_SAADC_INPUT_DISABLED) until it is selected to be included
	 * in a sampling sequence.
	 */
	config.pin_p = NRF_SAADC_INPUT_DISABLED;
	config.pin_n = channel_cfg->input_negative;
   2c6b2:	798d      	ldrb	r5, [r1, #6]
   2c6b4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   2c6b8:	4b21      	ldr	r3, [pc, #132]	; (2c740 <adc_nrfx_channel_setup+0x16c>)
    NRF_SAADC->CH[channel].PSELN = pseln;
   2c6ba:	f8c2 5514 	str.w	r5, [r2, #1300]	; 0x514
    NRF_SAADC->CH[channel].PSELP = pselp;
   2c6be:	2000      	movs	r0, #0
   2c6c0:	441c      	add	r4, r3
   2c6c2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   2c6c6:	794b      	ldrb	r3, [r1, #5]
   2c6c8:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74

	return 0;
}
   2c6cc:	bd70      	pop	{r4, r5, r6, pc}
		config.reference = NRF_SAADC_REFERENCE_VDD4;
   2c6ce:	2601      	movs	r6, #1
   2c6d0:	e7d1      	b.n	2c676 <adc_nrfx_channel_setup+0xa2>
	switch (channel_cfg->acquisition_time) {
   2c6d2:	f244 0514 	movw	r5, #16404	; 0x4014
   2c6d6:	42aa      	cmp	r2, r5
   2c6d8:	d009      	beq.n	2c6ee <adc_nrfx_channel_setup+0x11a>
   2c6da:	f244 0528 	movw	r5, #16424	; 0x4028
   2c6de:	42aa      	cmp	r2, r5
   2c6e0:	d007      	beq.n	2c6f2 <adc_nrfx_channel_setup+0x11e>
   2c6e2:	f244 050f 	movw	r5, #16399	; 0x400f
   2c6e6:	42aa      	cmp	r2, r5
   2c6e8:	d105      	bne.n	2c6f6 <adc_nrfx_channel_setup+0x122>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   2c6ea:	2203      	movs	r2, #3
		break;
   2c6ec:	e7d3      	b.n	2c696 <adc_nrfx_channel_setup+0xc2>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   2c6ee:	2204      	movs	r2, #4
		break;
   2c6f0:	e7d1      	b.n	2c696 <adc_nrfx_channel_setup+0xc2>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   2c6f2:	2205      	movs	r2, #5
		break;
   2c6f4:	e7cf      	b.n	2c696 <adc_nrfx_channel_setup+0xc2>
		LOG_ERR("Selected ADC acquisition time is not valid");
   2c6f6:	4b0c      	ldr	r3, [pc, #48]	; (2c728 <adc_nrfx_channel_setup+0x154>)
   2c6f8:	681b      	ldr	r3, [r3, #0]
   2c6fa:	075b      	lsls	r3, r3, #29
   2c6fc:	d0b3      	beq.n	2c666 <adc_nrfx_channel_setup+0x92>
   2c6fe:	2301      	movs	r3, #1
   2c700:	f04f 0200 	mov.w	r2, #0
   2c704:	f363 0202 	bfi	r2, r3, #0, #3
   2c708:	4908      	ldr	r1, [pc, #32]	; (2c72c <adc_nrfx_channel_setup+0x158>)
   2c70a:	4b09      	ldr	r3, [pc, #36]	; (2c730 <adc_nrfx_channel_setup+0x15c>)
   2c70c:	480d      	ldr	r0, [pc, #52]	; (2c744 <adc_nrfx_channel_setup+0x170>)
   2c70e:	1a5b      	subs	r3, r3, r1
   2c710:	f36f 02c5 	bfc	r2, #3, #3
   2c714:	08db      	lsrs	r3, r3, #3
   2c716:	f363 128f 	bfi	r2, r3, #6, #10
   2c71a:	4907      	ldr	r1, [pc, #28]	; (2c738 <adc_nrfx_channel_setup+0x164>)
   2c71c:	e7a1      	b.n	2c662 <adc_nrfx_channel_setup+0x8e>
	nrf_saadc_channel_config_t config = {
   2c71e:	2200      	movs	r2, #0
   2c720:	e7b9      	b.n	2c696 <adc_nrfx_channel_setup+0xc2>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
   2c722:	2201      	movs	r2, #1
   2c724:	e7b7      	b.n	2c696 <adc_nrfx_channel_setup+0xc2>
   2c726:	bf00      	nop
   2c728:	2000e1fc 	.word	0x2000e1fc
   2c72c:	0002ef38 	.word	0x0002ef38
   2c730:	0002ef38 	.word	0x0002ef38
   2c734:	00037516 	.word	0x00037516
   2c738:	0003749f 	.word	0x0003749f
   2c73c:	000374f3 	.word	0x000374f3
   2c740:	2000e088 	.word	0x2000e088
   2c744:	0003753e 	.word	0x0003753e

0002c748 <adc_context_start_sampling.isra.1>:
    NRF_SAADC->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   2c748:	4a03      	ldr	r2, [pc, #12]	; (2c758 <adc_context_start_sampling.isra.1+0x10>)
   2c74a:	2301      	movs	r3, #1
   2c74c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_task)) = 0x1UL;
   2c750:	6013      	str	r3, [r2, #0]
   2c752:	6053      	str	r3, [r2, #4]

	nrf_saadc_enable();

	nrf_saadc_task_trigger(NRF_SAADC_TASK_START);
	nrf_saadc_task_trigger(NRF_SAADC_TASK_SAMPLE);
}
   2c754:	4770      	bx	lr
   2c756:	bf00      	nop
   2c758:	40007000 	.word	0x40007000

0002c75c <init_saadc>:
}

DEVICE_DECLARE(adc_0);

static int init_saadc(struct device *dev)
{
   2c75c:	b513      	push	{r0, r1, r4, lr}
    *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event)) = 0x0UL;
   2c75e:	4b0d      	ldr	r3, [pc, #52]	; (2c794 <init_saadc+0x38>)
   2c760:	2400      	movs	r4, #0
   2c762:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event));
   2c764:	681b      	ldr	r3, [r3, #0]
   2c766:	9301      	str	r3, [sp, #4]
    (void)dummy;
   2c768:	9b01      	ldr	r3, [sp, #4]
    NRF_SAADC->INTENSET = saadc_int_mask;
   2c76a:	4b0b      	ldr	r3, [pc, #44]	; (2c798 <init_saadc+0x3c>)
   2c76c:	2202      	movs	r2, #2
   2c76e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC_EVENT_END);
	nrf_saadc_int_enable(NRF_SAADC_INT_END);
	NRFX_IRQ_ENABLE(CONFIG_ADC_0_IRQ);
   2c772:	2007      	movs	r0, #7
   2c774:	f7d9 ff34 	bl	65e0 <_arch_irq_enable>

	IRQ_CONNECT(CONFIG_ADC_0_IRQ, CONFIG_ADC_0_IRQ_PRI,
   2c778:	2007      	movs	r0, #7
   2c77a:	4622      	mov	r2, r4
   2c77c:	2101      	movs	r1, #1
   2c77e:	f7d9 ff61 	bl	6644 <_irq_priority_set>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SEM_COUNT_GET, k_sem_count_get, unsigned int, struct k_sem *, sem)
   2c782:	4806      	ldr	r0, [pc, #24]	; (2c79c <init_saadc+0x40>)
	k_sem_give(&ctx->lock);
}

static inline void adc_context_unlock_unconditionally(struct adc_context *ctx)
{
	if (!k_sem_count_get(&ctx->lock)) {
   2c784:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2c786:	b913      	cbnz	r3, 2c78e <init_saadc+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2c788:	3030      	adds	r0, #48	; 0x30
   2c78a:	f001 fd76 	bl	2e27a <_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_GET(adc_0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   2c78e:	2000      	movs	r0, #0
   2c790:	b002      	add	sp, #8
   2c792:	bd10      	pop	{r4, pc}
   2c794:	40007104 	.word	0x40007104
   2c798:	40007000 	.word	0x40007000
   2c79c:	2000e088 	.word	0x2000e088

0002c7a0 <start_read.isra.5>:
static int start_read(struct device *dev, const struct adc_sequence *sequence)
   2c7a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t selected_channels = sequence->channels;
   2c7a2:	6844      	ldr	r4, [r0, #4]
	if (!selected_channels ||
   2c7a4:	b114      	cbz	r4, 2c7ac <start_read.isra.5+0xc>
   2c7a6:	f034 02ff 	bics.w	r2, r4, #255	; 0xff
   2c7aa:	d01a      	beq.n	2c7e2 <start_read.isra.5+0x42>
		LOG_ERR("Invalid selection of channels");
   2c7ac:	4b97      	ldr	r3, [pc, #604]	; (2ca0c <start_read.isra.5+0x26c>)
   2c7ae:	681b      	ldr	r3, [r3, #0]
   2c7b0:	075b      	lsls	r3, r3, #29
   2c7b2:	d104      	bne.n	2c7be <start_read.isra.5+0x1e>
		return -EINVAL;
   2c7b4:	f06f 0515 	mvn.w	r5, #21
}
   2c7b8:	4628      	mov	r0, r5
   2c7ba:	b003      	add	sp, #12
   2c7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Invalid selection of channels");
   2c7be:	2301      	movs	r3, #1
   2c7c0:	f04f 0200 	mov.w	r2, #0
   2c7c4:	f363 0202 	bfi	r2, r3, #0, #3
   2c7c8:	4991      	ldr	r1, [pc, #580]	; (2ca10 <start_read.isra.5+0x270>)
   2c7ca:	4b92      	ldr	r3, [pc, #584]	; (2ca14 <start_read.isra.5+0x274>)
   2c7cc:	4892      	ldr	r0, [pc, #584]	; (2ca18 <start_read.isra.5+0x278>)
   2c7ce:	1a5b      	subs	r3, r3, r1
   2c7d0:	f36f 02c5 	bfc	r2, #3, #3
   2c7d4:	08db      	lsrs	r3, r3, #3
   2c7d6:	4991      	ldr	r1, [pc, #580]	; (2ca1c <start_read.isra.5+0x27c>)
   2c7d8:	f363 128f 	bfi	r2, r3, #6, #10
   2c7dc:	f7d5 fc86 	bl	20ec <log_1>
   2c7e0:	e7e8      	b.n	2c7b4 <start_read.isra.5+0x14>
    NRF_SAADC->CH[channel].PSELP = pselp;
   2c7e2:	4d8f      	ldr	r5, [pc, #572]	; (2ca20 <start_read.isra.5+0x280>)
			if (m_data.positive_inputs[channel_id] == 0) {
   2c7e4:	4f8f      	ldr	r7, [pc, #572]	; (2ca24 <start_read.isra.5+0x284>)
	active_channels = 0;
   2c7e6:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
   2c7e8:	fa24 f302 	lsr.w	r3, r4, r2
   2c7ec:	f013 0301 	ands.w	r3, r3, #1
   2c7f0:	d03e      	beq.n	2c870 <start_read.isra.5+0xd0>
			if (m_data.positive_inputs[channel_id] == 0) {
   2c7f2:	18bb      	adds	r3, r7, r2
   2c7f4:	f893 6074 	ldrb.w	r6, [r3, #116]	; 0x74
   2c7f8:	b9ae      	cbnz	r6, 2c826 <start_read.isra.5+0x86>
				LOG_ERR("Channel %u not configured",
   2c7fa:	4b84      	ldr	r3, [pc, #528]	; (2ca0c <start_read.isra.5+0x26c>)
   2c7fc:	681b      	ldr	r3, [r3, #0]
   2c7fe:	075f      	lsls	r7, r3, #29
   2c800:	d0d8      	beq.n	2c7b4 <start_read.isra.5+0x14>
   2c802:	2101      	movs	r1, #1
   2c804:	f04f 0300 	mov.w	r3, #0
   2c808:	f361 0302 	bfi	r3, r1, #0, #3
   2c80c:	4880      	ldr	r0, [pc, #512]	; (2ca10 <start_read.isra.5+0x270>)
   2c80e:	4981      	ldr	r1, [pc, #516]	; (2ca14 <start_read.isra.5+0x274>)
   2c810:	1a09      	subs	r1, r1, r0
   2c812:	08c9      	lsrs	r1, r1, #3
   2c814:	f366 03c5 	bfi	r3, r6, #3, #3
   2c818:	f361 138f 	bfi	r3, r1, #6, #10
   2c81c:	4882      	ldr	r0, [pc, #520]	; (2ca28 <start_read.isra.5+0x288>)
   2c81e:	497f      	ldr	r1, [pc, #508]	; (2ca1c <start_read.isra.5+0x27c>)
		LOG_ERR("Oversampling value %d is not valid",
   2c820:	f7d5 fc78 	bl	2114 <log_2>
   2c824:	e7c6      	b.n	2c7b4 <start_read.isra.5+0x14>
 */
__STATIC_INLINE void nrf_saadc_burst_set(uint8_t channel,
                                         nrf_saadc_burst_t burst)
{
    NRF_SAADC->CH[channel].CONFIG =
        (NRF_SAADC->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   2c826:	eb05 1e02 	add.w	lr, r5, r2, lsl #4
			nrf_saadc_burst_set(channel_id,
   2c82a:	f890 c011 	ldrb.w	ip, [r0, #17]
   2c82e:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
   2c832:	f11c 0c00 	adds.w	ip, ip, #0
   2c836:	bf18      	it	ne
   2c838:	f04f 0c01 	movne.w	ip, #1
   2c83c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2c840:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
    NRF_SAADC->CH[channel].CONFIG =
   2c844:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    NRF_SAADC->CH[channel].PSELP = pselp;
   2c848:	f102 0351 	add.w	r3, r2, #81	; 0x51
   2c84c:	011b      	lsls	r3, r3, #4
			++active_channels;
   2c84e:	3101      	adds	r1, #1
   2c850:	50ee      	str	r6, [r5, r3]
   2c852:	b2c9      	uxtb	r1, r1
   2c854:	3201      	adds	r2, #1
	} while (++channel_id < NRF_SAADC_CHANNEL_COUNT);
   2c856:	2a08      	cmp	r2, #8
   2c858:	d1c6      	bne.n	2c7e8 <start_read.isra.5+0x48>
	error = set_resolution(sequence);
   2c85a:	7c02      	ldrb	r2, [r0, #16]
	switch (sequence->resolution) {
   2c85c:	f1a2 0308 	sub.w	r3, r2, #8
   2c860:	2b06      	cmp	r3, #6
   2c862:	d829      	bhi.n	2c8b8 <start_read.isra.5+0x118>
   2c864:	e8df f003 	tbb	[pc, r3]
   2c868:	2809283d 	.word	0x2809283d
   2c86c:	283f      	.short	0x283f
   2c86e:	26          	.byte	0x26
   2c86f:	00          	.byte	0x00
   2c870:	f102 0651 	add.w	r6, r2, #81	; 0x51
   2c874:	0136      	lsls	r6, r6, #4
   2c876:	51ab      	str	r3, [r5, r6]
   2c878:	e7ec      	b.n	2c854 <start_read.isra.5+0xb4>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
   2c87a:	2201      	movs	r2, #1
    NRF_SAADC->RESOLUTION = resolution;
   2c87c:	4b68      	ldr	r3, [pc, #416]	; (2ca20 <start_read.isra.5+0x280>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   2c87e:	2901      	cmp	r1, #1
   2c880:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   2c884:	7c42      	ldrb	r2, [r0, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   2c886:	d930      	bls.n	2c8ea <start_read.isra.5+0x14a>
   2c888:	2a00      	cmp	r2, #0
   2c88a:	d038      	beq.n	2c8fe <start_read.isra.5+0x15e>
		LOG_ERR(
   2c88c:	4b5f      	ldr	r3, [pc, #380]	; (2ca0c <start_read.isra.5+0x26c>)
   2c88e:	681b      	ldr	r3, [r3, #0]
   2c890:	075c      	lsls	r4, r3, #29
   2c892:	d08f      	beq.n	2c7b4 <start_read.isra.5+0x14>
   2c894:	2301      	movs	r3, #1
   2c896:	f04f 0200 	mov.w	r2, #0
   2c89a:	f363 0202 	bfi	r2, r3, #0, #3
   2c89e:	495c      	ldr	r1, [pc, #368]	; (2ca10 <start_read.isra.5+0x270>)
   2c8a0:	4b5c      	ldr	r3, [pc, #368]	; (2ca14 <start_read.isra.5+0x274>)
   2c8a2:	4862      	ldr	r0, [pc, #392]	; (2ca2c <start_read.isra.5+0x28c>)
   2c8a4:	1a5b      	subs	r3, r3, r1
   2c8a6:	f36f 02c5 	bfc	r2, #3, #3
   2c8aa:	08db      	lsrs	r3, r3, #3
   2c8ac:	f363 128f 	bfi	r2, r3, #6, #10
   2c8b0:	495f      	ldr	r1, [pc, #380]	; (2ca30 <start_read.isra.5+0x290>)
   2c8b2:	e793      	b.n	2c7dc <start_read.isra.5+0x3c>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   2c8b4:	2203      	movs	r2, #3
   2c8b6:	e7e1      	b.n	2c87c <start_read.isra.5+0xdc>
		LOG_ERR("ADC resolution value %d is not valid",
   2c8b8:	4b54      	ldr	r3, [pc, #336]	; (2ca0c <start_read.isra.5+0x26c>)
   2c8ba:	681b      	ldr	r3, [r3, #0]
   2c8bc:	075d      	lsls	r5, r3, #29
   2c8be:	f43f af79 	beq.w	2c7b4 <start_read.isra.5+0x14>
   2c8c2:	2101      	movs	r1, #1
   2c8c4:	f04f 0300 	mov.w	r3, #0
   2c8c8:	f361 0302 	bfi	r3, r1, #0, #3
   2c8cc:	4850      	ldr	r0, [pc, #320]	; (2ca10 <start_read.isra.5+0x270>)
   2c8ce:	4951      	ldr	r1, [pc, #324]	; (2ca14 <start_read.isra.5+0x274>)
   2c8d0:	1a09      	subs	r1, r1, r0
   2c8d2:	08c9      	lsrs	r1, r1, #3
   2c8d4:	f36f 03c5 	bfc	r3, #3, #3
   2c8d8:	f361 138f 	bfi	r3, r1, #6, #10
   2c8dc:	4855      	ldr	r0, [pc, #340]	; (2ca34 <start_read.isra.5+0x294>)
   2c8de:	4956      	ldr	r1, [pc, #344]	; (2ca38 <start_read.isra.5+0x298>)
   2c8e0:	e79e      	b.n	2c820 <start_read.isra.5+0x80>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   2c8e2:	2200      	movs	r2, #0
   2c8e4:	e7ca      	b.n	2c87c <start_read.isra.5+0xdc>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   2c8e6:	2202      	movs	r2, #2
   2c8e8:	e7c8      	b.n	2c87c <start_read.isra.5+0xdc>
	switch (sequence->oversampling) {
   2c8ea:	2a08      	cmp	r2, #8
   2c8ec:	d83a      	bhi.n	2c964 <start_read.isra.5+0x1c4>
   2c8ee:	e8df f002 	tbb	[pc, r2]
   2c8f2:	054e      	.short	0x054e
   2c8f4:	312f2d2b 	.word	0x312f2d2b
   2c8f8:	3533      	.short	0x3533
   2c8fa:	37          	.byte	0x37
   2c8fb:	00          	.byte	0x00
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_2X;
   2c8fc:	2201      	movs	r2, #1
	if (sequence->options) {
   2c8fe:	6805      	ldr	r5, [r0, #0]
    NRF_SAADC->OVERSAMPLE = oversample;
   2c900:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   2c904:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
   2c906:	b115      	cbz	r5, 2c90e <start_read.isra.5+0x16e>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   2c908:	892a      	ldrh	r2, [r5, #8]
   2c90a:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   2c90e:	68c2      	ldr	r2, [r0, #12]
   2c910:	429a      	cmp	r2, r3
   2c912:	d23e      	bcs.n	2c992 <start_read.isra.5+0x1f2>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   2c914:	493d      	ldr	r1, [pc, #244]	; (2ca0c <start_read.isra.5+0x26c>)
   2c916:	6809      	ldr	r1, [r1, #0]
   2c918:	0749      	lsls	r1, r1, #29
   2c91a:	d012      	beq.n	2c942 <start_read.isra.5+0x1a2>
   2c91c:	2101      	movs	r1, #1
   2c91e:	f04f 0000 	mov.w	r0, #0
   2c922:	f361 0002 	bfi	r0, r1, #0, #3
   2c926:	4c3a      	ldr	r4, [pc, #232]	; (2ca10 <start_read.isra.5+0x270>)
   2c928:	493a      	ldr	r1, [pc, #232]	; (2ca14 <start_read.isra.5+0x274>)
   2c92a:	1b09      	subs	r1, r1, r4
   2c92c:	08c9      	lsrs	r1, r1, #3
   2c92e:	f36f 00c5 	bfc	r0, #3, #3
   2c932:	f361 108f 	bfi	r0, r1, #6, #10
   2c936:	f8ad 0000 	strh.w	r0, [sp]
   2c93a:	4940      	ldr	r1, [pc, #256]	; (2ca3c <start_read.isra.5+0x29c>)
   2c93c:	4840      	ldr	r0, [pc, #256]	; (2ca40 <start_read.isra.5+0x2a0>)
   2c93e:	f7d5 fc01 	bl	2144 <log_3>
		return -ENOMEM;
   2c942:	f06f 050b 	mvn.w	r5, #11
   2c946:	e737      	b.n	2c7b8 <start_read.isra.5+0x18>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_4X;
   2c948:	2202      	movs	r2, #2
   2c94a:	e7d8      	b.n	2c8fe <start_read.isra.5+0x15e>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_8X;
   2c94c:	2203      	movs	r2, #3
   2c94e:	e7d6      	b.n	2c8fe <start_read.isra.5+0x15e>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_16X;
   2c950:	2204      	movs	r2, #4
   2c952:	e7d4      	b.n	2c8fe <start_read.isra.5+0x15e>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_32X;
   2c954:	2205      	movs	r2, #5
   2c956:	e7d2      	b.n	2c8fe <start_read.isra.5+0x15e>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_64X;
   2c958:	2206      	movs	r2, #6
   2c95a:	e7d0      	b.n	2c8fe <start_read.isra.5+0x15e>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_128X;
   2c95c:	2207      	movs	r2, #7
   2c95e:	e7ce      	b.n	2c8fe <start_read.isra.5+0x15e>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_256X;
   2c960:	2208      	movs	r2, #8
   2c962:	e7cc      	b.n	2c8fe <start_read.isra.5+0x15e>
		LOG_ERR("Oversampling value %d is not valid",
   2c964:	4b29      	ldr	r3, [pc, #164]	; (2ca0c <start_read.isra.5+0x26c>)
   2c966:	681b      	ldr	r3, [r3, #0]
   2c968:	0758      	lsls	r0, r3, #29
   2c96a:	f43f af23 	beq.w	2c7b4 <start_read.isra.5+0x14>
   2c96e:	2101      	movs	r1, #1
   2c970:	f04f 0300 	mov.w	r3, #0
   2c974:	f361 0302 	bfi	r3, r1, #0, #3
   2c978:	4825      	ldr	r0, [pc, #148]	; (2ca10 <start_read.isra.5+0x270>)
   2c97a:	4926      	ldr	r1, [pc, #152]	; (2ca14 <start_read.isra.5+0x274>)
   2c97c:	1a09      	subs	r1, r1, r0
   2c97e:	08c9      	lsrs	r1, r1, #3
   2c980:	f36f 03c5 	bfc	r3, #3, #3
   2c984:	f361 138f 	bfi	r3, r1, #6, #10
   2c988:	482e      	ldr	r0, [pc, #184]	; (2ca44 <start_read.isra.5+0x2a4>)
   2c98a:	4929      	ldr	r1, [pc, #164]	; (2ca30 <start_read.isra.5+0x290>)
   2c98c:	e748      	b.n	2c820 <start_read.isra.5+0x80>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_DISABLED;
   2c98e:	2200      	movs	r2, #0
   2c990:	e7b5      	b.n	2c8fe <start_read.isra.5+0x15e>
    NRF_SAADC->RESULT.PTR = (uint32_t)p_buffer;
   2c992:	4b23      	ldr	r3, [pc, #140]	; (2ca20 <start_read.isra.5+0x280>)
   2c994:	6882      	ldr	r2, [r0, #8]
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = sequence;
   2c996:	4c23      	ldr	r4, [pc, #140]	; (2ca24 <start_read.isra.5+0x284>)
   2c998:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    NRF_SAADC->RESULT.MAXCNT = size;
   2c99c:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
	ctx->status = 0;
   2c9a0:	2100      	movs	r1, #0
	ctx->sequence = sequence;
   2c9a2:	66e0      	str	r0, [r4, #108]	; 0x6c
	ctx->status = 0;
   2c9a4:	6621      	str	r1, [r4, #96]	; 0x60

	if (ctx->sequence->options) {
   2c9a6:	b365      	cbz	r5, 2ca02 <start_read.isra.5+0x262>
		ctx->sampling_index = 0;

		if (ctx->sequence->options->interval_us != 0) {
   2c9a8:	682b      	ldr	r3, [r5, #0]
		ctx->sampling_index = 0;
   2c9aa:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
		if (ctx->sequence->options->interval_us != 0) {
   2c9ae:	b343      	cbz	r3, 2ca02 <start_read.isra.5+0x262>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2c9b0:	f3bf 8f5b 	dmb	ish
   2c9b4:	e854 3f00 	ldrex	r3, [r4]
   2c9b8:	e844 1200 	strex	r2, r1, [r4]
   2c9bc:	2a00      	cmp	r2, #0
   2c9be:	d1f9      	bne.n	2c9b4 <start_read.isra.5+0x214>
   2c9c0:	f3bf 8f5b 	dmb	ish
	u32_t interval_us = ctx->sequence->options->interval_us;
   2c9c4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   2c9c6:	681b      	ldr	r3, [r3, #0]
	u32_t interval_ms = ceiling_fraction(interval_us, 1000UL);
   2c9c8:	681b      	ldr	r3, [r3, #0]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period)
   2c9ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c9ce:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
   2c9d2:	1d20      	adds	r0, r4, #4
   2c9d4:	fbb3 f2f2 	udiv	r2, r3, r2
   2c9d8:	f002 f866 	bl	2eaa8 <_impl_k_timer_start>
	if (ctx->asynchronous) {
   2c9dc:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   2c9e0:	b993      	cbnz	r3, 2ca08 <start_read.isra.5+0x268>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2c9e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2c9e6:	4818      	ldr	r0, [pc, #96]	; (2ca48 <start_read.isra.5+0x2a8>)
   2c9e8:	f001 fc6e 	bl	2e2c8 <_impl_k_sem_take>
	return ctx->status;
   2c9ec:	6e25      	ldr	r5, [r4, #96]	; 0x60
	if (ctx->asynchronous && (status == 0)) {
   2c9ee:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   2c9f2:	b113      	cbz	r3, 2c9fa <start_read.isra.5+0x25a>
   2c9f4:	2d00      	cmp	r5, #0
   2c9f6:	f43f aedf 	beq.w	2c7b8 <start_read.isra.5+0x18>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2c9fa:	4814      	ldr	r0, [pc, #80]	; (2ca4c <start_read.isra.5+0x2ac>)
   2c9fc:	f001 fc3d 	bl	2e27a <_impl_k_sem_give>
   2ca00:	e6da      	b.n	2c7b8 <start_read.isra.5+0x18>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   2ca02:	f7ff fea1 	bl	2c748 <adc_context_start_sampling.isra.1>
   2ca06:	e7e9      	b.n	2c9dc <start_read.isra.5+0x23c>
		return 0;
   2ca08:	2500      	movs	r5, #0
   2ca0a:	e7f0      	b.n	2c9ee <start_read.isra.5+0x24e>
   2ca0c:	2000e1fc 	.word	0x2000e1fc
   2ca10:	0002ef38 	.word	0x0002ef38
   2ca14:	0002ef38 	.word	0x0002ef38
   2ca18:	0003757c 	.word	0x0003757c
   2ca1c:	000374e8 	.word	0x000374e8
   2ca20:	40007000 	.word	0x40007000
   2ca24:	2000e088 	.word	0x2000e088
   2ca28:	0003759e 	.word	0x0003759e
   2ca2c:	000375e5 	.word	0x000375e5
   2ca30:	000374c5 	.word	0x000374c5
   2ca34:	000375bc 	.word	0x000375bc
   2ca38:	000374b6 	.word	0x000374b6
   2ca3c:	000374d6 	.word	0x000374d6
   2ca40:	00037642 	.word	0x00037642
   2ca44:	0003761b 	.word	0x0003761b
   2ca48:	2000e0d0 	.word	0x2000e0d0
   2ca4c:	2000e0b8 	.word	0x2000e0b8

0002ca50 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2ca50:	1f03      	subs	r3, r0, #4
   2ca52:	f3bf 8f5b 	dmb	ish
   2ca56:	e853 2f00 	ldrex	r2, [r3]
   2ca5a:	1c51      	adds	r1, r2, #1
   2ca5c:	e843 1c00 	strex	ip, r1, [r3]
   2ca60:	f1bc 0f00 	cmp.w	ip, #0
   2ca64:	d1f7      	bne.n	2ca56 <adc_context_on_timer_expired+0x6>
   2ca66:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2ca6a:	b90a      	cbnz	r2, 2ca70 <adc_context_on_timer_expired+0x20>
		adc_context_start_sampling(ctx);
   2ca6c:	f7ff be6c 	b.w	2c748 <adc_context_start_sampling.isra.1>
		ctx->status = -EIO;
   2ca70:	f06f 0304 	mvn.w	r3, #4
   2ca74:	65c3      	str	r3, [r0, #92]	; 0x5c
}
   2ca76:	4770      	bx	lr

0002ca78 <adc_nrfx_read>:
{
   2ca78:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2ca7a:	4c08      	ldr	r4, [pc, #32]	; (2ca9c <adc_nrfx_read+0x24>)
   2ca7c:	460d      	mov	r5, r1
   2ca7e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2ca82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ca86:	f001 fc1f 	bl	2e2c8 <_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   2ca8a:	2300      	movs	r3, #0
   2ca8c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ctx->signal = signal;
   2ca90:	6663      	str	r3, [r4, #100]	; 0x64
	return start_read(dev, sequence);
   2ca92:	4628      	mov	r0, r5
}
   2ca94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_read(dev, sequence);
   2ca98:	f7ff be82 	b.w	2c7a0 <start_read.isra.5>
   2ca9c:	2000e088 	.word	0x2000e088

0002caa0 <adc_nrfx_read_async>:
{
   2caa0:	b570      	push	{r4, r5, r6, lr}
   2caa2:	4c09      	ldr	r4, [pc, #36]	; (2cac8 <adc_nrfx_read_async+0x28>)
   2caa4:	460d      	mov	r5, r1
   2caa6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2caaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2caae:	4616      	mov	r6, r2
   2cab0:	f001 fc0a 	bl	2e2c8 <_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   2cab4:	2301      	movs	r3, #1
   2cab6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ctx->signal = signal;
   2caba:	6666      	str	r6, [r4, #100]	; 0x64
	return start_read(dev, sequence);
   2cabc:	4628      	mov	r0, r5
}
   2cabe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_read(dev, sequence);
   2cac2:	f7ff be6d 	b.w	2c7a0 <start_read.isra.5>
   2cac6:	bf00      	nop
   2cac8:	2000e088 	.word	0x2000e088

0002cacc <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event);
   2cacc:	4b2f      	ldr	r3, [pc, #188]	; (2cb8c <saadc_irq_handler+0xc0>)
   2cace:	681a      	ldr	r2, [r3, #0]
{
   2cad0:	b513      	push	{r0, r1, r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC_EVENT_END)) {
   2cad2:	2a00      	cmp	r2, #0
   2cad4:	d041      	beq.n	2cb5a <saadc_irq_handler+0x8e>
    *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event)) = 0x0UL;
   2cad6:	2200      	movs	r2, #0
   2cad8:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event));
   2cada:	681b      	ldr	r3, [r3, #0]
   2cadc:	9301      	str	r3, [sp, #4]
    (void)dummy;
   2cade:	9b01      	ldr	r3, [sp, #4]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						struct device *dev)
{
	if (ctx->sequence->options) {
   2cae0:	4c2b      	ldr	r4, [pc, #172]	; (2cb90 <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_task)) = 0x1UL;
   2cae2:	4b2c      	ldr	r3, [pc, #176]	; (2cb94 <saadc_irq_handler+0xc8>)
   2cae4:	2101      	movs	r1, #1
   2cae6:	6019      	str	r1, [r3, #0]
   2cae8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    NRF_SAADC->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   2caea:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
   2caee:	680b      	ldr	r3, [r1, #0]
   2caf0:	2b00      	cmp	r3, #0
   2caf2:	d03b      	beq.n	2cb6c <saadc_irq_handler+0xa0>
		adc_sequence_callback callback =
   2caf4:	685b      	ldr	r3, [r3, #4]
   2caf6:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
			ctx->sequence->options->callback;
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   2cafa:	b123      	cbz	r3, 2cb06 <saadc_irq_handler+0x3a>
			action = callback(dev,
   2cafc:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   2cafe:	2801      	cmp	r0, #1
   2cb00:	d015      	beq.n	2cb2e <saadc_irq_handler+0x62>
   2cb02:	2802      	cmp	r0, #2
   2cb04:	d02b      	beq.n	2cb5e <saadc_irq_handler+0x92>
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
			    ctx->sequence->options->extra_samplings) {
   2cb06:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
			if (ctx->sampling_index <
   2cb08:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
			    ctx->sequence->options->extra_samplings) {
   2cb0c:	6812      	ldr	r2, [r2, #0]
			if (ctx->sampling_index <
   2cb0e:	8912      	ldrh	r2, [r2, #8]
   2cb10:	429a      	cmp	r2, r3
   2cb12:	d924      	bls.n	2cb5e <saadc_irq_handler+0x92>
				++ctx->sampling_index;
   2cb14:	3301      	adds	r3, #1
   2cb16:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    return (nrf_saadc_value_t *)NRF_SAADC->RESULT.PTR;
   2cb1a:	4b1f      	ldr	r3, [pc, #124]	; (2cb98 <saadc_irq_handler+0xcc>)
   2cb1c:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return NRF_SAADC->RESULT.AMOUNT;
   2cb20:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get() +
   2cb24:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   2cb26:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    NRF_SAADC->RESULT.PTR = (uint32_t)p_buffer;
   2cb2a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->sequence->options->interval_us == 0) {
   2cb2e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   2cb30:	681b      	ldr	r3, [r3, #0]
   2cb32:	681b      	ldr	r3, [r3, #0]
   2cb34:	b923      	cbnz	r3, 2cb40 <saadc_irq_handler+0x74>
}
   2cb36:	b002      	add	sp, #8
   2cb38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				adc_context_start_sampling(ctx);
   2cb3c:	f7ff be04 	b.w	2c748 <adc_context_start_sampling.isra.1>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2cb40:	f3bf 8f5b 	dmb	ish
   2cb44:	e854 3f00 	ldrex	r3, [r4]
   2cb48:	1e5a      	subs	r2, r3, #1
   2cb4a:	e844 2100 	strex	r1, r2, [r4]
   2cb4e:	2900      	cmp	r1, #0
   2cb50:	d1f8      	bne.n	2cb44 <saadc_irq_handler+0x78>
   2cb52:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   2cb56:	2b01      	cmp	r3, #1
   2cb58:	dced      	bgt.n	2cb36 <saadc_irq_handler+0x6a>
   2cb5a:	b002      	add	sp, #8
   2cb5c:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->sequence->options->interval_us != 0) {
   2cb5e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   2cb60:	681b      	ldr	r3, [r3, #0]
   2cb62:	681b      	ldr	r3, [r3, #0]
   2cb64:	b113      	cbz	r3, 2cb6c <saadc_irq_handler+0xa0>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
   2cb66:	480d      	ldr	r0, [pc, #52]	; (2cb9c <saadc_irq_handler+0xd0>)
   2cb68:	f001 ffd6 	bl	2eb18 <_impl_k_timer_stop>
	if (ctx->asynchronous) {
   2cb6c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   2cb70:	b153      	cbz	r3, 2cb88 <saadc_irq_handler+0xbc>
		if (ctx->signal) {
   2cb72:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2cb74:	b110      	cbz	r0, 2cb7c <saadc_irq_handler+0xb0>
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result)
   2cb76:	2100      	movs	r1, #0
   2cb78:	f002 f936 	bl	2ede8 <_impl_k_poll_signal>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2cb7c:	4808      	ldr	r0, [pc, #32]	; (2cba0 <saadc_irq_handler+0xd4>)
   2cb7e:	b002      	add	sp, #8
   2cb80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2cb84:	f001 bb79 	b.w	2e27a <_impl_k_sem_give>
   2cb88:	4806      	ldr	r0, [pc, #24]	; (2cba4 <saadc_irq_handler+0xd8>)
   2cb8a:	e7f8      	b.n	2cb7e <saadc_irq_handler+0xb2>
   2cb8c:	40007104 	.word	0x40007104
   2cb90:	2000e088 	.word	0x2000e088
   2cb94:	40007008 	.word	0x40007008
   2cb98:	40007000 	.word	0x40007000
   2cb9c:	2000e08c 	.word	0x2000e08c
   2cba0:	2000e0b8 	.word	0x2000e0b8
   2cba4:	2000e0d0 	.word	0x2000e0d0

0002cba8 <gpio_nrfx_write>:
	return 0;
}

static int gpio_nrfx_write(struct device *port, int access_op,
			   u32_t pin, u32_t value)
{
   2cba8:	b510      	push	{r4, lr}
	return port->config->config_info;
   2cbaa:	6804      	ldr	r4, [r0, #0]
   2cbac:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cbae:	68a4      	ldr	r4, [r4, #8]
   2cbb0:	69c0      	ldr	r0, [r0, #28]
   2cbb2:	6824      	ldr	r4, [r4, #0]
	struct gpio_nrfx_data *data = get_port_data(port);

	if (access_op == GPIO_ACCESS_BY_PORT) {
   2cbb4:	2901      	cmp	r1, #1
   2cbb6:	d104      	bne.n	2cbc2 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   2cbb8:	4058      	eors	r0, r3
}


__STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    p_reg->OUT = value;
   2cbba:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	return 0;
}
   2cbbe:	2000      	movs	r0, #0
   2cbc0:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   2cbc2:	3300      	adds	r3, #0
   2cbc4:	fa20 f002 	lsr.w	r0, r0, r2
   2cbc8:	f04f 0101 	mov.w	r1, #1
   2cbcc:	bf18      	it	ne
   2cbce:	2301      	movne	r3, #1
   2cbd0:	f000 0001 	and.w	r0, r0, #1
   2cbd4:	4091      	lsls	r1, r2
   2cbd6:	4283      	cmp	r3, r0
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   2cbd8:	bf14      	ite	ne
   2cbda:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   2cbde:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
   2cbe2:	e7ec      	b.n	2cbbe <gpio_nrfx_write+0x16>

0002cbe4 <gpio_nrfx_read>:

static int gpio_nrfx_read(struct device *port, int access_op,
			  u32_t pin, u32_t *value)
{
   2cbe4:	b510      	push	{r4, lr}
	return port->config->config_info;
   2cbe6:	6804      	ldr	r4, [r0, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
	struct gpio_nrfx_data *data = get_port_data(port);

	u32_t port_in = nrf_gpio_port_in_read(reg) ^ data->inverted;
   2cbe8:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cbea:	68a4      	ldr	r4, [r4, #8]
	u32_t port_in = nrf_gpio_port_in_read(reg) ^ data->inverted;
   2cbec:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cbee:	6824      	ldr	r4, [r4, #0]
    return p_reg->IN;
   2cbf0:	f8d4 4510 	ldr.w	r4, [r4, #1296]	; 0x510

	if (access_op == GPIO_ACCESS_BY_PORT) {
   2cbf4:	2901      	cmp	r1, #1
	u32_t port_in = nrf_gpio_port_in_read(reg) ^ data->inverted;
   2cbf6:	ea80 0004 	eor.w	r0, r0, r4
		*value = port_in;
	} else {
		*value = (port_in & BIT(pin)) ? 1 : 0;
   2cbfa:	bf1c      	itt	ne
   2cbfc:	40d0      	lsrne	r0, r2
   2cbfe:	f000 0001 	andne.w	r0, r0, #1
   2cc02:	6018      	str	r0, [r3, #0]
	}

	return 0;
}
   2cc04:	2000      	movs	r0, #0
   2cc06:	bd10      	pop	{r4, pc}

0002cc08 <gpio_nrfx_manage_callback>:

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
	_gpio_manage_callback(&get_port_data(port)->callbacks, callback, set);
   2cc08:	6883      	ldr	r3, [r0, #8]
   2cc0a:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   2cc0c:	b172      	cbz	r2, 2cc2c <gpio_nrfx_manage_callback+0x24>
	parent->next = child;
   2cc0e:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2cc10:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2cc12:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   2cc14:	b902      	cbnz	r2, 2cc18 <gpio_nrfx_manage_callback+0x10>
	list->tail = node;
   2cc16:	6059      	str	r1, [r3, #4]
	return 0;
}
   2cc18:	2000      	movs	r0, #0
   2cc1a:	4770      	bx	lr
	parent->next = child;
   2cc1c:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cc1e:	6858      	ldr	r0, [r3, #4]
   2cc20:	4281      	cmp	r1, r0
	list->tail = node;
   2cc22:	bf08      	it	eq
   2cc24:	605a      	streq	r2, [r3, #4]
   2cc26:	e00d      	b.n	2cc44 <gpio_nrfx_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cc28:	4602      	mov	r2, r0
   2cc2a:	6800      	ldr	r0, [r0, #0]
   2cc2c:	2800      	cmp	r0, #0
   2cc2e:	d0f3      	beq.n	2cc18 <gpio_nrfx_manage_callback+0x10>
   2cc30:	4288      	cmp	r0, r1
   2cc32:	d1f9      	bne.n	2cc28 <gpio_nrfx_manage_callback+0x20>
   2cc34:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cc36:	2a00      	cmp	r2, #0
   2cc38:	d1f0      	bne.n	2cc1c <gpio_nrfx_manage_callback+0x14>
   2cc3a:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2cc3c:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cc3e:	4291      	cmp	r1, r2
   2cc40:	d100      	bne.n	2cc44 <gpio_nrfx_manage_callback+0x3c>
	list->tail = node;
   2cc42:	6058      	str	r0, [r3, #4]
	parent->next = child;
   2cc44:	2300      	movs	r3, #0
   2cc46:	600b      	str	r3, [r1, #0]
   2cc48:	e7e6      	b.n	2cc18 <gpio_nrfx_manage_callback+0x10>
	...

0002cc4c <gpio_nrfx_init>:
		}
	}
}

static int gpio_nrfx_init(struct device *port)
{
   2cc4c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   2cc4e:	4b09      	ldr	r3, [pc, #36]	; (2cc74 <gpio_nrfx_init+0x28>)
   2cc50:	781a      	ldrb	r2, [r3, #0]
   2cc52:	b96a      	cbnz	r2, 2cc70 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   2cc54:	2101      	movs	r1, #1
   2cc56:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(CONFIG_GPIOTE_IRQ, CONFIG_GPIOTE_IRQ_PRI,
   2cc58:	2006      	movs	r0, #6
   2cc5a:	2105      	movs	r1, #5
   2cc5c:	f7d9 fcf2 	bl	6644 <_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(CONFIG_GPIOTE_IRQ);
   2cc60:	2006      	movs	r0, #6
   2cc62:	f7d9 fcbd 	bl	65e0 <_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
   2cc66:	4b04      	ldr	r3, [pc, #16]	; (2cc78 <gpio_nrfx_init+0x2c>)
   2cc68:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2cc6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   2cc70:	2000      	movs	r0, #0
   2cc72:	bd08      	pop	{r3, pc}
   2cc74:	20002f28 	.word	0x20002f28
   2cc78:	40006000 	.word	0x40006000

0002cc7c <check_level_trigger_pins.constprop.11>:
	struct gpio_nrfx_data *data = get_port_data(port);
   2cc7c:	4a0b      	ldr	r2, [pc, #44]	; (2ccac <check_level_trigger_pins.constprop.11+0x30>)
   2cc7e:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   2cc80:	6812      	ldr	r2, [r2, #0]
	u32_t port_in = nrf_gpio_port_in_read(get_port_cfg(port)->port);
   2cc82:	6892      	ldr	r2, [r2, #8]
   2cc84:	6812      	ldr	r2, [r2, #0]
static u32_t check_level_trigger_pins(struct device *port)
   2cc86:	b510      	push	{r4, lr}
   2cc88:	f8d2 4510 	ldr.w	r4, [r2, #1296]	; 0x510
	out &= ~data->trig_edge & ~data->double_edge;
   2cc8c:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   2cc90:	4311      	orrs	r1, r2
   2cc92:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
   2cc96:	4002      	ands	r2, r0
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   2cc98:	69d8      	ldr	r0, [r3, #28]
   2cc9a:	691b      	ldr	r3, [r3, #16]
   2cc9c:	4058      	eors	r0, r3
	out &= ~data->trig_edge & ~data->double_edge;
   2cc9e:	ea22 0201 	bic.w	r2, r2, r1
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   2cca2:	4060      	eors	r0, r4
}
   2cca4:	ea22 0000 	bic.w	r0, r2, r0
   2cca8:	bd10      	pop	{r4, pc}
   2ccaa:	bf00      	nop
   2ccac:	2000e1b4 	.word	0x2000e1b4

0002ccb0 <gpiote_event_handler>:
{
   2ccb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   2ccb2:	4d23      	ldr	r5, [pc, #140]	; (2cd40 <gpiote_event_handler+0x90>)
	if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT)) {
   2ccb4:	682b      	ldr	r3, [r5, #0]
   2ccb6:	2b01      	cmp	r3, #1
   2ccb8:	d133      	bne.n	2cd22 <gpiote_event_handler+0x72>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
   2ccba:	f7ff ffdf 	bl	2cc7c <check_level_trigger_pins.constprop.11>
   2ccbe:	4606      	mov	r6, r0
	u32_t fired_triggers[GPIO_COUNT] = {0};
   2ccc0:	2300      	movs	r3, #0
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
   2ccc2:	4c20      	ldr	r4, [pc, #128]	; (2cd44 <gpiote_event_handler+0x94>)
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
   2ccc4:	2701      	movs	r7, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   2ccc6:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
   2ccc8:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
   2cccc:	fa07 f103 	lsl.w	r1, r7, r3
   2ccd0:	4211      	tst	r1, r2
   2ccd2:	d014      	beq.n	2ccfe <gpiote_event_handler+0x4e>
   2ccd4:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
   2ccd8:	f502 52c2 	add.w	r2, r2, #6208	; 0x1840
   2ccdc:	0092      	lsls	r2, r2, #2
   2ccde:	6811      	ldr	r1, [r2, #0]
   2cce0:	2901      	cmp	r1, #1
   2cce2:	d10c      	bne.n	2ccfe <gpiote_event_handler+0x4e>
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2cce4:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   2cce8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   2ccec:	f8c2 c000 	str.w	ip, [r2]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   2ccf0:	6812      	ldr	r2, [r2, #0]
   2ccf2:	9200      	str	r2, [sp, #0]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2ccf4:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32] |= BIT(abs_pin % 32);
   2ccf8:	4081      	lsls	r1, r0
    (void)dummy;
   2ccfa:	9a00      	ldr	r2, [sp, #0]
   2ccfc:	430e      	orrs	r6, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2ccfe:	3301      	adds	r3, #1
   2cd00:	2b08      	cmp	r3, #8
   2cd02:	d1e1      	bne.n	2ccc8 <gpiote_event_handler+0x18>
	if (fired_triggers[0]) {
   2cd04:	b17e      	cbz	r6, 2cd26 <gpiote_event_handler+0x76>
	_gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
   2cd06:	4f10      	ldr	r7, [pc, #64]	; (2cd48 <gpiote_event_handler+0x98>)
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   2cd08:	68bb      	ldr	r3, [r7, #8]
   2cd0a:	681c      	ldr	r4, [r3, #0]
   2cd0c:	b15c      	cbz	r4, 2cd26 <gpiote_event_handler+0x76>
		if (cb->pin_mask & pins) {
   2cd0e:	68a3      	ldr	r3, [r4, #8]
   2cd10:	421e      	tst	r6, r3
   2cd12:	d004      	beq.n	2cd1e <gpiote_event_handler+0x6e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   2cd14:	6863      	ldr	r3, [r4, #4]
   2cd16:	4632      	mov	r2, r6
   2cd18:	4621      	mov	r1, r4
   2cd1a:	4638      	mov	r0, r7
   2cd1c:	4798      	blx	r3
	return node->next;
   2cd1e:	6824      	ldr	r4, [r4, #0]
   2cd20:	e7f4      	b.n	2cd0c <gpiote_event_handler+0x5c>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   2cd22:	2600      	movs	r6, #0
   2cd24:	e7cc      	b.n	2ccc0 <gpiote_event_handler+0x10>
	if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT)) {
   2cd26:	682b      	ldr	r3, [r5, #0]
   2cd28:	2b01      	cmp	r3, #1
   2cd2a:	d106      	bne.n	2cd3a <gpiote_event_handler+0x8a>
		u32_t active_level_triggers =
   2cd2c:	f7ff ffa6 	bl	2cc7c <check_level_trigger_pins.constprop.11>
		if (active_level_triggers == 0) {
   2cd30:	b918      	cbnz	r0, 2cd3a <gpiote_event_handler+0x8a>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   2cd32:	6028      	str	r0, [r5, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   2cd34:	682b      	ldr	r3, [r5, #0]
   2cd36:	9301      	str	r3, [sp, #4]
    (void)dummy;
   2cd38:	9b01      	ldr	r3, [sp, #4]
}
   2cd3a:	b003      	add	sp, #12
   2cd3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2cd3e:	bf00      	nop
   2cd40:	4000617c 	.word	0x4000617c
   2cd44:	40006000 	.word	0x40006000
   2cd48:	2000e1b4 	.word	0x2000e1b4

0002cd4c <gpiote_pin_int_cfg>:
{
   2cd4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return port->config->config_info;
   2cd4e:	6803      	ldr	r3, [r0, #0]
    return (NRF_GPIOTE->INTENSET & mask);
   2cd50:	4d58      	ldr	r5, [pc, #352]	; (2ceb4 <gpiote_pin_int_cfg+0x168>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2cd52:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
   2cd54:	6884      	ldr	r4, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2cd56:	791a      	ldrb	r2, [r3, #4]
   2cd58:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   2cd5c:	f001 031f 	and.w	r3, r1, #31
   2cd60:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   2cd64:	b2c0      	uxtb	r0, r0
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2cd66:	2200      	movs	r2, #0
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2cd68:	f502 76a2 	add.w	r6, r2, #324	; 0x144
   2cd6c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
   2cd70:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
   2cd74:	42b3      	cmp	r3, r6
   2cd76:	d175      	bne.n	2ce64 <gpiote_pin_int_cfg+0x118>
		    && (intenset & BIT(i))) {
   2cd78:	fa20 f602 	lsr.w	r6, r0, r2
   2cd7c:	07f6      	lsls	r6, r6, #31
   2cd7e:	d571      	bpl.n	2ce64 <gpiote_pin_int_cfg+0x118>
   2cd80:	0090      	lsls	r0, r2, #2
   2cd82:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   2cd86:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   2cd8a:	f8d0 6510 	ldr.w	r6, [r0, #1296]	; 0x510
   2cd8e:	f026 0601 	bic.w	r6, r6, #1
   2cd92:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
   2cd96:	2001      	movs	r0, #1
   2cd98:	fa00 f202 	lsl.w	r2, r0, r2
    NRF_GPIOTE->INTENCLR = mask;
   2cd9c:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
   2cda0:	009a      	lsls	r2, r3, #2
   2cda2:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   2cda6:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
   2cdaa:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
   2cdae:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2cdb2:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
   2cdb6:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   2cdba:	68a0      	ldr	r0, [r4, #8]
   2cdbc:	40c8      	lsrs	r0, r1
   2cdbe:	f010 0001 	ands.w	r0, r0, #1
   2cdc2:	d04d      	beq.n	2ce60 <gpiote_pin_int_cfg+0x114>
   2cdc4:	68e0      	ldr	r0, [r4, #12]
   2cdc6:	40c8      	lsrs	r0, r1
   2cdc8:	f010 0001 	ands.w	r0, r0, #1
   2cdcc:	d048      	beq.n	2ce60 <gpiote_pin_int_cfg+0x114>
		if (data->trig_edge & BIT(pin)) {
   2cdce:	6960      	ldr	r0, [r4, #20]
   2cdd0:	40c8      	lsrs	r0, r1
   2cdd2:	f010 0001 	ands.w	r0, r0, #1
   2cdd6:	d052      	beq.n	2ce7e <gpiote_pin_int_cfg+0x132>
			if (data->double_edge & BIT(pin)) {
   2cdd8:	69a2      	ldr	r2, [r4, #24]
   2cdda:	40ca      	lsrs	r2, r1
   2cddc:	07d2      	lsls	r2, r2, #31
   2cdde:	d446      	bmi.n	2ce6e <gpiote_pin_int_cfg+0x122>
			} else if (((data->active_level & BIT(pin)) != 0)
   2cde0:	6922      	ldr	r2, [r4, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   2cde2:	69e0      	ldr	r0, [r4, #28]
			} else if (((data->active_level & BIT(pin)) != 0)
   2cde4:	40ca      	lsrs	r2, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   2cde6:	fa20 f101 	lsr.w	r1, r0, r1
			} else if (((data->active_level & BIT(pin)) != 0)
   2cdea:	f002 0201 	and.w	r2, r2, #1
   2cdee:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
   2cdf2:	428a      	cmp	r2, r1
   2cdf4:	bf0c      	ite	eq
   2cdf6:	2102      	moveq	r1, #2
   2cdf8:	2101      	movne	r1, #1
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   2cdfa:	4f2e      	ldr	r7, [pc, #184]	; (2ceb4 <gpiote_pin_int_cfg+0x168>)
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   2cdfc:	2500      	movs	r5, #0
   2cdfe:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   2ce02:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
   2ce06:	f010 0003 	ands.w	r0, r0, #3
   2ce0a:	d132      	bne.n	2ce72 <gpiote_pin_int_cfg+0x126>
			nrf_gpiote_events_t evt =
   2ce0c:	00ac      	lsls	r4, r5, #2
   2ce0e:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   2ce12:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2ce16:	021b      	lsls	r3, r3, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2ce18:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
   2ce1c:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   2ce20:	f426 7640 	bic.w	r6, r6, #768	; 0x300
   2ce24:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2ce28:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   2ce2c:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
   2ce30:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    return ((uint32_t)NRF_GPIOTE + event);
   2ce34:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   2ce38:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2ce3c:	4331      	orrs	r1, r6
   2ce3e:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   2ce42:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   2ce44:	681b      	ldr	r3, [r3, #0]
   2ce46:	9301      	str	r3, [sp, #4]
    (void)dummy;
   2ce48:	9b01      	ldr	r3, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2ce4a:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   2ce4e:	f043 0301 	orr.w	r3, r3, #1
   2ce52:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
   2ce56:	2301      	movs	r3, #1
   2ce58:	fa03 f505 	lsl.w	r5, r3, r5
    NRF_GPIOTE->INTENSET = mask;
   2ce5c:	f8c7 5304 	str.w	r5, [r7, #772]	; 0x304
}
   2ce60:	b003      	add	sp, #12
   2ce62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2ce64:	3201      	adds	r2, #1
   2ce66:	2a08      	cmp	r2, #8
   2ce68:	f47f af7e 	bne.w	2cd68 <gpiote_pin_int_cfg+0x1c>
   2ce6c:	e798      	b.n	2cda0 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   2ce6e:	2103      	movs	r1, #3
   2ce70:	e7c3      	b.n	2cdfa <gpiote_pin_int_cfg+0xae>
   2ce72:	3501      	adds	r5, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   2ce74:	2d08      	cmp	r5, #8
   2ce76:	d1c2      	bne.n	2cdfe <gpiote_pin_int_cfg+0xb2>
	return -ENODEV;
   2ce78:	f06f 0012 	mvn.w	r0, #18
   2ce7c:	e7f0      	b.n	2ce60 <gpiote_pin_int_cfg+0x114>
			if (((data->active_level & BIT(pin)) != 0)
   2ce7e:	6923      	ldr	r3, [r4, #16]
			    ^ ((BIT(pin) & data->inverted) != 0)) {
   2ce80:	69e4      	ldr	r4, [r4, #28]
			if (((data->active_level & BIT(pin)) != 0)
   2ce82:	40cb      	lsrs	r3, r1
			    ^ ((BIT(pin) & data->inverted) != 0)) {
   2ce84:	fa24 f101 	lsr.w	r1, r4, r1
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   2ce88:	f8d2 4700 	ldr.w	r4, [r2, #1792]	; 0x700
   2ce8c:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
   2ce90:	f8c2 4700 	str.w	r4, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2ce94:	f8d2 4700 	ldr.w	r4, [r2, #1792]	; 0x700
			if (((data->active_level & BIT(pin)) != 0)
   2ce98:	f003 0301 	and.w	r3, r3, #1
   2ce9c:	f001 0101 	and.w	r1, r1, #1
   2cea0:	428b      	cmp	r3, r1
   2cea2:	bf0c      	ite	eq
   2cea4:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
   2cea8:	f44f 3300 	movne.w	r3, #131072	; 0x20000
   2ceac:	4323      	orrs	r3, r4
   2ceae:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
   2ceb2:	e7d5      	b.n	2ce60 <gpiote_pin_int_cfg+0x114>
   2ceb4:	40006000 	.word	0x40006000

0002ceb8 <gpio_nrfx_config>:
{
   2ceb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cebc:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   2cebe:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2cec0:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   2cec4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   2cec8:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2ceca:	d04a      	beq.n	2cf62 <gpio_nrfx_config+0xaa>
   2cecc:	dc2d      	bgt.n	2cf2a <gpio_nrfx_config+0x72>
   2cece:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   2ced2:	d03e      	beq.n	2cf52 <gpio_nrfx_config+0x9a>
   2ced4:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   2ced8:	d03f      	beq.n	2cf5a <gpio_nrfx_config+0xa2>
   2ceda:	bb68      	cbnz	r0, 2cf38 <gpio_nrfx_config+0x80>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   2cedc:	f406 7740 	and.w	r7, r6, #768	; 0x300
   2cee0:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   2cee4:	d03f      	beq.n	2cf66 <gpio_nrfx_config+0xae>
		pull = NRF_GPIO_PIN_PULLUP;
   2cee6:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   2ceea:	4263      	negs	r3, r4
   2ceec:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   2ceee:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   2cef2:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2cef6:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   2cef8:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
   2cefc:	bf18      	it	ne
   2cefe:	b2d4      	uxtbne	r4, r2
   2cf00:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
   2cf04:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
   2cf08:	bf12      	itee	ne
   2cf0a:	46a1      	movne	r9, r4
		to_pin   = 31;
   2cf0c:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0;
   2cf10:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2cf12:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
   2cf16:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   2cf1a:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2cf1e:	45a1      	cmp	r9, r4
   2cf20:	d223      	bcs.n	2cf6a <gpio_nrfx_config+0xb2>
	return 0;
   2cf22:	2000      	movs	r0, #0
}
   2cf24:	b003      	add	sp, #12
   2cf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2cf2a:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   2cf2e:	d016      	beq.n	2cf5e <gpio_nrfx_config+0xa6>
   2cf30:	dc05      	bgt.n	2cf3e <gpio_nrfx_config+0x86>
   2cf32:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   2cf36:	d00e      	beq.n	2cf56 <gpio_nrfx_config+0x9e>
		return -EINVAL;
   2cf38:	f06f 0015 	mvn.w	r0, #21
   2cf3c:	e7f2      	b.n	2cf24 <gpio_nrfx_config+0x6c>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2cf3e:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   2cf42:	d004      	beq.n	2cf4e <gpio_nrfx_config+0x96>
   2cf44:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   2cf48:	d1f6      	bne.n	2cf38 <gpio_nrfx_config+0x80>
		drive = NRF_GPIO_PIN_H0D1;
   2cf4a:	2007      	movs	r0, #7
		break;
   2cf4c:	e7c6      	b.n	2cedc <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
   2cf4e:	2006      	movs	r0, #6
		break;
   2cf50:	e7c4      	b.n	2cedc <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
   2cf52:	2001      	movs	r0, #1
		break;
   2cf54:	e7c2      	b.n	2cedc <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   2cf56:	2003      	movs	r0, #3
		break;
   2cf58:	e7c0      	b.n	2cedc <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
   2cf5a:	2004      	movs	r0, #4
		break;
   2cf5c:	e7be      	b.n	2cedc <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
   2cf5e:	2005      	movs	r0, #5
		break;
   2cf60:	e7bc      	b.n	2cedc <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
   2cf62:	2002      	movs	r0, #2
   2cf64:	e7ba      	b.n	2cedc <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
   2cf66:	2303      	movs	r3, #3
   2cf68:	e7c1      	b.n	2ceee <gpio_nrfx_config+0x36>
	return port->config->config_info;
   2cf6a:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   2cf6e:	6892      	ldr	r2, [r2, #8]
   2cf70:	7911      	ldrb	r1, [r2, #4]
   2cf72:	f004 021f 	and.w	r2, r4, #31
   2cf76:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   2cf7a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   2cf7e:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
   2cf82:	fa0b f204 	lsl.w	r2, fp, r4
   2cf86:	68a9      	ldr	r1, [r5, #8]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   2cf88:	2b00      	cmp	r3, #0
   2cf8a:	d025      	beq.n	2cfd8 <gpio_nrfx_config+0x120>
   2cf8c:	4311      	orrs	r1, r2
   2cf8e:	60a9      	str	r1, [r5, #8]
   2cf90:	6969      	ldr	r1, [r5, #20]
   2cf92:	9301      	str	r3, [sp, #4]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   2cf94:	06b0      	lsls	r0, r6, #26
   2cf96:	bf4c      	ite	mi
   2cf98:	4311      	orrmi	r1, r2
   2cf9a:	4391      	bicpl	r1, r2
   2cf9c:	6169      	str	r1, [r5, #20]
   2cf9e:	69a9      	ldr	r1, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
   2cfa0:	0670      	lsls	r0, r6, #25
   2cfa2:	bf4c      	ite	mi
   2cfa4:	4311      	orrmi	r1, r2
   2cfa6:	4391      	bicpl	r1, r2
   2cfa8:	61a9      	str	r1, [r5, #24]
   2cfaa:	6929      	ldr	r1, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
   2cfac:	0770      	lsls	r0, r6, #29
   2cfae:	bf4c      	ite	mi
   2cfb0:	4311      	orrmi	r1, r2
   2cfb2:	4391      	bicpl	r1, r2
   2cfb4:	6129      	str	r1, [r5, #16]
   2cfb6:	69e9      	ldr	r1, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   2cfb8:	0630      	lsls	r0, r6, #24
   2cfba:	bf4c      	ite	mi
   2cfbc:	430a      	orrmi	r2, r1
   2cfbe:	ea21 0202 	bicpl.w	r2, r1, r2
   2cfc2:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2cfc4:	4621      	mov	r1, r4
   2cfc6:	4640      	mov	r0, r8
   2cfc8:	f7ff fec0 	bl	2cd4c <gpiote_pin_int_cfg>
		if (res != 0) {
   2cfcc:	2800      	cmp	r0, #0
   2cfce:	d1a9      	bne.n	2cf24 <gpio_nrfx_config+0x6c>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2cfd0:	3401      	adds	r4, #1
   2cfd2:	b2e4      	uxtb	r4, r4
   2cfd4:	9b01      	ldr	r3, [sp, #4]
   2cfd6:	e7a2      	b.n	2cf1e <gpio_nrfx_config+0x66>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   2cfd8:	ea21 0102 	bic.w	r1, r1, r2
   2cfdc:	e7d7      	b.n	2cf8e <gpio_nrfx_config+0xd6>

0002cfde <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2cfde:	2901      	cmp	r1, #1
{
   2cfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   2cfe4:	bf18      	it	ne
   2cfe6:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   2cfe8:	6887      	ldr	r7, [r0, #8]
{
   2cfea:	4606      	mov	r6, r0
		to_pin   = pin;
   2cfec:	bf12      	itee	ne
   2cfee:	4625      	movne	r5, r4
		to_pin   = 31;
   2cff0:	251f      	moveq	r5, #31
		from_pin = 0;
   2cff2:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   2cff4:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2cff8:	42ac      	cmp	r4, r5
   2cffa:	d902      	bls.n	2d002 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   2cffc:	2000      	movs	r0, #0
}
   2cffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   2d002:	68fb      	ldr	r3, [r7, #12]
   2d004:	fa08 f204 	lsl.w	r2, r8, r4
   2d008:	ea23 0302 	bic.w	r3, r3, r2
   2d00c:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2d00e:	4621      	mov	r1, r4
   2d010:	4630      	mov	r0, r6
   2d012:	f7ff fe9b 	bl	2cd4c <gpiote_pin_int_cfg>
		if (res != 0) {
   2d016:	2800      	cmp	r0, #0
   2d018:	d1f1      	bne.n	2cffe <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2d01a:	3401      	adds	r4, #1
   2d01c:	b2e4      	uxtb	r4, r4
   2d01e:	e7eb      	b.n	2cff8 <gpio_nrfx_pin_disable_callback+0x1a>

0002d020 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2d020:	2901      	cmp	r1, #1
{
   2d022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   2d026:	bf18      	it	ne
   2d028:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   2d02a:	6887      	ldr	r7, [r0, #8]
{
   2d02c:	4606      	mov	r6, r0
		to_pin   = pin;
   2d02e:	bf12      	itee	ne
   2d030:	4625      	movne	r5, r4
		to_pin   = 31;
   2d032:	251f      	moveq	r5, #31
		from_pin = 0;
   2d034:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   2d036:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2d03a:	42ac      	cmp	r4, r5
   2d03c:	d902      	bls.n	2d044 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   2d03e:	2000      	movs	r0, #0
}
   2d040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   2d044:	68fb      	ldr	r3, [r7, #12]
   2d046:	fa08 f204 	lsl.w	r2, r8, r4
   2d04a:	4313      	orrs	r3, r2
   2d04c:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2d04e:	4621      	mov	r1, r4
   2d050:	4630      	mov	r0, r6
   2d052:	f7ff fe7b 	bl	2cd4c <gpiote_pin_int_cfg>
		if (res != 0) {
   2d056:	2800      	cmp	r0, #0
   2d058:	d1f2      	bne.n	2d040 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2d05a:	3401      	adds	r4, #1
   2d05c:	b2e4      	uxtb	r4, r4
   2d05e:	e7ec      	b.n	2d03a <gpio_nrfx_pin_enable_callback+0x1a>

0002d060 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d060:	4b03      	ldr	r3, [pc, #12]	; (2d070 <uart_nrfx_err_check+0x10>)
   2d062:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
   2d064:	b118      	cbz	r0, 2d06e <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2d066:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   2d06a:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
	}

	return error;
}
   2d06e:	4770      	bx	lr
   2d070:	40002124 	.word	0x40002124

0002d074 <uart_nrfx_init>:
    p_reg->OUTSET = set_mask;
   2d074:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2d078:	2240      	movs	r2, #64	; 0x40
   2d07a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2d07e:	2000      	movs	r0, #0
   2d080:	2203      	movs	r2, #3
   2d082:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
   2d086:	f8c3 0720 	str.w	r0, [r3, #1824]	; 0x720
__STATIC_INLINE void nrf_uart_txrx_pins_set(NRF_UART_Type * p_reg, uint32_t pseltxd, uint32_t pselrxd)
{
#if defined(UART_PSEL_RXD_CONNECT_Pos)
    p_reg->PSEL.RXD = pselrxd;
#else
    p_reg->PSELRXD = pselrxd;
   2d08a:	4b0c      	ldr	r3, [pc, #48]	; (2d0bc <uart_nrfx_init+0x48>)
   2d08c:	2208      	movs	r2, #8
   2d08e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
#endif
#if defined(UART_PSEL_TXD_CONNECT_Pos)
    p_reg->PSEL.TXD = pseltxd;
#else
    p_reg->PSELTXD = pseltxd;
   2d092:	2206      	movs	r2, #6
   2d094:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   2d098:	4a09      	ldr	r2, [pc, #36]	; (2d0c0 <uart_nrfx_init+0x4c>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   2d09a:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   2d09e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   2d0a2:	2204      	movs	r2, #4
   2d0a4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d0a8:	4a06      	ldr	r2, [pc, #24]	; (2d0c4 <uart_nrfx_init+0x50>)
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   2d0aa:	b082      	sub	sp, #8
   2d0ac:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   2d0ae:	6812      	ldr	r2, [r2, #0]
   2d0b0:	9201      	str	r2, [sp, #4]
    (void)dummy;
   2d0b2:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d0b4:	2201      	movs	r2, #1
   2d0b6:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(CONFIG_UART_0_IRQ_NUM);
#endif

	return 0;
}
   2d0b8:	b002      	add	sp, #8
   2d0ba:	4770      	bx	lr
   2d0bc:	40002000 	.word	0x40002000
   2d0c0:	01d7e000 	.word	0x01d7e000
   2d0c4:	40002108 	.word	0x40002108

0002d0c8 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d0c8:	4b0a      	ldr	r3, [pc, #40]	; (2d0f4 <uart_nrfx_poll_out+0x2c>)
   2d0ca:	2200      	movs	r2, #0
   2d0cc:	601a      	str	r2, [r3, #0]
{
   2d0ce:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   2d0d0:	681a      	ldr	r2, [r3, #0]
   2d0d2:	9201      	str	r2, [sp, #4]
    (void)dummy;
   2d0d4:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d0d6:	4a08      	ldr	r2, [pc, #32]	; (2d0f8 <uart_nrfx_poll_out+0x30>)
   2d0d8:	2001      	movs	r0, #1
   2d0da:	6010      	str	r0, [r2, #0]
    p_reg->TXD = txd;
   2d0dc:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d0e0:	681a      	ldr	r2, [r3, #0]
	while (!event_txdrdy_check()) {
   2d0e2:	2a00      	cmp	r2, #0
   2d0e4:	d0fc      	beq.n	2d0e0 <uart_nrfx_poll_out+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d0e6:	4b05      	ldr	r3, [pc, #20]	; (2d0fc <uart_nrfx_poll_out+0x34>)
   2d0e8:	2201      	movs	r2, #1
}
   2d0ea:	4608      	mov	r0, r1
   2d0ec:	601a      	str	r2, [r3, #0]
   2d0ee:	b002      	add	sp, #8
   2d0f0:	4770      	bx	lr
   2d0f2:	bf00      	nop
   2d0f4:	4000211c 	.word	0x4000211c
   2d0f8:	40002008 	.word	0x40002008
   2d0fc:	4000200c 	.word	0x4000200c

0002d100 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d100:	4b08      	ldr	r3, [pc, #32]	; (2d124 <uart_nrfx_poll_in+0x24>)
   2d102:	681a      	ldr	r2, [r3, #0]
{
   2d104:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   2d106:	b152      	cbz	r2, 2d11e <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d108:	2000      	movs	r0, #0
   2d10a:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   2d10c:	681b      	ldr	r3, [r3, #0]
   2d10e:	9301      	str	r3, [sp, #4]
    (void)dummy;
   2d110:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   2d112:	4b05      	ldr	r3, [pc, #20]	; (2d128 <uart_nrfx_poll_in+0x28>)
   2d114:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   2d118:	700b      	strb	r3, [r1, #0]
}
   2d11a:	b002      	add	sp, #8
   2d11c:	4770      	bx	lr
		return -1;
   2d11e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d122:	e7fa      	b.n	2d11a <uart_nrfx_poll_in+0x1a>
   2d124:	40002108 	.word	0x40002108
   2d128:	40002000 	.word	0x40002000

0002d12c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
   2d12c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t last  = rngp->last;
   2d12e:	7883      	ldrb	r3, [r0, #2]
	u32_t mask  = rngp->mask;
   2d130:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   2d132:	f04f 0420 	mov.w	r4, #32
   2d136:	f3ef 8e11 	mrs	lr, BASEPRI
   2d13a:	f384 8811 	msr	BASEPRI, r4
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   2d13e:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   2d140:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
   2d144:	1b9b      	subs	r3, r3, r6
   2d146:	403b      	ands	r3, r7
	if (available < len) {
   2d148:	429a      	cmp	r2, r3
		len = available;
   2d14a:	bf88      	it	hi
   2d14c:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   2d14e:	18b4      	adds	r4, r6, r2
   2d150:	403c      	ands	r4, r7
	first = rngp->first_alloc;
   2d152:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   2d154:	7004      	strb	r4, [r0, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2d156:	f38e 8811 	msr	BASEPRI, lr
   2d15a:	440a      	add	r2, r1
	u8_t *dst   = buf;
   2d15c:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
   2d15e:	42a2      	cmp	r2, r4
   2d160:	d116      	bne.n	2d190 <rng_pool_get+0x64>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   2d162:	4566      	cmp	r6, ip
   2d164:	d109      	bne.n	2d17a <rng_pool_get+0x4e>
	__asm__ volatile(
   2d166:	f04f 0520 	mov.w	r5, #32
   2d16a:	f3ef 8211 	mrs	r2, BASEPRI
   2d16e:	f385 8811 	msr	BASEPRI, r5
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   2d172:	7805      	ldrb	r5, [r0, #0]
   2d174:	7045      	strb	r5, [r0, #1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2d176:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(key);
	}

	len = dst - buf;
   2d17a:	1a64      	subs	r4, r4, r1
   2d17c:	b2a2      	uxth	r2, r4
	available = available - len;
	if (available <= rngp->threshold) {
   2d17e:	7901      	ldrb	r1, [r0, #4]
	available = available - len;
   2d180:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
   2d182:	42a1      	cmp	r1, r4
    return (uint32_t *)((uint8_t *)NRF_RNG + rng_task);
}

__STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
   2d184:	bf22      	ittt	cs
   2d186:	4b07      	ldrcs	r3, [pc, #28]	; (2d1a4 <rng_pool_get+0x78>)
   2d188:	2101      	movcs	r1, #1
   2d18a:	6019      	strcs	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG_TASK_START);
	}

	return len;
}
   2d18c:	4610      	mov	r0, r2
   2d18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   2d190:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
   2d194:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   2d196:	f89e e005 	ldrb.w	lr, [lr, #5]
   2d19a:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
   2d19e:	403d      	ands	r5, r7
   2d1a0:	e7dd      	b.n	2d15e <rng_pool_get+0x32>
   2d1a2:	bf00      	nop
   2d1a4:	4000d000 	.word	0x4000d000

0002d1a8 <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
   2d1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2d1ac:	4d11      	ldr	r5, [pc, #68]	; (2d1f4 <entropy_nrf5_get_entropy+0x4c>)
   2d1ae:	460e      	mov	r6, r1
   2d1b0:	4614      	mov	r4, r2

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2d1b2:	f105 0845 	add.w	r8, r5, #69	; 0x45
   2d1b6:	f105 0918 	add.w	r9, r5, #24
	while (len) {
   2d1ba:	b914      	cbnz	r4, 2d1c2 <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
   2d1bc:	4620      	mov	r0, r4
   2d1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2d1c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2d1c6:	4628      	mov	r0, r5
   2d1c8:	f001 f87e 	bl	2e2c8 <_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2d1cc:	4622      	mov	r2, r4
   2d1ce:	4631      	mov	r1, r6
   2d1d0:	4640      	mov	r0, r8
   2d1d2:	f7ff ffab 	bl	2d12c <rng_pool_get>
   2d1d6:	4607      	mov	r7, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2d1d8:	4628      	mov	r0, r5
   2d1da:	f001 f84e 	bl	2e27a <_impl_k_sem_give>
		if (bytes == 0) {
   2d1de:	b92f      	cbnz	r7, 2d1ec <entropy_nrf5_get_entropy+0x44>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2d1e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2d1e4:	4648      	mov	r0, r9
   2d1e6:	f001 f86f 	bl	2e2c8 <_impl_k_sem_take>
			continue;
   2d1ea:	e7e6      	b.n	2d1ba <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   2d1ec:	1be4      	subs	r4, r4, r7
   2d1ee:	b2a4      	uxth	r4, r4
		buf += bytes;
   2d1f0:	443e      	add	r6, r7
   2d1f2:	e7e2      	b.n	2d1ba <entropy_nrf5_get_entropy+0x12>
   2d1f4:	20002f4c 	.word	0x20002f4c

0002d1f8 <random_byte_get>:
{
   2d1f8:	b082      	sub	sp, #8
	__asm__ volatile(
   2d1fa:	f04f 0320 	mov.w	r3, #32
   2d1fe:	f3ef 8211 	mrs	r2, BASEPRI
   2d202:	f383 8811 	msr	BASEPRI, r3
#endif
}

__STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   2d206:	4b09      	ldr	r3, [pc, #36]	; (2d22c <random_byte_get+0x34>)
   2d208:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   2d20a:	b161      	cbz	r1, 2d226 <random_byte_get+0x2e>
     NRF_RNG->SHORTS &= ~rng_short_mask;
}

__STATIC_INLINE uint8_t nrf_rng_random_value_get(void)
{
    return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
   2d20c:	4908      	ldr	r1, [pc, #32]	; (2d230 <random_byte_get+0x38>)
   2d20e:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
   2d212:	2100      	movs	r1, #0
   2d214:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   2d216:	681b      	ldr	r3, [r3, #0]
   2d218:	9301      	str	r3, [sp, #4]
    (void)dummy;
   2d21a:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get();
   2d21c:	b2c0      	uxtb	r0, r0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2d21e:	f382 8811 	msr	BASEPRI, r2
}
   2d222:	b002      	add	sp, #8
   2d224:	4770      	bx	lr
	int retval = -EAGAIN;
   2d226:	f06f 000a 	mvn.w	r0, #10
   2d22a:	e7f8      	b.n	2d21e <random_byte_get+0x26>
   2d22c:	4000d100 	.word	0x4000d100
   2d230:	4000d000 	.word	0x4000d000

0002d234 <entropy_nrf5_get_entropy_isr>:
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   2d234:	07db      	lsls	r3, r3, #31
{
   2d236:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2d23a:	4688      	mov	r8, r1
   2d23c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   2d23e:	d405      	bmi.n	2d24c <entropy_nrf5_get_entropy_isr+0x18>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   2d240:	481d      	ldr	r0, [pc, #116]	; (2d2b8 <entropy_nrf5_get_entropy_isr+0x84>)
   2d242:	f7ff ff73 	bl	2d12c <rng_pool_get>
			irq_enable(RNG_IRQn);
		}
	}

	return cnt;
}
   2d246:	b002      	add	sp, #8
   2d248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   2d24c:	b372      	cbz	r2, 2d2ac <entropy_nrf5_get_entropy_isr+0x78>
	__asm__ volatile(
   2d24e:	f04f 0320 	mov.w	r3, #32
   2d252:	f3ef 8511 	mrs	r5, BASEPRI
   2d256:	f383 8811 	msr	BASEPRI, r3
		irq_enabled = irq_is_enabled(RNG_IRQn);
   2d25a:	200d      	movs	r0, #13
   2d25c:	f7d9 f9e4 	bl	6628 <_arch_irq_is_enabled>
   2d260:	4607      	mov	r7, r0
		irq_disable(RNG_IRQn);
   2d262:	200d      	movs	r0, #13
   2d264:	f7d9 f9cc 	bl	6600 <_arch_irq_disable>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2d268:	f385 8811 	msr	BASEPRI, r5
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
   2d26c:	4e13      	ldr	r6, [pc, #76]	; (2d2bc <entropy_nrf5_get_entropy_isr+0x88>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2d26e:	f8df 9054 	ldr.w	r9, [pc, #84]	; 2d2c4 <entropy_nrf5_get_entropy_isr+0x90>
   2d272:	2200      	movs	r2, #0
   2d274:	6032      	str	r2, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   2d276:	6832      	ldr	r2, [r6, #0]
   2d278:	9201      	str	r2, [sp, #4]
    (void)dummy;
   2d27a:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
   2d27c:	4a10      	ldr	r2, [pc, #64]	; (2d2c0 <entropy_nrf5_get_entropy_isr+0x8c>)
   2d27e:	2101      	movs	r1, #1
   2d280:	6011      	str	r1, [r2, #0]
   2d282:	4625      	mov	r5, r4
   2d284:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   2d288:	6833      	ldr	r3, [r6, #0]
			while (!nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   2d28a:	b18b      	cbz	r3, 2d2b0 <entropy_nrf5_get_entropy_isr+0x7c>
			byte = random_byte_get();
   2d28c:	f7ff ffb4 	bl	2d1f8 <random_byte_get>
			if (byte < 0) {
   2d290:	2800      	cmp	r0, #0
   2d292:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   2d296:	dbf7      	blt.n	2d288 <entropy_nrf5_get_entropy_isr+0x54>
   2d298:	3d01      	subs	r5, #1
   2d29a:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   2d29c:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
   2d2a0:	2d00      	cmp	r5, #0
   2d2a2:	d1f1      	bne.n	2d288 <entropy_nrf5_get_entropy_isr+0x54>
		if (irq_enabled) {
   2d2a4:	b117      	cbz	r7, 2d2ac <entropy_nrf5_get_entropy_isr+0x78>
			irq_enable(RNG_IRQn);
   2d2a6:	200d      	movs	r0, #13
   2d2a8:	f7d9 f99a 	bl	65e0 <_arch_irq_enable>
	return cnt;
   2d2ac:	4620      	mov	r0, r4
   2d2ae:	e7ca      	b.n	2d246 <entropy_nrf5_get_entropy_isr+0x12>
				__WFE();
   2d2b0:	bf20      	wfe
				__SEV();
   2d2b2:	bf40      	sev
				__WFE();
   2d2b4:	bf20      	wfe
   2d2b6:	e7e7      	b.n	2d288 <entropy_nrf5_get_entropy_isr+0x54>
   2d2b8:	20002f7c 	.word	0x20002f7c
   2d2bc:	4000d100 	.word	0x4000d100
   2d2c0:	4000d000 	.word	0x4000d000
   2d2c4:	e000e100 	.word	0xe000e100

0002d2c8 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   2d2c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   2d2ca:	4c1d      	ldr	r4, [pc, #116]	; (2d340 <entropy_nrf5_init+0x78>)
   2d2cc:	2201      	movs	r2, #1
   2d2ce:	4611      	mov	r1, r2
   2d2d0:	4620      	mov	r0, r4
   2d2d2:	f000 ffc9 	bl	2e268 <_impl_k_sem_init>
   2d2d6:	f104 0018 	add.w	r0, r4, #24
   2d2da:	2201      	movs	r2, #1
   2d2dc:	2100      	movs	r1, #0
   2d2de:	f000 ffc3 	bl	2e268 <_impl_k_sem_init>
	rngp->mask	  = size - 1;
   2d2e2:	2307      	movs	r3, #7
   2d2e4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	rngp->threshold	  = threshold;
   2d2e8:	2304      	movs	r3, #4
   2d2ea:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	rngp->first_alloc = 0;
   2d2ee:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2d2f2:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->mask	  = size - 1;
   2d2f4:	230c      	movs	r3, #12
   2d2f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0;
   2d2fa:	2500      	movs	r5, #0
}

__STATIC_INLINE void nrf_rng_error_correction_enable(void)
{
    NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   2d2fc:	4b11      	ldr	r3, [pc, #68]	; (2d344 <entropy_nrf5_init+0x7c>)
   2d2fe:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0;
   2d302:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	rngp->last	  = 0;
   2d306:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
   2d30a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   2d30e:	f042 0201 	orr.w	r2, r2, #1
   2d312:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
   2d316:	4a0c      	ldr	r2, [pc, #48]	; (2d348 <entropy_nrf5_init+0x80>)
   2d318:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   2d31a:	6812      	ldr	r2, [r2, #0]
   2d31c:	9201      	str	r2, [sp, #4]
    (void)dummy;
   2d31e:	9a01      	ldr	r2, [sp, #4]
    NRF_RNG->INTENSET = rng_int_mask;
   2d320:	2201      	movs	r2, #1
   2d322:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG_TASK_START);

	IRQ_CONNECT(RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr,
   2d326:	2105      	movs	r1, #5
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
   2d328:	601a      	str	r2, [r3, #0]
   2d32a:	200d      	movs	r0, #13
   2d32c:	462a      	mov	r2, r5
   2d32e:	f7d9 f989 	bl	6644 <_irq_priority_set>
		    &entropy_nrf5_data, 0);
	irq_enable(RNG_IRQn);
   2d332:	200d      	movs	r0, #13
   2d334:	f7d9 f954 	bl	65e0 <_arch_irq_enable>

	return 0;
}
   2d338:	4628      	mov	r0, r5
   2d33a:	b003      	add	sp, #12
   2d33c:	bd30      	pop	{r4, r5, pc}
   2d33e:	bf00      	nop
   2d340:	20002f4c 	.word	0x20002f4c
   2d344:	4000d000 	.word	0x4000d000
   2d348:	4000d100 	.word	0x4000d100

0002d34c <isr>:
{
   2d34c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   2d34e:	f7ff ff53 	bl	2d1f8 <random_byte_get>
	if (byte < 0) {
   2d352:	2800      	cmp	r0, #0
   2d354:	db20      	blt.n	2d398 <isr+0x4c>
	u8_t last  = rngp->last;
   2d356:	4b17      	ldr	r3, [pc, #92]	; (2d3b4 <isr+0x68>)
   2d358:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   2d35c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	u8_t mask  = rngp->mask;
   2d360:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   2d364:	1a51      	subs	r1, r2, r1
   2d366:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   2d36a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   2d36c:	d10d      	bne.n	2d38a <isr+0x3e>
	u8_t last  = rngp->last;
   2d36e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   2d372:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	u8_t mask  = rngp->mask;
   2d376:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   2d37a:	1a51      	subs	r1, r2, r1
   2d37c:	ea34 0101 	bics.w	r1, r4, r1
   2d380:	d10b      	bne.n	2d39a <isr+0x4e>
   2d382:	4b0d      	ldr	r3, [pc, #52]	; (2d3b8 <isr+0x6c>)
   2d384:	2201      	movs	r2, #1
   2d386:	601a      	str	r2, [r3, #0]
   2d388:	e00e      	b.n	2d3a8 <isr+0x5c>
	rngp->buffer[last] = byte;
   2d38a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   2d38c:	3201      	adds	r2, #1
   2d38e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   2d390:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   2d394:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   2d398:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   2d39a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   2d39c:	3201      	adds	r2, #1
   2d39e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   2d3a0:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   2d3a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2d3a8:	4804      	ldr	r0, [pc, #16]	; (2d3bc <isr+0x70>)
}
   2d3aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d3ae:	f000 bf64 	b.w	2e27a <_impl_k_sem_give>
   2d3b2:	bf00      	nop
   2d3b4:	20002f4c 	.word	0x20002f4c
   2d3b8:	4000d004 	.word	0x4000d004
   2d3bc:	20002f64 	.word	0x20002f64

0002d3c0 <_alert_deliver>:
SYS_INIT(init_alert_module, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

#endif /* CONFIG_OBJECT_TRACING */

void _alert_deliver(struct k_work *work)
{
   2d3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d3c2:	4604      	mov	r4, r0
	struct k_alert *alert = CONTAINER_OF(work, struct k_alert, work_item);
   2d3c4:	f1a0 0608 	sub.w	r6, r0, #8
	while (true) {
		if ((alert->handler)(alert) == 0) {
			/* do nothing -- handler has processed the alert */
		} else {
			/* pend the alert */
			k_sem_give(&alert->sem);
   2d3c8:	f100 070c 	add.w	r7, r0, #12
   2d3cc:	1f05      	subs	r5, r0, #4
		if ((alert->handler)(alert) == 0) {
   2d3ce:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2d3d2:	4630      	mov	r0, r6
   2d3d4:	4798      	blx	r3
   2d3d6:	b110      	cbz	r0, 2d3de <_alert_deliver+0x1e>
   2d3d8:	4638      	mov	r0, r7
   2d3da:	f000 ff4e 	bl	2e27a <_impl_k_sem_give>
   2d3de:	f3bf 8f5b 	dmb	ish
   2d3e2:	e855 3f00 	ldrex	r3, [r5]
   2d3e6:	1e5a      	subs	r2, r3, #1
   2d3e8:	e845 2100 	strex	r1, r2, [r5]
   2d3ec:	2900      	cmp	r1, #0
   2d3ee:	d1f8      	bne.n	2d3e2 <_alert_deliver+0x22>
   2d3f0:	f3bf 8f5b 	dmb	ish
		}
		if (atomic_dec(&alert->send_count) == 1) {
   2d3f4:	2b01      	cmp	r3, #1
   2d3f6:	d1ea      	bne.n	2d3ce <_alert_deliver+0xe>
			/* have finished delivering alerts */
			break;
		}
	}
}
   2d3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0002d3fc <_impl_k_alert_send>:
	_k_object_init(alert);
}

void _impl_k_alert_send(struct k_alert *alert)
{
	if (alert->handler == K_ALERT_IGNORE) {
   2d3fc:	6803      	ldr	r3, [r0, #0]
   2d3fe:	1c5a      	adds	r2, r3, #1
   2d400:	d027      	beq.n	2d452 <_impl_k_alert_send+0x56>
		/* ignore the alert */
	} else if (alert->handler == K_ALERT_DEFAULT) {
   2d402:	b913      	cbnz	r3, 2d40a <_impl_k_alert_send+0xe>
   2d404:	3014      	adds	r0, #20
   2d406:	f000 bf38 	b.w	2e27a <_impl_k_sem_give>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2d40a:	1d03      	adds	r3, r0, #4
   2d40c:	f3bf 8f5b 	dmb	ish
   2d410:	e853 2f00 	ldrex	r2, [r3]
   2d414:	1c51      	adds	r1, r2, #1
   2d416:	e843 1c00 	strex	ip, r1, [r3]
   2d41a:	f1bc 0f00 	cmp.w	ip, #0
   2d41e:	d1f7      	bne.n	2d410 <_impl_k_alert_send+0x14>
   2d420:	f3bf 8f5b 	dmb	ish
		/* pend the alert */
		k_sem_give(&alert->sem);
	} else {
		/* deliver the alert */
		if (atomic_inc(&alert->send_count) == 0) {
   2d424:	b9aa      	cbnz	r2, 2d452 <_impl_k_alert_send+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d426:	f3bf 8f5b 	dmb	ish
   2d42a:	f100 0310 	add.w	r3, r0, #16
   2d42e:	e853 2f00 	ldrex	r2, [r3]
   2d432:	f042 0101 	orr.w	r1, r2, #1
   2d436:	e843 1c00 	strex	ip, r1, [r3]
   2d43a:	f1bc 0f00 	cmp.w	ip, #0
   2d43e:	d1f6      	bne.n	2d42e <_impl_k_alert_send+0x32>
   2d440:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2d444:	07d3      	lsls	r3, r2, #31
   2d446:	d404      	bmi.n	2d452 <_impl_k_alert_send+0x56>
		k_queue_append(&work_q->queue, work);
   2d448:	f100 0108 	add.w	r1, r0, #8
   2d44c:	4801      	ldr	r0, [pc, #4]	; (2d454 <_impl_k_alert_send+0x58>)
   2d44e:	f000 bbf5 	b.w	2dc3c <k_queue_append>
			/* add alert's work item to system work queue */
			k_work_submit_to_queue(&k_sys_work_q,
					       &alert->work_item);
		}
	}
}
   2d452:	4770      	bx	lr
   2d454:	200037b0 	.word	0x200037b0

0002d458 <_impl_k_alert_recv>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2d458:	3014      	adds	r0, #20
   2d45a:	f000 bf35 	b.w	2e2c8 <_impl_k_sem_take>
	...

0002d460 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(s32_t level)
{
   2d460:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   2d462:	4b08      	ldr	r3, [pc, #32]	; (2d484 <_sys_device_do_config_level+0x24>)
   2d464:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2d468:	3001      	adds	r0, #1
   2d46a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   2d46e:	4620      	mov	r0, r4
   2d470:	4285      	cmp	r5, r0
   2d472:	f104 040c 	add.w	r4, r4, #12
   2d476:	d800      	bhi.n	2d47a <_sys_device_do_config_level+0x1a>
		struct device_config *device_conf = info->config;

		(void)device_conf->init(info);
		_k_object_init(info);
	}
}
   2d478:	bd38      	pop	{r3, r4, r5, pc}
		(void)device_conf->init(info);
   2d47a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   2d47e:	685b      	ldr	r3, [r3, #4]
   2d480:	4798      	blx	r3
   2d482:	e7f4      	b.n	2d46e <_sys_device_do_config_level+0xe>
   2d484:	000376bc 	.word	0x000376bc

0002d488 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   2d488:	4b10      	ldr	r3, [pc, #64]	; (2d4cc <device_get_binding+0x44>)
{
   2d48a:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   2d48c:	4c10      	ldr	r4, [pc, #64]	; (2d4d0 <device_get_binding+0x48>)
{
   2d48e:	4605      	mov	r5, r0
   2d490:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   2d492:	429c      	cmp	r4, r3
   2d494:	d104      	bne.n	2d4a0 <device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   2d496:	4c0e      	ldr	r4, [pc, #56]	; (2d4d0 <device_get_binding+0x48>)
   2d498:	42b4      	cmp	r4, r6
   2d49a:	d109      	bne.n	2d4b0 <device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   2d49c:	2400      	movs	r4, #0
   2d49e:	e012      	b.n	2d4c6 <device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   2d4a0:	6862      	ldr	r2, [r4, #4]
   2d4a2:	b11a      	cbz	r2, 2d4ac <device_get_binding+0x24>
		    (info->config->name == name)) {
   2d4a4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   2d4a6:	6812      	ldr	r2, [r2, #0]
   2d4a8:	42aa      	cmp	r2, r5
   2d4aa:	d00c      	beq.n	2d4c6 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   2d4ac:	340c      	adds	r4, #12
   2d4ae:	e7f0      	b.n	2d492 <device_get_binding+0xa>
		if (info->driver_api == NULL) {
   2d4b0:	6863      	ldr	r3, [r4, #4]
   2d4b2:	b90b      	cbnz	r3, 2d4b8 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   2d4b4:	340c      	adds	r4, #12
   2d4b6:	e7ef      	b.n	2d498 <device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   2d4b8:	6823      	ldr	r3, [r4, #0]
   2d4ba:	4628      	mov	r0, r5
   2d4bc:	6819      	ldr	r1, [r3, #0]
   2d4be:	f7d9 fb95 	bl	6bec <strcmp>
   2d4c2:	2800      	cmp	r0, #0
   2d4c4:	d1f6      	bne.n	2d4b4 <device_get_binding+0x2c>
}
   2d4c6:	4620      	mov	r0, r4
   2d4c8:	bd70      	pop	{r4, r5, r6, pc}
   2d4ca:	bf00      	nop
   2d4cc:	2000e1fc 	.word	0x2000e1fc
   2d4d0:	2000e10c 	.word	0x2000e10c

0002d4d4 <_impl_z_errno>:

Z_SYSCALL_HANDLER0_SIMPLE(z_errno);
#else
int *_impl_z_errno(void)
{
	return &_current->errno_var;
   2d4d4:	4b01      	ldr	r3, [pc, #4]	; (2d4dc <_impl_z_errno+0x8>)
   2d4d6:	6898      	ldr	r0, [r3, #8]
}
   2d4d8:	3054      	adds	r0, #84	; 0x54
   2d4da:	4770      	bx	lr
   2d4dc:	20003780 	.word	0x20003780

0002d4e0 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	z_clock_idle_exit();
   2d4e0:	f7d8 be70 	b.w	61c4 <z_clock_idle_exit>

0002d4e4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   2d4e4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   2d4e6:	4d0a      	ldr	r5, [pc, #40]	; (2d510 <idle+0x2c>)
	__asm__ volatile(
   2d4e8:	f04f 0220 	mov.w	r2, #32
   2d4ec:	f3ef 8311 	mrs	r3, BASEPRI
   2d4f0:	f382 8811 	msr	BASEPRI, r2
		k_yield();
	}
#else
	for (;;) {
		(void)irq_lock();
		sys_power_save_idle(_get_next_timeout_expiry());
   2d4f4:	f001 f99c 	bl	2e830 <_get_next_timeout_expiry>
	z_clock_set_timeout(ticks < IDLE_THRESH ? 1 : ticks, true);
   2d4f8:	2101      	movs	r1, #1
   2d4fa:	2802      	cmp	r0, #2
		sys_power_save_idle(_get_next_timeout_expiry());
   2d4fc:	4604      	mov	r4, r0
	z_clock_set_timeout(ticks < IDLE_THRESH ? 1 : ticks, true);
   2d4fe:	bfd8      	it	le
   2d500:	4608      	movle	r0, r1
   2d502:	f7d8 fe5b 	bl	61bc <z_clock_set_timeout>
	_kernel.idle = ticks;
   2d506:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
   2d508:	f7d9 f8f8 	bl	66fc <k_cpu_idle>
   2d50c:	e7ec      	b.n	2d4e8 <idle+0x4>
   2d50e:	bf00      	nop
   2d510:	20003780 	.word	0x20003780

0002d514 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	(void)memset(&__bss_start, 0,
   2d514:	4802      	ldr	r0, [pc, #8]	; (2d520 <_bss_zero+0xc>)
   2d516:	4a03      	ldr	r2, [pc, #12]	; (2d524 <_bss_zero+0x10>)
   2d518:	2100      	movs	r1, #0
   2d51a:	1a12      	subs	r2, r2, r0
   2d51c:	f7d9 bbe1 	b.w	6ce2 <memset>
   2d520:	20000000 	.word	0x20000000
   2d524:	2000382c 	.word	0x2000382c

0002d528 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   2d528:	4802      	ldr	r0, [pc, #8]	; (2d534 <_data_copy+0xc>)
   2d52a:	4a03      	ldr	r2, [pc, #12]	; (2d538 <_data_copy+0x10>)
   2d52c:	4903      	ldr	r1, [pc, #12]	; (2d53c <_data_copy+0x14>)
   2d52e:	1a12      	subs	r2, r2, r0
   2d530:	f7d9 bbaa 	b.w	6c88 <memcpy>
   2d534:	2000d6f0 	.word	0x2000d6f0
   2d538:	2000e604 	.word	0x2000e604
   2d53c:	00037718 	.word	0x00037718

0002d540 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   2d540:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2d542:	2002      	movs	r0, #2
   2d544:	f7ff ff8c 	bl	2d460 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   2d548:	4807      	ldr	r0, [pc, #28]	; (2d568 <bg_thread_main+0x28>)
   2d54a:	f7d3 ff9b 	bl	1484 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   2d54e:	2003      	movs	r0, #3
   2d550:	f7ff ff86 	bl	2d460 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   2d554:	f000 ffca 	bl	2e4ec <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   2d558:	f7d3 f83c 	bl	5d4 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   2d55c:	4a03      	ldr	r2, [pc, #12]	; (2d56c <bg_thread_main+0x2c>)
   2d55e:	7b13      	ldrb	r3, [r2, #12]
   2d560:	f023 0301 	bic.w	r3, r3, #1
   2d564:	7313      	strb	r3, [r2, #12]
}
   2d566:	bd08      	pop	{r3, pc}
   2d568:	000376e0 	.word	0x000376e0
   2d56c:	2000300c 	.word	0x2000300c

0002d570 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   2d570:	b580      	push	{r7, lr}
   2d572:	b086      	sub	sp, #24
   2d574:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   2d576:	f7d8 fe99 	bl	62ac <_IntLibInit>

	if (IS_ENABLED(CONFIG_LOG)) {
		log_core_init();
   2d57a:	f7d4 fcfb 	bl	1f74 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   2d57e:	4b31      	ldr	r3, [pc, #196]	; (2d644 <_Cstart+0xd4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2d580:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2d584:	4b30      	ldr	r3, [pc, #192]	; (2d648 <_Cstart+0xd8>)
	_kernel.ready_q.cache = _main_thread;
   2d586:	4e31      	ldr	r6, [pc, #196]	; (2d64c <_Cstart+0xdc>)
   2d588:	4d31      	ldr	r5, [pc, #196]	; (2d650 <_Cstart+0xe0>)
   2d58a:	2400      	movs	r4, #0
   2d58c:	22e0      	movs	r2, #224	; 0xe0
   2d58e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   2d592:	77dc      	strb	r4, [r3, #31]
   2d594:	761c      	strb	r4, [r3, #24]
   2d596:	765c      	strb	r4, [r3, #25]
   2d598:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2d59a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2d59c:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   2d5a0:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   2d5a2:	f7d9 f815 	bl	65d0 <_FaultInit>
	_CpuIdleInit();
   2d5a6:	f7d9 f8a3 	bl	66f0 <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2d5aa:	4620      	mov	r0, r4
   2d5ac:	f7ff ff58 	bl	2d460 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2d5b0:	2001      	movs	r0, #1
   2d5b2:	f7ff ff55 	bl	2d460 <_sys_device_do_config_level>
	_sched_init();
   2d5b6:	f000 fdaf 	bl	2e118 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   2d5ba:	4b26      	ldr	r3, [pc, #152]	; (2d654 <_Cstart+0xe4>)
	_kernel.ready_q.cache = _main_thread;
   2d5bc:	6275      	str	r5, [r6, #36]	; 0x24
	_setup_new_thread(_main_thread, _main_stack,
   2d5be:	9305      	str	r3, [sp, #20]
   2d5c0:	2301      	movs	r3, #1
   2d5c2:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2d5c6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2d5ca:	9400      	str	r4, [sp, #0]
   2d5cc:	4b22      	ldr	r3, [pc, #136]	; (2d658 <_Cstart+0xe8>)
   2d5ce:	4923      	ldr	r1, [pc, #140]	; (2d65c <_Cstart+0xec>)
   2d5d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2d5d4:	4628      	mov	r0, r5
   2d5d6:	f000 ff07 	bl	2e3e8 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2d5da:	7b6b      	ldrb	r3, [r5, #13]
   2d5dc:	f023 0204 	bic.w	r2, r3, #4
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2d5e0:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2d5e4:	736a      	strb	r2, [r5, #13]
   2d5e6:	4634      	mov	r4, r6
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2d5e8:	d105      	bne.n	2d5f6 <_Cstart+0x86>
	return true;
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
   2d5ea:	6a2b      	ldr	r3, [r5, #32]
   2d5ec:	3301      	adds	r3, #1
   2d5ee:	d102      	bne.n	2d5f6 <_Cstart+0x86>
		_add_thread_to_ready_q(thread);
   2d5f0:	4628      	mov	r0, r5
   2d5f2:	f000 fc9f 	bl	2df34 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
   2d5f6:	4b1a      	ldr	r3, [pc, #104]	; (2d660 <_Cstart+0xf0>)
   2d5f8:	4e1a      	ldr	r6, [pc, #104]	; (2d664 <_Cstart+0xf4>)
   2d5fa:	9305      	str	r3, [sp, #20]
   2d5fc:	2201      	movs	r2, #1
   2d5fe:	230f      	movs	r3, #15
   2d600:	e9cd 3203 	strd	r3, r2, [sp, #12]
   2d604:	2300      	movs	r3, #0
   2d606:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2d60a:	9300      	str	r3, [sp, #0]
   2d60c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2d610:	4b15      	ldr	r3, [pc, #84]	; (2d668 <_Cstart+0xf8>)
   2d612:	4916      	ldr	r1, [pc, #88]	; (2d66c <_Cstart+0xfc>)
   2d614:	4630      	mov	r0, r6
   2d616:	f000 fee7 	bl	2e3e8 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2d61a:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
   2d61c:	60e6      	str	r6, [r4, #12]
   2d61e:	f023 0304 	bic.w	r3, r3, #4
   2d622:	7373      	strb	r3, [r6, #13]
	list->head = (sys_dnode_t *)list;
   2d624:	4b12      	ldr	r3, [pc, #72]	; (2d670 <_Cstart+0x100>)
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);

#ifdef CONFIG_TRACING
	z_sys_trace_thread_switched_out();
#endif
	_current = main_thread;
   2d626:	60a5      	str	r5, [r4, #8]
	list->tail = (sys_dnode_t *)list;
   2d628:	e9c4 3306 	strd	r3, r3, [r4, #24]
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   2d62c:	4a0a      	ldr	r2, [pc, #40]	; (2d658 <_Cstart+0xe8>)
   2d62e:	4b11      	ldr	r3, [pc, #68]	; (2d674 <_Cstart+0x104>)
   2d630:	4c11      	ldr	r4, [pc, #68]	; (2d678 <_Cstart+0x108>)
   2d632:	f383 8809 	msr	PSP, r3
   2d636:	b663      	cpsie	if
   2d638:	2100      	movs	r1, #0
   2d63a:	f381 8811 	msr	BASEPRI, r1
   2d63e:	4610      	mov	r0, r2
   2d640:	4720      	bx	r4
   2d642:	bf00      	nop
   2d644:	2000d2f0 	.word	0x2000d2f0
   2d648:	e000ed00 	.word	0xe000ed00
   2d64c:	20003780 	.word	0x20003780
   2d650:	2000300c 	.word	0x2000300c
   2d654:	00035e8e 	.word	0x00035e8e
   2d658:	0002d541 	.word	0x0002d541
   2d65c:	2000c1b0 	.word	0x2000c1b0
   2d660:	000376d4 	.word	0x000376d4
   2d664:	20002fa0 	.word	0x20002fa0
   2d668:	0002d4e5 	.word	0x0002d4e5
   2d66c:	2000c9b0 	.word	0x2000c9b0
   2d670:	20003798 	.word	0x20003798
   2d674:	2000c9b0 	.word	0x2000c9b0
   2d678:	00000d09 	.word	0x00000d09

0002d67c <init_mem_slab_module>:
{
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   2d67c:	4b0b      	ldr	r3, [pc, #44]	; (2d6ac <init_mem_slab_module+0x30>)
   2d67e:	480c      	ldr	r0, [pc, #48]	; (2d6b0 <init_mem_slab_module+0x34>)
{
   2d680:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   2d682:	2400      	movs	r4, #0
	for (slab = _k_mem_slab_list_start;
   2d684:	4283      	cmp	r3, r0
   2d686:	d301      	bcc.n	2d68c <init_mem_slab_module+0x10>
	     slab++) {
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   2d688:	2000      	movs	r0, #0
   2d68a:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
   2d68c:	691a      	ldr	r2, [r3, #16]
	for (j = 0; j < slab->num_blocks; j++) {
   2d68e:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   2d690:	615c      	str	r4, [r3, #20]
	for (j = 0; j < slab->num_blocks; j++) {
   2d692:	2100      	movs	r1, #0
   2d694:	42a9      	cmp	r1, r5
   2d696:	d101      	bne.n	2d69c <init_mem_slab_module+0x20>
	     slab++) {
   2d698:	331c      	adds	r3, #28
   2d69a:	e7f3      	b.n	2d684 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   2d69c:	695e      	ldr	r6, [r3, #20]
   2d69e:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   2d6a0:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   2d6a2:	615a      	str	r2, [r3, #20]
	for (j = 0; j < slab->num_blocks; j++) {
   2d6a4:	3101      	adds	r1, #1
		p += slab->block_size;
   2d6a6:	4432      	add	r2, r6
   2d6a8:	e7f4      	b.n	2d694 <init_mem_slab_module+0x18>
   2d6aa:	bf00      	nop
   2d6ac:	2000e2f8 	.word	0x2000e2f8
   2d6b0:	2000e34c 	.word	0x2000e34c

0002d6b4 <k_mem_slab_init>:
SYS_INIT(init_mem_slab_module, PRE_KERNEL_1,
	 CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void k_mem_slab_init(struct k_mem_slab *slab, void *buffer,
		    size_t block_size, u32_t num_blocks)
{
   2d6b4:	b530      	push	{r4, r5, lr}
	slab->num_blocks = num_blocks;
	slab->block_size = block_size;
	slab->buffer = buffer;
	slab->num_used = 0;
   2d6b6:	2400      	movs	r4, #0
	slab->block_size = block_size;
   2d6b8:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   2d6bc:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   2d6c0:	6101      	str	r1, [r0, #16]
	for (j = 0; j < slab->num_blocks; j++) {
   2d6c2:	42a3      	cmp	r3, r4
   2d6c4:	d102      	bne.n	2d6cc <k_mem_slab_init+0x18>
   2d6c6:	e9c0 0000 	strd	r0, r0, [r0]
	create_free_list(slab);
	_waitq_init(&slab->wait_q);
	SYS_TRACING_OBJ_INIT(k_mem_slab, slab);

	_k_object_init(slab);
}
   2d6ca:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2d6cc:	6945      	ldr	r5, [r0, #20]
   2d6ce:	600d      	str	r5, [r1, #0]
	for (j = 0; j < slab->num_blocks; j++) {
   2d6d0:	3401      	adds	r4, #1
		slab->free_list = p;
   2d6d2:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2d6d4:	4411      	add	r1, r2
   2d6d6:	e7f4      	b.n	2d6c2 <k_mem_slab_init+0xe>

0002d6d8 <k_mem_slab_alloc>:

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   2d6d8:	b538      	push	{r3, r4, r5, lr}
   2d6da:	4603      	mov	r3, r0
   2d6dc:	460c      	mov	r4, r1
   2d6de:	f04f 0020 	mov.w	r0, #32
   2d6e2:	f3ef 8511 	mrs	r5, BASEPRI
   2d6e6:	f380 8811 	msr	BASEPRI, r0
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   2d6ea:	6958      	ldr	r0, [r3, #20]
   2d6ec:	b150      	cbz	r0, 2d704 <k_mem_slab_alloc+0x2c>
		/* take a free block */
		*mem = slab->free_list;
   2d6ee:	6020      	str	r0, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   2d6f0:	695a      	ldr	r2, [r3, #20]
   2d6f2:	6812      	ldr	r2, [r2, #0]
   2d6f4:	615a      	str	r2, [r3, #20]
		slab->num_used++;
   2d6f6:	699a      	ldr	r2, [r3, #24]
   2d6f8:	3201      	adds	r2, #1
   2d6fa:	619a      	str	r2, [r3, #24]
		result = 0;
   2d6fc:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2d6fe:	f385 8811 	msr	BASEPRI, r5
		return result;
	}

	irq_unlock(key);

	return result;
   2d702:	e00d      	b.n	2d720 <k_mem_slab_alloc+0x48>
	} else if (timeout == K_NO_WAIT) {
   2d704:	b91a      	cbnz	r2, 2d70e <k_mem_slab_alloc+0x36>
		*mem = NULL;
   2d706:	6022      	str	r2, [r4, #0]
		result = -ENOMEM;
   2d708:	f06f 000b 	mvn.w	r0, #11
   2d70c:	e7f7      	b.n	2d6fe <k_mem_slab_alloc+0x26>
		result = _pend_current_thread(key, &slab->wait_q, timeout);
   2d70e:	4619      	mov	r1, r3
   2d710:	4628      	mov	r0, r5
   2d712:	f000 fcb7 	bl	2e084 <_pend_current_thread>
		if (result == 0) {
   2d716:	b918      	cbnz	r0, 2d720 <k_mem_slab_alloc+0x48>
			*mem = _current->base.swap_data;
   2d718:	4b02      	ldr	r3, [pc, #8]	; (2d724 <k_mem_slab_alloc+0x4c>)
   2d71a:	689b      	ldr	r3, [r3, #8]
   2d71c:	695b      	ldr	r3, [r3, #20]
   2d71e:	6023      	str	r3, [r4, #0]
}
   2d720:	bd38      	pop	{r3, r4, r5, pc}
   2d722:	bf00      	nop
   2d724:	20003780 	.word	0x20003780

0002d728 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2d728:	b570      	push	{r4, r5, r6, lr}
   2d72a:	4604      	mov	r4, r0
   2d72c:	460d      	mov	r5, r1
	__asm__ volatile(
   2d72e:	f04f 0320 	mov.w	r3, #32
   2d732:	f3ef 8611 	mrs	r6, BASEPRI
   2d736:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&slab->wait_q);
   2d73a:	f000 fb90 	bl	2de5e <_unpend_first_thread>

	if (pending_thread != NULL) {
   2d73e:	b180      	cbz	r0, 2d762 <k_mem_slab_free+0x3a>
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   2d740:	682a      	ldr	r2, [r5, #0]
	thread->base.swap_data = data;
   2d742:	6142      	str	r2, [r0, #20]
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2d744:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2d746:	2100      	movs	r1, #0
   2d748:	06d2      	lsls	r2, r2, #27
   2d74a:	6681      	str	r1, [r0, #104]	; 0x68
   2d74c:	d104      	bne.n	2d758 <k_mem_slab_free+0x30>
	if (_is_thread_ready(thread)) {
   2d74e:	6a03      	ldr	r3, [r0, #32]
   2d750:	3301      	adds	r3, #1
   2d752:	d101      	bne.n	2d758 <k_mem_slab_free+0x30>
		_add_thread_to_ready_q(thread);
   2d754:	f000 fbee 	bl	2df34 <_add_thread_to_ready_q>
		_ready_thread(pending_thread);
		_reschedule(key);
   2d758:	4630      	mov	r0, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		irq_unlock(key);
	}
}
   2d75a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   2d75e:	f000 bb97 	b.w	2de90 <_reschedule>
		**(char ***)mem = slab->free_list;
   2d762:	682b      	ldr	r3, [r5, #0]
   2d764:	6962      	ldr	r2, [r4, #20]
   2d766:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   2d768:	682b      	ldr	r3, [r5, #0]
   2d76a:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   2d76c:	69a3      	ldr	r3, [r4, #24]
   2d76e:	3b01      	subs	r3, #1
   2d770:	61a3      	str	r3, [r4, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2d772:	f386 8811 	msr	BASEPRI, r6
}
   2d776:	bd70      	pop	{r4, r5, r6, pc}

0002d778 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   2d778:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   2d77a:	4c07      	ldr	r4, [pc, #28]	; (2d798 <init_static_pools+0x20>)
   2d77c:	4d07      	ldr	r5, [pc, #28]	; (2d79c <init_static_pools+0x24>)
   2d77e:	42ac      	cmp	r4, r5
   2d780:	d301      	bcc.n	2d786 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   2d782:	2000      	movs	r0, #0
   2d784:	bd38      	pop	{r3, r4, r5, pc}
   2d786:	f104 0314 	add.w	r3, r4, #20
	_sys_mem_pool_base_init(&p->base);
   2d78a:	4620      	mov	r0, r4
   2d78c:	e9c4 3305 	strd	r3, r3, [r4, #20]
   2d790:	f7d3 faf6 	bl	d80 <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   2d794:	341c      	adds	r4, #28
   2d796:	e7f2      	b.n	2d77e <init_static_pools+0x6>
   2d798:	2000e34c 	.word	0x2000e34c
   2d79c:	2000e368 	.word	0x2000e368

0002d7a0 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   2d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   2d7a4:	1e1d      	subs	r5, r3, #0
{
   2d7a6:	b085      	sub	sp, #20
   2d7a8:	4606      	mov	r6, r0
   2d7aa:	460c      	mov	r4, r1
   2d7ac:	4617      	mov	r7, r2
	if (timeout > 0) {
   2d7ae:	dd57      	ble.n	2d860 <k_mem_pool_alloc+0xc0>
		end = z_tick_get() + _ms_to_ticks(timeout);
   2d7b0:	f001 f8f0 	bl	2e994 <z_tick_get>
   2d7b4:	4680      	mov	r8, r0
	return (s32_t)ceiling_fraction(
   2d7b6:	482b      	ldr	r0, [pc, #172]	; (2d864 <k_mem_pool_alloc+0xc4>)
   2d7b8:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   2d7bc:	2100      	movs	r1, #0
   2d7be:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2d7c2:	2300      	movs	r3, #0
   2d7c4:	fbcc 0105 	smlal	r0, r1, ip, r5
   2d7c8:	f7d2 fd24 	bl	214 <__aeabi_ldivmod>
   2d7cc:	eb18 0200 	adds.w	r2, r8, r0
	return pool - &_k_mem_pool_list_start[0];
   2d7d0:	4b25      	ldr	r3, [pc, #148]	; (2d868 <k_mem_pool_alloc+0xc8>)
	s64_t end = 0;
   2d7d2:	4690      	mov	r8, r2
	return pool - &_k_mem_pool_list_start[0];
   2d7d4:	1af3      	subs	r3, r6, r3
   2d7d6:	4a25      	ldr	r2, [pc, #148]	; (2d86c <k_mem_pool_alloc+0xcc>)
   2d7d8:	109b      	asrs	r3, r3, #2
   2d7da:	fb02 fa03 	mul.w	sl, r2, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   2d7de:	fa5f fa8a 	uxtb.w	sl, sl
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		(void)_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   2d7e2:	f106 0b14 	add.w	fp, r6, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   2d7e6:	9400      	str	r4, [sp, #0]
   2d7e8:	ab03      	add	r3, sp, #12
   2d7ea:	aa02      	add	r2, sp, #8
   2d7ec:	4639      	mov	r1, r7
   2d7ee:	4630      	mov	r0, r6
   2d7f0:	f7d3 fb11 	bl	e16 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   2d7f4:	f110 0f0b 	cmn.w	r0, #11
   2d7f8:	d10b      	bne.n	2d812 <k_mem_pool_alloc+0x72>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   2d7fa:	9400      	str	r4, [sp, #0]
   2d7fc:	ab03      	add	r3, sp, #12
   2d7fe:	aa02      	add	r2, sp, #8
   2d800:	4639      	mov	r1, r7
   2d802:	4630      	mov	r0, r6
   2d804:	f7d3 fb07 	bl	e16 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   2d808:	f110 0f0b 	cmn.w	r0, #11
   2d80c:	bf08      	it	eq
   2d80e:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   2d812:	7963      	ldrb	r3, [r4, #5]
   2d814:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   2d816:	f884 a004 	strb.w	sl, [r4, #4]
		block->id.level = level_num;
   2d81a:	f362 0303 	bfi	r3, r2, #0, #4
   2d81e:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   2d820:	6863      	ldr	r3, [r4, #4]
   2d822:	9a03      	ldr	r2, [sp, #12]
   2d824:	f362 331f 	bfi	r3, r2, #12, #20
   2d828:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   2d82a:	b1b0      	cbz	r0, 2d85a <k_mem_pool_alloc+0xba>
   2d82c:	b1ad      	cbz	r5, 2d85a <k_mem_pool_alloc+0xba>
   2d82e:	f110 0f0c 	cmn.w	r0, #12
   2d832:	d112      	bne.n	2d85a <k_mem_pool_alloc+0xba>
	__asm__ volatile(
   2d834:	f04f 0320 	mov.w	r3, #32
   2d838:	f3ef 8011 	mrs	r0, BASEPRI
   2d83c:	f383 8811 	msr	BASEPRI, r3
		(void)_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   2d840:	462a      	mov	r2, r5
   2d842:	4659      	mov	r1, fp
   2d844:	f000 fc1e 	bl	2e084 <_pend_current_thread>

		if (timeout != K_FOREVER) {
   2d848:	1c6b      	adds	r3, r5, #1
   2d84a:	d0cc      	beq.n	2d7e6 <k_mem_pool_alloc+0x46>
			timeout = end - z_tick_get();
   2d84c:	f001 f8a2 	bl	2e994 <z_tick_get>

			if (timeout < 0) {
   2d850:	ebb8 0500 	subs.w	r5, r8, r0
   2d854:	d5c7      	bpl.n	2d7e6 <k_mem_pool_alloc+0x46>
				break;
			}
		}
	}

	return -EAGAIN;
   2d856:	f06f 000a 	mvn.w	r0, #10
}
   2d85a:	b005      	add	sp, #20
   2d85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   2d860:	2200      	movs	r2, #0
   2d862:	e7b5      	b.n	2d7d0 <k_mem_pool_alloc+0x30>
   2d864:	0004ffff 	.word	0x0004ffff
   2d868:	2000e34c 	.word	0x2000e34c
   2d86c:	b6db6db7 	.word	0xb6db6db7

0002d870 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   2d870:	b570      	push	{r4, r5, r6, lr}
   2d872:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   2d874:	6802      	ldr	r2, [r0, #0]
   2d876:	7841      	ldrb	r1, [r0, #1]
   2d878:	4e13      	ldr	r6, [pc, #76]	; (2d8c8 <k_mem_pool_free_id+0x58>)
   2d87a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2d87e:	00a4      	lsls	r4, r4, #2
   2d880:	0b12      	lsrs	r2, r2, #12
   2d882:	f001 010f 	and.w	r1, r1, #15
   2d886:	1930      	adds	r0, r6, r4
   2d888:	f7d3 fba0 	bl	fcc <_sys_mem_pool_block_free>
   2d88c:	f04f 0320 	mov.w	r3, #32
   2d890:	f3ef 8511 	mrs	r5, BASEPRI
   2d894:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   2d898:	f104 0014 	add.w	r0, r4, #20
   2d89c:	4430      	add	r0, r6
   2d89e:	f000 fc2b 	bl	2e0f8 <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   2d8a2:	b168      	cbz	r0, 2d8c0 <k_mem_pool_free_id+0x50>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2d8a4:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   2d8a8:	2b0d      	cmp	r3, #13
   2d8aa:	d809      	bhi.n	2d8c0 <k_mem_pool_free_id+0x50>
   2d8ac:	b11b      	cbz	r3, 2d8b6 <k_mem_pool_free_id+0x46>
   2d8ae:	4b07      	ldr	r3, [pc, #28]	; (2d8cc <k_mem_pool_free_id+0x5c>)
   2d8b0:	685b      	ldr	r3, [r3, #4]
   2d8b2:	051b      	lsls	r3, r3, #20
   2d8b4:	d504      	bpl.n	2d8c0 <k_mem_pool_free_id+0x50>
		_reschedule(key);
   2d8b6:	4628      	mov	r0, r5
	} else {
		irq_unlock(key);
	}
}
   2d8b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   2d8bc:	f000 bae8 	b.w	2de90 <_reschedule>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2d8c0:	f385 8811 	msr	BASEPRI, r5
}
   2d8c4:	bd70      	pop	{r4, r5, r6, pc}
   2d8c6:	bf00      	nop
   2d8c8:	2000e34c 	.word	0x2000e34c
   2d8cc:	e000ed00 	.word	0xe000ed00

0002d8d0 <k_mem_pool_free>:

void k_mem_pool_free(struct k_mem_block *block)
{
	k_mem_pool_free_id(&block->id);
   2d8d0:	3004      	adds	r0, #4
   2d8d2:	f7ff bfcd 	b.w	2d870 <k_mem_pool_free_id>

0002d8d6 <k_mem_pool_malloc>:
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   2d8d6:	b513      	push	{r0, r1, r4, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   2d8d8:	2404      	movs	r4, #4
   2d8da:	190a      	adds	r2, r1, r4
   2d8dc:	d204      	bcs.n	2d8e8 <k_mem_pool_malloc+0x12>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   2d8de:	2300      	movs	r3, #0
   2d8e0:	4669      	mov	r1, sp
   2d8e2:	f7ff ff5d 	bl	2d7a0 <k_mem_pool_alloc>
   2d8e6:	b110      	cbz	r0, 2d8ee <k_mem_pool_malloc+0x18>
		return NULL;
   2d8e8:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   2d8ea:	b002      	add	sp, #8
   2d8ec:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   2d8ee:	4622      	mov	r2, r4
   2d8f0:	a901      	add	r1, sp, #4
   2d8f2:	9800      	ldr	r0, [sp, #0]
   2d8f4:	f7d9 f9c8 	bl	6c88 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   2d8f8:	9800      	ldr	r0, [sp, #0]
   2d8fa:	3004      	adds	r0, #4
   2d8fc:	e7f5      	b.n	2d8ea <k_mem_pool_malloc+0x14>

0002d8fe <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   2d8fe:	b110      	cbz	r0, 2d906 <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   2d900:	3804      	subs	r0, #4
   2d902:	f7ff bfb5 	b.w	2d870 <k_mem_pool_free_id>
	}
}
   2d906:	4770      	bx	lr

0002d908 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   2d908:	4b03      	ldr	r3, [pc, #12]	; (2d918 <z_thread_malloc+0x10>)
   2d90a:	689b      	ldr	r3, [r3, #8]
{
   2d90c:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   2d90e:	6e18      	ldr	r0, [r3, #96]	; 0x60
   2d910:	b108      	cbz	r0, 2d916 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   2d912:	f7ff bfe0 	b.w	2d8d6 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   2d916:	4770      	bx	lr
   2d918:	20003780 	.word	0x20003780

0002d91c <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2d91c:	7b42      	ldrb	r2, [r0, #13]
   2d91e:	06d2      	lsls	r2, r2, #27
   2d920:	d104      	bne.n	2d92c <_ready_thread+0x10>
	if (_is_thread_ready(thread)) {
   2d922:	6a03      	ldr	r3, [r0, #32]
   2d924:	3301      	adds	r3, #1
   2d926:	d101      	bne.n	2d92c <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   2d928:	f000 bb04 	b.w	2df34 <_add_thread_to_ready_q>
	}

	sys_trace_thread_ready(thread);
}
   2d92c:	4770      	bx	lr
	...

0002d930 <_impl_k_msgq_put>:
	}
}


int _impl_k_msgq_put(struct k_msgq *q, void *data, s32_t timeout)
{
   2d930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d932:	4604      	mov	r4, r0
   2d934:	460f      	mov	r7, r1
	__asm__ volatile(
   2d936:	f04f 0120 	mov.w	r1, #32
   2d93a:	f3ef 8611 	mrs	r6, BASEPRI
   2d93e:	f381 8811 	msr	BASEPRI, r1

	unsigned int key = irq_lock();
	struct k_thread *pending_thread;
	int result;

	if (q->used_msgs < q->max_msgs) {
   2d942:	6a05      	ldr	r5, [r0, #32]
   2d944:	68c1      	ldr	r1, [r0, #12]
   2d946:	428d      	cmp	r5, r1
   2d948:	d225      	bcs.n	2d996 <_impl_k_msgq_put+0x66>
		/* message queue isn't full */
		pending_thread = _unpend_first_thread(&q->wait_q);
   2d94a:	f000 fa88 	bl	2de5e <_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   2d94e:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   2d950:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   2d952:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
   2d954:	b160      	cbz	r0, 2d970 <_impl_k_msgq_put+0x40>
   2d956:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   2d958:	6940      	ldr	r0, [r0, #20]
   2d95a:	f7d9 f995 	bl	6c88 <memcpy>
			       q->msg_size);
			/* wake up waiting thread */
			_set_thread_return_value(pending_thread, 0);
			_ready_thread(pending_thread);
   2d95e:	4628      	mov	r0, r5
   2d960:	66ac      	str	r4, [r5, #104]	; 0x68
   2d962:	f7ff ffdb 	bl	2d91c <_ready_thread>
			_reschedule(key);
   2d966:	4630      	mov	r0, r6
   2d968:	f000 fa92 	bl	2de90 <_reschedule>
			return 0;
   2d96c:	4620      	mov	r0, r4
	}

	irq_unlock(key);

	return result;
}
   2d96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(void)memcpy(q->write_ptr, data, q->msg_size);
   2d970:	69e0      	ldr	r0, [r4, #28]
   2d972:	f7d9 f989 	bl	6c88 <memcpy>
			q->write_ptr += q->msg_size;
   2d976:	69e3      	ldr	r3, [r4, #28]
   2d978:	68a2      	ldr	r2, [r4, #8]
   2d97a:	4413      	add	r3, r2
			if (q->write_ptr == q->buffer_end) {
   2d97c:	6962      	ldr	r2, [r4, #20]
			q->write_ptr += q->msg_size;
   2d97e:	61e3      	str	r3, [r4, #28]
			if (q->write_ptr == q->buffer_end) {
   2d980:	4293      	cmp	r3, r2
				q->write_ptr = q->buffer_start;
   2d982:	bf04      	itt	eq
   2d984:	6923      	ldreq	r3, [r4, #16]
   2d986:	61e3      	streq	r3, [r4, #28]
			q->used_msgs++;
   2d988:	6a23      	ldr	r3, [r4, #32]
   2d98a:	3301      	adds	r3, #1
   2d98c:	6223      	str	r3, [r4, #32]
		result = 0;
   2d98e:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2d990:	f386 8811 	msr	BASEPRI, r6
	return result;
   2d994:	e7eb      	b.n	2d96e <_impl_k_msgq_put+0x3e>
	} else if (timeout == K_NO_WAIT) {
   2d996:	b142      	cbz	r2, 2d9aa <_impl_k_msgq_put+0x7a>
		_current->base.swap_data = data;
   2d998:	4b05      	ldr	r3, [pc, #20]	; (2d9b0 <_impl_k_msgq_put+0x80>)
   2d99a:	689b      	ldr	r3, [r3, #8]
		return _pend_current_thread(key, &q->wait_q, timeout);
   2d99c:	4601      	mov	r1, r0
		_current->base.swap_data = data;
   2d99e:	615f      	str	r7, [r3, #20]
		return _pend_current_thread(key, &q->wait_q, timeout);
   2d9a0:	4630      	mov	r0, r6
}
   2d9a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return _pend_current_thread(key, &q->wait_q, timeout);
   2d9a6:	f000 bb6d 	b.w	2e084 <_pend_current_thread>
		result = -ENOMSG;
   2d9aa:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   2d9ae:	e7ef      	b.n	2d990 <_impl_k_msgq_put+0x60>
   2d9b0:	20003780 	.word	0x20003780

0002d9b4 <_impl_k_msgq_get>:
	return 0;
}
#endif

int _impl_k_msgq_get(struct k_msgq *q, void *data, s32_t timeout)
{
   2d9b4:	b570      	push	{r4, r5, r6, lr}
   2d9b6:	4604      	mov	r4, r0
   2d9b8:	4608      	mov	r0, r1
	__asm__ volatile(
   2d9ba:	f04f 0120 	mov.w	r1, #32
   2d9be:	f3ef 8611 	mrs	r6, BASEPRI
   2d9c2:	f381 8811 	msr	BASEPRI, r1

	unsigned int key = irq_lock();
	struct k_thread *pending_thread;
	int result;

	if (q->used_msgs > 0) {
   2d9c6:	6a21      	ldr	r1, [r4, #32]
   2d9c8:	2900      	cmp	r1, #0
   2d9ca:	d02f      	beq.n	2da2c <_impl_k_msgq_get+0x78>
		/* take first available message from queue */
		(void)memcpy(data, q->read_ptr, q->msg_size);
   2d9cc:	68a2      	ldr	r2, [r4, #8]
   2d9ce:	69a1      	ldr	r1, [r4, #24]
   2d9d0:	f7d9 f95a 	bl	6c88 <memcpy>
		q->read_ptr += q->msg_size;
   2d9d4:	69a3      	ldr	r3, [r4, #24]
   2d9d6:	68a2      	ldr	r2, [r4, #8]
   2d9d8:	4413      	add	r3, r2
		if (q->read_ptr == q->buffer_end) {
   2d9da:	6962      	ldr	r2, [r4, #20]
		q->read_ptr += q->msg_size;
   2d9dc:	61a3      	str	r3, [r4, #24]
		if (q->read_ptr == q->buffer_end) {
   2d9de:	4293      	cmp	r3, r2
			q->read_ptr = q->buffer_start;
   2d9e0:	bf04      	itt	eq
   2d9e2:	6923      	ldreq	r3, [r4, #16]
   2d9e4:	61a3      	streq	r3, [r4, #24]
		}
		q->used_msgs--;
   2d9e6:	6a23      	ldr	r3, [r4, #32]
   2d9e8:	3b01      	subs	r3, #1
   2d9ea:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = _unpend_first_thread(&q->wait_q);
   2d9ec:	4620      	mov	r0, r4
   2d9ee:	f000 fa36 	bl	2de5e <_unpend_first_thread>
		if (pending_thread != NULL) {
   2d9f2:	4605      	mov	r5, r0
   2d9f4:	b330      	cbz	r0, 2da44 <_impl_k_msgq_get+0x90>
			/* add thread's message to queue */
			(void)memcpy(q->write_ptr, pending_thread->base.swap_data,
   2d9f6:	6941      	ldr	r1, [r0, #20]
   2d9f8:	68a2      	ldr	r2, [r4, #8]
   2d9fa:	69e0      	ldr	r0, [r4, #28]
   2d9fc:	f7d9 f944 	bl	6c88 <memcpy>
			       q->msg_size);
			q->write_ptr += q->msg_size;
   2da00:	69e3      	ldr	r3, [r4, #28]
   2da02:	68a2      	ldr	r2, [r4, #8]
   2da04:	4413      	add	r3, r2
			if (q->write_ptr == q->buffer_end) {
   2da06:	6962      	ldr	r2, [r4, #20]
			q->write_ptr += q->msg_size;
   2da08:	61e3      	str	r3, [r4, #28]
			if (q->write_ptr == q->buffer_end) {
   2da0a:	4293      	cmp	r3, r2
				q->write_ptr = q->buffer_start;
   2da0c:	bf04      	itt	eq
   2da0e:	6923      	ldreq	r3, [r4, #16]
   2da10:	61e3      	streq	r3, [r4, #28]
			}
			q->used_msgs++;
   2da12:	6a23      	ldr	r3, [r4, #32]
   2da14:	3301      	adds	r3, #1
   2da16:	6223      	str	r3, [r4, #32]
   2da18:	2400      	movs	r4, #0

			/* wake up waiting thread */
			_set_thread_return_value(pending_thread, 0);
			_ready_thread(pending_thread);
   2da1a:	4628      	mov	r0, r5
   2da1c:	66ac      	str	r4, [r5, #104]	; 0x68
   2da1e:	f7ff ff7d 	bl	2d91c <_ready_thread>
			_reschedule(key);
   2da22:	4630      	mov	r0, r6
   2da24:	f000 fa34 	bl	2de90 <_reschedule>
			return 0;
   2da28:	4620      	mov	r0, r4
	}

	irq_unlock(key);

	return result;
}
   2da2a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (timeout == K_NO_WAIT) {
   2da2c:	b142      	cbz	r2, 2da40 <_impl_k_msgq_get+0x8c>
		_current->base.swap_data = data;
   2da2e:	4b07      	ldr	r3, [pc, #28]	; (2da4c <_impl_k_msgq_get+0x98>)
   2da30:	689b      	ldr	r3, [r3, #8]
		return _pend_current_thread(key, &q->wait_q, timeout);
   2da32:	4621      	mov	r1, r4
		_current->base.swap_data = data;
   2da34:	6158      	str	r0, [r3, #20]
		return _pend_current_thread(key, &q->wait_q, timeout);
   2da36:	4630      	mov	r0, r6
}
   2da38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return _pend_current_thread(key, &q->wait_q, timeout);
   2da3c:	f000 bb22 	b.w	2e084 <_pend_current_thread>
		result = -ENOMSG;
   2da40:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2da44:	f386 8811 	msr	BASEPRI, r6
	return result;
   2da48:	e7ef      	b.n	2da2a <_impl_k_msgq_get+0x76>
   2da4a:	bf00      	nop
   2da4c:	20003780 	.word	0x20003780

0002da50 <_impl_k_mutex_lock>:
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   2da50:	b570      	push	{r4, r5, r6, lr}
   2da52:	460d      	mov	r5, r1
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   2da54:	492e      	ldr	r1, [pc, #184]	; (2db10 <_impl_k_mutex_lock+0xc0>)
   2da56:	688a      	ldr	r2, [r1, #8]
   2da58:	7bd3      	ldrb	r3, [r2, #15]
   2da5a:	3b01      	subs	r3, #1
   2da5c:	4604      	mov	r4, r0
   2da5e:	73d3      	strb	r3, [r2, #15]
	u32_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	_sched_lock();

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2da60:	68c3      	ldr	r3, [r0, #12]
   2da62:	4608      	mov	r0, r1
   2da64:	b14b      	cbz	r3, 2da7a <_impl_k_mutex_lock+0x2a>
   2da66:	68a2      	ldr	r2, [r4, #8]
   2da68:	6889      	ldr	r1, [r1, #8]
   2da6a:	428a      	cmp	r2, r1
   2da6c:	d011      	beq.n	2da92 <_impl_k_mutex_lock+0x42>
		return 0;
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   2da6e:	b995      	cbnz	r5, 2da96 <_impl_k_mutex_lock+0x46>
		k_sched_unlock();
   2da70:	f000 fa26 	bl	2dec0 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   2da74:	f06f 000f 	mvn.w	r0, #15
   2da78:	e00a      	b.n	2da90 <_impl_k_mutex_lock+0x40>
					_current->base.prio :
   2da7a:	688a      	ldr	r2, [r1, #8]
   2da7c:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2da80:	6122      	str	r2, [r4, #16]
		mutex->lock_count++;
   2da82:	3301      	adds	r3, #1
   2da84:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2da86:	6883      	ldr	r3, [r0, #8]
   2da88:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
   2da8a:	f000 fa19 	bl	2dec0 <k_sched_unlock>
		return 0;
   2da8e:	2000      	movs	r0, #0

	k_sched_unlock();

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   2da90:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   2da92:	6922      	ldr	r2, [r4, #16]
   2da94:	e7f4      	b.n	2da80 <_impl_k_mutex_lock+0x30>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2da96:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2da9a:	f992 300e 	ldrsb.w	r3, [r2, #14]
   2da9e:	4299      	cmp	r1, r3
   2daa0:	bfa8      	it	ge
   2daa2:	4619      	movge	r1, r3
   2daa4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	__asm__ volatile(
   2daa8:	f04f 0320 	mov.w	r3, #32
   2daac:	f3ef 8611 	mrs	r6, BASEPRI
   2dab0:	f383 8811 	msr	BASEPRI, r3
	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2dab4:	68a0      	ldr	r0, [r4, #8]
   2dab6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2daba:	4299      	cmp	r1, r3
   2dabc:	da01      	bge.n	2dac2 <_impl_k_mutex_lock+0x72>
		_thread_priority_set(mutex->owner, new_prio);
   2dabe:	f000 faef 	bl	2e0a0 <_thread_priority_set>
	s32_t got_mutex = _pend_current_thread(key, &mutex->wait_q, timeout);
   2dac2:	462a      	mov	r2, r5
   2dac4:	4621      	mov	r1, r4
   2dac6:	4630      	mov	r0, r6
   2dac8:	f000 fadc 	bl	2e084 <_pend_current_thread>
	if (got_mutex == 0) {
   2dacc:	2800      	cmp	r0, #0
   2dace:	d0dc      	beq.n	2da8a <_impl_k_mutex_lock+0x3a>
	return list->head == list;
   2dad0:	6823      	ldr	r3, [r4, #0]
   2dad2:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2dad4:	429c      	cmp	r4, r3
   2dad6:	d007      	beq.n	2dae8 <_impl_k_mutex_lock+0x98>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   2dad8:	b133      	cbz	r3, 2dae8 <_impl_k_mutex_lock+0x98>
   2dada:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2dade:	4299      	cmp	r1, r3
   2dae0:	bfa8      	it	ge
   2dae2:	4619      	movge	r1, r3
   2dae4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   2dae8:	f04f 0320 	mov.w	r3, #32
   2daec:	f3ef 8511 	mrs	r5, BASEPRI
   2daf0:	f383 8811 	msr	BASEPRI, r3
	adjust_owner_prio(mutex, new_prio);
   2daf4:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   2daf6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2dafa:	4299      	cmp	r1, r3
   2dafc:	d001      	beq.n	2db02 <_impl_k_mutex_lock+0xb2>
		_thread_priority_set(mutex->owner, new_prio);
   2dafe:	f000 facf 	bl	2e0a0 <_thread_priority_set>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2db02:	f385 8811 	msr	BASEPRI, r5
	k_sched_unlock();
   2db06:	f000 f9db 	bl	2dec0 <k_sched_unlock>
	return -EAGAIN;
   2db0a:	f06f 000a 	mvn.w	r0, #10
   2db0e:	e7bf      	b.n	2da90 <_impl_k_mutex_lock+0x40>
   2db10:	20003780 	.word	0x20003780

0002db14 <_impl_k_mutex_unlock>:
   2db14:	4b1b      	ldr	r3, [pc, #108]	; (2db84 <_impl_k_mutex_unlock+0x70>)
   2db16:	689a      	ldr	r2, [r3, #8]
   2db18:	7bd3      	ldrb	r3, [r2, #15]
   2db1a:	3b01      	subs	r3, #1
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2db1c:	b570      	push	{r4, r5, r6, lr}
   2db1e:	4604      	mov	r4, r0
   2db20:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   2db22:	68c3      	ldr	r3, [r0, #12]
   2db24:	3b01      	subs	r3, #1
   2db26:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0U) {
   2db28:	bb3b      	cbnz	r3, 2db7a <_impl_k_mutex_unlock+0x66>
	__asm__ volatile(
   2db2a:	f04f 0320 	mov.w	r3, #32
   2db2e:	f3ef 8611 	mrs	r6, BASEPRI
   2db32:	f383 8811 	msr	BASEPRI, r3
		goto k_mutex_unlock_return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2db36:	6901      	ldr	r1, [r0, #16]
   2db38:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   2db3a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2db3e:	4299      	cmp	r1, r3
   2db40:	d001      	beq.n	2db46 <_impl_k_mutex_unlock+0x32>
		_thread_priority_set(mutex->owner, new_prio);
   2db42:	f000 faad 	bl	2e0a0 <_thread_priority_set>

	struct k_thread *new_owner = _unpend_first_thread(&mutex->wait_q);
   2db46:	4620      	mov	r0, r4
   2db48:	f000 f989 	bl	2de5e <_unpend_first_thread>
   2db4c:	4605      	mov	r5, r0

	mutex->owner = new_owner;
   2db4e:	60a0      	str	r0, [r4, #8]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner != NULL) {
   2db50:	b188      	cbz	r0, 2db76 <_impl_k_mutex_unlock+0x62>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2db52:	7b43      	ldrb	r3, [r0, #13]
   2db54:	06db      	lsls	r3, r3, #27
   2db56:	d104      	bne.n	2db62 <_impl_k_mutex_unlock+0x4e>
	if (_is_thread_ready(thread)) {
   2db58:	6a03      	ldr	r3, [r0, #32]
   2db5a:	3301      	adds	r3, #1
   2db5c:	d101      	bne.n	2db62 <_impl_k_mutex_unlock+0x4e>
		_add_thread_to_ready_q(thread);
   2db5e:	f000 f9e9 	bl	2df34 <_add_thread_to_ready_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2db62:	f386 8811 	msr	BASEPRI, r6
   2db66:	2300      	movs	r3, #0
   2db68:	66ab      	str	r3, [r5, #104]	; 0x68
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->lock_count++;
   2db6a:	68e3      	ldr	r3, [r4, #12]
   2db6c:	3301      	adds	r3, #1
   2db6e:	60e3      	str	r3, [r4, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   2db70:	f995 300e 	ldrsb.w	r3, [r5, #14]
   2db74:	6123      	str	r3, [r4, #16]
   2db76:	f386 8811 	msr	BASEPRI, r6

	irq_unlock(key);

k_mutex_unlock_return:
	k_sched_unlock();
}
   2db7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   2db7e:	f000 b99f 	b.w	2dec0 <k_sched_unlock>
   2db82:	bf00      	nop
   2db84:	20003780 	.word	0x20003780

0002db88 <queue_insert>:
			       struct k_queue *);
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   2db88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2db8a:	4604      	mov	r4, r0
   2db8c:	460e      	mov	r6, r1
   2db8e:	4617      	mov	r7, r2
	__asm__ volatile(
   2db90:	f04f 0220 	mov.w	r2, #32
   2db94:	f3ef 8511 	mrs	r5, BASEPRI
   2db98:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   2db9c:	b19b      	cbz	r3, 2dbc6 <queue_insert+0x3e>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   2db9e:	2008      	movs	r0, #8
   2dba0:	f7ff feb2 	bl	2d908 <z_thread_malloc>
		if (anode == NULL) {
   2dba4:	2800      	cmp	r0, #0
   2dba6:	d032      	beq.n	2dc0e <queue_insert+0x86>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0, "flags too large");
	node->next_and_flags = flags;
   2dba8:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   2dbaa:	6047      	str	r7, [r0, #4]
   2dbac:	6003      	str	r3, [r0, #0]
   2dbae:	6803      	ldr	r3, [r0, #0]
   2dbb0:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   2dbb4:	b956      	cbnz	r6, 2dbcc <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2dbb6:	6823      	ldr	r3, [r4, #0]
   2dbb8:	4313      	orrs	r3, r2
   2dbba:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2dbbc:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2dbbe:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2dbc0:	b96b      	cbnz	r3, 2dbde <queue_insert+0x56>
	list->tail = node;
   2dbc2:	6060      	str	r0, [r4, #4]
   2dbc4:	e00b      	b.n	2dbde <queue_insert+0x56>
	node->next_and_flags = flags;
   2dbc6:	603b      	str	r3, [r7, #0]
   2dbc8:	4638      	mov	r0, r7
   2dbca:	e7f0      	b.n	2dbae <queue_insert+0x26>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2dbcc:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2dbce:	f033 0303 	bics.w	r3, r3, #3
   2dbd2:	d114      	bne.n	2dbfe <queue_insert+0x76>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2dbd4:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2dbd6:	6862      	ldr	r2, [r4, #4]
   2dbd8:	b95a      	cbnz	r2, 2dbf2 <queue_insert+0x6a>
	list->head = node;
   2dbda:	e9c4 0000 	strd	r0, r0, [r4]
	_handle_obj_poll_events(&queue->poll_events, state);
   2dbde:	2104      	movs	r1, #4
   2dbe0:	f104 0008 	add.w	r0, r4, #8
   2dbe4:	f001 f8ea 	bl	2edbc <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   2dbe8:	4628      	mov	r0, r5
   2dbea:	f000 f951 	bl	2de90 <_reschedule>
	return 0;
   2dbee:	2000      	movs	r0, #0
}
   2dbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2dbf2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2dbf4:	f003 0303 	and.w	r3, r3, #3
   2dbf8:	4303      	orrs	r3, r0
   2dbfa:	6013      	str	r3, [r2, #0]
   2dbfc:	e7e1      	b.n	2dbc2 <queue_insert+0x3a>
   2dbfe:	4313      	orrs	r3, r2
   2dc00:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2dc02:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2dc04:	f003 0303 	and.w	r3, r3, #3
   2dc08:	4318      	orrs	r0, r3
   2dc0a:	6030      	str	r0, [r6, #0]
   2dc0c:	e7e7      	b.n	2dbde <queue_insert+0x56>
			return -ENOMEM;
   2dc0e:	f06f 000b 	mvn.w	r0, #11
   2dc12:	e7ed      	b.n	2dbf0 <queue_insert+0x68>

0002dc14 <z_queue_node_peek>:
{
   2dc14:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   2dc16:	4604      	mov	r4, r0
   2dc18:	b130      	cbz	r0, 2dc28 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2dc1a:	6802      	ldr	r2, [r0, #0]
   2dc1c:	0793      	lsls	r3, r2, #30
   2dc1e:	d003      	beq.n	2dc28 <z_queue_node_peek+0x14>
		ret = anode->data;
   2dc20:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2dc22:	b109      	cbz	r1, 2dc28 <z_queue_node_peek+0x14>
			k_free(anode);
   2dc24:	f7ff fe6b 	bl	2d8fe <k_free>
}
   2dc28:	4620      	mov	r0, r4
   2dc2a:	bd10      	pop	{r4, pc}

0002dc2c <_impl_k_queue_init>:
	list->head = NULL;
   2dc2c:	2300      	movs	r3, #0
	list->tail = NULL;
   2dc2e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   2dc32:	f100 0308 	add.w	r3, r0, #8
	list->tail = (sys_dnode_t *)list;
   2dc36:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   2dc3a:	4770      	bx	lr

0002dc3c <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   2dc3c:	460a      	mov	r2, r1
   2dc3e:	2300      	movs	r3, #0
   2dc40:	6841      	ldr	r1, [r0, #4]
   2dc42:	f7ff bfa1 	b.w	2db88 <queue_insert>

0002dc46 <k_queue_prepend>:
			   data, false);
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, NULL, data, false);
   2dc46:	2300      	movs	r3, #0
   2dc48:	460a      	mov	r2, r1
   2dc4a:	4619      	mov	r1, r3
   2dc4c:	f7ff bf9c 	b.w	2db88 <queue_insert>

0002dc50 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   2dc50:	b538      	push	{r3, r4, r5, lr}
   2dc52:	f04f 0320 	mov.w	r3, #32
   2dc56:	f3ef 8511 	mrs	r5, BASEPRI
   2dc5a:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2dc5e:	6843      	ldr	r3, [r0, #4]
   2dc60:	b953      	cbnz	r3, 2dc78 <k_queue_append_list+0x28>
	list->head = node;
   2dc62:	6001      	str	r1, [r0, #0]
	list->tail = node;
   2dc64:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   2dc66:	2104      	movs	r1, #4
   2dc68:	3008      	adds	r0, #8
   2dc6a:	f001 f8a7 	bl	2edbc <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   2dc6e:	4628      	mov	r0, r5
}
   2dc70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   2dc74:	f000 b90c 	b.w	2de90 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2dc78:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2dc7a:	f004 0403 	and.w	r4, r4, #3
   2dc7e:	4321      	orrs	r1, r4
   2dc80:	6019      	str	r1, [r3, #0]
   2dc82:	e7ef      	b.n	2dc64 <k_queue_append_list+0x14>

0002dc84 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   2dc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dc88:	4604      	mov	r4, r0
   2dc8a:	b086      	sub	sp, #24
   2dc8c:	460d      	mov	r5, r1
   2dc8e:	f04f 0320 	mov.w	r3, #32
   2dc92:	f3ef 8711 	mrs	r7, BASEPRI
   2dc96:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(sflist)
   2dc9a:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2dc9c:	b182      	cbz	r2, 2dcc0 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2dc9e:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2dca0:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2dca2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2dca6:	428a      	cmp	r2, r1
	list->head = node;
   2dca8:	6003      	str	r3, [r0, #0]
	list->tail = node;
   2dcaa:	bf08      	it	eq
   2dcac:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2dcae:	2101      	movs	r1, #1
   2dcb0:	4610      	mov	r0, r2
   2dcb2:	f7ff ffaf 	bl	2dc14 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2dcb6:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   2dcba:	b006      	add	sp, #24
   2dcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   2dcc0:	b919      	cbnz	r1, 2dcca <_impl_k_queue_get+0x46>
   2dcc2:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   2dcc6:	2000      	movs	r0, #0
   2dcc8:	e7f7      	b.n	2dcba <_impl_k_queue_get+0x36>
   2dcca:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   2dcce:	2104      	movs	r1, #4
   2dcd0:	4603      	mov	r3, r0
   2dcd2:	eb0d 0001 	add.w	r0, sp, r1
   2dcd6:	f000 ffd5 	bl	2ec84 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   2dcda:	1c6a      	adds	r2, r5, #1
   2dcdc:	d002      	beq.n	2dce4 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   2dcde:	f000 fe75 	bl	2e9cc <_impl_k_uptime_get_32>
   2dce2:	4606      	mov	r6, r0
{
   2dce4:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   2dce6:	9b04      	ldr	r3, [sp, #16]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
   2dce8:	1bea      	subs	r2, r5, r7
   2dcea:	f36f 3310 	bfc	r3, #12, #5
   2dcee:	2101      	movs	r1, #1
   2dcf0:	a801      	add	r0, sp, #4
   2dcf2:	9304      	str	r3, [sp, #16]
   2dcf4:	f000 ffdc 	bl	2ecb0 <_impl_k_poll>
		if (err && err != -EAGAIN) {
   2dcf8:	b108      	cbz	r0, 2dcfe <_impl_k_queue_get+0x7a>
   2dcfa:	300b      	adds	r0, #11
   2dcfc:	d1e3      	bne.n	2dcc6 <_impl_k_queue_get+0x42>
	__asm__ volatile(
   2dcfe:	f04f 0320 	mov.w	r3, #32
   2dd02:	f3ef 8811 	mrs	r8, BASEPRI
   2dd06:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(sflist)
   2dd0a:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   2dd0c:	b138      	cbz	r0, 2dd1e <_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2dd0e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2dd10:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2dd12:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2dd16:	4290      	cmp	r0, r2
	list->head = node;
   2dd18:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2dd1a:	bf08      	it	eq
   2dd1c:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   2dd1e:	2101      	movs	r1, #1
   2dd20:	f7ff ff78 	bl	2dc14 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2dd24:	f388 8811 	msr	BASEPRI, r8
		if ((val == NULL) && (timeout != K_FOREVER)) {
   2dd28:	2800      	cmp	r0, #0
   2dd2a:	d1c6      	bne.n	2dcba <_impl_k_queue_get+0x36>
   2dd2c:	1c6b      	adds	r3, r5, #1
   2dd2e:	d0da      	beq.n	2dce6 <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   2dd30:	f000 fe4c 	bl	2e9cc <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   2dd34:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   2dd36:	42bd      	cmp	r5, r7
   2dd38:	dad5      	bge.n	2dce6 <_impl_k_queue_get+0x62>
   2dd3a:	e7c4      	b.n	2dcc6 <_impl_k_queue_get+0x42>

0002dd3c <sys_dlist_remove>:
	node->prev->next = node->next;
   2dd3c:	e9d0 2300 	ldrd	r2, r3, [r0]
   2dd40:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2dd42:	6802      	ldr	r2, [r0, #0]
   2dd44:	6053      	str	r3, [r2, #4]
}
   2dd46:	4770      	bx	lr

0002dd48 <reset_time_slice>:

static int slice_time;
static int slice_max_prio;

static void reset_time_slice(void)
{
   2dd48:	b510      	push	{r4, lr}
	int to = _get_next_timeout_expiry();
   2dd4a:	f000 fd71 	bl	2e830 <_get_next_timeout_expiry>
   2dd4e:	4604      	mov	r4, r0

	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   2dd50:	f7d8 fa35 	bl	61be <z_clock_elapsed>
   2dd54:	4b07      	ldr	r3, [pc, #28]	; (2dd74 <reset_time_slice+0x2c>)
   2dd56:	4a08      	ldr	r2, [pc, #32]	; (2dd78 <reset_time_slice+0x30>)
   2dd58:	681b      	ldr	r3, [r3, #0]
   2dd5a:	4418      	add	r0, r3
   2dd5c:	6110      	str	r0, [r2, #16]

	if (to == K_FOREVER || slice_time < to) {
   2dd5e:	1c62      	adds	r2, r4, #1
   2dd60:	d001      	beq.n	2dd66 <reset_time_slice+0x1e>
   2dd62:	42a3      	cmp	r3, r4
   2dd64:	da05      	bge.n	2dd72 <reset_time_slice+0x2a>
		z_clock_set_timeout(slice_time, false);
   2dd66:	2100      	movs	r1, #0
   2dd68:	4618      	mov	r0, r3
	}
}
   2dd6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_clock_set_timeout(slice_time, false);
   2dd6e:	f7d8 ba25 	b.w	61bc <z_clock_set_timeout>
}
   2dd72:	bd10      	pop	{r4, pc}
   2dd74:	2000307c 	.word	0x2000307c
   2dd78:	20003780 	.word	0x20003780

0002dd7c <k_spin_lock.isra.10>:
	__asm__ volatile(
   2dd7c:	f04f 0320 	mov.w	r3, #32
   2dd80:	f3ef 8011 	mrs	r0, BASEPRI
   2dd84:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   2dd88:	4770      	bx	lr
	...

0002dd8c <update_cache>:
#else
static void reset_time_slice(void) { /* !CONFIG_TIMESLICING */ }
#endif

static void update_cache(int preempt_ok)
{
   2dd8c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2dd8e:	4c10      	ldr	r4, [pc, #64]	; (2ddd0 <update_cache+0x44>)
   2dd90:	4623      	mov	r3, r4
   2dd92:	f853 5f28 	ldr.w	r5, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2dd96:	429d      	cmp	r5, r3
   2dd98:	d000      	beq.n	2dd9c <update_cache+0x10>
	return th ? th : _current_cpu->idle_thread;
   2dd9a:	b905      	cbnz	r5, 2dd9e <update_cache+0x12>
   2dd9c:	68e5      	ldr	r5, [r4, #12]
   2dd9e:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok) {
   2dda0:	b978      	cbnz	r0, 2ddc2 <update_cache+0x36>
	if (!_current || !_is_thread_ready(_current)) {
   2dda2:	b173      	cbz	r3, 2ddc2 <update_cache+0x36>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2dda4:	7b5a      	ldrb	r2, [r3, #13]
   2dda6:	06d2      	lsls	r2, r2, #27
   2dda8:	d10b      	bne.n	2ddc2 <update_cache+0x36>
   2ddaa:	6a1a      	ldr	r2, [r3, #32]
   2ddac:	3201      	adds	r2, #1
   2ddae:	d108      	bne.n	2ddc2 <update_cache+0x36>
	if (_is_preempt(_current) || is_metairq(th)) {
   2ddb0:	89da      	ldrh	r2, [r3, #14]
   2ddb2:	2a7f      	cmp	r2, #127	; 0x7f
   2ddb4:	d905      	bls.n	2ddc2 <update_cache+0x36>
	return thread == _idle_thread;
   2ddb6:	4a07      	ldr	r2, [pc, #28]	; (2ddd4 <update_cache+0x48>)
	if (_is_idle(_current)) {
   2ddb8:	6812      	ldr	r2, [r2, #0]
   2ddba:	4293      	cmp	r3, r2
   2ddbc:	d001      	beq.n	2ddc2 <update_cache+0x36>
		if (th != _current) {
			reset_time_slice();
		}
		_kernel.ready_q.cache = th;
	} else {
		_kernel.ready_q.cache = _current;
   2ddbe:	6263      	str	r3, [r4, #36]	; 0x24
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   2ddc0:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   2ddc2:	42ab      	cmp	r3, r5
   2ddc4:	d001      	beq.n	2ddca <update_cache+0x3e>
			reset_time_slice();
   2ddc6:	f7ff ffbf 	bl	2dd48 <reset_time_slice>
		_kernel.ready_q.cache = th;
   2ddca:	6265      	str	r5, [r4, #36]	; 0x24
}
   2ddcc:	e7f8      	b.n	2ddc0 <update_cache+0x34>
   2ddce:	bf00      	nop
   2ddd0:	20003780 	.word	0x20003780
   2ddd4:	000376dc 	.word	0x000376dc

0002ddd8 <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   2ddd8:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2dddc:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2dde0:	4298      	cmp	r0, r3
   2dde2:	bfac      	ite	ge
   2dde4:	2000      	movge	r0, #0
   2dde6:	2001      	movlt	r0, #1
   2dde8:	4770      	bx	lr
	...

0002ddec <_remove_thread_from_ready_q>:
		update_cache(thread == _current);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   2ddec:	b510      	push	{r4, lr}
   2ddee:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   2ddf0:	f7ff ffc4 	bl	2dd7c <k_spin_lock.isra.10>
		if (_is_thread_queued(thread)) {
   2ddf4:	7b4b      	ldrb	r3, [r1, #13]
   2ddf6:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   2ddf8:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   2ddfa:	d50d      	bpl.n	2de18 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   2ddfc:	4608      	mov	r0, r1
   2ddfe:	f7ff ff9d 	bl	2dd3c <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   2de02:	7b4b      	ldrb	r3, [r1, #13]
   2de04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   2de08:	734b      	strb	r3, [r1, #13]
			update_cache(thread == _current);
   2de0a:	4b05      	ldr	r3, [pc, #20]	; (2de20 <_remove_thread_from_ready_q+0x34>)
   2de0c:	6898      	ldr	r0, [r3, #8]
   2de0e:	1a43      	subs	r3, r0, r1
   2de10:	4258      	negs	r0, r3
   2de12:	4158      	adcs	r0, r3
   2de14:	f7ff ffba 	bl	2dd8c <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2de18:	f384 8811 	msr	BASEPRI, r4
}
   2de1c:	bd10      	pop	{r4, pc}
   2de1e:	bf00      	nop
   2de20:	20003780 	.word	0x20003780

0002de24 <_find_first_thread_to_unpend>:
{
   2de24:	b508      	push	{r3, lr}
   2de26:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   2de28:	f7ff ffa8 	bl	2dd7c <k_spin_lock.isra.10>
	return list->head == list;
   2de2c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2de2e:	429a      	cmp	r2, r3
   2de30:	bf08      	it	eq
   2de32:	2300      	moveq	r3, #0
   2de34:	f380 8811 	msr	BASEPRI, r0
}
   2de38:	4618      	mov	r0, r3
   2de3a:	bd08      	pop	{r3, pc}

0002de3c <_unpend_thread_no_timeout>:
{
   2de3c:	b510      	push	{r4, lr}
   2de3e:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   2de40:	f7ff ff9c 	bl	2dd7c <k_spin_lock.isra.10>
   2de44:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   2de46:	4608      	mov	r0, r1
   2de48:	f7ff ff78 	bl	2dd3c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2de4c:	7b4b      	ldrb	r3, [r1, #13]
   2de4e:	f023 0302 	bic.w	r3, r3, #2
   2de52:	734b      	strb	r3, [r1, #13]
   2de54:	f384 8811 	msr	BASEPRI, r4
	thread->base.pended_on = NULL;
   2de58:	2300      	movs	r3, #0
   2de5a:	608b      	str	r3, [r1, #8]
}
   2de5c:	bd10      	pop	{r4, pc}

0002de5e <_unpend_first_thread>:
{
   2de5e:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   2de60:	2100      	movs	r1, #0
   2de62:	f7ff ffdf 	bl	2de24 <_find_first_thread_to_unpend>

	if (thread != NULL) {
   2de66:	4604      	mov	r4, r0
   2de68:	b128      	cbz	r0, 2de76 <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   2de6a:	f7ff ffe7 	bl	2de3c <_unpend_thread_no_timeout>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
   2de6e:	f104 0018 	add.w	r0, r4, #24
   2de72:	f000 fcab 	bl	2e7cc <_abort_timeout>
}
   2de76:	4620      	mov	r0, r4
   2de78:	bd10      	pop	{r4, pc}

0002de7a <_unpend_thread>:
{
   2de7a:	b510      	push	{r4, lr}
   2de7c:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   2de7e:	f7ff ffdd 	bl	2de3c <_unpend_thread_no_timeout>
   2de82:	f104 0018 	add.w	r0, r4, #24
}
   2de86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2de8a:	f000 bc9f 	b.w	2e7cc <_abort_timeout>
	...

0002de90 <_reschedule>:
   2de90:	f3ef 8305 	mrs	r3, IPSR
   2de94:	2b0d      	cmp	r3, #13
   2de96:	d80b      	bhi.n	2deb0 <_reschedule+0x20>
   2de98:	b11b      	cbz	r3, 2dea2 <_reschedule+0x12>
   2de9a:	4b07      	ldr	r3, [pc, #28]	; (2deb8 <_reschedule+0x28>)
   2de9c:	685b      	ldr	r3, [r3, #4]
   2de9e:	051b      	lsls	r3, r3, #20
   2dea0:	d506      	bpl.n	2deb0 <_reschedule+0x20>
	if (_get_next_ready_thread() != _current) {
   2dea2:	4b06      	ldr	r3, [pc, #24]	; (2debc <_reschedule+0x2c>)
   2dea4:	689a      	ldr	r2, [r3, #8]
   2dea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2dea8:	429a      	cmp	r2, r3
   2deaa:	d001      	beq.n	2deb0 <_reschedule+0x20>
   2deac:	f7d8 ba0a 	b.w	62c4 <__swap>
   2deb0:	f380 8811 	msr	BASEPRI, r0
}
   2deb4:	4770      	bx	lr
   2deb6:	bf00      	nop
   2deb8:	e000ed00 	.word	0xe000ed00
   2debc:	20003780 	.word	0x20003780

0002dec0 <k_sched_unlock>:
{
   2dec0:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   2dec2:	f7ff ff5b 	bl	2dd7c <k_spin_lock.isra.10>
		++_current->base.sched_locked;
   2dec6:	4b0a      	ldr	r3, [pc, #40]	; (2def0 <k_sched_unlock+0x30>)
   2dec8:	689a      	ldr	r2, [r3, #8]
   2deca:	7bd3      	ldrb	r3, [r2, #15]
   2decc:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   2dece:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   2ded0:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
   2ded2:	2001      	movs	r0, #1
   2ded4:	f7ff ff5a 	bl	2dd8c <update_cache>
   2ded8:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   2dedc:	f04f 0320 	mov.w	r3, #32
   2dee0:	f3ef 8011 	mrs	r0, BASEPRI
   2dee4:	f383 8811 	msr	BASEPRI, r3
}
   2dee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   2deec:	f7ff bfd0 	b.w	2de90 <_reschedule>
   2def0:	20003780 	.word	0x20003780

0002def4 <_priq_dumb_add>:
	return list->head == list;
   2def4:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2def6:	4298      	cmp	r0, r3
{
   2def8:	b510      	push	{r4, lr}
   2defa:	d013      	beq.n	2df24 <_priq_dumb_add+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2defc:	b193      	cbz	r3, 2df24 <_priq_dumb_add+0x30>
	if (t1->base.prio < t2->base.prio) {
   2defe:	f991 200e 	ldrsb.w	r2, [r1, #14]
   2df02:	f993 400e 	ldrsb.w	r4, [r3, #14]
   2df06:	4294      	cmp	r4, r2
   2df08:	dd06      	ble.n	2df18 <_priq_dumb_add+0x24>
		node->prev = insert_point->prev;
   2df0a:	685a      	ldr	r2, [r3, #4]
		node->next = insert_point;
   2df0c:	e9c1 3200 	strd	r3, r2, [r1]
		insert_point->prev->next = node;
   2df10:	685a      	ldr	r2, [r3, #4]
   2df12:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   2df14:	6059      	str	r1, [r3, #4]
}
   2df16:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   2df18:	6844      	ldr	r4, [r0, #4]
   2df1a:	42a3      	cmp	r3, r4
   2df1c:	d002      	beq.n	2df24 <_priq_dumb_add+0x30>
   2df1e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2df20:	2b00      	cmp	r3, #0
   2df22:	d1ee      	bne.n	2df02 <_priq_dumb_add+0xe>
	node->prev = list->tail;
   2df24:	6843      	ldr	r3, [r0, #4]
   2df26:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   2df28:	6843      	ldr	r3, [r0, #4]
	node->next = list;
   2df2a:	6008      	str	r0, [r1, #0]
	list->tail->next = node;
   2df2c:	6019      	str	r1, [r3, #0]
	list->tail = node;
   2df2e:	6041      	str	r1, [r0, #4]
   2df30:	e7f1      	b.n	2df16 <_priq_dumb_add+0x22>
	...

0002df34 <_add_thread_to_ready_q>:
{
   2df34:	b538      	push	{r3, r4, r5, lr}
   2df36:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   2df38:	f7ff ff20 	bl	2dd7c <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   2df3c:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   2df3e:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   2df40:	4806      	ldr	r0, [pc, #24]	; (2df5c <_add_thread_to_ready_q+0x28>)
   2df42:	f7ff ffd7 	bl	2def4 <_priq_dumb_add>
	thread->base.thread_state |= states;
   2df46:	7b63      	ldrb	r3, [r4, #13]
   2df48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2df4c:	7363      	strb	r3, [r4, #13]
		update_cache(0);
   2df4e:	2000      	movs	r0, #0
   2df50:	f7ff ff1c 	bl	2dd8c <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2df54:	f385 8811 	msr	BASEPRI, r5
}
   2df58:	bd38      	pop	{r3, r4, r5, pc}
   2df5a:	bf00      	nop
   2df5c:	200037a8 	.word	0x200037a8

0002df60 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2df60:	7b42      	ldrb	r2, [r0, #13]
   2df62:	06d2      	lsls	r2, r2, #27
   2df64:	d104      	bne.n	2df70 <_ready_thread+0x10>
	if (_is_thread_ready(thread)) {
   2df66:	6a03      	ldr	r3, [r0, #32]
   2df68:	3301      	adds	r3, #1
   2df6a:	d101      	bne.n	2df70 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   2df6c:	f7ff bfe2 	b.w	2df34 <_add_thread_to_ready_q>
}
   2df70:	4770      	bx	lr

0002df72 <z_thread_timeout>:
{
   2df72:	b538      	push	{r3, r4, r5, lr}
	if (th->base.pended_on != NULL) {
   2df74:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   2df78:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   2df7a:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   2df7e:	b113      	cbz	r3, 2df86 <z_thread_timeout+0x14>
		_unpend_thread_no_timeout(th);
   2df80:	4628      	mov	r0, r5
   2df82:	f7ff ff5b 	bl	2de3c <_unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2df86:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2df8a:	f023 0304 	bic.w	r3, r3, #4
   2df8e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	_ready_thread(th);
   2df92:	4628      	mov	r0, r5
}
   2df94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_ready_thread(th);
   2df98:	f7ff bfe2 	b.w	2df60 <_ready_thread>

0002df9c <_move_thread_to_end_of_prio_q>:
{
   2df9c:	b570      	push	{r4, r5, r6, lr}
   2df9e:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   2dfa0:	f7ff feec 	bl	2dd7c <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   2dfa4:	4d0b      	ldr	r5, [pc, #44]	; (2dfd4 <_move_thread_to_end_of_prio_q+0x38>)
	LOCKED(&sched_lock) {
   2dfa6:	4606      	mov	r6, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   2dfa8:	4620      	mov	r0, r4
   2dfaa:	f7ff fec7 	bl	2dd3c <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   2dfae:	4621      	mov	r1, r4
   2dfb0:	4628      	mov	r0, r5
   2dfb2:	f7ff ff9f 	bl	2def4 <_priq_dumb_add>
	thread->base.thread_state |= states;
   2dfb6:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   2dfb8:	f855 0c20 	ldr.w	r0, [r5, #-32]
   2dfbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2dfc0:	7363      	strb	r3, [r4, #13]
   2dfc2:	1b03      	subs	r3, r0, r4
   2dfc4:	4258      	negs	r0, r3
   2dfc6:	4158      	adcs	r0, r3
   2dfc8:	f7ff fee0 	bl	2dd8c <update_cache>
   2dfcc:	f386 8811 	msr	BASEPRI, r6
}
   2dfd0:	bd70      	pop	{r4, r5, r6, pc}
   2dfd2:	bf00      	nop
   2dfd4:	200037a8 	.word	0x200037a8

0002dfd8 <z_time_slice>:
	if (slice_time && sliceable(_current)) {
   2dfd8:	4b11      	ldr	r3, [pc, #68]	; (2e020 <z_time_slice+0x48>)
   2dfda:	681b      	ldr	r3, [r3, #0]
{
   2dfdc:	b510      	push	{r4, lr}
	if (slice_time && sliceable(_current)) {
   2dfde:	b1eb      	cbz	r3, 2e01c <z_time_slice+0x44>
   2dfe0:	4910      	ldr	r1, [pc, #64]	; (2e024 <z_time_slice+0x4c>)
   2dfe2:	688b      	ldr	r3, [r1, #8]
		&& !_is_thread_timeout_active(t);
   2dfe4:	89da      	ldrh	r2, [r3, #14]
   2dfe6:	2a7f      	cmp	r2, #127	; 0x7f
   2dfe8:	d818      	bhi.n	2e01c <z_time_slice+0x44>
		&& !_is_prio_higher(t->base.prio, slice_max_prio)
   2dfea:	4a0f      	ldr	r2, [pc, #60]	; (2e028 <z_time_slice+0x50>)
   2dfec:	f993 400e 	ldrsb.w	r4, [r3, #14]
   2dff0:	6812      	ldr	r2, [r2, #0]
   2dff2:	4294      	cmp	r4, r2
   2dff4:	db12      	blt.n	2e01c <z_time_slice+0x44>
	return thread == _idle_thread;
   2dff6:	4a0d      	ldr	r2, [pc, #52]	; (2e02c <z_time_slice+0x54>)
		&& !_is_idle(t)
   2dff8:	6812      	ldr	r2, [r2, #0]
   2dffa:	4293      	cmp	r3, r2
   2dffc:	d00e      	beq.n	2e01c <z_time_slice+0x44>
		&& !_is_thread_timeout_active(t);
   2dffe:	6a1a      	ldr	r2, [r3, #32]
   2e000:	3201      	adds	r2, #1
   2e002:	d10b      	bne.n	2e01c <z_time_slice+0x44>
		if (ticks >= _current_cpu->slice_ticks) {
   2e004:	690a      	ldr	r2, [r1, #16]
   2e006:	4282      	cmp	r2, r0
   2e008:	dc06      	bgt.n	2e018 <z_time_slice+0x40>
			_move_thread_to_end_of_prio_q(_current);
   2e00a:	4618      	mov	r0, r3
   2e00c:	f7ff ffc6 	bl	2df9c <_move_thread_to_end_of_prio_q>
}
   2e010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
   2e014:	f7ff be98 	b.w	2dd48 <reset_time_slice>
			_current_cpu->slice_ticks -= ticks;
   2e018:	1a12      	subs	r2, r2, r0
   2e01a:	610a      	str	r2, [r1, #16]
}
   2e01c:	bd10      	pop	{r4, pc}
   2e01e:	bf00      	nop
   2e020:	2000307c 	.word	0x2000307c
   2e024:	20003780 	.word	0x20003780
   2e028:	20003078 	.word	0x20003078
   2e02c:	000376dc 	.word	0x000376dc

0002e030 <pend>:
{
   2e030:	b570      	push	{r4, r5, r6, lr}
   2e032:	4604      	mov	r4, r0
   2e034:	460d      	mov	r5, r1
   2e036:	4616      	mov	r6, r2
	_remove_thread_from_ready_q(thread);
   2e038:	f7ff fed8 	bl	2ddec <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   2e03c:	7b63      	ldrb	r3, [r4, #13]
   2e03e:	f043 0302 	orr.w	r3, r3, #2
   2e042:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2e044:	b125      	cbz	r5, 2e050 <pend+0x20>
		thread->base.pended_on = wait_q;
   2e046:	60a5      	str	r5, [r4, #8]
		_priq_wait_add(&wait_q->waitq, thread);
   2e048:	4621      	mov	r1, r4
   2e04a:	4628      	mov	r0, r5
   2e04c:	f7ff ff52 	bl	2def4 <_priq_dumb_add>
	if (timeout != K_FOREVER) {
   2e050:	1c73      	adds	r3, r6, #1
   2e052:	d012      	beq.n	2e07a <pend+0x4a>
   2e054:	4809      	ldr	r0, [pc, #36]	; (2e07c <pend+0x4c>)
   2e056:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2e05a:	2100      	movs	r1, #0
   2e05c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2e060:	fbc5 0106 	smlal	r0, r1, r5, r6
   2e064:	2300      	movs	r3, #0
   2e066:	f7d2 f8d5 	bl	214 <__aeabi_ldivmod>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2e06a:	4905      	ldr	r1, [pc, #20]	; (2e080 <pend+0x50>)
   2e06c:	1c42      	adds	r2, r0, #1
   2e06e:	f104 0018 	add.w	r0, r4, #24
}
   2e072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2e076:	f000 bc09 	b.w	2e88c <_add_timeout>
   2e07a:	bd70      	pop	{r4, r5, r6, pc}
   2e07c:	0004ffff 	.word	0x0004ffff
   2e080:	0002df73 	.word	0x0002df73

0002e084 <_pend_current_thread>:
{
   2e084:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   2e086:	4b05      	ldr	r3, [pc, #20]	; (2e09c <_pend_current_thread+0x18>)
{
   2e088:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   2e08a:	6898      	ldr	r0, [r3, #8]
   2e08c:	f7ff ffd0 	bl	2e030 <pend>
   2e090:	4620      	mov	r0, r4
}
   2e092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e096:	f7d8 b915 	b.w	62c4 <__swap>
   2e09a:	bf00      	nop
   2e09c:	20003780 	.word	0x20003780

0002e0a0 <_thread_priority_set>:
{
   2e0a0:	b538      	push	{r3, r4, r5, lr}
   2e0a2:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   2e0a4:	f7ff fe6a 	bl	2dd7c <k_spin_lock.isra.10>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2e0a8:	7b63      	ldrb	r3, [r4, #13]
   2e0aa:	06db      	lsls	r3, r3, #27
   2e0ac:	4605      	mov	r5, r0
   2e0ae:	b249      	sxtb	r1, r1
   2e0b0:	d11b      	bne.n	2e0ea <_thread_priority_set+0x4a>
		if (need_sched) {
   2e0b2:	6a23      	ldr	r3, [r4, #32]
   2e0b4:	3301      	adds	r3, #1
   2e0b6:	d118      	bne.n	2e0ea <_thread_priority_set+0x4a>
	sys_dlist_remove(&thread->base.qnode_dlist);
   2e0b8:	4620      	mov	r0, r4
   2e0ba:	f7ff fe3f 	bl	2dd3c <sys_dlist_remove>
			_priq_run_add(&_kernel.ready_q.runq, thread);
   2e0be:	480d      	ldr	r0, [pc, #52]	; (2e0f4 <_thread_priority_set+0x54>)
			thread->base.prio = prio;
   2e0c0:	73a1      	strb	r1, [r4, #14]
			_priq_run_add(&_kernel.ready_q.runq, thread);
   2e0c2:	4621      	mov	r1, r4
   2e0c4:	f7ff ff16 	bl	2def4 <_priq_dumb_add>
			update_cache(1);
   2e0c8:	2001      	movs	r0, #1
   2e0ca:	f7ff fe5f 	bl	2dd8c <update_cache>
   2e0ce:	2301      	movs	r3, #1
   2e0d0:	f385 8811 	msr	BASEPRI, r5
	if (need_sched) {
   2e0d4:	b163      	cbz	r3, 2e0f0 <_thread_priority_set+0x50>
	__asm__ volatile(
   2e0d6:	f04f 0320 	mov.w	r3, #32
   2e0da:	f3ef 8011 	mrs	r0, BASEPRI
   2e0de:	f383 8811 	msr	BASEPRI, r3
}
   2e0e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		_reschedule(irq_lock());
   2e0e6:	f7ff bed3 	b.w	2de90 <_reschedule>
			thread->base.prio = prio;
   2e0ea:	73a1      	strb	r1, [r4, #14]
   2e0ec:	2300      	movs	r3, #0
   2e0ee:	e7ef      	b.n	2e0d0 <_thread_priority_set+0x30>
}
   2e0f0:	bd38      	pop	{r3, r4, r5, pc}
   2e0f2:	bf00      	nop
   2e0f4:	200037a8 	.word	0x200037a8

0002e0f8 <_unpend_all>:
	return CONTAINER_OF(sys_dlist_peek_head(l),
			    struct k_thread, base.qnode_dlist);
}

int _unpend_all(_wait_q_t *waitq)
{
   2e0f8:	b538      	push	{r3, r4, r5, lr}
   2e0fa:	4605      	mov	r5, r0
	int need_sched = 0;
   2e0fc:	2000      	movs	r0, #0
	return list->head == list;
   2e0fe:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e100:	42a5      	cmp	r5, r4
   2e102:	d000      	beq.n	2e106 <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq)) != NULL) {
   2e104:	b904      	cbnz	r4, 2e108 <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   2e106:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   2e108:	4620      	mov	r0, r4
   2e10a:	f7ff feb6 	bl	2de7a <_unpend_thread>
		_ready_thread(th);
   2e10e:	4620      	mov	r0, r4
   2e110:	f7ff ff26 	bl	2df60 <_ready_thread>
		need_sched = 1;
   2e114:	2001      	movs	r0, #1
   2e116:	e7f2      	b.n	2e0fe <_unpend_all+0x6>

0002e118 <_sched_init>:
	list->head = (sys_dnode_t *)list;
   2e118:	4b05      	ldr	r3, [pc, #20]	; (2e130 <_sched_init+0x18>)
   2e11a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2e11e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
	slice_time = _ms_to_ticks(duration_in_ms);
   2e122:	4a04      	ldr	r2, [pc, #16]	; (2e134 <_sched_init+0x1c>)
   2e124:	2300      	movs	r3, #0
   2e126:	6013      	str	r3, [r2, #0]
	slice_max_prio = prio;
   2e128:	4a03      	ldr	r2, [pc, #12]	; (2e138 <_sched_init+0x20>)
   2e12a:	6013      	str	r3, [r2, #0]
	reset_time_slice();
   2e12c:	f7ff be0c 	b.w	2dd48 <reset_time_slice>
   2e130:	20003780 	.word	0x20003780
   2e134:	2000307c 	.word	0x2000307c
   2e138:	20003078 	.word	0x20003078

0002e13c <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   2e13c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   2e13e:	4c12      	ldr	r4, [pc, #72]	; (2e188 <_impl_k_yield+0x4c>)
   2e140:	4b12      	ldr	r3, [pc, #72]	; (2e18c <_impl_k_yield+0x50>)
   2e142:	68a2      	ldr	r2, [r4, #8]
   2e144:	681b      	ldr	r3, [r3, #0]
   2e146:	429a      	cmp	r2, r3
   2e148:	d00f      	beq.n	2e16a <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   2e14a:	f7ff fe17 	bl	2dd7c <k_spin_lock.isra.10>
   2e14e:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   2e150:	68a0      	ldr	r0, [r4, #8]
   2e152:	f7ff fdf3 	bl	2dd3c <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   2e156:	68a1      	ldr	r1, [r4, #8]
   2e158:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2e15c:	f7ff feca 	bl	2def4 <_priq_dumb_add>
			update_cache(1);
   2e160:	2001      	movs	r0, #1
   2e162:	f7ff fe13 	bl	2dd8c <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2e166:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	(void)_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   2e16a:	68a2      	ldr	r2, [r4, #8]
   2e16c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e16e:	429a      	cmp	r2, r3
   2e170:	d009      	beq.n	2e186 <_impl_k_yield+0x4a>
	__asm__ volatile(
   2e172:	f04f 0320 	mov.w	r3, #32
   2e176:	f3ef 8011 	mrs	r0, BASEPRI
   2e17a:	f383 8811 	msr	BASEPRI, r3
		(void)_Swap(irq_lock());
	}
#endif
}
   2e17e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2e182:	f7d8 b89f 	b.w	62c4 <__swap>
   2e186:	bd38      	pop	{r3, r4, r5, pc}
   2e188:	20003780 	.word	0x20003780
   2e18c:	000376dc 	.word	0x000376dc

0002e190 <_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

s32_t _impl_k_sleep(s32_t duration)
{
   2e190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
   2e192:	4604      	mov	r4, r0
   2e194:	b918      	cbnz	r0, 2e19e <_impl_k_sleep+0xe>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   2e196:	f7ff ffd1 	bl	2e13c <_impl_k_yield>
		return __ticks_to_ms(ticks);
	}
#endif

	return 0;
}
   2e19a:	4620      	mov	r0, r4
   2e19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e19e:	4819      	ldr	r0, [pc, #100]	; (2e204 <_impl_k_sleep+0x74>)
   2e1a0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2e1a4:	2100      	movs	r1, #0
   2e1a6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2e1aa:	2300      	movs	r3, #0
   2e1ac:	fbc5 0104 	smlal	r0, r1, r5, r4
   2e1b0:	f7d2 f830 	bl	214 <__aeabi_ldivmod>
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   2e1b4:	1c45      	adds	r5, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   2e1b6:	f000 fc03 	bl	2e9c0 <z_tick_get_32>
   2e1ba:	182c      	adds	r4, r5, r0
   2e1bc:	f04f 0320 	mov.w	r3, #32
   2e1c0:	f3ef 8711 	mrs	r7, BASEPRI
   2e1c4:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
   2e1c8:	4e0f      	ldr	r6, [pc, #60]	; (2e208 <_impl_k_sleep+0x78>)
   2e1ca:	68b0      	ldr	r0, [r6, #8]
   2e1cc:	f7ff fe0e 	bl	2ddec <_remove_thread_from_ready_q>
   2e1d0:	68b0      	ldr	r0, [r6, #8]
   2e1d2:	490e      	ldr	r1, [pc, #56]	; (2e20c <_impl_k_sleep+0x7c>)
   2e1d4:	462a      	mov	r2, r5
   2e1d6:	3018      	adds	r0, #24
   2e1d8:	f000 fb58 	bl	2e88c <_add_timeout>
   2e1dc:	4638      	mov	r0, r7
   2e1de:	f7d8 f871 	bl	62c4 <__swap>
	ticks = expected_wakeup_time - z_tick_get_32();
   2e1e2:	f000 fbed 	bl	2e9c0 <z_tick_get_32>
   2e1e6:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
   2e1e8:	2800      	cmp	r0, #0
   2e1ea:	dd09      	ble.n	2e200 <_impl_k_sleep+0x70>
	return (u64_t)ticks * MSEC_PER_SEC / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
   2e1ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2e1f0:	2264      	movs	r2, #100	; 0x64
   2e1f2:	2300      	movs	r3, #0
   2e1f4:	fb80 0101 	smull	r0, r1, r0, r1
   2e1f8:	f7d2 f85c 	bl	2b4 <__aeabi_uldivmod>
   2e1fc:	4604      	mov	r4, r0
		return __ticks_to_ms(ticks);
   2e1fe:	e7cc      	b.n	2e19a <_impl_k_sleep+0xa>
	return 0;
   2e200:	2400      	movs	r4, #0
   2e202:	e7ca      	b.n	2e19a <_impl_k_sleep+0xa>
   2e204:	0004ffff 	.word	0x0004ffff
   2e208:	20003780 	.word	0x20003780
   2e20c:	0002df73 	.word	0x0002df73

0002e210 <_impl_k_wakeup>:
	return _impl_k_sleep(duration);
}
#endif

void _impl_k_wakeup(k_tid_t thread)
{
   2e210:	b538      	push	{r3, r4, r5, lr}
   2e212:	4605      	mov	r5, r0
   2e214:	f04f 0320 	mov.w	r3, #32
   2e218:	f3ef 8411 	mrs	r4, BASEPRI
   2e21c:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();

	/* verify first if thread is not waiting on an object */
	if (_is_thread_pending(thread)) {
   2e220:	7b43      	ldrb	r3, [r0, #13]
   2e222:	079a      	lsls	r2, r3, #30
   2e224:	d502      	bpl.n	2e22c <_impl_k_wakeup+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2e226:	f384 8811 	msr	BASEPRI, r4
	if (_is_in_isr()) {
		irq_unlock(key);
	} else {
		_reschedule(key);
	}
}
   2e22a:	bd38      	pop	{r3, r4, r5, pc}
	return _abort_timeout(&thread->base.timeout);
   2e22c:	3018      	adds	r0, #24
   2e22e:	f000 facd 	bl	2e7cc <_abort_timeout>
	if (_abort_thread_timeout(thread) == _INACTIVE) {
   2e232:	3001      	adds	r0, #1
   2e234:	d0f7      	beq.n	2e226 <_impl_k_wakeup+0x16>
	_ready_thread(thread);
   2e236:	4628      	mov	r0, r5
   2e238:	f7ff fe92 	bl	2df60 <_ready_thread>
   2e23c:	f3ef 8305 	mrs	r3, IPSR
   2e240:	2b0d      	cmp	r3, #13
   2e242:	d8f0      	bhi.n	2e226 <_impl_k_wakeup+0x16>
   2e244:	b11b      	cbz	r3, 2e24e <_impl_k_wakeup+0x3e>
   2e246:	4b04      	ldr	r3, [pc, #16]	; (2e258 <_impl_k_wakeup+0x48>)
   2e248:	685b      	ldr	r3, [r3, #4]
   2e24a:	051b      	lsls	r3, r3, #20
   2e24c:	d5eb      	bpl.n	2e226 <_impl_k_wakeup+0x16>
		_reschedule(key);
   2e24e:	4620      	mov	r0, r4
}
   2e250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		_reschedule(key);
   2e254:	f7ff be1c 	b.w	2de90 <_reschedule>
   2e258:	e000ed00 	.word	0xe000ed00

0002e25c <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   2e25c:	4b01      	ldr	r3, [pc, #4]	; (2e264 <_impl_k_current_get+0x8>)
   2e25e:	6898      	ldr	r0, [r3, #8]
   2e260:	4770      	bx	lr
   2e262:	bf00      	nop
   2e264:	20003780 	.word	0x20003780

0002e268 <_impl_k_sem_init>:
	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   2e268:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2e26c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2e270:	e9c0 0000 	strd	r0, r0, [r0]
   2e274:	e9c0 3304 	strd	r3, r3, [r0, #16]

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	_k_object_init(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_INIT);
}
   2e278:	4770      	bx	lr

0002e27a <_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void _impl_k_sem_give(struct k_sem *sem)
{
   2e27a:	b570      	push	{r4, r5, r6, lr}
   2e27c:	4604      	mov	r4, r0
	__asm__ volatile(
   2e27e:	f04f 0320 	mov.w	r3, #32
   2e282:	f3ef 8611 	mrs	r6, BASEPRI
   2e286:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   2e28a:	f7ff fde8 	bl	2de5e <_unpend_first_thread>
	if (thread != NULL) {
   2e28e:	4605      	mov	r5, r0
   2e290:	b170      	cbz	r0, 2e2b0 <_impl_k_sem_give+0x36>
   2e292:	7b43      	ldrb	r3, [r0, #13]
   2e294:	06db      	lsls	r3, r3, #27
   2e296:	d104      	bne.n	2e2a2 <_impl_k_sem_give+0x28>
	if (_is_thread_ready(thread)) {
   2e298:	6a03      	ldr	r3, [r0, #32]
   2e29a:	3301      	adds	r3, #1
   2e29c:	d101      	bne.n	2e2a2 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   2e29e:	f7ff fe49 	bl	2df34 <_add_thread_to_ready_q>
   2e2a2:	2300      	movs	r3, #0
   2e2a4:	66ab      	str	r3, [r5, #104]	; 0x68
	u32_t key = irq_lock();

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	_reschedule(key);
   2e2a6:	4630      	mov	r0, r6
}
   2e2a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   2e2ac:	f7ff bdf0 	b.w	2de90 <_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2e2b0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2e2b4:	429a      	cmp	r2, r3
   2e2b6:	bf18      	it	ne
   2e2b8:	3301      	addne	r3, #1
   2e2ba:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2e2bc:	2102      	movs	r1, #2
   2e2be:	f104 0010 	add.w	r0, r4, #16
   2e2c2:	f000 fd7b 	bl	2edbc <_handle_obj_poll_events>
   2e2c6:	e7ee      	b.n	2e2a6 <_impl_k_sem_give+0x2c>

0002e2c8 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   2e2c8:	b410      	push	{r4}
   2e2ca:	460a      	mov	r2, r1
   2e2cc:	4604      	mov	r4, r0
   2e2ce:	f04f 0320 	mov.w	r3, #32
   2e2d2:	f3ef 8011 	mrs	r0, BASEPRI
   2e2d6:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(((_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	u32_t key = irq_lock();

	if (likely(sem->count > 0U)) {
   2e2da:	68a3      	ldr	r3, [r4, #8]
   2e2dc:	b133      	cbz	r3, 2e2ec <_impl_k_sem_take+0x24>
		sem->count--;
   2e2de:	3b01      	subs	r3, #1
   2e2e0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2e2e2:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   2e2e6:	2000      	movs	r0, #0
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   2e2e8:	bc10      	pop	{r4}
   2e2ea:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   2e2ec:	b921      	cbnz	r1, 2e2f8 <_impl_k_sem_take+0x30>
   2e2ee:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   2e2f2:	f06f 000f 	mvn.w	r0, #15
   2e2f6:	e7f7      	b.n	2e2e8 <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   2e2f8:	4621      	mov	r1, r4
}
   2e2fa:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   2e2fc:	f7ff bec2 	b.w	2e084 <_pend_current_thread>

0002e300 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   2e300:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   2e302:	4c08      	ldr	r4, [pc, #32]	; (2e324 <k_sys_work_q_init+0x24>)
   2e304:	4908      	ldr	r1, [pc, #32]	; (2e328 <k_sys_work_q_init+0x28>)
   2e306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e30a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2e30e:	4620      	mov	r0, r4
   2e310:	f000 f980 	bl	2e614 <k_work_q_start>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   2e314:	f104 0010 	add.w	r0, r4, #16
   2e318:	4904      	ldr	r1, [pc, #16]	; (2e32c <k_sys_work_q_init+0x2c>)
   2e31a:	f000 f84d 	bl	2e3b8 <_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   2e31e:	2000      	movs	r0, #0
   2e320:	bd10      	pop	{r4, pc}
   2e322:	bf00      	nop
   2e324:	200037b0 	.word	0x200037b0
   2e328:	2000d2f0 	.word	0x2000d2f0
   2e32c:	0003770e 	.word	0x0003770e

0002e330 <schedule_new_thread.part.8>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   2e330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e332:	4605      	mov	r5, r0
   2e334:	460f      	mov	r7, r1
	__asm__ volatile(
   2e336:	f04f 0320 	mov.w	r3, #32
   2e33a:	f3ef 8411 	mrs	r4, BASEPRI
   2e33e:	f383 8811 	msr	BASEPRI, r3
	return (s32_t)ceiling_fraction(
   2e342:	480a      	ldr	r0, [pc, #40]	; (2e36c <schedule_new_thread.part.8+0x3c>)
   2e344:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2e348:	2100      	movs	r1, #0
   2e34a:	2300      	movs	r3, #0
   2e34c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2e350:	fbc6 0107 	smlal	r0, r1, r6, r7
   2e354:	f7d1 ff5e 	bl	214 <__aeabi_ldivmod>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2e358:	4905      	ldr	r1, [pc, #20]	; (2e370 <schedule_new_thread.part.8+0x40>)
   2e35a:	1c42      	adds	r2, r0, #1
   2e35c:	f105 0018 	add.w	r0, r5, #24
   2e360:	f000 fa94 	bl	2e88c <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2e364:	f384 8811 	msr	BASEPRI, r4
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   2e368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e36a:	bf00      	nop
   2e36c:	0004ffff 	.word	0x0004ffff
   2e370:	0002df73 	.word	0x0002df73

0002e374 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2e374:	7b42      	ldrb	r2, [r0, #13]
   2e376:	06d2      	lsls	r2, r2, #27
   2e378:	d104      	bne.n	2e384 <_ready_thread+0x10>
	if (_is_thread_ready(thread)) {
   2e37a:	6a03      	ldr	r3, [r0, #32]
   2e37c:	3301      	adds	r3, #1
   2e37e:	d101      	bne.n	2e384 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   2e380:	f7ff bdd8 	b.w	2df34 <_add_thread_to_ready_q>
}
   2e384:	4770      	bx	lr

0002e386 <k_thread_foreach>:
}
   2e386:	4770      	bx	lr

0002e388 <k_is_in_isr>:
   2e388:	f3ef 8005 	mrs	r0, IPSR
   2e38c:	280d      	cmp	r0, #13
   2e38e:	d807      	bhi.n	2e3a0 <k_is_in_isr+0x18>
   2e390:	b138      	cbz	r0, 2e3a2 <k_is_in_isr+0x1a>
   2e392:	4b04      	ldr	r3, [pc, #16]	; (2e3a4 <k_is_in_isr+0x1c>)
   2e394:	6858      	ldr	r0, [r3, #4]
   2e396:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   2e39a:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   2e39e:	4770      	bx	lr
   2e3a0:	2001      	movs	r0, #1
}
   2e3a2:	4770      	bx	lr
   2e3a4:	e000ed00 	.word	0xe000ed00

0002e3a8 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   2e3a8:	4b02      	ldr	r3, [pc, #8]	; (2e3b4 <_is_thread_essential+0xc>)
   2e3aa:	689b      	ldr	r3, [r3, #8]
   2e3ac:	7b18      	ldrb	r0, [r3, #12]
}
   2e3ae:	f000 0001 	and.w	r0, r0, #1
   2e3b2:	4770      	bx	lr
   2e3b4:	20003780 	.word	0x20003780

0002e3b8 <_impl_k_thread_name_set>:
}
   2e3b8:	4770      	bx	lr

0002e3ba <_impl_k_thread_start>:
{
   2e3ba:	b510      	push	{r4, lr}
	__asm__ volatile(
   2e3bc:	f04f 0320 	mov.w	r3, #32
   2e3c0:	f3ef 8411 	mrs	r4, BASEPRI
   2e3c4:	f383 8811 	msr	BASEPRI, r3
	if (_has_thread_started(thread)) {
   2e3c8:	7b43      	ldrb	r3, [r0, #13]
   2e3ca:	0759      	lsls	r1, r3, #29
   2e3cc:	d402      	bmi.n	2e3d4 <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2e3ce:	f384 8811 	msr	BASEPRI, r4
}
   2e3d2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2e3d4:	f023 0304 	bic.w	r3, r3, #4
   2e3d8:	7343      	strb	r3, [r0, #13]
	_ready_thread(thread);
   2e3da:	f7ff ffcb 	bl	2e374 <_ready_thread>
	_reschedule(key);
   2e3de:	4620      	mov	r0, r4
}
   2e3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   2e3e4:	f7ff bd54 	b.w	2de90 <_reschedule>

0002e3e8 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   2e3e8:	b530      	push	{r4, r5, lr}
   2e3ea:	b087      	sub	sp, #28
   2e3ec:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2e3ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2e3f0:	9504      	str	r5, [sp, #16]
   2e3f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2e3f4:	9503      	str	r5, [sp, #12]
   2e3f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2e3f8:	9502      	str	r5, [sp, #8]
   2e3fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2e3fc:	9501      	str	r5, [sp, #4]
   2e3fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2e400:	9500      	str	r5, [sp, #0]
   2e402:	f7d8 f949 	bl	6698 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   2e406:	4b04      	ldr	r3, [pc, #16]	; (2e418 <_setup_new_thread+0x30>)
   2e408:	689b      	ldr	r3, [r3, #8]
   2e40a:	b913      	cbnz	r3, 2e412 <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   2e40c:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   2e40e:	b007      	add	sp, #28
   2e410:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   2e412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2e414:	e7fa      	b.n	2e40c <_setup_new_thread+0x24>
   2e416:	bf00      	nop
   2e418:	20003780 	.word	0x20003780

0002e41c <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   2e41c:	b570      	push	{r4, r5, r6, lr}
   2e41e:	b086      	sub	sp, #24
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");

	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2e420:	2600      	movs	r6, #0
   2e422:	9605      	str	r6, [sp, #20]
   2e424:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2e426:	9604      	str	r6, [sp, #16]
   2e428:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   2e42a:	9603      	str	r6, [sp, #12]
   2e42c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   2e42e:	9602      	str	r6, [sp, #8]
   2e430:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   2e432:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2e434:	9601      	str	r6, [sp, #4]
   2e436:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2e438:	9600      	str	r6, [sp, #0]
{
   2e43a:	4604      	mov	r4, r0
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2e43c:	f7ff ffd4 	bl	2e3e8 <_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   2e440:	1c6b      	adds	r3, r5, #1
   2e442:	d003      	beq.n	2e44c <_impl_k_thread_create+0x30>
	if (delay == 0) {
   2e444:	b92d      	cbnz	r5, 2e452 <_impl_k_thread_create+0x36>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
   2e446:	4620      	mov	r0, r4
   2e448:	f7ff ffb7 	bl	2e3ba <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   2e44c:	4620      	mov	r0, r4
   2e44e:	b006      	add	sp, #24
   2e450:	bd70      	pop	{r4, r5, r6, pc}
   2e452:	4629      	mov	r1, r5
   2e454:	4620      	mov	r0, r4
   2e456:	f7ff ff6b 	bl	2e330 <schedule_new_thread.part.8>
   2e45a:	e7f7      	b.n	2e44c <_impl_k_thread_create+0x30>

0002e45c <_k_thread_single_suspend>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2e45c:	7b43      	ldrb	r3, [r0, #13]
   2e45e:	06db      	lsls	r3, r3, #27
}
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_MULTITHREADING */

void _k_thread_single_suspend(struct k_thread *thread)
{
   2e460:	b510      	push	{r4, lr}
   2e462:	4604      	mov	r4, r0
   2e464:	d104      	bne.n	2e470 <_k_thread_single_suspend+0x14>
	if (_is_thread_ready(thread)) {
   2e466:	6a03      	ldr	r3, [r0, #32]
   2e468:	3301      	adds	r3, #1
   2e46a:	d101      	bne.n	2e470 <_k_thread_single_suspend+0x14>
		_remove_thread_from_ready_q(thread);
   2e46c:	f7ff fcbe 	bl	2ddec <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2e470:	7b63      	ldrb	r3, [r4, #13]
   2e472:	f043 0310 	orr.w	r3, r3, #16
   2e476:	7363      	strb	r3, [r4, #13]
	}

	_mark_thread_as_suspended(thread);
}
   2e478:	bd10      	pop	{r4, pc}
	...

0002e47c <_impl_k_thread_suspend>:

void _impl_k_thread_suspend(struct k_thread *thread)
{
   2e47c:	b538      	push	{r3, r4, r5, lr}
   2e47e:	4605      	mov	r5, r0
	__asm__ volatile(
   2e480:	f04f 0320 	mov.w	r3, #32
   2e484:	f3ef 8411 	mrs	r4, BASEPRI
   2e488:	f383 8811 	msr	BASEPRI, r3
	unsigned int  key = irq_lock();

	_k_thread_single_suspend(thread);
   2e48c:	f7ff ffe6 	bl	2e45c <_k_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
   2e490:	4b05      	ldr	r3, [pc, #20]	; (2e4a8 <_impl_k_thread_suspend+0x2c>)
   2e492:	689b      	ldr	r3, [r3, #8]
   2e494:	42ab      	cmp	r3, r5
   2e496:	d104      	bne.n	2e4a2 <_impl_k_thread_suspend+0x26>
   2e498:	4620      	mov	r0, r4
		(void)_Swap(key);
	} else {
		irq_unlock(key);
	}
}
   2e49a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2e49e:	f7d7 bf11 	b.w	62c4 <__swap>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2e4a2:	f384 8811 	msr	BASEPRI, r4
   2e4a6:	bd38      	pop	{r3, r4, r5, pc}
   2e4a8:	20003780 	.word	0x20003780

0002e4ac <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   2e4ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2e4ae:	b510      	push	{r4, lr}
   2e4b0:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   2e4b2:	b103      	cbz	r3, 2e4b6 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   2e4b4:	4798      	blx	r3
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2e4b6:	7b63      	ldrb	r3, [r4, #13]
   2e4b8:	06da      	lsls	r2, r3, #27
   2e4ba:	d10a      	bne.n	2e4d2 <_k_thread_single_abort+0x26>
	}

	if (_is_thread_ready(thread)) {
   2e4bc:	6a22      	ldr	r2, [r4, #32]
   2e4be:	3201      	adds	r2, #1
   2e4c0:	d107      	bne.n	2e4d2 <_k_thread_single_abort+0x26>
		_remove_thread_from_ready_q(thread);
   2e4c2:	4620      	mov	r0, r4
   2e4c4:	f7ff fc92 	bl	2ddec <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			(void)_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   2e4c8:	7b63      	ldrb	r3, [r4, #13]
   2e4ca:	f043 0308 	orr.w	r3, r3, #8
   2e4ce:	7363      	strb	r3, [r4, #13]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   2e4d0:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
   2e4d2:	079b      	lsls	r3, r3, #30
   2e4d4:	d502      	bpl.n	2e4dc <_k_thread_single_abort+0x30>
			_unpend_thread_no_timeout(thread);
   2e4d6:	4620      	mov	r0, r4
   2e4d8:	f7ff fcb0 	bl	2de3c <_unpend_thread_no_timeout>
		if (_is_thread_timeout_active(thread)) {
   2e4dc:	6a23      	ldr	r3, [r4, #32]
   2e4de:	3301      	adds	r3, #1
   2e4e0:	d0f2      	beq.n	2e4c8 <_k_thread_single_abort+0x1c>
	return _abort_timeout(&thread->base.timeout);
   2e4e2:	f104 0018 	add.w	r0, r4, #24
   2e4e6:	f000 f971 	bl	2e7cc <_abort_timeout>
   2e4ea:	e7ed      	b.n	2e4c8 <_k_thread_single_abort+0x1c>

0002e4ec <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   2e4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   2e4ee:	4f23      	ldr	r7, [pc, #140]	; (2e57c <_init_static_threads+0x90>)
   2e4f0:	4d23      	ldr	r5, [pc, #140]	; (2e580 <_init_static_threads+0x94>)
{
   2e4f2:	b087      	sub	sp, #28
   2e4f4:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   2e4f6:	42bd      	cmp	r5, r7
   2e4f8:	f105 0430 	add.w	r4, r5, #48	; 0x30
   2e4fc:	d314      	bcc.n	2e528 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   2e4fe:	4b21      	ldr	r3, [pc, #132]	; (2e584 <_init_static_threads+0x98>)
   2e500:	689a      	ldr	r2, [r3, #8]
   2e502:	7bd3      	ldrb	r3, [r2, #15]
   2e504:	3b01      	subs	r3, #1
   2e506:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   2e508:	f04f 0320 	mov.w	r3, #32
   2e50c:	f3ef 8511 	mrs	r5, BASEPRI
   2e510:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   2e514:	4c1a      	ldr	r4, [pc, #104]	; (2e580 <_init_static_threads+0x94>)
   2e516:	42b4      	cmp	r4, r6
   2e518:	d323      	bcc.n	2e562 <_init_static_threads+0x76>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2e51a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   2e51e:	b007      	add	sp, #28
   2e520:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   2e524:	f7ff bccc 	b.w	2dec0 <k_sched_unlock>
		_setup_new_thread(
   2e528:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2e52c:	9305      	str	r3, [sp, #20]
   2e52e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2e532:	9304      	str	r3, [sp, #16]
   2e534:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2e538:	9303      	str	r3, [sp, #12]
   2e53a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2e53e:	9302      	str	r3, [sp, #8]
   2e540:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2e544:	9301      	str	r3, [sp, #4]
   2e546:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2e54a:	9300      	str	r3, [sp, #0]
   2e54c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2e550:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2e554:	f7ff ff48 	bl	2e3e8 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2e558:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2e55c:	64dd      	str	r5, [r3, #76]	; 0x4c
   2e55e:	4625      	mov	r5, r4
   2e560:	e7c9      	b.n	2e4f6 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   2e562:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2e564:	1c4b      	adds	r3, r1, #1
   2e566:	d003      	beq.n	2e570 <_init_static_threads+0x84>
			schedule_new_thread(thread_data->init_thread,
   2e568:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   2e56a:	b919      	cbnz	r1, 2e574 <_init_static_threads+0x88>
   2e56c:	f7ff ff25 	bl	2e3ba <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2e570:	3430      	adds	r4, #48	; 0x30
   2e572:	e7d0      	b.n	2e516 <_init_static_threads+0x2a>
   2e574:	f7ff fedc 	bl	2e330 <schedule_new_thread.part.8>
   2e578:	e7fa      	b.n	2e570 <_init_static_threads+0x84>
   2e57a:	bf00      	nop
   2e57c:	2000e2f8 	.word	0x2000e2f8
   2e580:	2000e2c8 	.word	0x2000e2c8
   2e584:	20003780 	.word	0x20003780

0002e588 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   2e588:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   2e58a:	2300      	movs	r3, #0
   2e58c:	73c3      	strb	r3, [r0, #15]
	t->dticks = _INACTIVE;
   2e58e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	thread_base->thread_state = (u8_t)initial_state;
   2e592:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   2e594:	7381      	strb	r1, [r0, #14]
   2e596:	6203      	str	r3, [r0, #32]

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
   2e598:	4770      	bx	lr

0002e59a <k_work_submit_to_queue>:
{
   2e59a:	b500      	push	{lr}
   2e59c:	f101 0308 	add.w	r3, r1, #8
   2e5a0:	f3bf 8f5b 	dmb	ish
   2e5a4:	e853 2f00 	ldrex	r2, [r3]
   2e5a8:	f042 0c01 	orr.w	ip, r2, #1
   2e5ac:	e843 ce00 	strex	lr, ip, [r3]
   2e5b0:	f1be 0f00 	cmp.w	lr, #0
   2e5b4:	d1f6      	bne.n	2e5a4 <k_work_submit_to_queue+0xa>
   2e5b6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2e5ba:	07d3      	lsls	r3, r2, #31
   2e5bc:	d403      	bmi.n	2e5c6 <k_work_submit_to_queue+0x2c>
}
   2e5be:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2e5c2:	f7ff bb3b 	b.w	2dc3c <k_queue_append>
}
   2e5c6:	f85d fb04 	ldr.w	pc, [sp], #4

0002e5ca <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   2e5ca:	f1a0 010c 	sub.w	r1, r0, #12
   2e5ce:	6900      	ldr	r0, [r0, #16]
   2e5d0:	f7ff bfe3 	b.w	2e59a <k_work_submit_to_queue>

0002e5d4 <work_q_main>:
{
   2e5d4:	b510      	push	{r4, lr}
   2e5d6:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   2e5d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2e5dc:	4620      	mov	r0, r4
   2e5de:	f7ff fb51 	bl	2dc84 <_impl_k_queue_get>
		if (work == NULL) {
   2e5e2:	4603      	mov	r3, r0
   2e5e4:	2800      	cmp	r0, #0
   2e5e6:	d0f7      	beq.n	2e5d8 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e5e8:	3308      	adds	r3, #8
		handler = work->handler;
   2e5ea:	6842      	ldr	r2, [r0, #4]
   2e5ec:	f3bf 8f5b 	dmb	ish
   2e5f0:	e853 1f00 	ldrex	r1, [r3]
   2e5f4:	f021 0c01 	bic.w	ip, r1, #1
   2e5f8:	e843 ce00 	strex	lr, ip, [r3]
   2e5fc:	f1be 0f00 	cmp.w	lr, #0
   2e600:	d1f6      	bne.n	2e5f0 <work_q_main+0x1c>
   2e602:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   2e606:	07cb      	lsls	r3, r1, #31
   2e608:	d500      	bpl.n	2e60c <work_q_main+0x38>
			handler(work);
   2e60a:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   2e60c:	f7ff fd96 	bl	2e13c <_impl_k_yield>
   2e610:	e7e2      	b.n	2e5d8 <work_q_main+0x4>
	...

0002e614 <k_work_q_start>:
{
   2e614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e618:	4605      	mov	r5, r0
   2e61a:	b086      	sub	sp, #24
   2e61c:	4698      	mov	r8, r3
   2e61e:	460e      	mov	r6, r1
   2e620:	4617      	mov	r7, r2
	(void)k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
   2e622:	f105 0410 	add.w	r4, r5, #16
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
   2e626:	f7ff fb01 	bl	2dc2c <_impl_k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   2e62a:	2000      	movs	r0, #0
   2e62c:	e9cd 0004 	strd	r0, r0, [sp, #16]
   2e630:	e9cd 0802 	strd	r0, r8, [sp, #8]
   2e634:	e9cd 5000 	strd	r5, r0, [sp]
   2e638:	4631      	mov	r1, r6
   2e63a:	4b06      	ldr	r3, [pc, #24]	; (2e654 <k_work_q_start+0x40>)
   2e63c:	463a      	mov	r2, r7
   2e63e:	4620      	mov	r0, r4
   2e640:	f7ff feec 	bl	2e41c <_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   2e644:	4904      	ldr	r1, [pc, #16]	; (2e658 <k_work_q_start+0x44>)
   2e646:	4620      	mov	r0, r4
}
   2e648:	b006      	add	sp, #24
   2e64a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e64e:	f7ff beb3 	b.w	2e3b8 <_impl_k_thread_name_set>
   2e652:	bf00      	nop
   2e654:	0002e5d5 	.word	0x0002e5d5
   2e658:	00035efb 	.word	0x00035efb

0002e65c <k_delayed_work_init>:
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   2e65c:	2300      	movs	r3, #0
   2e65e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e662:	e9c0 3100 	strd	r3, r1, [r0]
   2e666:	6083      	str	r3, [r0, #8]
   2e668:	6142      	str	r2, [r0, #20]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   2e66a:	61c3      	str	r3, [r0, #28]

	_k_object_init(work);
}
   2e66c:	4770      	bx	lr

0002e66e <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   2e66e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e670:	4604      	mov	r4, r0
	__asm__ volatile(
   2e672:	f04f 0320 	mov.w	r3, #32
   2e676:	f3ef 8511 	mrs	r5, BASEPRI
   2e67a:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();

	if (!work->work_q) {
   2e67e:	69c3      	ldr	r3, [r0, #28]
   2e680:	b923      	cbnz	r3, 2e68c <k_delayed_work_cancel+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2e682:	f385 8811 	msr	BASEPRI, r5

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   2e686:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   2e68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e68c:	f3bf 8f5b 	dmb	ish
   2e690:	6883      	ldr	r3, [r0, #8]
   2e692:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   2e696:	07db      	lsls	r3, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2e698:	f100 0608 	add.w	r6, r0, #8
   2e69c:	d532      	bpl.n	2e704 <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2e69e:	69c2      	ldr	r2, [r0, #28]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2e6a0:	6813      	ldr	r3, [r2, #0]
   2e6a2:	2100      	movs	r1, #0
   2e6a4:	2b00      	cmp	r3, #0
   2e6a6:	d0ec      	beq.n	2e682 <k_delayed_work_cancel+0x14>
   2e6a8:	429c      	cmp	r4, r3
   2e6aa:	d126      	bne.n	2e6fa <k_delayed_work_cancel+0x8c>
   2e6ac:	6823      	ldr	r3, [r4, #0]
   2e6ae:	6857      	ldr	r7, [r2, #4]
   2e6b0:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   2e6b4:	b9c1      	cbnz	r1, 2e6e8 <k_delayed_work_cancel+0x7a>
   2e6b6:	42bc      	cmp	r4, r7
	list->head = node;
   2e6b8:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2e6ba:	d100      	bne.n	2e6be <k_delayed_work_cancel+0x50>
	list->tail = node;
   2e6bc:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e6be:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2e6c0:	f003 0303 	and.w	r3, r3, #3
   2e6c4:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2e6c6:	2000      	movs	r0, #0
   2e6c8:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e6ca:	f3bf 8f5b 	dmb	ish
   2e6ce:	e856 3f00 	ldrex	r3, [r6]
   2e6d2:	f023 0301 	bic.w	r3, r3, #1
   2e6d6:	e846 3200 	strex	r2, r3, [r6]
   2e6da:	2a00      	cmp	r2, #0
   2e6dc:	d1f7      	bne.n	2e6ce <k_delayed_work_cancel+0x60>
   2e6de:	f3bf 8f5b 	dmb	ish
   2e6e2:	f385 8811 	msr	BASEPRI, r5
	return 0;
   2e6e6:	e7d0      	b.n	2e68a <k_delayed_work_cancel+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e6e8:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2e6ea:	f003 0303 	and.w	r3, r3, #3
   2e6ee:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   2e6f0:	42bc      	cmp	r4, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   2e6f2:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2e6f4:	bf08      	it	eq
   2e6f6:	6051      	streq	r1, [r2, #4]
   2e6f8:	e7e1      	b.n	2e6be <k_delayed_work_cancel+0x50>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2e6fa:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2e6fc:	4619      	mov	r1, r3
   2e6fe:	f020 0303 	bic.w	r3, r0, #3
   2e702:	e7cf      	b.n	2e6a4 <k_delayed_work_cancel+0x36>
		(void)_abort_timeout(&work->timeout);
   2e704:	300c      	adds	r0, #12
   2e706:	f000 f861 	bl	2e7cc <_abort_timeout>
   2e70a:	e7dc      	b.n	2e6c6 <k_delayed_work_cancel+0x58>

0002e70c <k_delayed_work_submit_to_queue>:
{
   2e70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e70e:	4605      	mov	r5, r0
   2e710:	460c      	mov	r4, r1
   2e712:	4616      	mov	r6, r2
	__asm__ volatile(
   2e714:	f04f 0320 	mov.w	r3, #32
   2e718:	f3ef 8711 	mrs	r7, BASEPRI
   2e71c:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   2e720:	69cb      	ldr	r3, [r1, #28]
   2e722:	b123      	cbz	r3, 2e72e <k_delayed_work_submit_to_queue+0x22>
   2e724:	4283      	cmp	r3, r0
   2e726:	d00b      	beq.n	2e740 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   2e728:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   2e72c:	e00d      	b.n	2e74a <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   2e72e:	b138      	cbz	r0, 2e740 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   2e730:	61e5      	str	r5, [r4, #28]
	if (!delay) {
   2e732:	b96e      	cbnz	r6, 2e750 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   2e734:	4621      	mov	r1, r4
   2e736:	4628      	mov	r0, r5
   2e738:	f7ff ff2f 	bl	2e59a <k_work_submit_to_queue>
	err = 0;
   2e73c:	2000      	movs	r0, #0
   2e73e:	e004      	b.n	2e74a <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   2e740:	4620      	mov	r0, r4
   2e742:	f7ff ff94 	bl	2e66e <k_delayed_work_cancel>
		if (err < 0) {
   2e746:	2800      	cmp	r0, #0
   2e748:	daf2      	bge.n	2e730 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2e74a:	f387 8811 	msr	BASEPRI, r7
}
   2e74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e750:	4808      	ldr	r0, [pc, #32]	; (2e774 <k_delayed_work_submit_to_queue+0x68>)
   2e752:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2e756:	2100      	movs	r1, #0
   2e758:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2e75c:	2300      	movs	r3, #0
   2e75e:	fbc5 0106 	smlal	r0, r1, r5, r6
   2e762:	f7d1 fd57 	bl	214 <__aeabi_ldivmod>
		_add_timeout(&work->timeout, work_timeout,
   2e766:	4904      	ldr	r1, [pc, #16]	; (2e778 <k_delayed_work_submit_to_queue+0x6c>)
   2e768:	1c42      	adds	r2, r0, #1
   2e76a:	f104 000c 	add.w	r0, r4, #12
   2e76e:	f000 f88d 	bl	2e88c <_add_timeout>
   2e772:	e7e3      	b.n	2e73c <k_delayed_work_submit_to_queue+0x30>
   2e774:	0004ffff 	.word	0x0004ffff
   2e778:	0002e5cb 	.word	0x0002e5cb

0002e77c <elapsed>:
	t->dticks = _INACTIVE;
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   2e77c:	4b03      	ldr	r3, [pc, #12]	; (2e78c <elapsed+0x10>)
   2e77e:	681b      	ldr	r3, [r3, #0]
   2e780:	b90b      	cbnz	r3, 2e786 <elapsed+0xa>
   2e782:	f7d7 bd1c 	b.w	61be <z_clock_elapsed>
}
   2e786:	2000      	movs	r0, #0
   2e788:	4770      	bx	lr
   2e78a:	bf00      	nop
   2e78c:	20003080 	.word	0x20003080

0002e790 <k_spin_lock.isra.1>:
	__asm__ volatile(
   2e790:	f04f 0320 	mov.w	r3, #32
   2e794:	f3ef 8011 	mrs	r0, BASEPRI
   2e798:	f383 8811 	msr	BASEPRI, r3
   2e79c:	4770      	bx	lr
	...

0002e7a0 <remove_timeout>:
{
   2e7a0:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2e7a2:	b140      	cbz	r0, 2e7b6 <remove_timeout+0x16>
   2e7a4:	4a08      	ldr	r2, [pc, #32]	; (2e7c8 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
   2e7a6:	6852      	ldr	r2, [r2, #4]
   2e7a8:	4290      	cmp	r0, r2
   2e7aa:	d004      	beq.n	2e7b6 <remove_timeout+0x16>
	if (next(t) != NULL) {
   2e7ac:	b11b      	cbz	r3, 2e7b6 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   2e7ae:	689a      	ldr	r2, [r3, #8]
   2e7b0:	6881      	ldr	r1, [r0, #8]
   2e7b2:	440a      	add	r2, r1
   2e7b4:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   2e7b6:	6842      	ldr	r2, [r0, #4]
   2e7b8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2e7ba:	6803      	ldr	r3, [r0, #0]
   2e7bc:	605a      	str	r2, [r3, #4]
	t->dticks = _INACTIVE;
   2e7be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e7c2:	6083      	str	r3, [r0, #8]
}
   2e7c4:	4770      	bx	lr
   2e7c6:	bf00      	nop
   2e7c8:	2000e104 	.word	0x2000e104

0002e7cc <_abort_timeout>:

	z_clock_set_timeout(_get_next_timeout_expiry(), false);
}

int _abort_timeout(struct _timeout *to)
{
   2e7cc:	b510      	push	{r4, lr}
   2e7ce:	4602      	mov	r2, r0
	int ret = _INACTIVE;

	LOCKED(&timeout_lock) {
   2e7d0:	f7ff ffde 	bl	2e790 <k_spin_lock.isra.1>
   2e7d4:	4604      	mov	r4, r0
		if (to->dticks != _INACTIVE) {
   2e7d6:	6890      	ldr	r0, [r2, #8]
   2e7d8:	1c43      	adds	r3, r0, #1
   2e7da:	d003      	beq.n	2e7e4 <_abort_timeout+0x18>
			remove_timeout(to);
   2e7dc:	4610      	mov	r0, r2
   2e7de:	f7ff ffdf 	bl	2e7a0 <remove_timeout>
			ret = 0;
   2e7e2:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2e7e4:	f384 8811 	msr	BASEPRI, r4
		}
	}

	return ret;
}
   2e7e8:	bd10      	pop	{r4, pc}
	...

0002e7ec <z_timeout_remaining>:

s32_t z_timeout_remaining(struct _timeout *to)
{
   2e7ec:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks = 0;

	if (to->dticks == _INACTIVE) {
   2e7ee:	6883      	ldr	r3, [r0, #8]
   2e7f0:	3301      	adds	r3, #1
{
   2e7f2:	4601      	mov	r1, r0
	if (to->dticks == _INACTIVE) {
   2e7f4:	d018      	beq.n	2e828 <z_timeout_remaining+0x3c>
		return 0;
	}

	LOCKED(&timeout_lock) {
   2e7f6:	f7ff ffcb 	bl	2e790 <k_spin_lock.isra.1>
	return list->head == list;
   2e7fa:	4a0c      	ldr	r2, [pc, #48]	; (2e82c <z_timeout_remaining+0x40>)
   2e7fc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e7fe:	4293      	cmp	r3, r2
   2e800:	d010      	beq.n	2e824 <z_timeout_remaining+0x38>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2e802:	6854      	ldr	r4, [r2, #4]
   2e804:	2200      	movs	r2, #0
		for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   2e806:	b91b      	cbnz	r3, 2e810 <z_timeout_remaining+0x24>
   2e808:	f380 8811 	msr	BASEPRI, r0
			}
		}
	}

	return ticks;
}
   2e80c:	4610      	mov	r0, r2
   2e80e:	bd38      	pop	{r3, r4, r5, pc}
			ticks += t->dticks;
   2e810:	689d      	ldr	r5, [r3, #8]
			if (to == t) {
   2e812:	428b      	cmp	r3, r1
			ticks += t->dticks;
   2e814:	442a      	add	r2, r5
			if (to == t) {
   2e816:	d0f7      	beq.n	2e808 <z_timeout_remaining+0x1c>
   2e818:	2b00      	cmp	r3, #0
   2e81a:	d0f5      	beq.n	2e808 <z_timeout_remaining+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2e81c:	42a3      	cmp	r3, r4
   2e81e:	d0f3      	beq.n	2e808 <z_timeout_remaining+0x1c>
   2e820:	681b      	ldr	r3, [r3, #0]
   2e822:	e7f0      	b.n	2e806 <z_timeout_remaining+0x1a>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e824:	2200      	movs	r2, #0
   2e826:	e7ef      	b.n	2e808 <z_timeout_remaining+0x1c>
		return 0;
   2e828:	2200      	movs	r2, #0
   2e82a:	e7ef      	b.n	2e80c <z_timeout_remaining+0x20>
   2e82c:	2000e104 	.word	0x2000e104

0002e830 <_get_next_timeout_expiry>:
}

s32_t _get_next_timeout_expiry(void)
{
	s32_t ret = 0;
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
   2e830:	4b13      	ldr	r3, [pc, #76]	; (2e880 <_get_next_timeout_expiry+0x50>)
   2e832:	781b      	ldrb	r3, [r3, #0]
{
   2e834:	b570      	push	{r4, r5, r6, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
   2e836:	2b00      	cmp	r3, #0
   2e838:	bf14      	ite	ne
   2e83a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   2e83e:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000

	LOCKED(&timeout_lock) {
   2e842:	f7ff ffa5 	bl	2e790 <k_spin_lock.isra.1>
	return list->head == list;
   2e846:	4b0f      	ldr	r3, [pc, #60]	; (2e884 <_get_next_timeout_expiry+0x54>)
   2e848:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e84a:	429c      	cmp	r4, r3
   2e84c:	4606      	mov	r6, r0
   2e84e:	d00a      	beq.n	2e866 <_get_next_timeout_expiry+0x36>
		struct _timeout *to = first();

		ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
   2e850:	b14c      	cbz	r4, 2e866 <_get_next_timeout_expiry+0x36>
   2e852:	68a5      	ldr	r5, [r4, #8]
   2e854:	f7ff ff92 	bl	2e77c <elapsed>
   2e858:	1a28      	subs	r0, r5, r0
   2e85a:	2800      	cmp	r0, #0
   2e85c:	db0d      	blt.n	2e87a <_get_next_timeout_expiry+0x4a>
   2e85e:	68a4      	ldr	r4, [r4, #8]
   2e860:	f7ff ff8c 	bl	2e77c <elapsed>
   2e864:	1a22      	subs	r2, r4, r0
   2e866:	f386 8811 	msr	BASEPRI, r6
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2e86a:	4b07      	ldr	r3, [pc, #28]	; (2e888 <_get_next_timeout_expiry+0x58>)
   2e86c:	691b      	ldr	r3, [r3, #16]
   2e86e:	b113      	cbz	r3, 2e876 <_get_next_timeout_expiry+0x46>
   2e870:	429a      	cmp	r2, r3
   2e872:	bfa8      	it	ge
   2e874:	461a      	movge	r2, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2e876:	4610      	mov	r0, r2
   2e878:	bd70      	pop	{r4, r5, r6, pc}
		ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
   2e87a:	2200      	movs	r2, #0
   2e87c:	e7f3      	b.n	2e866 <_get_next_timeout_expiry+0x36>
   2e87e:	bf00      	nop
   2e880:	20003084 	.word	0x20003084
   2e884:	2000e104 	.word	0x2000e104
   2e888:	20003780 	.word	0x20003780

0002e88c <_add_timeout>:
{
   2e88c:	b570      	push	{r4, r5, r6, lr}
	to->fn = fn;
   2e88e:	60c1      	str	r1, [r0, #12]
{
   2e890:	4615      	mov	r5, r2
   2e892:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   2e894:	f7ff ff7c 	bl	2e790 <k_spin_lock.isra.1>
   2e898:	4606      	mov	r6, r0
		to->dticks = ticks + elapsed();
   2e89a:	f7ff ff6f 	bl	2e77c <elapsed>
	return list->head == list;
   2e89e:	4a16      	ldr	r2, [pc, #88]	; (2e8f8 <_add_timeout+0x6c>)
   2e8a0:	6813      	ldr	r3, [r2, #0]
   2e8a2:	2d01      	cmp	r5, #1
   2e8a4:	bfac      	ite	ge
   2e8a6:	1940      	addge	r0, r0, r5
   2e8a8:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e8aa:	4293      	cmp	r3, r2
   2e8ac:	60a0      	str	r0, [r4, #8]
   2e8ae:	d001      	beq.n	2e8b4 <_add_timeout+0x28>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2e8b0:	6855      	ldr	r5, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   2e8b2:	b933      	cbnz	r3, 2e8c2 <_add_timeout+0x36>
	node->prev = list->tail;
   2e8b4:	6853      	ldr	r3, [r2, #4]
   2e8b6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2e8b8:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   2e8ba:	6022      	str	r2, [r4, #0]
	list->tail->next = node;
   2e8bc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2e8be:	6054      	str	r4, [r2, #4]
   2e8c0:	e00b      	b.n	2e8da <_add_timeout+0x4e>
			if (t->dticks > to->dticks) {
   2e8c2:	6898      	ldr	r0, [r3, #8]
   2e8c4:	68a1      	ldr	r1, [r4, #8]
   2e8c6:	4288      	cmp	r0, r1
   2e8c8:	dd10      	ble.n	2e8ec <_add_timeout+0x60>
		node->prev = insert_point->prev;
   2e8ca:	685a      	ldr	r2, [r3, #4]
				t->dticks -= to->dticks;
   2e8cc:	1a41      	subs	r1, r0, r1
   2e8ce:	6099      	str	r1, [r3, #8]
		node->next = insert_point;
   2e8d0:	e9c4 3200 	strd	r3, r2, [r4]
		insert_point->prev->next = node;
   2e8d4:	685a      	ldr	r2, [r3, #4]
   2e8d6:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   2e8d8:	605c      	str	r4, [r3, #4]
   2e8da:	f386 8811 	msr	BASEPRI, r6
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
   2e8de:	f7ff ffa7 	bl	2e830 <_get_next_timeout_expiry>
   2e8e2:	2100      	movs	r1, #0
}
   2e8e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
   2e8e8:	f7d7 bc68 	b.w	61bc <z_clock_set_timeout>
			to->dticks -= t->dticks;
   2e8ec:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   2e8ee:	429d      	cmp	r5, r3
   2e8f0:	60a1      	str	r1, [r4, #8]
   2e8f2:	d0df      	beq.n	2e8b4 <_add_timeout+0x28>
   2e8f4:	681b      	ldr	r3, [r3, #0]
   2e8f6:	e7dc      	b.n	2e8b2 <_add_timeout+0x26>
   2e8f8:	2000e104 	.word	0x2000e104

0002e8fc <z_clock_announce>:
{
   2e8fc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	announce_remaining = ticks;
   2e900:	4d21      	ldr	r5, [pc, #132]	; (2e988 <z_clock_announce+0x8c>)
	return list->head == list;
   2e902:	4e22      	ldr	r6, [pc, #136]	; (2e98c <z_clock_announce+0x90>)
					curr_tick += t->dticks;
   2e904:	4f22      	ldr	r7, [pc, #136]	; (2e990 <z_clock_announce+0x94>)
{
   2e906:	4604      	mov	r4, r0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e908:	f04f 0800 	mov.w	r8, #0
	z_time_slice(ticks);
   2e90c:	f7ff fb64 	bl	2dfd8 <z_time_slice>
	announce_remaining = ticks;
   2e910:	602c      	str	r4, [r5, #0]
		LOCKED(&timeout_lock) {
   2e912:	f7ff ff3d 	bl	2e790 <k_spin_lock.isra.1>
	return list->head == list;
   2e916:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e918:	42b4      	cmp	r4, r6
   2e91a:	4681      	mov	r9, r0
   2e91c:	d01c      	beq.n	2e958 <z_clock_announce+0x5c>
			if (t != NULL) {
   2e91e:	b194      	cbz	r4, 2e946 <z_clock_announce+0x4a>
				if (t->dticks <= announce_remaining) {
   2e920:	68a1      	ldr	r1, [r4, #8]
   2e922:	682b      	ldr	r3, [r5, #0]
   2e924:	4299      	cmp	r1, r3
   2e926:	dc15      	bgt.n	2e954 <z_clock_announce+0x58>
					announce_remaining -= t->dticks;
   2e928:	1a5b      	subs	r3, r3, r1
   2e92a:	602b      	str	r3, [r5, #0]
					curr_tick += t->dticks;
   2e92c:	e9d7 2300 	ldrd	r2, r3, [r7]
   2e930:	eb12 0b01 	adds.w	fp, r2, r1
   2e934:	eb43 7ce1 	adc.w	ip, r3, r1, asr #31
					t->dticks = 0;
   2e938:	f8c4 8008 	str.w	r8, [r4, #8]
					remove_timeout(t);
   2e93c:	4620      	mov	r0, r4
					curr_tick += t->dticks;
   2e93e:	e9c7 bc00 	strd	fp, ip, [r7]
					remove_timeout(t);
   2e942:	f7ff ff2d 	bl	2e7a0 <remove_timeout>
   2e946:	f389 8811 	msr	BASEPRI, r9
		if (t == NULL) {
   2e94a:	b13c      	cbz	r4, 2e95c <z_clock_announce+0x60>
		t->fn(t);
   2e94c:	68e3      	ldr	r3, [r4, #12]
   2e94e:	4620      	mov	r0, r4
   2e950:	4798      	blx	r3
		LOCKED(&timeout_lock) {
   2e952:	e7de      	b.n	2e912 <z_clock_announce+0x16>
					t->dticks -= announce_remaining;
   2e954:	1ac9      	subs	r1, r1, r3
   2e956:	60a1      	str	r1, [r4, #8]
   2e958:	2400      	movs	r4, #0
   2e95a:	e7f4      	b.n	2e946 <z_clock_announce+0x4a>
		curr_tick += announce_remaining;
   2e95c:	4e0c      	ldr	r6, [pc, #48]	; (2e990 <z_clock_announce+0x94>)
	LOCKED(&timeout_lock) {
   2e95e:	f7ff ff17 	bl	2e790 <k_spin_lock.isra.1>
		curr_tick += announce_remaining;
   2e962:	e9d6 2300 	ldrd	r2, r3, [r6]
   2e966:	6829      	ldr	r1, [r5, #0]
		announce_remaining = 0;
   2e968:	602c      	str	r4, [r5, #0]
		curr_tick += announce_remaining;
   2e96a:	1857      	adds	r7, r2, r1
   2e96c:	eb43 78e1 	adc.w	r8, r3, r1, asr #31
   2e970:	e9c6 7800 	strd	r7, r8, [r6]
   2e974:	f380 8811 	msr	BASEPRI, r0
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
   2e978:	f7ff ff5a 	bl	2e830 <_get_next_timeout_expiry>
   2e97c:	4621      	mov	r1, r4
}
   2e97e:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
   2e982:	f7d7 bc1b 	b.w	61bc <z_clock_set_timeout>
   2e986:	bf00      	nop
   2e988:	20003080 	.word	0x20003080
   2e98c:	2000e104 	.word	0x2000e104
   2e990:	20003088 	.word	0x20003088

0002e994 <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
   2e994:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
	u64_t t = 0;

	LOCKED(&timeout_lock) {
   2e998:	f7ff fefa 	bl	2e790 <k_spin_lock.isra.1>
   2e99c:	4604      	mov	r4, r0
		t = curr_tick + z_clock_elapsed();
   2e99e:	f7d7 fc0e 	bl	61be <z_clock_elapsed>
   2e9a2:	4b06      	ldr	r3, [pc, #24]	; (2e9bc <z_tick_get+0x28>)
   2e9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   2e9a8:	eb12 0b00 	adds.w	fp, r2, r0
   2e9ac:	f143 0c00 	adc.w	ip, r3, #0
   2e9b0:	4658      	mov	r0, fp
   2e9b2:	4661      	mov	r1, ip
   2e9b4:	f384 8811 	msr	BASEPRI, r4
	}
	return t;
}
   2e9b8:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   2e9bc:	20003088 	.word	0x20003088

0002e9c0 <z_tick_get_32>:
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
#else
	return (u32_t)curr_tick;
#endif
}
   2e9c0:	4b01      	ldr	r3, [pc, #4]	; (2e9c8 <z_tick_get_32+0x8>)
   2e9c2:	6818      	ldr	r0, [r3, #0]
   2e9c4:	4770      	bx	lr
   2e9c6:	bf00      	nop
   2e9c8:	20003088 	.word	0x20003088

0002e9cc <_impl_k_uptime_get_32>:

u32_t _impl_k_uptime_get_32(void)
{
   2e9cc:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
	return (u32_t)curr_tick;
   2e9d0:	4b08      	ldr	r3, [pc, #32]	; (2e9f4 <_impl_k_uptime_get_32+0x28>)
	return (u64_t)ticks * MSEC_PER_SEC / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
   2e9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   2e9d6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2e9da:	fba2 0104 	umull	r0, r1, r2, r4
   2e9de:	f04f 0c00 	mov.w	ip, #0
   2e9e2:	fb04 110c 	mla	r1, r4, ip, r1
   2e9e6:	2264      	movs	r2, #100	; 0x64
   2e9e8:	2300      	movs	r3, #0
   2e9ea:	f7d1 fc63 	bl	2b4 <__aeabi_uldivmod>
	return __ticks_to_ms(z_tick_get_32());
}
   2e9ee:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   2e9f2:	bf00      	nop
   2e9f4:	20003088 	.word	0x20003088

0002e9f8 <_impl_k_uptime_get>:
	return _impl_k_uptime_get_32();
}
#endif

s64_t _impl_k_uptime_get(void)
{
   2e9f8:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(z_tick_get());
   2e9fa:	f7ff ffcb 	bl	2e994 <z_tick_get>
   2e9fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2ea02:	fba0 4503 	umull	r4, r5, r0, r3
   2ea06:	fb03 5501 	mla	r5, r3, r1, r5
   2ea0a:	2264      	movs	r2, #100	; 0x64
   2ea0c:	2300      	movs	r3, #0
   2ea0e:	4620      	mov	r0, r4
   2ea10:	4629      	mov	r1, r5
   2ea12:	f7d1 fc4f 	bl	2b4 <__aeabi_uldivmod>
}
   2ea16:	bd38      	pop	{r3, r4, r5, pc}

0002ea18 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2ea18:	7b42      	ldrb	r2, [r0, #13]
   2ea1a:	06d2      	lsls	r2, r2, #27
   2ea1c:	d104      	bne.n	2ea28 <_ready_thread+0x10>
	if (_is_thread_ready(thread)) {
   2ea1e:	6a03      	ldr	r3, [r0, #32]
   2ea20:	3301      	adds	r3, #1
   2ea22:	d101      	bne.n	2ea28 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   2ea24:	f7ff ba86 	b.w	2df34 <_add_thread_to_ready_q>
}
   2ea28:	4770      	bx	lr
	...

0002ea2c <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
   2ea2c:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   2ea2e:	6a03      	ldr	r3, [r0, #32]
   2ea30:	2b00      	cmp	r3, #0
{
   2ea32:	4604      	mov	r4, r0
	if (timer->period > 0) {
   2ea34:	dd0b      	ble.n	2ea4e <_timer_expiration_handler+0x22>
	__asm__ volatile(
   2ea36:	f04f 0320 	mov.w	r3, #32
   2ea3a:	f3ef 8511 	mrs	r5, BASEPRI
   2ea3e:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(&timer->timeout, _timer_expiration_handler,
   2ea42:	4911      	ldr	r1, [pc, #68]	; (2ea88 <_timer_expiration_handler+0x5c>)
   2ea44:	6a02      	ldr	r2, [r0, #32]
   2ea46:	f7ff ff21 	bl	2e88c <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2ea4a:	f385 8811 	msr	BASEPRI, r5
			     timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   2ea4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ea50:	3301      	adds	r3, #1
   2ea52:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   2ea54:	69a3      	ldr	r3, [r4, #24]
   2ea56:	b10b      	cbz	r3, 2ea5c <_timer_expiration_handler+0x30>
		timer->expiry_fn(timer);
   2ea58:	4620      	mov	r0, r4
   2ea5a:	4798      	blx	r3
	return list->head == list;
   2ea5c:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ea60:	42a5      	cmp	r5, r4
   2ea62:	d010      	beq.n	2ea86 <_timer_expiration_handler+0x5a>
	}

	thread = _waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2ea64:	b17d      	cbz	r5, 2ea86 <_timer_expiration_handler+0x5a>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	_unpend_thread_no_timeout(thread);
   2ea66:	4628      	mov	r0, r5
   2ea68:	f7ff f9e8 	bl	2de3c <_unpend_thread_no_timeout>
	__asm__ volatile(
   2ea6c:	f04f 0320 	mov.w	r3, #32
   2ea70:	f3ef 8411 	mrs	r4, BASEPRI
   2ea74:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
   2ea78:	4628      	mov	r0, r5
   2ea7a:	f7ff ffcd 	bl	2ea18 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2ea7e:	f384 8811 	msr	BASEPRI, r4
   2ea82:	2300      	movs	r3, #0
   2ea84:	66ab      	str	r3, [r5, #104]	; 0x68
	irq_unlock(key);

	_set_thread_return_value(thread, 0);
}
   2ea86:	bd38      	pop	{r3, r4, r5, pc}
   2ea88:	0002ea2d 	.word	0x0002ea2d

0002ea8c <k_timer_init>:
void k_timer_init(struct k_timer *timer,
		  void (*expiry_fn)(struct k_timer *),
		  void (*stop_fn)(struct k_timer *))
{
	timer->expiry_fn = expiry_fn;
	timer->stop_fn = stop_fn;
   2ea8c:	e9c0 1206 	strd	r1, r2, [r0, #24]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void _waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2ea90:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0;
   2ea94:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2ea96:	e9c0 2204 	strd	r2, r2, [r0, #16]
   2ea9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ea9e:	6243      	str	r3, [r0, #36]	; 0x24
   2eaa0:	6082      	str	r2, [r0, #8]

	_waitq_init(&timer->wait_q);
	_init_timeout(&timer->timeout, _timer_expiration_handler);
	SYS_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;
   2eaa2:	6283      	str	r3, [r0, #40]	; 0x28

	_k_object_init(timer);
}
   2eaa4:	4770      	bx	lr
	...

0002eaa8 <_impl_k_timer_start>:


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   2eaa8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return (s32_t)ceiling_fraction(
   2eaac:	4e18      	ldr	r6, [pc, #96]	; (2eb10 <_impl_k_timer_start+0x68>)
   2eaae:	2700      	movs	r7, #0
   2eab0:	4688      	mov	r8, r1
   2eab2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2eab6:	4604      	mov	r4, r0
   2eab8:	4639      	mov	r1, r7
   2eaba:	4630      	mov	r0, r6
   2eabc:	fbc5 0102 	smlal	r0, r1, r5, r2
   2eac0:	2300      	movs	r3, #0
   2eac2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2eac6:	f7d1 fba5 	bl	214 <__aeabi_ldivmod>
   2eaca:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
   2eacc:	9000      	str	r0, [sp, #0]
   2eace:	4630      	mov	r0, r6
   2ead0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2ead4:	2300      	movs	r3, #0
   2ead6:	fbc5 0108 	smlal	r0, r1, r5, r8
   2eada:	f7d1 fb9b 	bl	214 <__aeabi_ldivmod>
	duration_in_ticks = _ms_to_ticks(duration);
   2eade:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   2eae0:	f04f 0320 	mov.w	r3, #32
   2eae4:	f3ef 8511 	mrs	r5, BASEPRI
   2eae8:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	(void)_abort_timeout(&timer->timeout);
   2eaec:	4620      	mov	r0, r4
   2eaee:	f7ff fe6d 	bl	2e7cc <_abort_timeout>
	timer->period = period_in_ticks;
   2eaf2:	9b00      	ldr	r3, [sp, #0]
   2eaf4:	6223      	str	r3, [r4, #32]
	timer->status = 0;
   2eaf6:	2300      	movs	r3, #0
   2eaf8:	6263      	str	r3, [r4, #36]	; 0x24
	_add_timeout(&timer->timeout, _timer_expiration_handler,
   2eafa:	9a01      	ldr	r2, [sp, #4]
   2eafc:	4905      	ldr	r1, [pc, #20]	; (2eb14 <_impl_k_timer_start+0x6c>)
   2eafe:	4620      	mov	r0, r4
   2eb00:	f7ff fec4 	bl	2e88c <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2eb04:	f385 8811 	msr	BASEPRI, r5
		     duration_in_ticks);
	irq_unlock(key);
}
   2eb08:	b002      	add	sp, #8
   2eb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2eb0e:	bf00      	nop
   2eb10:	0004ffff 	.word	0x0004ffff
   2eb14:	0002ea2d 	.word	0x0002ea2d

0002eb18 <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
   2eb18:	b538      	push	{r3, r4, r5, lr}
   2eb1a:	4604      	mov	r4, r0
	__asm__ volatile(
   2eb1c:	f04f 0320 	mov.w	r3, #32
   2eb20:	f3ef 8511 	mrs	r5, BASEPRI
   2eb24:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);
   2eb28:	f7ff fe50 	bl	2e7cc <_abort_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2eb2c:	f385 8811 	msr	BASEPRI, r5

	irq_unlock(key);

	if (inactive) {
   2eb30:	3001      	adds	r0, #1
   2eb32:	d025      	beq.n	2eb80 <_impl_k_timer_stop+0x68>
		return;
	}

	if (timer->stop_fn) {
   2eb34:	69e3      	ldr	r3, [r4, #28]
   2eb36:	b10b      	cbz	r3, 2eb3c <_impl_k_timer_stop+0x24>
		timer->stop_fn(timer);
   2eb38:	4620      	mov	r0, r4
   2eb3a:	4798      	blx	r3
	__asm__ volatile(
   2eb3c:	f04f 0320 	mov.w	r3, #32
   2eb40:	f3ef 8511 	mrs	r5, BASEPRI
   2eb44:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   2eb48:	2100      	movs	r1, #0
   2eb4a:	f104 0010 	add.w	r0, r4, #16
   2eb4e:	f7ff f969 	bl	2de24 <_find_first_thread_to_unpend>
	if (thread != NULL) {
   2eb52:	4604      	mov	r4, r0
   2eb54:	b120      	cbz	r0, 2eb60 <_impl_k_timer_stop+0x48>
		_unpend_thread_no_timeout(thread);
   2eb56:	f7ff f971 	bl	2de3c <_unpend_thread_no_timeout>

	key = irq_lock();
	struct k_thread *pending_thread = _unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		_ready_thread(pending_thread);
   2eb5a:	4620      	mov	r0, r4
   2eb5c:	f7ff ff5c 	bl	2ea18 <_ready_thread>
   2eb60:	f3ef 8305 	mrs	r3, IPSR
   2eb64:	2b0d      	cmp	r3, #13
   2eb66:	d809      	bhi.n	2eb7c <_impl_k_timer_stop+0x64>
   2eb68:	b11b      	cbz	r3, 2eb72 <_impl_k_timer_stop+0x5a>
   2eb6a:	4b06      	ldr	r3, [pc, #24]	; (2eb84 <_impl_k_timer_stop+0x6c>)
   2eb6c:	685b      	ldr	r3, [r3, #4]
   2eb6e:	051b      	lsls	r3, r3, #20
   2eb70:	d504      	bpl.n	2eb7c <_impl_k_timer_stop+0x64>
	}

	if (_is_in_isr()) {
		irq_unlock(key);
	} else {
		_reschedule(key);
   2eb72:	4628      	mov	r0, r5
	}
}
   2eb74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		_reschedule(key);
   2eb78:	f7ff b98a 	b.w	2de90 <_reschedule>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2eb7c:	f385 8811 	msr	BASEPRI, r5
}
   2eb80:	bd38      	pop	{r3, r4, r5, pc}
   2eb82:	bf00      	nop
   2eb84:	e000ed00 	.word	0xe000ed00

0002eb88 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   2eb88:	6883      	ldr	r3, [r0, #8]
{
   2eb8a:	b570      	push	{r4, r5, r6, lr}
   2eb8c:	4605      	mov	r5, r0
   2eb8e:	460e      	mov	r6, r1
	if (!event->poller) {
   2eb90:	b1d3      	cbz	r3, 2ebc8 <signal_poll_event+0x40>
	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread != NULL,
		 "poller should have a thread\n");

	event->poller->is_polling = 0;
   2eb92:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   2eb94:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   2eb96:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   2eb98:	7b63      	ldrb	r3, [r4, #13]
   2eb9a:	079a      	lsls	r2, r3, #30
   2eb9c:	d514      	bpl.n	2ebc8 <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   2eb9e:	6a23      	ldr	r3, [r4, #32]
   2eba0:	3302      	adds	r3, #2
   2eba2:	d01b      	beq.n	2ebdc <signal_poll_event+0x54>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   2eba4:	4620      	mov	r0, r4
   2eba6:	f7ff f968 	bl	2de7a <_unpend_thread>
	_set_thread_return_value(thread,
   2ebaa:	2e08      	cmp	r6, #8
   2ebac:	bf0c      	ite	eq
   2ebae:	f06f 0303 	mvneq.w	r3, #3
   2ebb2:	2300      	movne	r3, #0
   2ebb4:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2ebb6:	7b63      	ldrb	r3, [r4, #13]
   2ebb8:	06db      	lsls	r3, r3, #27
   2ebba:	d105      	bne.n	2ebc8 <signal_poll_event+0x40>
				 state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
   2ebbc:	6a23      	ldr	r3, [r4, #32]
   2ebbe:	3301      	adds	r3, #1
   2ebc0:	d102      	bne.n	2ebc8 <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   2ebc2:	4620      	mov	r0, r4
   2ebc4:	f7ff f9b6 	bl	2df34 <_add_thread_to_ready_q>
	event->state |= state;
   2ebc8:	68eb      	ldr	r3, [r5, #12]
   2ebca:	f3c3 3204 	ubfx	r2, r3, #12, #5
   2ebce:	4316      	orrs	r6, r2
	event->poller = NULL;
   2ebd0:	2000      	movs	r0, #0
	event->state |= state;
   2ebd2:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   2ebd6:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2ebd8:	60eb      	str	r3, [r5, #12]
	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
}
   2ebda:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   2ebdc:	f06f 000a 	mvn.w	r0, #10
   2ebe0:	e7fb      	b.n	2ebda <signal_poll_event+0x52>

0002ebe2 <add_event>:
{
   2ebe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ebe4:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2ebe6:	e9d0 2300 	ldrd	r2, r3, [r0]
   2ebea:	4290      	cmp	r0, r2
   2ebec:	4604      	mov	r4, r0
   2ebee:	460d      	mov	r5, r1
   2ebf0:	d106      	bne.n	2ec00 <add_event+0x1e>
	node->prev = list->tail;
   2ebf2:	6863      	ldr	r3, [r4, #4]
   2ebf4:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2ebf6:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2ebf8:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   2ebfa:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2ebfc:	6065      	str	r5, [r4, #4]
   2ebfe:	e019      	b.n	2ec34 <add_event+0x52>
	if ((pending == NULL) ||
   2ec00:	2b00      	cmp	r3, #0
   2ec02:	d0f6      	beq.n	2ebf2 <add_event+0x10>
		_is_t1_higher_prio_than_t2(pending->poller->thread,
   2ec04:	689b      	ldr	r3, [r3, #8]
   2ec06:	6839      	ldr	r1, [r7, #0]
   2ec08:	6818      	ldr	r0, [r3, #0]
   2ec0a:	f7ff f8e5 	bl	2ddd8 <_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2ec0e:	2800      	cmp	r0, #0
   2ec10:	d1ef      	bne.n	2ebf2 <add_event+0x10>
	return list->head == list;
   2ec12:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ec14:	42b4      	cmp	r4, r6
   2ec16:	d0ec      	beq.n	2ebf2 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2ec18:	2e00      	cmp	r6, #0
   2ec1a:	d0ea      	beq.n	2ebf2 <add_event+0x10>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   2ec1c:	68b3      	ldr	r3, [r6, #8]
   2ec1e:	6838      	ldr	r0, [r7, #0]
   2ec20:	6819      	ldr	r1, [r3, #0]
   2ec22:	f7ff f8d9 	bl	2ddd8 <_is_t1_higher_prio_than_t2>
   2ec26:	b130      	cbz	r0, 2ec36 <add_event+0x54>
		node->prev = insert_point->prev;
   2ec28:	6873      	ldr	r3, [r6, #4]
		node->next = insert_point;
   2ec2a:	e9c5 6300 	strd	r6, r3, [r5]
		insert_point->prev->next = node;
   2ec2e:	6873      	ldr	r3, [r6, #4]
   2ec30:	601d      	str	r5, [r3, #0]
		insert_point->prev = node;
   2ec32:	6075      	str	r5, [r6, #4]
}
   2ec34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2ec36:	6863      	ldr	r3, [r4, #4]
   2ec38:	429e      	cmp	r6, r3
   2ec3a:	d0da      	beq.n	2ebf2 <add_event+0x10>
   2ec3c:	6836      	ldr	r6, [r6, #0]
   2ec3e:	e7eb      	b.n	2ec18 <add_event+0x36>

0002ec40 <clear_event_registrations>:
{
   2ec40:	2314      	movs	r3, #20
   2ec42:	b530      	push	{r4, r5, lr}
   2ec44:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2ec48:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   2ec4a:	2900      	cmp	r1, #0
   2ec4c:	da00      	bge.n	2ec50 <clear_event_registrations+0x10>
}
   2ec4e:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   2ec50:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   2ec52:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   2ec54:	f003 030f 	and.w	r3, r3, #15
   2ec58:	2b02      	cmp	r3, #2
   2ec5a:	d003      	beq.n	2ec64 <clear_event_registrations+0x24>
   2ec5c:	2b04      	cmp	r3, #4
   2ec5e:	d001      	beq.n	2ec64 <clear_event_registrations+0x24>
   2ec60:	2b01      	cmp	r3, #1
   2ec62:	d104      	bne.n	2ec6e <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   2ec64:	e9d0 5300 	ldrd	r5, r3, [r0]
   2ec68:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   2ec6a:	6805      	ldr	r5, [r0, #0]
   2ec6c:	606b      	str	r3, [r5, #4]
   2ec6e:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   2ec72:	f04f 0320 	mov.w	r3, #32
   2ec76:	f3ef 8211 	mrs	r2, BASEPRI
   2ec7a:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   2ec7e:	3901      	subs	r1, #1
   2ec80:	3814      	subs	r0, #20
   2ec82:	e7e2      	b.n	2ec4a <clear_event_registrations+0xa>

0002ec84 <k_poll_event_init>:
{
   2ec84:	b530      	push	{r4, r5, lr}
	event->type = type;
   2ec86:	7b45      	ldrb	r5, [r0, #13]
	event->obj = obj;
   2ec88:	6103      	str	r3, [r0, #16]
	event->type = type;
   2ec8a:	f361 0503 	bfi	r5, r1, #0, #4
   2ec8e:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   2ec90:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   2ec92:	2400      	movs	r4, #0
	event->state = K_POLL_STATE_NOT_READY;
   2ec94:	f364 3110 	bfi	r1, r4, #12, #5
   2ec98:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   2ec9a:	f3c1 4107 	ubfx	r1, r1, #16, #8
   2ec9e:	f362 0141 	bfi	r1, r2, #1, #1
   2eca2:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   2eca4:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   2eca6:	6084      	str	r4, [r0, #8]
	event->unused = 0;
   2eca8:	f364 028f 	bfi	r2, r4, #2, #14
   2ecac:	81c2      	strh	r2, [r0, #14]
}
   2ecae:	bd30      	pop	{r4, r5, pc}

0002ecb0 <_impl_k_poll>:
{
   2ecb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   2ecb4:	4b40      	ldr	r3, [pc, #256]	; (2edb8 <_impl_k_poll+0x108>)
{
   2ecb6:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   2ecb8:	689b      	ldr	r3, [r3, #8]
   2ecba:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   2ecbc:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   2ecbe:	2301      	movs	r3, #1
{
   2ecc0:	4607      	mov	r7, r0
   2ecc2:	468a      	mov	sl, r1
   2ecc4:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   2ecc6:	9301      	str	r3, [sp, #4]
   2ecc8:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   2ecca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   2ecce:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   2ecd0:	4556      	cmp	r6, sl
   2ecd2:	db10      	blt.n	2ecf6 <_impl_k_poll+0x46>
   2ecd4:	f04f 0320 	mov.w	r3, #32
   2ecd8:	f3ef 8611 	mrs	r6, BASEPRI
   2ecdc:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   2ece0:	9c01      	ldr	r4, [sp, #4]
   2ece2:	2c00      	cmp	r4, #0
   2ece4:	d14b      	bne.n	2ed7e <_impl_k_poll+0xce>
	clear_event_registrations(events, last_registered, key);
   2ece6:	4632      	mov	r2, r6
   2ece8:	4629      	mov	r1, r5
   2ecea:	4638      	mov	r0, r7
   2ecec:	f7ff ffa8 	bl	2ec40 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2ecf0:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   2ecf4:	e04c      	b.n	2ed90 <_impl_k_poll+0xe0>
	__asm__ volatile(
   2ecf6:	f04f 0320 	mov.w	r3, #32
   2ecfa:	f3ef 8b11 	mrs	fp, BASEPRI
   2ecfe:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   2ed02:	7b63      	ldrb	r3, [r4, #13]
   2ed04:	f003 030f 	and.w	r3, r3, #15
   2ed08:	2b02      	cmp	r3, #2
   2ed0a:	d003      	beq.n	2ed14 <_impl_k_poll+0x64>
   2ed0c:	2b04      	cmp	r3, #4
   2ed0e:	d004      	beq.n	2ed1a <_impl_k_poll+0x6a>
   2ed10:	2b01      	cmp	r3, #1
   2ed12:	d115      	bne.n	2ed40 <_impl_k_poll+0x90>
		if (event->signal->signaled) {
   2ed14:	6922      	ldr	r2, [r4, #16]
   2ed16:	6892      	ldr	r2, [r2, #8]
   2ed18:	e001      	b.n	2ed1e <_impl_k_poll+0x6e>
Z_GENLIST_IS_EMPTY(sflist)
   2ed1a:	6922      	ldr	r2, [r4, #16]
		if (!k_queue_is_empty(event->queue)) {
   2ed1c:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled) {
   2ed1e:	b17a      	cbz	r2, 2ed40 <_impl_k_poll+0x90>
	event->state |= state;
   2ed20:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   2ed22:	f8c4 9008 	str.w	r9, [r4, #8]
	event->state |= state;
   2ed26:	f3c2 3104 	ubfx	r1, r2, #12, #5
   2ed2a:	430b      	orrs	r3, r1
   2ed2c:	f363 3210 	bfi	r2, r3, #12, #5
   2ed30:	60e2      	str	r2, [r4, #12]
			poller.is_polling = 0;
   2ed32:	f8cd 9004 	str.w	r9, [sp, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2ed36:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   2ed3a:	3601      	adds	r6, #1
   2ed3c:	3414      	adds	r4, #20
   2ed3e:	e7c7      	b.n	2ecd0 <_impl_k_poll+0x20>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   2ed40:	f1b8 0f00 	cmp.w	r8, #0
   2ed44:	d0f7      	beq.n	2ed36 <_impl_k_poll+0x86>
   2ed46:	9a01      	ldr	r2, [sp, #4]
   2ed48:	2a00      	cmp	r2, #0
   2ed4a:	d0f4      	beq.n	2ed36 <_impl_k_poll+0x86>
	switch (event->type) {
   2ed4c:	2b02      	cmp	r3, #2
   2ed4e:	d007      	beq.n	2ed60 <_impl_k_poll+0xb0>
   2ed50:	2b04      	cmp	r3, #4
   2ed52:	d00f      	beq.n	2ed74 <_impl_k_poll+0xc4>
   2ed54:	2b01      	cmp	r3, #1
   2ed56:	d109      	bne.n	2ed6c <_impl_k_poll+0xbc>
		add_event(&event->signal->poll_events, event, poller);
   2ed58:	466a      	mov	r2, sp
   2ed5a:	4621      	mov	r1, r4
   2ed5c:	6920      	ldr	r0, [r4, #16]
   2ed5e:	e003      	b.n	2ed68 <_impl_k_poll+0xb8>
		add_event(&event->sem->poll_events, event, poller);
   2ed60:	6920      	ldr	r0, [r4, #16]
   2ed62:	466a      	mov	r2, sp
   2ed64:	4621      	mov	r1, r4
   2ed66:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2ed68:	f7ff ff3b 	bl	2ebe2 <add_event>
	event->poller = poller;
   2ed6c:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   2ed70:	3501      	adds	r5, #1
   2ed72:	e7e0      	b.n	2ed36 <_impl_k_poll+0x86>
		add_event(&event->queue->poll_events, event, poller);
   2ed74:	6920      	ldr	r0, [r4, #16]
   2ed76:	466a      	mov	r2, sp
   2ed78:	4621      	mov	r1, r4
   2ed7a:	3008      	adds	r0, #8
   2ed7c:	e7f4      	b.n	2ed68 <_impl_k_poll+0xb8>
	poller.is_polling = 0;
   2ed7e:	2300      	movs	r3, #0
   2ed80:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   2ed82:	f1b8 0f00 	cmp.w	r8, #0
   2ed86:	d107      	bne.n	2ed98 <_impl_k_poll+0xe8>
   2ed88:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   2ed8c:	f06f 040a 	mvn.w	r4, #10
}
   2ed90:	4620      	mov	r0, r4
   2ed92:	b005      	add	sp, #20
   2ed94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   2ed98:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   2ed9a:	4642      	mov	r2, r8
   2ed9c:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   2ed9e:	e9cd 1102 	strd	r1, r1, [sp, #8]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   2eda2:	f7ff f96f 	bl	2e084 <_pend_current_thread>
   2eda6:	4604      	mov	r4, r0
	__asm__ volatile(
   2eda8:	f04f 0320 	mov.w	r3, #32
   2edac:	f3ef 8611 	mrs	r6, BASEPRI
   2edb0:	f383 8811 	msr	BASEPRI, r3
   2edb4:	e797      	b.n	2ece6 <_impl_k_poll+0x36>
   2edb6:	bf00      	nop
   2edb8:	20003780 	.word	0x20003780

0002edbc <_handle_obj_poll_events>:
	return list->head == list;
   2edbc:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2edbe:	4298      	cmp	r0, r3
   2edc0:	d007      	beq.n	2edd2 <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   2edc2:	e9d3 0200 	ldrd	r0, r2, [r3]
   2edc6:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   2edc8:	6818      	ldr	r0, [r3, #0]
   2edca:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   2edcc:	4618      	mov	r0, r3
   2edce:	f7ff bedb 	b.w	2eb88 <signal_poll_event>
	}
}
   2edd2:	4770      	bx	lr

0002edd4 <_impl_k_poll_signal_init>:

void _impl_k_poll_signal_init(struct k_poll_signal *signal)
{
	sys_dlist_init(&signal->poll_events);
	signal->signaled = 0;
   2edd4:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2edd6:	e9c0 0000 	strd	r0, r0, [r0]
   2edda:	6083      	str	r3, [r0, #8]
	/* signal->result is left unitialized */
	_k_object_init(signal);
}
   2eddc:	4770      	bx	lr

0002edde <_impl_k_poll_signal_check>:
#endif

void _impl_k_poll_signal_check(struct k_poll_signal *signal,
			       unsigned int *signaled, int *result)
{
	*signaled = signal->signaled;
   2edde:	6883      	ldr	r3, [r0, #8]
   2ede0:	600b      	str	r3, [r1, #0]
	*result = signal->result;
   2ede2:	68c3      	ldr	r3, [r0, #12]
   2ede4:	6013      	str	r3, [r2, #0]
}
   2ede6:	4770      	bx	lr

0002ede8 <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   2ede8:	b538      	push	{r3, r4, r5, lr}
   2edea:	f04f 0320 	mov.w	r3, #32
   2edee:	f3ef 8511 	mrs	r5, BASEPRI
   2edf2:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   2edf6:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   2edf8:	60c1      	str	r1, [r0, #12]
	if (!sys_dlist_is_empty(list)) {
   2edfa:	4298      	cmp	r0, r3
	signal->signaled = 1;
   2edfc:	f04f 0101 	mov.w	r1, #1
   2ee00:	6081      	str	r1, [r0, #8]
   2ee02:	d104      	bne.n	2ee0e <_impl_k_poll_signal+0x26>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2ee04:	f385 8811 	msr	BASEPRI, r5

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		irq_unlock(key);
		return 0;
   2ee08:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	_reschedule(key);
	return rc;
}
   2ee0a:	4620      	mov	r0, r4
   2ee0c:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   2ee0e:	e9d3 0200 	ldrd	r0, r2, [r3]
   2ee12:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   2ee14:	6818      	ldr	r0, [r3, #0]
   2ee16:	6042      	str	r2, [r0, #4]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2ee18:	4618      	mov	r0, r3
   2ee1a:	f7ff feb5 	bl	2eb88 <signal_poll_event>
   2ee1e:	4604      	mov	r4, r0
	_reschedule(key);
   2ee20:	4628      	mov	r0, r5
   2ee22:	f7ff f835 	bl	2de90 <_reschedule>
	return rc;
   2ee26:	e7f0      	b.n	2ee0a <_impl_k_poll_signal+0x22>

0002ee28 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   2ee28:	4770      	bx	lr
