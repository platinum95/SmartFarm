
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

Z_SYSCALL_HANDLER0_SIMPLE(z_errno);
#else
int *_impl_z_errno(void)
{
	return &_current->errno_var;
       0:	20001fa0 	.word	0x20001fa0
}
       4:	00001cc9 	.word	0x00001cc9
       8:	00001d1d 	.word	0x00001d1d
       c:	00001b55 	.word	0x00001b55
      10:	00001b55 	.word	0x00001b55
      14:	00001b55 	.word	0x00001b55
      18:	00001b55 	.word	0x00001b55
      1c:	00001b55 	.word	0x00001b55
      20:	00001b55 	.word	0x00001b55
      24:	00001b55 	.word	0x00001b55
      28:	00001b55 	.word	0x00001b55
      2c:	00001795 	.word	0x00001795
      30:	00001b55 	.word	0x00001b55
      34:	00001b55 	.word	0x00001b55
      38:	00001751 	.word	0x00001751
      3c:	00001b55 	.word	0x00001b55

00000040 <_irq_vector_table>:
      40:	00001c8d 0000747b 00001c8d 00001c8d     ....{t..........
      50:	00001c8d 00001c8d 00001c8d 00001c8d     ................
      60:	00001c8d 00001c8d 00001c8d 00001c8d     ................
      70:	00001c8d 00001c8d 00001c8d 00001c8d     ................
      80:	00001c8d 00001c8d 00001c8d 00001c8d     ................
      90:	00001c8d 00001c8d 00001c8d 00001c8d     ................
      a0:	00001c8d 00001c8d 00001c8d 00001c8d     ................
      b0:	00001c8d 00001c8d 00001c8d 00001c8d     ................
      c0:	00001c8d 00001c8d 00001c8d 00001c8d     ................
      d0:	00001c8d 00001c8d 00001c8d              ............

000000dc <_sw_isr_table>:
      dc:	00000000 0000148d 00000000 00001acd     ................
      ec:	00000000 00001acd 00000000 00001acd     ................
      fc:	00000000 00001acd 00000000 00001acd     ................
     10c:	00000000 000094f5 00000000 00001acd     ................
     11c:	00000000 00001acd 00000000 00001acd     ................
     12c:	00000000 00001acd 00000000 00007441     ............At..
     13c:	00000000 00001acd 20002f7c 00009919     ........|/. ....
     14c:	00000000 00001acd 00000000 00001acd     ................
     15c:	00000000 00001acd 00000000 000015b5     ................
     16c:	00000000 00001acd 00000000 00001acd     ................
     17c:	00000000 00001acd 00000000 00001acd     ................
     18c:	00000000 00001acd 00000000 00001acd     ................
     19c:	00000000 00007475 00000000 00001acd     ....ut..........
     1ac:	00000000 00001acd 00000000 00001acd     ................
     1bc:	00000000 00001acd 00000000 00001acd     ................
     1cc:	00000000 00001acd 00000000 00001acd     ................
     1dc:	00000000 00001acd 00000000 00001acd     ................
     1ec:	00000000 00001acd 00000000 00001acd     ................
     1fc:	00000000 00001acd 00000000 00001acd     ................
     20c:	00000000 00001acd                       ........

00000214 <__aeabi_ldivmod>:
     214:	b97b      	cbnz	r3, 236 <__aeabi_ldivmod+0x22>
     216:	b972      	cbnz	r2, 236 <__aeabi_ldivmod+0x22>
     218:	2900      	cmp	r1, #0
     21a:	bfbe      	ittt	lt
     21c:	2000      	movlt	r0, #0
     21e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     222:	e006      	blt.n	232 <__aeabi_ldivmod+0x1e>
     224:	bf08      	it	eq
     226:	2800      	cmpeq	r0, #0
     228:	bf1c      	itt	ne
     22a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     22e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     232:	f000 b9d1 	b.w	5d8 <__aeabi_idiv0>
     236:	f1ad 0c08 	sub.w	ip, sp, #8
     23a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     23e:	2900      	cmp	r1, #0
     240:	db09      	blt.n	256 <__aeabi_ldivmod+0x42>
     242:	2b00      	cmp	r3, #0
     244:	db1a      	blt.n	27c <__aeabi_ldivmod+0x68>
     246:	f000 f861 	bl	30c <__udivmoddi4>
     24a:	f8dd e004 	ldr.w	lr, [sp, #4]
     24e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     252:	b004      	add	sp, #16
     254:	4770      	bx	lr
     256:	4240      	negs	r0, r0
     258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     25c:	2b00      	cmp	r3, #0
     25e:	db1b      	blt.n	298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     260:	f000 f854 	bl	30c <__udivmoddi4>
     264:	f8dd e004 	ldr.w	lr, [sp, #4]
     268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     26c:	b004      	add	sp, #16
     26e:	4240      	negs	r0, r0
     270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     274:	4252      	negs	r2, r2
     276:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     27a:	4770      	bx	lr
     27c:	4252      	negs	r2, r2
     27e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     282:	f000 f843 	bl	30c <__udivmoddi4>
     286:	f8dd e004 	ldr.w	lr, [sp, #4]
     28a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     28e:	b004      	add	sp, #16
     290:	4240      	negs	r0, r0
     292:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     296:	4770      	bx	lr
     298:	4252      	negs	r2, r2
     29a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     29e:	f000 f835 	bl	30c <__udivmoddi4>
     2a2:	f8dd e004 	ldr.w	lr, [sp, #4]
     2a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2aa:	b004      	add	sp, #16
     2ac:	4252      	negs	r2, r2
     2ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2b2:	4770      	bx	lr

000002b4 <__aeabi_uldivmod>:
     2b4:	b953      	cbnz	r3, 2cc <__aeabi_uldivmod+0x18>
     2b6:	b94a      	cbnz	r2, 2cc <__aeabi_uldivmod+0x18>
     2b8:	2900      	cmp	r1, #0
     2ba:	bf08      	it	eq
     2bc:	2800      	cmpeq	r0, #0
     2be:	bf1c      	itt	ne
     2c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     2c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     2c8:	f000 b986 	b.w	5d8 <__aeabi_idiv0>
     2cc:	f1ad 0c08 	sub.w	ip, sp, #8
     2d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     2d4:	f000 f81a 	bl	30c <__udivmoddi4>
     2d8:	f8dd e004 	ldr.w	lr, [sp, #4]
     2dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2e0:	b004      	add	sp, #16
     2e2:	4770      	bx	lr

000002e4 <__popcountsi2>:
     2e4:	0843      	lsrs	r3, r0, #1
     2e6:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     2ea:	1ac0      	subs	r0, r0, r3
     2ec:	0883      	lsrs	r3, r0, #2
     2ee:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     2f2:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     2f6:	4418      	add	r0, r3
     2f8:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     2fc:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     300:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     304:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     308:	0e00      	lsrs	r0, r0, #24
     30a:	4770      	bx	lr

0000030c <__udivmoddi4>:
     30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     310:	9e08      	ldr	r6, [sp, #32]
     312:	4604      	mov	r4, r0
     314:	4688      	mov	r8, r1
     316:	2b00      	cmp	r3, #0
     318:	d14b      	bne.n	3b2 <__udivmoddi4+0xa6>
     31a:	428a      	cmp	r2, r1
     31c:	4615      	mov	r5, r2
     31e:	d967      	bls.n	3f0 <__udivmoddi4+0xe4>
     320:	fab2 f282 	clz	r2, r2
     324:	b14a      	cbz	r2, 33a <__udivmoddi4+0x2e>
     326:	f1c2 0720 	rsb	r7, r2, #32
     32a:	fa01 f302 	lsl.w	r3, r1, r2
     32e:	fa20 f707 	lsr.w	r7, r0, r7
     332:	4095      	lsls	r5, r2
     334:	ea47 0803 	orr.w	r8, r7, r3
     338:	4094      	lsls	r4, r2
     33a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     33e:	0c23      	lsrs	r3, r4, #16
     340:	fbb8 f7fe 	udiv	r7, r8, lr
     344:	fa1f fc85 	uxth.w	ip, r5
     348:	fb0e 8817 	mls	r8, lr, r7, r8
     34c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     350:	fb07 f10c 	mul.w	r1, r7, ip
     354:	4299      	cmp	r1, r3
     356:	d909      	bls.n	36c <__udivmoddi4+0x60>
     358:	18eb      	adds	r3, r5, r3
     35a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
     35e:	f080 811b 	bcs.w	598 <CONFIG_BT_RX_STACK_SIZE+0x198>
     362:	4299      	cmp	r1, r3
     364:	f240 8118 	bls.w	598 <CONFIG_BT_RX_STACK_SIZE+0x198>
     368:	3f02      	subs	r7, #2
     36a:	442b      	add	r3, r5
     36c:	1a5b      	subs	r3, r3, r1
     36e:	b2a4      	uxth	r4, r4
     370:	fbb3 f0fe 	udiv	r0, r3, lr
     374:	fb0e 3310 	mls	r3, lr, r0, r3
     378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     37c:	fb00 fc0c 	mul.w	ip, r0, ip
     380:	45a4      	cmp	ip, r4
     382:	d909      	bls.n	398 <__udivmoddi4+0x8c>
     384:	192c      	adds	r4, r5, r4
     386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     38a:	f080 8107 	bcs.w	59c <CONFIG_BT_RX_STACK_SIZE+0x19c>
     38e:	45a4      	cmp	ip, r4
     390:	f240 8104 	bls.w	59c <CONFIG_BT_RX_STACK_SIZE+0x19c>
     394:	3802      	subs	r0, #2
     396:	442c      	add	r4, r5
     398:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     39c:	eba4 040c 	sub.w	r4, r4, ip
     3a0:	2700      	movs	r7, #0
     3a2:	b11e      	cbz	r6, 3ac <__udivmoddi4+0xa0>
     3a4:	40d4      	lsrs	r4, r2
     3a6:	2300      	movs	r3, #0
     3a8:	e9c6 4300 	strd	r4, r3, [r6]
     3ac:	4639      	mov	r1, r7
     3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b2:	428b      	cmp	r3, r1
     3b4:	d909      	bls.n	3ca <__udivmoddi4+0xbe>
     3b6:	2e00      	cmp	r6, #0
     3b8:	f000 80eb 	beq.w	592 <CONFIG_BT_RX_STACK_SIZE+0x192>
     3bc:	2700      	movs	r7, #0
     3be:	e9c6 0100 	strd	r0, r1, [r6]
     3c2:	4638      	mov	r0, r7
     3c4:	4639      	mov	r1, r7
     3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ca:	fab3 f783 	clz	r7, r3
     3ce:	2f00      	cmp	r7, #0
     3d0:	d147      	bne.n	462 <CONFIG_BT_RX_STACK_SIZE+0x62>
     3d2:	428b      	cmp	r3, r1
     3d4:	d302      	bcc.n	3dc <__udivmoddi4+0xd0>
     3d6:	4282      	cmp	r2, r0
     3d8:	f200 80fa 	bhi.w	5d0 <CONFIG_BT_RX_STACK_SIZE+0x1d0>
     3dc:	1a84      	subs	r4, r0, r2
     3de:	eb61 0303 	sbc.w	r3, r1, r3
     3e2:	2001      	movs	r0, #1
     3e4:	4698      	mov	r8, r3
     3e6:	2e00      	cmp	r6, #0
     3e8:	d0e0      	beq.n	3ac <__udivmoddi4+0xa0>
     3ea:	e9c6 4800 	strd	r4, r8, [r6]
     3ee:	e7dd      	b.n	3ac <__udivmoddi4+0xa0>
     3f0:	b902      	cbnz	r2, 3f4 <__udivmoddi4+0xe8>
     3f2:	deff      	udf	#255	; 0xff
     3f4:	fab2 f282 	clz	r2, r2
     3f8:	2a00      	cmp	r2, #0
     3fa:	f040 808f 	bne.w	51c <CONFIG_BT_RX_STACK_SIZE+0x11c>
     3fe:	1b49      	subs	r1, r1, r5
     400:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     404:	fa1f f885 	uxth.w	r8, r5
     408:	2701      	movs	r7, #1
     40a:	fbb1 fcfe 	udiv	ip, r1, lr
     40e:	0c23      	lsrs	r3, r4, #16
     410:	fb0e 111c 	mls	r1, lr, ip, r1
     414:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     418:	fb08 f10c 	mul.w	r1, r8, ip
     41c:	4299      	cmp	r1, r3
     41e:	d907      	bls.n	430 <CONFIG_BT_RX_STACK_SIZE+0x30>
     420:	18eb      	adds	r3, r5, r3
     422:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     426:	d202      	bcs.n	42e <CONFIG_BT_RX_STACK_SIZE+0x2e>
     428:	4299      	cmp	r1, r3
     42a:	f200 80cd 	bhi.w	5c8 <CONFIG_BT_RX_STACK_SIZE+0x1c8>
     42e:	4684      	mov	ip, r0
     430:	1a59      	subs	r1, r3, r1
     432:	b2a3      	uxth	r3, r4
     434:	fbb1 f0fe 	udiv	r0, r1, lr
     438:	fb0e 1410 	mls	r4, lr, r0, r1
     43c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     440:	fb08 f800 	mul.w	r8, r8, r0
     444:	45a0      	cmp	r8, r4
     446:	d907      	bls.n	458 <CONFIG_BT_RX_STACK_SIZE+0x58>
     448:	192c      	adds	r4, r5, r4
     44a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     44e:	d202      	bcs.n	456 <CONFIG_BT_RX_STACK_SIZE+0x56>
     450:	45a0      	cmp	r8, r4
     452:	f200 80b6 	bhi.w	5c2 <CONFIG_BT_RX_STACK_SIZE+0x1c2>
     456:	4618      	mov	r0, r3
     458:	eba4 0408 	sub.w	r4, r4, r8
     45c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     460:	e79f      	b.n	3a2 <__udivmoddi4+0x96>
     462:	f1c7 0c20 	rsb	ip, r7, #32
     466:	40bb      	lsls	r3, r7
     468:	fa22 fe0c 	lsr.w	lr, r2, ip
     46c:	ea4e 0e03 	orr.w	lr, lr, r3
     470:	fa01 f407 	lsl.w	r4, r1, r7
     474:	fa20 f50c 	lsr.w	r5, r0, ip
     478:	fa21 f30c 	lsr.w	r3, r1, ip
     47c:	ea4f 481e 	mov.w	r8, lr, lsr #16
     480:	4325      	orrs	r5, r4
     482:	fbb3 f9f8 	udiv	r9, r3, r8
     486:	0c2c      	lsrs	r4, r5, #16
     488:	fb08 3319 	mls	r3, r8, r9, r3
     48c:	fa1f fa8e 	uxth.w	sl, lr
     490:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
     494:	fb09 f40a 	mul.w	r4, r9, sl
     498:	429c      	cmp	r4, r3
     49a:	fa02 f207 	lsl.w	r2, r2, r7
     49e:	fa00 f107 	lsl.w	r1, r0, r7
     4a2:	d90b      	bls.n	4bc <CONFIG_BT_RX_STACK_SIZE+0xbc>
     4a4:	eb1e 0303 	adds.w	r3, lr, r3
     4a8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4ac:	f080 8087 	bcs.w	5be <CONFIG_BT_RX_STACK_SIZE+0x1be>
     4b0:	429c      	cmp	r4, r3
     4b2:	f240 8084 	bls.w	5be <CONFIG_BT_RX_STACK_SIZE+0x1be>
     4b6:	f1a9 0902 	sub.w	r9, r9, #2
     4ba:	4473      	add	r3, lr
     4bc:	1b1b      	subs	r3, r3, r4
     4be:	b2ad      	uxth	r5, r5
     4c0:	fbb3 f0f8 	udiv	r0, r3, r8
     4c4:	fb08 3310 	mls	r3, r8, r0, r3
     4c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
     4cc:	fb00 fa0a 	mul.w	sl, r0, sl
     4d0:	45a2      	cmp	sl, r4
     4d2:	d908      	bls.n	4e6 <CONFIG_BT_RX_STACK_SIZE+0xe6>
     4d4:	eb1e 0404 	adds.w	r4, lr, r4
     4d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     4dc:	d26b      	bcs.n	5b6 <CONFIG_BT_RX_STACK_SIZE+0x1b6>
     4de:	45a2      	cmp	sl, r4
     4e0:	d969      	bls.n	5b6 <CONFIG_BT_RX_STACK_SIZE+0x1b6>
     4e2:	3802      	subs	r0, #2
     4e4:	4474      	add	r4, lr
     4e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4ea:	fba0 8902 	umull	r8, r9, r0, r2
     4ee:	eba4 040a 	sub.w	r4, r4, sl
     4f2:	454c      	cmp	r4, r9
     4f4:	46c2      	mov	sl, r8
     4f6:	464b      	mov	r3, r9
     4f8:	d354      	bcc.n	5a4 <CONFIG_BT_RX_STACK_SIZE+0x1a4>
     4fa:	d051      	beq.n	5a0 <CONFIG_BT_RX_STACK_SIZE+0x1a0>
     4fc:	2e00      	cmp	r6, #0
     4fe:	d069      	beq.n	5d4 <CONFIG_BT_RX_STACK_SIZE+0x1d4>
     500:	ebb1 050a 	subs.w	r5, r1, sl
     504:	eb64 0403 	sbc.w	r4, r4, r3
     508:	fa04 fc0c 	lsl.w	ip, r4, ip
     50c:	40fd      	lsrs	r5, r7
     50e:	40fc      	lsrs	r4, r7
     510:	ea4c 0505 	orr.w	r5, ip, r5
     514:	e9c6 5400 	strd	r5, r4, [r6]
     518:	2700      	movs	r7, #0
     51a:	e747      	b.n	3ac <__udivmoddi4+0xa0>
     51c:	f1c2 0320 	rsb	r3, r2, #32
     520:	fa20 f703 	lsr.w	r7, r0, r3
     524:	4095      	lsls	r5, r2
     526:	fa01 f002 	lsl.w	r0, r1, r2
     52a:	fa21 f303 	lsr.w	r3, r1, r3
     52e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     532:	4338      	orrs	r0, r7
     534:	0c01      	lsrs	r1, r0, #16
     536:	fbb3 f7fe 	udiv	r7, r3, lr
     53a:	fa1f f885 	uxth.w	r8, r5
     53e:	fb0e 3317 	mls	r3, lr, r7, r3
     542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     546:	fb07 f308 	mul.w	r3, r7, r8
     54a:	428b      	cmp	r3, r1
     54c:	fa04 f402 	lsl.w	r4, r4, r2
     550:	d907      	bls.n	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     552:	1869      	adds	r1, r5, r1
     554:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
     558:	d22f      	bcs.n	5ba <CONFIG_BT_RX_STACK_SIZE+0x1ba>
     55a:	428b      	cmp	r3, r1
     55c:	d92d      	bls.n	5ba <CONFIG_BT_RX_STACK_SIZE+0x1ba>
     55e:	3f02      	subs	r7, #2
     560:	4429      	add	r1, r5
     562:	1acb      	subs	r3, r1, r3
     564:	b281      	uxth	r1, r0
     566:	fbb3 f0fe 	udiv	r0, r3, lr
     56a:	fb0e 3310 	mls	r3, lr, r0, r3
     56e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     572:	fb00 f308 	mul.w	r3, r0, r8
     576:	428b      	cmp	r3, r1
     578:	d907      	bls.n	58a <CONFIG_BT_RX_STACK_SIZE+0x18a>
     57a:	1869      	adds	r1, r5, r1
     57c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     580:	d217      	bcs.n	5b2 <CONFIG_BT_RX_STACK_SIZE+0x1b2>
     582:	428b      	cmp	r3, r1
     584:	d915      	bls.n	5b2 <CONFIG_BT_RX_STACK_SIZE+0x1b2>
     586:	3802      	subs	r0, #2
     588:	4429      	add	r1, r5
     58a:	1ac9      	subs	r1, r1, r3
     58c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     590:	e73b      	b.n	40a <CONFIG_BT_RX_STACK_SIZE+0xa>
     592:	4637      	mov	r7, r6
     594:	4630      	mov	r0, r6
     596:	e709      	b.n	3ac <__udivmoddi4+0xa0>
     598:	4607      	mov	r7, r0
     59a:	e6e7      	b.n	36c <__udivmoddi4+0x60>
     59c:	4618      	mov	r0, r3
     59e:	e6fb      	b.n	398 <__udivmoddi4+0x8c>
     5a0:	4541      	cmp	r1, r8
     5a2:	d2ab      	bcs.n	4fc <CONFIG_BT_RX_STACK_SIZE+0xfc>
     5a4:	ebb8 0a02 	subs.w	sl, r8, r2
     5a8:	eb69 020e 	sbc.w	r2, r9, lr
     5ac:	3801      	subs	r0, #1
     5ae:	4613      	mov	r3, r2
     5b0:	e7a4      	b.n	4fc <CONFIG_BT_RX_STACK_SIZE+0xfc>
     5b2:	4660      	mov	r0, ip
     5b4:	e7e9      	b.n	58a <CONFIG_BT_RX_STACK_SIZE+0x18a>
     5b6:	4618      	mov	r0, r3
     5b8:	e795      	b.n	4e6 <CONFIG_BT_RX_STACK_SIZE+0xe6>
     5ba:	4667      	mov	r7, ip
     5bc:	e7d1      	b.n	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     5be:	4681      	mov	r9, r0
     5c0:	e77c      	b.n	4bc <CONFIG_BT_RX_STACK_SIZE+0xbc>
     5c2:	3802      	subs	r0, #2
     5c4:	442c      	add	r4, r5
     5c6:	e747      	b.n	458 <CONFIG_BT_RX_STACK_SIZE+0x58>
     5c8:	f1ac 0c02 	sub.w	ip, ip, #2
     5cc:	442b      	add	r3, r5
     5ce:	e72f      	b.n	430 <CONFIG_BT_RX_STACK_SIZE+0x30>
     5d0:	4638      	mov	r0, r7
     5d2:	e708      	b.n	3e6 <__udivmoddi4+0xda>
     5d4:	4637      	mov	r7, r6
     5d6:	e6e9      	b.n	3ac <__udivmoddi4+0xa0>

000005d8 <__aeabi_idiv0>:
     5d8:	4770      	bx	lr
     5da:	bf00      	nop

000005dc <main>:
#include <device.h>
#include <sensor.h>
#include <stdio.h>

void main(void)
{
     5dc:	b530      	push	{r4, r5, lr}
	struct device *dev = device_get_binding("DHT");
     5de:	4818      	ldr	r0, [pc, #96]	; (640 <CONFIG_BT_CTLR_COMPANY_ID+0x4f>)
{
     5e0:	b087      	sub	sp, #28
	struct device *dev = device_get_binding("DHT");
     5e2:	f009 fa0b 	bl	99fc <device_get_binding>

  if(!dev){
     5e6:	4604      	mov	r4, r0
     5e8:	b920      	cbnz	r0, 5f4 <CONFIG_BT_CTLR_COMPANY_ID+0x3>
    printk("CAN'T ACCESS DEVICE\n");
     5ea:	4816      	ldr	r0, [pc, #88]	; (644 <CONFIG_BT_CTLR_COMPANY_ID+0x53>)
     5ec:	f000 fbc8 	bl	d80 <printk>
		      temp.val1, temp.val2,
		      humidity.val1, humidity.val2);

		k_sleep(2000);
	}
}
     5f0:	b007      	add	sp, #28
     5f2:	bd30      	pop	{r4, r5, pc}
  else printk("dev %p name %s\n", dev, dev->config->name);
     5f4:	6803      	ldr	r3, [r0, #0]
		printk("temp: %d.%02d; humidity: %d.%02d\n",
     5f6:	4d14      	ldr	r5, [pc, #80]	; (648 <CONFIG_BT_CTLR_COMPANY_ID+0x57>)
  else printk("dev %p name %s\n", dev, dev->config->name);
     5f8:	681a      	ldr	r2, [r3, #0]
     5fa:	4601      	mov	r1, r0
     5fc:	4813      	ldr	r0, [pc, #76]	; (64c <CONFIG_BT_CTLR_COMPANY_ID+0x5b>)
     5fe:	f000 fbbf 	bl	d80 <printk>

static inline int _impl_sensor_sample_fetch(struct device *dev)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     602:	6863      	ldr	r3, [r4, #4]
     604:	2120      	movs	r1, #32
     606:	689b      	ldr	r3, [r3, #8]
     608:	4620      	mov	r0, r4
     60a:	4798      	blx	r3
					   enum sensor_channel chan,
					   struct sensor_value *val)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->channel_get(dev, chan, val);
     60c:	6863      	ldr	r3, [r4, #4]
     60e:	aa02      	add	r2, sp, #8
     610:	68db      	ldr	r3, [r3, #12]
     612:	210e      	movs	r1, #14
     614:	4620      	mov	r0, r4
     616:	4798      	blx	r3
     618:	6863      	ldr	r3, [r4, #4]
     61a:	aa04      	add	r2, sp, #16
     61c:	68db      	ldr	r3, [r3, #12]
     61e:	2111      	movs	r1, #17
     620:	4620      	mov	r0, r4
     622:	4798      	blx	r3
		printk("temp: %d.%02d; humidity: %d.%02d\n",
     624:	9b05      	ldr	r3, [sp, #20]
     626:	9300      	str	r3, [sp, #0]
     628:	9902      	ldr	r1, [sp, #8]
     62a:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
     62e:	4628      	mov	r0, r5
     630:	f000 fba6 	bl	d80 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_OBJECT_ALLOC, k_object_alloc, void *, enum k_objects, otype);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
     634:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     638:	f009 fec6 	bl	a3c8 <_impl_k_sleep>
     63c:	e7e1      	b.n	602 <CONFIG_BT_CTLR_COMPANY_ID+0x11>
     63e:	bf00      	nop
     640:	0000ad79 	.word	0x0000ad79
     644:	0000ad7d 	.word	0x0000ad7d
     648:	0000ada2 	.word	0x0000ada2
     64c:	0000ad92 	.word	0x0000ad92

00000650 <nordicsemi_nrf52_init>:

#include <nrf.h>
#include <hal/nrf_power.h>

static int nordicsemi_nrf52_init(struct device *arg)
{
     650:	b510      	push	{r4, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     652:	f04f 0320 	mov.w	r3, #32
     656:	f3ef 8411 	mrs	r4, BASEPRI
     65a:	f383 8811 	msr	BASEPRI, r3

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
     65e:	f000 fbf5 	bl	e4c <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     662:	4a08      	ldr	r2, [pc, #32]	; (684 <nordicsemi_nrf52_init+0x34>)
     664:	2301      	movs	r3, #1
     666:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
}
#endif

__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
     66a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     66e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     672:	4b05      	ldr	r3, [pc, #20]	; (688 <nordicsemi_nrf52_init+0x38>)
     674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     678:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     67a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     67c:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     680:	2000      	movs	r0, #0
     682:	bd10      	pop	{r4, pc}
     684:	4001e000 	.word	0x4001e000
     688:	e000ed00 	.word	0xe000ed00

0000068c <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     68c:	b508      	push	{r3, lr}
     68e:	4604      	mov	r4, r0
     690:	4608      	mov	r0, r1
     692:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     694:	461a      	mov	r2, r3
     696:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     698:	f009 feca 	bl	a430 <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     69c:	f001 fad0 	bl	1c40 <_impl_k_thread_abort>

000006a0 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     6a0:	b570      	push	{r4, r5, r6, lr}
     6a2:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
     6a4:	7ac0      	ldrb	r0, [r0, #11]
     6a6:	250c      	movs	r5, #12
     6a8:	434d      	muls	r5, r1
		&p->levels[level].bits : p->levels[level].bits_p;
     6aa:	4288      	cmp	r0, r1
     6ac:	eb06 0405 	add.w	r4, r6, r5
     6b0:	bfb4      	ite	lt
     6b2:	5971      	ldrlt	r1, [r6, r5]
     6b4:	4621      	movge	r1, r4

	*word = &bitarray[bn / 32];
     6b6:	2420      	movs	r4, #32
     6b8:	fb92 f4f4 	sdiv	r4, r2, r4
     6bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     6c0:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     6c2:	f002 001f 	and.w	r0, r2, #31
     6c6:	bd70      	pop	{r4, r5, r6, pc}

000006c8 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     6c8:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     6ca:	ab01      	add	r3, sp, #4
     6cc:	f7ff ffe8 	bl	6a0 <get_bit_ptr>

	*word |= (1<<bit);
     6d0:	9a01      	ldr	r2, [sp, #4]
     6d2:	2301      	movs	r3, #1
     6d4:	fa03 f000 	lsl.w	r0, r3, r0
     6d8:	6813      	ldr	r3, [r2, #0]
     6da:	4303      	orrs	r3, r0
     6dc:	6013      	str	r3, [r2, #0]
}
     6de:	b003      	add	sp, #12
     6e0:	f85d fb04 	ldr.w	pc, [sp], #4

000006e4 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     6e4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     6e6:	ab01      	add	r3, sp, #4
     6e8:	f7ff ffda 	bl	6a0 <get_bit_ptr>

	*word &= ~(1<<bit);
     6ec:	9a01      	ldr	r2, [sp, #4]
     6ee:	2301      	movs	r3, #1
     6f0:	fa03 f000 	lsl.w	r0, r3, r0
     6f4:	6813      	ldr	r3, [r2, #0]
     6f6:	ea23 0300 	bic.w	r3, r3, r0
     6fa:	6013      	str	r3, [r2, #0]
}
     6fc:	b003      	add	sp, #12
     6fe:	f85d fb04 	ldr.w	pc, [sp], #4

00000702 <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     702:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     706:	4604      	mov	r4, r0
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     708:	6843      	ldr	r3, [r0, #4]
     70a:	8905      	ldrh	r5, [r0, #8]
	u32_t *bits = p->buf + buflen;
     70c:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     70e:	f894 c00a 	ldrb.w	ip, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     712:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     714:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     716:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     718:	f04f 0e0c 	mov.w	lr, #12
	for (i = 0; i < p->n_levels; i++) {
     71c:	458c      	cmp	ip, r1
     71e:	dc05      	bgt.n	72c <_sys_mem_pool_base_init+0x2a>
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     720:	2500      	movs	r5, #0
     722:	8923      	ldrh	r3, [r4, #8]
     724:	42ab      	cmp	r3, r5
     726:	dc22      	bgt.n	76e <_sys_mem_pool_base_init+0x6c>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sys_dlist_init(&p->levels[i].free_list);
     72c:	f8d4 800c 	ldr.w	r8, [r4, #12]
		int nblocks = buflen / sz;
     730:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     734:	fb0e f701 	mul.w	r7, lr, r1
		if (nblocks < 32) {
     738:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     73a:	eb08 0607 	add.w	r6, r8, r7
			bits += (nblocks + 31)/32;
     73e:	bfc8      	it	gt
     740:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     742:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     746:	f106 0904 	add.w	r9, r6, #4
			bits += (nblocks + 31)/32;
     74a:	bfc8      	it	gt
     74c:	0952      	lsrgt	r2, r2, #5
		sz = _ALIGN4(sz / 4);
     74e:	f103 0303 	add.w	r3, r3, #3
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
     752:	e9c6 9901 	strd	r9, r9, [r6, #4]
     756:	f023 0303 	bic.w	r3, r3, #3
			p->max_inline_level = i;
     75a:	bfd4      	ite	le
     75c:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     75e:	f848 0007 	strgt.w	r0, [r8, r7]
	for (i = 0; i < p->n_levels; i++) {
     762:	f101 0101 	add.w	r1, r1, #1
			bits += (nblocks + 31)/32;
     766:	bfc8      	it	gt
     768:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
     76c:	e7d6      	b.n	71c <_sys_mem_pool_base_init+0x1a>
	return p->buf + lsz * block;
     76e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     770:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     772:	6820      	ldr	r0, [r4, #0]
     774:	436a      	muls	r2, r5
     776:	1881      	adds	r1, r0, r2
		sys_dlist_append(&p->levels[0].free_list, block);
     778:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     77a:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
     77c:	689a      	ldr	r2, [r3, #8]
     77e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     780:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     782:	4620      	mov	r0, r4
     784:	6011      	str	r1, [r2, #0]
	list->tail = node;
     786:	6099      	str	r1, [r3, #8]
     788:	462a      	mov	r2, r5
     78a:	2100      	movs	r1, #0
     78c:	f7ff ff9c 	bl	6c8 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     790:	3501      	adds	r5, #1
     792:	e7c6      	b.n	722 <_sys_mem_pool_base_init+0x20>

00000794 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     798:	b089      	sub	sp, #36	; 0x24
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     79a:	7a86      	ldrb	r6, [r0, #10]
{
     79c:	af00      	add	r7, sp, #0
     79e:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[p->n_levels];
     7a2:	00b3      	lsls	r3, r6, #2
     7a4:	330a      	adds	r3, #10
     7a6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
     7aa:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     7ae:	6843      	ldr	r3, [r0, #4]
	size_t lsizes[p->n_levels];
     7b0:	46e9      	mov	r9, sp
{
     7b2:	4605      	mov	r5, r0
	lsizes[0] = _ALIGN4(p->max_sz);
     7b4:	3303      	adds	r3, #3
     7b6:	4648      	mov	r0, r9
     7b8:	f023 0303 	bic.w	r3, r3, #3
     7bc:	f840 3904 	str.w	r3, [r0], #-4
	int alloc_l = -1, free_l = -1;
     7c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     7c4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     7c6:	f04f 0c0c 	mov.w	ip, #12
     7ca:	1e5a      	subs	r2, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     7cc:	429e      	cmp	r6, r3
     7ce:	61fa      	str	r2, [r7, #28]
     7d0:	dd0a      	ble.n	7e8 <_sys_mem_pool_block_alloc+0x54>
		if (i > 0) {
     7d2:	b12b      	cbz	r3, 7e0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     7d4:	6802      	ldr	r2, [r0, #0]
     7d6:	0892      	lsrs	r2, r2, #2
     7d8:	3203      	adds	r2, #3
     7da:	f022 0203 	bic.w	r2, r2, #3
     7de:	6042      	str	r2, [r0, #4]
		}

		if (lsizes[i] < size) {
     7e0:	f850 2f04 	ldr.w	r2, [r0, #4]!
     7e4:	428a      	cmp	r2, r1
     7e6:	d20b      	bcs.n	800 <CONFIG_ISR_STACK_SIZE>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     7e8:	69fb      	ldr	r3, [r7, #28]
     7ea:	3301      	adds	r3, #1
     7ec:	d113      	bne.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
		*data_p = NULL;
     7ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
     7f0:	2300      	movs	r3, #0
     7f2:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     7f4:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     7f8:	3724      	adds	r7, #36	; 0x24
     7fa:	46bd      	mov	sp, r7
     7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     800:	68ea      	ldr	r2, [r5, #12]
     802:	fb0c 2203 	mla	r2, ip, r3, r2
     806:	f102 0e04 	add.w	lr, r2, #4
		if (!level_empty(p, i)) {
     80a:	6852      	ldr	r2, [r2, #4]
     80c:	4572      	cmp	r2, lr
     80e:	bf18      	it	ne
     810:	461c      	movne	r4, r3
	for (i = 0; i < p->n_levels; i++) {
     812:	3301      	adds	r3, #1
     814:	e7d9      	b.n	7ca <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     816:	1c63      	adds	r3, r4, #1
     818:	d0e9      	beq.n	7ee <_sys_mem_pool_block_alloc+0x5a>
	block = sys_dlist_get(&p->levels[l].free_list);
     81a:	68e9      	ldr	r1, [r5, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     81c:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
	return list->head == list;
     820:	230c      	movs	r3, #12
     822:	fb03 1304 	mla	r3, r3, r4, r1
     826:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     82a:	429e      	cmp	r6, r3
     82c:	d063      	beq.n	8f6 <CONFIG_ISR_STACK_SIZE+0xf6>
	node->prev->next = node->next;
     82e:	e9d6 1300 	ldrd	r1, r3, [r6]
     832:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     834:	6831      	ldr	r1, [r6, #0]
     836:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     838:	682b      	ldr	r3, [r5, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     83a:	4621      	mov	r1, r4
	return (block - p->buf) / sz;
     83c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     83e:	4628      	mov	r0, r5
     840:	fb93 f2f2 	sdiv	r2, r3, r2
     844:	f7ff ff4e 	bl	6e4 <clear_free_bit>
     848:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     84c:	f104 0b01 	add.w	fp, r4, #1
     850:	613b      	str	r3, [r7, #16]
     852:	eb09 0484 	add.w	r4, r9, r4, lsl #2
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     856:	69f9      	ldr	r1, [r7, #28]
     858:	682b      	ldr	r3, [r5, #0]
     85a:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
     85e:	4291      	cmp	r1, r2
     860:	eba6 0303 	sub.w	r3, r6, r3
     864:	dc0d      	bgt.n	882 <CONFIG_ISR_STACK_SIZE+0x82>
	*level_p = alloc_l;
     866:	68ba      	ldr	r2, [r7, #8]
     868:	4611      	mov	r1, r2
     86a:	69fa      	ldr	r2, [r7, #28]
     86c:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     86e:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     872:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     876:	687a      	ldr	r2, [r7, #4]
     878:	6013      	str	r3, [r2, #0]
	*data_p = data;
     87a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	return 0;
     87c:	2000      	movs	r0, #0
	*data_p = data;
     87e:	601e      	str	r6, [r3, #0]
	return 0;
     880:	e7ba      	b.n	7f8 <_sys_mem_pool_block_alloc+0x64>
	bn = block_num(p, block, lsizes[l]);
     882:	f854 2b04 	ldr.w	r2, [r4], #4
	return (block - p->buf) / sz;
     886:	fb93 f3f2 	sdiv	r3, r3, r2
     88a:	693a      	ldr	r2, [r7, #16]
		int lbn = 4*bn + i;
     88c:	009b      	lsls	r3, r3, #2
     88e:	60fb      	str	r3, [r7, #12]
     890:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     894:	4413      	add	r3, r2
     896:	617b      	str	r3, [r7, #20]
	for (i = 1; i < 4; i++) {
     898:	f04f 0a01 	mov.w	sl, #1
		int lsz = lsizes[l + 1];
     89c:	f8d4 8000 	ldr.w	r8, [r4]
		void *block2 = (lsz * i) + (char *)block;
     8a0:	fb0a f308 	mul.w	r3, sl, r8
     8a4:	61bb      	str	r3, [r7, #24]
     8a6:	18f3      	adds	r3, r6, r3
     8a8:	603b      	str	r3, [r7, #0]
		set_free_bit(p, l + 1, lbn);
     8aa:	68fb      	ldr	r3, [r7, #12]
     8ac:	4659      	mov	r1, fp
     8ae:	eb0a 0203 	add.w	r2, sl, r3
     8b2:	4628      	mov	r0, r5
     8b4:	f7ff ff08 	bl	6c8 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     8b8:	683b      	ldr	r3, [r7, #0]
     8ba:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     8bc:	8929      	ldrh	r1, [r5, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     8be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     8c2:	4498      	add	r8, r3
     8c4:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     8c8:	686a      	ldr	r2, [r5, #4]
     8ca:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     8cc:	4590      	cmp	r8, r2
     8ce:	d20a      	bcs.n	8e6 <CONFIG_ISR_STACK_SIZE+0xe6>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     8d0:	68ea      	ldr	r2, [r5, #12]
     8d2:	6979      	ldr	r1, [r7, #20]
	node->next = list;
     8d4:	69b8      	ldr	r0, [r7, #24]
     8d6:	440a      	add	r2, r1
     8d8:	1d11      	adds	r1, r2, #4
     8da:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     8dc:	6891      	ldr	r1, [r2, #8]
     8de:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     8e0:	6891      	ldr	r1, [r2, #8]
     8e2:	600b      	str	r3, [r1, #0]
	list->tail = node;
     8e4:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     8e6:	f10a 0a01 	add.w	sl, sl, #1
     8ea:	f1ba 0f04 	cmp.w	sl, #4
     8ee:	d1d5      	bne.n	89c <CONFIG_ISR_STACK_SIZE+0x9c>
     8f0:	f10b 0b01 	add.w	fp, fp, #1
     8f4:	e7af      	b.n	856 <CONFIG_ISR_STACK_SIZE+0x56>
		return -EAGAIN;
     8f6:	f06f 000a 	mvn.w	r0, #10
     8fa:	e77d      	b.n	7f8 <_sys_mem_pool_block_alloc+0x64>

000008fc <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     900:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     902:	7a83      	ldrb	r3, [r0, #10]
     904:	009b      	lsls	r3, r3, #2
     906:	330a      	adds	r3, #10
     908:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
{
     90c:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     90e:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     912:	6843      	ldr	r3, [r0, #4]
	size_t lsizes[p->n_levels];
     914:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     916:	3303      	adds	r3, #3
     918:	f023 0303 	bic.w	r3, r3, #3
{
     91c:	4605      	mov	r5, r0
	lsizes[0] = _ALIGN4(p->max_sz);
     91e:	f8ca 3000 	str.w	r3, [sl]
     922:	4654      	mov	r4, sl
	for (i = 1; i <= level; i++) {
     924:	2001      	movs	r0, #1
     926:	4281      	cmp	r1, r0
     928:	d24c      	bcs.n	9c4 <_sys_mem_pool_block_free+0xc8>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     92a:	460c      	mov	r4, r1
     92c:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     92e:	4632      	mov	r2, r6
     930:	4621      	mov	r1, r4
     932:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     934:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
	void *block = block_ptr(p, lsz, bn);
     938:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     93c:	f7ff fec4 	bl	6c8 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     940:	2c00      	cmp	r4, #0
     942:	d048      	beq.n	9d6 <_sys_mem_pool_block_free+0xda>
	int bit = get_bit_ptr(p, level, bn, &word);
     944:	f107 030c 	add.w	r3, r7, #12
     948:	4632      	mov	r2, r6
     94a:	4621      	mov	r1, r4
     94c:	4628      	mov	r0, r5
     94e:	f7ff fea7 	bl	6a0 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     952:	68fa      	ldr	r2, [r7, #12]
     954:	2304      	movs	r3, #4
     956:	fb90 f0f3 	sdiv	r0, r0, r3
     95a:	0083      	lsls	r3, r0, #2
     95c:	6810      	ldr	r0, [r2, #0]
     95e:	40d8      	lsrs	r0, r3
     960:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     964:	280f      	cmp	r0, #15
     966:	d136      	bne.n	9d6 <_sys_mem_pool_block_free+0xda>
			int b = (bn & ~3) + i;
     968:	f026 0303 	bic.w	r3, r6, #3
		for (i = 0; i < 4; i++) {
     96c:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     970:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     972:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     976:	687b      	ldr	r3, [r7, #4]
     978:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     97a:	461a      	mov	r2, r3
     97c:	4621      	mov	r1, r4
     97e:	4628      	mov	r0, r5
     980:	603b      	str	r3, [r7, #0]
     982:	f7ff feaf 	bl	6e4 <clear_free_bit>
			if (b != bn &&
     986:	683b      	ldr	r3, [r7, #0]
     988:	429e      	cmp	r6, r3
     98a:	d012      	beq.n	9b2 <_sys_mem_pool_block_free+0xb6>
	return p->buf + lsz * block;
     98c:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     990:	f8b5 e008 	ldrh.w	lr, [r5, #8]
     994:	686b      	ldr	r3, [r5, #4]
			    block_fits(p, block_ptr(p, lsz, b), lsz)) {
     996:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     998:	eb02 0c0b 	add.w	ip, r2, fp
	return p->n_max * p->max_sz;
     99c:	fb03 f30e 	mul.w	r3, r3, lr
			if (b != bn &&
     9a0:	459c      	cmp	ip, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     9a2:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     9a6:	d204      	bcs.n	9b2 <_sys_mem_pool_block_free+0xb6>
	node->prev->next = node->next;
     9a8:	6840      	ldr	r0, [r0, #4]
     9aa:	588b      	ldr	r3, [r1, r2]
     9ac:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     9ae:	588b      	ldr	r3, [r1, r2]
     9b0:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     9b2:	f109 0901 	add.w	r9, r9, #1
     9b6:	f1b9 0f04 	cmp.w	r9, #4
     9ba:	d1dc      	bne.n	976 <_sys_mem_pool_block_free+0x7a>
		block_free(p, level-1, lsizes, bn / 4);
     9bc:	fb96 f6f9 	sdiv	r6, r6, r9
     9c0:	3c01      	subs	r4, #1
     9c2:	e7b4      	b.n	92e <_sys_mem_pool_block_free+0x32>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9c4:	6823      	ldr	r3, [r4, #0]
     9c6:	089b      	lsrs	r3, r3, #2
     9c8:	3303      	adds	r3, #3
     9ca:	f023 0303 	bic.w	r3, r3, #3
     9ce:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     9d2:	3001      	adds	r0, #1
     9d4:	e7a7      	b.n	926 <_sys_mem_pool_block_free+0x2a>
	return p->buf + lsz * block;
     9d6:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     9da:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     9dc:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     9de:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     9e2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     9e6:	4498      	add	r8, r3
     9e8:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     9ec:	892a      	ldrh	r2, [r5, #8]
     9ee:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     9f0:	4588      	cmp	r8, r1
     9f2:	d20b      	bcs.n	a0c <_sys_mem_pool_block_free+0x110>
		sys_dlist_append(&p->levels[level].free_list, block);
     9f4:	68e9      	ldr	r1, [r5, #12]
     9f6:	220c      	movs	r2, #12
     9f8:	fb02 1404 	mla	r4, r2, r4, r1
     9fc:	1d22      	adds	r2, r4, #4
	node->next = list;
     9fe:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     a02:	68a2      	ldr	r2, [r4, #8]
     a04:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     a06:	68a2      	ldr	r2, [r4, #8]
     a08:	6013      	str	r3, [r2, #0]
	list->tail = node;
     a0a:	60a3      	str	r3, [r4, #8]
}
     a0c:	3714      	adds	r7, #20
     a0e:	46bd      	mov	sp, r7
     a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000a14 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     a14:	2000      	movs	r0, #0
     a16:	4770      	bx	lr

00000a18 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     a18:	680b      	ldr	r3, [r1, #0]
     a1a:	3301      	adds	r3, #1
     a1c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     a1e:	4b01      	ldr	r3, [pc, #4]	; (a24 <char_out+0xc>)
     a20:	681b      	ldr	r3, [r3, #0]
     a22:	4718      	bx	r3
     a24:	20002d00 	.word	0x20002d00

00000a28 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a2c:	b085      	sub	sp, #20
     a2e:	469b      	mov	fp, r3
     a30:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     a32:	f8df a090 	ldr.w	sl, [pc, #144]	; ac4 <_printk_dec_ulong+0x9c>
     a36:	2c01      	cmp	r4, #1
     a38:	bfb8      	it	lt
     a3a:	2401      	movlt	r4, #1
     a3c:	2b01      	cmp	r3, #1
     a3e:	bf0c      	ite	eq
     a40:	2330      	moveq	r3, #48	; 0x30
     a42:	2320      	movne	r3, #32
     a44:	4615      	mov	r5, r2
     a46:	4680      	mov	r8, r0
     a48:	4689      	mov	r9, r1
     a4a:	9401      	str	r4, [sp, #4]
     a4c:	9302      	str	r3, [sp, #8]
     a4e:	2601      	movs	r6, #1
     a50:	270a      	movs	r7, #10
     a52:	2200      	movs	r2, #0
     a54:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     a58:	b90a      	cbnz	r2, a5e <_printk_dec_ulong+0x36>
     a5a:	45aa      	cmp	sl, r5
     a5c:	d21f      	bcs.n	a9e <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     a5e:	fbb5 f0f4 	udiv	r0, r5, r4
     a62:	4649      	mov	r1, r9
     a64:	3030      	adds	r0, #48	; 0x30
     a66:	47c0      	blx	r8
			digits++;
     a68:	3601      	adds	r6, #1
			found_largest_digit = 1;
     a6a:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     a6c:	3f01      	subs	r7, #1
	while (pos >= 9) {
     a6e:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     a70:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     a74:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     a78:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     a7c:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     a80:	d1e8      	bne.n	a54 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     a82:	4649      	mov	r1, r9
     a84:	f105 0030 	add.w	r0, r5, #48	; 0x30
     a88:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     a8a:	f1bb 0f03 	cmp.w	fp, #3
     a8e:	d103      	bne.n	a98 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     a90:	9b01      	ldr	r3, [sp, #4]
     a92:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     a94:	2c00      	cmp	r4, #0
     a96:	dc0f      	bgt.n	ab8 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     a98:	b005      	add	sp, #20
     a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     a9e:	9b01      	ldr	r3, [sp, #4]
     aa0:	42bb      	cmp	r3, r7
     aa2:	dbe3      	blt.n	a6c <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     aa4:	f1bb 0f02 	cmp.w	fp, #2
     aa8:	d8e0      	bhi.n	a6c <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     aaa:	4649      	mov	r1, r9
     aac:	9802      	ldr	r0, [sp, #8]
     aae:	9203      	str	r2, [sp, #12]
			digits++;
     ab0:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     ab2:	47c0      	blx	r8
			digits++;
     ab4:	9a03      	ldr	r2, [sp, #12]
     ab6:	e7d9      	b.n	a6c <_printk_dec_ulong+0x44>
			out(' ', ctx);
     ab8:	4649      	mov	r1, r9
     aba:	2020      	movs	r0, #32
     abc:	47c0      	blx	r8
     abe:	3c01      	subs	r4, #1
     ac0:	e7e8      	b.n	a94 <_printk_dec_ulong+0x6c>
     ac2:	bf00      	nop
     ac4:	3b9ac9ff 	.word	0x3b9ac9ff

00000ac8 <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
     ac8:	b530      	push	{r4, r5, lr}
     aca:	688a      	ldr	r2, [r1, #8]
	if (!ctx->str || ctx->count >= ctx->max) {
     acc:	680c      	ldr	r4, [r1, #0]
     ace:	1c55      	adds	r5, r2, #1
     ad0:	b114      	cbz	r4, ad8 <str_out+0x10>
     ad2:	684b      	ldr	r3, [r1, #4]
     ad4:	4293      	cmp	r3, r2
     ad6:	dc01      	bgt.n	adc <str_out+0x14>
		ctx->count++;
     ad8:	608d      	str	r5, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
	}

	return c;
}
     ada:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
     adc:	3b01      	subs	r3, #1
     ade:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
     ae0:	bf08      	it	eq
     ae2:	2200      	moveq	r2, #0
     ae4:	608d      	str	r5, [r1, #8]
     ae6:	bf0c      	ite	eq
     ae8:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
     aea:	54a0      	strbne	r0, [r4, r2]
     aec:	e7f5      	b.n	ada <str_out+0x12>
	...

00000af0 <__printk_hook_install>:
	_char_out = fn;
     af0:	4b01      	ldr	r3, [pc, #4]	; (af8 <__printk_hook_install+0x8>)
     af2:	6018      	str	r0, [r3, #0]
}
     af4:	4770      	bx	lr
     af6:	bf00      	nop
     af8:	20002d00 	.word	0x20002d00

00000afc <_vprintk>:
{
     afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b00:	b089      	sub	sp, #36	; 0x24
     b02:	461c      	mov	r4, r3
	int long_ctr = 0;
     b04:	f04f 0a00 	mov.w	sl, #0
     b08:	1e53      	subs	r3, r2, #1
{
     b0a:	4606      	mov	r6, r0
     b0c:	460f      	mov	r7, r1
     b0e:	9304      	str	r3, [sp, #16]
	int min_width = -1;
     b10:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     b14:	46d0      	mov	r8, sl
			might_format = 0;
     b16:	2500      	movs	r5, #0
				break;
     b18:	e005      	b.n	b26 <_vprintk+0x2a>
		if (!might_format) {
     b1a:	b96d      	cbnz	r5, b38 <_vprintk+0x3c>
			if (*fmt != '%') {
     b1c:	2825      	cmp	r0, #37	; 0x25
     b1e:	f000 8112 	beq.w	d46 <_vprintk+0x24a>
				out((int)*fmt, ctx);
     b22:	4639      	mov	r1, r7
     b24:	47b0      	blx	r6
	while (*fmt) {
     b26:	9b04      	ldr	r3, [sp, #16]
     b28:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     b2c:	9304      	str	r3, [sp, #16]
     b2e:	2800      	cmp	r0, #0
     b30:	d1f3      	bne.n	b1a <_vprintk+0x1e>
}
     b32:	b009      	add	sp, #36	; 0x24
     b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     b38:	2864      	cmp	r0, #100	; 0x64
     b3a:	d061      	beq.n	c00 <_vprintk+0x104>
     b3c:	d819      	bhi.n	b72 <_vprintk+0x76>
     b3e:	2839      	cmp	r0, #57	; 0x39
     b40:	d80a      	bhi.n	b58 <_vprintk+0x5c>
     b42:	2831      	cmp	r0, #49	; 0x31
     b44:	d250      	bcs.n	be8 <_vprintk+0xec>
     b46:	282d      	cmp	r0, #45	; 0x2d
     b48:	d03c      	beq.n	bc4 <_vprintk+0xc8>
     b4a:	2830      	cmp	r0, #48	; 0x30
     b4c:	d03d      	beq.n	bca <_vprintk+0xce>
     b4e:	2825      	cmp	r0, #37	; 0x25
     b50:	d108      	bne.n	b64 <_vprintk+0x68>
				out((int)'%', ctx);
     b52:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     b54:	47b0      	blx	r6
     b56:	e7de      	b.n	b16 <_vprintk+0x1a>
			switch (*fmt) {
     b58:	2858      	cmp	r0, #88	; 0x58
     b5a:	f000 8088 	beq.w	c6e <_vprintk+0x172>
     b5e:	2863      	cmp	r0, #99	; 0x63
     b60:	f000 80eb 	beq.w	d3a <_vprintk+0x23e>
				out((int)'%', ctx);
     b64:	4639      	mov	r1, r7
     b66:	2025      	movs	r0, #37	; 0x25
     b68:	47b0      	blx	r6
				out((int)*fmt, ctx);
     b6a:	9b04      	ldr	r3, [sp, #16]
     b6c:	4639      	mov	r1, r7
     b6e:	7818      	ldrb	r0, [r3, #0]
     b70:	e7f0      	b.n	b54 <_vprintk+0x58>
			switch (*fmt) {
     b72:	2870      	cmp	r0, #112	; 0x70
     b74:	d071      	beq.n	c5a <_vprintk+0x15e>
     b76:	d806      	bhi.n	b86 <_vprintk+0x8a>
     b78:	2869      	cmp	r0, #105	; 0x69
     b7a:	d041      	beq.n	c00 <_vprintk+0x104>
     b7c:	286c      	cmp	r0, #108	; 0x6c
     b7e:	d03c      	beq.n	bfa <_vprintk+0xfe>
     b80:	2868      	cmp	r0, #104	; 0x68
     b82:	d0d0      	beq.n	b26 <_vprintk+0x2a>
     b84:	e7ee      	b.n	b64 <_vprintk+0x68>
     b86:	2875      	cmp	r0, #117	; 0x75
     b88:	d057      	beq.n	c3a <_vprintk+0x13e>
     b8a:	d817      	bhi.n	bbc <_vprintk+0xc0>
     b8c:	2873      	cmp	r0, #115	; 0x73
     b8e:	d1e9      	bne.n	b64 <_vprintk+0x68>
				char *s = va_arg(ap, char *);
     b90:	6823      	ldr	r3, [r4, #0]
     b92:	f104 0b04 	add.w	fp, r4, #4
     b96:	461c      	mov	r4, r3
				while (*s)
     b98:	4625      	mov	r5, r4
     b9a:	f815 0b01 	ldrb.w	r0, [r5], #1
     b9e:	2800      	cmp	r0, #0
     ba0:	f040 80c0 	bne.w	d24 <_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
     ba4:	f1b8 0f03 	cmp.w	r8, #3
     ba8:	f040 80d6 	bne.w	d58 <_vprintk+0x25c>
					int remaining = min_width - (s - start);
     bac:	1ae4      	subs	r4, r4, r3
     bae:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     bb2:	2c00      	cmp	r4, #0
     bb4:	f300 80bc 	bgt.w	d30 <_vprintk+0x234>
				char *s = va_arg(ap, char *);
     bb8:	465c      	mov	r4, fp
     bba:	e7ac      	b.n	b16 <_vprintk+0x1a>
			switch (*fmt) {
     bbc:	2878      	cmp	r0, #120	; 0x78
     bbe:	d056      	beq.n	c6e <_vprintk+0x172>
     bc0:	287a      	cmp	r0, #122	; 0x7a
     bc2:	e7de      	b.n	b82 <_vprintk+0x86>
				padding = PAD_SPACE_AFTER;
     bc4:	f04f 0803 	mov.w	r8, #3
     bc8:	e7ad      	b.n	b26 <_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
     bca:	f1b9 0f00 	cmp.w	r9, #0
     bce:	da0e      	bge.n	bee <_vprintk+0xf2>
     bd0:	f1b8 0f00 	cmp.w	r8, #0
     bd4:	f000 80bd 	beq.w	d52 <_vprintk+0x256>
					min_width = *fmt - '0';
     bd8:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     bdc:	f1b8 0f00 	cmp.w	r8, #0
     be0:	bf08      	it	eq
     be2:	f04f 0802 	moveq.w	r8, #2
     be6:	e79e      	b.n	b26 <_vprintk+0x2a>
				if (min_width < 0) {
     be8:	f1b9 0f00 	cmp.w	r9, #0
     bec:	dbf4      	blt.n	bd8 <_vprintk+0xdc>
					min_width = 10 * min_width + *fmt - '0';
     bee:	230a      	movs	r3, #10
     bf0:	fb03 0909 	mla	r9, r3, r9, r0
     bf4:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     bf8:	e7f0      	b.n	bdc <_vprintk+0xe0>
				long_ctr++;
     bfa:	f10a 0a01 	add.w	sl, sl, #1
     bfe:	e792      	b.n	b26 <_vprintk+0x2a>
				if (long_ctr < 2) {
     c00:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     c04:	bfc5      	ittet	gt
     c06:	3407      	addgt	r4, #7
     c08:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     c0c:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     c0e:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     c10:	bfd4      	ite	le
     c12:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     c14:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     c18:	2d00      	cmp	r5, #0
     c1a:	da05      	bge.n	c28 <_vprintk+0x12c>
					out((int)'-', ctx);
     c1c:	4639      	mov	r1, r7
     c1e:	202d      	movs	r0, #45	; 0x2d
     c20:	47b0      	blx	r6
					d = -d;
     c22:	426d      	negs	r5, r5
					min_width--;
     c24:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     c28:	f8cd 9000 	str.w	r9, [sp]
     c2c:	4643      	mov	r3, r8
     c2e:	462a      	mov	r2, r5
     c30:	4639      	mov	r1, r7
     c32:	4630      	mov	r0, r6
     c34:	f7ff fef8 	bl	a28 <_printk_dec_ulong>
     c38:	e76d      	b.n	b16 <_vprintk+0x1a>
				if (long_ctr < 2) {
     c3a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     c3e:	bfc5      	ittet	gt
     c40:	3407      	addgt	r4, #7
     c42:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     c46:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     c48:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     c4a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     c4e:	bfcc      	ite	gt
     c50:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     c54:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     c56:	4643      	mov	r3, r8
     c58:	e7ea      	b.n	c30 <_vprintk+0x134>
				  out('0', ctx);
     c5a:	4639      	mov	r1, r7
     c5c:	2030      	movs	r0, #48	; 0x30
     c5e:	47b0      	blx	r6
				  out('x', ctx);
     c60:	4639      	mov	r1, r7
     c62:	2078      	movs	r0, #120	; 0x78
     c64:	47b0      	blx	r6
				  min_width = 8;
     c66:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     c6a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     c6e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     c72:	bfc7      	ittee	gt
     c74:	3407      	addgt	r4, #7
     c76:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     c7a:	6823      	ldrle	r3, [r4, #0]
     c7c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     c7e:	bfc2      	ittt	gt
     c80:	f103 0408 	addgt.w	r4, r3, #8
     c84:	681b      	ldrgt	r3, [r3, #0]
     c86:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     c88:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     c8c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     c90:	bfd8      	it	le
     c92:	3404      	addle	r4, #4
	int digits = 0;
     c94:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     c96:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     c98:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     c9a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     c9e:	9b05      	ldr	r3, [sp, #20]
     ca0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     ca4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     ca8:	f010 000f 	ands.w	r0, r0, #15
     cac:	d109      	bne.n	cc2 <_vprintk+0x1c6>
     cae:	9b07      	ldr	r3, [sp, #28]
     cb0:	b913      	cbnz	r3, cb8 <_vprintk+0x1bc>
     cb2:	f1bb 0f00 	cmp.w	fp, #0
     cb6:	d124      	bne.n	d02 <_vprintk+0x206>
			nibble += nibble > 9 ? 87 : 48;
     cb8:	f04f 0c30 	mov.w	ip, #48	; 0x30
     cbc:	e007      	b.n	cce <_vprintk+0x1d2>
	for (; size; size--) {
     cbe:	9a06      	ldr	r2, [sp, #24]
     cc0:	e7eb      	b.n	c9a <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     cc2:	2809      	cmp	r0, #9
     cc4:	bf8c      	ite	hi
     cc6:	f04f 0c57 	movhi.w	ip, #87	; 0x57
     cca:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
     cce:	4639      	mov	r1, r7
     cd0:	4460      	add	r0, ip
     cd2:	9206      	str	r2, [sp, #24]
     cd4:	47b0      	blx	r6
			digits++;
     cd6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     cd8:	9507      	str	r5, [sp, #28]
			digits++;
     cda:	3301      	adds	r3, #1
     cdc:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     cde:	f1bb 0f00 	cmp.w	fp, #0
     ce2:	d1ec      	bne.n	cbe <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ce4:	f1b8 0f03 	cmp.w	r8, #3
     ce8:	f47f af15 	bne.w	b16 <_vprintk+0x1a>
		remaining = min_width * 2 - digits;
     cec:	9b03      	ldr	r3, [sp, #12]
     cee:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     cf2:	2d00      	cmp	r5, #0
     cf4:	f77f af0f 	ble.w	b16 <_vprintk+0x1a>
			out(' ', ctx);
     cf8:	4639      	mov	r1, r7
     cfa:	2020      	movs	r0, #32
     cfc:	47b0      	blx	r6
     cfe:	3d01      	subs	r5, #1
     d00:	e7f7      	b.n	cf2 <_vprintk+0x1f6>
		if (remaining-- <= min_width) {
     d02:	1e53      	subs	r3, r2, #1
     d04:	4591      	cmp	r9, r2
     d06:	9306      	str	r3, [sp, #24]
     d08:	dbe9      	blt.n	cde <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     d0a:	f1b8 0f01 	cmp.w	r8, #1
     d0e:	d103      	bne.n	d18 <_vprintk+0x21c>
				out('0', ctx);
     d10:	4639      	mov	r1, r7
     d12:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     d14:	47b0      	blx	r6
     d16:	e7e2      	b.n	cde <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     d18:	f1b8 0f02 	cmp.w	r8, #2
     d1c:	d1df      	bne.n	cde <_vprintk+0x1e2>
				out(' ', ctx);
     d1e:	4639      	mov	r1, r7
     d20:	2020      	movs	r0, #32
     d22:	e7f7      	b.n	d14 <_vprintk+0x218>
					out((int)(*s++), ctx);
     d24:	4639      	mov	r1, r7
     d26:	9303      	str	r3, [sp, #12]
     d28:	462c      	mov	r4, r5
     d2a:	47b0      	blx	r6
     d2c:	9b03      	ldr	r3, [sp, #12]
     d2e:	e733      	b.n	b98 <_vprintk+0x9c>
						out(' ', ctx);
     d30:	4639      	mov	r1, r7
     d32:	2020      	movs	r0, #32
     d34:	47b0      	blx	r6
     d36:	3c01      	subs	r4, #1
     d38:	e73b      	b.n	bb2 <_vprintk+0xb6>
				out(c, ctx);
     d3a:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     d3c:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     d3e:	4639      	mov	r1, r7
     d40:	47b0      	blx	r6
				int c = va_arg(ap, int);
     d42:	462c      	mov	r4, r5
     d44:	e6e7      	b.n	b16 <_vprintk+0x1a>
				long_ctr = 0;
     d46:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     d48:	46a8      	mov	r8, r5
				min_width = -1;
     d4a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     d4e:	2501      	movs	r5, #1
     d50:	e6e9      	b.n	b26 <_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
     d52:	f04f 0801 	mov.w	r8, #1
     d56:	e6e6      	b.n	b26 <_vprintk+0x2a>
				char *s = va_arg(ap, char *);
     d58:	465c      	mov	r4, fp
			might_format = 0;
     d5a:	4605      	mov	r5, r0
     d5c:	e6e3      	b.n	b26 <_vprintk+0x2a>
	...

00000d60 <vprintk>:
{
     d60:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     d62:	ac02      	add	r4, sp, #8
     d64:	2300      	movs	r3, #0
     d66:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     d6a:	4602      	mov	r2, r0
     d6c:	460b      	mov	r3, r1
     d6e:	4803      	ldr	r0, [pc, #12]	; (d7c <vprintk+0x1c>)
     d70:	4621      	mov	r1, r4
     d72:	f7ff fec3 	bl	afc <_vprintk>
}
     d76:	9801      	ldr	r0, [sp, #4]
     d78:	b002      	add	sp, #8
     d7a:	bd10      	pop	{r4, pc}
     d7c:	00000a19 	.word	0x00000a19

00000d80 <printk>:
{
     d80:	b40f      	push	{r0, r1, r2, r3}
     d82:	b507      	push	{r0, r1, r2, lr}
     d84:	a904      	add	r1, sp, #16
     d86:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     d8a:	9101      	str	r1, [sp, #4]
		ret = vprintk(fmt, ap);
     d8c:	f7ff ffe8 	bl	d60 <vprintk>
}
     d90:	b003      	add	sp, #12
     d92:	f85d eb04 	ldr.w	lr, [sp], #4
     d96:	b004      	add	sp, #16
     d98:	4770      	bx	lr
	...

00000d9c <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     d9c:	b40c      	push	{r2, r3}
     d9e:	b530      	push	{r4, r5, lr}
     da0:	b085      	sub	sp, #20
     da2:	ab08      	add	r3, sp, #32
	struct str_context ctx = { str, size, 0 };
     da4:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     da8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;

	va_start(ap, fmt);
     dac:	9300      	str	r3, [sp, #0]
{
     dae:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     db0:	2500      	movs	r5, #0
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     db2:	a901      	add	r1, sp, #4
     db4:	4806      	ldr	r0, [pc, #24]	; (dd0 <snprintk+0x34>)
	struct str_context ctx = { str, size, 0 };
     db6:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     db8:	f7ff fea0 	bl	afc <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     dbc:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     dc0:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     dc2:	bfb8      	it	lt
     dc4:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     dc6:	b005      	add	sp, #20
     dc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     dcc:	b002      	add	sp, #8
     dce:	4770      	bx	lr
     dd0:	00000ac9 	.word	0x00000ac9

00000dd4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_HAS_HW_NRF_SPI1, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_RX_BUFFERS, 1);
GEN_ABSOLUTE_SYM(CONFIG_MINIMAL_LIBC_MALLOC_ARENA_SIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_TX_BUFFERS, 2);

GEN_ABS_SYM_END
     dd4:	4770      	bx	lr
	...

00000dd8 <errata_108>:
}


static bool errata_12(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     dd8:	4b0c      	ldr	r3, [pc, #48]	; (e0c <errata_108+0x34>)
     dda:	781b      	ldrb	r3, [r3, #0]
     ddc:	2b06      	cmp	r3, #6
     dde:	d110      	bne.n	e02 <errata_108+0x2a>
     de0:	4b0b      	ldr	r3, [pc, #44]	; (e10 <errata_108+0x38>)
     de2:	681b      	ldr	r3, [r3, #0]
     de4:	071a      	lsls	r2, r3, #28
     de6:	d10c      	bne.n	e02 <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     de8:	4b0a      	ldr	r3, [pc, #40]	; (e14 <errata_108+0x3c>)
     dea:	6818      	ldr	r0, [r3, #0]
     dec:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
     df0:	2b30      	cmp	r3, #48	; 0x30
     df2:	d008      	beq.n	e06 <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     df4:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
     df8:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
     dfc:	4258      	negs	r0, r3
     dfe:	4158      	adcs	r0, r3
     e00:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     e02:	2000      	movs	r0, #0
     e04:	4770      	bx	lr
            return true;
     e06:	2001      	movs	r0, #1
}
     e08:	4770      	bx	lr
     e0a:	bf00      	nop
     e0c:	f0000fe0 	.word	0xf0000fe0
     e10:	f0000fe4 	.word	0xf0000fe4
     e14:	f0000fe8 	.word	0xf0000fe8

00000e18 <errata_16>:

static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     e18:	4b09      	ldr	r3, [pc, #36]	; (e40 <errata_16+0x28>)
     e1a:	781b      	ldrb	r3, [r3, #0]
     e1c:	2b06      	cmp	r3, #6
     e1e:	d10c      	bne.n	e3a <errata_16+0x22>
     e20:	4b08      	ldr	r3, [pc, #32]	; (e44 <errata_16+0x2c>)
     e22:	681b      	ldr	r3, [r3, #0]
     e24:	071a      	lsls	r2, r3, #28
     e26:	d108      	bne.n	e3a <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     e28:	4b07      	ldr	r3, [pc, #28]	; (e48 <errata_16+0x30>)
     e2a:	6818      	ldr	r0, [r3, #0]
     e2c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
     e30:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     e34:	4258      	negs	r0, r3
     e36:	4158      	adcs	r0, r3
     e38:	4770      	bx	lr
            return true;
        }
    }

    return false;
     e3a:	2000      	movs	r0, #0
}
     e3c:	4770      	bx	lr
     e3e:	bf00      	nop
     e40:	f0000fe0 	.word	0xf0000fe0
     e44:	f0000fe4 	.word	0xf0000fe4
     e48:	f0000fe8 	.word	0xf0000fe8

00000e4c <SystemInit>:
{
     e4c:	b508      	push	{r3, lr}
    if (errata_12()){
     e4e:	f7ff ffc3 	bl	dd8 <errata_108>
     e52:	b128      	cbz	r0, e60 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
     e54:	4b78      	ldr	r3, [pc, #480]	; (1038 <SystemInit+0x1ec>)
     e56:	4a79      	ldr	r2, [pc, #484]	; (103c <SystemInit+0x1f0>)
     e58:	681b      	ldr	r3, [r3, #0]
     e5a:	f3c3 2304 	ubfx	r3, r3, #8, #5
     e5e:	6013      	str	r3, [r2, #0]
    if (errata_16()){
     e60:	f7ff ffda 	bl	e18 <errata_16>
     e64:	b110      	cbz	r0, e6c <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     e66:	4b76      	ldr	r3, [pc, #472]	; (1040 <SystemInit+0x1f4>)
     e68:	4a76      	ldr	r2, [pc, #472]	; (1044 <SystemInit+0x1f8>)
     e6a:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     e6c:	f7ff ffb4 	bl	dd8 <errata_108>
     e70:	b128      	cbz	r0, e7e <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     e72:	4b75      	ldr	r3, [pc, #468]	; (1048 <SystemInit+0x1fc>)
     e74:	4a75      	ldr	r2, [pc, #468]	; (104c <SystemInit+0x200>)
     e76:	681b      	ldr	r3, [r3, #0]
     e78:	f3c3 3342 	ubfx	r3, r3, #13, #3
     e7c:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     e7e:	f7ff ffcb 	bl	e18 <errata_16>
     e82:	b120      	cbz	r0, e8e <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     e84:	4a72      	ldr	r2, [pc, #456]	; (1050 <SystemInit+0x204>)
     e86:	68d3      	ldr	r3, [r2, #12]
     e88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     e8c:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     e8e:	f7ff ffa3 	bl	dd8 <errata_108>
     e92:	b140      	cbz	r0, ea6 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
     e94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     e98:	2200      	movs	r2, #0
     e9a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     e9e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     ea2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     ea6:	f7ff ffb7 	bl	e18 <errata_16>
     eaa:	b110      	cbz	r0, eb2 <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     eac:	4b69      	ldr	r3, [pc, #420]	; (1054 <SystemInit+0x208>)
     eae:	2203      	movs	r2, #3
     eb0:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     eb2:	f7ff ffb1 	bl	e18 <errata_16>
     eb6:	b140      	cbz	r0, eca <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     eb8:	4b67      	ldr	r3, [pc, #412]	; (1058 <SystemInit+0x20c>)
     eba:	2205      	movs	r2, #5
     ebc:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     ebe:	2201      	movs	r2, #1
     ec0:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     ec2:	2200      	movs	r2, #0
     ec4:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     ec6:	223f      	movs	r2, #63	; 0x3f
     ec8:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     eca:	4b64      	ldr	r3, [pc, #400]	; (105c <SystemInit+0x210>)
     ecc:	781b      	ldrb	r3, [r3, #0]
     ece:	2b06      	cmp	r3, #6
     ed0:	d150      	bne.n	f74 <SystemInit+0x128>
     ed2:	4b63      	ldr	r3, [pc, #396]	; (1060 <SystemInit+0x214>)
     ed4:	681b      	ldr	r3, [r3, #0]
     ed6:	0719      	lsls	r1, r3, #28
     ed8:	d14c      	bne.n	f74 <SystemInit+0x128>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     eda:	4b62      	ldr	r3, [pc, #392]	; (1064 <SystemInit+0x218>)
     edc:	681b      	ldr	r3, [r3, #0]
     ede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ee2:	2b50      	cmp	r3, #80	; 0x50
     ee4:	d146      	bne.n	f74 <SystemInit+0x128>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     eea:	4b5f      	ldr	r3, [pc, #380]	; (1068 <SystemInit+0x21c>)
     eec:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     ef0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     ef4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     ef8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     efc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     f00:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     f04:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     f08:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     f0c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     f10:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     f14:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     f18:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     f1c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     f20:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     f24:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     f28:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     f2c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     f30:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     f34:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     f38:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     f3c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     f40:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     f44:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     f48:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     f4c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     f50:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     f54:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     f58:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     f5c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     f60:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     f64:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     f68:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     f6c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     f70:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     f74:	f7ff ff30 	bl	dd8 <errata_108>
     f78:	b128      	cbz	r0, f86 <SystemInit+0x13a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     f7a:	4b3c      	ldr	r3, [pc, #240]	; (106c <SystemInit+0x220>)
     f7c:	4a3c      	ldr	r2, [pc, #240]	; (1070 <SystemInit+0x224>)
     f7e:	681b      	ldr	r3, [r3, #0]
     f80:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     f84:	6013      	str	r3, [r2, #0]
    if (errata_136()){
     f86:	f7ff ff27 	bl	dd8 <errata_108>
     f8a:	b148      	cbz	r0, fa0 <SystemInit+0x154>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
     f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     f90:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     f94:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
     f96:	bf44      	itt	mi
     f98:	f06f 0201 	mvnmi.w	r2, #1
     f9c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
}


static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
     fa0:	4b34      	ldr	r3, [pc, #208]	; (1074 <SystemInit+0x228>)
     fa2:	681b      	ldr	r3, [r3, #0]
     fa4:	2b06      	cmp	r3, #6
     fa6:	d108      	bne.n	fba <SystemInit+0x16e>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
     fa8:	4b33      	ldr	r3, [pc, #204]	; (1078 <SystemInit+0x22c>)
     faa:	681b      	ldr	r3, [r3, #0]
     fac:	2b06      	cmp	r3, #6
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
     fae:	bf01      	itttt	eq
     fb0:	4a32      	ldreq	r2, [pc, #200]	; (107c <SystemInit+0x230>)
     fb2:	6813      	ldreq	r3, [r2, #0]
     fb4:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
     fb8:	6013      	streq	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     fba:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     fbe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     fc2:	2a00      	cmp	r2, #0
     fc4:	db03      	blt.n	fce <SystemInit+0x182>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
     fc6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     fca:	2b00      	cmp	r3, #0
     fcc:	da2f      	bge.n	102e <SystemInit+0x1e2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     fce:	4b2c      	ldr	r3, [pc, #176]	; (1080 <SystemInit+0x234>)
     fd0:	2201      	movs	r2, #1
     fd2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     fd6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     fda:	2a00      	cmp	r2, #0
     fdc:	d0fb      	beq.n	fd6 <SystemInit+0x18a>
            NRF_UICR->PSELRESET[0] = 21;
     fde:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     fe2:	2115      	movs	r1, #21
     fe4:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     fe8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     fec:	2a00      	cmp	r2, #0
     fee:	d0fb      	beq.n	fe8 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[1] = 21;
     ff0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     ff4:	2215      	movs	r2, #21
     ff6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     ffa:	4b21      	ldr	r3, [pc, #132]	; (1080 <SystemInit+0x234>)
     ffc:	461a      	mov	r2, r3
     ffe:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    1002:	2900      	cmp	r1, #0
    1004:	d0fb      	beq.n	ffe <SystemInit+0x1b2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    1006:	2100      	movs	r1, #0
    1008:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    100c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1010:	2b00      	cmp	r3, #0
    1012:	d0fb      	beq.n	100c <SystemInit+0x1c0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1014:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1018:	491a      	ldr	r1, [pc, #104]	; (1084 <SystemInit+0x238>)
    101a:	4b1b      	ldr	r3, [pc, #108]	; (1088 <SystemInit+0x23c>)
    101c:	68ca      	ldr	r2, [r1, #12]
    101e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1022:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1024:	60cb      	str	r3, [r1, #12]
    1026:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    102a:	bf00      	nop
    102c:	e7fd      	b.n	102a <SystemInit+0x1de>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    102e:	4b17      	ldr	r3, [pc, #92]	; (108c <SystemInit+0x240>)
    1030:	4a17      	ldr	r2, [pc, #92]	; (1090 <SystemInit+0x244>)
    1032:	601a      	str	r2, [r3, #0]
}
    1034:	bd08      	pop	{r3, pc}
    1036:	bf00      	nop
    1038:	10000324 	.word	0x10000324
    103c:	40013540 	.word	0x40013540
    1040:	4007c074 	.word	0x4007c074
    1044:	baadf00d 	.word	0xbaadf00d
    1048:	10000244 	.word	0x10000244
    104c:	4000053c 	.word	0x4000053c
    1050:	e000edf0 	.word	0xe000edf0
    1054:	400005a0 	.word	0x400005a0
    1058:	40005610 	.word	0x40005610
    105c:	f0000fe0 	.word	0xf0000fe0
    1060:	f0000fe4 	.word	0xf0000fe4
    1064:	f0000fe8 	.word	0xf0000fe8
    1068:	4000c000 	.word	0x4000c000
    106c:	10000258 	.word	0x10000258
    1070:	40000ee4 	.word	0x40000ee4
    1074:	10000130 	.word	0x10000130
    1078:	10000134 	.word	0x10000134
    107c:	4000173c 	.word	0x4000173c
    1080:	4001e000 	.word	0x4001e000
    1084:	e000ed00 	.word	0xe000ed00
    1088:	05fa0004 	.word	0x05fa0004
    108c:	20002d04 	.word	0x20002d04
    1090:	03d09000 	.word	0x03d09000

00001094 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1094:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    1096:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
    1098:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    109a:	bf9d      	ittte	ls
    109c:	6882      	ldrls	r2, [r0, #8]
    109e:	18d2      	addls	r2, r2, r3
    10a0:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
  } else {
    r = RdOff - WrOff - 1u;
    10a4:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    10a8:	bf94      	ite	ls
    10aa:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
    10ac:	1a58      	subhi	r0, r3, r1
  }
  return r;
}
    10ae:	4770      	bx	lr

000010b0 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    10b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    10b4:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    10b8:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    10ba:	1bf6      	subs	r6, r6, r7
    10bc:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    10be:	4296      	cmp	r6, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    10c0:	4688      	mov	r8, r1
    10c2:	4615      	mov	r5, r2
    10c4:	4438      	add	r0, r7
  if (Rem > NumBytes) {
    10c6:	d905      	bls.n	10d4 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    10c8:	f000 fe89 	bl	1dde <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    10cc:	443d      	add	r5, r7
    pRing->WrOff = NumBytesAtOnce;
    10ce:	60e5      	str	r5, [r4, #12]
}
    10d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    10d4:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    10d6:	1bad      	subs	r5, r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    10d8:	f000 fe81 	bl	1dde <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    10dc:	462a      	mov	r2, r5
    10de:	eb08 0106 	add.w	r1, r8, r6
    10e2:	6860      	ldr	r0, [r4, #4]
    10e4:	f000 fe7b 	bl	1dde <memcpy>
    10e8:	e7f1      	b.n	10ce <_WriteNoCheck+0x1e>

000010ea <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    10ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    10ee:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    10f0:	4606      	mov	r6, r0
    10f2:	4689      	mov	r9, r1
    10f4:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    10f6:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    10fa:	6934      	ldr	r4, [r6, #16]
    10fc:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    10fe:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    1100:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    1102:	bf28      	it	cs
    1104:	18e4      	addcs	r4, r4, r3
    1106:	3c01      	subs	r4, #1
    1108:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    110a:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    110c:	42bc      	cmp	r4, r7
    110e:	bf28      	it	cs
    1110:	463c      	movcs	r4, r7
    1112:	4294      	cmp	r4, r2
    1114:	bf28      	it	cs
    1116:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    1118:	4649      	mov	r1, r9
    111a:	4428      	add	r0, r5
    111c:	4622      	mov	r2, r4
    111e:	f000 fe5e 	bl	1dde <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    1122:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    1124:	4425      	add	r5, r4
      WrOff = 0u;
    1126:	42ab      	cmp	r3, r5
    1128:	bf08      	it	eq
    112a:	2500      	moveq	r5, #0
  } while (NumBytes);
    112c:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    112e:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    1130:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    1132:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    1134:	d1e1      	bne.n	10fa <_WriteBlocking+0x10>
}
    1136:	4640      	mov	r0, r8
    1138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000113c <_DoInit>:
static void _DoInit(void) {
    113c:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    113e:	4c11      	ldr	r4, [pc, #68]	; (1184 <_DoInit+0x48>)
  p->aUp[0].sName         = "Terminal";
    1140:	4a11      	ldr	r2, [pc, #68]	; (1188 <_DoInit+0x4c>)
    1142:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1144:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1146:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    114a:	4b10      	ldr	r3, [pc, #64]	; (118c <_DoInit+0x50>)
    114c:	61e3      	str	r3, [r4, #28]
  p->aDown[0].sName         = "Terminal";
    114e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1150:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    1154:	4a0e      	ldr	r2, [pc, #56]	; (1190 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1156:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    1158:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    115a:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    115c:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    115e:	490d      	ldr	r1, [pc, #52]	; (1194 <_DoInit+0x58>)
  p->aUp[0].RdOff         = 0u;
    1160:	62a3      	str	r3, [r4, #40]	; 0x28
  strcpy(&p->acID[7], "RTT");
    1162:	1de0      	adds	r0, r4, #7
  p->aUp[0].WrOff         = 0u;
    1164:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1166:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    1168:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    116a:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    116c:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    116e:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    1170:	f000 fe0e 	bl	1d90 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    1174:	4908      	ldr	r1, [pc, #32]	; (1198 <_DoInit+0x5c>)
    1176:	4620      	mov	r0, r4
    1178:	f000 fe0a 	bl	1d90 <strcpy>
  p->acID[6] = ' ';
    117c:	2320      	movs	r3, #32
    117e:	71a3      	strb	r3, [r4, #6]
}
    1180:	bd10      	pop	{r4, pc}
    1182:	bf00      	nop
    1184:	20001198 	.word	0x20001198
    1188:	0000add3 	.word	0x0000add3
    118c:	20000010 	.word	0x20000010
    1190:	20000000 	.word	0x20000000
    1194:	0000addc 	.word	0x0000addc
    1198:	0000ade0 	.word	0x0000ade0

0000119c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    119e:	4c18      	ldr	r4, [pc, #96]	; (1200 <SEGGER_RTT_WriteNoLock+0x64>)
    11a0:	2318      	movs	r3, #24
    11a2:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    11a6:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    11aa:	4425      	add	r5, r4
  switch (pRing->Flags) {
    11ac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    11ae:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    11b0:	460f      	mov	r7, r1
    11b2:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    11b4:	d011      	beq.n	11da <SEGGER_RTT_WriteNoLock+0x3e>
    11b6:	d303      	bcc.n	11c0 <SEGGER_RTT_WriteNoLock+0x24>
    11b8:	2c02      	cmp	r4, #2
    11ba:	d01b      	beq.n	11f4 <SEGGER_RTT_WriteNoLock+0x58>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    11bc:	2400      	movs	r4, #0
    break;
  }
  //
  // Finish up.
  //
  return Status;
    11be:	e00a      	b.n	11d6 <SEGGER_RTT_WriteNoLock+0x3a>
    Avail = _GetAvailWriteSpace(pRing);
    11c0:	4628      	mov	r0, r5
    11c2:	f7ff ff67 	bl	1094 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    11c6:	4286      	cmp	r6, r0
    11c8:	d805      	bhi.n	11d6 <SEGGER_RTT_WriteNoLock+0x3a>
      _WriteNoCheck(pRing, pData, NumBytes);
    11ca:	4632      	mov	r2, r6
    11cc:	4639      	mov	r1, r7
    11ce:	4628      	mov	r0, r5
    11d0:	f7ff ff6e 	bl	10b0 <_WriteNoCheck>
    11d4:	4634      	mov	r4, r6
}
    11d6:	4620      	mov	r0, r4
    11d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    11da:	4628      	mov	r0, r5
    11dc:	f7ff ff5a 	bl	1094 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    11e0:	4286      	cmp	r6, r0
    11e2:	4634      	mov	r4, r6
    11e4:	bf28      	it	cs
    11e6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    11e8:	4622      	mov	r2, r4
    11ea:	4639      	mov	r1, r7
    11ec:	4628      	mov	r0, r5
    11ee:	f7ff ff5f 	bl	10b0 <_WriteNoCheck>
    break;
    11f2:	e7f0      	b.n	11d6 <SEGGER_RTT_WriteNoLock+0x3a>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    11f4:	4628      	mov	r0, r5
}
    11f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    11fa:	f7ff bf76 	b.w	10ea <_WriteBlocking>
    11fe:	bf00      	nop
    1200:	20001198 	.word	0x20001198

00001204 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    1204:	f7ff bf9a 	b.w	113c <_DoInit>

00001208 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    1208:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    120a:	4c11      	ldr	r4, [pc, #68]	; (1250 <sys_rand32_get+0x48>)
    120c:	f3bf 8f5b 	dmb	ish
    1210:	6820      	ldr	r0, [r4, #0]
    1212:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    1216:	b960      	cbnz	r0, 1232 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    1218:	480e      	ldr	r0, [pc, #56]	; (1254 <sys_rand32_get+0x4c>)
    121a:	f008 fbef 	bl	99fc <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    121e:	f3bf 8f5b 	dmb	ish
    1222:	e854 3f00 	ldrex	r3, [r4]
    1226:	e844 0200 	strex	r2, r0, [r4]
    122a:	2a00      	cmp	r2, #0
    122c:	d1f9      	bne.n	1222 <sys_rand32_get+0x1a>
    122e:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    1232:	6843      	ldr	r3, [r0, #4]
    1234:	2204      	movs	r2, #4
    1236:	681b      	ldr	r3, [r3, #0]
    1238:	eb0d 0102 	add.w	r1, sp, r2
    123c:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    123e:	2800      	cmp	r0, #0
    1240:	da02      	bge.n	1248 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1242:	f000 fa31 	bl	16a8 <_timer_cycle_get_32>
    1246:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1248:	9801      	ldr	r0, [sp, #4]
    124a:	b002      	add	sp, #8
    124c:	bd10      	pop	{r4, pc}
    124e:	bf00      	nop
    1250:	20000410 	.word	0x20000410
    1254:	0000ade7 	.word	0x0000ade7

00001258 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    1258:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	SEGGER_RTT_Init();

	__printk_hook_install(rtt_console_out);
    125a:	4c05      	ldr	r4, [pc, #20]	; (1270 <rtt_console_init+0x18>)
	SEGGER_RTT_Init();
    125c:	f7ff ffd2 	bl	1204 <SEGGER_RTT_Init>
	__printk_hook_install(rtt_console_out);
    1260:	4620      	mov	r0, r4
    1262:	f7ff fc45 	bl	af0 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    1266:	4620      	mov	r0, r4
    1268:	f000 fe0a 	bl	1e80 <__stdout_hook_install>

	return 0;
}
    126c:	2000      	movs	r0, #0
    126e:	bd10      	pop	{r4, pc}
    1270:	00001275 	.word	0x00001275

00001274 <rtt_console_out>:
{
    1274:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	char c = (char)character;
    1278:	ae02      	add	r6, sp, #8
    127a:	4d14      	ldr	r5, [pc, #80]	; (12cc <rtt_console_out+0x58>)
    127c:	f806 0d01 	strb.w	r0, [r6, #-1]!
{
    1280:	4607      	mov	r7, r0
	char c = (char)character;
    1282:	2403      	movs	r4, #3
	__asm__ volatile(
    1284:	f04f 0320 	mov.w	r3, #32
    1288:	f3ef 8811 	mrs	r8, BASEPRI
    128c:	f383 8811 	msr	BASEPRI, r3
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    1290:	2201      	movs	r2, #1
    1292:	4631      	mov	r1, r6
    1294:	2000      	movs	r0, #0
    1296:	f7ff ff81 	bl	119c <SEGGER_RTT_WriteNoLock>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    129a:	f388 8811 	msr	BASEPRI, r8
		if (cnt) {
    129e:	b128      	cbz	r0, 12ac <rtt_console_out+0x38>
			host_present = true;
    12a0:	2301      	movs	r3, #1
    12a2:	702b      	strb	r3, [r5, #0]
}
    12a4:	4638      	mov	r0, r7
    12a6:	b002      	add	sp, #8
    12a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    12ac:	782b      	ldrb	r3, [r5, #0]
    12ae:	2b00      	cmp	r3, #0
    12b0:	d0f8      	beq.n	12a4 <rtt_console_out+0x30>
			if (max_cnt) {
    12b2:	3c01      	subs	r4, #1
    12b4:	d007      	beq.n	12c6 <rtt_console_out+0x52>
	if (k_is_in_isr()) {
    12b6:	f009 fab5 	bl	a824 <k_is_in_isr>
    12ba:	2800      	cmp	r0, #0
    12bc:	d1e2      	bne.n	1284 <rtt_console_out+0x10>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    12be:	2002      	movs	r0, #2
    12c0:	f009 f882 	bl	a3c8 <_impl_k_sleep>
		key = irq_lock();
    12c4:	e7de      	b.n	1284 <rtt_console_out+0x10>
				host_present = false;
    12c6:	702c      	strb	r4, [r5, #0]
    12c8:	e7ec      	b.n	12a4 <rtt_console_out+0x30>
    12ca:	bf00      	nop
    12cc:	20000414 	.word	0x20000414

000012d0 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    12d0:	b510      	push	{r4, lr}
	__asm__ volatile(
    12d2:	f04f 0320 	mov.w	r3, #32
    12d6:	f3ef 8211 	mrs	r2, BASEPRI
    12da:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    12de:	4c11      	ldr	r4, [pc, #68]	; (1324 <_m16src_stop+0x54>)
    12e0:	7823      	ldrb	r3, [r4, #0]
    12e2:	b923      	cbnz	r3, 12ee <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    12e4:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    12e8:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    12ec:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    12ee:	3b01      	subs	r3, #1
    12f0:	b2db      	uxtb	r3, r3
    12f2:	7023      	strb	r3, [r4, #0]
    12f4:	b123      	cbz	r3, 1300 <_m16src_stop+0x30>
    12f6:	f382 8811 	msr	BASEPRI, r2
		return -EBUSY;
    12fa:	f06f 000f 	mvn.w	r0, #15
    12fe:	e7f5      	b.n	12ec <_m16src_stop+0x1c>
	if (m16src_grd) {
    1300:	4b09      	ldr	r3, [pc, #36]	; (1328 <_m16src_stop+0x58>)
    1302:	7818      	ldrb	r0, [r3, #0]
    1304:	2101      	movs	r1, #1
    1306:	b128      	cbz	r0, 1314 <_m16src_stop+0x44>
		m16src_ref++;
    1308:	7021      	strb	r1, [r4, #0]
    130a:	f382 8811 	msr	BASEPRI, r2
		return -EAGAIN;
    130e:	f06f 000a 	mvn.w	r0, #10
    1312:	e7eb      	b.n	12ec <_m16src_stop+0x1c>
	m16src_grd = 1;
    1314:	7019      	strb	r1, [r3, #0]
    1316:	f382 8811 	msr	BASEPRI, r2
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    131a:	4a04      	ldr	r2, [pc, #16]	; (132c <_m16src_stop+0x5c>)
    131c:	6011      	str	r1, [r2, #0]
	m16src_grd = 0;
    131e:	7018      	strb	r0, [r3, #0]
	return 0;
    1320:	e7e4      	b.n	12ec <_m16src_stop+0x1c>
    1322:	bf00      	nop
    1324:	20000417 	.word	0x20000417
    1328:	20000416 	.word	0x20000416
    132c:	40000004 	.word	0x40000004

00001330 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    1330:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1332:	2200      	movs	r2, #0
    1334:	4610      	mov	r0, r2
    1336:	2101      	movs	r1, #1
    1338:	f000 fbb0 	bl	1a9c <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    133c:	2000      	movs	r0, #0
    133e:	f000 fb7b 	bl	1a38 <_arch_irq_enable>

	return 0;
}
    1342:	2000      	movs	r0, #0
    1344:	bd08      	pop	{r3, pc}
	...

00001348 <_m16src_start>:
{
    1348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    134a:	f04f 0220 	mov.w	r2, #32
    134e:	f3ef 8311 	mrs	r3, BASEPRI
    1352:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    1356:	4a26      	ldr	r2, [pc, #152]	; (13f0 <_m16src_start+0xa8>)
    1358:	7810      	ldrb	r0, [r2, #0]
    135a:	1c44      	adds	r4, r0, #1
    135c:	7014      	strb	r4, [r2, #0]
    135e:	b170      	cbz	r0, 137e <_m16src_start+0x36>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1360:	f383 8811 	msr	BASEPRI, r3
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    1364:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1368:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    136c:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    1370:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    1374:	bf0c      	ite	eq
    1376:	2000      	moveq	r0, #0
    1378:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    137c:	e007      	b.n	138e <_m16src_start+0x46>
	if (m16src_grd) {
    137e:	4d1d      	ldr	r5, [pc, #116]	; (13f4 <_m16src_start+0xac>)
    1380:	782f      	ldrb	r7, [r5, #0]
    1382:	b12f      	cbz	r7, 1390 <_m16src_start+0x48>
		m16src_ref--;
    1384:	7010      	strb	r0, [r2, #0]
    1386:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    138a:	f06f 000a 	mvn.w	r0, #10
}
    138e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    1390:	2601      	movs	r6, #1
    1392:	702e      	strb	r6, [r5, #0]
    1394:	f383 8811 	msr	BASEPRI, r3
    1398:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    139c:	b319      	cbz	r1, 13e6 <_m16src_start+0x9e>
		irq_disable(POWER_CLOCK_IRQn);
    139e:	4638      	mov	r0, r7
    13a0:	f000 fb5a 	bl	1a58 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    13a4:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    13a8:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    13ac:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    13b0:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    13b2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    13b6:	b192      	cbz	r2, 13de <_m16src_start+0x96>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    13b8:	2200      	movs	r2, #0
    13ba:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13be:	4a0e      	ldr	r2, [pc, #56]	; (13f8 <_m16src_start+0xb0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    13c0:	f013 0f01 	tst.w	r3, #1
    13c4:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    13c8:	bf08      	it	eq
    13ca:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    13ce:	2000      	movs	r0, #0
    13d0:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    13d4:	f000 fb30 	bl	1a38 <_arch_irq_enable>
	m16src_grd = 0;
    13d8:	2300      	movs	r3, #0
    13da:	702b      	strb	r3, [r5, #0]
    13dc:	e7c2      	b.n	1364 <_m16src_start+0x1c>
			__WFE();
    13de:	bf20      	wfe
			__SEV();
    13e0:	bf40      	sev
			__WFE();
    13e2:	bf20      	wfe
    13e4:	e7e5      	b.n	13b2 <_m16src_start+0x6a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    13e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    13ea:	6026      	str	r6, [r4, #0]
    13ec:	e7f4      	b.n	13d8 <_m16src_start+0x90>
    13ee:	bf00      	nop
    13f0:	20000417 	.word	0x20000417
    13f4:	20000416 	.word	0x20000416
    13f8:	e000e100 	.word	0xe000e100

000013fc <_k32src_start>:
{
    13fc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    13fe:	f04f 0220 	mov.w	r2, #32
    1402:	f3ef 8311 	mrs	r3, BASEPRI
    1406:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    140a:	4d1d      	ldr	r5, [pc, #116]	; (1480 <_k32src_start+0x84>)
    140c:	782a      	ldrb	r2, [r5, #0]
    140e:	b18a      	cbz	r2, 1434 <_k32src_start+0x38>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1410:	f383 8811 	msr	BASEPRI, r3
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    1414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1418:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    141c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    1420:	f003 0303 	and.w	r3, r3, #3
    1424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    1428:	4393      	bics	r3, r2
}
    142a:	bf14      	ite	ne
    142c:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    1430:	2000      	moveq	r0, #0
    1432:	bd38      	pop	{r3, r4, r5, pc}
	k32src_initialized = 1;
    1434:	2401      	movs	r4, #1
    1436:	702c      	strb	r4, [r5, #0]
    1438:	f383 8811 	msr	BASEPRI, r3
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    143c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1440:	4d10      	ldr	r5, [pc, #64]	; (1484 <_k32src_start+0x88>)
    1442:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    1446:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    144a:	602c      	str	r4, [r5, #0]
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    144c:	f011 0103 	ands.w	r1, r1, #3
    NRF_CLOCK->INTENCLR = int_mask;
    1450:	f04f 0518 	mov.w	r5, #24
    1454:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1458:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    145c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1460:	d1d8      	bne.n	1414 <_k32src_start+0x18>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1462:	2210      	movs	r2, #16
    1464:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    1468:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
    146c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1470:	f7ff ff6a 	bl	1348 <_m16src_start>
		if (!err) {
    1474:	2800      	cmp	r0, #0
    1476:	d1cd      	bne.n	1414 <_k32src_start+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1478:	4b03      	ldr	r3, [pc, #12]	; (1488 <_k32src_start+0x8c>)
    147a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    147e:	e7c9      	b.n	1414 <_k32src_start+0x18>
    1480:	20000415 	.word	0x20000415
    1484:	40000008 	.word	0x40000008
    1488:	e000e100 	.word	0xe000e100

0000148c <_power_clock_isr>:
{
    148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    148e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    1492:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1494:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1498:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    149c:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    14a0:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    14a4:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    14a8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    14ac:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    14b0:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    14b4:	f1bc 0f00 	cmp.w	ip, #0
    14b8:	d003      	beq.n	14c2 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    14ba:	f04f 0c00 	mov.w	ip, #0
    14be:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	if (hf) {
    14c2:	b127      	cbz	r7, 14ce <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    14c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    14c8:	2700      	movs	r7, #0
    14ca:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    14ce:	b13a      	cbz	r2, 14e0 <_power_clock_isr+0x54>
    14d0:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    14d2:	bf41      	itttt	mi
    14d4:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    14d8:	2201      	movmi	r2, #1
    14da:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    14de:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    14e0:	b120      	cbz	r0, 14ec <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    14e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    14e6:	2200      	movs	r2, #0
    14e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    14ec:	b149      	cbz	r1, 1502 <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    14ee:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    14f2:	2100      	movs	r1, #0
    14f4:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    14f8:	4628      	mov	r0, r5
    14fa:	f7ff fee9 	bl	12d0 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    14fe:	2301      	movs	r3, #1
    1500:	6163      	str	r3, [r4, #20]
	if (ctto) {
    1502:	b176      	cbz	r6, 1522 <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    1504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1508:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    150a:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    150c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    1510:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1512:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1516:	f7ff ff17 	bl	1348 <_m16src_start>
		if (!err) {
    151a:	b910      	cbnz	r0, 1522 <_power_clock_isr+0x96>
    151c:	4b01      	ldr	r3, [pc, #4]	; (1524 <_power_clock_isr+0x98>)
    151e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
}
    1522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1524:	e000e100 	.word	0xe000e100

00001528 <rtc_compare_set>:

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_rtc, uint32_t ch, uint32_t cc_val)
{
    p_rtc->CC[ch] = cc_val;
    1528:	4b08      	ldr	r3, [pc, #32]	; (154c <rtc_compare_set+0x24>)
    152a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_rtc)
{
     return p_rtc->COUNTER;
    152e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1532:	1ac0      	subs	r0, r0, r3
    1534:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1538:	4b05      	ldr	r3, [pc, #20]	; (1550 <rtc_compare_set+0x28>)
    153a:	3802      	subs	r0, #2
    153c:	4298      	cmp	r0, r3
    153e:	bf82      	ittt	hi
    1540:	4b04      	ldrhi	r3, [pc, #16]	; (1554 <rtc_compare_set+0x2c>)
    1542:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1546:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
    154a:	4770      	bx	lr
    154c:	40011000 	.word	0x40011000
    1550:	007ffffd 	.word	0x007ffffd
    1554:	e000e100 	.word	0xe000e100

00001558 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1558:	b538      	push	{r3, r4, r5, lr}
    155a:	4b11      	ldr	r3, [pc, #68]	; (15a0 <rtc_announce_set_next+0x48>)
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    155c:	4c11      	ldr	r4, [pc, #68]	; (15a4 <rtc_announce_set_next+0x4c>)
    155e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    1562:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1564:	4d10      	ldr	r5, [pc, #64]	; (15a8 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1566:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1568:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    156a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    156e:	4283      	cmp	r3, r0
    1570:	d80f      	bhi.n	1592 <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    1572:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    1576:	490d      	ldr	r1, [pc, #52]	; (15ac <rtc_announce_set_next+0x54>)
    1578:	6809      	ldr	r1, [r1, #0]
    157a:	4288      	cmp	r0, r1
    157c:	bf28      	it	cs
    157e:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1580:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    1584:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1588:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    158a:	4b09      	ldr	r3, [pc, #36]	; (15b0 <rtc_announce_set_next+0x58>)
    158c:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    158e:	f008 ffd1 	bl	a534 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1592:	6820      	ldr	r0, [r4, #0]
    1594:	682b      	ldr	r3, [r5, #0]
    1596:	4418      	add	r0, r3
}
    1598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    159c:	f7ff bfc4 	b.w	1528 <rtc_compare_set>
    15a0:	40011000 	.word	0x40011000
    15a4:	2000041c 	.word	0x2000041c
    15a8:	20002f30 	.word	0x20002f30
    15ac:	20000418 	.word	0x20000418
    15b0:	20002f2c 	.word	0x20002f2c

000015b4 <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    15b4:	4b02      	ldr	r3, [pc, #8]	; (15c0 <rtc1_nrf5_isr+0xc>)
    15b6:	2200      	movs	r2, #0
    15b8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	/* _sys_clock_tick_announce() could cause new programming */
	if (!expected_sys_ticks && _sys_clock_always_on) {
		program_max_cycles();
	}
#else
	rtc_announce_set_next();
    15bc:	f7ff bfcc 	b.w	1558 <rtc_announce_set_next>
    15c0:	40011000 	.word	0x40011000

000015c4 <_timer_idle_enter>:
{
    15c4:	4b08      	ldr	r3, [pc, #32]	; (15e8 <_timer_idle_enter+0x24>)
	if ((sys_ticks < 0) ||
    15c6:	2800      	cmp	r0, #0
    15c8:	681a      	ldr	r2, [r3, #0]
    15ca:	4b08      	ldr	r3, [pc, #32]	; (15ec <_timer_idle_enter+0x28>)
    15cc:	fb93 f3f2 	sdiv	r3, r3, r2
    15d0:	db02      	blt.n	15d8 <_timer_idle_enter+0x14>
    15d2:	4283      	cmp	r3, r0
    15d4:	bfa8      	it	ge
    15d6:	4603      	movge	r3, r0
	expected_sys_ticks = sys_ticks;
    15d8:	4905      	ldr	r1, [pc, #20]	; (15f0 <_timer_idle_enter+0x2c>)
    15da:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    15dc:	4905      	ldr	r1, [pc, #20]	; (15f4 <_timer_idle_enter+0x30>)
    15de:	6808      	ldr	r0, [r1, #0]
    15e0:	fb02 0003 	mla	r0, r2, r3, r0
    15e4:	f7ff bfa0 	b.w	1528 <rtc_compare_set>
    15e8:	20002f30 	.word	0x20002f30
    15ec:	007fffff 	.word	0x007fffff
    15f0:	20000418 	.word	0x20000418
    15f4:	2000041c 	.word	0x2000041c

000015f8 <_timer_idle_exit>:
{
    15f8:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    15fa:	4b07      	ldr	r3, [pc, #28]	; (1618 <_timer_idle_exit+0x20>)
    15fc:	2200      	movs	r2, #0
    15fe:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1602:	4b06      	ldr	r3, [pc, #24]	; (161c <_timer_idle_exit+0x24>)
    1604:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1608:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    160c:	f7ff ffa4 	bl	1558 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1610:	4b03      	ldr	r3, [pc, #12]	; (1620 <_timer_idle_exit+0x28>)
    1612:	2201      	movs	r2, #1
    1614:	601a      	str	r2, [r3, #0]
}
    1616:	bd08      	pop	{r3, pc}
    1618:	40011000 	.word	0x40011000
    161c:	e000e100 	.word	0xe000e100
    1620:	20000418 	.word	0x20000418

00001624 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1624:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1626:	4819      	ldr	r0, [pc, #100]	; (168c <_sys_clock_driver_init+0x68>)
    1628:	f008 f9e8 	bl	99fc <device_get_binding>
	if (!clock) {
    162c:	b350      	cbz	r0, 1684 <_sys_clock_driver_init+0x60>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    162e:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1630:	4d17      	ldr	r5, [pc, #92]	; (1690 <_sys_clock_driver_init+0x6c>)
    1632:	681b      	ldr	r3, [r3, #0]
    1634:	2101      	movs	r1, #1
    1636:	4798      	blx	r3
	rtc_past = 0;
    1638:	4b16      	ldr	r3, [pc, #88]	; (1694 <_sys_clock_driver_init+0x70>)
    163a:	2400      	movs	r4, #0
    163c:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    163e:	4b16      	ldr	r3, [pc, #88]	; (1698 <_sys_clock_driver_init+0x74>)
    1640:	2601      	movs	r6, #1
    1642:	601e      	str	r6, [r3, #0]
	nrf_rtc_cc_set(SYS_CLOCK_RTC, RTC_CC_IDX, sys_clock_hw_cycles_per_tick);
    1644:	4b15      	ldr	r3, [pc, #84]	; (169c <_sys_clock_driver_init+0x78>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    1646:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	nrf_rtc_cc_set(SYS_CLOCK_RTC, RTC_CC_IDX, sys_clock_hw_cycles_per_tick);
    164a:	681b      	ldr	r3, [r3, #0]
    p_rtc->CC[ch] = cc_val;
    164c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_rtc, uint32_t mask)
{
    p_rtc->EVTENSET = mask;
    1650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1654:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_rtc->INTENSET = mask;
    1658:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    165c:	4b10      	ldr	r3, [pc, #64]	; (16a0 <_sys_clock_driver_init+0x7c>)
	nrf_rtc_event_enable(SYS_CLOCK_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(SYS_CLOCK_RTC, RTC_INTENSET_COMPARE0_Msk);

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    165e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1662:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1666:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    166a:	4631      	mov	r1, r6
    166c:	4622      	mov	r2, r4
    166e:	2011      	movs	r0, #17
    1670:	f000 fa14 	bl	1a9c <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1674:	2011      	movs	r0, #17
    1676:	f000 f9df 	bl	1a38 <_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
    167a:	4b0a      	ldr	r3, [pc, #40]	; (16a4 <_sys_clock_driver_init+0x80>)

	nrf_rtc_task_trigger(SYS_CLOCK_RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(SYS_CLOCK_RTC, NRF_RTC_TASK_START);

	return 0;
    167c:	4620      	mov	r0, r4
    167e:	601e      	str	r6, [r3, #0]
    1680:	602e      	str	r6, [r5, #0]
}
    1682:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1688:	e7fb      	b.n	1682 <_sys_clock_driver_init+0x5e>
    168a:	bf00      	nop
    168c:	0000ae0c 	.word	0x0000ae0c
    1690:	40011000 	.word	0x40011000
    1694:	2000041c 	.word	0x2000041c
    1698:	20000418 	.word	0x20000418
    169c:	20002f30 	.word	0x20002f30
    16a0:	e000e100 	.word	0xe000e100
    16a4:	40011008 	.word	0x40011008

000016a8 <_timer_cycle_get_32>:
     return p_rtc->COUNTER;
    16a8:	4a0a      	ldr	r2, [pc, #40]	; (16d4 <_timer_cycle_get_32+0x2c>)

	rtc_now = RTC_COUNTER;
	/* Discard value of RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    16aa:	490b      	ldr	r1, [pc, #44]	; (16d8 <_timer_cycle_get_32+0x30>)
    16ac:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
{
    16b0:	b570      	push	{r4, r5, r6, lr}
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    16b2:	680d      	ldr	r5, [r1, #0]
		sys_clock_tick_count = _sys_clock_tick_count;
    16b4:	4e09      	ldr	r6, [pc, #36]	; (16dc <_timer_cycle_get_32+0x34>)
    16b6:	e9d6 0100 	ldrd	r0, r1, [r6]
    16ba:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
	} while (rtc_now != rtc_prev);
    16be:	42a3      	cmp	r3, r4
    16c0:	d105      	bne.n	16ce <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    16c2:	4368      	muls	r0, r5
    16c4:	1a1b      	subs	r3, r3, r0
    16c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    16ca:	4418      	add	r0, r3
    16cc:	bd70      	pop	{r4, r5, r6, pc}
    16ce:	4623      	mov	r3, r4
    16d0:	e7f1      	b.n	16b6 <_timer_cycle_get_32+0xe>
    16d2:	bf00      	nop
    16d4:	40011000 	.word	0x40011000
    16d8:	20002f30 	.word	0x20002f30
    16dc:	20001360 	.word	0x20001360

000016e0 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    16e0:	4807      	ldr	r0, [pc, #28]	; (1700 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    16e2:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    16e4:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    16e6:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    16e8:	d008      	beq.n	16fc <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    16ea:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    16ec:	f008 fe1e 	bl	a32c <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    16f0:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    16f4:	4903      	ldr	r1, [pc, #12]	; (1704 <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    16f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    16fa:	600a      	str	r2, [r1, #0]

000016fc <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    16fc:	4770      	bx	lr
    16fe:	0000      	.short	0x0000
    ldr r0, =_kernel
    1700:	2000132c 	.word	0x2000132c
    ldr r1, =_SCS_ICSR
    1704:	e000ed04 	.word	0xe000ed04

00001708 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1708:	4804      	ldr	r0, [pc, #16]	; (171c <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    170a:	2300      	movs	r3, #0
    170c:	2120      	movs	r1, #32
    170e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1710:	3301      	adds	r3, #1
    1712:	2b27      	cmp	r3, #39	; 0x27
    1714:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1718:	d1f9      	bne.n	170e <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    171a:	4770      	bx	lr
    171c:	e000e100 	.word	0xe000e100

00001720 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1720:	4a08      	ldr	r2, [pc, #32]	; (1744 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1722:	4909      	ldr	r1, [pc, #36]	; (1748 <__swap+0x28>)
	_current->arch.basepri = key;
    1724:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1726:	6809      	ldr	r1, [r1, #0]
    1728:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    172a:	4908      	ldr	r1, [pc, #32]	; (174c <__swap+0x2c>)
	_current->arch.basepri = key;
    172c:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    172e:	684b      	ldr	r3, [r1, #4]
    1730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1734:	604b      	str	r3, [r1, #4]
    1736:	2300      	movs	r3, #0
    1738:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    173c:	6893      	ldr	r3, [r2, #8]
}
    173e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1740:	4770      	bx	lr
    1742:	bf00      	nop
    1744:	2000132c 	.word	0x2000132c
    1748:	0000b3ac 	.word	0x0000b3ac
    174c:	e000ed00 	.word	0xe000ed00

00001750 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1750:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1752:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1756:	490d      	ldr	r1, [pc, #52]	; (178c <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1758:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    175a:	f04f 002c 	mov.w	r0, #44	; 0x2c
    add r0, r2
    175e:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1760:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1764:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    1768:	4f09      	ldr	r7, [pc, #36]	; (1790 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    176a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    176e:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1770:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1772:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1774:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    1776:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1778:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    177a:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    177e:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1782:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    1786:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    178a:	4770      	bx	lr
    ldr r1, =_kernel
    178c:	2000132c 	.word	0x2000132c
    ldr v4, =_SCS_ICSR
    1790:	e000ed04 	.word	0xe000ed04

00001794 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    1794:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1798:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    179a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    179e:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    17a2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    17a4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    17a8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    17ac:	2902      	cmp	r1, #2
    beq _oops
    17ae:	d0ff      	beq.n	17b0 <_oops>

000017b0 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    17b0:	b500      	push	{lr}
    blx _do_kernel_oops
    17b2:	f000 fa15 	bl	1be0 <_do_kernel_oops>
    pop {pc}
    17b6:	bd00      	pop	{pc}

000017b8 <_MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    17b8:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    17ba:	4c19      	ldr	r4, [pc, #100]	; (1820 <_MpuFault.isra.2+0x68>)
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    17bc:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    17be:	4819      	ldr	r0, [pc, #100]	; (1824 <_MpuFault.isra.2+0x6c>)
    17c0:	f7ff fade 	bl	d80 <printk>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    17c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17c6:	06d9      	lsls	r1, r3, #27
    17c8:	d502      	bpl.n	17d0 <_MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error\n");
    17ca:	4817      	ldr	r0, [pc, #92]	; (1828 <_MpuFault.isra.2+0x70>)
    17cc:	f7ff fad8 	bl	d80 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    17d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17d2:	071a      	lsls	r2, r3, #28
    17d4:	d502      	bpl.n	17dc <_MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    17d6:	4815      	ldr	r0, [pc, #84]	; (182c <_MpuFault.isra.2+0x74>)
    17d8:	f7ff fad2 	bl	d80 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    17dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17de:	079b      	lsls	r3, r3, #30
    17e0:	d50e      	bpl.n	1800 <_MpuFault.isra.2+0x48>
		PR_FAULT_INFO("  Data Access Violation\n");
    17e2:	4813      	ldr	r0, [pc, #76]	; (1830 <_MpuFault.isra.2+0x78>)
    17e4:	f7ff facc 	bl	d80 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    17e8:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    17ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17ec:	0618      	lsls	r0, r3, #24
    17ee:	d507      	bpl.n	1800 <_MpuFault.isra.2+0x48>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    17f0:	4810      	ldr	r0, [pc, #64]	; (1834 <_MpuFault.isra.2+0x7c>)
    17f2:	f7ff fac5 	bl	d80 <printk>
			if (fromHardFault) {
    17f6:	b11d      	cbz	r5, 1800 <_MpuFault.isra.2+0x48>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    17f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    17fe:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    1800:	4c07      	ldr	r4, [pc, #28]	; (1820 <_MpuFault.isra.2+0x68>)
    1802:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1804:	07d2      	lsls	r2, r2, #31
    1806:	d502      	bpl.n	180e <_MpuFault.isra.2+0x56>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    1808:	480b      	ldr	r0, [pc, #44]	; (1838 <_MpuFault.isra.2+0x80>)
    180a:	f7ff fab9 	bl	d80 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    180e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1810:	069b      	lsls	r3, r3, #26
    1812:	d502      	bpl.n	181a <_MpuFault.isra.2+0x62>
		PR_FAULT_INFO(
    1814:	4809      	ldr	r0, [pc, #36]	; (183c <_MpuFault.isra.2+0x84>)
    1816:	f7ff fab3 	bl	d80 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    181a:	2000      	movs	r0, #0
    181c:	bd38      	pop	{r3, r4, r5, pc}
    181e:	bf00      	nop
    1820:	e000ed00 	.word	0xe000ed00
    1824:	0000af7b 	.word	0x0000af7b
    1828:	0000af92 	.word	0x0000af92
    182c:	0000afa4 	.word	0x0000afa4
    1830:	0000afb8 	.word	0x0000afb8
    1834:	0000afd1 	.word	0x0000afd1
    1838:	0000afe8 	.word	0x0000afe8
    183c:	0000b008 	.word	0x0000b008

00001840 <_BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    1840:	b538      	push	{r3, r4, r5, lr}
{
	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1842:	4c1b      	ldr	r4, [pc, #108]	; (18b0 <_BusFault.isra.3+0x70>)
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    1844:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    1846:	481b      	ldr	r0, [pc, #108]	; (18b4 <_BusFault.isra.3+0x74>)
    1848:	f7ff fa9a 	bl	d80 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    184c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    184e:	04d8      	lsls	r0, r3, #19
    1850:	d504      	bpl.n	185c <_BusFault.isra.3+0x1c>
		PR_FAULT_INFO("  Stacking error\n");
    1852:	4819      	ldr	r0, [pc, #100]	; (18b8 <_BusFault.isra.3+0x78>)
		PR_FAULT_INFO("  Instruction bus error\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    1854:	f7ff fa94 	bl	d80 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		return _NANO_ERR_RECOVERABLE;
	}

	return _NANO_ERR_HW_EXCEPTION;
}
    1858:	2000      	movs	r0, #0
    185a:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    185c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    185e:	0519      	lsls	r1, r3, #20
    1860:	d501      	bpl.n	1866 <_BusFault.isra.3+0x26>
		PR_FAULT_INFO("  Unstacking error\n");
    1862:	4816      	ldr	r0, [pc, #88]	; (18bc <_BusFault.isra.3+0x7c>)
    1864:	e7f6      	b.n	1854 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1866:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1868:	059a      	lsls	r2, r3, #22
    186a:	d514      	bpl.n	1896 <_BusFault.isra.3+0x56>
		PR_FAULT_INFO("  Precise data bus error\n");
    186c:	4814      	ldr	r0, [pc, #80]	; (18c0 <_BusFault.isra.3+0x80>)
    186e:	f7ff fa87 	bl	d80 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1872:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    1874:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1876:	041b      	lsls	r3, r3, #16
    1878:	d507      	bpl.n	188a <_BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    187a:	4812      	ldr	r0, [pc, #72]	; (18c4 <_BusFault.isra.3+0x84>)
    187c:	f7ff fa80 	bl	d80 <printk>
			if (fromHardFault) {
    1880:	b11d      	cbz	r5, 188a <_BusFault.isra.3+0x4a>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1882:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1884:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1888:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    188a:	4b09      	ldr	r3, [pc, #36]	; (18b0 <_BusFault.isra.3+0x70>)
    188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    188e:	0558      	lsls	r0, r3, #21
    1890:	d5e2      	bpl.n	1858 <_BusFault.isra.3+0x18>
			PR_FAULT_INFO("  Imprecise data bus error\n");
    1892:	480d      	ldr	r0, [pc, #52]	; (18c8 <_BusFault.isra.3+0x88>)
    1894:	e7de      	b.n	1854 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1896:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1898:	0559      	lsls	r1, r3, #21
    189a:	d4fa      	bmi.n	1892 <_BusFault.isra.3+0x52>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    189c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    189e:	05da      	lsls	r2, r3, #23
    18a0:	d501      	bpl.n	18a6 <_BusFault.isra.3+0x66>
		PR_FAULT_INFO("  Instruction bus error\n");
    18a2:	480a      	ldr	r0, [pc, #40]	; (18cc <_BusFault.isra.3+0x8c>)
    18a4:	e7d6      	b.n	1854 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    18a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    18a8:	049b      	lsls	r3, r3, #18
    18aa:	d5d5      	bpl.n	1858 <_BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    18ac:	4808      	ldr	r0, [pc, #32]	; (18d0 <_BusFault.isra.3+0x90>)
    18ae:	e7d1      	b.n	1854 <_BusFault.isra.3+0x14>
    18b0:	e000ed00 	.word	0xe000ed00
    18b4:	0000ae2c 	.word	0x0000ae2c
    18b8:	0000af92 	.word	0x0000af92
    18bc:	0000afa4 	.word	0x0000afa4
    18c0:	0000ae43 	.word	0x0000ae43
    18c4:	0000ae5d 	.word	0x0000ae5d
    18c8:	0000ae73 	.word	0x0000ae73
    18cc:	0000ae8f 	.word	0x0000ae8f
    18d0:	0000b008 	.word	0x0000b008

000018d4 <_UsageFault.isra.5>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
    18d4:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    18d6:	4c19      	ldr	r4, [pc, #100]	; (193c <_UsageFault.isra.5+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    18d8:	4819      	ldr	r0, [pc, #100]	; (1940 <_UsageFault.isra.5+0x6c>)
    18da:	f7ff fa51 	bl	d80 <printk>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    18de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    18e0:	019a      	lsls	r2, r3, #6
    18e2:	d502      	bpl.n	18ea <_UsageFault.isra.5+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    18e4:	4817      	ldr	r0, [pc, #92]	; (1944 <_UsageFault.isra.5+0x70>)
    18e6:	f7ff fa4b 	bl	d80 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    18ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    18ec:	01db      	lsls	r3, r3, #7
    18ee:	d502      	bpl.n	18f6 <_UsageFault.isra.5+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    18f0:	4815      	ldr	r0, [pc, #84]	; (1948 <_UsageFault.isra.5+0x74>)
    18f2:	f7ff fa45 	bl	d80 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    18f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    18f8:	0318      	lsls	r0, r3, #12
    18fa:	d502      	bpl.n	1902 <_UsageFault.isra.5+0x2e>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    18fc:	4813      	ldr	r0, [pc, #76]	; (194c <_UsageFault.isra.5+0x78>)
    18fe:	f7ff fa3f 	bl	d80 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1902:	4c0e      	ldr	r4, [pc, #56]	; (193c <_UsageFault.isra.5+0x68>)
    1904:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1906:	0359      	lsls	r1, r3, #13
    1908:	d502      	bpl.n	1910 <_UsageFault.isra.5+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    190a:	4811      	ldr	r0, [pc, #68]	; (1950 <_UsageFault.isra.5+0x7c>)
    190c:	f7ff fa38 	bl	d80 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    1910:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1912:	039a      	lsls	r2, r3, #14
    1914:	d502      	bpl.n	191c <_UsageFault.isra.5+0x48>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    1916:	480f      	ldr	r0, [pc, #60]	; (1954 <_UsageFault.isra.5+0x80>)
    1918:	f7ff fa32 	bl	d80 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    191c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    191e:	03db      	lsls	r3, r3, #15
    1920:	d502      	bpl.n	1928 <_UsageFault.isra.5+0x54>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    1922:	480d      	ldr	r0, [pc, #52]	; (1958 <_UsageFault.isra.5+0x84>)
    1924:	f7ff fa2c 	bl	d80 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1928:	4a04      	ldr	r2, [pc, #16]	; (193c <_UsageFault.isra.5+0x68>)
    192a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    192c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1930:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1934:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1936:	2000      	movs	r0, #0
    1938:	bd10      	pop	{r4, pc}
    193a:	bf00      	nop
    193c:	e000ed00 	.word	0xe000ed00
    1940:	0000b038 	.word	0x0000b038
    1944:	0000b051 	.word	0x0000b051
    1948:	0000b065 	.word	0x0000b065
    194c:	0000b080 	.word	0x0000b080
    1950:	0000b09f 	.word	0x0000b09f
    1954:	0000b0c5 	.word	0x0000b0c5
    1958:	0000b0e0 	.word	0x0000b0e0

0000195c <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    195c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    195e:	4c27      	ldr	r4, [pc, #156]	; (19fc <_Fault+0xa0>)
    1960:	6863      	ldr	r3, [r4, #4]
    1962:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1966:	1eda      	subs	r2, r3, #3
{
    1968:	4605      	mov	r5, r0
	switch (fault) {
    196a:	2a09      	cmp	r2, #9
    196c:	d83a      	bhi.n	19e4 <_Fault+0x88>
    196e:	e8df f002 	tbb	[pc, r2]
    1972:	3305      	.short	0x3305
    1974:	39393035 	.word	0x39393035
    1978:	37393939 	.word	0x37393939
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    197c:	4820      	ldr	r0, [pc, #128]	; (1a00 <_Fault+0xa4>)
    197e:	f7ff f9ff 	bl	d80 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    1982:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1984:	079a      	lsls	r2, r3, #30
    1986:	d503      	bpl.n	1990 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    1988:	481e      	ldr	r0, [pc, #120]	; (1a04 <_Fault+0xa8>)
	PR_FAULT_INFO(
    198a:	f7ff f9f9 	bl	d80 <printk>
    198e:	e002      	b.n	1996 <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    1990:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1992:	005b      	lsls	r3, r3, #1
    1994:	d405      	bmi.n	19a2 <_Fault+0x46>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    1996:	2000      	movs	r0, #0
	}

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
_exit_fatal:
#endif
	_NanoFatalErrorHandler(reason, esf);
    1998:	4629      	mov	r1, r5
}
    199a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_NanoFatalErrorHandler(reason, esf);
    199e:	f000 b8ed 	b.w	1b7c <_NanoFatalErrorHandler>
		PR_EXC("  Fault escalation (see below)\n");
    19a2:	4819      	ldr	r0, [pc, #100]	; (1a08 <_Fault+0xac>)
    19a4:	f7ff f9ec 	bl	d80 <printk>
		if (SCB_MMFSR) {
    19a8:	4b18      	ldr	r3, [pc, #96]	; (1a0c <_Fault+0xb0>)
    19aa:	781b      	ldrb	r3, [r3, #0]
    19ac:	b12b      	cbz	r3, 19ba <_Fault+0x5e>
			reason = _MpuFault(esf, 1);
    19ae:	2001      	movs	r0, #1
		reason = _MpuFault(esf, 0);
    19b0:	f7ff ff02 	bl	17b8 <_MpuFault.isra.2>
	if (reason == _NANO_ERR_RECOVERABLE) {
    19b4:	2806      	cmp	r0, #6
    19b6:	d1ef      	bne.n	1998 <_Fault+0x3c>
}
    19b8:	bd38      	pop	{r3, r4, r5, pc}
		} else if (SCB_BFSR) {
    19ba:	4b15      	ldr	r3, [pc, #84]	; (1a10 <_Fault+0xb4>)
    19bc:	781b      	ldrb	r3, [r3, #0]
    19be:	b11b      	cbz	r3, 19c8 <_Fault+0x6c>
			reason = _BusFault(esf, 1);
    19c0:	2001      	movs	r0, #1
		reason = _BusFault(esf, 0);
    19c2:	f7ff ff3d 	bl	1840 <_BusFault.isra.3>
    19c6:	e7f5      	b.n	19b4 <_Fault+0x58>
		} else if (SCB_UFSR) {
    19c8:	4b12      	ldr	r3, [pc, #72]	; (1a14 <_Fault+0xb8>)
    19ca:	881b      	ldrh	r3, [r3, #0]
    19cc:	b29b      	uxth	r3, r3
    19ce:	2b00      	cmp	r3, #0
    19d0:	d0e1      	beq.n	1996 <_Fault+0x3a>
		reason = _UsageFault(esf);
    19d2:	f7ff ff7f 	bl	18d4 <_UsageFault.isra.5>
    19d6:	e7ed      	b.n	19b4 <_Fault+0x58>
		reason = _MpuFault(esf, 0);
    19d8:	2000      	movs	r0, #0
    19da:	e7e9      	b.n	19b0 <_Fault+0x54>
		reason = _BusFault(esf, 0);
    19dc:	2000      	movs	r0, #0
    19de:	e7f0      	b.n	19c2 <_Fault+0x66>
	PR_FAULT_INFO(
    19e0:	480d      	ldr	r0, [pc, #52]	; (1a18 <_Fault+0xbc>)
    19e2:	e7d2      	b.n	198a <_Fault+0x2e>
	PR_FAULT_INFO("***** %s %d) *****\n",
    19e4:	480d      	ldr	r0, [pc, #52]	; (1a1c <_Fault+0xc0>)
    19e6:	490e      	ldr	r1, [pc, #56]	; (1a20 <_Fault+0xc4>)
    19e8:	f1a3 0210 	sub.w	r2, r3, #16
    19ec:	2b0f      	cmp	r3, #15
    19ee:	bfd8      	it	le
    19f0:	4601      	movle	r1, r0
    19f2:	480c      	ldr	r0, [pc, #48]	; (1a24 <_Fault+0xc8>)
    19f4:	f7ff f9c4 	bl	d80 <printk>
    19f8:	e7cd      	b.n	1996 <_Fault+0x3a>
    19fa:	bf00      	nop
    19fc:	e000ed00 	.word	0xe000ed00
    1a00:	0000aed6 	.word	0x0000aed6
    1a04:	0000aeee 	.word	0x0000aeee
    1a08:	0000af10 	.word	0x0000af10
    1a0c:	e000ed28 	.word	0xe000ed28
    1a10:	e000ed29 	.word	0xe000ed29
    1a14:	e000ed2a 	.word	0xe000ed2a
    1a18:	0000af30 	.word	0x0000af30
    1a1c:	0000aea8 	.word	0x0000aea8
    1a20:	0000aebd 	.word	0x0000aebd
    1a24:	0000af67 	.word	0x0000af67

00001a28 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1a28:	4a02      	ldr	r2, [pc, #8]	; (1a34 <_FaultInit+0xc>)
    1a2a:	6953      	ldr	r3, [r2, #20]
    1a2c:	f043 0310 	orr.w	r3, r3, #16
    1a30:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1a32:	4770      	bx	lr
    1a34:	e000ed00 	.word	0xe000ed00

00001a38 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1a38:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	db08      	blt.n	1a50 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a3e:	2201      	movs	r2, #1
    1a40:	f000 001f 	and.w	r0, r0, #31
    1a44:	fa02 f000 	lsl.w	r0, r2, r0
    1a48:	095b      	lsrs	r3, r3, #5
    1a4a:	4a02      	ldr	r2, [pc, #8]	; (1a54 <_arch_irq_enable+0x1c>)
    1a4c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1a50:	4770      	bx	lr
    1a52:	bf00      	nop
    1a54:	e000e100 	.word	0xe000e100

00001a58 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1a58:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	db0d      	blt.n	1a7a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a5e:	2201      	movs	r2, #1
    1a60:	095b      	lsrs	r3, r3, #5
    1a62:	f000 001f 	and.w	r0, r0, #31
    1a66:	fa02 f000 	lsl.w	r0, r2, r0
    1a6a:	3320      	adds	r3, #32
    1a6c:	4a03      	ldr	r2, [pc, #12]	; (1a7c <_arch_irq_disable+0x24>)
    1a6e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1a72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a76:	f3bf 8f6f 	isb	sy
}
    1a7a:	4770      	bx	lr
    1a7c:	e000e100 	.word	0xe000e100

00001a80 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    1a80:	0942      	lsrs	r2, r0, #5
    1a82:	4b05      	ldr	r3, [pc, #20]	; (1a98 <_arch_irq_is_enabled+0x18>)
    1a84:	f000 001f 	and.w	r0, r0, #31
    1a88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1a8c:	2301      	movs	r3, #1
    1a8e:	fa03 f000 	lsl.w	r0, r3, r0
}
    1a92:	4010      	ands	r0, r2
    1a94:	4770      	bx	lr
    1a96:	bf00      	nop
    1a98:	e000e100 	.word	0xe000e100

00001a9c <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1a9c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1a9e:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1aa0:	bfa8      	it	ge
    1aa2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    1aa6:	f101 0101 	add.w	r1, r1, #1
    1aaa:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1aae:	bfae      	itee	ge
    1ab0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ab4:	f000 000f 	andlt.w	r0, r0, #15
    1ab8:	4b03      	ldrlt	r3, [pc, #12]	; (1ac8 <_irq_priority_set+0x2c>)
    1aba:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1abc:	bfac      	ite	ge
    1abe:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ac2:	5419      	strblt	r1, [r3, r0]
}
    1ac4:	4770      	bx	lr
    1ac6:	bf00      	nop
    1ac8:	e000ed14 	.word	0xe000ed14

00001acc <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    1acc:	f000 b842 	b.w	1b54 <__bus_fault>

00001ad0 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    1ad0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    1ad2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    1ad4:	4b04      	ldr	r3, [pc, #16]	; (1ae8 <_arch_isr_direct_pm+0x18>)
    1ad6:	69d8      	ldr	r0, [r3, #28]
    1ad8:	b118      	cbz	r0, 1ae2 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    1ada:	2200      	movs	r2, #0
    1adc:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    1ade:	f007 ffb3 	bl	9a48 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1ae2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    1ae4:	bd08      	pop	{r3, pc}
    1ae6:	bf00      	nop
    1ae8:	2000132c 	.word	0x2000132c

00001aec <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aee:	460c      	mov	r4, r1
    1af0:	4616      	mov	r6, r2
    1af2:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1af4:	2204      	movs	r2, #4
    1af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1af8:	9909      	ldr	r1, [sp, #36]	; 0x24
    1afa:	4605      	mov	r5, r0
    1afc:	f008 ff78 	bl	a9f0 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1b00:	f1a6 0120 	sub.w	r1, r6, #32
    1b04:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1b06:	4a0c      	ldr	r2, [pc, #48]	; (1b38 <_new_thread+0x4c>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1b08:	f021 0107 	bic.w	r1, r1, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    1b0c:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1b0e:	f022 0201 	bic.w	r2, r2, #1
	thread->fn_abort = NULL;
    1b12:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    1b16:	e9c5 4617 	strd	r4, r6, [r5, #92]	; 0x5c
    1b1a:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    1b1c:	9a06      	ldr	r2, [sp, #24]
    1b1e:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1b20:	9a07      	ldr	r2, [sp, #28]
    1b22:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1b24:	9a08      	ldr	r2, [sp, #32]
    1b26:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
    1b28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->a1 = (u32_t)pEntry;
    1b2c:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    1b2e:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1b30:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1b32:	66ab      	str	r3, [r5, #104]	; 0x68

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b36:	bf00      	nop
    1b38:	0000068d 	.word	0x0000068d

00001b3c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    1b3c:	4901      	ldr	r1, [pc, #4]	; (1b44 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1b3e:	2210      	movs	r2, #16
	str r2, [r1]
    1b40:	600a      	str	r2, [r1, #0]
	bx lr
    1b42:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1b44:	e000ed10 	.word	0xe000ed10

00001b48 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1b48:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1b4a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1b4e:	bf30      	wfi

	bx lr
    1b50:	4770      	bx	lr
    1b52:	bf00      	nop

00001b54 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1b54:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1b56:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    1b5a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1b78 <__bus_fault+0x24>
	ldr ip, [ip]
    1b5e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1b62:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1b66:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1b68:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    1b6c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1b70:	b500      	push	{lr}
	bl _Fault
    1b72:	f7ff fef3 	bl	195c <_Fault>

	pop {pc}
    1b76:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1b78:	e000ed04 	.word	0xe000ed04

00001b7c <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    1b7c:	b538      	push	{r3, r4, r5, lr}
    1b7e:	4604      	mov	r4, r0
    1b80:	460d      	mov	r5, r1
	switch (reason) {
    1b82:	2805      	cmp	r0, #5
    1b84:	d81a      	bhi.n	1bbc <_NanoFatalErrorHandler+0x40>
    1b86:	e8df f000 	tbb	[pc, r0]
    1b8a:	1903      	.short	0x1903
    1b8c:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    1b90:	480d      	ldr	r0, [pc, #52]	; (1bc8 <_NanoFatalErrorHandler+0x4c>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    1b92:	f7ff f8f5 	bl	d80 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    1b96:	f008 fc4b 	bl	a430 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    1b9a:	69aa      	ldr	r2, [r5, #24]
    1b9c:	4601      	mov	r1, r0
    1b9e:	480b      	ldr	r0, [pc, #44]	; (1bcc <_NanoFatalErrorHandler+0x50>)
    1ba0:	f7ff f8ee 	bl	d80 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    1ba4:	4629      	mov	r1, r5
    1ba6:	4620      	mov	r0, r4
}
    1ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    1bac:	f000 b81c 	b.w	1be8 <_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    1bb0:	4807      	ldr	r0, [pc, #28]	; (1bd0 <_NanoFatalErrorHandler+0x54>)
    1bb2:	e7ee      	b.n	1b92 <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
    1bb4:	4807      	ldr	r0, [pc, #28]	; (1bd4 <_NanoFatalErrorHandler+0x58>)
    1bb6:	e7ec      	b.n	1b92 <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
    1bb8:	4807      	ldr	r0, [pc, #28]	; (1bd8 <_NanoFatalErrorHandler+0x5c>)
    1bba:	e7ea      	b.n	1b92 <_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    1bbc:	4601      	mov	r1, r0
    1bbe:	4807      	ldr	r0, [pc, #28]	; (1bdc <_NanoFatalErrorHandler+0x60>)
    1bc0:	f7ff f8de 	bl	d80 <printk>
		break;
    1bc4:	e7e7      	b.n	1b96 <_NanoFatalErrorHandler+0x1a>
    1bc6:	bf00      	nop
    1bc8:	0000b10c 	.word	0x0000b10c
    1bcc:	0000b1aa 	.word	0x0000b1aa
    1bd0:	0000b12c 	.word	0x0000b12c
    1bd4:	0000b152 	.word	0x0000b152
    1bd8:	0000b16c 	.word	0x0000b16c
    1bdc:	0000b187 	.word	0x0000b187

00001be0 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    1be0:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    1be2:	6800      	ldr	r0, [r0, #0]
    1be4:	f7ff bfca 	b.w	1b7c <_NanoFatalErrorHandler>

00001be8 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1be8:	2805      	cmp	r0, #5
{
    1bea:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1bec:	d00c      	beq.n	1c08 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1bee:	f008 fe19 	bl	a824 <k_is_in_isr>
    1bf2:	b160      	cbz	r0, 1c0e <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1bf4:	f008 fe16 	bl	a824 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1bf8:	490c      	ldr	r1, [pc, #48]	; (1c2c <_SysFatalErrorHandler+0x44>)
    1bfa:	4b0d      	ldr	r3, [pc, #52]	; (1c30 <_SysFatalErrorHandler+0x48>)
    1bfc:	2800      	cmp	r0, #0
    1bfe:	bf08      	it	eq
    1c00:	4619      	moveq	r1, r3
    1c02:	480c      	ldr	r0, [pc, #48]	; (1c34 <_SysFatalErrorHandler+0x4c>)
    1c04:	f7ff f8bc 	bl	d80 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1c08:	f7ff ff9e 	bl	1b48 <k_cpu_idle>
    1c0c:	e7fc      	b.n	1c08 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1c0e:	f008 fe19 	bl	a844 <_is_thread_essential>
    1c12:	2800      	cmp	r0, #0
    1c14:	d1ee      	bne.n	1bf4 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1c16:	4c08      	ldr	r4, [pc, #32]	; (1c38 <_SysFatalErrorHandler+0x50>)
    1c18:	4808      	ldr	r0, [pc, #32]	; (1c3c <_SysFatalErrorHandler+0x54>)
    1c1a:	68a1      	ldr	r1, [r4, #8]
    1c1c:	f7ff f8b0 	bl	d80 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1c20:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1c26:	f000 b80b 	b.w	1c40 <_impl_k_thread_abort>
    1c2a:	bf00      	nop
    1c2c:	0000b1e6 	.word	0x0000b1e6
    1c30:	0000b1ea 	.word	0x0000b1ea
    1c34:	0000b1fb 	.word	0x0000b1fb
    1c38:	2000132c 	.word	0x2000132c
    1c3c:	0000b21b 	.word	0x0000b21b

00001c40 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1c40:	b538      	push	{r3, r4, r5, lr}
    1c42:	4605      	mov	r5, r0
	__asm__ volatile(
    1c44:	f04f 0320 	mov.w	r3, #32
    1c48:	f3ef 8411 	mrs	r4, BASEPRI
    1c4c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1c50:	f008 fe64 	bl	a91c <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1c54:	4b0b      	ldr	r3, [pc, #44]	; (1c84 <_impl_k_thread_abort+0x44>)
    1c56:	689b      	ldr	r3, [r3, #8]
    1c58:	42ab      	cmp	r3, r5
    1c5a:	d10d      	bne.n	1c78 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1c5c:	4b0a      	ldr	r3, [pc, #40]	; (1c88 <_impl_k_thread_abort+0x48>)
    1c5e:	685a      	ldr	r2, [r3, #4]
    1c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1c64:	b922      	cbnz	r2, 1c70 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1c66:	f008 fb61 	bl	a32c <_update_time_slice_before_swap>

	return __swap(key);
    1c6a:	4620      	mov	r0, r4
    1c6c:	f7ff fd58 	bl	1720 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1c70:	685a      	ldr	r2, [r3, #4]
    1c72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1c76:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1c78:	4620      	mov	r0, r4
}
    1c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1c7e:	f008 ba07 	b.w	a090 <_reschedule>
    1c82:	bf00      	nop
    1c84:	2000132c 	.word	0x2000132c
    1c88:	e000ed00 	.word	0xe000ed00

00001c8c <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1c8c:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1c8e:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1c90:	4a0b      	ldr	r2, [pc, #44]	; (1cc0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1c92:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1c94:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1c96:	bf1e      	ittt	ne
	movne	r1, #0
    1c98:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1c9a:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1c9c:	f007 fed4 	blne	9a48 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ca0:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1ca2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1ca6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1caa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1cae:	4905      	ldr	r1, [pc, #20]	; (1cc4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1cb0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1cb2:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1cb4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1cb6:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1cba:	f7ff bd11 	b.w	16e0 <_ExcExit>
    1cbe:	0000      	.short	0x0000
	ldr r2, =_kernel
    1cc0:	2000132c 	.word	0x2000132c
	ldr r1, =_sw_isr_table
    1cc4:	000000dc 	.word	0x000000dc

00001cc8 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1cc8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1cca:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1cce:	4806      	ldr	r0, [pc, #24]	; (1ce8 <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1cd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1cd4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1cd6:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1cda:	2002      	movs	r0, #2
    msr CONTROL, r0
    1cdc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1ce0:	f3bf 8f6f 	isb	sy

    b _PrepC
    1ce4:	f000 b806 	b.w	1cf4 <_PrepC>
    ldr r0, =_interrupt_stack
    1ce8:	200020e0 	.word	0x200020e0

00001cec <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1cec:	bf30      	wfi
    b _SysNmiOnReset
    1cee:	f7ff bffd 	b.w	1cec <_SysNmiOnReset>
    1cf2:	bf00      	nop

00001cf4 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1cf4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1cf6:	4b07      	ldr	r3, [pc, #28]	; (1d14 <_PrepC+0x20>)
    1cf8:	4a07      	ldr	r2, [pc, #28]	; (1d18 <_PrepC+0x24>)
    1cfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1cfe:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1d00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d04:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1d08:	f007 fece 	bl	9aa8 <_bss_zero>
	_data_copy();
    1d0c:	f007 fed6 	bl	9abc <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1d10:	f007 fef8 	bl	9b04 <_Cstart>
    1d14:	00000000 	.word	0x00000000
    1d18:	e000ed00 	.word	0xe000ed00

00001d1c <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1d1c:	b508      	push	{r3, lr}
	handler();
    1d1e:	f7ff ffe5 	bl	1cec <_SysNmiOnReset>
	_ExcExit();
}
    1d22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1d26:	f7ff bcdb 	b.w	16e0 <_ExcExit>
	...

00001d2c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1d2c:	4b03      	ldr	r3, [pc, #12]	; (1d3c <arm_core_mpu_enable+0x10>)
    1d2e:	2205      	movs	r2, #5
    1d30:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1d32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d36:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1d3a:	4770      	bx	lr
    1d3c:	e000ed90 	.word	0xe000ed90

00001d40 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1d40:	4a11      	ldr	r2, [pc, #68]	; (1d88 <arm_mpu_init+0x48>)
{
    1d42:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1d44:	6814      	ldr	r4, [r2, #0]
    1d46:	2c08      	cmp	r4, #8
    1d48:	d81b      	bhi.n	1d82 <arm_mpu_init+0x42>
	MPU->CTRL = 0;
    1d4a:	4910      	ldr	r1, [pc, #64]	; (1d8c <arm_mpu_init+0x4c>)
    1d4c:	6850      	ldr	r0, [r2, #4]
    1d4e:	2300      	movs	r3, #0
    1d50:	604b      	str	r3, [r1, #4]
	SYS_LOG_DBG("total region count: %d", _get_num_regions());

	arm_core_mpu_disable();

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1d52:	429c      	cmp	r4, r3
    1d54:	f100 000c 	add.w	r0, r0, #12
    1d58:	d103      	bne.n	1d62 <arm_mpu_init+0x22>
	if (size > 0) {
		_region_init(index, &region_conf);
	}
#endif

	arm_core_mpu_enable();
    1d5a:	f7ff ffe7 	bl	1d2c <arm_core_mpu_enable>
    1d5e:	2000      	movs	r0, #0
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1d60:	bd10      	pop	{r4, pc}
	MPU->RNR = index;
    1d62:	608b      	str	r3, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1d64:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    1d68:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    1d6c:	f042 0210 	orr.w	r2, r2, #16
    1d70:	431a      	orrs	r2, r3
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1d72:	60ca      	str	r2, [r1, #12]
	MPU->RASR = region_conf->attr | MPU_RASR_ENABLE_Msk;
    1d74:	f850 2c04 	ldr.w	r2, [r0, #-4]
    1d78:	f042 0201 	orr.w	r2, r2, #1
    1d7c:	610a      	str	r2, [r1, #16]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1d7e:	3301      	adds	r3, #1
    1d80:	e7e7      	b.n	1d52 <arm_mpu_init+0x12>
		return -1;
    1d82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1d86:	e7eb      	b.n	1d60 <arm_mpu_init+0x20>
    1d88:	20002ce0 	.word	0x20002ce0
    1d8c:	e000ed90 	.word	0xe000ed90

00001d90 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1d90:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1d92:	4603      	mov	r3, r0
    1d94:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1d98:	b90a      	cbnz	r2, 1d9e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1d9a:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1d9c:	4770      	bx	lr
		*d = *s;
    1d9e:	f803 2b01 	strb.w	r2, [r3], #1
    1da2:	e7f7      	b.n	1d94 <strcpy+0x4>

00001da4 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1da4:	3801      	subs	r0, #1
    1da6:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1da8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1dac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1db0:	4293      	cmp	r3, r2
    1db2:	d102      	bne.n	1dba <strcmp+0x16>
    1db4:	2b00      	cmp	r3, #0
    1db6:	d1f7      	bne.n	1da8 <strcmp+0x4>
    1db8:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1dba:	1a98      	subs	r0, r3, r2
    1dbc:	4770      	bx	lr

00001dbe <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1dbe:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1dc0:	b15a      	cbz	r2, 1dda <memcmp+0x1c>
    1dc2:	3901      	subs	r1, #1
    1dc4:	1884      	adds	r4, r0, r2
    1dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
    1dca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1dce:	42a0      	cmp	r0, r4
    1dd0:	d001      	beq.n	1dd6 <memcmp+0x18>
    1dd2:	429a      	cmp	r2, r3
    1dd4:	d0f7      	beq.n	1dc6 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1dd6:	1ad0      	subs	r0, r2, r3
}
    1dd8:	bd10      	pop	{r4, pc}
		return 0;
    1dda:	4610      	mov	r0, r2
    1ddc:	e7fc      	b.n	1dd8 <memcmp+0x1a>

00001dde <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    1dde:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1de0:	ea81 0400 	eor.w	r4, r1, r0
    1de4:	07a5      	lsls	r5, r4, #30
    1de6:	4603      	mov	r3, r0
    1de8:	d00b      	beq.n	1e02 <memcpy+0x24>
    1dea:	3b01      	subs	r3, #1
    1dec:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1dee:	4291      	cmp	r1, r2
    1df0:	d11d      	bne.n	1e2e <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    1df4:	2a00      	cmp	r2, #0
    1df6:	d0fc      	beq.n	1df2 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    1df8:	f811 4b01 	ldrb.w	r4, [r1], #1
    1dfc:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1e00:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1e02:	079c      	lsls	r4, r3, #30
    1e04:	d1f6      	bne.n	1df4 <memcpy+0x16>
    1e06:	1f1d      	subs	r5, r3, #4
    1e08:	460c      	mov	r4, r1
    1e0a:	188f      	adds	r7, r1, r2
		while (n >= sizeof(unsigned int)) {
    1e0c:	1b3e      	subs	r6, r7, r4
    1e0e:	2e03      	cmp	r6, #3
    1e10:	d808      	bhi.n	1e24 <memcpy+0x46>
    1e12:	0894      	lsrs	r4, r2, #2
    1e14:	f06f 0503 	mvn.w	r5, #3
    1e18:	fb05 2204 	mla	r2, r5, r4, r2
    1e1c:	00a4      	lsls	r4, r4, #2
    1e1e:	4423      	add	r3, r4
    1e20:	4421      	add	r1, r4
    1e22:	e7e2      	b.n	1dea <memcpy+0xc>
			*(d_word++) = *(s_word++);
    1e24:	f854 6b04 	ldr.w	r6, [r4], #4
    1e28:	f845 6f04 	str.w	r6, [r5, #4]!
    1e2c:	e7ee      	b.n	1e0c <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
    1e32:	f803 4f01 	strb.w	r4, [r3, #1]!
    1e36:	e7da      	b.n	1dee <memcpy+0x10>

00001e38 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1e38:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1e3a:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1e3c:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1e3e:	079c      	lsls	r4, r3, #30
    1e40:	d10f      	bne.n	1e62 <memset+0x2a>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1e42:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1e46:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1e4a:	461d      	mov	r5, r3
    1e4c:	189f      	adds	r7, r3, r2
    1e4e:	1b7e      	subs	r6, r7, r5
    1e50:	2e03      	cmp	r6, #3
    1e52:	d80c      	bhi.n	1e6e <memset+0x36>
    1e54:	0894      	lsrs	r4, r2, #2
    1e56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1e5a:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1e5c:	429c      	cmp	r4, r3
    1e5e:	d109      	bne.n	1e74 <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
    1e62:	2a00      	cmp	r2, #0
    1e64:	d0fc      	beq.n	1e60 <memset+0x28>
		*(d_byte++) = c_byte;
    1e66:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1e6a:	3a01      	subs	r2, #1
    1e6c:	e7e7      	b.n	1e3e <memset+0x6>
		*(d_word++) = c_word;
    1e6e:	f845 4b04 	str.w	r4, [r5], #4
    1e72:	e7ec      	b.n	1e4e <memset+0x16>
		*(d_byte++) = c_byte;
    1e74:	f804 1b01 	strb.w	r1, [r4], #1
    1e78:	e7f0      	b.n	1e5c <memset+0x24>

00001e7a <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    1e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1e7e:	4770      	bx	lr

00001e80 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1e80:	4b01      	ldr	r3, [pc, #4]	; (1e88 <__stdout_hook_install+0x8>)
    1e82:	6018      	str	r0, [r3, #0]
}
    1e84:	4770      	bx	lr
    1e86:	bf00      	nop
    1e88:	20002d08 	.word	0x20002d08

00001e8c <atomic_or>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1e8c:	f3bf 8f5b 	dmb	ish
    1e90:	e850 3f00 	ldrex	r3, [r0]
    1e94:	ea43 0201 	orr.w	r2, r3, r1
    1e98:	e840 2c00 	strex	ip, r2, [r0]
    1e9c:	f1bc 0f00 	cmp.w	ip, #0
    1ea0:	d1f6      	bne.n	1e90 <atomic_or+0x4>
    1ea2:	f3bf 8f5b 	dmb	ish
}
    1ea6:	4618      	mov	r0, r3
    1ea8:	4770      	bx	lr
	...

00001eac <hci_cmd_done.isra.9>:

	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
	atomic_set(bt_dev.flags, flags);
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1eac:	b570      	push	{r4, r5, r6, lr}
    1eae:	4606      	mov	r6, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1eb0:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1eb2:	460d      	mov	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1eb4:	f007 f8f6 	bl	90a4 <net_buf_pool_get>
    1eb8:	4b0e      	ldr	r3, [pc, #56]	; (1ef4 <hci_cmd_done.isra.9+0x48>)
    1eba:	4283      	cmp	r3, r0
    1ebc:	d119      	bne.n	1ef2 <hci_cmd_done.isra.9+0x46>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
    1ebe:	4628      	mov	r0, r5
    1ec0:	f007 f8f6 	bl	90b0 <net_buf_id>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    1ec4:	4628      	mov	r0, r5
    1ec6:	f007 f8f3 	bl	90b0 <net_buf_id>
    1eca:	4c0b      	ldr	r4, [pc, #44]	; (1ef8 <hci_cmd_done.isra.9+0x4c>)
    1ecc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    1ed0:	6843      	ldr	r3, [r0, #4]
    1ed2:	b173      	cbz	r3, 1ef2 <hci_cmd_done.isra.9+0x46>
		cmd(buf)->status = status;
    1ed4:	4628      	mov	r0, r5
    1ed6:	f007 f8eb 	bl	90b0 <net_buf_id>
    1eda:	f804 6030 	strb.w	r6, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    1ede:	4628      	mov	r0, r5
    1ee0:	f007 f8e6 	bl	90b0 <net_buf_id>
    1ee4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
	}
}
    1ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1eec:	6840      	ldr	r0, [r0, #4]
    1eee:	f008 baae 	b.w	a44e <_impl_k_sem_give>
    1ef2:	bd70      	pop	{r4, r5, r6, pc}
    1ef4:	20002fec 	.word	0x20002fec
    1ef8:	20000420 	.word	0x20000420

00001efc <atomic_and.constprop.23>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1efc:	4b07      	ldr	r3, [pc, #28]	; (1f1c <atomic_and.constprop.23+0x20>)
}
    1efe:	f3bf 8f5b 	dmb	ish
    1f02:	4602      	mov	r2, r0
    1f04:	e853 0f00 	ldrex	r0, [r3]
    1f08:	ea00 0102 	and.w	r1, r0, r2
    1f0c:	e843 1c00 	strex	ip, r1, [r3]
    1f10:	f1bc 0f00 	cmp.w	ip, #0
    1f14:	d1f6      	bne.n	1f04 <atomic_and.constprop.23+0x8>
    1f16:	f3bf 8f5b 	dmb	ish
    1f1a:	4770      	bx	lr
    1f1c:	20002d80 	.word	0x20002d80

00001f20 <atomic_test_bit.constprop.22>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1f20:	4b05      	ldr	r3, [pc, #20]	; (1f38 <atomic_test_bit.constprop.22+0x18>)
    1f22:	f3bf 8f5b 	dmb	ish
    1f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1f28:	f3bf 8f5b 	dmb	ish
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1f2c:	fa43 f000 	asr.w	r0, r3, r0
}
    1f30:	f000 0001 	and.w	r0, r0, #1
    1f34:	4770      	bx	lr
    1f36:	bf00      	nop
    1f38:	20002d10 	.word	0x20002d10

00001f3c <bt_hci_cmd_create>:
{
    1f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1f40:	4680      	mov	r8, r0
    1f42:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1f44:	4813      	ldr	r0, [pc, #76]	; (1f94 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    1f46:	4d14      	ldr	r5, [pc, #80]	; (1f98 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1f4c:	f007 f93e 	bl	91cc <net_buf_alloc_fixed>
    1f50:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    1f52:	f100 0608 	add.w	r6, r0, #8
    1f56:	2100      	movs	r1, #0
    1f58:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    1f5a:	2700      	movs	r7, #0
    1f5c:	f007 f93c 	bl	91d8 <net_buf_simple_reserve>
    1f60:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    1f62:	4620      	mov	r0, r4
    1f64:	f007 f8a4 	bl	90b0 <net_buf_id>
    1f68:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1f6c:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    1f70:	4620      	mov	r0, r4
    1f72:	f007 f89d 	bl	90b0 <net_buf_id>
    1f76:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    1f7a:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    1f7c:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    1f7e:	4630      	mov	r0, r6
    1f80:	f007 f96e 	bl	9260 <net_buf_simple_add>
	hdr->param_len = param_len;
    1f84:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    1f88:	f8a0 8000 	strh.w	r8, [r0]
}
    1f8c:	4620      	mov	r0, r4
    1f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f92:	bf00      	nop
    1f94:	20002fec 	.word	0x20002fec
    1f98:	20000420 	.word	0x20000420

00001f9c <bt_hci_cmd_send_sync>:
{
    1f9c:	b570      	push	{r4, r5, r6, lr}
    1f9e:	4615      	mov	r5, r2
    1fa0:	b086      	sub	sp, #24
	if (!buf) {
    1fa2:	460c      	mov	r4, r1
    1fa4:	b919      	cbnz	r1, 1fae <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    1fa6:	f7ff ffc9 	bl	1f3c <bt_hci_cmd_create>
		if (!buf) {
    1faa:	4604      	mov	r4, r0
    1fac:	b368      	cbz	r0, 200a <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1fae:	2201      	movs	r2, #1
    1fb0:	2100      	movs	r1, #0
    1fb2:	4668      	mov	r0, sp
    1fb4:	f008 fa42 	bl	a43c <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    1fb8:	4620      	mov	r0, r4
    1fba:	f007 f879 	bl	90b0 <net_buf_id>
    1fbe:	4e14      	ldr	r6, [pc, #80]	; (2010 <bt_hci_cmd_send_sync+0x74>)
    1fc0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1fc4:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    1fc8:	4620      	mov	r0, r4
    1fca:	f007 f945 	bl	9258 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    1fce:	4621      	mov	r1, r4
    1fd0:	4810      	ldr	r0, [pc, #64]	; (2014 <bt_hci_cmd_send_sync+0x78>)
    1fd2:	f007 f905 	bl	91e0 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1fd6:	f242 7110 	movw	r1, #10000	; 0x2710
    1fda:	4668      	mov	r0, sp
    1fdc:	f008 fa5e 	bl	a49c <_impl_k_sem_take>
	if (cmd(buf)->status) {
    1fe0:	4620      	mov	r0, r4
    1fe2:	f007 f865 	bl	90b0 <net_buf_id>
    1fe6:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    1fea:	b130      	cbz	r0, 1ffa <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    1fec:	4620      	mov	r0, r4
    1fee:	f007 f905 	bl	91fc <net_buf_unref>
		err = -EIO;
    1ff2:	f06f 0004 	mvn.w	r0, #4
}
    1ff6:	b006      	add	sp, #24
    1ff8:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    1ffa:	b10d      	cbz	r5, 2000 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    1ffc:	602c      	str	r4, [r5, #0]
    1ffe:	e7fa      	b.n	1ff6 <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    2000:	4620      	mov	r0, r4
    2002:	f007 f8fb 	bl	91fc <net_buf_unref>
		err = 0;
    2006:	4628      	mov	r0, r5
    2008:	e7f5      	b.n	1ff6 <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    200a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    200e:	e7f2      	b.n	1ff6 <bt_hci_cmd_send_sync+0x5a>
    2010:	20000420 	.word	0x20000420
    2014:	20002db4 	.word	0x20002db4

00002018 <set_random_address>:
{
    2018:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    201a:	4d15      	ldr	r5, [pc, #84]	; (2070 <set_random_address+0x58>)
    201c:	2206      	movs	r2, #6
    201e:	f105 0108 	add.w	r1, r5, #8
    2022:	4606      	mov	r6, r0
    2024:	f7ff fecb 	bl	1dbe <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2028:	4604      	mov	r4, r0
    202a:	b1d8      	cbz	r0, 2064 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    202c:	2106      	movs	r1, #6
    202e:	f242 0005 	movw	r0, #8197	; 0x2005
    2032:	f7ff ff83 	bl	1f3c <bt_hci_cmd_create>
	if (!buf) {
    2036:	4604      	mov	r4, r0
    2038:	b1b0      	cbz	r0, 2068 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    203a:	2206      	movs	r2, #6
    203c:	4631      	mov	r1, r6
    203e:	3008      	adds	r0, #8
    2040:	f007 f914 	bl	926c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2044:	4621      	mov	r1, r4
    2046:	2200      	movs	r2, #0
    2048:	f242 0005 	movw	r0, #8197	; 0x2005
    204c:	f7ff ffa6 	bl	1f9c <bt_hci_cmd_send_sync>
	if (err) {
    2050:	4604      	mov	r4, r0
    2052:	b938      	cbnz	r0, 2064 <set_random_address+0x4c>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2054:	2206      	movs	r2, #6
    2056:	4631      	mov	r1, r6
    2058:	f105 0008 	add.w	r0, r5, #8
    205c:	f7ff febf 	bl	1dde <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2060:	2301      	movs	r3, #1
    2062:	71eb      	strb	r3, [r5, #7]
}
    2064:	4620      	mov	r0, r4
    2066:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2068:	f06f 0436 	mvn.w	r4, #54	; 0x36
    206c:	e7fa      	b.n	2064 <set_random_address+0x4c>
    206e:	bf00      	nop
    2070:	20002d10 	.word	0x20002d10

00002074 <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    2074:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    2076:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2078:	2106      	movs	r1, #6
{
    207a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    207c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2080:	f006 f830 	bl	80e4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
    2084:	b918      	cbnz	r0, 208e <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    2086:	79a3      	ldrb	r3, [r4, #6]
    2088:	f063 033f 	orn	r3, r3, #63	; 0x3f
    208c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    208e:	bd10      	pop	{r4, pc}

00002090 <bt_set_static_addr>:

int bt_set_static_addr(void)
{
    2090:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2092:	4d0c      	ldr	r5, [pc, #48]	; (20c4 <bt_set_static_addr+0x34>)
    2094:	782b      	ldrb	r3, [r5, #0]
    2096:	2b01      	cmp	r3, #1
    2098:	d110      	bne.n	20bc <bt_set_static_addr+0x2c>
    209a:	79ab      	ldrb	r3, [r5, #6]
    209c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    20a0:	2bc0      	cmp	r3, #192	; 0xc0
    20a2:	d10b      	bne.n	20bc <bt_set_static_addr+0x2c>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
		BT_ERR("Only static random address supported as identity");
		return -EINVAL;
	}

	err = set_random_address(&bt_dev.id_addr.a);
    20a4:	1c68      	adds	r0, r5, #1
    20a6:	f7ff ffb7 	bl	2018 <set_random_address>
	if (err) {
    20aa:	4604      	mov	r4, r0
    20ac:	b920      	cbnz	r0, 20b8 <bt_set_static_addr+0x28>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    20ae:	2104      	movs	r1, #4
    20b0:	f105 0070 	add.w	r0, r5, #112	; 0x70
    20b4:	f7ff feea 	bl	1e8c <atomic_or>
	}

	atomic_set_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM);

	return 0;
}
    20b8:	4620      	mov	r0, r4
    20ba:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    20bc:	f06f 0415 	mvn.w	r4, #21
    20c0:	e7fa      	b.n	20b8 <bt_set_static_addr+0x28>
    20c2:	bf00      	nop
    20c4:	20002d10 	.word	0x20002d10

000020c8 <hci_init>:
	net_buf_unref(rsp);
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
    20c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    20ca:	4dbb      	ldr	r5, [pc, #748]	; (23b8 <hci_init+0x2f0>)
    20cc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    20d0:	6899      	ldr	r1, [r3, #8]
    20d2:	f011 0101 	ands.w	r1, r1, #1
{
    20d6:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    20d8:	d121      	bne.n	211e <hci_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    20da:	aa04      	add	r2, sp, #16
    20dc:	f640 4003 	movw	r0, #3075	; 0xc03
    20e0:	f7ff ff5c 	bl	1f9c <bt_hci_cmd_send_sync>
		if (err) {
    20e4:	4604      	mov	r4, r0
    20e6:	2800      	cmp	r0, #0
    20e8:	d17a      	bne.n	21e0 <hci_init+0x118>
		hci_reset_complete(rsp);
    20ea:	9b04      	ldr	r3, [sp, #16]
	u8_t status = buf->data[0];
    20ec:	689b      	ldr	r3, [r3, #8]
	if (status) {
    20ee:	781b      	ldrb	r3, [r3, #0]
    20f0:	b993      	cbnz	r3, 2118 <hci_init+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    20f2:	f3bf 8f5b 	dmb	ish
    20f6:	462b      	mov	r3, r5
    20f8:	f853 2f70 	ldr.w	r2, [r3, #112]!
    20fc:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    2100:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2104:	f3bf 8f5b 	dmb	ish
    2108:	e853 1f00 	ldrex	r1, [r3]
    210c:	e843 2000 	strex	r0, r2, [r3]
    2110:	2800      	cmp	r0, #0
    2112:	d1f9      	bne.n	2108 <hci_init+0x40>
    2114:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    2118:	9804      	ldr	r0, [sp, #16]
    211a:	f007 f86f 	bl	91fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    211e:	aa04      	add	r2, sp, #16
    2120:	2100      	movs	r1, #0
    2122:	f241 0003 	movw	r0, #4099	; 0x1003
    2126:	f7ff ff39 	bl	1f9c <bt_hci_cmd_send_sync>
	if (err) {
    212a:	4604      	mov	r4, r0
    212c:	2800      	cmp	r0, #0
    212e:	d157      	bne.n	21e0 <hci_init+0x118>
	read_local_features_complete(rsp);
    2130:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2132:	48a2      	ldr	r0, [pc, #648]	; (23bc <hci_init+0x2f4>)
    2134:	6899      	ldr	r1, [r3, #8]
    2136:	2208      	movs	r2, #8
    2138:	3101      	adds	r1, #1
    213a:	f7ff fe50 	bl	1dde <memcpy>
	net_buf_unref(rsp);
    213e:	9804      	ldr	r0, [sp, #16]
    2140:	f007 f85c 	bl	91fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    2144:	4621      	mov	r1, r4
    2146:	aa04      	add	r2, sp, #16
    2148:	f241 0001 	movw	r0, #4097	; 0x1001
    214c:	f7ff ff26 	bl	1f9c <bt_hci_cmd_send_sync>
	if (err) {
    2150:	4604      	mov	r4, r0
    2152:	2800      	cmp	r0, #0
    2154:	d144      	bne.n	21e0 <hci_init+0x118>
	read_local_ver_complete(rsp);
    2156:	9804      	ldr	r0, [sp, #16]
    2158:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    215a:	785a      	ldrb	r2, [r3, #1]
    215c:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    215e:	78d9      	ldrb	r1, [r3, #3]
    2160:	789a      	ldrb	r2, [r3, #2]
    2162:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2166:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2168:	791a      	ldrb	r2, [r3, #4]
    216a:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    216c:	7a19      	ldrb	r1, [r3, #8]
    216e:	79da      	ldrb	r2, [r3, #7]
    2170:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2174:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2176:	795a      	ldrb	r2, [r3, #5]
    2178:	799b      	ldrb	r3, [r3, #6]
    217a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    217e:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    2180:	f007 f83c 	bl	91fc <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    2184:	2003      	movs	r0, #3
    2186:	f7ff fecb 	bl	1f20 <atomic_test_bit.constprop.22>
    218a:	4601      	mov	r1, r0
    218c:	b988      	cbnz	r0, 21b2 <hci_init+0xea>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    218e:	aa04      	add	r2, sp, #16
    2190:	f241 0009 	movw	r0, #4105	; 0x1009
    2194:	f7ff ff02 	bl	1f9c <bt_hci_cmd_send_sync>
		if (err) {
    2198:	4604      	mov	r4, r0
    219a:	bb08      	cbnz	r0, 21e0 <hci_init+0x118>
		read_bdaddr_complete(rsp);
    219c:	9b04      	ldr	r3, [sp, #16]
    219e:	4888      	ldr	r0, [pc, #544]	; (23c0 <hci_init+0x2f8>)
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    21a0:	6899      	ldr	r1, [r3, #8]
    21a2:	2206      	movs	r2, #6
    21a4:	3101      	adds	r1, #1
    21a6:	f7ff fe1a 	bl	1dde <memcpy>
		net_buf_unref(rsp);
    21aa:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    21ac:	702c      	strb	r4, [r5, #0]
		net_buf_unref(rsp);
    21ae:	f007 f825 	bl	91fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    21b2:	aa04      	add	r2, sp, #16
    21b4:	2100      	movs	r1, #0
    21b6:	f241 0002 	movw	r0, #4098	; 0x1002
    21ba:	f7ff feef 	bl	1f9c <bt_hci_cmd_send_sync>
	if (err) {
    21be:	4604      	mov	r4, r0
    21c0:	b970      	cbnz	r0, 21e0 <hci_init+0x118>
	read_supported_commands_complete(rsp);
    21c2:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.supported_commands, rp->commands,
    21c4:	487f      	ldr	r0, [pc, #508]	; (23c4 <hci_init+0x2fc>)
    21c6:	6899      	ldr	r1, [r3, #8]
    21c8:	2240      	movs	r2, #64	; 0x40
    21ca:	3101      	adds	r1, #1
    21cc:	f7ff fe07 	bl	1dde <memcpy>
	net_buf_unref(rsp);
    21d0:	9804      	ldr	r0, [sp, #16]
    21d2:	f007 f813 	bl	91fc <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    21d6:	7eab      	ldrb	r3, [r5, #26]
    21d8:	0658      	lsls	r0, r3, #25
    21da:	d404      	bmi.n	21e6 <hci_init+0x11e>
		return -ENODEV;
    21dc:	f06f 0412 	mvn.w	r4, #18
	if (!IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_dev_show_info();
	}

	return 0;
}
    21e0:	4620      	mov	r0, r4
    21e2:	b007      	add	sp, #28
    21e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    21e6:	4621      	mov	r1, r4
    21e8:	aa04      	add	r2, sp, #16
    21ea:	f242 0003 	movw	r0, #8195	; 0x2003
    21ee:	f7ff fed5 	bl	1f9c <bt_hci_cmd_send_sync>
	if (err) {
    21f2:	4604      	mov	r4, r0
    21f4:	2800      	cmp	r0, #0
    21f6:	d1f3      	bne.n	21e0 <hci_init+0x118>
	read_le_features_complete(rsp);
    21f8:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    21fa:	4873      	ldr	r0, [pc, #460]	; (23c8 <hci_init+0x300>)
    21fc:	6899      	ldr	r1, [r3, #8]
    21fe:	2208      	movs	r2, #8
    2200:	3101      	adds	r1, #1
    2202:	f7ff fdec 	bl	1dde <memcpy>
	net_buf_unref(rsp);
    2206:	9804      	ldr	r0, [sp, #16]
    2208:	f006 fff8 	bl	91fc <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    220c:	7eab      	ldrb	r3, [r5, #26]
    220e:	0699      	lsls	r1, r3, #26
    2210:	f140 8090 	bpl.w	2334 <hci_init+0x26c>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2214:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    2218:	071a      	lsls	r2, r3, #28
    221a:	f100 80a7 	bmi.w	236c <hci_init+0x2a4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    221e:	2108      	movs	r1, #8
    2220:	f242 0001 	movw	r0, #8193	; 0x2001
    2224:	f7ff fe8a 	bl	1f3c <bt_hci_cmd_create>
	if (!buf) {
    2228:	4604      	mov	r4, r0
    222a:	2800      	cmp	r0, #0
    222c:	f000 8089 	beq.w	2342 <hci_init+0x27a>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2230:	2108      	movs	r1, #8
    2232:	4408      	add	r0, r1
    2234:	f007 f814 	bl	9260 <net_buf_simple_add>
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2238:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    223c:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2240:	2b06      	cmp	r3, #6
    2242:	bf14      	ite	ne
    2244:	2302      	movne	r3, #2
    2246:	f44f 73c1 	moveq.w	r3, #386	; 0x182
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    224a:	2200      	movs	r2, #0
    224c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    224e:	0a1b      	lsrs	r3, r3, #8
    2250:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    2252:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2254:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2256:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2258:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    225a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    225c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    225e:	4621      	mov	r1, r4
    2260:	f242 0001 	movw	r0, #8193	; 0x2001
    2264:	f7ff fe9a 	bl	1f9c <bt_hci_cmd_send_sync>
	if (err) {
    2268:	4604      	mov	r4, r0
    226a:	2800      	cmp	r0, #0
    226c:	d1b8      	bne.n	21e0 <hci_init+0x118>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    226e:	2108      	movs	r1, #8
    2270:	f640 4001 	movw	r0, #3073	; 0xc01
    2274:	f7ff fe62 	bl	1f3c <bt_hci_cmd_create>
	if (!buf) {
    2278:	4606      	mov	r6, r0
    227a:	2800      	cmp	r0, #0
    227c:	d061      	beq.n	2342 <hci_init+0x27a>
	ev = net_buf_add(buf, sizeof(*ev));
    227e:	2108      	movs	r1, #8
    2280:	4408      	add	r0, r1
    2282:	f006 ffed 	bl	9260 <net_buf_simple_add>
    2286:	2380      	movs	r3, #128	; 0x80
    2288:	7043      	strb	r3, [r0, #1]
    228a:	2702      	movs	r7, #2
    228c:	2320      	movs	r3, #32
	dst[0] = val;
    228e:	7004      	strb	r4, [r0, #0]
    2290:	7084      	strb	r4, [r0, #2]
    2292:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    2294:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    2296:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    2298:	70c7      	strb	r7, [r0, #3]
    229a:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    229c:	4622      	mov	r2, r4
    229e:	4631      	mov	r1, r6
    22a0:	f640 4001 	movw	r0, #3073	; 0xc01
    22a4:	f7ff fe7a 	bl	1f9c <bt_hci_cmd_send_sync>
	if (err) {
    22a8:	4604      	mov	r4, r0
    22aa:	2800      	cmp	r0, #0
    22ac:	d198      	bne.n	21e0 <hci_init+0x118>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    22ae:	4601      	mov	r1, r0
    22b0:	aa04      	add	r2, sp, #16
    22b2:	f64f 4001 	movw	r0, #64513	; 0xfc01
    22b6:	f7ff fe71 	bl	1f9c <bt_hci_cmd_send_sync>
	if (err) {
    22ba:	bb20      	cbnz	r0, 2306 <hci_init+0x23e>
	net_buf_unref(rsp);
    22bc:	9804      	ldr	r0, [sp, #16]
    22be:	f006 ff9d 	bl	91fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    22c2:	aa04      	add	r2, sp, #16
    22c4:	4621      	mov	r1, r4
    22c6:	f64f 4002 	movw	r0, #64514	; 0xfc02
    22ca:	f7ff fe67 	bl	1f9c <bt_hci_cmd_send_sync>
	if (err) {
    22ce:	b9d0      	cbnz	r0, 2306 <hci_init+0x23e>
	rp.cmds = (void *)rsp->data;
    22d0:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    22d2:	483e      	ldr	r0, [pc, #248]	; (23cc <hci_init+0x304>)
    22d4:	6899      	ldr	r1, [r3, #8]
    22d6:	463a      	mov	r2, r7
    22d8:	3101      	adds	r1, #1
    22da:	f7ff fd80 	bl	1dde <memcpy>
	net_buf_unref(rsp);
    22de:	9804      	ldr	r0, [sp, #16]
    22e0:	f006 ff8c 	bl	91fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    22e4:	aa04      	add	r2, sp, #16
    22e6:	4621      	mov	r1, r4
    22e8:	f64f 4003 	movw	r0, #64515	; 0xfc03
    22ec:	f7ff fe56 	bl	1f9c <bt_hci_cmd_send_sync>
	if (err) {
    22f0:	b948      	cbnz	r0, 2306 <hci_init+0x23e>
	rp.feat = (void *)rsp->data;
    22f2:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    22f4:	4836      	ldr	r0, [pc, #216]	; (23d0 <hci_init+0x308>)
    22f6:	6899      	ldr	r1, [r3, #8]
    22f8:	2201      	movs	r2, #1
    22fa:	4411      	add	r1, r2
    22fc:	f7ff fd6f 	bl	1dde <memcpy>
	net_buf_unref(rsp);
    2300:	9804      	ldr	r0, [sp, #16]
    2302:	f006 ff7b 	bl	91fc <net_buf_unref>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2306:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2308:	2207      	movs	r2, #7
    230a:	a902      	add	r1, sp, #8
    230c:	482a      	ldr	r0, [pc, #168]	; (23b8 <hci_init+0x2f0>)
    230e:	9302      	str	r3, [sp, #8]
    2310:	f8cd 300b 	str.w	r3, [sp, #11]
    2314:	f7ff fd53 	bl	1dbe <memcmp>
    2318:	2800      	cmp	r0, #0
    231a:	d13b      	bne.n	2394 <hci_init+0x2cc>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    231c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    2320:	07db      	lsls	r3, r3, #31
    2322:	d459      	bmi.n	23d8 <hci_init+0x310>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2324:	4824      	ldr	r0, [pc, #144]	; (23b8 <hci_init+0x2f0>)
    2326:	f7ff fea5 	bl	2074 <bt_addr_le_create_static>
		if (err) {
    232a:	4604      	mov	r4, r0
    232c:	2800      	cmp	r0, #0
    232e:	f47f af57 	bne.w	21e0 <hci_init+0x118>
    2332:	e067      	b.n	2404 <hci_init+0x33c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2334:	2102      	movs	r1, #2
    2336:	f640 406d 	movw	r0, #3181	; 0xc6d
    233a:	f7ff fdff 	bl	1f3c <bt_hci_cmd_create>
		if (!buf) {
    233e:	4606      	mov	r6, r0
    2340:	b910      	cbnz	r0, 2348 <hci_init+0x280>
		return -ENOBUFS;
    2342:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2346:	e74b      	b.n	21e0 <hci_init+0x118>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2348:	2102      	movs	r1, #2
    234a:	3008      	adds	r0, #8
    234c:	f006 ff88 	bl	9260 <net_buf_simple_add>
		cp_le->le = 0x01;
    2350:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2352:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2354:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2356:	4622      	mov	r2, r4
    2358:	4631      	mov	r1, r6
    235a:	f640 406d 	movw	r0, #3181	; 0xc6d
    235e:	f7ff fe1d 	bl	1f9c <bt_hci_cmd_send_sync>
		if (err) {
    2362:	4604      	mov	r4, r0
    2364:	2800      	cmp	r0, #0
    2366:	f43f af55 	beq.w	2214 <hci_init+0x14c>
    236a:	e739      	b.n	21e0 <hci_init+0x118>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    236c:	aa04      	add	r2, sp, #16
    236e:	2100      	movs	r1, #0
    2370:	f242 001c 	movw	r0, #8220	; 0x201c
    2374:	f7ff fe12 	bl	1f9c <bt_hci_cmd_send_sync>
		if (err) {
    2378:	4604      	mov	r4, r0
    237a:	2800      	cmp	r0, #0
    237c:	f47f af30 	bne.w	21e0 <hci_init+0x118>
		le_read_supp_states_complete(rsp);
    2380:	9804      	ldr	r0, [sp, #16]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2382:	6883      	ldr	r3, [r0, #8]
    2384:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2388:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    238a:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    238e:	f006 ff35 	bl	91fc <net_buf_unref>
    2392:	e744      	b.n	221e <hci_init+0x156>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2394:	4b0f      	ldr	r3, [pc, #60]	; (23d4 <hci_init+0x30c>)
    2396:	6818      	ldr	r0, [r3, #0]
    2398:	889a      	ldrh	r2, [r3, #4]
    239a:	9004      	str	r0, [sp, #16]
    239c:	799b      	ldrb	r3, [r3, #6]
    239e:	f8ad 2014 	strh.w	r2, [sp, #20]
    23a2:	a904      	add	r1, sp, #16
    23a4:	2207      	movs	r2, #7
    23a6:	4804      	ldr	r0, [pc, #16]	; (23b8 <hci_init+0x2f0>)
    23a8:	f88d 3016 	strb.w	r3, [sp, #22]
    23ac:	f7ff fd07 	bl	1dbe <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    23b0:	2800      	cmp	r0, #0
    23b2:	d0b3      	beq.n	231c <hci_init+0x254>
    23b4:	e714      	b.n	21e0 <hci_init+0x118>
    23b6:	bf00      	nop
    23b8:	20002d10 	.word	0x20002d10
    23bc:	20002d26 	.word	0x20002d26
    23c0:	20002d11 	.word	0x20002d11
    23c4:	20002d2e 	.word	0x20002d2e
    23c8:	20002d88 	.word	0x20002d88
    23cc:	20002d6f 	.word	0x20002d6f
    23d0:	20002d6e 	.word	0x20002d6e
    23d4:	0000ad58 	.word	0x0000ad58
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    23d8:	aa01      	add	r2, sp, #4
    23da:	2100      	movs	r1, #0
    23dc:	f64f 4009 	movw	r0, #64521	; 0xfc09
    23e0:	f7ff fddc 	bl	1f9c <bt_hci_cmd_send_sync>
		if (err) {
    23e4:	2800      	cmp	r0, #0
    23e6:	d19d      	bne.n	2324 <hci_init+0x25c>
		rp = (void *)rsp->data;
    23e8:	9801      	ldr	r0, [sp, #4]
    23ea:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    23ec:	784b      	ldrb	r3, [r1, #1]
    23ee:	b16b      	cbz	r3, 240c <hci_init+0x344>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    23f0:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    23f2:	2206      	movs	r2, #6
    23f4:	3102      	adds	r1, #2
    23f6:	4807      	ldr	r0, [pc, #28]	; (2414 <hci_init+0x34c>)
    23f8:	702b      	strb	r3, [r5, #0]
    23fa:	f7ff fcf0 	bl	1dde <memcpy>
			net_buf_unref(rsp);
    23fe:	9801      	ldr	r0, [sp, #4]
    2400:	f006 fefc 	bl	91fc <net_buf_unref>
		return bt_set_static_addr();
    2404:	f7ff fe44 	bl	2090 <bt_set_static_addr>
    2408:	4604      	mov	r4, r0
    240a:	e6e9      	b.n	21e0 <hci_init+0x118>
		net_buf_unref(rsp);
    240c:	f006 fef6 	bl	91fc <net_buf_unref>
    2410:	e788      	b.n	2324 <hci_init+0x25c>
    2412:	bf00      	nop
    2414:	20002d11 	.word	0x20002d11

00002418 <init_work>:

	return 0;
}

static void init_work(struct k_work *work)
{
    2418:	b510      	push	{r4, lr}
	err = hci_init();
    241a:	f7ff fe55 	bl	20c8 <hci_init>
	if (err) {
    241e:	4604      	mov	r4, r0
    2420:	b918      	cbnz	r0, 242a <init_work+0x12>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2422:	2102      	movs	r1, #2
    2424:	4805      	ldr	r0, [pc, #20]	; (243c <init_work+0x24>)
    2426:	f7ff fd31 	bl	1e8c <atomic_or>
	int err;

	err = bt_init();
	if (ready_cb) {
    242a:	4b05      	ldr	r3, [pc, #20]	; (2440 <init_work+0x28>)
    242c:	681b      	ldr	r3, [r3, #0]
    242e:	b11b      	cbz	r3, 2438 <init_work+0x20>
		ready_cb(err);
    2430:	4620      	mov	r0, r4
	}
}
    2432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2436:	4718      	bx	r3
}
    2438:	bd10      	pop	{r4, pc}
    243a:	bf00      	nop
    243c:	20002d80 	.word	0x20002d80
    2440:	20000478 	.word	0x20000478

00002444 <bt_recv>:
{
    2444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (bt_buf_get_type(buf)) {
    2446:	7d06      	ldrb	r6, [r0, #20]
    2448:	2e01      	cmp	r6, #1
{
    244a:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    244c:	d14e      	bne.n	24ec <bt_recv+0xa8>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    244e:	6887      	ldr	r7, [r0, #8]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    2450:	783b      	ldrb	r3, [r7, #0]
    2452:	3b0e      	subs	r3, #14
    2454:	2b01      	cmp	r3, #1
    2456:	d805      	bhi.n	2464 <bt_recv+0x20>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    2458:	4040      	eors	r0, r0
    245a:	f380 8811 	msr	BASEPRI, r0
    245e:	f04f 0004 	mov.w	r0, #4
    2462:	df02      	svc	2
	net_buf_pull(buf, sizeof(*hdr));
    2464:	f100 0508 	add.w	r5, r0, #8
    2468:	2102      	movs	r1, #2
    246a:	4628      	mov	r0, r5
    246c:	f006 ff07 	bl	927e <net_buf_simple_pull>
	switch (hdr->evt) {
    2470:	783b      	ldrb	r3, [r7, #0]
    2472:	2b3e      	cmp	r3, #62	; 0x3e
    2474:	d109      	bne.n	248a <bt_recv+0x46>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    2476:	68a7      	ldr	r7, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    2478:	4631      	mov	r1, r6
    247a:	4628      	mov	r0, r5
    247c:	f006 feff 	bl	927e <net_buf_simple_pull>
	switch (evt->subevent) {
    2480:	783b      	ldrb	r3, [r7, #0]
    2482:	2b08      	cmp	r3, #8
    2484:	d006      	beq.n	2494 <bt_recv+0x50>
    2486:	2b09      	cmp	r3, #9
    2488:	d022      	beq.n	24d0 <bt_recv+0x8c>
	net_buf_unref(buf);
    248a:	4620      	mov	r0, r4
    248c:	f006 feb6 	bl	91fc <net_buf_unref>
		return 0;
    2490:	2000      	movs	r0, #0
}
    2492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		le_pkey_complete(buf);
    2494:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2496:	f06f 0020 	mvn.w	r0, #32
    249a:	f7ff fd2f 	bl	1efc <atomic_and.constprop.23>
	if (!evt->status) {
    249e:	7833      	ldrb	r3, [r6, #0]
    24a0:	b943      	cbnz	r3, 24b4 <bt_recv+0x70>
		memcpy(pub_key, evt->key, 64);
    24a2:	1c71      	adds	r1, r6, #1
    24a4:	2240      	movs	r2, #64	; 0x40
    24a6:	4814      	ldr	r0, [pc, #80]	; (24f8 <bt_recv+0xb4>)
    24a8:	f7ff fc99 	bl	1dde <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    24ac:	2110      	movs	r1, #16
    24ae:	4813      	ldr	r0, [pc, #76]	; (24fc <bt_recv+0xb8>)
    24b0:	f7ff fcec 	bl	1e8c <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    24b4:	4b12      	ldr	r3, [pc, #72]	; (2500 <bt_recv+0xbc>)
    24b6:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    24b8:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    24ba:	2d00      	cmp	r5, #0
    24bc:	d0e5      	beq.n	248a <bt_recv+0x46>
		cb->func(evt->status ? NULL : evt->key);
    24be:	7832      	ldrb	r2, [r6, #0]
    24c0:	682b      	ldr	r3, [r5, #0]
    24c2:	2a00      	cmp	r2, #0
    24c4:	bf0c      	ite	eq
    24c6:	4638      	moveq	r0, r7
    24c8:	2000      	movne	r0, #0
    24ca:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    24cc:	686d      	ldr	r5, [r5, #4]
    24ce:	e7f4      	b.n	24ba <bt_recv+0x76>
	if (dh_key_cb) {
    24d0:	4d0c      	ldr	r5, [pc, #48]	; (2504 <bt_recv+0xc0>)
    24d2:	682a      	ldr	r2, [r5, #0]
    24d4:	2a00      	cmp	r2, #0
    24d6:	d0d8      	beq.n	248a <bt_recv+0x46>
		le_dhkey_complete(buf);
    24d8:	68a0      	ldr	r0, [r4, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    24da:	7803      	ldrb	r3, [r0, #0]
    24dc:	b923      	cbnz	r3, 24e8 <bt_recv+0xa4>
    24de:	3001      	adds	r0, #1
    24e0:	4790      	blx	r2
		dh_key_cb = NULL;
    24e2:	2300      	movs	r3, #0
    24e4:	602b      	str	r3, [r5, #0]
    24e6:	e7d0      	b.n	248a <bt_recv+0x46>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    24e8:	2000      	movs	r0, #0
    24ea:	e7f9      	b.n	24e0 <bt_recv+0x9c>
		net_buf_unref(buf);
    24ec:	f006 fe86 	bl	91fc <net_buf_unref>
		return -EINVAL;
    24f0:	f06f 0015 	mvn.w	r0, #21
    24f4:	e7cd      	b.n	2492 <bt_recv+0x4e>
    24f6:	bf00      	nop
    24f8:	20000434 	.word	0x20000434
    24fc:	20002d80 	.word	0x20002d80
    2500:	20000474 	.word	0x20000474
    2504:	20000430 	.word	0x20000430

00002508 <bt_recv_prio>:
{
    2508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    250a:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    250c:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    250e:	2b01      	cmp	r3, #1
{
    2510:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2512:	d005      	beq.n	2520 <bt_recv_prio+0x18>
		BT_ASSERT(0);
    2514:	4040      	eors	r0, r0
    2516:	f380 8811 	msr	BASEPRI, r0
    251a:	f04f 0004 	mov.w	r0, #4
    251e:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    2520:	8983      	ldrh	r3, [r0, #12]
    2522:	2b01      	cmp	r3, #1
    2524:	d9f6      	bls.n	2514 <bt_recv_prio+0xc>
    2526:	7833      	ldrb	r3, [r6, #0]
    2528:	3b0e      	subs	r3, #14
    252a:	2b01      	cmp	r3, #1
    252c:	d8f2      	bhi.n	2514 <bt_recv_prio+0xc>
	net_buf_pull(buf, sizeof(*hdr));
    252e:	f100 0508 	add.w	r5, r0, #8
    2532:	2102      	movs	r1, #2
    2534:	4628      	mov	r0, r5
    2536:	f006 fea2 	bl	927e <net_buf_simple_pull>
	switch (hdr->evt) {
    253a:	7833      	ldrb	r3, [r6, #0]
    253c:	2b0e      	cmp	r3, #14
    253e:	d005      	beq.n	254c <bt_recv_prio+0x44>
    2540:	2b0f      	cmp	r3, #15
    2542:	d017      	beq.n	2574 <bt_recv_prio+0x6c>
		net_buf_unref(buf);
    2544:	4620      	mov	r0, r4
    2546:	f006 fe59 	bl	91fc <net_buf_unref>
    254a:	e7e3      	b.n	2514 <bt_recv_prio+0xc>
	u8_t status, ncmd = evt->ncmd;
    254c:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    254e:	2103      	movs	r1, #3
    2550:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
    2552:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    2554:	f006 fe93 	bl	927e <net_buf_simple_pull>
	status = buf->data[0];
    2558:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    255a:	4621      	mov	r1, r4
    255c:	7818      	ldrb	r0, [r3, #0]
    255e:	f7ff fca5 	bl	1eac <hci_cmd_done.isra.9>
	if (ncmd) {
    2562:	b116      	cbz	r6, 256a <bt_recv_prio+0x62>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2564:	480a      	ldr	r0, [pc, #40]	; (2590 <bt_recv_prio+0x88>)
    2566:	f007 ff72 	bl	a44e <_impl_k_sem_give>
	net_buf_unref(buf);
    256a:	4620      	mov	r0, r4
    256c:	f006 fe46 	bl	91fc <net_buf_unref>
}
    2570:	2000      	movs	r0, #0
    2572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    2574:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    2576:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    2578:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    257a:	4628      	mov	r0, r5
    257c:	f006 fe7f 	bl	927e <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    2580:	4621      	mov	r1, r4
    2582:	7830      	ldrb	r0, [r6, #0]
    2584:	f7ff fc92 	bl	1eac <hci_cmd_done.isra.9>
	if (ncmd) {
    2588:	2f00      	cmp	r7, #0
    258a:	d0ee      	beq.n	256a <bt_recv_prio+0x62>
    258c:	e7ea      	b.n	2564 <bt_recv_prio+0x5c>
    258e:	bf00      	nop
    2590:	20002d98 	.word	0x20002d98

00002594 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    2594:	4a08      	ldr	r2, [pc, #32]	; (25b8 <bt_hci_driver_register+0x24>)
    2596:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
    259a:	b93b      	cbnz	r3, 25ac <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    259c:	68c1      	ldr	r1, [r0, #12]
    259e:	b141      	cbz	r1, 25b2 <bt_hci_driver_register+0x1e>
    25a0:	6901      	ldr	r1, [r0, #16]
    25a2:	b131      	cbz	r1, 25b2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    25a4:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
	return 0;
    25a8:	4618      	mov	r0, r3
    25aa:	4770      	bx	lr
		return -EALREADY;
    25ac:	f06f 0044 	mvn.w	r0, #68	; 0x44
    25b0:	4770      	bx	lr
		return -EINVAL;
    25b2:	f06f 0015 	mvn.w	r0, #21
}
    25b6:	4770      	bx	lr
    25b8:	20002d10 	.word	0x20002d10

000025bc <bt_buf_get_rx>:
	return bt_le_scan_update(false);
}
#endif /* CONFIG_BT_OBSERVER */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    25bc:	b538      	push	{r3, r4, r5, lr}
    25be:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    25c0:	4805      	ldr	r0, [pc, #20]	; (25d8 <bt_buf_get_rx+0x1c>)
    25c2:	f006 fe03 	bl	91cc <net_buf_alloc_fixed>
#endif

	if (buf) {
    25c6:	4604      	mov	r4, r0
    25c8:	b120      	cbz	r0, 25d4 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    25ca:	2100      	movs	r1, #0
    25cc:	3008      	adds	r0, #8
    25ce:	f006 fe03 	bl	91d8 <net_buf_simple_reserve>
    25d2:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    25d4:	4620      	mov	r0, r4
    25d6:	bd38      	pop	{r3, r4, r5, pc}
    25d8:	2000300c 	.word	0x2000300c

000025dc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    25dc:	b510      	push	{r4, lr}
    25de:	4601      	mov	r1, r0
    25e0:	f04f 0320 	mov.w	r3, #32
    25e4:	f3ef 8011 	mrs	r0, BASEPRI
    25e8:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    25ec:	4a0b      	ldr	r2, [pc, #44]	; (261c <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    25ee:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    25f0:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
	bt_dev.sent_cmd = NULL;
    25f4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    25f8:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    25fc:	b924      	cbnz	r4, 2608 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    25fe:	2001      	movs	r0, #1
}
    2600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    2604:	f7ff bfda 	b.w	25bc <bt_buf_get_rx>
    2608:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    260a:	f104 0008 	add.w	r0, r4, #8
    260e:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    2610:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2612:	4619      	mov	r1, r3
    2614:	f006 fde0 	bl	91d8 <net_buf_simple_reserve>
}
    2618:	4620      	mov	r0, r4
    261a:	bd10      	pop	{r4, pc}
    261c:	20002d10 	.word	0x20002d10

00002620 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    2620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    2622:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2624:	1dc3      	adds	r3, r0, #7
    2626:	f023 0303 	bic.w	r3, r3, #3
{
    262a:	460e      	mov	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    262c:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    262e:	3a01      	subs	r2, #1
    2630:	b294      	uxth	r4, r2
{
    2632:	4605      	mov	r5, r0
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2634:	2204      	movs	r2, #4
    2636:	2100      	movs	r1, #0
    2638:	fb06 0004 	mla	r0, r6, r4, r0
    263c:	f7ff fbfc 	bl	1e38 <memset>
	       sizeof(mem_pool));
	while (mem_count--) {
    2640:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2644:	3c01      	subs	r4, #1
    2646:	b2a4      	uxth	r4, r4
    2648:	42bc      	cmp	r4, r7
    264a:	d101      	bne.n	2650 <mem_init+0x30>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    264c:	b003      	add	sp, #12
    264e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    2650:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    2654:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    2656:	2204      	movs	r2, #4
    2658:	1b80      	subs	r0, r0, r6
    265a:	eb0d 0102 	add.w	r1, sp, r2
    265e:	4428      	add	r0, r5
		next = (u32_t)((u8_t *) mem_pool +
    2660:	9301      	str	r3, [sp, #4]
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    2662:	f7ff fbbc 	bl	1dde <memcpy>
    2666:	e7ed      	b.n	2644 <mem_init+0x24>

00002668 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    2668:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    266a:	6804      	ldr	r4, [r0, #0]
{
    266c:	4606      	mov	r6, r0
	if (*mem_head) {
    266e:	b18c      	cbz	r4, 2694 <mem_acquire+0x2c>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    2670:	1de3      	adds	r3, r4, #7
    2672:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    2676:	2204      	movs	r2, #4
    2678:	4621      	mov	r1, r4
    267a:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    267e:	881d      	ldrh	r5, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    2680:	f7ff fbad 	bl	1dde <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    2684:	9b01      	ldr	r3, [sp, #4]
    2686:	b123      	cbz	r3, 2692 <mem_acquire+0x2a>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    2688:	1dda      	adds	r2, r3, #7
    268a:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    268e:	3d01      	subs	r5, #1
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    2690:	8015      	strh	r5, [r2, #0]
				free_count;
		}

		*mem_head = head;
    2692:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    2694:	4620      	mov	r0, r4
    2696:	b002      	add	sp, #8
    2698:	bd70      	pop	{r4, r5, r6, pc}

0000269a <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    269a:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    269c:	680c      	ldr	r4, [r1, #0]
{
    269e:	4606      	mov	r6, r0
    26a0:	460d      	mov	r5, r1
	if (*mem_head) {
    26a2:	b11c      	cbz	r4, 26ac <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    26a4:	1de3      	adds	r3, r4, #7
    26a6:	f023 0303 	bic.w	r3, r3, #3
    26aa:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    26ac:	2204      	movs	r2, #4
    26ae:	4629      	mov	r1, r5
    26b0:	4630      	mov	r0, r6
    26b2:	f7ff fb94 	bl	1dde <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    26b6:	1df2      	adds	r2, r6, #7
    26b8:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    26bc:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    26be:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    26c0:	602e      	str	r6, [r5, #0]
}
    26c2:	bd70      	pop	{r4, r5, r6, pc}

000026c4 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    26c4:	fb02 0001 	mla	r0, r2, r1, r0
    26c8:	4770      	bx	lr

000026ca <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    26ca:	1a40      	subs	r0, r0, r1
    26cc:	b280      	uxth	r0, r0
}
    26ce:	fbb0 f0f2 	udiv	r0, r0, r2
    26d2:	4770      	bx	lr

000026d4 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    26d4:	b510      	push	{r4, lr}
	src += len;
    26d6:	4411      	add	r1, r2
    26d8:	3801      	subs	r0, #1
	while (len--) {
    26da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    26de:	3a01      	subs	r2, #1
    26e0:	b292      	uxth	r2, r2
    26e2:	429a      	cmp	r2, r3
    26e4:	d100      	bne.n	26e8 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    26e6:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    26e8:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    26ec:	f800 4f01 	strb.w	r4, [r0, #1]!
    26f0:	e7f5      	b.n	26de <mem_rcopy+0xa>

000026f2 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    26f2:	6010      	str	r0, [r2, #0]
    26f4:	6008      	str	r0, [r1, #0]

	return link;
}
    26f6:	4770      	bx	lr

000026f8 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    26f8:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    26fa:	6814      	ldr	r4, [r2, #0]
    26fc:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    26fe:	6814      	ldr	r4, [r2, #0]
    2700:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    2702:	6010      	str	r0, [r2, #0]

	return link;
}
    2704:	bd10      	pop	{r4, pc}

00002706 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    2706:	4288      	cmp	r0, r1
    2708:	d003      	beq.n	2712 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    270a:	b11a      	cbz	r2, 2714 <memq_peek+0xe>
		*mem = head->mem;
    270c:	6843      	ldr	r3, [r0, #4]
    270e:	6013      	str	r3, [r2, #0]
    2710:	4770      	bx	lr
		return NULL;
    2712:	2000      	movs	r0, #0
	}

	return head;
}
    2714:	4770      	bx	lr

00002716 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    2716:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    2718:	4283      	cmp	r3, r0
    271a:	d007      	beq.n	272c <memq_dequeue+0x16>
	if (mem) {
    271c:	b10a      	cbz	r2, 2722 <memq_dequeue+0xc>
		*mem = head->mem;
    271e:	6858      	ldr	r0, [r3, #4]
    2720:	6010      	str	r0, [r2, #0]
	if (!link) {
    2722:	b10b      	cbz	r3, 2728 <memq_dequeue+0x12>
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    2724:	681a      	ldr	r2, [r3, #0]
    2726:	600a      	str	r2, [r1, #0]

	return link;
}
    2728:	4618      	mov	r0, r3
    272a:	4770      	bx	lr
		return NULL;
    272c:	2300      	movs	r3, #0
    272e:	e7fb      	b.n	2728 <memq_dequeue+0x12>

00002730 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    2730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    2734:	4f11      	ldr	r7, [pc, #68]	; (277c <mayfly_init+0x4c>)
    2736:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2780 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    273a:	2604      	movs	r6, #4
	while (callee_id--) {
    273c:	3e01      	subs	r6, #1
    273e:	b2f6      	uxtb	r6, r6
    2740:	2eff      	cmp	r6, #255	; 0xff
    2742:	d019      	beq.n	2778 <mayfly_init+0x48>
    2744:	b233      	sxth	r3, r6
    2746:	ea4f 0883 	mov.w	r8, r3, lsl #2
    274a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    274e:	011d      	lsls	r5, r3, #4
		caller_id = MAYFLY_CALLER_COUNT;
    2750:	2404      	movs	r4, #4
    2752:	f04f 0a0c 	mov.w	sl, #12
    2756:	e00a      	b.n	276e <mayfly_init+0x3e>
    2758:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    275c:	1d0a      	adds	r2, r1, #4
    275e:	eb04 0008 	add.w	r0, r4, r8
    2762:	443a      	add	r2, r7
    2764:	4439      	add	r1, r7
    2766:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    276a:	f7ff ffc2 	bl	26f2 <memq_init>
		while (caller_id--) {
    276e:	3c01      	subs	r4, #1
    2770:	b2e4      	uxtb	r4, r4
    2772:	2cff      	cmp	r4, #255	; 0xff
    2774:	d1f0      	bne.n	2758 <mayfly_init+0x28>
    2776:	e7e1      	b.n	273c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    2778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    277c:	200004fc 	.word	0x200004fc
    2780:	2000047c 	.word	0x2000047c

00002784 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    2784:	b4f0      	push	{r4, r5, r6, r7}
    2786:	4b12      	ldr	r3, [pc, #72]	; (27d0 <mayfly_enable+0x4c>)
    2788:	4605      	mov	r5, r0
    278a:	460f      	mov	r7, r1
    278c:	260c      	movs	r6, #12
    278e:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    2790:	b172      	cbz	r2, 27b0 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    2792:	4361      	muls	r1, r4
    2794:	fb06 1400 	mla	r4, r6, r0, r1
    2798:	4423      	add	r3, r4
    279a:	7a59      	ldrb	r1, [r3, #9]
    279c:	7a18      	ldrb	r0, [r3, #8]
    279e:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    27a0:	bf04      	itt	eq
    27a2:	3101      	addeq	r1, #1
    27a4:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    27a6:	4628      	mov	r0, r5
    27a8:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    27aa:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    27ac:	f006 bbe6 	b.w	8f7c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    27b0:	434c      	muls	r4, r1
    27b2:	fb06 4400 	mla	r4, r6, r0, r4
    27b6:	4423      	add	r3, r4
    27b8:	7a9c      	ldrb	r4, [r3, #10]
    27ba:	7ada      	ldrb	r2, [r3, #11]
    27bc:	42a2      	cmp	r2, r4
    27be:	d104      	bne.n	27ca <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    27c0:	3201      	adds	r2, #1
    27c2:	729a      	strb	r2, [r3, #10]
}
    27c4:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    27c6:	f006 bc07 	b.w	8fd8 <mayfly_pend>
}
    27ca:	bcf0      	pop	{r4, r5, r6, r7}
    27cc:	4770      	bx	lr
    27ce:	bf00      	nop
    27d0:	200004fc 	.word	0x200004fc

000027d4 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    27d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27d6:	4605      	mov	r5, r0
    27d8:	460e      	mov	r6, r1
    27da:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    27dc:	b18a      	cbz	r2, 2802 <mayfly_enqueue+0x2e>
    27de:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    27e0:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    27e2:	7820      	ldrb	r0, [r4, #0]
    27e4:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    27e6:	f010 0703 	ands.w	r7, r0, #3
    27ea:	d029      	beq.n	2840 <mayfly_enqueue+0x6c>
		if (chain) {
    27ec:	b303      	cbz	r3, 2830 <mayfly_enqueue+0x5c>
			if (state != 1) {
    27ee:	2f01      	cmp	r7, #1
    27f0:	d039      	beq.n	2866 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    27f2:	3201      	adds	r2, #1
    27f4:	b2d2      	uxtb	r2, r2
    27f6:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    27f8:	4631      	mov	r1, r6
    27fa:	4628      	mov	r0, r5
    27fc:	f006 fbec 	bl	8fd8 <mayfly_pend>
    2800:	e01c      	b.n	283c <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    2802:	f006 fbd7 	bl	8fb4 <mayfly_prio_is_equal>
    2806:	2800      	cmp	r0, #0
    2808:	d0e9      	beq.n	27de <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    280a:	4631      	mov	r1, r6
    280c:	4628      	mov	r0, r5
    280e:	f006 fbc3 	bl	8f98 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    2812:	2800      	cmp	r0, #0
    2814:	d0e3      	beq.n	27de <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    2816:	2330      	movs	r3, #48	; 0x30
    2818:	220c      	movs	r2, #12
    281a:	4373      	muls	r3, r6
    281c:	fb02 3305 	mla	r3, r2, r5, r3
    2820:	4a12      	ldr	r2, [pc, #72]	; (286c <mayfly_enqueue+0x98>)
    2822:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    2824:	7a93      	ldrb	r3, [r2, #10]
    2826:	7ad2      	ldrb	r2, [r2, #11]
    2828:	1a9b      	subs	r3, r3, r2
    282a:	bf18      	it	ne
    282c:	2301      	movne	r3, #1
    282e:	e7d7      	b.n	27e0 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    2830:	3202      	adds	r2, #2
    2832:	b2d2      	uxtb	r2, r2
    2834:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    2836:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    283a:	4798      	blx	r3
		return 0;
    283c:	2000      	movs	r0, #0

	return 0;
}
    283e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    2840:	2b00      	cmp	r3, #0
    2842:	d0f8      	beq.n	2836 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    2844:	3201      	adds	r2, #1
    2846:	b2d2      	uxtb	r2, r2
    2848:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    284a:	2304      	movs	r3, #4
    284c:	2230      	movs	r2, #48	; 0x30
    284e:	fb12 3206 	smlabb	r2, r2, r6, r3
    2852:	230c      	movs	r3, #12
    2854:	fb13 2305 	smlabb	r3, r3, r5, r2
    2858:	4a04      	ldr	r2, [pc, #16]	; (286c <mayfly_enqueue+0x98>)
    285a:	6860      	ldr	r0, [r4, #4]
    285c:	441a      	add	r2, r3
    285e:	4621      	mov	r1, r4
    2860:	f7ff ff4a 	bl	26f8 <memq_enqueue>
    2864:	e7c8      	b.n	27f8 <mayfly_enqueue+0x24>
			return 1;
    2866:	4638      	mov	r0, r7
    2868:	e7e9      	b.n	283e <mayfly_enqueue+0x6a>
    286a:	bf00      	nop
    286c:	200004fc 	.word	0x200004fc

00002870 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    2870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2874:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2878:	b089      	sub	sp, #36	; 0x24
    287a:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    287c:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    2880:	4e43      	ldr	r6, [pc, #268]	; (2990 <mayfly_run+0x120>)
    2882:	9304      	str	r3, [sp, #16]
{
    2884:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    2886:	2404      	movs	r4, #4
	u8_t disable = 0;
    2888:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    288c:	3c01      	subs	r4, #1
    288e:	b2e4      	uxtb	r4, r4
    2890:	2cff      	cmp	r4, #255	; 0xff
    2892:	d10b      	bne.n	28ac <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    2894:	9b01      	ldr	r3, [sp, #4]
    2896:	2b00      	cmp	r3, #0
    2898:	d072      	beq.n	2980 <mayfly_run+0x110>
    289a:	f1b8 0f00 	cmp.w	r8, #0
    289e:	d16f      	bne.n	2980 <mayfly_run+0x110>
		mayfly_enable_cb(callee_id, callee_id, 0);
    28a0:	4642      	mov	r2, r8
    28a2:	4629      	mov	r1, r5
    28a4:	4628      	mov	r0, r5
    28a6:	f006 fb69 	bl	8f7c <mayfly_enable_cb>
    28aa:	e069      	b.n	2980 <mayfly_run+0x110>
		struct mayfly *m = 0;
    28ac:	f10d 0b20 	add.w	fp, sp, #32
    28b0:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    28b2:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    28b4:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    28b8:	f04f 0930 	mov.w	r9, #48	; 0x30
    28bc:	fb07 f304 	mul.w	r3, r7, r4
    28c0:	fb09 3005 	mla	r0, r9, r5, r3
    28c4:	1831      	adds	r1, r6, r0
    28c6:	465a      	mov	r2, fp
    28c8:	6849      	ldr	r1, [r1, #4]
    28ca:	5830      	ldr	r0, [r6, r0]
    28cc:	9302      	str	r3, [sp, #8]
    28ce:	f7ff ff1a 	bl	2706 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    28d2:	9b04      	ldr	r3, [sp, #16]
    28d4:	fb17 3704 	smlabb	r7, r7, r4, r3
    28d8:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    28da:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    28dc:	9303      	str	r3, [sp, #12]
		while (link) {
    28de:	f1ba 0f00 	cmp.w	sl, #0
    28e2:	d032      	beq.n	294a <mayfly_run+0xda>
			req = m->_req;
    28e4:	9b07      	ldr	r3, [sp, #28]
    28e6:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    28e8:	785a      	ldrb	r2, [r3, #1]
    28ea:	1abf      	subs	r7, r7, r2
    28ec:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    28f0:	2f01      	cmp	r7, #1
    28f2:	d104      	bne.n	28fe <mayfly_run+0x8e>
				m->_ack--;
    28f4:	3a01      	subs	r2, #1
    28f6:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    28f8:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    28fc:	4790      	blx	r2
			req = m->_req;
    28fe:	9a07      	ldr	r2, [sp, #28]
    2900:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    2902:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    2904:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    2906:	1a9a      	subs	r2, r3, r2
    2908:	f002 0203 	and.w	r2, r2, #3
    290c:	2a01      	cmp	r2, #1
    290e:	9305      	str	r3, [sp, #20]
    2910:	d00d      	beq.n	292e <mayfly_run+0xbe>
				memq_dequeue(mft[callee_id][caller_id].tail,
    2912:	9b02      	ldr	r3, [sp, #8]
    2914:	9903      	ldr	r1, [sp, #12]
    2916:	fb09 3005 	mla	r0, r9, r5, r3
    291a:	4430      	add	r0, r6
    291c:	2200      	movs	r2, #0
    291e:	6840      	ldr	r0, [r0, #4]
    2920:	f7ff fef9 	bl	2716 <memq_dequeue>
				m->_link = link;
    2924:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    2926:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    2928:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    292c:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    292e:	9b02      	ldr	r3, [sp, #8]
    2930:	fb09 3305 	mla	r3, r9, r5, r3
    2934:	18f1      	adds	r1, r6, r3
    2936:	465a      	mov	r2, fp
    2938:	6849      	ldr	r1, [r1, #4]
    293a:	58f0      	ldr	r0, [r6, r3]
    293c:	f7ff fee3 	bl	2706 <memq_peek>
			if (state == 1) {
    2940:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    2942:	4682      	mov	sl, r0
			if (state == 1) {
    2944:	d1cb      	bne.n	28de <mayfly_run+0x6e>
				if (caller_id || link) {
    2946:	b9bc      	cbnz	r4, 2978 <mayfly_run+0x108>
    2948:	b9b0      	cbnz	r0, 2978 <mayfly_run+0x108>
		if (mft[callee_id][caller_id].disable_req !=
    294a:	2230      	movs	r2, #48	; 0x30
    294c:	230c      	movs	r3, #12
    294e:	436a      	muls	r2, r5
    2950:	fb03 2204 	mla	r2, r3, r4, r2
    2954:	4432      	add	r2, r6
    2956:	7a91      	ldrb	r1, [r2, #10]
    2958:	7ad0      	ldrb	r0, [r2, #11]
    295a:	4288      	cmp	r0, r1
    295c:	d113      	bne.n	2986 <mayfly_run+0x116>
		if (mft[callee_id][caller_id].enable_req !=
    295e:	2230      	movs	r2, #48	; 0x30
    2960:	436a      	muls	r2, r5
    2962:	fb03 2304 	mla	r3, r3, r4, r2
    2966:	4433      	add	r3, r6
    2968:	7a1a      	ldrb	r2, [r3, #8]
    296a:	7a59      	ldrb	r1, [r3, #9]
    296c:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    296e:	bf1c      	itt	ne
    2970:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    2972:	f04f 0801 	movne.w	r8, #1
    2976:	e789      	b.n	288c <mayfly_run+0x1c>
					mayfly_pend(callee_id, callee_id);
    2978:	4629      	mov	r1, r5
    297a:	4628      	mov	r0, r5
    297c:	f006 fb2c 	bl	8fd8 <mayfly_pend>
	}
}
    2980:	b009      	add	sp, #36	; 0x24
    2982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
    2986:	72d1      	strb	r1, [r2, #11]
			disable = 1;
    2988:	2201      	movs	r2, #1
    298a:	9201      	str	r2, [sp, #4]
    298c:	e7e7      	b.n	295e <mayfly_run+0xee>
    298e:	bf00      	nop
    2990:	200004fc 	.word	0x200004fc

00002994 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    2994:	b510      	push	{r4, lr}
    2996:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    2998:	2000      	movs	r0, #0

	while (octets_len--) {
    299a:	3901      	subs	r1, #1
    299c:	b2c9      	uxtb	r1, r1
    299e:	29ff      	cmp	r1, #255	; 0xff
    29a0:	d100      	bne.n	29a4 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    29a2:	bd10      	pop	{r4, pc}
		bite = *octets;
    29a4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    29a8:	2b00      	cmp	r3, #0
    29aa:	d0f6      	beq.n	299a <util_ones_count_get+0x6>
			bite &= (bite - 1);
    29ac:	1e5c      	subs	r4, r3, #1
			one_count++;
    29ae:	3001      	adds	r0, #1
			bite &= (bite - 1);
    29b0:	4023      	ands	r3, r4
			one_count++;
    29b2:	b2c0      	uxtb	r0, r0
    29b4:	e7f8      	b.n	29a8 <util_ones_count_get+0x14>

000029b6 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    29b6:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    29b8:	7f42      	ldrb	r2, [r0, #29]
	node = &instance->node[0];
    29ba:	6804      	ldr	r4, [r0, #0]
{
    29bc:	4606      	mov	r6, r0
	previous = instance->ticker_id_head;
    29be:	4613      	mov	r3, r2
	current = previous;
	total = 0;
    29c0:	2000      	movs	r0, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    29c2:	2aff      	cmp	r2, #255	; 0xff
    29c4:	d101      	bne.n	29ca <ticker_dequeue+0x14>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    29c6:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    29c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    29ca:	eb02 0582 	add.w	r5, r2, r2, lsl #2
    29ce:	eb04 07c5 	add.w	r7, r4, r5, lsl #3
		if (current == id) {
    29d2:	428a      	cmp	r2, r1
    29d4:	f8d7 c008 	ldr.w	ip, [r7, #8]
    29d8:	f814 5035 	ldrb.w	r5, [r4, r5, lsl #3]
    29dc:	4460      	add	r0, ip
    29de:	d002      	beq.n	29e6 <ticker_dequeue+0x30>
    29e0:	4613      	mov	r3, r2
    29e2:	462a      	mov	r2, r5
    29e4:	e7ed      	b.n	29c2 <ticker_dequeue+0xc>
	if (previous == current) {
    29e6:	4293      	cmp	r3, r2
    29e8:	d100      	bne.n	29ec <ticker_dequeue+0x36>
		instance->ticker_id_head = ticker_current->next;
    29ea:	7775      	strb	r5, [r6, #29]
	node[previous].next = ticker_current->next;
    29ec:	b21b      	sxth	r3, r3
    29ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    29f2:	f804 5033 	strb.w	r5, [r4, r3, lsl #3]
	if (ticker_current->next != TICKER_NULL) {
    29f6:	783b      	ldrb	r3, [r7, #0]
    29f8:	2bff      	cmp	r3, #255	; 0xff
    29fa:	d0e5      	beq.n	29c8 <ticker_dequeue+0x12>
		node[ticker_current->next].ticks_to_expire += timeout;
    29fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2a00:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    2a04:	68a3      	ldr	r3, [r4, #8]
    2a06:	4463      	add	r3, ip
    2a08:	60a3      	str	r3, [r4, #8]
	return (total + timeout);
    2a0a:	e7dd      	b.n	29c8 <ticker_dequeue+0x12>

00002a0c <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    2a0c:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    2a0e:	1a55      	subs	r5, r2, r1
    2a10:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    2a14:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    2a16:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    2a18:	d109      	bne.n	2a2e <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2a1a:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    2a1e:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    2a20:	42a2      	cmp	r2, r4
    2a22:	d90e      	bls.n	2a42 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    2a24:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    2a26:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    2a28:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    2a2a:	6144      	str	r4, [r0, #20]
}
    2a2c:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2a2e:	1a8a      	subs	r2, r1, r2
    2a30:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    2a34:	4293      	cmp	r3, r2
    2a36:	d901      	bls.n	2a3c <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    2a38:	1a9a      	subs	r2, r3, r2
    2a3a:	e7f1      	b.n	2a20 <ticks_to_expire_prep+0x14>
    2a3c:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    2a3e:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    2a40:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    2a42:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    2a44:	2200      	movs	r2, #0
    2a46:	e7ef      	b.n	2a28 <ticks_to_expire_prep+0x1c>

00002a48 <ticker_job_op_cb>:
{
    2a48:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    2a4a:	2200      	movs	r2, #0
    2a4c:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    2a4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    2a50:	6259      	str	r1, [r3, #36]	; 0x24
{
    2a52:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    2a54:	b10a      	cbz	r2, 2a5a <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    2a56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    2a58:	4710      	bx	r2
}
    2a5a:	4770      	bx	lr

00002a5c <ticker_worker>:
{
    2a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    2a60:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    2a62:	2301      	movs	r3, #1
{
    2a64:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    2a66:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    2a68:	b91d      	cbnz	r5, 2a72 <ticker_worker+0x16>
	if (instance->ticker_id_head == TICKER_NULL) {
    2a6a:	7f43      	ldrb	r3, [r0, #29]
    2a6c:	2bff      	cmp	r3, #255	; 0xff
    2a6e:	d102      	bne.n	2a76 <ticker_worker+0x1a>
		instance->worker_trigger = 0;
    2a70:	77c5      	strb	r5, [r0, #31]
}
    2a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    2a76:	f005 fe21 	bl	86bc <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2a7a:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    2a7c:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    2a7e:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2a82:	1bc7      	subs	r7, r0, r7
    2a84:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    2a88:	2eff      	cmp	r6, #255	; 0xff
    2a8a:	d006      	beq.n	2a9a <ticker_worker+0x3e>
		ticker = &node[ticker_id_head];
    2a8c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    2a90:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    2a94:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    2a96:	429f      	cmp	r7, r3
    2a98:	d218      	bcs.n	2acc <ticker_worker+0x70>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    2a9a:	7aa2      	ldrb	r2, [r4, #10]
    2a9c:	7ae3      	ldrb	r3, [r4, #11]
    2a9e:	4293      	cmp	r3, r2
    2aa0:	d105      	bne.n	2aae <ticker_worker+0x52>
		last = instance->ticks_elapsed_last + 1;
    2aa2:	3301      	adds	r3, #1
    2aa4:	b2db      	uxtb	r3, r3
			last = 0;
    2aa6:	2b02      	cmp	r3, #2
    2aa8:	bf08      	it	eq
    2aaa:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    2aac:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2aae:	7ae3      	ldrb	r3, [r4, #11]
    2ab0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2ab4:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2ab6:	60dd      	str	r5, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2ab8:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    2aba:	2300      	movs	r3, #0
    2abc:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2abe:	46ac      	mov	ip, r5
    2ac0:	4623      	mov	r3, r4
    2ac2:	2104      	movs	r1, #4
    2ac4:	2003      	movs	r0, #3
}
    2ac6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2aca:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    2acc:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    2ace:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2ad0:	788a      	ldrb	r2, [r1, #2]
    2ad2:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    2ad4:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2ad8:	1a9b      	subs	r3, r3, r2
    2ada:	b2db      	uxtb	r3, r3
    2adc:	2b01      	cmp	r3, #1
    2ade:	d1d3      	bne.n	2a88 <ticker_worker+0x2c>
		if (ticker->timeout_func) {
    2ae0:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    2ae4:	3a01      	subs	r2, #1
    2ae6:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    2ae8:	f1b9 0f00 	cmp.w	r9, #0
    2aec:	d0cc      	beq.n	2a88 <ticker_worker+0x2c>
					   ticks_expired -
    2aee:	6948      	ldr	r0, [r1, #20]
    2af0:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    2af2:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    2af4:	1a28      	subs	r0, r5, r0
    2af6:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    2af8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2afc:	690b      	ldr	r3, [r1, #16]
    2afe:	6a49      	ldr	r1, [r1, #36]	; 0x24
    2b00:	47c8      	blx	r9
    2b02:	e7c1      	b.n	2a88 <ticker_worker+0x2c>

00002b04 <ticker_job>:
{
    2b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    2b08:	7fc2      	ldrb	r2, [r0, #31]
{
    2b0a:	b093      	sub	sp, #76	; 0x4c
    2b0c:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    2b0e:	2a00      	cmp	r2, #0
    2b10:	f040 83a8 	bne.w	3264 <ticker_job+0x760>
	ticks_previous = instance->ticks_current;
    2b14:	6943      	ldr	r3, [r0, #20]
    2b16:	9304      	str	r3, [sp, #16]
	instance->job_guard = 1;
    2b18:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    2b1a:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    2b1c:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    2b1e:	7ac0      	ldrb	r0, [r0, #11]
    2b20:	4298      	cmp	r0, r3
    2b22:	f000 808c 	beq.w	2c3e <ticker_job+0x13a>
		first = instance->ticks_elapsed_first + 1;
    2b26:	440b      	add	r3, r1
    2b28:	b2db      	uxtb	r3, r3
			first = 0;
    2b2a:	2b02      	cmp	r3, #2
    2b2c:	bf08      	it	eq
    2b2e:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    2b30:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    2b34:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    2b38:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    2b3a:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    2b3e:	9b04      	ldr	r3, [sp, #16]
    2b40:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    2b42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2b46:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    2b4a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    2b4e:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    2b50:	f8db 3000 	ldr.w	r3, [fp]
    2b54:	9305      	str	r3, [sp, #20]
	users = &instance->user[0];
    2b56:	f8db 3004 	ldr.w	r3, [fp, #4]
    2b5a:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
    2b5c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    2b60:	9302      	str	r3, [sp, #8]
	pending = 0;
    2b62:	2300      	movs	r3, #0
    2b64:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    2b66:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    2b6a:	9b02      	ldr	r3, [sp, #8]
    2b6c:	3b01      	subs	r3, #1
    2b6e:	b2db      	uxtb	r3, r3
    2b70:	2bff      	cmp	r3, #255	; 0xff
    2b72:	9302      	str	r3, [sp, #8]
    2b74:	d166      	bne.n	2c44 <ticker_job+0x140>
	if (instance->ticker_id_head != ticker_id_old_head) {
    2b76:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    2b7a:	9a03      	ldr	r2, [sp, #12]
    2b7c:	1a9b      	subs	r3, r3, r2
    2b7e:	bf18      	it	ne
    2b80:	2301      	movne	r3, #1
    2b82:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    2b84:	9b01      	ldr	r3, [sp, #4]
    2b86:	b1cb      	cbz	r3, 2bbc <ticker_job+0xb8>
    2b88:	f8db 9000 	ldr.w	r9, [fp]
	ticks_expired = 0;
    2b8c:	2700      	movs	r7, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    2b8e:	f89b 501d 	ldrb.w	r5, [fp, #29]
    2b92:	2dff      	cmp	r5, #255	; 0xff
    2b94:	d00b      	beq.n	2bae <ticker_job+0xaa>
		ticker = &node[id_expired];
    2b96:	b22e      	sxth	r6, r5
    2b98:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    2b9c:	eb09 04c6 	add.w	r4, r9, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    2ba0:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    2ba2:	4543      	cmp	r3, r8
    2ba4:	f240 8132 	bls.w	2e0c <ticker_job+0x308>
			ticker->ticks_to_expire -= ticks_elapsed;
    2ba8:	eba3 0308 	sub.w	r3, r3, r8
    2bac:	60a3      	str	r3, [r4, #8]
			flag_compare_update = 1;
    2bae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    2bb2:	9903      	ldr	r1, [sp, #12]
    2bb4:	42a9      	cmp	r1, r5
    2bb6:	bf18      	it	ne
    2bb8:	4613      	movne	r3, r2
    2bba:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    2bbc:	f8db 3000 	ldr.w	r3, [fp]
    2bc0:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    2bc2:	f8db 3004 	ldr.w	r3, [fp, #4]
    2bc6:	9310      	str	r3, [sp, #64]	; 0x40
	count_user = instance->count_user;
    2bc8:	f89b 3009 	ldrb.w	r3, [fp, #9]
    2bcc:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    2bce:	9b01      	ldr	r3, [sp, #4]
    2bd0:	3b01      	subs	r3, #1
    2bd2:	b2db      	uxtb	r3, r3
    2bd4:	2bff      	cmp	r3, #255	; 0xff
    2bd6:	9301      	str	r3, [sp, #4]
    2bd8:	f040 8168 	bne.w	2eac <ticker_job+0x3a8>
	if (instance->ticker_id_head != ticker_id_old_head) {
    2bdc:	f89b 301d 	ldrb.w	r3, [fp, #29]
    2be0:	9a03      	ldr	r2, [sp, #12]
    2be2:	4293      	cmp	r3, r2
	if (!pending) {
    2be4:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    2be6:	f040 8332 	bne.w	324e <ticker_job+0x74a>
	if (!pending) {
    2bea:	b94b      	cbnz	r3, 2c00 <ticker_job+0xfc>
	users = &instance->user[0];
    2bec:	f8db 3004 	ldr.w	r3, [fp, #4]
	count_user = instance->count_user;
    2bf0:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    2bf4:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    2bf6:	3c01      	subs	r4, #1
    2bf8:	b2e4      	uxtb	r4, r4
    2bfa:	2cff      	cmp	r4, #255	; 0xff
    2bfc:	f040 829c 	bne.w	3138 <ticker_job+0x634>
	instance->job_guard = 0;
    2c00:	2300      	movs	r3, #0
    2c02:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    2c06:	9b02      	ldr	r3, [sp, #8]
    2c08:	b14b      	cbz	r3, 2c1e <ticker_job+0x11a>
	if (instance->ticker_id_head == TICKER_NULL) {
    2c0a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    2c0e:	2bff      	cmp	r3, #255	; 0xff
    2c10:	f040 82e1 	bne.w	31d6 <ticker_job+0x6d2>
		if (cntr_stop() == 0) {
    2c14:	f005 fd3a 	bl	868c <cntr_stop>
    2c18:	b908      	cbnz	r0, 2c1e <ticker_job+0x11a>
			instance->ticks_slot_previous = 0;
    2c1a:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    2c1e:	f89b 301f 	ldrb.w	r3, [fp, #31]
    2c22:	2b00      	cmp	r3, #0
    2c24:	f000 831e 	beq.w	3264 <ticker_job+0x760>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    2c28:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    2c2c:	465b      	mov	r3, fp
    2c2e:	2201      	movs	r2, #1
    2c30:	2103      	movs	r1, #3
    2c32:	2004      	movs	r0, #4
    2c34:	46a4      	mov	ip, r4
}
    2c36:	b013      	add	sp, #76	; 0x4c
    2c38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    2c3c:	4760      	bx	ip
		flag_elapsed = 0;
    2c3e:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    2c40:	4690      	mov	r8, r2
    2c42:	e782      	b.n	2b4a <ticker_job+0x46>
		user = &users[count_user];
    2c44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2c46:	9a02      	ldr	r2, [sp, #8]
    2c48:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    2c4c:	687b      	ldr	r3, [r7, #4]
    2c4e:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    2c50:	78f9      	ldrb	r1, [r7, #3]
    2c52:	78be      	ldrb	r6, [r7, #2]
    2c54:	428e      	cmp	r6, r1
    2c56:	d088      	beq.n	2b6a <ticker_job+0x66>
			user_op = &user_ops[user->middle];
    2c58:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    2c5a:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    2c5c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    2c60:	0112      	lsls	r2, r2, #4
    2c62:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    2c64:	1c73      	adds	r3, r6, #1
    2c66:	b2db      	uxtb	r3, r3
				middle = 0;
    2c68:	4298      	cmp	r0, r3
    2c6a:	bf08      	it	eq
    2c6c:	2300      	moveq	r3, #0
			user->middle = middle;
    2c6e:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    2c70:	9b06      	ldr	r3, [sp, #24]
    2c72:	5c9a      	ldrb	r2, [r3, r2]
    2c74:	2a03      	cmp	r2, #3
    2c76:	d9ec      	bls.n	2c52 <ticker_job+0x14e>
			ticker = &node[user_op->id];
    2c78:	7869      	ldrb	r1, [r5, #1]
    2c7a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    2c7e:	930a      	str	r3, [sp, #40]	; 0x28
    2c80:	980a      	ldr	r0, [sp, #40]	; 0x28
    2c82:	9b05      	ldr	r3, [sp, #20]
    2c84:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    2c88:	2a05      	cmp	r2, #5
			state = (ticker->req - ticker->ack) & 0xff;
    2c8a:	7863      	ldrb	r3, [r4, #1]
    2c8c:	78a0      	ldrb	r0, [r4, #2]
    2c8e:	eba3 0300 	sub.w	r3, r3, r0
    2c92:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    2c94:	d80a      	bhi.n	2cac <ticker_job+0x1a8>
    2c96:	b14b      	cbz	r3, 2cac <ticker_job+0x1a8>
			    (state == 0) ||
    2c98:	2a04      	cmp	r2, #4
    2c9a:	d10c      	bne.n	2cb6 <ticker_job+0x1b2>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    2c9c:	686a      	ldr	r2, [r5, #4]
    2c9e:	b952      	cbnz	r2, 2cb6 <ticker_job+0x1b2>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    2ca0:	68aa      	ldr	r2, [r5, #8]
    2ca2:	b942      	cbnz	r2, 2cb6 <ticker_job+0x1b2>
			     (user_op->params.update.lazy == 0) &&
    2ca4:	68ea      	ldr	r2, [r5, #12]
    2ca6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    2caa:	d104      	bne.n	2cb6 <ticker_job+0x1b2>
				ticker_job_op_cb(user_op,
    2cac:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    2cae:	4628      	mov	r0, r5
    2cb0:	f7ff feca 	bl	2a48 <ticker_job_op_cb>
    2cb4:	e7cc      	b.n	2c50 <ticker_job+0x14c>
			if (state == 1) {
    2cb6:	2b01      	cmp	r3, #1
    2cb8:	f040 809d 	bne.w	2df6 <ticker_job+0x2f2>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2cbc:	4658      	mov	r0, fp
    2cbe:	f7ff fe7a 	bl	29b6 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2cc2:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2cc4:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2cc6:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2cc8:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2cca:	f040 8086 	bne.w	2dda <ticker_job+0x2d6>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    2cce:	f8db 3014 	ldr.w	r3, [fp, #20]
    2cd2:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    2cd4:	f005 fcf2 	bl	86bc <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2cd8:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    2cda:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2cdc:	1ac3      	subs	r3, r0, r3
    2cde:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    2ce2:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    2ce4:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2ce6:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    2ce8:	bf9e      	ittt	ls
    2cea:	6962      	ldrls	r2, [r4, #20]
    2cec:	1b92      	subls	r2, r2, r6
    2cee:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    2cf0:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    2cf2:	bf96      	itet	ls
    2cf4:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    2cf6:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    2cf8:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    2cfa:	2a00      	cmp	r2, #0
    2cfc:	d049      	beq.n	2d92 <ticker_job+0x28e>
	    (user_op->params.update.lazy != 0)) {
    2cfe:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    2d00:	2900      	cmp	r1, #0
    2d02:	d046      	beq.n	2d92 <ticker_job+0x28e>
		user_op->params.update.lazy--;
    2d04:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    2d08:	fa1f fc8c 	uxth.w	ip, ip
    2d0c:	f8a5 c00c 	strh.w	ip, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    2d10:	429a      	cmp	r2, r3
    2d12:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
    2d16:	d201      	bcs.n	2d1c <ticker_job+0x218>
    2d18:	45f4      	cmp	ip, lr
    2d1a:	d302      	bcc.n	2d22 <ticker_job+0x21e>
		ticker->remainder_current -= 30517578UL;
    2d1c:	f8df 9274 	ldr.w	r9, [pc, #628]	; 2f94 <ticker_job+0x490>
    2d20:	e031      	b.n	2d86 <ticker_job+0x282>
	if ((ticker->remainder_current >= BIT(31)) ||
    2d22:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2d24:	4e99      	ldr	r6, [pc, #612]	; (2f8c <ticker_job+0x488>)
    2d26:	489a      	ldr	r0, [pc, #616]	; (2f90 <ticker_job+0x48c>)
    2d28:	198e      	adds	r6, r1, r6
    2d2a:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    2d2c:	bf81      	itttt	hi
    2d2e:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    2d32:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    2d36:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    2d3a:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    2d3c:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
		decrement++;
    2d40:	bf8c      	ite	hi
    2d42:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    2d46:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    2d4a:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    2d4c:	4491      	add	r9, r2
			ticker->lazy_current--;
    2d4e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    2d52:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    2d54:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    2d58:	f8a4 e01e 	strh.w	lr, [r4, #30]
    2d5c:	e7d8      	b.n	2d10 <ticker_job+0x20c>
	ticker->remainder_current += ticker->remainder_periodic;
    2d5e:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
    2d62:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    2d64:	4989      	ldr	r1, [pc, #548]	; (2f8c <ticker_job+0x488>)
    2d66:	488a      	ldr	r0, [pc, #552]	; (2f90 <ticker_job+0x48c>)
    2d68:	1871      	adds	r1, r6, r1
    2d6a:	4281      	cmp	r1, r0
	return 0;
    2d6c:	bf8e      	itee	hi
    2d6e:	2100      	movhi	r1, #0
		return 1;
    2d70:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    2d72:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    2d74:	4411      	add	r1, r2
			ticker->lazy_current++;
    2d76:	f10e 0e01 	add.w	lr, lr, #1
	ticker->remainder_current += ticker->remainder_periodic;
    2d7a:	bf8c      	ite	hi
    2d7c:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    2d7e:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    2d80:	440b      	add	r3, r1
			ticker->lazy_current++;
    2d82:	f8a4 e01e 	strh.w	lr, [r4, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    2d86:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
    2d8a:	45f4      	cmp	ip, lr
    2d8c:	d8e7      	bhi.n	2d5e <ticker_job+0x25a>
		ticker->lazy_periodic = user_op->params.update.lazy;
    2d8e:	f8a4 c01c 	strh.w	ip, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    2d92:	88aa      	ldrh	r2, [r5, #4]
	ticker->ticks_to_expire = ticks_to_expire +
    2d94:	4413      	add	r3, r2
    2d96:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    2d98:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    2d9a:	6963      	ldr	r3, [r4, #20]
    2d9c:	4413      	add	r3, r2
    2d9e:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    2da0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
    2da4:	4620      	mov	r0, r4
    2da6:	f7ff fe31 	bl	2a0c <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    2daa:	69a2      	ldr	r2, [r4, #24]
    2dac:	892b      	ldrh	r3, [r5, #8]
    2dae:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    2db0:	896a      	ldrh	r2, [r5, #10]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    2db2:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    2db4:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    2db6:	bf8c      	ite	hi
    2db8:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    2dba:	2300      	movls	r3, #0
    2dbc:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    2dbe:	7bab      	ldrb	r3, [r5, #14]
    2dc0:	b103      	cbz	r3, 2dc4 <ticker_job+0x2c0>
		ticker->force = user_op->params.update.force;
    2dc2:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    2dc4:	9b05      	ldr	r3, [sp, #20]
    2dc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2dc8:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    2dcc:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    2dce:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    2dd2:	3301      	adds	r3, #1
    2dd4:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    2dd6:	2100      	movs	r1, #0
    2dd8:	e769      	b.n	2cae <ticker_job+0x1aa>
		ticker->req = ticker->ack;
    2dda:	78a3      	ldrb	r3, [r4, #2]
    2ddc:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    2dde:	786b      	ldrb	r3, [r5, #1]
    2de0:	f89b 201c 	ldrb.w	r2, [fp, #28]
    2de4:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    2de6:	bf01      	itttt	eq
    2de8:	23ff      	moveq	r3, #255	; 0xff
    2dea:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    2dee:	2300      	moveq	r3, #0
    2df0:	f8cb 3018 	streq.w	r3, [fp, #24]
    2df4:	e7ef      	b.n	2dd6 <ticker_job+0x2d2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    2df6:	2104      	movs	r1, #4
    2df8:	465b      	mov	r3, fp
    2dfa:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    2dfe:	2201      	movs	r2, #1
    2e00:	4608      	mov	r0, r1
    2e02:	47a0      	blx	r4
				pending = 1;
    2e04:	2301      	movs	r3, #1
				user->middle = prev;
    2e06:	70be      	strb	r6, [r7, #2]
				pending = 1;
    2e08:	9307      	str	r3, [sp, #28]
    2e0a:	e6ae      	b.n	2b6a <ticker_job+0x66>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    2e0c:	f8db 2018 	ldr.w	r2, [fp, #24]
    2e10:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    2e12:	eba8 0803 	sub.w	r8, r8, r3
		ticks_expired += ticks_to_expire;
    2e16:	441f      	add	r7, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    2e18:	bf29      	itett	cs
    2e1a:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    2e1c:	1ad3      	subcc	r3, r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    2e1e:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    2e22:	2300      	movcs	r3, #0
    2e24:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    2e28:	69a3      	ldr	r3, [r4, #24]
    2e2a:	b11b      	cbz	r3, 2e34 <ticker_job+0x330>
			instance->ticker_id_slot_previous = id_expired;
    2e2c:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    2e30:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    2e34:	2200      	movs	r2, #0
    2e36:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    2e38:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
    2e3c:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    2e40:	f8d4 c004 	ldr.w	ip, [r4, #4]
    2e44:	f1bc 0f00 	cmp.w	ip, #0
    2e48:	d02c      	beq.n	2ea4 <ticker_job+0x3a0>
    2e4a:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    2e4c:	f8df e140 	ldr.w	lr, [pc, #320]	; 2f90 <ticker_job+0x48c>
	ticker->remainder_current += ticker->remainder_periodic;
    2e50:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
    2e54:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    2e56:	494d      	ldr	r1, [pc, #308]	; (2f8c <ticker_job+0x488>)
    2e58:	1859      	adds	r1, r3, r1
    2e5a:	4571      	cmp	r1, lr
		ticker->remainder_current -= 30517578UL;
    2e5c:	bf9f      	itttt	ls
    2e5e:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    2e62:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    2e66:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    2e6a:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    2e6c:	bf92      	itee	ls
    2e6e:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    2e70:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    2e72:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    2e74:	4463      	add	r3, ip
			while (count--) {
    2e76:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    2e7a:	441a      	add	r2, r3
			while (count--) {
    2e7c:	d2e8      	bcs.n	2e50 <ticker_job+0x34c>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    2e7e:	9b04      	ldr	r3, [sp, #16]
			ticker->ticks_to_expire = ticks_to_expire;
    2e80:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    2e82:	f8db 1014 	ldr.w	r1, [fp, #20]
    2e86:	19da      	adds	r2, r3, r7
    2e88:	4620      	mov	r0, r4
    2e8a:	f7ff fdbf 	bl	2a0c <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    2e8e:	8ba3      	ldrh	r3, [r4, #28]
    2e90:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    2e92:	2300      	movs	r3, #0
    2e94:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    2e96:	f809 a036 	strb.w	sl, [r9, r6, lsl #3]
			ticker->req++;
    2e9a:	7863      	ldrb	r3, [r4, #1]
    2e9c:	3301      	adds	r3, #1
    2e9e:	7063      	strb	r3, [r4, #1]
			ticker->req = ticker->ack;
    2ea0:	46aa      	mov	sl, r5
    2ea2:	e674      	b.n	2b8e <ticker_job+0x8a>
    2ea4:	78a3      	ldrb	r3, [r4, #2]
    2ea6:	7063      	strb	r3, [r4, #1]
    2ea8:	4655      	mov	r5, sl
    2eaa:	e7f9      	b.n	2ea0 <ticker_job+0x39c>
		user = &users[count_user];
    2eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2eae:	9a01      	ldr	r2, [sp, #4]
    2eb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2eb4:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    2eb6:	685b      	ldr	r3, [r3, #4]
    2eb8:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    2eba:	9b04      	ldr	r3, [sp, #16]
    2ebc:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    2ec0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    2ec4:	d040      	beq.n	2f48 <ticker_job+0x444>
				ticker = &node[id_insert];
    2ec6:	fa0f f38a 	sxth.w	r3, sl
    2eca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2ece:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    2ed0:	46d0      	mov	r8, sl
    2ed2:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    2ed6:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    2eda:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    2edc:	f8db 3000 	ldr.w	r3, [fp]
    2ee0:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    2ee2:	23ff      	movs	r3, #255	; 0xff
    2ee4:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    2ee6:	8ba2      	ldrh	r2, [r4, #28]
    2ee8:	8be3      	ldrh	r3, [r4, #30]
    2eea:	4293      	cmp	r3, r2
    2eec:	f240 8080 	bls.w	2ff0 <ticker_job+0x4ec>
		skip = ticker->lazy_current -
    2ef0:	1a9b      	subs	r3, r3, r2
    2ef2:	b29b      	uxth	r3, r3
		skip = 0;
    2ef4:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    2ef6:	fa0f f388 	sxth.w	r3, r8
    2efa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2efe:	00db      	lsls	r3, r3, #3
    2f00:	9311      	str	r3, [sp, #68]	; 0x44
    2f02:	e0c8      	b.n	3096 <ticker_job+0x592>
				user_op = &user_ops[user_ops_first];
    2f04:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    2f08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f0a:	011b      	lsls	r3, r3, #4
    2f0c:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    2f0e:	f109 0201 	add.w	r2, r9, #1
    2f12:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    2f16:	9a04      	ldr	r2, [sp, #16]
    2f18:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    2f1a:	454a      	cmp	r2, r9
    2f1c:	bf08      	it	eq
    2f1e:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    2f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f24:	5cd3      	ldrb	r3, [r2, r3]
    2f26:	2b03      	cmp	r3, #3
    2f28:	d10e      	bne.n	2f48 <ticker_job+0x444>
				id_insert = user_op->id;
    2f2a:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    2f2e:	9b08      	ldr	r3, [sp, #32]
    2f30:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    2f34:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    2f38:	7862      	ldrb	r2, [r4, #1]
    2f3a:	78a3      	ldrb	r3, [r4, #2]
    2f3c:	429a      	cmp	r2, r3
    2f3e:	d008      	beq.n	2f52 <ticker_job+0x44e>
					ticker_job_op_cb(user_op,
    2f40:	2101      	movs	r1, #1
    2f42:	4628      	mov	r0, r5
    2f44:	f7ff fd80 	bl	2a48 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    2f48:	9b04      	ldr	r3, [sp, #16]
    2f4a:	789b      	ldrb	r3, [r3, #2]
    2f4c:	454b      	cmp	r3, r9
    2f4e:	d1d9      	bne.n	2f04 <ticker_job+0x400>
    2f50:	e63d      	b.n	2bce <ticker_job+0xca>
	ticker->ticks_periodic = start->ticks_periodic;
    2f52:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    2f54:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    2f58:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    2f5a:	692b      	ldr	r3, [r5, #16]
    2f5c:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    2f5e:	8aab      	ldrh	r3, [r5, #20]
    2f60:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    2f62:	69ab      	ldr	r3, [r5, #24]
    2f64:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    2f66:	69eb      	ldr	r3, [r5, #28]
    2f68:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    2f6a:	6a2b      	ldr	r3, [r5, #32]
    2f6c:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    2f6e:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    2f70:	68ab      	ldr	r3, [r5, #8]
    2f72:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    2f74:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    2f76:	686a      	ldr	r2, [r5, #4]
    2f78:	4620      	mov	r0, r4
    2f7a:	f7ff fd47 	bl	2a0c <ticks_to_expire_prep>
	ticker->force = 1;
    2f7e:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    2f80:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    2f82:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    2f84:	70e3      	strb	r3, [r4, #3]
    2f86:	f04f 0aff 	mov.w	sl, #255	; 0xff
    2f8a:	e7a7      	b.n	2edc <ticker_job+0x3d8>
    2f8c:	ff172b5a 	.word	0xff172b5a
    2f90:	7f172b59 	.word	0x7f172b59
    2f94:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    2f98:	6860      	ldr	r0, [r4, #4]
    2f9a:	2800      	cmp	r0, #0
    2f9c:	f000 80c7 	beq.w	312e <ticker_job+0x62a>
	ticker->remainder_current += ticker->remainder_periodic;
    2fa0:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    2fa4:	4bb1      	ldr	r3, [pc, #708]	; (326c <ticker_job+0x768>)
	ticker->remainder_current += ticker->remainder_periodic;
    2fa6:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    2fa8:	49b1      	ldr	r1, [pc, #708]	; (3270 <ticker_job+0x76c>)
    2faa:	18d3      	adds	r3, r2, r3
    2fac:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    2fae:	bf9c      	itt	ls
    2fb0:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    2fb4:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    2fb8:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    2fba:	bf8b      	itete	hi
    2fbc:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    2fbe:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    2fc2:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    2fc4:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    2fc6:	4403      	add	r3, r0
		return 1;
    2fc8:	bf98      	it	ls
    2fca:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    2fcc:	4413      	add	r3, r2
			ticker->lazy_current++;
    2fce:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    2fd0:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    2fd2:	3201      	adds	r2, #1
    2fd4:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    2fd6:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    2fd8:	4293      	cmp	r3, r2
    2fda:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    2fde:	bf89      	itett	hi
    2fe0:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    2fe2:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    2fe4:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    2fe6:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    2fe8:	bf9c      	itt	ls
    2fea:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    2fec:	60a1      	strls	r1, [r4, #8]
    2fee:	e052      	b.n	3096 <ticker_job+0x592>
		skip = 0;
    2ff0:	2300      	movs	r3, #0
    2ff2:	e77f      	b.n	2ef4 <ticker_job+0x3f0>
		if (ticker_current->ticks_slot != 0) {
    2ff4:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    2ff6:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    2ff8:	b946      	cbnz	r6, 300c <ticker_job+0x508>
			if (ticks_slot_previous > ticks_to_expire_current) {
    2ffa:	9f05      	ldr	r7, [sp, #20]
    2ffc:	42b8      	cmp	r0, r7
    2ffe:	d200      	bcs.n	3002 <ticker_job+0x4fe>
				ticks_slot_previous -= ticks_to_expire_current;
    3000:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    3002:	9309      	str	r3, [sp, #36]	; 0x24
    3004:	9605      	str	r6, [sp, #20]
    3006:	f812 303e 	ldrb.w	r3, [r2, lr, lsl #3]
    300a:	e053      	b.n	30b4 <ticker_job+0x5b0>
		if (ticker_current->ticks_slot != 0) {
    300c:	9306      	str	r3, [sp, #24]
    300e:	e7f8      	b.n	3002 <ticker_job+0x4fe>
		ticker = &node[ticker_id_head];
    3010:	b230      	sxth	r0, r6
    3012:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3016:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    301a:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    301c:	68bf      	ldr	r7, [r7, #8]
    301e:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    3020:	4577      	cmp	r7, lr
    3022:	d209      	bcs.n	3038 <ticker_job+0x534>
		if (ticker->ticks_slot) {
    3024:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    3026:	69bf      	ldr	r7, [r7, #24]
    3028:	2f00      	cmp	r7, #0
    302a:	d154      	bne.n	30d6 <ticker_job+0x5d2>
		ticks_slot -= ticks_to_expire;
    302c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    302e:	ebae 0e06 	sub.w	lr, lr, r6
		ticker_id_head = ticker->next;
    3032:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    3036:	e04c      	b.n	30d2 <ticker_job+0x5ce>
			return TICKER_NULL;
    3038:	26ff      	movs	r6, #255	; 0xff
    303a:	e04c      	b.n	30d6 <ticker_job+0x5d2>
	while (id_insert !=
    303c:	9b06      	ldr	r3, [sp, #24]
    303e:	4598      	cmp	r8, r3
    3040:	d06a      	beq.n	3118 <ticker_job+0x614>
		if (id_collide != TICKER_NULL) {
    3042:	9b06      	ldr	r3, [sp, #24]
    3044:	2bff      	cmp	r3, #255	; 0xff
    3046:	d0a7      	beq.n	2f98 <ticker_job+0x494>
    3048:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    304a:	b233      	sxth	r3, r6
    304c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3050:	9305      	str	r3, [sp, #20]
    3052:	9a05      	ldr	r2, [sp, #20]
    3054:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3056:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    305a:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    305c:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    305e:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    3060:	bf88      	it	hi
    3062:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    3064:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    3066:	bf8c      	ite	hi
    3068:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    306a:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    306c:	2a00      	cmp	r2, #0
    306e:	d093      	beq.n	2f98 <ticker_job+0x494>
    3070:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3072:	4293      	cmp	r3, r2
    3074:	d890      	bhi.n	2f98 <ticker_job+0x494>
			    skip_collide <= skip &&
    3076:	78fa      	ldrb	r2, [r7, #3]
    3078:	78e3      	ldrb	r3, [r4, #3]
    307a:	429a      	cmp	r2, r3
    307c:	d28c      	bcs.n	2f98 <ticker_job+0x494>
					ticker_dequeue(instance, id_collide);
    307e:	4631      	mov	r1, r6
    3080:	4658      	mov	r0, fp
    3082:	f7ff fc98 	bl	29b6 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    3086:	78bb      	ldrb	r3, [r7, #2]
    3088:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    308a:	9a05      	ldr	r2, [sp, #20]
    308c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    308e:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    3090:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    3094:	46b2      	mov	sl, r6
	ticker_new = &node[id];
    3096:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    3098:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    309c:	f8db 0018 	ldr.w	r0, [fp, #24]
    30a0:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    30a2:	eb02 0c03 	add.w	ip, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    30a6:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    30a8:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    30ac:	f8dc 1008 	ldr.w	r1, [ip, #8]
	previous = current;
    30b0:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    30b2:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    30b4:	2bff      	cmp	r3, #255	; 0xff
    30b6:	d006      	beq.n	30c6 <ticker_job+0x5c2>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    30b8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    30bc:	eb02 06ce 	add.w	r6, r2, lr, lsl #3
		(ticks_to_expire_current =
    30c0:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    30c2:	4281      	cmp	r1, r0
    30c4:	d896      	bhi.n	2ff4 <ticker_job+0x4f0>
				     ticks_to_expire + ticker_new->ticks_slot);
    30c6:	f8dc 0018 	ldr.w	r0, [ip, #24]
    30ca:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    30cc:	eb01 0e00 	add.w	lr, r1, r0
    30d0:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    30d2:	2eff      	cmp	r6, #255	; 0xff
    30d4:	d19c      	bne.n	3010 <ticker_job+0x50c>
	if ((ticker_new->ticks_slot == 0) ||
    30d6:	980d      	ldr	r0, [sp, #52]	; 0x34
    30d8:	b128      	cbz	r0, 30e6 <ticker_job+0x5e2>
    30da:	9805      	ldr	r0, [sp, #20]
    30dc:	4281      	cmp	r1, r0
    30de:	d3ad      	bcc.n	303c <ticker_job+0x538>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    30e0:	2eff      	cmp	r6, #255	; 0xff
    30e2:	f040 80bb 	bne.w	325c <ticker_job+0x758>
		if (previous == current) {
    30e6:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    30e8:	f8cc 1008 	str.w	r1, [ip, #8]
		if (previous == current) {
    30ec:	4283      	cmp	r3, r0
			node[previous].next = id;
    30ee:	bf18      	it	ne
    30f0:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    30f4:	f88c 3000 	strb.w	r3, [ip]
			node[previous].next = id;
    30f8:	bf16      	itet	ne
    30fa:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    30fe:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    3102:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    3106:	2bff      	cmp	r3, #255	; 0xff
    3108:	d006      	beq.n	3118 <ticker_job+0x614>
			node[current].ticks_to_expire -= ticks_to_expire;
    310a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    310e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3112:	689a      	ldr	r2, [r3, #8]
    3114:	1a51      	subs	r1, r2, r1
    3116:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    3118:	78a3      	ldrb	r3, [r4, #2]
    311a:	3301      	adds	r3, #1
    311c:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    311e:	2100      	movs	r1, #0
			if (user_op) {
    3120:	2d00      	cmp	r5, #0
    3122:	f43f aecd 	beq.w	2ec0 <ticker_job+0x3bc>
				ticker_job_op_cb(user_op, status);
    3126:	4628      	mov	r0, r5
    3128:	f7ff fc8e 	bl	2a48 <ticker_job_op_cb>
    312c:	e6c8      	b.n	2ec0 <ticker_job+0x3bc>
			return TICKER_STATUS_FAILURE;
    312e:	2101      	movs	r1, #1
    3130:	e7f6      	b.n	3120 <ticker_job+0x61c>
		flag_compare_update = 1;
    3132:	2301      	movs	r3, #1
    3134:	9302      	str	r3, [sp, #8]
    3136:	e559      	b.n	2bec <ticker_job+0xe8>
		user = &users[count_user];
    3138:	9b01      	ldr	r3, [sp, #4]
    313a:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    313e:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    3140:	786b      	ldrb	r3, [r5, #1]
    3142:	78ea      	ldrb	r2, [r5, #3]
    3144:	429a      	cmp	r2, r3
    3146:	f43f ad56 	beq.w	2bf6 <ticker_job+0xf2>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    314a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    314e:	011a      	lsls	r2, r3, #4
    3150:	18b3      	adds	r3, r6, r2
	switch (uop->op) {
    3152:	5cb2      	ldrb	r2, [r6, r2]
    3154:	2a01      	cmp	r2, #1
    3156:	d024      	beq.n	31a2 <ticker_job+0x69e>
    3158:	2a02      	cmp	r2, #2
    315a:	d129      	bne.n	31b0 <ticker_job+0x6ac>
		ticker_by_next_slot_get(instance,
    315c:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
    3160:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
    3164:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->node;
    3168:	f8db c000 	ldr.w	ip, [fp]
    316c:	f8db 1014 	ldr.w	r1, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    3170:	2aff      	cmp	r2, #255	; 0xff
    3172:	d002      	beq.n	317a <ticker_job+0x676>
    3174:	6807      	ldr	r7, [r0, #0]
    3176:	42b9      	cmp	r1, r7
    3178:	d023      	beq.n	31c2 <ticker_job+0x6be>
		_ticker_id_head = instance->ticker_id_head;
    317a:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
    317e:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0;
    3180:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    3182:	2aff      	cmp	r2, #255	; 0xff
    3184:	d009      	beq.n	319a <ticker_job+0x696>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    3186:	eb02 0882 	add.w	r8, r2, r2, lsl #2
    318a:	eb0c 0ac8 	add.w	sl, ip, r8, lsl #3
    318e:	f8da 0008 	ldr.w	r0, [sl, #8]
    3192:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
    3194:	f8da 0018 	ldr.w	r0, [sl, #24]
    3198:	b1d0      	cbz	r0, 31d0 <ticker_job+0x6cc>
	*ticker_id_head = _ticker_id_head;
    319a:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
    319e:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
    31a2:	2200      	movs	r2, #0
    31a4:	625a      	str	r2, [r3, #36]	; 0x24
		fp_op_func = uop->fp_op_func;
    31a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (fp_op_func) {
    31a8:	b112      	cbz	r2, 31b0 <ticker_job+0x6ac>
		fp_op_func(uop->status, uop->op_context);
    31aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    31ac:	2000      	movs	r0, #0
    31ae:	4790      	blx	r2
			first = user->first + 1;
    31b0:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    31b2:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    31b4:	3301      	adds	r3, #1
    31b6:	b2db      	uxtb	r3, r3
				first = 0;
    31b8:	429a      	cmp	r2, r3
    31ba:	bf08      	it	eq
    31bc:	2300      	moveq	r3, #0
			user->first = first;
    31be:	706b      	strb	r3, [r5, #1]
    31c0:	e7be      	b.n	3140 <ticker_job+0x63c>
		ticker = &node[_ticker_id_head];
    31c2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    31c6:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
    31ca:	f81c 2032 	ldrb.w	r2, [ip, r2, lsl #3]
    31ce:	e7d8      	b.n	3182 <ticker_job+0x67e>
		_ticker_id_head = ticker->next;
    31d0:	f81c 2038 	ldrb.w	r2, [ip, r8, lsl #3]
    31d4:	e7d5      	b.n	3182 <ticker_job+0x67e>
	if (ticker_id_old_head == TICKER_NULL) {
    31d6:	9b03      	ldr	r3, [sp, #12]
    31d8:	2bff      	cmp	r3, #255	; 0xff
    31da:	d107      	bne.n	31ec <ticker_job+0x6e8>
		ticks_current = cntr_cnt_get();
    31dc:	f005 fa6e 	bl	86bc <cntr_cnt_get>
    31e0:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    31e2:	f005 fa45 	bl	8670 <cntr_start>
    31e6:	b908      	cbnz	r0, 31ec <ticker_job+0x6e8>
			instance->ticks_current = ticks_current;
    31e8:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    31ec:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    31f0:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    31f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    31f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    31fc:	260a      	movs	r6, #10
    31fe:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    3200:	f005 fa5c 	bl	86bc <cntr_cnt_get>
		cc = instance->ticks_current;
    3204:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3208:	1b03      	subs	r3, r0, r4
    320a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    320e:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    3210:	42ab      	cmp	r3, r5
    3212:	bf2c      	ite	cs
    3214:	18e4      	addcs	r4, r4, r3
    3216:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    3218:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    321c:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    321e:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    3222:	4620      	mov	r0, r4
    3224:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    3226:	f005 fa49 	bl	86bc <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    322a:	1bc0      	subs	r0, r0, r7
    322c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3230:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    3232:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3234:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    3238:	42a0      	cmp	r0, r4
    323a:	f67f acf0 	bls.w	2c1e <ticker_job+0x11a>
		LL_ASSERT(i);
    323e:	3e01      	subs	r6, #1
    3240:	d1de      	bne.n	3200 <ticker_job+0x6fc>
    3242:	4040      	eors	r0, r0
    3244:	f380 8811 	msr	BASEPRI, r0
    3248:	f04f 0004 	mov.w	r0, #4
    324c:	df02      	svc	2
	if (!pending) {
    324e:	2b00      	cmp	r3, #0
    3250:	f43f af6f 	beq.w	3132 <ticker_job+0x62e>
	instance->job_guard = 0;
    3254:	2300      	movs	r3, #0
    3256:	f88b 301e 	strb.w	r3, [fp, #30]
    325a:	e4d6      	b.n	2c0a <ticker_job+0x106>
	while (id_insert !=
    325c:	45b0      	cmp	r8, r6
    325e:	f47f aef4 	bne.w	304a <ticker_job+0x546>
    3262:	e759      	b.n	3118 <ticker_job+0x614>
}
    3264:	b013      	add	sp, #76	; 0x4c
    3266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    326a:	bf00      	nop
    326c:	ff172b5a 	.word	0xff172b5a
    3270:	7f172b59 	.word	0x7f172b59

00003274 <ticker_init>:
{
    3274:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    3276:	4e1c      	ldr	r6, [pc, #112]	; (32e8 <ticker_init+0x74>)
{
    3278:	9f05      	ldr	r7, [sp, #20]
    327a:	f89d 4018 	ldrb.w	r4, [sp, #24]
    327e:	f8dd c01c 	ldr.w	ip, [sp, #28]
	instance->count_node = count_node;
    3282:	252c      	movs	r5, #44	; 0x2c
    3284:	4345      	muls	r5, r0
    3286:	eb06 0e05 	add.w	lr, r6, r5
	instance->node = node;
    328a:	5172      	str	r2, [r6, r5]
	instance->count_node = count_node;
    328c:	f88e 1008 	strb.w	r1, [lr, #8]
	instance->count_user = count_user;
    3290:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    3294:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    3298:	3b01      	subs	r3, #1
    329a:	b2db      	uxtb	r3, r3
    329c:	2bff      	cmp	r3, #255	; 0xff
    329e:	d113      	bne.n	32c8 <ticker_init+0x54>
	if (count_op) {
    32a0:	bb04      	cbnz	r4, 32e4 <ticker_init+0x70>
	instance->caller_id_get_cb = caller_id_get_cb;
    32a2:	232c      	movs	r3, #44	; 0x2c
    32a4:	4358      	muls	r0, r3
    32a6:	1833      	adds	r3, r6, r0
    32a8:	9a08      	ldr	r2, [sp, #32]
    32aa:	621a      	str	r2, [r3, #32]
	instance->sched_cb = sched_cb;
    32ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    32ae:	625a      	str	r2, [r3, #36]	; 0x24
    32b0:	3018      	adds	r0, #24
	instance->trigger_set_cb = trigger_set_cb;
    32b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    32b4:	629a      	str	r2, [r3, #40]	; 0x28
    32b6:	1832      	adds	r2, r6, r0
	instance->ticks_slot_previous = 0;
    32b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    32bc:	5034      	str	r4, [r6, r0]
    32be:	8091      	strh	r1, [r2, #4]
	return TICKER_STATUS_SUCCESS;
    32c0:	4620      	mov	r0, r4
	instance->ticks_current = 0;
    32c2:	615c      	str	r4, [r3, #20]
	instance->ticks_elapsed_first = 0;
    32c4:	815c      	strh	r4, [r3, #10]
}
    32c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    32c8:	b21a      	sxth	r2, r3
    32ca:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
    32ce:	f8c1 c004 	str.w	ip, [r1, #4]
		user_op_ += users[count_user].count_user_op;
    32d2:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    32d6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    32da:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    32dc:	eb0c 1c01 	add.w	ip, ip, r1, lsl #4
		count_op -= users[count_user].count_user_op;
    32e0:	b2e4      	uxtb	r4, r4
    32e2:	e7d9      	b.n	3298 <ticker_init+0x24>
		return TICKER_STATUS_FAILURE;
    32e4:	2001      	movs	r0, #1
    32e6:	e7ee      	b.n	32c6 <ticker_init+0x52>
    32e8:	200005bc 	.word	0x200005bc

000032ec <ticker_trigger>:
	instance = &_instance[instance_index];
    32ec:	4a07      	ldr	r2, [pc, #28]	; (330c <ticker_trigger+0x20>)
    32ee:	212c      	movs	r1, #44	; 0x2c
    32f0:	fb00 2301 	mla	r3, r0, r1, r2
{
    32f4:	b410      	push	{r4}
	if (instance->sched_cb) {
    32f6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    32f8:	b12c      	cbz	r4, 3306 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    32fa:	46a4      	mov	ip, r4
    32fc:	2201      	movs	r2, #1
    32fe:	2103      	movs	r1, #3
    3300:	2002      	movs	r0, #2
}
    3302:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    3304:	4760      	bx	ip
}
    3306:	bc10      	pop	{r4}
    3308:	4770      	bx	lr
    330a:	bf00      	nop
    330c:	200005bc 	.word	0x200005bc

00003310 <ticker_start>:
{
    3310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    3314:	4c22      	ldr	r4, [pc, #136]	; (33a0 <ticker_start+0x90>)
    3316:	272c      	movs	r7, #44	; 0x2c
    3318:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->user[user_id];
    331c:	b20d      	sxth	r5, r1
    331e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    3322:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    3326:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    332a:	f89c 4003 	ldrb.w	r4, [ip, #3]
    332e:	1c66      	adds	r6, r4, #1
    3330:	b2f6      	uxtb	r6, r6
		last = 0;
    3332:	42b0      	cmp	r0, r6
    3334:	bf98      	it	ls
    3336:	2600      	movls	r6, #0
	if (last == user->first) {
    3338:	f89c 0001 	ldrb.w	r0, [ip, #1]
    333c:	42b0      	cmp	r0, r6
    333e:	d02d      	beq.n	339c <ticker_start+0x8c>
	user_op = &user->user_op[user->last];
    3340:	f8dc 0004 	ldr.w	r0, [ip, #4]
    3344:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3348:	0125      	lsls	r5, r4, #4
    334a:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_START;
    334c:	f04f 0e03 	mov.w	lr, #3
    3350:	f800 e005 	strb.w	lr, [r0, r5]
	user_op->params.start.ticks_at_start = ticks_anchor;
    3354:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    3356:	9b06      	ldr	r3, [sp, #24]
    3358:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    335a:	9b07      	ldr	r3, [sp, #28]
    335c:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    335e:	9b08      	ldr	r3, [sp, #32]
    3360:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    3362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3364:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    3366:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    336a:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    336c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    336e:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    3370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3372:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    3374:	2302      	movs	r3, #2
    3376:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    337a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    337c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    337e:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    3380:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3382:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3386:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
    338a:	4608      	mov	r0, r1
    338c:	4798      	blx	r3
    338e:	4643      	mov	r3, r8
    3390:	2200      	movs	r2, #0
    3392:	2104      	movs	r1, #4
    3394:	47a8      	blx	r5
	return user_op->status;
    3396:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    3398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    339c:	2001      	movs	r0, #1
    339e:	e7fb      	b.n	3398 <ticker_start+0x88>
    33a0:	200005bc 	.word	0x200005bc

000033a4 <ticker_update>:
{
    33a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    33a8:	4c22      	ldr	r4, [pc, #136]	; (3434 <ticker_update+0x90>)
    33aa:	272c      	movs	r7, #44	; 0x2c
    33ac:	fb00 4907 	mla	r9, r0, r7, r4
	user = &instance->user[user_id];
    33b0:	b20d      	sxth	r5, r1
    33b2:	f8d9 0004 	ldr.w	r0, [r9, #4]
    33b6:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    33ba:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    33be:	f89c 4003 	ldrb.w	r4, [ip, #3]
    33c2:	1c66      	adds	r6, r4, #1
    33c4:	b2f6      	uxtb	r6, r6
		last = 0;
    33c6:	42b0      	cmp	r0, r6
    33c8:	bf98      	it	ls
    33ca:	2600      	movls	r6, #0
	if (last == user->first) {
    33cc:	f89c 0001 	ldrb.w	r0, [ip, #1]
    33d0:	42b0      	cmp	r0, r6
    33d2:	d02d      	beq.n	3430 <ticker_update+0x8c>
	user_op = &user->user_op[user->last];
    33d4:	f8dc 0004 	ldr.w	r0, [ip, #4]
    33d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    33dc:	0125      	lsls	r5, r4, #4
    33de:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    33e0:	f04f 0804 	mov.w	r8, #4
    33e4:	f800 8005 	strb.w	r8, [r0, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    33e8:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    33ea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    33ee:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    33f0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    33f4:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    33f6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    33fa:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    33fc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    3400:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    3402:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3406:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    3408:	2302      	movs	r3, #2
    340a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    340c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    340e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    3410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    3412:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    3414:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3416:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    341a:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
    341e:	4608      	mov	r0, r1
    3420:	4798      	blx	r3
    3422:	464b      	mov	r3, r9
    3424:	2200      	movs	r2, #0
    3426:	4641      	mov	r1, r8
    3428:	47a8      	blx	r5
	return user_op->status;
    342a:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    342c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    3430:	2001      	movs	r0, #1
    3432:	e7fb      	b.n	342c <ticker_update+0x88>
    3434:	200005bc 	.word	0x200005bc

00003438 <ticker_stop>:
{
    3438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    343c:	4c1a      	ldr	r4, [pc, #104]	; (34a8 <ticker_stop+0x70>)
    343e:	262c      	movs	r6, #44	; 0x2c
    3440:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->user[user_id];
    3444:	b20f      	sxth	r7, r1
    3446:	f8d8 0004 	ldr.w	r0, [r8, #4]
    344a:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
    344e:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
    3452:	f89c 4003 	ldrb.w	r4, [ip, #3]
    3456:	1c65      	adds	r5, r4, #1
    3458:	b2ed      	uxtb	r5, r5
		last = 0;
    345a:	42a8      	cmp	r0, r5
    345c:	bf98      	it	ls
    345e:	2500      	movls	r5, #0
	if (last == user->first) {
    3460:	f89c 0001 	ldrb.w	r0, [ip, #1]
    3464:	42a8      	cmp	r0, r5
    3466:	d01c      	beq.n	34a2 <ticker_stop+0x6a>
	user_op = &user->user_op[user->last];
    3468:	f8dc 0004 	ldr.w	r0, [ip, #4]
    346c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3470:	0124      	lsls	r4, r4, #4
    3472:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    3474:	f04f 0e05 	mov.w	lr, #5
    3478:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = ticker_id;
    347c:	707a      	strb	r2, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
    347e:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
    3480:	e9c7 2309 	strd	r2, r3, [r7, #36]	; 0x24
	user_op->op_context = op_context;
    3484:	9b06      	ldr	r3, [sp, #24]
    3486:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
    3488:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    348c:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
    3490:	4608      	mov	r0, r1
    3492:	4798      	blx	r3
    3494:	4643      	mov	r3, r8
    3496:	2200      	movs	r2, #0
    3498:	2104      	movs	r1, #4
    349a:	47a0      	blx	r4
	return user_op->status;
    349c:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
    349e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    34a2:	2001      	movs	r0, #1
    34a4:	e7fb      	b.n	349e <ticker_stop+0x66>
    34a6:	bf00      	nop
    34a8:	200005bc 	.word	0x200005bc

000034ac <ticker_next_slot_get>:
{
    34ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    34b0:	4c1c      	ldr	r4, [pc, #112]	; (3524 <ticker_next_slot_get+0x78>)
    34b2:	272c      	movs	r7, #44	; 0x2c
    34b4:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->user[user_id];
    34b8:	b20d      	sxth	r5, r1
    34ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
    34be:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    34c2:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    34c6:	f89c 4003 	ldrb.w	r4, [ip, #3]
    34ca:	1c66      	adds	r6, r4, #1
    34cc:	b2f6      	uxtb	r6, r6
		last = 0;
    34ce:	42b0      	cmp	r0, r6
    34d0:	bf98      	it	ls
    34d2:	2600      	movls	r6, #0
	if (last == user->first) {
    34d4:	f89c 0001 	ldrb.w	r0, [ip, #1]
    34d8:	42b0      	cmp	r0, r6
    34da:	d021      	beq.n	3520 <ticker_next_slot_get+0x74>
	user_op = &user->user_op[user->last];
    34dc:	f8dc e004 	ldr.w	lr, [ip, #4]
    34e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    34e4:	0125      	lsls	r5, r4, #4
    34e6:	eb0e 0405 	add.w	r4, lr, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    34ea:	2002      	movs	r0, #2
    34ec:	f80e 0005 	strb.w	r0, [lr, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    34f0:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    34f4:	9b06      	ldr	r3, [sp, #24]
    34f6:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    34f8:	9b07      	ldr	r3, [sp, #28]
    34fa:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    34fc:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    34fe:	9b08      	ldr	r3, [sp, #32]
	user_op->id = TICKER_NULL;
    3500:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    3502:	6260      	str	r0, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    3504:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3506:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    350a:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
    350e:	4608      	mov	r0, r1
    3510:	4798      	blx	r3
    3512:	4643      	mov	r3, r8
    3514:	2200      	movs	r2, #0
    3516:	2104      	movs	r1, #4
    3518:	47a8      	blx	r5
	return user_op->status;
    351a:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    351c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    3520:	2001      	movs	r0, #1
    3522:	e7fb      	b.n	351c <ticker_next_slot_get+0x70>
    3524:	200005bc 	.word	0x200005bc

00003528 <ticker_job_idle_get>:
{
    3528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    352c:	4c1a      	ldr	r4, [pc, #104]	; (3598 <ticker_job_idle_get+0x70>)
    352e:	262c      	movs	r6, #44	; 0x2c
    3530:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->user[user_id];
    3534:	b20f      	sxth	r7, r1
    3536:	f8d8 0004 	ldr.w	r0, [r8, #4]
    353a:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
    353e:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
    3542:	f89c 4003 	ldrb.w	r4, [ip, #3]
    3546:	1c65      	adds	r5, r4, #1
    3548:	b2ed      	uxtb	r5, r5
		last = 0;
    354a:	42a8      	cmp	r0, r5
    354c:	bf98      	it	ls
    354e:	2500      	movls	r5, #0
	if (last == user->first) {
    3550:	f89c 0001 	ldrb.w	r0, [ip, #1]
    3554:	42a8      	cmp	r0, r5
    3556:	d01c      	beq.n	3592 <ticker_job_idle_get+0x6a>
	user_op = &user->user_op[user->last];
    3558:	f8dc 0004 	ldr.w	r0, [ip, #4]
    355c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3560:	0124      	lsls	r4, r4, #4
    3562:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    3564:	f04f 0e01 	mov.w	lr, #1
    3568:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = TICKER_NULL;
    356c:	20ff      	movs	r0, #255	; 0xff
    356e:	7078      	strb	r0, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
    3570:	2002      	movs	r0, #2
	user_op->fp_op_func = fp_op_func;
    3572:	e9c7 0209 	strd	r0, r2, [r7, #36]	; 0x24
	user_op->op_context = op_context;
    3576:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
    3578:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    357c:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
    3580:	4608      	mov	r0, r1
    3582:	4798      	blx	r3
    3584:	4643      	mov	r3, r8
    3586:	2200      	movs	r2, #0
    3588:	2104      	movs	r1, #4
    358a:	47a0      	blx	r4
	return user_op->status;
    358c:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
    358e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    3592:	2001      	movs	r0, #1
    3594:	e7fb      	b.n	358e <ticker_job_idle_get+0x66>
    3596:	bf00      	nop
    3598:	200005bc 	.word	0x200005bc

0000359c <ticker_job_sched>:
{
    359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    35a0:	4c08      	ldr	r4, [pc, #32]	; (35c4 <ticker_job_sched+0x28>)
    35a2:	252c      	movs	r5, #44	; 0x2c
    35a4:	fb05 4300 	mla	r3, r5, r0, r4
    35a8:	e9d3 3708 	ldrd	r3, r7, [r3, #32]
{
    35ac:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    35ae:	4608      	mov	r0, r1
    35b0:	4798      	blx	r3
    35b2:	fb06 4305 	mla	r3, r6, r5, r4
    35b6:	46bc      	mov	ip, r7
    35b8:	2200      	movs	r2, #0
    35ba:	2104      	movs	r1, #4
}
    35bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    35c0:	4760      	bx	ip
    35c2:	bf00      	nop
    35c4:	200005bc 	.word	0x200005bc

000035c8 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    35c8:	f005 b878 	b.w	86bc <cntr_cnt_get>

000035cc <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    35cc:	1a40      	subs	r0, r0, r1
}
    35ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    35d2:	4770      	bx	lr

000035d4 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    35d4:	b508      	push	{r3, lr}
    35d6:	4603      	mov	r3, r0
	if (addr_type > 1) {
    35d8:	2b01      	cmp	r3, #1
{
    35da:	4608      	mov	r0, r1
	if (addr_type > 1) {
    35dc:	d80e      	bhi.n	35fc <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    35de:	b133      	cbz	r3, 35ee <ll_addr_get+0x1a>
		if (bdaddr) {
    35e0:	b119      	cbz	r1, 35ea <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    35e2:	2206      	movs	r2, #6
    35e4:	4906      	ldr	r1, [pc, #24]	; (3600 <ll_addr_get+0x2c>)
    35e6:	f7fe fbfa 	bl	1dde <memcpy>
		}

		return rnd_addr;
    35ea:	4805      	ldr	r0, [pc, #20]	; (3600 <ll_addr_get+0x2c>)
    35ec:	e007      	b.n	35fe <ll_addr_get+0x2a>
	}

	if (bdaddr) {
    35ee:	b119      	cbz	r1, 35f8 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    35f0:	2206      	movs	r2, #6
    35f2:	4904      	ldr	r1, [pc, #16]	; (3604 <ll_addr_get+0x30>)
    35f4:	f7fe fbf3 	bl	1dde <memcpy>
	}

	return pub_addr;
    35f8:	4802      	ldr	r0, [pc, #8]	; (3604 <ll_addr_get+0x30>)
    35fa:	e000      	b.n	35fe <ll_addr_get+0x2a>
		return NULL;
    35fc:	2000      	movs	r0, #0
}
    35fe:	bd08      	pop	{r3, pc}
    3600:	2000061a 	.word	0x2000061a
    3604:	20000614 	.word	0x20000614

00003608 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    3608:	b570      	push	{r4, r5, r6, lr}
    360a:	4606      	mov	r6, r0
    360c:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    360e:	f003 fc15 	bl	6e3c <ll_adv_is_enabled>
    3612:	4604      	mov	r4, r0
    3614:	b110      	cbz	r0, 361c <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    3616:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    3618:	4620      	mov	r0, r4
    361a:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    361c:	f003 fc22 	bl	6e64 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    3620:	f010 0f06 	tst.w	r0, #6
    3624:	d1f7      	bne.n	3616 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    3626:	2206      	movs	r2, #6
    3628:	4629      	mov	r1, r5
	if (addr_type) {
    362a:	b11e      	cbz	r6, 3634 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    362c:	4802      	ldr	r0, [pc, #8]	; (3638 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    362e:	f7fe fbd6 	bl	1dde <memcpy>
    3632:	e7f1      	b.n	3618 <ll_addr_set+0x10>
    3634:	4801      	ldr	r0, [pc, #4]	; (363c <ll_addr_set+0x34>)
    3636:	e7fa      	b.n	362e <ll_addr_set+0x26>
    3638:	2000061a 	.word	0x2000061a
    363c:	20000614 	.word	0x20000614

00003640 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    3640:	2300      	movs	r3, #0
    3642:	7003      	strb	r3, [r0, #0]
	*max = 0;
    3644:	700b      	strb	r3, [r1, #0]
}
    3646:	4770      	bx	lr

00003648 <cpu_sleep>:
 * SPDX-License-Identifier: Apache-2.0
 */

static inline void cpu_sleep(void)
{
	__WFE();
    3648:	bf20      	wfe
	__SEV();
    364a:	bf40      	sev
	__WFE();
    364c:	bf20      	wfe
}
    364e:	4770      	bx	lr

00003650 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    3650:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    3652:	4b0d      	ldr	r3, [pc, #52]	; (3688 <pdu_len_cmp+0x38>)
{
    3654:	b089      	sub	sp, #36	; 0x24
    3656:	4605      	mov	r5, r0
    3658:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    365a:	aa01      	add	r2, sp, #4
    365c:	f103 0718 	add.w	r7, r3, #24
    3660:	6818      	ldr	r0, [r3, #0]
    3662:	6859      	ldr	r1, [r3, #4]
    3664:	4614      	mov	r4, r2
    3666:	c403      	stmia	r4!, {r0, r1}
    3668:	3308      	adds	r3, #8
    366a:	42bb      	cmp	r3, r7
    366c:	4622      	mov	r2, r4
    366e:	d1f7      	bne.n	3660 <pdu_len_cmp+0x10>
    3670:	881b      	ldrh	r3, [r3, #0]
    3672:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    3674:	ab08      	add	r3, sp, #32
    3676:	441d      	add	r5, r3
    3678:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    367c:	1b83      	subs	r3, r0, r6
    367e:	4258      	negs	r0, r3
    3680:	4158      	adcs	r0, r3
    3682:	b009      	add	sp, #36	; 0x24
    3684:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3686:	bf00      	nop
    3688:	0000ad5f 	.word	0x0000ad5f

0000368c <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    368c:	6008      	str	r0, [r1, #0]
}
    368e:	4770      	bx	lr

00003690 <mayfly_xtal_start>:
static void mayfly_xtal_start(void *params)
{
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
    3690:	4b02      	ldr	r3, [pc, #8]	; (369c <mayfly_xtal_start+0xc>)
    3692:	6818      	ldr	r0, [r3, #0]
    3694:	6843      	ldr	r3, [r0, #4]
    3696:	2100      	movs	r1, #0
    3698:	681b      	ldr	r3, [r3, #0]
    369a:	4718      	bx	r3
    369c:	20000620 	.word	0x20000620

000036a0 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    36a0:	b918      	cbnz	r0, 36aa <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    36a2:	680b      	ldr	r3, [r1, #0]
    36a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    36a8:	600b      	str	r3, [r1, #0]
	}
}
    36aa:	4770      	bx	lr

000036ac <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    36ac:	b918      	cbnz	r0, 36b6 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    36ae:	680b      	ldr	r3, [r1, #0]
    36b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    36b4:	600b      	str	r3, [r1, #0]
	}
}
    36b6:	4770      	bx	lr

000036b8 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    36b8:	b570      	push	{r4, r5, r6, lr}
    36ba:	1d03      	adds	r3, r0, #4
    36bc:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    36be:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    36c0:	429d      	cmp	r5, r3
    36c2:	d101      	bne.n	36c8 <chan_sel_remap+0x10>
    36c4:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    36c6:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    36c8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    36cc:	2200      	movs	r2, #0
    36ce:	18a0      	adds	r0, r4, r2
    36d0:	2a08      	cmp	r2, #8
    36d2:	b2c0      	uxtb	r0, r0
    36d4:	d101      	bne.n	36da <chan_sel_remap+0x22>
    36d6:	4604      	mov	r4, r0
    36d8:	e7f2      	b.n	36c0 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    36da:	f016 0f01 	tst.w	r6, #1
    36de:	d003      	beq.n	36e8 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    36e0:	2900      	cmp	r1, #0
    36e2:	d0f0      	beq.n	36c6 <chan_sel_remap+0xe>
				chan_index--;
    36e4:	3901      	subs	r1, #1
    36e6:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    36e8:	0876      	lsrs	r6, r6, #1
    36ea:	3201      	adds	r2, #1
    36ec:	e7ef      	b.n	36ce <chan_sel_remap+0x16>
	...

000036f0 <packet_rx_reserve_get>:
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    36f0:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
    36f2:	4a0c      	ldr	r2, [pc, #48]	; (3724 <packet_rx_reserve_get+0x34>)
    36f4:	f892 313a 	ldrb.w	r3, [r2, #314]	; 0x13a
	    _radio.packet_rx_last) {
    36f8:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
	if (_radio.packet_rx_acquire >=
    36fc:	428b      	cmp	r3, r1
			_radio.packet_rx_last +
    36fe:	bf38      	it	cc
    3700:	f892 4138 	ldrbcc.w	r4, [r2, #312]	; 0x138
			_radio.packet_rx_last);
    3704:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
			_radio.packet_rx_last +
    3708:	bf38      	it	cc
    370a:	191b      	addcc	r3, r3, r4
    370c:	1a5b      	subs	r3, r3, r1
    370e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
    3710:	4298      	cmp	r0, r3
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    3712:	bf9b      	ittet	ls
    3714:	f892 1139 	ldrbls.w	r1, [r2, #313]	; 0x139
    3718:	f8d2 3134 	ldrls.w	r3, [r2, #308]	; 0x134
		return 0;
    371c:	2000      	movhi	r0, #0
	return _radio.packet_rx[_radio.packet_rx_last];
    371e:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
}
    3722:	bd10      	pop	{r4, pc}
    3724:	20000620 	.word	0x20000620

00003728 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    3728:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    372a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    372e:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    3732:	4299      	cmp	r1, r3
    3734:	d128      	bne.n	3788 <conn_update_req+0x60>
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    3736:	f990 301d 	ldrsb.w	r3, [r0, #29]
    373a:	2b00      	cmp	r3, #0
    373c:	db26      	blt.n	378c <conn_update_req+0x64>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    373e:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    3740:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    3742:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    3746:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    3748:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    374c:	4354      	muls	r4, r2
					      conn->supervision_reload *
    374e:	227d      	movs	r2, #125	; 0x7d
    3750:	4362      	muls	r2, r4
					      125 / 1000;
    3752:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    3756:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    375a:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    375e:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
		conn->llcp.conn_upd.win_size = 1;
    3762:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    3764:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    3768:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    376a:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    376c:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    3770:	3901      	subs	r1, #1
		conn->llcp.conn_upd.win_size = 1;
    3772:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
		conn->llcp.conn_upd.win_offset_us = 0;
    3776:	66c3      	str	r3, [r0, #108]	; 0x6c
		conn->llcp.conn_upd.is_internal = 1;
    3778:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
		conn->llcp_type = LLCP_CONN_UPD;
    377c:	f880 505e 	strb.w	r5, [r0, #94]	; 0x5e
		conn->llcp_ack--;
    3780:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d

		return 0;
    3784:	4618      	mov	r0, r3
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
}
    3786:	bd30      	pop	{r4, r5, pc}
		return 1;
    3788:	2001      	movs	r0, #1
    378a:	e7fc      	b.n	3786 <conn_update_req+0x5e>
	return 2;
    378c:	2002      	movs	r0, #2
    378e:	e7fa      	b.n	3786 <conn_update_req+0x5e>

00003790 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    3790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    3794:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    3796:	4294      	cmp	r4, r2
{
    3798:	4681      	mov	r9, r0
    379a:	460f      	mov	r7, r1
    379c:	4690      	mov	r8, r2
	if (_first == last) {
    379e:	d03d      	beq.n	381c <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    37a0:	4e1f      	ldr	r6, [pc, #124]	; (3820 <tx_cmplt_get+0x90>)
    37a2:	f8d6 3168 	ldr.w	r3, [r6, #360]	; 0x168
    37a6:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    37aa:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    37ac:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    37ae:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    37b2:	f506 7aae 	add.w	sl, r6, #348	; 0x15c
		if (*handle != _radio.pkt_release[_first].handle) {
    37b6:	b222      	sxth	r2, r4
    37b8:	f8d6 0168 	ldr.w	r0, [r6, #360]	; 0x168
    37bc:	f8b9 c000 	ldrh.w	ip, [r9]
    37c0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    37c4:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    37c8:	4594      	cmp	ip, r2
    37ca:	d120      	bne.n	380e <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    37cc:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    37ce:	2801      	cmp	r0, #1
    37d0:	f020 0303 	bic.w	r3, r0, #3
    37d4:	d90a      	bls.n	37ec <tx_cmplt_get+0x5c>
    37d6:	b1f3      	cbz	r3, 3816 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    37d8:	1d02      	adds	r2, r0, #4
    37da:	d01c      	beq.n	3816 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    37dc:	7942      	ldrb	r2, [r0, #5]
    37de:	b1d2      	cbz	r2, 3816 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    37e0:	7902      	ldrb	r2, [r0, #4]
    37e2:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    37e6:	3a01      	subs	r2, #1
    37e8:	2a01      	cmp	r2, #1
    37ea:	d814      	bhi.n	3816 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    37ec:	2201      	movs	r2, #1
			cmplt++;
    37ee:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    37f0:	604a      	str	r2, [r1, #4]
			cmplt++;
    37f2:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    37f4:	b113      	cbz	r3, 37fc <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    37f6:	4651      	mov	r1, sl
    37f8:	f7fe ff4f 	bl	269a <mem_release>
		}

		_first = _first + 1;
    37fc:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    37fe:	f896 216c 	ldrb.w	r2, [r6, #364]	; 0x16c
		_first = _first + 1;
    3802:	b2e4      	uxtb	r4, r4
			_first = 0;
    3804:	42a2      	cmp	r2, r4
    3806:	bf08      	it	eq
    3808:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    380a:	4544      	cmp	r4, r8
    380c:	d1d3      	bne.n	37b6 <tx_cmplt_get+0x26>

	*first = _first;
    380e:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    3810:	4628      	mov	r0, r5
    3812:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    3816:	f8c1 b004 	str.w	fp, [r1, #4]
    381a:	e7eb      	b.n	37f4 <tx_cmplt_get+0x64>
		return 0;
    381c:	2500      	movs	r5, #0
    381e:	e7f7      	b.n	3810 <tx_cmplt_get+0x80>
    3820:	20000620 	.word	0x20000620

00003824 <connection_get>:
{
    3824:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    3826:	4b09      	ldr	r3, [pc, #36]	; (384c <connection_get+0x28>)
    3828:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    382c:	4282      	cmp	r2, r0
{
    382e:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    3830:	d90a      	bls.n	3848 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    3832:	4602      	mov	r2, r0
    3834:	f44f 7182 	mov.w	r1, #260	; 0x104
    3838:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    383c:	f7fe ff42 	bl	26c4 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    3840:	b110      	cbz	r0, 3848 <connection_get+0x24>
    3842:	8c03      	ldrh	r3, [r0, #32]
    3844:	42a3      	cmp	r3, r4
    3846:	d000      	beq.n	384a <connection_get+0x26>
	return 0;
    3848:	2000      	movs	r0, #0
}
    384a:	bd10      	pop	{r4, pc}
    384c:	20000620 	.word	0x20000620

00003850 <role_disable>:
{
    3850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3854:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3856:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    3858:	2805      	cmp	r0, #5
{
    385a:	4605      	mov	r5, r0
    385c:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    385e:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    3860:	d00e      	beq.n	3880 <role_disable+0x30>
    3862:	2806      	cmp	r0, #6
    3864:	f000 808d 	beq.w	3982 <role_disable+0x132>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    3868:	f240 8085 	bls.w	3976 <role_disable+0x126>
			conn_handle = ticker_id_primary -
    386c:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    386e:	b280      	uxth	r0, r0
    3870:	f7ff ffd8 	bl	3824 <connection_get>
			if (!conn) {
    3874:	2800      	cmp	r0, #0
    3876:	f000 80d6 	beq.w	3a26 <role_disable+0x1d6>
			ticks_active_to_start =
    387a:	e9d0 6800 	ldrd	r6, r8, [r0]
		break;
    387e:	e00f      	b.n	38a0 <role_disable+0x50>
		ticks_xtal_to_start =
    3880:	4b6a      	ldr	r3, [pc, #424]	; (3a2c <role_disable+0x1dc>)
		ticks_active_to_start =
    3882:	e9d3 6806 	ldrd	r6, r8, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    3886:	ab02      	add	r3, sp, #8
    3888:	9300      	str	r3, [sp, #0]
    388a:	460a      	mov	r2, r1
    388c:	4b68      	ldr	r3, [pc, #416]	; (3a30 <role_disable+0x1e0>)
    388e:	2103      	movs	r1, #3
    3890:	2000      	movs	r0, #0
    3892:	f7ff fdd1 	bl	3438 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    3896:	2802      	cmp	r0, #2
    3898:	d066      	beq.n	3968 <role_disable+0x118>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    389a:	9b02      	ldr	r3, [sp, #8]
    389c:	2b00      	cmp	r3, #0
    389e:	d167      	bne.n	3970 <role_disable+0x120>
	LL_ASSERT(!_radio.ticker_id_stop);
    38a0:	4c62      	ldr	r4, [pc, #392]	; (3a2c <role_disable+0x1dc>)
    38a2:	7ce3      	ldrb	r3, [r4, #19]
    38a4:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    38a8:	2b00      	cmp	r3, #0
    38aa:	d164      	bne.n	3976 <role_disable+0x126>
	ret_cb = TICKER_STATUS_BUSY;
    38ac:	ab06      	add	r3, sp, #24
    38ae:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    38b0:	74e5      	strb	r5, [r4, #19]
	ret_cb = TICKER_STATUS_BUSY;
    38b2:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    38b6:	2103      	movs	r1, #3
    38b8:	9300      	str	r3, [sp, #0]
    38ba:	462a      	mov	r2, r5
    38bc:	4b5c      	ldr	r3, [pc, #368]	; (3a30 <role_disable+0x1e0>)
    38be:	f7ff fdbb 	bl	3438 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    38c2:	2802      	cmp	r0, #2
    38c4:	d061      	beq.n	398a <role_disable+0x13a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    38c6:	9b02      	ldr	r3, [sp, #8]
    38c8:	2b00      	cmp	r3, #0
    38ca:	d145      	bne.n	3958 <role_disable+0x108>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    38cc:	7c63      	ldrb	r3, [r4, #17]
    38ce:	42ab      	cmp	r3, r5
    38d0:	d002      	beq.n	38d8 <role_disable+0x88>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    38d2:	7ca3      	ldrb	r3, [r4, #18]
    38d4:	42ab      	cmp	r3, r5
    38d6:	d13b      	bne.n	3950 <role_disable+0x100>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    38d8:	ab06      	add	r3, sp, #24
    38da:	2202      	movs	r2, #2
    38dc:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    38e0:	2200      	movs	r2, #0
    38e2:	9300      	str	r3, [sp, #0]
    38e4:	2103      	movs	r1, #3
    38e6:	4b52      	ldr	r3, [pc, #328]	; (3a30 <role_disable+0x1e0>)
    38e8:	4610      	mov	r0, r2
    38ea:	f7ff fda5 	bl	3438 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    38ee:	2802      	cmp	r0, #2
    38f0:	d107      	bne.n	3902 <role_disable+0xb2>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    38f2:	2201      	movs	r2, #1
    38f4:	4611      	mov	r1, r2
    38f6:	2003      	movs	r0, #3
    38f8:	f7fe ff44 	bl	2784 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    38fc:	9b03      	ldr	r3, [sp, #12]
    38fe:	2b02      	cmp	r3, #2
    3900:	d039      	beq.n	3976 <role_disable+0x126>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    3902:	9803      	ldr	r0, [sp, #12]
    3904:	2800      	cmp	r0, #0
    3906:	d15c      	bne.n	39c2 <role_disable+0x172>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    3908:	2302      	movs	r3, #2
    390a:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    390c:	7c63      	ldrb	r3, [r4, #17]
    390e:	2b00      	cmp	r3, #0
    3910:	d031      	beq.n	3976 <role_disable+0x126>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    3912:	ab04      	add	r3, sp, #16
    3914:	9300      	str	r3, [sp, #0]
    3916:	2201      	movs	r2, #1
    3918:	4b45      	ldr	r3, [pc, #276]	; (3a30 <role_disable+0x1e0>)
		_radio.ticker_id_prepare = 0;
    391a:	7460      	strb	r0, [r4, #17]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    391c:	2103      	movs	r1, #3
    391e:	f7ff fd8b 	bl	3438 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    3922:	2802      	cmp	r0, #2
    3924:	d107      	bne.n	3936 <role_disable+0xe6>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    3926:	2201      	movs	r2, #1
    3928:	4611      	mov	r1, r2
    392a:	2003      	movs	r0, #3
    392c:	f7fe ff2a 	bl	2784 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    3930:	9b04      	ldr	r3, [sp, #16]
    3932:	2b02      	cmp	r3, #2
    3934:	d01f      	beq.n	3976 <role_disable+0x126>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    3936:	9a04      	ldr	r2, [sp, #16]
    3938:	2a00      	cmp	r2, #0
    393a:	d134      	bne.n	39a6 <role_disable+0x156>
			ticks_xtal_to_start &= ~XON_BITMASK;
    393c:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    3940:	45b0      	cmp	r8, r6
    3942:	d93c      	bls.n	39be <role_disable+0x16e>
				ret = mayfly_enqueue(
    3944:	4b3b      	ldr	r3, [pc, #236]	; (3a34 <role_disable+0x1e4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    3946:	4611      	mov	r1, r2
    3948:	2003      	movs	r0, #3
    394a:	f7fe ff43 	bl	27d4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    394e:	b990      	cbnz	r0, 3976 <role_disable+0x126>
	if (!_radio.ticker_id_stop) {
    3950:	7ce3      	ldrb	r3, [r4, #19]
    3952:	b90b      	cbnz	r3, 3958 <role_disable+0x108>
		ret_cb = TICKER_STATUS_FAILURE;
    3954:	2301      	movs	r3, #1
    3956:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    3958:	2300      	movs	r3, #0
    395a:	74e3      	strb	r3, [r4, #19]
	return ret_cb;
    395c:	9802      	ldr	r0, [sp, #8]
}
    395e:	b006      	add	sp, #24
    3960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
    3964:	f7ff fe70 	bl	3648 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    3968:	9b02      	ldr	r3, [sp, #8]
    396a:	2b02      	cmp	r3, #2
    396c:	d0fa      	beq.n	3964 <role_disable+0x114>
    396e:	e794      	b.n	389a <role_disable+0x4a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    3970:	9b02      	ldr	r3, [sp, #8]
    3972:	2b01      	cmp	r3, #1
    3974:	d094      	beq.n	38a0 <role_disable+0x50>
		LL_ASSERT(0);
    3976:	4040      	eors	r0, r0
    3978:	f380 8811 	msr	BASEPRI, r0
    397c:	f04f 0004 	mov.w	r0, #4
    3980:	df02      	svc	2
		ticks_xtal_to_start =
    3982:	4b2a      	ldr	r3, [pc, #168]	; (3a2c <role_disable+0x1dc>)
		ticks_active_to_start =
    3984:	e9d3 6834 	ldrd	r6, r8, [r3, #208]	; 0xd0
		break;
    3988:	e78a      	b.n	38a0 <role_disable+0x50>
		if (_radio.ticker_id_event == ticker_id_primary) {
    398a:	7ca3      	ldrb	r3, [r4, #18]
    398c:	42ab      	cmp	r3, r5
    398e:	d104      	bne.n	399a <role_disable+0x14a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    3990:	2201      	movs	r2, #1
    3992:	4611      	mov	r1, r2
    3994:	2003      	movs	r0, #3
    3996:	f7fe fef5 	bl	2784 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    399a:	9b02      	ldr	r3, [sp, #8]
    399c:	2b02      	cmp	r3, #2
    399e:	d192      	bne.n	38c6 <role_disable+0x76>
			cpu_sleep();
    39a0:	f7ff fe52 	bl	3648 <cpu_sleep>
    39a4:	e7f9      	b.n	399a <role_disable+0x14a>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    39a6:	9b04      	ldr	r3, [sp, #16]
    39a8:	2b01      	cmp	r3, #1
    39aa:	d1e4      	bne.n	3976 <role_disable+0x126>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    39ac:	2200      	movs	r2, #0
    39ae:	4611      	mov	r1, r2
    39b0:	4b20      	ldr	r3, [pc, #128]	; (3a34 <role_disable+0x1e4>)
    39b2:	2003      	movs	r0, #3
    39b4:	f7fe ff0e 	bl	27d4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    39b8:	4602      	mov	r2, r0
    39ba:	2800      	cmp	r0, #0
    39bc:	d1db      	bne.n	3976 <role_disable+0x126>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    39be:	4b1e      	ldr	r3, [pc, #120]	; (3a38 <role_disable+0x1e8>)
    39c0:	e7c1      	b.n	3946 <role_disable+0xf6>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    39c2:	9d03      	ldr	r5, [sp, #12]
    39c4:	2d01      	cmp	r5, #1
    39c6:	d1d6      	bne.n	3976 <role_disable+0x126>
		if (ticker_id_stop != TICKER_NULL) {
    39c8:	2fff      	cmp	r7, #255	; 0xff
    39ca:	d019      	beq.n	3a00 <role_disable+0x1b0>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    39cc:	ab06      	add	r3, sp, #24
    39ce:	2202      	movs	r2, #2
    39d0:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    39d4:	2103      	movs	r1, #3
    39d6:	9300      	str	r3, [sp, #0]
    39d8:	463a      	mov	r2, r7
    39da:	4b15      	ldr	r3, [pc, #84]	; (3a30 <role_disable+0x1e0>)
    39dc:	2000      	movs	r0, #0
    39de:	f7ff fd2b 	bl	3438 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    39e2:	2802      	cmp	r0, #2
    39e4:	d107      	bne.n	39f6 <role_disable+0x1a6>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    39e6:	462a      	mov	r2, r5
    39e8:	4629      	mov	r1, r5
    39ea:	2003      	movs	r0, #3
    39ec:	f7fe feca 	bl	2784 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    39f0:	9b05      	ldr	r3, [sp, #20]
    39f2:	2b02      	cmp	r3, #2
    39f4:	d0bf      	beq.n	3976 <role_disable+0x126>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    39f6:	9b05      	ldr	r3, [sp, #20]
    39f8:	b113      	cbz	r3, 3a00 <role_disable+0x1b0>
    39fa:	9b05      	ldr	r3, [sp, #20]
    39fc:	2b01      	cmp	r3, #1
    39fe:	d1ba      	bne.n	3976 <role_disable+0x126>
		if (_radio.role != ROLE_NONE) {
    3a00:	7d23      	ldrb	r3, [r4, #20]
    3a02:	2b00      	cmp	r3, #0
    3a04:	d0a4      	beq.n	3950 <role_disable+0x100>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    3a06:	4b0d      	ldr	r3, [pc, #52]	; (3a3c <role_disable+0x1ec>)
    3a08:	2204      	movs	r2, #4
    3a0a:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    3a0c:	2200      	movs	r2, #0
    3a0e:	4611      	mov	r1, r2
    3a10:	2003      	movs	r0, #3
    3a12:	f7fe fedf 	bl	27d4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    3a16:	2800      	cmp	r0, #0
    3a18:	d1ad      	bne.n	3976 <role_disable+0x126>
			while (_radio.role != ROLE_NONE) {
    3a1a:	7d23      	ldrb	r3, [r4, #20]
    3a1c:	2b00      	cmp	r3, #0
    3a1e:	d097      	beq.n	3950 <role_disable+0x100>
				cpu_sleep();
    3a20:	f7ff fe12 	bl	3648 <cpu_sleep>
    3a24:	e7f9      	b.n	3a1a <role_disable+0x1ca>
				return 1;
    3a26:	2001      	movs	r0, #1
    3a28:	e799      	b.n	395e <role_disable+0x10e>
    3a2a:	bf00      	nop
    3a2c:	20000620 	.word	0x20000620
    3a30:	0000368d 	.word	0x0000368d
    3a34:	20002e08 	.word	0x20002e08
    3a38:	20002ea8 	.word	0x20002ea8
    3a3c:	20002e38 	.word	0x20002e38

00003a40 <sched_after_mstr_free_slot_get>:
{
    3a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a44:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    3a46:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    3a48:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    3a4a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 3b60 <sched_after_mstr_free_slot_get+0x120>
	ticker_id = ticker_id_prev = 0xff;
    3a4e:	f88d 501f 	strb.w	r5, [sp, #31]
{
    3a52:	4680      	mov	r8, r0
    3a54:	4693      	mov	fp, r2
    3a56:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    3a58:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    3a5c:	601c      	str	r4, [r3, #0]
    3a5e:	9408      	str	r4, [sp, #32]
    3a60:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3a62:	2302      	movs	r3, #2
    3a64:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    3a66:	ab09      	add	r3, sp, #36	; 0x24
    3a68:	9302      	str	r3, [sp, #8]
    3a6a:	4b3b      	ldr	r3, [pc, #236]	; (3b58 <sched_after_mstr_free_slot_get+0x118>)
    3a6c:	9301      	str	r3, [sp, #4]
    3a6e:	ab08      	add	r3, sp, #32
    3a70:	9300      	str	r3, [sp, #0]
    3a72:	f10d 021f 	add.w	r2, sp, #31
    3a76:	465b      	mov	r3, fp
    3a78:	4641      	mov	r1, r8
    3a7a:	2000      	movs	r0, #0
    3a7c:	f7ff fd16 	bl	34ac <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    3a80:	2802      	cmp	r0, #2
    3a82:	d00b      	beq.n	3a9c <sched_after_mstr_free_slot_get+0x5c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    3a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a86:	b16b      	cbz	r3, 3aa4 <sched_after_mstr_free_slot_get+0x64>
    3a88:	4040      	eors	r0, r0
    3a8a:	f380 8811 	msr	BASEPRI, r0
    3a8e:	f04f 0004 	mov.w	r0, #4
    3a92:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    3a94:	4641      	mov	r1, r8
    3a96:	2000      	movs	r0, #0
    3a98:	f7ff fd80 	bl	359c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    3a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a9e:	2b02      	cmp	r3, #2
    3aa0:	d0f8      	beq.n	3a94 <sched_after_mstr_free_slot_get+0x54>
    3aa2:	e7ef      	b.n	3a84 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    3aa4:	f89d 201f 	ldrb.w	r2, [sp, #31]
    3aa8:	2aff      	cmp	r2, #255	; 0xff
    3aaa:	d04d      	beq.n	3b48 <sched_after_mstr_free_slot_get+0x108>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    3aac:	2a06      	cmp	r2, #6
    3aae:	d9d8      	bls.n	3a62 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    3ab0:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    3ab4:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    3ab6:	429a      	cmp	r2, r3
    3ab8:	dad3      	bge.n	3a62 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    3aba:	3a07      	subs	r2, #7
    3abc:	b292      	uxth	r2, r2
    3abe:	f44f 7182 	mov.w	r1, #260	; 0x104
    3ac2:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    3ac6:	f7fe fdfd 	bl	26c4 <mem_get>
		if (conn && !conn->role) {
    3aca:	2800      	cmp	r0, #0
    3acc:	d0c9      	beq.n	3a62 <sched_after_mstr_free_slot_get+0x22>
    3ace:	f990 301d 	ldrsb.w	r3, [r0, #29]
    3ad2:	2b00      	cmp	r3, #0
    3ad4:	dbc5      	blt.n	3a62 <sched_after_mstr_free_slot_get+0x22>
    3ad6:	e9d0 3c00 	ldrd	r3, ip, [r0]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    3ada:	2b00      	cmp	r3, #0
			u32_t ticks_to_expire_normal = ticks_to_expire;
    3adc:	9a08      	ldr	r2, [sp, #32]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    3ade:	da12      	bge.n	3b06 <sched_after_mstr_free_slot_get+0xc6>
    3ae0:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    3ae2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    3ae6:	458c      	cmp	ip, r1
    3ae8:	bf2c      	ite	cs
    3aea:	4462      	addcs	r2, ip
    3aec:	1852      	addcc	r2, r2, r1
				ticks_to_expire_normal -=
    3aee:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    3af0:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    3af2:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    3af4:	f101 0104 	add.w	r1, r1, #4
    3af8:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    3afa:	d108      	bne.n	3b0e <sched_after_mstr_free_slot_get+0xce>
			ticker_id_prev = ticker_id;
    3afc:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    3b00:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    3b02:	4616      	mov	r6, r2
    3b04:	e7ad      	b.n	3a62 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    3b06:	4563      	cmp	r3, ip
    3b08:	bf38      	it	cc
    3b0a:	4663      	movcc	r3, ip
    3b0c:	e7f0      	b.n	3af0 <sched_after_mstr_free_slot_get+0xb0>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    3b0e:	4631      	mov	r1, r6
    3b10:	4610      	mov	r0, r2
    3b12:	9305      	str	r3, [sp, #20]
    3b14:	9204      	str	r2, [sp, #16]
    3b16:	f7ff fd59 	bl	35cc <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    3b1a:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    3b1e:	4288      	cmp	r0, r1
    3b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    3b24:	d9ea      	bls.n	3afc <sched_after_mstr_free_slot_get+0xbc>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3b26:	480d      	ldr	r0, [pc, #52]	; (3b5c <sched_after_mstr_free_slot_get+0x11c>)
    3b28:	4434      	add	r4, r6
    3b2a:	fba4 0100 	umull	r0, r1, r4, r0
    3b2e:	2307      	movs	r3, #7
    3b30:	fb03 1104 	mla	r1, r3, r4, r1
    3b34:	a306      	add	r3, pc, #24	; (adr r3, 3b50 <sched_after_mstr_free_slot_get+0x110>)
    3b36:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b3a:	f7fc fbbb 	bl	2b4 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    3b3e:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3b40:	6038      	str	r0, [r7, #0]
}
    3b42:	b00b      	add	sp, #44	; 0x2c
    3b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    3b48:	2dff      	cmp	r5, #255	; 0xff
    3b4a:	d1ec      	bne.n	3b26 <sched_after_mstr_free_slot_get+0xe6>
    3b4c:	e7f9      	b.n	3b42 <sched_after_mstr_free_slot_get+0x102>
    3b4e:	bf00      	nop
    3b50:	3b9aca00 	.word	0x3b9aca00
    3b54:	00000000 	.word	0x00000000
    3b58:	0000368d 	.word	0x0000368d
    3b5c:	1afd498d 	.word	0x1afd498d
    3b60:	20000620 	.word	0x20000620

00003b64 <isr_adv_ci_adva_check>:
{
    3b64:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    3b66:	7804      	ldrb	r4, [r0, #0]
    3b68:	780a      	ldrb	r2, [r1, #0]
    3b6a:	f3c4 1380 	ubfx	r3, r4, #6, #1
    3b6e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    3b72:	d119      	bne.n	3ba8 <isr_adv_ci_adva_check+0x44>
    3b74:	f004 040f 	and.w	r4, r4, #15
    3b78:	2c01      	cmp	r4, #1
    3b7a:	f100 0502 	add.w	r5, r0, #2
    3b7e:	f101 0608 	add.w	r6, r1, #8
    3b82:	d008      	beq.n	3b96 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    3b84:	2206      	movs	r2, #6
    3b86:	4631      	mov	r1, r6
    3b88:	4628      	mov	r0, r5
    3b8a:	f7fe f918 	bl	1dbe <memcmp>
			 BDADDR_SIZE)) ||
    3b8e:	fab0 f080 	clz	r0, r0
    3b92:	0940      	lsrs	r0, r0, #5
}
    3b94:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    3b96:	2206      	movs	r2, #6
    3b98:	4631      	mov	r1, r6
    3b9a:	4628      	mov	r0, r5
    3b9c:	f7fe f90f 	bl	1dbe <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    3ba0:	2800      	cmp	r0, #0
    3ba2:	d1ef      	bne.n	3b84 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    3ba4:	4620      	mov	r0, r4
    3ba6:	e7f5      	b.n	3b94 <isr_adv_ci_adva_check+0x30>
    3ba8:	2000      	movs	r0, #0
    3baa:	e7f3      	b.n	3b94 <isr_adv_ci_adva_check+0x30>

00003bac <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    3bac:	4a0b      	ldr	r2, [pc, #44]	; (3bdc <rx_fc_lock+0x30>)
    3bae:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
    3bb2:	f892 1179 	ldrb.w	r1, [r2, #377]	; 0x179
    3bb6:	4299      	cmp	r1, r3
    3bb8:	d10e      	bne.n	3bd8 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    3bba:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
    3bbe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3bc2:	f8a3 0172 	strh.w	r0, [r3, #370]	; 0x172
		req = _radio.fc_req + 1;
    3bc6:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
    3bca:	3301      	adds	r3, #1
    3bcc:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    3bce:	2b03      	cmp	r3, #3
    3bd0:	bf08      	it	eq
    3bd2:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    3bd4:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
	}
}
    3bd8:	4770      	bx	lr
    3bda:	bf00      	nop
    3bdc:	20000620 	.word	0x20000620

00003be0 <chan_set.part.24>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    3be0:	4040      	eors	r0, r0
    3be2:	f380 8811 	msr	BASEPRI, r0
    3be6:	f04f 0004 	mov.w	r0, #4
    3bea:	df02      	svc	2

00003bec <ticker_success_assert>:
{
    3bec:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    3bee:	b108      	cbz	r0, 3bf4 <ticker_success_assert+0x8>
    3bf0:	f7ff fff6 	bl	3be0 <chan_set.part.24>
}
    3bf4:	bd08      	pop	{r3, pc}
	...

00003bf8 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    3bf8:	2801      	cmp	r0, #1
{
    3bfa:	b508      	push	{r3, lr}
    3bfc:	4b09      	ldr	r3, [pc, #36]	; (3c24 <ticker_stop_adv_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    3bfe:	d107      	bne.n	3c10 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    3c00:	7cda      	ldrb	r2, [r3, #19]
    3c02:	2a05      	cmp	r2, #5
    3c04:	d102      	bne.n	3c0c <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    3c06:	2200      	movs	r2, #0
    3c08:	74da      	strb	r2, [r3, #19]
}
    3c0a:	bd08      	pop	{r3, pc}
    3c0c:	f7ff ffe8 	bl	3be0 <chan_set.part.24>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    3c10:	7c5b      	ldrb	r3, [r3, #17]
    3c12:	2b05      	cmp	r3, #5
    3c14:	d1f9      	bne.n	3c0a <ticker_stop_adv_assert+0x12>
    3c16:	4040      	eors	r0, r0
    3c18:	f380 8811 	msr	BASEPRI, r0
    3c1c:	f04f 0004 	mov.w	r0, #4
    3c20:	df02      	svc	2
    3c22:	bf00      	nop
    3c24:	20000620 	.word	0x20000620

00003c28 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    3c28:	2801      	cmp	r0, #1
{
    3c2a:	b508      	push	{r3, lr}
    3c2c:	4b09      	ldr	r3, [pc, #36]	; (3c54 <ticker_stop_scan_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    3c2e:	d107      	bne.n	3c40 <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    3c30:	7cda      	ldrb	r2, [r3, #19]
    3c32:	2a06      	cmp	r2, #6
    3c34:	d102      	bne.n	3c3c <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    3c36:	2200      	movs	r2, #0
    3c38:	74da      	strb	r2, [r3, #19]
}
    3c3a:	bd08      	pop	{r3, pc}
    3c3c:	f7ff ffd0 	bl	3be0 <chan_set.part.24>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    3c40:	7c5b      	ldrb	r3, [r3, #17]
    3c42:	2b06      	cmp	r3, #6
    3c44:	d1f9      	bne.n	3c3a <ticker_stop_scan_assert+0x12>
    3c46:	4040      	eors	r0, r0
    3c48:	f380 8811 	msr	BASEPRI, r0
    3c4c:	f04f 0004 	mov.w	r0, #4
    3c50:	df02      	svc	2
    3c52:	bf00      	nop
    3c54:	20000620 	.word	0x20000620

00003c58 <ticker_update_adv_assert>:
{
    3c58:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    3c5a:	b128      	cbz	r0, 3c68 <ticker_update_adv_assert+0x10>
    3c5c:	4b03      	ldr	r3, [pc, #12]	; (3c6c <ticker_update_adv_assert+0x14>)
    3c5e:	7cdb      	ldrb	r3, [r3, #19]
    3c60:	2b05      	cmp	r3, #5
    3c62:	d001      	beq.n	3c68 <ticker_update_adv_assert+0x10>
    3c64:	f7ff ffbc 	bl	3be0 <chan_set.part.24>
}
    3c68:	bd08      	pop	{r3, pc}
    3c6a:	bf00      	nop
    3c6c:	20000620 	.word	0x20000620

00003c70 <ticker_update_slave_assert>:
{
    3c70:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    3c72:	b130      	cbz	r0, 3c82 <ticker_update_slave_assert+0x12>
    3c74:	4b03      	ldr	r3, [pc, #12]	; (3c84 <ticker_update_slave_assert+0x14>)
    3c76:	7cdb      	ldrb	r3, [r3, #19]
    3c78:	b2c9      	uxtb	r1, r1
    3c7a:	4299      	cmp	r1, r3
    3c7c:	d001      	beq.n	3c82 <ticker_update_slave_assert+0x12>
    3c7e:	f7ff ffaf 	bl	3be0 <chan_set.part.24>
}
    3c82:	bd08      	pop	{r3, pc}
    3c84:	20000620 	.word	0x20000620

00003c88 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    3c88:	4b04      	ldr	r3, [pc, #16]	; (3c9c <ticker_job_disable+0x14>)
    3c8a:	7d5b      	ldrb	r3, [r3, #21]
    3c8c:	b123      	cbz	r3, 3c98 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    3c8e:	2101      	movs	r1, #1
    3c90:	2200      	movs	r2, #0
    3c92:	4608      	mov	r0, r1
    3c94:	f7fe bd76 	b.w	2784 <mayfly_enable>
}
    3c98:	4770      	bx	lr
    3c9a:	bf00      	nop
    3c9c:	20000620 	.word	0x20000620

00003ca0 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    3ca0:	2806      	cmp	r0, #6
{
    3ca2:	b510      	push	{r4, lr}
    3ca4:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    3ca6:	d90a      	bls.n	3cbe <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    3ca8:	4b09      	ldr	r3, [pc, #36]	; (3cd0 <hdr_conn_get+0x30>)
    3caa:	1fc2      	subs	r2, r0, #7
    3cac:	b292      	uxth	r2, r2
    3cae:	f44f 7182 	mov.w	r1, #260	; 0x104
    3cb2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    3cb6:	f7fe fd05 	bl	26c4 <mem_get>
    3cba:	6020      	str	r0, [r4, #0]
}
    3cbc:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    3cbe:	2805      	cmp	r0, #5
    3cc0:	d004      	beq.n	3ccc <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    3cc2:	2806      	cmp	r0, #6
	return NULL;
    3cc4:	4803      	ldr	r0, [pc, #12]	; (3cd4 <hdr_conn_get+0x34>)
    3cc6:	bf18      	it	ne
    3cc8:	2000      	movne	r0, #0
    3cca:	e7f7      	b.n	3cbc <hdr_conn_get+0x1c>
		return &_radio.advertiser.hdr;
    3ccc:	4802      	ldr	r0, [pc, #8]	; (3cd8 <hdr_conn_get+0x38>)
    3cce:	e7f5      	b.n	3cbc <hdr_conn_get+0x1c>
    3cd0:	20000620 	.word	0x20000620
    3cd4:	200006f0 	.word	0x200006f0
    3cd8:	20000638 	.word	0x20000638

00003cdc <mayfly_xtal_retain.part.16>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    3cdc:	b508      	push	{r3, lr}
			s_xtal_retained = 0;
    3cde:	4b0a      	ldr	r3, [pc, #40]	; (3d08 <mayfly_xtal_retain.part.16+0x2c>)
    3ce0:	2200      	movs	r2, #0
    3ce2:	701a      	strb	r2, [r3, #0]
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    3ce4:	4b09      	ldr	r3, [pc, #36]	; (3d0c <mayfly_xtal_retain.part.16+0x30>)
    3ce6:	f1a3 0110 	sub.w	r1, r3, #16
			retval = mayfly_enqueue(caller_id,
    3cea:	2801      	cmp	r0, #1
    3cec:	bf18      	it	ne
    3cee:	460b      	movne	r3, r1
    3cf0:	4611      	mov	r1, r2
    3cf2:	f7fe fd6f 	bl	27d4 <mayfly_enqueue>
			LL_ASSERT(!retval);
    3cf6:	b128      	cbz	r0, 3d04 <mayfly_xtal_retain.part.16+0x28>
    3cf8:	4040      	eors	r0, r0
    3cfa:	f380 8811 	msr	BASEPRI, r0
    3cfe:	f04f 0004 	mov.w	r0, #4
    3d02:	df02      	svc	2
}
    3d04:	bd08      	pop	{r3, pc}
    3d06:	bf00      	nop
    3d08:	20000828 	.word	0x20000828
    3d0c:	20002e88 	.word	0x20002e88

00003d10 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    3d10:	2200      	movs	r2, #0
{
    3d12:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    3d14:	4611      	mov	r1, r2
    3d16:	4b04      	ldr	r3, [pc, #16]	; (3d28 <event_active+0x18>)
    3d18:	4610      	mov	r0, r2
    3d1a:	f7fe fd5b 	bl	27d4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    3d1e:	b108      	cbz	r0, 3d24 <event_active+0x14>
    3d20:	f7ff ff5e 	bl	3be0 <chan_set.part.24>
}
    3d24:	bd08      	pop	{r3, pc}
    3d26:	bf00      	nop
    3d28:	20002dd8 	.word	0x20002dd8

00003d2c <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    3d2c:	2200      	movs	r2, #0
{
    3d2e:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    3d30:	4611      	mov	r1, r2
    3d32:	4b04      	ldr	r3, [pc, #16]	; (3d44 <event_xtal+0x18>)
    3d34:	4610      	mov	r0, r2
    3d36:	f7fe fd4d 	bl	27d4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    3d3a:	b108      	cbz	r0, 3d40 <event_xtal+0x14>
    3d3c:	f7ff ff50 	bl	3be0 <chan_set.part.24>
}
    3d40:	bd08      	pop	{r3, pc}
    3d42:	bf00      	nop
    3d44:	20002e58 	.word	0x20002e58

00003d48 <mayfly_radio_active>:
{
    3d48:	b508      	push	{r3, lr}
    3d4a:	4a0a      	ldr	r2, [pc, #40]	; (3d74 <mayfly_radio_active+0x2c>)
    3d4c:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    3d4e:	b138      	cbz	r0, 3d60 <mayfly_radio_active+0x18>
		if (s_active++) {
    3d50:	1c59      	adds	r1, r3, #1
    3d52:	7011      	strb	r1, [r2, #0]
    3d54:	b963      	cbnz	r3, 3d70 <mayfly_radio_active+0x28>
		radio_active_callback(1);
    3d56:	2001      	movs	r0, #1
}
    3d58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    3d5c:	f003 bb9c 	b.w	7498 <radio_active_callback>
		LL_ASSERT(s_active);
    3d60:	b90b      	cbnz	r3, 3d66 <mayfly_radio_active+0x1e>
    3d62:	f7ff ff3d 	bl	3be0 <chan_set.part.24>
		if (--s_active) {
    3d66:	3b01      	subs	r3, #1
    3d68:	b2db      	uxtb	r3, r3
    3d6a:	7013      	strb	r3, [r2, #0]
    3d6c:	2b00      	cmp	r3, #0
    3d6e:	d0f3      	beq.n	3d58 <mayfly_radio_active+0x10>
}
    3d70:	bd08      	pop	{r3, pc}
    3d72:	bf00      	nop
    3d74:	200007d4 	.word	0x200007d4

00003d78 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    3d78:	2000      	movs	r0, #0
    3d7a:	f7ff bfe5 	b.w	3d48 <mayfly_radio_active>
	...

00003d80 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    3d80:	b2c0      	uxtb	r0, r0
{
    3d82:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    3d84:	1f03      	subs	r3, r0, #4
    3d86:	2b01      	cmp	r3, #1
    3d88:	d901      	bls.n	3d8e <mayfly_radio_stop+0xe>
    3d8a:	f7ff ff29 	bl	3be0 <chan_set.part.24>
	radio_used = ((_radio.state != STATE_NONE) &&
    3d8e:	4a08      	ldr	r2, [pc, #32]	; (3db0 <mayfly_radio_stop+0x30>)
    3d90:	7d53      	ldrb	r3, [r2, #21]
		      (_radio.state != STATE_STOP) &&
    3d92:	b113      	cbz	r3, 3d9a <mayfly_radio_stop+0x1a>
	radio_used = ((_radio.state != STATE_NONE) &&
    3d94:	3b04      	subs	r3, #4
    3d96:	2b01      	cmp	r3, #1
    3d98:	d806      	bhi.n	3da8 <mayfly_radio_stop+0x28>
	if (radio_used || !radio_is_idle()) {
    3d9a:	f004 fe8b 	bl	8ab4 <radio_is_idle>
    3d9e:	b928      	cbnz	r0, 3dac <mayfly_radio_stop+0x2c>
}
    3da0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    3da4:	f004 be54 	b.w	8a50 <radio_disable>
			_radio.state = state;
    3da8:	7550      	strb	r0, [r2, #21]
    3daa:	e7f9      	b.n	3da0 <mayfly_radio_stop+0x20>
}
    3dac:	bd08      	pop	{r3, pc}
    3dae:	bf00      	nop
    3db0:	20000620 	.word	0x20000620

00003db4 <rx_packet_set>:
{
    3db4:	b538      	push	{r3, r4, r5, lr}
    3db6:	4605      	mov	r5, r0
    3db8:	460c      	mov	r4, r1
	radio_phy_set(phy, 0);
    3dba:	2100      	movs	r1, #0
    3dbc:	4608      	mov	r0, r1
    3dbe:	f004 fdad 	bl	891c <radio_phy_set>
	if (conn->enc_rx) {
    3dc2:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    3dc6:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    3dc8:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
    3dcc:	d50d      	bpl.n	3dea <rx_packet_set+0x36>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    3dce:	211f      	movs	r1, #31
    3dd0:	2008      	movs	r0, #8
    3dd2:	f004 fde9 	bl	89a8 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    3dd6:	4622      	mov	r2, r4
    3dd8:	2100      	movs	r1, #0
    3dda:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
    3dde:	f005 f81d 	bl	8e1c <radio_ccm_rx_pkt_set>
}
    3de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_rx_set(pdu_data_rx);
    3de6:	f004 be0d 	b.w	8a04 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    3dea:	2008      	movs	r0, #8
    3dec:	211b      	movs	r1, #27
    3dee:	f004 fddb 	bl	89a8 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    3df2:	4620      	mov	r0, r4
    3df4:	e7f5      	b.n	3de2 <rx_packet_set+0x2e>
	...

00003df8 <pdu_node_tx_release>:
{
    3df8:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    3dfa:	4a10      	ldr	r2, [pc, #64]	; (3e3c <pdu_node_tx_release+0x44>)
    3dfc:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
	if (last == _radio.packet_tx_count) {
    3e00:	f892 416c 	ldrb.w	r4, [r2, #364]	; 0x16c
	last = _radio.packet_release_last + 1;
    3e04:	3301      	adds	r3, #1
    3e06:	b2db      	uxtb	r3, r3
		last = 0;
    3e08:	429c      	cmp	r4, r3
    3e0a:	bf08      	it	eq
    3e0c:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    3e0e:	f892 416f 	ldrb.w	r4, [r2, #367]	; 0x16f
    3e12:	429c      	cmp	r4, r3
    3e14:	d101      	bne.n	3e1a <pdu_node_tx_release+0x22>
    3e16:	f7ff fee3 	bl	3be0 <chan_set.part.24>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    3e1a:	f892 5170 	ldrb.w	r5, [r2, #368]	; 0x170
    3e1e:	f8d2 4168 	ldr.w	r4, [r2, #360]	; 0x168
    3e22:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    3e26:	f892 0170 	ldrb.w	r0, [r2, #368]	; 0x170
    3e2a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    3e2e:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    3e30:	f882 3170 	strb.w	r3, [r2, #368]	; 0x170
}
    3e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    3e38:	f003 bb30 	b.w	749c <radio_event_callback>
    3e3c:	20000620 	.word	0x20000620

00003e40 <packet_tx_enqueue>:
{
    3e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    3e44:	4d25      	ldr	r5, [pc, #148]	; (3edc <packet_tx_enqueue+0x9c>)
{
    3e46:	4606      	mov	r6, r0
    3e48:	46a8      	mov	r8, r5
		node_tx_new->next = NULL;
    3e4a:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    3e4c:	f895 316d 	ldrb.w	r3, [r5, #365]	; 0x16d
    3e50:	f895 216e 	ldrb.w	r2, [r5, #366]	; 0x16e
    3e54:	429a      	cmp	r2, r3
    3e56:	d036      	beq.n	3ec6 <packet_tx_enqueue+0x86>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    3e58:	f895 916d 	ldrb.w	r9, [r5, #365]	; 0x16d
    3e5c:	f8d5 a164 	ldr.w	sl, [r5, #356]	; 0x164
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    3e60:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
    3e64:	f83a 2039 	ldrh.w	r2, [sl, r9, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    3e68:	eb0a 03c9 	add.w	r3, sl, r9, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    3e6c:	f44f 7182 	mov.w	r1, #260	; 0x104
		node_tx_new = pdu_data_q_tx->node_tx;
    3e70:	685c      	ldr	r4, [r3, #4]
		node_tx_new->next = NULL;
    3e72:	6027      	str	r7, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    3e74:	f7fe fc26 	bl	26c4 <mem_get>
    3e78:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    3e7a:	f83a 0039 	ldrh.w	r0, [sl, r9, lsl #3]
    3e7e:	8c1a      	ldrh	r2, [r3, #32]
    3e80:	4282      	cmp	r2, r0
    3e82:	d122      	bne.n	3eca <packet_tx_enqueue+0x8a>
			if (conn->pkt_tx_data == 0) {
    3e84:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
    3e88:	b942      	cbnz	r2, 3e9c <packet_tx_enqueue+0x5c>
				if (conn->pkt_tx_head == 0) {
    3e8a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
				conn->pkt_tx_data = node_tx_new;
    3e8e:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8
				if (conn->pkt_tx_head == 0) {
    3e92:	b91a      	cbnz	r2, 3e9c <packet_tx_enqueue+0x5c>
					conn->pkt_tx_head = node_tx_new;
    3e94:	f8c3 40ec 	str.w	r4, [r3, #236]	; 0xec
					conn->pkt_tx_last = NULL;
    3e98:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			if (conn->pkt_tx_last) {
    3e9c:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
    3ea0:	b102      	cbz	r2, 3ea4 <packet_tx_enqueue+0x64>
				conn->pkt_tx_last->next = node_tx_new;
    3ea2:	6014      	str	r4, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    3ea4:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
		first = _radio.packet_tx_first + 1;
    3ea8:	f898 316d 	ldrb.w	r3, [r8, #365]	; 0x16d
		if (first == _radio.packet_tx_count) {
    3eac:	f898 216c 	ldrb.w	r2, [r8, #364]	; 0x16c
		first = _radio.packet_tx_first + 1;
    3eb0:	3301      	adds	r3, #1
    3eb2:	b2db      	uxtb	r3, r3
    3eb4:	3e01      	subs	r6, #1
			first = 0;
    3eb6:	429a      	cmp	r2, r3
    3eb8:	bf08      	it	eq
    3eba:	2300      	moveq	r3, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    3ebc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		_radio.packet_tx_first = first;
    3ec0:	f888 316d 	strb.w	r3, [r8, #365]	; 0x16d
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    3ec4:	d1c2      	bne.n	3e4c <packet_tx_enqueue+0xc>
}
    3ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    3eca:	7923      	ldrb	r3, [r4, #4]
    3ecc:	f367 0301 	bfi	r3, r7, #0, #2
    3ed0:	7123      	strb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    3ed2:	4621      	mov	r1, r4
    3ed4:	f7ff ff90 	bl	3df8 <pdu_node_tx_release>
    3ed8:	e7e6      	b.n	3ea8 <packet_tx_enqueue+0x68>
    3eda:	bf00      	nop
    3edc:	20000620 	.word	0x20000620

00003ee0 <connection_release>:
{
    3ee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    3ee2:	2201      	movs	r2, #1
{
    3ee4:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    3ee6:	4611      	mov	r1, r2
    3ee8:	2000      	movs	r0, #0
    3eea:	f7fe fc4b 	bl	2784 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    3eee:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    3ef2:	2100      	movs	r1, #0
    3ef4:	f242 3349 	movw	r3, #9033	; 0x2349
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    3ef8:	3207      	adds	r2, #7
	ticker_status =
    3efa:	9300      	str	r3, [sp, #0]
    3efc:	4608      	mov	r0, r1
    3efe:	4b37      	ldr	r3, [pc, #220]	; (3fdc <connection_release+0xfc>)
    3f00:	b2d2      	uxtb	r2, r2
    3f02:	f7ff fa99 	bl	3438 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3f06:	f030 0102 	bics.w	r1, r0, #2
    3f0a:	d005      	beq.n	3f18 <connection_release+0x38>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3f0c:	4040      	eors	r0, r0
    3f0e:	f380 8811 	msr	BASEPRI, r0
    3f12:	f04f 0004 	mov.w	r0, #4
    3f16:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    3f18:	4b31      	ldr	r3, [pc, #196]	; (3fe0 <connection_release+0x100>)
    3f1a:	7d5a      	ldrb	r2, [r3, #21]
    3f1c:	2a05      	cmp	r2, #5
    3f1e:	461d      	mov	r5, r3
    3f20:	d11b      	bne.n	3f5a <connection_release+0x7a>
					  conn->handle))) {
    3f22:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    3f24:	7c58      	ldrb	r0, [r3, #17]
    3f26:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    3f28:	4290      	cmp	r0, r2
    3f2a:	d116      	bne.n	3f5a <connection_release+0x7a>
		_radio.ticker_id_prepare = 0;
    3f2c:	7459      	strb	r1, [r3, #17]
		ticker_status =
    3f2e:	f242 335a 	movw	r3, #9050	; 0x235a
    3f32:	9300      	str	r3, [sp, #0]
    3f34:	2201      	movs	r2, #1
    3f36:	4b29      	ldr	r3, [pc, #164]	; (3fdc <connection_release+0xfc>)
    3f38:	4608      	mov	r0, r1
    3f3a:	f7ff fa7d 	bl	3438 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3f3e:	f030 0202 	bics.w	r2, r0, #2
    3f42:	d1e3      	bne.n	3f0c <connection_release+0x2c>
		ticker_status =
    3f44:	f242 3361 	movw	r3, #9057	; 0x2361
    3f48:	9300      	str	r3, [sp, #0]
    3f4a:	4611      	mov	r1, r2
    3f4c:	4b23      	ldr	r3, [pc, #140]	; (3fdc <connection_release+0xfc>)
    3f4e:	4610      	mov	r0, r2
    3f50:	f7ff fa72 	bl	3438 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3f54:	f030 0302 	bics.w	r3, r0, #2
    3f58:	d1d8      	bne.n	3f0c <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    3f5a:	e9d4 133b 	ldrd	r1, r3, [r4, #236]	; 0xec
    3f5e:	4299      	cmp	r1, r3
    3f60:	d003      	beq.n	3f6a <connection_release+0x8a>
    3f62:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    3f66:	4299      	cmp	r1, r3
    3f68:	d101      	bne.n	3f6e <connection_release+0x8e>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    3f6a:	4e1e      	ldr	r6, [pc, #120]	; (3fe4 <connection_release+0x104>)
    3f6c:	e010      	b.n	3f90 <connection_release+0xb0>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    3f6e:	790b      	ldrb	r3, [r1, #4]
    3f70:	f36f 0301 	bfc	r3, #0, #2
    3f74:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    3f76:	680b      	ldr	r3, [r1, #0]
    3f78:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		pdu_node_tx_release(conn->handle, node_tx);
    3f7c:	8c20      	ldrh	r0, [r4, #32]
    3f7e:	f7ff ff3b 	bl	3df8 <pdu_node_tx_release>
    3f82:	e7ea      	b.n	3f5a <connection_release+0x7a>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    3f84:	6803      	ldr	r3, [r0, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    3f86:	4631      	mov	r1, r6
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    3f88:	e9c4 333b 	strd	r3, r3, [r4, #236]	; 0xec
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    3f8c:	f7fe fb85 	bl	269a <mem_release>
	while ((conn->pkt_tx_head) &&
    3f90:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    3f94:	b118      	cbz	r0, 3f9e <connection_release+0xbe>
    3f96:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    3f9a:	4298      	cmp	r0, r3
    3f9c:	d1f2      	bne.n	3f84 <connection_release+0xa4>
	conn->pkt_tx_ctrl = NULL;
    3f9e:	2300      	movs	r3, #0
	conn->pkt_tx_ctrl_last = NULL;
    3fa0:	e9c4 333c 	strd	r3, r3, [r4, #240]	; 0xf0
	while (conn->pkt_tx_head) {
    3fa4:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    3fa8:	b951      	cbnz	r1, 3fc0 <connection_release+0xe0>
	conn->handle = 0xffff;
    3faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3fae:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    3fb0:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
    3fb4:	42a3      	cmp	r3, r4
		_radio.conn_upd = NULL;
    3fb6:	bf08      	it	eq
    3fb8:	f8c5 1180 	streq.w	r1, [r5, #384]	; 0x180
}
    3fbc:	b002      	add	sp, #8
    3fbe:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    3fc0:	790b      	ldrb	r3, [r1, #4]
    3fc2:	f36f 0301 	bfc	r3, #0, #2
    3fc6:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    3fc8:	680b      	ldr	r3, [r1, #0]
    3fca:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_data = conn->pkt_tx_head;
    3fce:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		pdu_node_tx_release(conn->handle, node_tx);
    3fd2:	8c20      	ldrh	r0, [r4, #32]
    3fd4:	f7ff ff10 	bl	3df8 <pdu_node_tx_release>
    3fd8:	e7e4      	b.n	3fa4 <connection_release+0xc4>
    3fda:	bf00      	nop
    3fdc:	00003bed 	.word	0x00003bed
    3fe0:	20000620 	.word	0x20000620
    3fe4:	20000774 	.word	0x20000774

00003fe8 <tx_packet_set>:
{
    3fe8:	b538      	push	{r3, r4, r5, lr}
    3fea:	4605      	mov	r5, r0
    3fec:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
    3fee:	2100      	movs	r1, #0
    3ff0:	4608      	mov	r0, r1
    3ff2:	f004 fc93 	bl	891c <radio_phy_set>
	if (conn->enc_tx) {
    3ff6:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    3ffa:	069b      	lsls	r3, r3, #26
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    3ffc:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_tx) {
    4000:	d50c      	bpl.n	401c <tx_packet_set+0x34>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    4002:	211f      	movs	r1, #31
    4004:	2008      	movs	r0, #8
    4006:	f004 fccf 	bl	89a8 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    400a:	4621      	mov	r1, r4
    400c:	f105 00ca 	add.w	r0, r5, #202	; 0xca
    4010:	f004 ff40 	bl	8e94 <radio_ccm_tx_pkt_set>
}
    4014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_tx_set(pdu_data_tx);
    4018:	f004 bcfa 	b.w	8a10 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    401c:	2008      	movs	r0, #8
    401e:	211b      	movs	r1, #27
    4020:	f004 fcc2 	bl	89a8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    4024:	4620      	mov	r0, r4
    4026:	e7f5      	b.n	4014 <tx_packet_set+0x2c>

00004028 <chan_set>:
	switch (chan) {
    4028:	2826      	cmp	r0, #38	; 0x26
{
    402a:	b510      	push	{r4, lr}
    402c:	4604      	mov	r4, r0
	switch (chan) {
    402e:	d00b      	beq.n	4048 <chan_set+0x20>
    4030:	2827      	cmp	r0, #39	; 0x27
    4032:	d00b      	beq.n	404c <chan_set+0x24>
    4034:	2825      	cmp	r0, #37	; 0x25
    4036:	d10b      	bne.n	4050 <chan_set+0x28>
		radio_freq_chan_set(2);
    4038:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    403a:	f004 fc85 	bl	8948 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    403e:	4620      	mov	r0, r4
}
    4040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    4044:	f004 bc86 	b.w	8954 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    4048:	201a      	movs	r0, #26
    404a:	e7f6      	b.n	403a <chan_set+0x12>
		radio_freq_chan_set(80);
    404c:	2050      	movs	r0, #80	; 0x50
    404e:	e7f4      	b.n	403a <chan_set+0x12>
		if (chan < 11) {
    4050:	280a      	cmp	r0, #10
    4052:	d802      	bhi.n	405a <chan_set+0x32>
			radio_freq_chan_set(4 + (2 * chan));
    4054:	3002      	adds	r0, #2
    4056:	0040      	lsls	r0, r0, #1
    4058:	e7ef      	b.n	403a <chan_set+0x12>
		} else if (chan < 40) {
    405a:	2827      	cmp	r0, #39	; 0x27
    405c:	d801      	bhi.n	4062 <chan_set+0x3a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    405e:	3003      	adds	r0, #3
    4060:	e7f9      	b.n	4056 <chan_set+0x2e>
    4062:	f7ff fdbd 	bl	3be0 <chan_set.part.24>
	...

00004068 <adv_setup>:
{
    4068:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
    406a:	4c2a      	ldr	r4, [pc, #168]	; (4114 <adv_setup+0xac>)
    406c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    4070:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
    4074:	429a      	cmp	r2, r3
    4076:	d006      	beq.n	4086 <adv_setup+0x1e>
		first = _radio.advertiser.adv_data.first + 1;
    4078:	3301      	adds	r3, #1
    407a:	b2db      	uxtb	r3, r3
			first = 0;
    407c:	2b02      	cmp	r3, #2
    407e:	bf08      	it	eq
    4080:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    4082:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	if (_radio.advertiser.scan_data.first != _radio.
    4086:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    408a:	f894 20c9 	ldrb.w	r2, [r4, #201]	; 0xc9
    408e:	429a      	cmp	r2, r3
    4090:	d006      	beq.n	40a0 <adv_setup+0x38>
		first = _radio.advertiser.scan_data.first + 1;
    4092:	3301      	adds	r3, #1
    4094:	b2db      	uxtb	r3, r3
			first = 0;
    4096:	2b02      	cmp	r3, #2
    4098:	bf08      	it	eq
    409a:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    409c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	pdu = (void *)_radio.advertiser.adv_data.data
    40a0:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    40a4:	232a      	movs	r3, #42	; 0x2a
    40a6:	2527      	movs	r5, #39	; 0x27
    40a8:	fb15 3502 	smlabb	r5, r5, r2, r3
	radio_pkt_tx_set(pdu);
    40ac:	1960      	adds	r0, r4, r5
    40ae:	f004 fcaf 	bl	8a10 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    40b2:	5d63      	ldrb	r3, [r4, r5]
    40b4:	f003 030f 	and.w	r3, r3, #15
    40b8:	2b02      	cmp	r3, #2
    40ba:	d023      	beq.n	4104 <adv_setup+0x9c>
    40bc:	2b07      	cmp	r3, #7
    40be:	d021      	beq.n	4104 <adv_setup+0x9c>
		_radio.state = STATE_TX;
    40c0:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    40c2:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    40c4:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
    40c6:	f004 fdad 	bl	8c24 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    40ca:	2000      	movs	r0, #0
    40cc:	f004 fd1a 	bl	8b04 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    40d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    40d4:	f3c3 0202 	ubfx	r2, r3, #0, #3
    40d8:	b2d3      	uxtb	r3, r2
    40da:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    40dc:	2000      	movs	r0, #0
    40de:	f011 0f01 	tst.w	r1, #1
    40e2:	f100 0501 	add.w	r5, r0, #1
    40e6:	d012      	beq.n	410e <adv_setup+0xa6>
		(_radio.advertiser.chan_map_current - 1);
    40e8:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    40ea:	4013      	ands	r3, r2
    40ec:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    40f0:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    40f2:	f363 0202 	bfi	r2, r3, #0, #3
    40f6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    40fa:	3025      	adds	r0, #37	; 0x25
}
    40fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	chan_set(37 + chan);
    4100:	f7ff bf92 	b.w	4028 <chan_set>
		_radio.state = STATE_CLOSE;
    4104:	2303      	movs	r3, #3
    4106:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
    4108:	f004 fd12 	bl	8b30 <radio_switch_complete_and_disable>
    410c:	e7e0      	b.n	40d0 <adv_setup+0x68>
		bitmap >>= 1;
    410e:	0849      	lsrs	r1, r1, #1
    4110:	4628      	mov	r0, r5
    4112:	e7e4      	b.n	40de <adv_setup+0x76>
    4114:	20000620 	.word	0x20000620

00004118 <sched_after_mstr_free_offset_get>:
{
    4118:	b573      	push	{r0, r1, r4, r5, r6, lr}
    411a:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    411c:	aa02      	add	r2, sp, #8
{
    411e:	461c      	mov	r4, r3
    4120:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    4122:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    4126:	3127      	adds	r1, #39	; 0x27
    4128:	2001      	movs	r0, #1
    412a:	f7ff fc89 	bl	3a40 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    412e:	6823      	ldr	r3, [r4, #0]
    4130:	b1fb      	cbz	r3, 4172 <sched_after_mstr_free_offset_get+0x5a>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    4132:	9801      	ldr	r0, [sp, #4]
    4134:	1b83      	subs	r3, r0, r6
    4136:	021b      	lsls	r3, r3, #8
    4138:	d501      	bpl.n	413e <sched_after_mstr_free_offset_get+0x26>
    413a:	f7ff fd51 	bl	3be0 <chan_set.part.24>
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    413e:	4631      	mov	r1, r6
    4140:	f7ff fa44 	bl	35cc <ticker_ticks_diff_get>
    4144:	4602      	mov	r2, r0
    4146:	4810      	ldr	r0, [pc, #64]	; (4188 <sched_after_mstr_free_offset_get+0x70>)
    4148:	2307      	movs	r3, #7
    414a:	fba2 0100 	umull	r0, r1, r2, r0
    414e:	fb03 1102 	mla	r1, r3, r2, r1
    4152:	a30b      	add	r3, pc, #44	; (adr r3, 4180 <sched_after_mstr_free_offset_get+0x68>)
    4154:	e9d3 2300 	ldrd	r2, r3, [r3]
    4158:	f7fc f8ac 	bl	2b4 <__aeabi_uldivmod>
    415c:	6823      	ldr	r3, [r4, #0]
    415e:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    4160:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    4162:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    4164:	db05      	blt.n	4172 <sched_after_mstr_free_offset_get+0x5a>
		u32_t conn_interval_us = conn_interval * 1250;
    4166:	f240 40e2 	movw	r0, #1250	; 0x4e2
    416a:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    416c:	6823      	ldr	r3, [r4, #0]
    416e:	4283      	cmp	r3, r0
    4170:	d801      	bhi.n	4176 <sched_after_mstr_free_offset_get+0x5e>
}
    4172:	b002      	add	sp, #8
    4174:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    4176:	1a1b      	subs	r3, r3, r0
    4178:	6023      	str	r3, [r4, #0]
    417a:	e7f7      	b.n	416c <sched_after_mstr_free_offset_get+0x54>
    417c:	f3af 8000 	nop.w
    4180:	3b9aca00 	.word	0x3b9aca00
    4184:	00000000 	.word	0x00000000
    4188:	1afd498d 	.word	0x1afd498d

0000418c <mayfly_sched_win_offset_use>:
{
    418c:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    418e:	f100 036c 	add.w	r3, r0, #108	; 0x6c
{
    4192:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    4194:	6f82      	ldr	r2, [r0, #120]	; 0x78
    4196:	68c1      	ldr	r1, [r0, #12]
    4198:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    419a:	f7ff ffbd 	bl	4118 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    419e:	a902      	add	r1, sp, #8
    41a0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    41a2:	6f60      	ldr	r0, [r4, #116]	; 0x74
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    41a4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    41a8:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    41ac:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    41ae:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    41b2:	f7fd fe14 	bl	1dde <memcpy>
}
    41b6:	b002      	add	sp, #8
    41b8:	bd10      	pop	{r4, pc}
	...

000041bc <ticker_stop_adv_stop>:
{
    41bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    41be:	4c3e      	ldr	r4, [pc, #248]	; (42b8 <ticker_stop_adv_stop+0xfc>)
	if (status != TICKER_STATUS_SUCCESS) {
    41c0:	b120      	cbz	r0, 41cc <ticker_stop_adv_stop+0x10>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    41c2:	7ce3      	ldrb	r3, [r4, #19]
    41c4:	2b05      	cmp	r3, #5
    41c6:	d075      	beq.n	42b4 <ticker_stop_adv_stop+0xf8>
    41c8:	f7ff fd0a 	bl	3be0 <chan_set.part.24>
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    41cc:	7c63      	ldrb	r3, [r4, #17]
    41ce:	2b05      	cmp	r3, #5
    41d0:	d002      	beq.n	41d8 <ticker_stop_adv_stop+0x1c>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    41d2:	7ca3      	ldrb	r3, [r4, #18]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    41d4:	2b05      	cmp	r3, #5
    41d6:	d165      	bne.n	42a4 <ticker_stop_adv_stop+0xe8>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    41d8:	ab04      	add	r3, sp, #16
    41da:	2202      	movs	r2, #2
    41dc:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    41e0:	2200      	movs	r2, #0
    41e2:	9300      	str	r3, [sp, #0]
    41e4:	2101      	movs	r1, #1
    41e6:	4b35      	ldr	r3, [pc, #212]	; (42bc <ticker_stop_adv_stop+0x100>)
    41e8:	4610      	mov	r0, r2
    41ea:	f7ff f925 	bl	3438 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    41ee:	2802      	cmp	r0, #2
    41f0:	d00d      	beq.n	420e <ticker_stop_adv_stop+0x52>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    41f2:	9802      	ldr	r0, [sp, #8]
    41f4:	b1c0      	cbz	r0, 4228 <ticker_stop_adv_stop+0x6c>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    41f6:	9802      	ldr	r0, [sp, #8]
    41f8:	2801      	cmp	r0, #1
    41fa:	d119      	bne.n	4230 <ticker_stop_adv_stop+0x74>
		if (_radio.role != ROLE_NONE) {
    41fc:	7d23      	ldrb	r3, [r4, #20]
    41fe:	2b00      	cmp	r3, #0
    4200:	d050      	beq.n	42a4 <ticker_stop_adv_stop+0xe8>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    4202:	4b2f      	ldr	r3, [pc, #188]	; (42c0 <ticker_stop_adv_stop+0x104>)
    4204:	2204      	movs	r2, #4
    4206:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4208:	2200      	movs	r2, #0
    420a:	4611      	mov	r1, r2
    420c:	e046      	b.n	429c <ticker_stop_adv_stop+0xe0>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    420e:	2201      	movs	r2, #1
    4210:	4611      	mov	r1, r2
    4212:	4610      	mov	r0, r2
    4214:	f7fe fab6 	bl	2784 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    4218:	9b02      	ldr	r3, [sp, #8]
    421a:	2b02      	cmp	r3, #2
    421c:	d1e9      	bne.n	41f2 <ticker_stop_adv_stop+0x36>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    421e:	2101      	movs	r1, #1
    4220:	2000      	movs	r0, #0
    4222:	f7ff f9bb 	bl	359c <ticker_job_sched>
    4226:	e7f7      	b.n	4218 <ticker_stop_adv_stop+0x5c>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    4228:	2302      	movs	r3, #2
    422a:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    422c:	7c63      	ldrb	r3, [r4, #17]
    422e:	b92b      	cbnz	r3, 423c <ticker_stop_adv_stop+0x80>
	LL_ASSERT(!retval);
    4230:	4040      	eors	r0, r0
    4232:	f380 8811 	msr	BASEPRI, r0
    4236:	f04f 0004 	mov.w	r0, #4
    423a:	df02      	svc	2
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    423c:	ab03      	add	r3, sp, #12
    423e:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
    4240:	7460      	strb	r0, [r4, #17]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4242:	4611      	mov	r1, r2
    4244:	9300      	str	r3, [sp, #0]
    4246:	4b1d      	ldr	r3, [pc, #116]	; (42bc <ticker_stop_adv_stop+0x100>)
    4248:	f7ff f8f6 	bl	3438 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    424c:	2802      	cmp	r0, #2
    424e:	d00f      	beq.n	4270 <ticker_stop_adv_stop+0xb4>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    4250:	9a03      	ldr	r2, [sp, #12]
    4252:	b1d2      	cbz	r2, 428a <ticker_stop_adv_stop+0xce>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    4254:	9c03      	ldr	r4, [sp, #12]
    4256:	2c01      	cmp	r4, #1
    4258:	d1ea      	bne.n	4230 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    425a:	2200      	movs	r2, #0
    425c:	4611      	mov	r1, r2
    425e:	4b19      	ldr	r3, [pc, #100]	; (42c4 <ticker_stop_adv_stop+0x108>)
    4260:	4620      	mov	r0, r4
    4262:	f7fe fab7 	bl	27d4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    4266:	4602      	mov	r2, r0
    4268:	2800      	cmp	r0, #0
    426a:	d1e1      	bne.n	4230 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    426c:	4b16      	ldr	r3, [pc, #88]	; (42c8 <ticker_stop_adv_stop+0x10c>)
    426e:	e013      	b.n	4298 <ticker_stop_adv_stop+0xdc>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    4270:	2201      	movs	r2, #1
    4272:	4611      	mov	r1, r2
    4274:	4610      	mov	r0, r2
    4276:	f7fe fa85 	bl	2784 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    427a:	9b03      	ldr	r3, [sp, #12]
    427c:	2b02      	cmp	r3, #2
    427e:	d1e7      	bne.n	4250 <ticker_stop_adv_stop+0x94>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    4280:	2101      	movs	r1, #1
    4282:	2000      	movs	r0, #0
    4284:	f7ff f98a 	bl	359c <ticker_job_sched>
    4288:	e7f7      	b.n	427a <ticker_stop_adv_stop+0xbe>
			u32_t ticks_xtal_to_start =
    428a:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    428c:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
    428e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
    4292:	428b      	cmp	r3, r1
    4294:	d2ea      	bcs.n	426c <ticker_stop_adv_stop+0xb0>
				ret = mayfly_enqueue(
    4296:	4b0b      	ldr	r3, [pc, #44]	; (42c4 <ticker_stop_adv_stop+0x108>)
    4298:	4611      	mov	r1, r2
    429a:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    429c:	f7fe fa9a 	bl	27d4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    42a0:	2800      	cmp	r0, #0
    42a2:	d1c5      	bne.n	4230 <ticker_stop_adv_stop+0x74>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    42a4:	2200      	movs	r2, #0
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <ticker_stop_adv_stop+0x110>)
    42a8:	4611      	mov	r1, r2
    42aa:	2001      	movs	r0, #1
    42ac:	f7fe fa92 	bl	27d4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    42b0:	2800      	cmp	r0, #0
    42b2:	d1bd      	bne.n	4230 <ticker_stop_adv_stop+0x74>
}
    42b4:	b004      	add	sp, #16
    42b6:	bd10      	pop	{r4, pc}
    42b8:	20000620 	.word	0x20000620
    42bc:	0000368d 	.word	0x0000368d
    42c0:	20002e28 	.word	0x20002e28
    42c4:	20002df8 	.word	0x20002df8
    42c8:	20002e98 	.word	0x20002e98
    42cc:	20002dc8 	.word	0x20002dc8

000042d0 <isr_scan_tgta_check.isra.31>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    42d0:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    42d2:	4c16      	ldr	r4, [pc, #88]	; (432c <isr_scan_tgta_check.isra.31+0x5c>)
    42d4:	7803      	ldrb	r3, [r0, #0]
    42d6:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    42da:	09db      	lsrs	r3, r3, #7
    42dc:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    42e0:	4605      	mov	r5, r0
    42e2:	460e      	mov	r6, r1
			BDADDR_SIZE) == 0))) ||
    42e4:	d007      	beq.n	42f6 <isr_scan_tgta_check.isra.31+0x26>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    42e6:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
    42ea:	f3c0 1001 	ubfx	r0, r0, #4, #2
    42ee:	f010 0002 	ands.w	r0, r0, #2
    42f2:	d10b      	bne.n	430c <isr_scan_tgta_check.isra.31+0x3c>
}
    42f4:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
    42f6:	f100 0108 	add.w	r1, r0, #8
    42fa:	2206      	movs	r2, #6
    42fc:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
    4300:	f7fd fd5d 	bl	1dbe <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    4304:	2800      	cmp	r0, #0
    4306:	d1ee      	bne.n	42e6 <isr_scan_tgta_check.isra.31+0x16>
			BDADDR_SIZE) == 0))) ||
    4308:	2001      	movs	r0, #1
    430a:	e7f3      	b.n	42f4 <isr_scan_tgta_check.isra.31+0x24>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    430c:	f995 3000 	ldrsb.w	r3, [r5]
    4310:	2b00      	cmp	r3, #0
    4312:	da09      	bge.n	4328 <isr_scan_tgta_check.isra.31+0x58>
	    (pdu->rx_addr != 0) &&
    4314:	7b6b      	ldrb	r3, [r5, #13]
    4316:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    431a:	2b40      	cmp	r3, #64	; 0x40
    431c:	d104      	bne.n	4328 <isr_scan_tgta_check.isra.31+0x58>
		if (dir_report) {
    431e:	2e00      	cmp	r6, #0
    4320:	d0f2      	beq.n	4308 <isr_scan_tgta_check.isra.31+0x38>
			*dir_report = true;
    4322:	2001      	movs	r0, #1
    4324:	7030      	strb	r0, [r6, #0]
    4326:	e7e5      	b.n	42f4 <isr_scan_tgta_check.isra.31+0x24>
			BDADDR_SIZE) == 0))) ||
    4328:	2000      	movs	r0, #0
    432a:	e7e3      	b.n	42f4 <isr_scan_tgta_check.isra.31+0x24>
    432c:	20000620 	.word	0x20000620

00004330 <packet_rx_enqueue>:
{
    4330:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    4332:	4a16      	ldr	r2, [pc, #88]	; (438c <packet_rx_enqueue+0x5c>)
    4334:	f892 3139 	ldrb.w	r3, [r2, #313]	; 0x139
    4338:	f892 113a 	ldrb.w	r1, [r2, #314]	; 0x13a
    433c:	4299      	cmp	r1, r3
    433e:	d101      	bne.n	4344 <packet_rx_enqueue+0x14>
    4340:	f7ff fc4e 	bl	3be0 <chan_set.part.24>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    4344:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
    4348:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
    434c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4350:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
	link = node_rx->hdr.onion.link;
    4354:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4356:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    4358:	f892 3139 	ldrb.w	r3, [r2, #313]	; 0x139
	if (last == _radio.packet_rx_count) {
    435c:	f892 4138 	ldrb.w	r4, [r2, #312]	; 0x138
	last = _radio.packet_rx_last + 1;
    4360:	3301      	adds	r3, #1
    4362:	b2db      	uxtb	r3, r3
		last = 0;
    4364:	429c      	cmp	r4, r3
    4366:	bf08      	it	eq
    4368:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    436a:	f882 3139 	strb.w	r3, [r2, #313]	; 0x139
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    436e:	f502 72a4 	add.w	r2, r2, #328	; 0x148
    4372:	f7fe f9c1 	bl	26f8 <memq_enqueue>
	LL_ASSERT(link);
    4376:	b928      	cbnz	r0, 4384 <packet_rx_enqueue+0x54>
    4378:	4040      	eors	r0, r0
    437a:	f380 8811 	msr	BASEPRI, r0
    437e:	f04f 0004 	mov.w	r0, #4
    4382:	df02      	svc	2
}
    4384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    4388:	f003 b888 	b.w	749c <radio_event_callback>
    438c:	20000620 	.word	0x20000620

00004390 <mayfly_adv_stop>:
{
    4390:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
    4392:	2001      	movs	r0, #1
    4394:	f7ff f9ac 	bl	36f0 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
    4398:	4604      	mov	r4, r0
    439a:	b908      	cbnz	r0, 43a0 <mayfly_adv_stop+0x10>
    439c:	f7ff fc20 	bl	3be0 <chan_set.part.24>
	node_rx->hdr.handle = 0xffff;
    43a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    43a4:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    43a6:	2306      	movs	r3, #6
    43a8:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    43aa:	2210      	movs	r2, #16
    43ac:	2100      	movs	r1, #0
    43ae:	300b      	adds	r0, #11
    43b0:	f7fd fd42 	bl	1e38 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    43b4:	233c      	movs	r3, #60	; 0x3c
    43b6:	72e3      	strb	r3, [r4, #11]
}
    43b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
    43bc:	f7ff bfb8 	b.w	4330 <packet_rx_enqueue>

000043c0 <terminate_ind_rx_enqueue>:
{
    43c0:	4603      	mov	r3, r0
    43c2:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    43c4:	f100 019c 	add.w	r1, r0, #156	; 0x9c
	LL_ASSERT(node_rx->hdr.onion.link);
    43c8:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
{
    43cc:	b510      	push	{r4, lr}
	LL_ASSERT(node_rx->hdr.onion.link);
    43ce:	b908      	cbnz	r0, 43d4 <terminate_ind_rx_enqueue+0x14>
    43d0:	f7ff fc06 	bl	3be0 <chan_set.part.24>
	node_rx->hdr.handle = conn->handle;
    43d4:	8c1c      	ldrh	r4, [r3, #32]
    43d6:	f8a3 40a2 	strh.w	r4, [r3, #162]	; 0xa2
	*((u8_t *)node_rx->pdu_data) = reason;
    43da:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    43de:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    43e0:	4a0a      	ldr	r2, [pc, #40]	; (440c <terminate_ind_rx_enqueue+0x4c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    43e2:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    43e6:	f892 4170 	ldrb.w	r4, [r2, #368]	; 0x170
    43ea:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    43ee:	f502 72a4 	add.w	r2, r2, #328	; 0x148
    43f2:	f7fe f981 	bl	26f8 <memq_enqueue>
	LL_ASSERT(link);
    43f6:	b928      	cbnz	r0, 4404 <terminate_ind_rx_enqueue+0x44>
    43f8:	4040      	eors	r0, r0
    43fa:	f380 8811 	msr	BASEPRI, r0
    43fe:	f04f 0004 	mov.w	r0, #4
    4402:	df02      	svc	2
}
    4404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    4408:	f003 b848 	b.w	749c <radio_event_callback>
    440c:	20000620 	.word	0x20000620

00004410 <isr.part.45>:
			LL_ASSERT(0);
    4410:	4040      	eors	r0, r0
    4412:	f380 8811 	msr	BASEPRI, r0
    4416:	f04f 0004 	mov.w	r0, #4
    441a:	df02      	svc	2

0000441c <isr_rx_scan_report.isra.38>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    441c:	b570      	push	{r4, r5, r6, lr}
    441e:	4606      	mov	r6, r0
	node_rx = packet_rx_reserve_get(3);
    4420:	2003      	movs	r0, #3
    4422:	f7ff f965 	bl	36f0 <packet_rx_reserve_get>
	if (node_rx == 0) {
    4426:	4604      	mov	r4, r0
    4428:	b320      	cbz	r0, 4474 <isr_rx_scan_report.isra.38+0x58>
	node_rx->hdr.handle = 0xffff;
    442a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    442e:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    4430:	4b11      	ldr	r3, [pc, #68]	; (4478 <isr_rx_scan_report.isra.38+0x5c>)
    4432:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    4436:	075a      	lsls	r2, r3, #29
    4438:	d018      	beq.n	446c <isr_rx_scan_report.isra.38+0x50>
		switch (_radio.scanner.phy) {
    443a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    443e:	b2da      	uxtb	r2, r3
    4440:	2a01      	cmp	r2, #1
    4442:	d003      	beq.n	444c <isr_rx_scan_report.isra.38+0x30>
    4444:	2a04      	cmp	r2, #4
    4446:	d002      	beq.n	444e <isr_rx_scan_report.isra.38+0x32>
    4448:	f7ff ffe2 	bl	4410 <isr.part.45>
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    444c:	2303      	movs	r3, #3
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    444e:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    4450:	f104 0508 	add.w	r5, r4, #8
			     pdu_adv_rx->len] =
    4454:	b166      	cbz	r6, 4470 <isr_rx_scan_report.isra.38+0x54>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    4456:	f004 fb83 	bl	8b60 <radio_rssi_get>
			     pdu_adv_rx->len] =
    445a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    445e:	7a63      	ldrb	r3, [r4, #9]
    4460:	441d      	add	r5, r3
    4462:	70a8      	strb	r0, [r5, #2]
	packet_rx_enqueue();
    4464:	f7ff ff64 	bl	4330 <packet_rx_enqueue>
	return 0;
    4468:	2000      	movs	r0, #0
}
    446a:	bd70      	pop	{r4, r5, r6, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    446c:	2302      	movs	r3, #2
    446e:	e7ee      	b.n	444e <isr_rx_scan_report.isra.38+0x32>
			     pdu_adv_rx->len] =
    4470:	207f      	movs	r0, #127	; 0x7f
    4472:	e7f4      	b.n	445e <isr_rx_scan_report.isra.38+0x42>
		return 1;
    4474:	2001      	movs	r0, #1
    4476:	e7f8      	b.n	446a <isr_rx_scan_report.isra.38+0x4e>
    4478:	20000620 	.word	0x20000620

0000447c <prepare_normal_set>:
{
    447c:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    447e:	6804      	ldr	r4, [r0, #0]
    4480:	2c00      	cmp	r4, #0
{
    4482:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    4484:	da19      	bge.n	44ba <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    4486:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    448a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    448e:	429d      	cmp	r5, r3
    4490:	bf34      	ite	cc
    4492:	1ae4      	subcc	r4, r4, r3
    4494:	1b64      	subcs	r4, r4, r5
		ticker_status =
    4496:	4b0a      	ldr	r3, [pc, #40]	; (44c0 <prepare_normal_set+0x44>)
    4498:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    449a:	b2a4      	uxth	r4, r4
		ticker_status =
    449c:	2300      	movs	r3, #0
    449e:	9006      	str	r0, [sp, #24]
    44a0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    44a4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    44a8:	4618      	mov	r0, r3
    44aa:	9400      	str	r4, [sp, #0]
    44ac:	f7fe ff7a 	bl	33a4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    44b0:	f030 0302 	bics.w	r3, r0, #2
    44b4:	d001      	beq.n	44ba <prepare_normal_set+0x3e>
    44b6:	f7ff fb93 	bl	3be0 <chan_set.part.24>
}
    44ba:	b009      	add	sp, #36	; 0x24
    44bc:	bd30      	pop	{r4, r5, pc}
    44be:	bf00      	nop
    44c0:	000036ad 	.word	0x000036ad

000044c4 <adv_scan_configure.constprop.49>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    44c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    44c6:	ad02      	add	r5, sp, #8
    44c8:	4b10      	ldr	r3, [pc, #64]	; (450c <adv_scan_configure.constprop.49+0x48>)
    44ca:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    44ce:	4604      	mov	r4, r0
	radio_reset();
    44d0:	f004 fa0a 	bl	88e8 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    44d4:	2000      	movs	r0, #0
    44d6:	f004 fa31 	bl	893c <radio_tx_power_set>
	radio_isr_set(isr);
    44da:	480d      	ldr	r0, [pc, #52]	; (4510 <adv_scan_configure.constprop.49+0x4c>)
    44dc:	f004 f9ce 	bl	887c <radio_isr_set>
	radio_phy_set(phy, flags);
    44e0:	2101      	movs	r1, #1
    44e2:	4620      	mov	r0, r4
    44e4:	f004 fa1a 	bl	891c <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    44e8:	4628      	mov	r0, r5
    44ea:	f004 fa45 	bl	8978 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    44ee:	0062      	lsls	r2, r4, #1
    44f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    44f4:	2125      	movs	r1, #37	; 0x25
    44f6:	2008      	movs	r0, #8
    44f8:	f004 fa56 	bl	89a8 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    44fc:	4905      	ldr	r1, [pc, #20]	; (4514 <adv_scan_configure.constprop.49+0x50>)
    44fe:	f240 605b 	movw	r0, #1627	; 0x65b
    4502:	f004 fae1 	bl	8ac8 <radio_crc_configure>
}
    4506:	b003      	add	sp, #12
    4508:	bd30      	pop	{r4, r5, pc}
    450a:	bf00      	nop
    450c:	8e89bed6 	.word	0x8e89bed6
    4510:	00005459 	.word	0x00005459
    4514:	00555555 	.word	0x00555555

00004518 <event_stop.constprop.50>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    4518:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    451a:	4b05      	ldr	r3, [pc, #20]	; (4530 <event_stop.constprop.50+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    451c:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    451e:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4520:	4611      	mov	r1, r2
    4522:	4610      	mov	r0, r2
    4524:	f7fe f956 	bl	27d4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    4528:	b108      	cbz	r0, 452e <event_stop.constprop.50+0x16>
    452a:	f7ff fb59 	bl	3be0 <chan_set.part.24>
}
    452e:	bd08      	pop	{r3, pc}
    4530:	20002e18 	.word	0x20002e18

00004534 <event_common_prepare>:
{
    4534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    4538:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    453a:	681d      	ldr	r5, [r3, #0]
{
    453c:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    453e:	2c00      	cmp	r4, #0
{
    4540:	4681      	mov	r9, r0
    4542:	910b      	str	r1, [sp, #44]	; 0x2c
    4544:	4690      	mov	r8, r2
    4546:	469b      	mov	fp, r3
    4548:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    454c:	da03      	bge.n	4556 <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    454e:	9c16      	ldr	r4, [sp, #88]	; 0x58
    4550:	42ac      	cmp	r4, r5
    4552:	bf38      	it	cc
    4554:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    4556:	42ac      	cmp	r4, r5
    4558:	4f4e      	ldr	r7, [pc, #312]	; (4694 <event_common_prepare+0x160>)
    455a:	d91b      	bls.n	4594 <event_common_prepare+0x60>
		ticker_status =
    455c:	f241 538d 	movw	r3, #5517	; 0x158d
    4560:	e9cd 7307 	strd	r7, r3, [sp, #28]
    4564:	4b4c      	ldr	r3, [pc, #304]	; (4698 <event_common_prepare+0x164>)
    4566:	2100      	movs	r1, #0
    4568:	e9cd 1304 	strd	r1, r3, [sp, #16]
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    456c:	1b63      	subs	r3, r4, r5
		ticker_status =
    456e:	9300      	str	r3, [sp, #0]
    4570:	9106      	str	r1, [sp, #24]
    4572:	464b      	mov	r3, r9
    4574:	e9cd 1102 	strd	r1, r1, [sp, #8]
    4578:	9101      	str	r1, [sp, #4]
    457a:	2201      	movs	r2, #1
    457c:	4608      	mov	r0, r1
    457e:	f7fe fec7 	bl	3310 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4582:	f030 0302 	bics.w	r3, r0, #2
    4586:	d02b      	beq.n	45e0 <event_common_prepare+0xac>
		LL_ASSERT(!retval);
    4588:	4040      	eors	r0, r0
    458a:	f380 8811 	msr	BASEPRI, r0
    458e:	f04f 0004 	mov.w	r0, #4
    4592:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    4594:	d21d      	bcs.n	45d2 <event_common_prepare+0x9e>
		event_active(0, 0, 0, NULL);
    4596:	2300      	movs	r3, #0
    4598:	461a      	mov	r2, r3
    459a:	4619      	mov	r1, r3
    459c:	4618      	mov	r0, r3
    459e:	f7ff fbb7 	bl	3d10 <event_active>
		ticker_status =
    45a2:	f241 53a2 	movw	r3, #5538	; 0x15a2
    45a6:	e9cd 7307 	strd	r7, r3, [sp, #28]
    45aa:	4b3c      	ldr	r3, [pc, #240]	; (469c <event_common_prepare+0x168>)
    45ac:	2100      	movs	r1, #0
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    45ae:	1b2c      	subs	r4, r5, r4
		ticker_status =
    45b0:	e9cd 1304 	strd	r1, r3, [sp, #16]
    45b4:	9106      	str	r1, [sp, #24]
    45b6:	464b      	mov	r3, r9
    45b8:	e9cd 1102 	strd	r1, r1, [sp, #8]
    45bc:	e9cd 4100 	strd	r4, r1, [sp]
    45c0:	2201      	movs	r2, #1
    45c2:	4608      	mov	r0, r1
    45c4:	f7fe fea4 	bl	3310 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    45c8:	f030 0302 	bics.w	r3, r0, #2
    45cc:	d1dc      	bne.n	4588 <event_common_prepare+0x54>
    45ce:	462c      	mov	r4, r5
    45d0:	e00b      	b.n	45ea <event_common_prepare+0xb6>
		event_active(0, 0, 0, NULL);
    45d2:	2300      	movs	r3, #0
    45d4:	461a      	mov	r2, r3
    45d6:	4619      	mov	r1, r3
    45d8:	4618      	mov	r0, r3
    45da:	f7ff fb99 	bl	3d10 <event_active>
		event_xtal(0, 0, 0, NULL);
    45de:	2300      	movs	r3, #0
    45e0:	461a      	mov	r2, r3
    45e2:	4619      	mov	r1, r3
    45e4:	4618      	mov	r0, r3
    45e6:	f7ff fba1 	bl	3d2c <event_xtal>
	_radio.remainder_anchor = remainder;
    45ea:	4e2d      	ldr	r6, [pc, #180]	; (46a0 <event_common_prepare+0x16c>)
    45ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    45ee:	60f3      	str	r3, [r6, #12]
	ticker_status =
    45f0:	f241 53ba 	movw	r3, #5562	; 0x15ba
    45f4:	e9cd 7307 	strd	r7, r3, [sp, #28]
    45f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    45fa:	9306      	str	r3, [sp, #24]
    45fc:	2200      	movs	r2, #0
    45fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4600:	9305      	str	r3, [sp, #20]
    4602:	e9cd 2203 	strd	r2, r2, [sp, #12]
    4606:	464b      	mov	r3, r9
    4608:	e9cd 2201 	strd	r2, r2, [sp, #4]
    460c:	9400      	str	r4, [sp, #0]
    460e:	4611      	mov	r1, r2
    4610:	4610      	mov	r0, r2
    4612:	f7fe fe7d 	bl	3310 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4616:	f030 0302 	bics.w	r3, r0, #2
    461a:	d1b5      	bne.n	4588 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    461c:	2005      	movs	r0, #5
    461e:	f7ff ff7b 	bl	4518 <event_stop.constprop.50>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    4622:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
    4626:	42ab      	cmp	r3, r5
    4628:	d023      	beq.n	4672 <event_common_prepare+0x13e>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    462a:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    462e:	f8d8 3000 	ldr.w	r3, [r8]
    4632:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    4634:	bfbc      	itt	lt
    4636:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    463a:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    463e:	f8d8 2000 	ldr.w	r2, [r8]
    4642:	f8d6 117c 	ldr.w	r1, [r6, #380]	; 0x17c
    4646:	428a      	cmp	r2, r1
    4648:	bf38      	it	cc
    464a:	460a      	movcc	r2, r1
		ticker_status =
    464c:	f241 51e8 	movw	r1, #5608	; 0x15e8
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    4650:	b2a3      	uxth	r3, r4
    4652:	b292      	uxth	r2, r2
		ticker_status =
    4654:	e9cd 7105 	strd	r7, r1, [sp, #20]
    4658:	2100      	movs	r1, #0
    465a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    465e:	9200      	str	r2, [sp, #0]
    4660:	e9cd 1103 	strd	r1, r1, [sp, #12]
    4664:	4652      	mov	r2, sl
    4666:	4608      	mov	r0, r1
    4668:	f7fe fe9c 	bl	33a4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    466c:	f030 0302 	bics.w	r3, r0, #2
    4670:	d18a      	bne.n	4588 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    4672:	20ff      	movs	r0, #255	; 0xff
    4674:	f7ff fbe4 	bl	3e40 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    4678:	4b0a      	ldr	r3, [pc, #40]	; (46a4 <event_common_prepare+0x170>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    467a:	2201      	movs	r2, #1
    467c:	4611      	mov	r1, r2
    467e:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    4680:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4684:	f7fe f8a6 	bl	27d4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    4688:	2800      	cmp	r0, #0
    468a:	f47f af7d 	bne.w	4588 <event_common_prepare+0x54>
}
    468e:	b00d      	add	sp, #52	; 0x34
    4690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4694:	00003bed 	.word	0x00003bed
    4698:	00003d11 	.word	0x00003d11
    469c:	00003d2d 	.word	0x00003d2d
    46a0:	20000620 	.word	0x20000620
    46a4:	20002eb8 	.word	0x20002eb8

000046a8 <radio_event_adv_prepare>:
{
    46a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    46aa:	4a0b      	ldr	r2, [pc, #44]	; (46d8 <radio_event_adv_prepare+0x30>)
    46ac:	7c53      	ldrb	r3, [r2, #17]
    46ae:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    46b2:	b10b      	cbz	r3, 46b8 <radio_event_adv_prepare+0x10>
    46b4:	f7ff fa94 	bl	3be0 <chan_set.part.24>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    46b8:	2305      	movs	r3, #5
    46ba:	7453      	strb	r3, [r2, #17]
	event_common_prepare(ticks_at_expire, remainder,
    46bc:	9403      	str	r4, [sp, #12]
    46be:	4c07      	ldr	r4, [pc, #28]	; (46dc <radio_event_adv_prepare+0x34>)
    46c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
    46c4:	6a13      	ldr	r3, [r2, #32]
    46c6:	9300      	str	r3, [sp, #0]
    46c8:	f102 031c 	add.w	r3, r2, #28
    46cc:	3218      	adds	r2, #24
    46ce:	f7ff ff31 	bl	4534 <event_common_prepare>
}
    46d2:	b004      	add	sp, #16
    46d4:	bd10      	pop	{r4, pc}
    46d6:	bf00      	nop
    46d8:	20000620 	.word	0x20000620
    46dc:	00004985 	.word	0x00004985

000046e0 <event_adv_stop>:
{
    46e0:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    46e2:	2005      	movs	r0, #5
    46e4:	f7ff ff18 	bl	4518 <event_stop.constprop.50>
	ticker_status =
    46e8:	f641 03f2 	movw	r3, #6386	; 0x18f2
    46ec:	2100      	movs	r1, #0
    46ee:	9300      	str	r3, [sp, #0]
    46f0:	2205      	movs	r2, #5
    46f2:	4b06      	ldr	r3, [pc, #24]	; (470c <event_adv_stop+0x2c>)
    46f4:	4608      	mov	r0, r1
    46f6:	f7fe fe9f 	bl	3438 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    46fa:	f030 0302 	bics.w	r3, r0, #2
    46fe:	d001      	beq.n	4704 <event_adv_stop+0x24>
    4700:	f7ff fa6e 	bl	3be0 <chan_set.part.24>
}
    4704:	b003      	add	sp, #12
    4706:	f85d fb04 	ldr.w	pc, [sp], #4
    470a:	bf00      	nop
    470c:	000041bd 	.word	0x000041bd

00004710 <packet_rx_allocate.constprop.51>:
static void packet_rx_allocate(u8_t max)
    4710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    4714:	4d21      	ldr	r5, [pc, #132]	; (479c <packet_rx_allocate.constprop.51+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
    4716:	f895 413a 	ldrb.w	r4, [r5, #314]	; 0x13a
	if (acquire == _radio.packet_rx_count) {
    471a:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
	if (max > _radio.link_rx_data_quota) {
    471e:	f895 914c 	ldrb.w	r9, [r5, #332]	; 0x14c
	acquire = _radio.packet_rx_acquire + 1;
    4722:	3401      	adds	r4, #1
    4724:	b2e4      	uxtb	r4, r4
		acquire = 0;
    4726:	42a3      	cmp	r3, r4
    4728:	bf08      	it	eq
    472a:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
    472c:	f505 77a0 	add.w	r7, r5, #320	; 0x140
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    4730:	f505 7894 	add.w	r8, r5, #296	; 0x128
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    4734:	f1b9 0f00 	cmp.w	r9, #0
    4738:	d003      	beq.n	4742 <packet_rx_allocate.constprop.51+0x32>
    473a:	f895 3139 	ldrb.w	r3, [r5, #313]	; 0x139
    473e:	429c      	cmp	r4, r3
    4740:	d101      	bne.n	4746 <packet_rx_allocate.constprop.51+0x36>
}
    4742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    4746:	4638      	mov	r0, r7
    4748:	f7fd ff8e 	bl	2668 <mem_acquire>
		if (!link) {
    474c:	4606      	mov	r6, r0
    474e:	2800      	cmp	r0, #0
    4750:	d0f7      	beq.n	4742 <packet_rx_allocate.constprop.51+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    4752:	4640      	mov	r0, r8
    4754:	f7fd ff88 	bl	2668 <mem_acquire>
		if (!node_rx) {
    4758:	b928      	cbnz	r0, 4766 <packet_rx_allocate.constprop.51+0x56>
			mem_release(link, &_radio.link_rx_free);
    475a:	4630      	mov	r0, r6
    475c:	4910      	ldr	r1, [pc, #64]	; (47a0 <packet_rx_allocate.constprop.51+0x90>)
}
    475e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    4762:	f7fd bf9a 	b.w	269a <mem_release>
		node_rx->hdr.onion.link = link;
    4766:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    4768:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
    476c:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    4770:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    4774:	f885 413a 	strb.w	r4, [r5, #314]	; 0x13a
		if (acquire == _radio.packet_rx_count) {
    4778:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
		acquire = _radio.packet_rx_acquire + 1;
    477c:	3401      	adds	r4, #1
    477e:	b2e4      	uxtb	r4, r4
			acquire = 0;
    4780:	42a3      	cmp	r3, r4
    4782:	bf08      	it	eq
    4784:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    4786:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
    478a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    478e:	3b01      	subs	r3, #1
    4790:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
    4794:	fa5f f989 	uxtb.w	r9, r9
    4798:	e7cc      	b.n	4734 <packet_rx_allocate.constprop.51+0x24>
    479a:	bf00      	nop
    479c:	20000620 	.word	0x20000620
    47a0:	20000760 	.word	0x20000760

000047a4 <common_init>:
{
    47a4:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    47a6:	4c2c      	ldr	r4, [pc, #176]	; (4858 <common_init+0xb4>)
    47a8:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    47ac:	2a00      	cmp	r2, #0
    47ae:	d037      	beq.n	4820 <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    47b0:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    47b4:	f44f 7182 	mov.w	r1, #260	; 0x104
    47b8:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    47bc:	f7fd ff30 	bl	2620 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    47c0:	4b26      	ldr	r3, [pc, #152]	; (485c <common_init+0xb8>)
    47c2:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
    47c6:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    47ca:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    47ce:	f7fd ff27 	bl	2620 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    47d2:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
    47d6:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    47da:	4b21      	ldr	r3, [pc, #132]	; (4860 <common_init+0xbc>)
    47dc:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    47e0:	440a      	add	r2, r1
    47e2:	2108      	movs	r1, #8
    47e4:	f7fd ff1c 	bl	2620 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    47e8:	4b1e      	ldr	r3, [pc, #120]	; (4864 <common_init+0xc0>)
    47ea:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    47ee:	2202      	movs	r2, #2
    47f0:	2124      	movs	r1, #36	; 0x24
    47f2:	f7fd ff15 	bl	2620 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    47f6:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    47fa:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    47fe:	4b1a      	ldr	r3, [pc, #104]	; (4868 <common_init+0xc4>)
    4800:	f8b4 1160 	ldrh.w	r1, [r4, #352]	; 0x160
    4804:	3a01      	subs	r2, #1
    4806:	b292      	uxth	r2, r2
    4808:	f7fd ff0a 	bl	2620 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    480c:	4814      	ldr	r0, [pc, #80]	; (4860 <common_init+0xbc>)
    480e:	f7fd ff2b 	bl	2668 <mem_acquire>
	LL_ASSERT(link);
    4812:	b940      	cbnz	r0, 4826 <common_init+0x82>
    4814:	4040      	eors	r0, r0
    4816:	f380 8811 	msr	BASEPRI, r0
    481a:	f04f 0004 	mov.w	r0, #4
    481e:	df02      	svc	2
		_radio.conn_free = NULL;
    4820:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    4824:	e7cc      	b.n	47c0 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    4826:	4a11      	ldr	r2, [pc, #68]	; (486c <common_init+0xc8>)
    4828:	1f11      	subs	r1, r2, #4
    482a:	f7fd ff62 	bl	26f2 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    482e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    4832:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    4836:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
    483a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    483e:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    4842:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    4846:	f242 531f 	movw	r3, #9503	; 0x251f
    484a:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
}
    484e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    4852:	f7ff bf5d 	b.w	4710 <packet_rx_allocate.constprop.51>
    4856:	bf00      	nop
    4858:	20000620 	.word	0x20000620
    485c:	20000748 	.word	0x20000748
    4860:	20000760 	.word	0x20000760
    4864:	20000774 	.word	0x20000774
    4868:	2000077c 	.word	0x2000077c
    486c:	20000768 	.word	0x20000768

00004870 <k32src_wait>:
{
    4870:	b510      	push	{r4, lr}
	if (!_radio.is_k32src_stable) {
    4872:	4b0b      	ldr	r3, [pc, #44]	; (48a0 <k32src_wait+0x30>)
    4874:	7c1a      	ldrb	r2, [r3, #16]
    4876:	b98a      	cbnz	r2, 489c <k32src_wait+0x2c>
		_radio.is_k32src_stable = 1;
    4878:	2201      	movs	r2, #1
		clk_k32 = device_get_binding(DRV_NAME);
    487a:	480a      	ldr	r0, [pc, #40]	; (48a4 <k32src_wait+0x34>)
		_radio.is_k32src_stable = 1;
    487c:	741a      	strb	r2, [r3, #16]
		clk_k32 = device_get_binding(DRV_NAME);
    487e:	f005 f8bd 	bl	99fc <device_get_binding>
		LL_ASSERT(clk_k32);
    4882:	4604      	mov	r4, r0
    4884:	b918      	cbnz	r0, 488e <k32src_wait+0x1e>
    4886:	f7ff f9ab 	bl	3be0 <chan_set.part.24>
			cpu_sleep();
    488a:	f7fe fedd 	bl	3648 <cpu_sleep>
    488e:	6863      	ldr	r3, [r4, #4]
    4890:	2101      	movs	r1, #1
    4892:	681b      	ldr	r3, [r3, #0]
    4894:	4620      	mov	r0, r4
    4896:	4798      	blx	r3
		while (clock_control_on(clk_k32, (void *)K32SRC)) {
    4898:	2800      	cmp	r0, #0
    489a:	d1f6      	bne.n	488a <k32src_wait+0x1a>
}
    489c:	bd10      	pop	{r4, pc}
    489e:	bf00      	nop
    48a0:	20000620 	.word	0x20000620
    48a4:	0000ae0c 	.word	0x0000ae0c

000048a8 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    48a8:	4b02      	ldr	r3, [pc, #8]	; (48b4 <mayfly_xtal_stop+0xc>)
    48aa:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    48ac:	6843      	ldr	r3, [r0, #4]
    48ae:	2100      	movs	r1, #0
    48b0:	685b      	ldr	r3, [r3, #4]
    48b2:	4718      	bx	r3
    48b4:	20000620 	.word	0x20000620

000048b8 <chan_sel_2>:
{
    48b8:	b4f0      	push	{r4, r5, r6, r7}
	prn_e = counter ^ chan_id;
    48ba:	4048      	eors	r0, r1
    48bc:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    48be:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    48c2:	2608      	movs	r6, #8
	o = 0;
    48c4:	2400      	movs	r4, #0
		o |= (i & 1);
    48c6:	f00c 0501 	and.w	r5, ip, #1
    48ca:	3e01      	subs	r6, #1
    48cc:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    48d0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    48d4:	b2ec      	uxtb	r4, r5
		i >>= 1;
    48d6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    48da:	d1f4      	bne.n	48c6 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    48dc:	0225      	lsls	r5, r4, #8
    48de:	b22d      	sxth	r5, r5
    48e0:	b2c0      	uxtb	r0, r0
    48e2:	f04f 0c08 	mov.w	ip, #8
	o = 0;
    48e6:	4634      	mov	r4, r6
		o |= (i & 1);
    48e8:	f000 0601 	and.w	r6, r0, #1
    48ec:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    48f0:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    48f4:	f016 0cff 	ands.w	ip, r6, #255	; 0xff
		o |= (i & 1);
    48f8:	b2e4      	uxtb	r4, r4
		i >>= 1;
    48fa:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    48fe:	d1f3      	bne.n	48e8 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    4900:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    4902:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    4906:	3f01      	subs	r7, #1
    4908:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    490a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    490e:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    4910:	d1d5      	bne.n	48be <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    4912:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    4914:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    4916:	fbb1 f0f4 	udiv	r0, r1, r4
    491a:	fb04 1010 	mls	r0, r4, r0, r1
    491e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    4920:	08c4      	lsrs	r4, r0, #3
    4922:	f000 0507 	and.w	r5, r0, #7
    4926:	5d14      	ldrb	r4, [r2, r4]
    4928:	412c      	asrs	r4, r5
    492a:	07e4      	lsls	r4, r4, #31
    492c:	d405      	bmi.n	493a <chan_sel_2+0x82>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    492e:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    4930:	0c09      	lsrs	r1, r1, #16
    4932:	4610      	mov	r0, r2
}
    4934:	bcf0      	pop	{r4, r5, r6, r7}
		chan_next = chan_sel_remap(chan_map, chan_index);
    4936:	f7fe bebf 	b.w	36b8 <chan_sel_remap>
}
    493a:	bcf0      	pop	{r4, r5, r6, r7}
    493c:	4770      	bx	lr
	...

00004940 <preempt_calc>:
{
    4940:	b570      	push	{r4, r5, r6, lr}
    4942:	4614      	mov	r4, r2
    4944:	460e      	mov	r6, r1
    4946:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    4948:	f7fe fe3e 	bl	35c8 <ticker_ticks_now_get>
	u32_t diff =
    494c:	4621      	mov	r1, r4
    494e:	f7fe fe3d 	bl	35cc <ticker_ticks_diff_get>
	diff += 3;
    4952:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    4954:	2c09      	cmp	r4, #9
    4956:	d911      	bls.n	497c <preempt_calc+0x3c>
		if (s_xtal_retained) {
    4958:	4b09      	ldr	r3, [pc, #36]	; (4980 <preempt_calc+0x40>)
    495a:	781b      	ldrb	r3, [r3, #0]
    495c:	b113      	cbz	r3, 4964 <preempt_calc+0x24>
    495e:	2000      	movs	r0, #0
    4960:	f7ff f9bc 	bl	3cdc <mayfly_xtal_retain.part.16>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    4964:	4632      	mov	r2, r6
    4966:	2100      	movs	r1, #0
    4968:	4628      	mov	r0, r5
    496a:	f7ff fd87 	bl	447c <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    496e:	68ab      	ldr	r3, [r5, #8]
    4970:	441c      	add	r4, r3
		if (diff <
    4972:	2c26      	cmp	r4, #38	; 0x26
    4974:	d800      	bhi.n	4978 <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
    4976:	60ac      	str	r4, [r5, #8]
		return 1;
    4978:	2001      	movs	r0, #1
    497a:	e000      	b.n	497e <preempt_calc+0x3e>
	return 0;
    497c:	2000      	movs	r0, #0
}
    497e:	bd70      	pop	{r4, r5, r6, pc}
    4980:	20000828 	.word	0x20000828

00004984 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    4984:	4b29      	ldr	r3, [pc, #164]	; (4a2c <event_adv+0xa8>)
    4986:	7d1a      	ldrb	r2, [r3, #20]
{
    4988:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    498a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
    498e:	4605      	mov	r5, r0
    4990:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    4992:	b12a      	cbz	r2, 49a0 <event_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4994:	4040      	eors	r0, r0
    4996:	f380 8811 	msr	BASEPRI, r0
    499a:	f04f 0004 	mov.w	r0, #4
    499e:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    49a0:	7c5b      	ldrb	r3, [r3, #17]
    49a2:	b2db      	uxtb	r3, r3
    49a4:	2b05      	cmp	r3, #5
    49a6:	d1f5      	bne.n	4994 <event_adv+0x10>
	_radio.ticks_anchor = ticks_at_expire;
    49a8:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    49aa:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    49ae:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    49b0:	f000 0007 	and.w	r0, r0, #7
	_radio.role = ROLE_ADV;
    49b4:	7526      	strb	r6, [r4, #20]
	_radio.ticker_id_prepare = 0;
    49b6:	7461      	strb	r1, [r4, #17]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    49b8:	74a3      	strb	r3, [r4, #18]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    49ba:	f7ff fd83 	bl	44c4 <adv_scan_configure.constprop.49>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    49be:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    49c2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    49c6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    49ca:	f363 0202 	bfi	r2, r3, #0, #3
    49ce:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    49d2:	f7ff fb49 	bl	4068 <adv_setup>
	if (_radio.advertiser.filter_policy) {
    49d6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    49da:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    49de:	d007      	beq.n	49f0 <event_adv+0x6c>
		struct ll_filter *wl = ctrl_filter_get(true);
    49e0:	4630      	mov	r0, r6
    49e2:	f003 fd89 	bl	84f8 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    49e6:	1c82      	adds	r2, r0, #2
    49e8:	7841      	ldrb	r1, [r0, #1]
    49ea:	7800      	ldrb	r0, [r0, #0]
    49ec:	f004 f8d0 	bl	8b90 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    49f0:	68e2      	ldr	r2, [r4, #12]
    49f2:	f105 0109 	add.w	r1, r5, #9
    49f6:	2001      	movs	r0, #1
    49f8:	f004 f920 	bl	8c3c <radio_tmr_start>
	radio_tmr_end_capture();
    49fc:	f004 f9f0 	bl	8de0 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    4a00:	462a      	mov	r2, r5
    4a02:	2105      	movs	r1, #5
    4a04:	480a      	ldr	r0, [pc, #40]	; (4a30 <event_adv+0xac>)
    4a06:	f7ff ff9b 	bl	4940 <preempt_calc>
    4a0a:	4603      	mov	r3, r0
    4a0c:	b128      	cbz	r0, 4a1a <event_adv+0x96>
		_radio.state = STATE_STOP;
    4a0e:	2304      	movs	r3, #4
    4a10:	7563      	strb	r3, [r4, #21]
}
    4a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    4a16:	f004 b81b 	b.w	8a50 <radio_disable>
		ticker_status =
    4a1a:	4a06      	ldr	r2, [pc, #24]	; (4a34 <event_adv+0xb0>)
    4a1c:	4601      	mov	r1, r0
    4a1e:	f7fe fd83 	bl	3528 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4a22:	f030 0302 	bics.w	r3, r0, #2
    4a26:	d1b5      	bne.n	4994 <event_adv+0x10>
}
    4a28:	bd70      	pop	{r4, r5, r6, pc}
    4a2a:	bf00      	nop
    4a2c:	20000620 	.word	0x20000620
    4a30:	20000638 	.word	0x20000638
    4a34:	00003c89 	.word	0x00003c89

00004a38 <connection_configure>:
{
    4a38:	b510      	push	{r4, lr}
    4a3a:	4604      	mov	r4, r0
	radio_reset();
    4a3c:	f003 ff54 	bl	88e8 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    4a40:	2000      	movs	r0, #0
    4a42:	f003 ff7b 	bl	893c <radio_tx_power_set>
	radio_isr_set(isr);
    4a46:	480a      	ldr	r0, [pc, #40]	; (4a70 <connection_configure+0x38>)
    4a48:	f003 ff18 	bl	887c <radio_isr_set>
	radio_aa_set(conn->access_addr);
    4a4c:	f104 0010 	add.w	r0, r4, #16
    4a50:	f003 ff92 	bl	8978 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    4a54:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    4a56:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    4a58:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    4a5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    4a5e:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    4a60:	f240 605b 	movw	r0, #1627	; 0x65b
    4a64:	4319      	orrs	r1, r3
}
    4a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    4a6a:	f004 b82d 	b.w	8ac8 <radio_crc_configure>
    4a6e:	bf00      	nop
    4a70:	00005459 	.word	0x00005459

00004a74 <event_slave>:
{
    4a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4a78:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    4a7a:	4b58      	ldr	r3, [pc, #352]	; (4bdc <event_slave+0x168>)
    4a7c:	7d1a      	ldrb	r2, [r3, #20]
{
    4a7e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    4a80:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    4a84:	461d      	mov	r5, r3
    4a86:	b12a      	cbz	r2, 4a94 <event_slave+0x20>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4a88:	4040      	eors	r0, r0
    4a8a:	f380 8811 	msr	BASEPRI, r0
    4a8e:	f04f 0004 	mov.w	r0, #4
    4a92:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    4a94:	7c5a      	ldrb	r2, [r3, #17]
    4a96:	8c23      	ldrh	r3, [r4, #32]
    4a98:	b2d2      	uxtb	r2, r2
    4a9a:	3307      	adds	r3, #7
    4a9c:	429a      	cmp	r2, r3
    4a9e:	d1f3      	bne.n	4a88 <event_slave+0x14>
	_radio.role = ROLE_SLAVE;
    4aa0:	2303      	movs	r3, #3
    4aa2:	752b      	strb	r3, [r5, #20]
	_radio.packet_counter = 0;
    4aa4:	f8a5 6118 	strh.w	r6, [r5, #280]	; 0x118
	_radio.state = STATE_RX;
    4aa8:	2301      	movs	r3, #1
    4aaa:	756b      	strb	r3, [r5, #21]
	conn->latency_event = conn->latency_prepare;
    4aac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    4aae:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    4ab2:	b2d2      	uxtb	r2, r2
	conn->latency_event = conn->latency_prepare;
    4ab4:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    4ab6:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    4ab8:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    4aba:	4620      	mov	r0, r4
	_radio.ticker_id_prepare = 0;
    4abc:	746e      	strb	r6, [r5, #17]
	_radio.ticker_id_event =
    4abe:	74aa      	strb	r2, [r5, #18]
	connection_configure(conn);
    4ac0:	f7ff ffba 	bl	4a38 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    4ac4:	2096      	movs	r0, #150	; 0x96
    4ac6:	f004 f8ad 	bl	8c24 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    4aca:	4633      	mov	r3, r6
    4acc:	4632      	mov	r2, r6
    4ace:	4631      	mov	r1, r6
    4ad0:	4630      	mov	r0, r6
    4ad2:	f004 f823 	bl	8b1c <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    4ad6:	f895 2139 	ldrb.w	r2, [r5, #313]	; 0x139
    4ada:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    4ade:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    4ae2:	4620      	mov	r0, r4
    4ae4:	3108      	adds	r1, #8
    4ae6:	f7ff f965 	bl	3db4 <rx_packet_set>
	if (conn->data_chan_sel) {
    4aea:	7f63      	ldrb	r3, [r4, #29]
    4aec:	0658      	lsls	r0, r3, #25
    4aee:	f104 0217 	add.w	r2, r4, #23
    4af2:	d54a      	bpl.n	4b8a <event_slave+0x116>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    4af4:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    4af6:	8be1      	ldrh	r1, [r4, #30]
    4af8:	3801      	subs	r0, #1
    4afa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4afe:	b280      	uxth	r0, r0
    4b00:	f7ff feda 	bl	48b8 <chan_sel_2>
	chan_set(data_chan_use);
    4b04:	f7ff fa90 	bl	4028 <chan_set>
	conn->slave.window_widening_event_us +=
    4b08:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
    4b0c:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    4b0e:	2200      	movs	r2, #0
    4b10:	6462      	str	r2, [r4, #68]	; 0x44
	    conn->slave.window_widening_max_us) {
    4b12:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
    4b14:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
    4b16:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    4b18:	bf88      	it	hi
    4b1a:	64a2      	strhi	r2, [r4, #72]	; 0x48
	conn->slave.window_size_event_us +=
    4b1c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
	conn->slave.window_size_prepare_us = 0;
    4b20:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    4b22:	4413      	add	r3, r2
    4b24:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    4b26:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    4b28:	64e6      	str	r6, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    4b2a:	f107 0109 	add.w	r1, r7, #9
    4b2e:	4630      	mov	r0, r6
    4b30:	f004 f884 	bl	8c3c <radio_tmr_start>
    4b34:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    4b36:	f004 f91f 	bl	8d78 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    4b3a:	4630      	mov	r0, r6
    4b3c:	f004 f93e 	bl	8dbc <radio_tmr_aa_save>
    4b40:	6d23      	ldr	r3, [r4, #80]	; 0x50
	       (conn->slave.window_widening_event_us << 1) +
    4b42:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    4b44:	3378      	adds	r3, #120	; 0x78
	hcto += radio_rx_ready_delay_get(0, 0);
    4b46:	4631      	mov	r1, r6
    4b48:	4630      	mov	r0, r6
    4b4a:	eb03 0942 	add.w	r9, r3, r2, lsl #1
    4b4e:	f003 ff6c 	bl	8a2a <radio_rx_ready_delay_get>
    4b52:	44c8      	add	r8, r9
	hcto += radio_rx_chain_delay_get(0, 0);
    4b54:	4631      	mov	r1, r6
    4b56:	4480      	add	r8, r0
    4b58:	4630      	mov	r0, r6
    4b5a:	f003 ff68 	bl	8a2e <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    4b5e:	4440      	add	r0, r8
    4b60:	f004 f8ec 	bl	8d3c <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    4b64:	f894 1020 	ldrb.w	r1, [r4, #32]
    4b68:	3107      	adds	r1, #7
    4b6a:	463a      	mov	r2, r7
    4b6c:	b2c9      	uxtb	r1, r1
    4b6e:	4620      	mov	r0, r4
    4b70:	f7ff fee6 	bl	4940 <preempt_calc>
    4b74:	4603      	mov	r3, r0
    4b76:	b340      	cbz	r0, 4bca <event_slave+0x156>
		_radio.state = STATE_STOP;
    4b78:	2304      	movs	r3, #4
    4b7a:	756b      	strb	r3, [r5, #21]
		radio_disable();
    4b7c:	f003 ff68 	bl	8a50 <radio_disable>
	packet_tx_enqueue(2);
    4b80:	2002      	movs	r0, #2
}
    4b82:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
    4b86:	f7ff b95b 	b.w	3e40 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    4b8a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    4b8c:	7fa6      	ldrb	r6, [r4, #30]
    4b8e:	fb01 6606 	mla	r6, r1, r6, r6
    4b92:	7fe1      	ldrb	r1, [r4, #31]
    4b94:	2025      	movs	r0, #37	; 0x25
    4b96:	440e      	add	r6, r1
    4b98:	fb96 f1f0 	sdiv	r1, r6, r0
    4b9c:	fb00 6611 	mls	r6, r0, r1, r6
    4ba0:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    4ba2:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    4ba4:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    4ba6:	5c51      	ldrb	r1, [r2, r1]
    4ba8:	f006 0607 	and.w	r6, r6, #7
    4bac:	fa41 f606 	asr.w	r6, r1, r6
    4bb0:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    4bb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    4bb6:	d4a5      	bmi.n	4b04 <event_slave+0x90>
		chan_index = chan_next % chan_count;
    4bb8:	fbb0 f1f3 	udiv	r1, r0, r3
    4bbc:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    4bc0:	b2c9      	uxtb	r1, r1
    4bc2:	4610      	mov	r0, r2
    4bc4:	f7fe fd78 	bl	36b8 <chan_sel_remap>
    4bc8:	e79c      	b.n	4b04 <event_slave+0x90>
		ticker_status =
    4bca:	4a05      	ldr	r2, [pc, #20]	; (4be0 <event_slave+0x16c>)
    4bcc:	4601      	mov	r1, r0
    4bce:	f7fe fcab 	bl	3528 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4bd2:	f030 0302 	bics.w	r3, r0, #2
    4bd6:	f47f af57 	bne.w	4a88 <event_slave+0x14>
    4bda:	e7d1      	b.n	4b80 <event_slave+0x10c>
    4bdc:	20000620 	.word	0x20000620
    4be0:	00003c89 	.word	0x00003c89

00004be4 <ctrl_tx_enqueue>:
{
    4be4:	b510      	push	{r4, lr}
	    !conn->empty &&
    4be6:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    4bea:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
	if (
    4bee:	f014 0f80 	tst.w	r4, #128	; 0x80
    4bf2:	d118      	bne.n	4c26 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    4bf4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	    !conn->empty &&
    4bf8:	b1ab      	cbz	r3, 4c26 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    4bfa:	0724      	lsls	r4, r4, #28
    4bfc:	d413      	bmi.n	4c26 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    4bfe:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    4c02:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    4c04:	bf04      	itt	eq
    4c06:	681c      	ldreq	r4, [r3, #0]
    4c08:	f8c0 40f8 	streq.w	r4, [r0, #248]	; 0xf8
		if (!conn->pkt_tx_ctrl) {
    4c0c:	b992      	cbnz	r2, 4c34 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    4c0e:	681a      	ldr	r2, [r3, #0]
    4c10:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    4c12:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    4c14:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = node_tx;
    4c18:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
	if (node_tx->next == 0) {
    4c1c:	680b      	ldr	r3, [r1, #0]
    4c1e:	b90b      	cbnz	r3, 4c24 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    4c20:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
}
    4c24:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    4c26:	b92a      	cbnz	r2, 4c34 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    4c28:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
    4c2c:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    4c2e:	f8c0 10ec 	str.w	r1, [r0, #236]	; 0xec
    4c32:	e7ef      	b.n	4c14 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    4c34:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    4c38:	681a      	ldr	r2, [r3, #0]
    4c3a:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    4c3c:	6019      	str	r1, [r3, #0]
    4c3e:	e7eb      	b.n	4c18 <ctrl_tx_enqueue+0x34>

00004c40 <ctrl_tx_sec_enqueue>:
{
    4c40:	b410      	push	{r4}
	if (conn->pause_tx) {
    4c42:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    4c46:	0724      	lsls	r4, r4, #28
{
    4c48:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    4c4a:	d50f      	bpl.n	4c6c <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    4c4c:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
    4c50:	b931      	cbnz	r1, 4c60 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    4c52:	f8d0 10ec 	ldr.w	r1, [r0, #236]	; 0xec
    4c56:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    4c58:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
}
    4c5c:	bc10      	pop	{r4}
    4c5e:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    4c60:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    4c64:	6819      	ldr	r1, [r3, #0]
    4c66:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    4c68:	601a      	str	r2, [r3, #0]
    4c6a:	e7f7      	b.n	4c5c <ctrl_tx_sec_enqueue+0x1c>
}
    4c6c:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    4c6e:	f7ff bfb9 	b.w	4be4 <ctrl_tx_enqueue>
	...

00004c74 <feature_rsp_send>:
{
    4c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    4c76:	4f21      	ldr	r7, [pc, #132]	; (4cfc <feature_rsp_send+0x88>)
{
    4c78:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    4c7a:	f507 70aa 	add.w	r0, r7, #340	; 0x154
{
    4c7e:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    4c80:	f7fd fcf2 	bl	2668 <mem_acquire>
	if (!node_tx) {
    4c84:	4604      	mov	r4, r0
    4c86:	b3b0      	cbz	r0, 4cf6 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    4c88:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    4c8a:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    4c8c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    4c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    4c94:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    4c98:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    4c9c:	f043 0310 	orr.w	r3, r3, #16
    4ca0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    4ca4:	79b1      	ldrb	r1, [r6, #6]
    4ca6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    4caa:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    4cae:	f3c1 0110 	ubfx	r1, r1, #0, #17
    4cb2:	400b      	ands	r3, r1
    4cb4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	_radio.conn_curr->common.fex_valid = 1;
    4cb8:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    4cbc:	f043 0320 	orr.w	r3, r3, #32
    4cc0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    4cc4:	7903      	ldrb	r3, [r0, #4]
    4cc6:	f043 0303 	orr.w	r3, r3, #3
    4cca:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    4ccc:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    4cce:	2309      	movs	r3, #9
    4cd0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    4cd2:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    4cd4:	2100      	movs	r1, #0
    4cd6:	4410      	add	r0, r2
    4cd8:	f7fd f8ae 	bl	1e38 <memset>
		conn->llcp_features & 0xFF;
    4cdc:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    4ce0:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    4ce2:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    4ce4:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    4ce6:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    4ce8:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    4cea:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    4cec:	4621      	mov	r1, r4
    4cee:	f7ff ffa7 	bl	4c40 <ctrl_tx_sec_enqueue>
	return 0;
    4cf2:	2000      	movs	r0, #0
}
    4cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    4cf6:	2001      	movs	r0, #1
    4cf8:	e7fc      	b.n	4cf4 <feature_rsp_send+0x80>
    4cfa:	bf00      	nop
    4cfc:	20000620 	.word	0x20000620

00004d00 <event_connection_prepare>:
{
    4d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    4d04:	4d6f      	ldr	r5, [pc, #444]	; (4ec4 <event_connection_prepare+0x1c4>)
{
    4d06:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    4d08:	7c6b      	ldrb	r3, [r5, #17]
{
    4d0a:	b08f      	sub	sp, #60	; 0x3c
    4d0c:	4680      	mov	r8, r0
    4d0e:	4689      	mov	r9, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
    4d10:	b12b      	cbz	r3, 4d1e <event_connection_prepare+0x1e>
			LL_ASSERT(0);
    4d12:	4040      	eors	r0, r0
    4d14:	f380 8811 	msr	BASEPRI, r0
    4d18:	f04f 0004 	mov.w	r0, #4
    4d1c:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    4d1e:	f894 3020 	ldrb.w	r3, [r4, #32]
    4d22:	3307      	adds	r3, #7
    4d24:	b2db      	uxtb	r3, r3
    4d26:	746b      	strb	r3, [r5, #17]
	if (conn->role) {
    4d28:	f994 301d 	ldrsb.w	r3, [r4, #29]
    4d2c:	2b00      	cmp	r3, #0
    4d2e:	da09      	bge.n	4d44 <event_connection_prepare+0x44>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    4d30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->slave.window_widening_prepare_us +=
    4d32:	6c61      	ldr	r1, [r4, #68]	; 0x44
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    4d34:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    4d38:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    4d3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
    4d3c:	6463      	str	r3, [r4, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
    4d3e:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    4d40:	bf88      	it	hi
    4d42:	6461      	strhi	r1, [r4, #68]	; 0x44
	conn->latency_prepare += lazy;
    4d44:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    4d46:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    4d4a:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    4d4c:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    4d4e:	b292      	uxth	r2, r2
    4d50:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    4d52:	4432      	add	r2, r6
    4d54:	b296      	uxth	r6, r2
	if (conn->llcp_ack != conn->llcp_req) {
    4d56:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    4d5a:	429a      	cmp	r2, r3
    4d5c:	d071      	beq.n	4e42 <event_connection_prepare+0x142>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    4d5e:	2005      	movs	r0, #5
    4d60:	f7ff fbda 	bl	4518 <event_stop.constprop.50>
		switch (conn->llcp_type) {
    4d64:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    4d68:	3b01      	subs	r3, #1
    4d6a:	2b03      	cmp	r3, #3
    4d6c:	d8d1      	bhi.n	4d12 <event_connection_prepare+0x12>
    4d6e:	e8df f013 	tbh	[pc, r3, lsl #1]
    4d72:	0004      	.short	0x0004
    4d74:	0270022e 	.word	0x0270022e
    4d78:	02b9      	.short	0x02b9
	if (!conn_upd) {
    4d7a:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
    4d7e:	b90b      	cbnz	r3, 4d84 <event_connection_prepare+0x84>
		_radio.conn_upd = conn;
    4d80:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    4d84:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    4d88:	f013 0303 	ands.w	r3, r3, #3
    4d8c:	f000 80a6 	beq.w	4edc <event_connection_prepare+0x1dc>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    4d90:	484d      	ldr	r0, [pc, #308]	; (4ec8 <event_connection_prepare+0x1c8>)
    4d92:	f7fd fc69 	bl	2668 <mem_acquire>
		if (!node_tx) {
    4d96:	4605      	mov	r5, r0
    4d98:	2800      	cmp	r0, #0
    4d9a:	d052      	beq.n	4e42 <event_connection_prepare+0x142>
		switch (conn->llcp.conn_upd.state) {
    4d9c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    4da0:	f003 0203 	and.w	r2, r3, #3
    4da4:	2a01      	cmp	r2, #1
    4da6:	d1b4      	bne.n	4d12 <event_connection_prepare+0x12>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    4da8:	f36f 0301 	bfc	r3, #0, #2
    4dac:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		event_counter + conn->latency + 6;
    4db0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    4db2:	7902      	ldrb	r2, [r0, #4]
		event_counter + conn->latency + 6;
    4db4:	3306      	adds	r3, #6
    4db6:	4433      	add	r3, r6
    4db8:	b29b      	uxth	r3, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    4dba:	f042 0203 	orr.w	r2, r2, #3
	conn->llcp.conn_upd.instant =
    4dbe:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    4dc2:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    4dc4:	220c      	movs	r2, #12
    4dc6:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    4dc8:	2200      	movs	r2, #0
    4dca:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    4dcc:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
    4dd0:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    4dd2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    4dd6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    4dd8:	fbb2 f2f1 	udiv	r2, r2, r1
    4ddc:	f8a0 2009 	strh.w	r2, [r0, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    4de0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    4de4:	f8a0 200b 	strh.w	r2, [r0, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    4de8:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    4dec:	f8a0 200d 	strh.w	r2, [r0, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    4df0:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    4df4:	f8a0 200f 	strh.w	r2, [r0, #15]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    4df8:	6822      	ldr	r2, [r4, #0]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    4dfa:	f8a0 3011 	strh.w	r3, [r0, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    4dfe:	2a00      	cmp	r2, #0
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    4e00:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    4e04:	da0a      	bge.n	4e1c <event_connection_prepare+0x11c>
			u32_t ticks_prepare_to_start =
    4e06:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    4e0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    4e0e:	428b      	cmp	r3, r1
    4e10:	bf2c      	ite	cs
    4e12:	4443      	addcs	r3, r8
    4e14:	eb08 0301 	addcc.w	r3, r8, r1
    4e18:	1a9b      	subs	r3, r3, r2
    4e1a:	67a3      	str	r3, [r4, #120]	; 0x78
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    4e1c:	f105 0309 	add.w	r3, r5, #9
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    4e20:	4a2a      	ldr	r2, [pc, #168]	; (4ecc <event_connection_prepare+0x1cc>)
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    4e22:	6763      	str	r3, [r4, #116]	; 0x74
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    4e24:	4b2a      	ldr	r3, [pc, #168]	; (4ed0 <event_connection_prepare+0x1d0>)
		mayfly_sched_offset->param = (void *)conn;
    4e26:	e9c3 4202 	strd	r4, r2, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4e2a:	2201      	movs	r2, #1
    4e2c:	4611      	mov	r1, r2
    4e2e:	2000      	movs	r0, #0
    4e30:	f7fd fcd0 	bl	27d4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    4e34:	2800      	cmp	r0, #0
    4e36:	f47f af6c 	bne.w	4d12 <event_connection_prepare+0x12>
			ctrl_tx_enqueue(conn, node_tx);
    4e3a:	4629      	mov	r1, r5
    4e3c:	4620      	mov	r0, r4
    4e3e:	f7ff fed1 	bl	4be4 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    4e42:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
    4e46:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    4e4a:	429a      	cmp	r2, r3
    4e4c:	d01d      	beq.n	4e8a <event_connection_prepare+0x18a>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    4e4e:	2005      	movs	r0, #5
    4e50:	f7ff fb62 	bl	4518 <event_stop.constprop.50>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    4e54:	481c      	ldr	r0, [pc, #112]	; (4ec8 <event_connection_prepare+0x1c8>)
    4e56:	f7fd fc07 	bl	2668 <mem_acquire>
		if (node_tx) {
    4e5a:	4601      	mov	r1, r0
    4e5c:	b1a8      	cbz	r0, 4e8a <event_connection_prepare+0x18a>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    4e5e:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    4e62:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    4e66:	7903      	ldrb	r3, [r0, #4]
    4e68:	f043 0303 	orr.w	r3, r3, #3
    4e6c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    4e6e:	2302      	movs	r3, #2
    4e70:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    4e72:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    4e74:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    4e78:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    4e7a:	4620      	mov	r0, r4
    4e7c:	f7ff feb2 	bl	4be4 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    4e80:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    4e82:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    4e84:	bf98      	it	ls
    4e86:	3301      	addls	r3, #1
    4e88:	86a3      	strh	r3, [r4, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    4e8a:	f894 3020 	ldrb.w	r3, [r4, #32]
    4e8e:	f994 501d 	ldrsb.w	r5, [r4, #29]
    4e92:	4810      	ldr	r0, [pc, #64]	; (4ed4 <event_connection_prepare+0x1d4>)
    4e94:	4910      	ldr	r1, [pc, #64]	; (4ed8 <event_connection_prepare+0x1d8>)
    4e96:	68a2      	ldr	r2, [r4, #8]
    4e98:	3307      	adds	r3, #7
    4e9a:	ea31 0125 	bics.w	r1, r1, r5, asr #32
    4e9e:	bf28      	it	cs
    4ea0:	4601      	movcs	r1, r0
    4ea2:	b2db      	uxtb	r3, r3
    4ea4:	e9cd 2300 	strd	r2, r3, [sp]
    4ea8:	e9cd 1402 	strd	r1, r4, [sp, #8]
    4eac:	1d23      	adds	r3, r4, #4
    4eae:	4622      	mov	r2, r4
    4eb0:	4649      	mov	r1, r9
    4eb2:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    4eb4:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    4eb6:	f7ff fb3d 	bl	4534 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    4eba:	8466      	strh	r6, [r4, #34]	; 0x22
}
    4ebc:	b00f      	add	sp, #60	; 0x3c
    4ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ec2:	bf00      	nop
    4ec4:	20000620 	.word	0x20000620
    4ec8:	20000774 	.word	0x20000774
    4ecc:	0000418d 	.word	0x0000418d
    4ed0:	20002e48 	.word	0x20002e48
    4ed4:	00004a75 	.word	0x00004a75
    4ed8:	00006b61 	.word	0x00006b61
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    4edc:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    4ee0:	1bf7      	subs	r7, r6, r7
    4ee2:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    4ee4:	0438      	lsls	r0, r7, #16
    4ee6:	d4ac      	bmi.n	4e42 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    4ee8:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    4eec:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
		if (_radio.conn_upd == conn) {
    4ef0:	f8d5 2180 	ldr.w	r2, [r5, #384]	; 0x180
		_radio.ticker_id_prepare = 0;
    4ef4:	746b      	strb	r3, [r5, #17]
		if (_radio.conn_upd == conn) {
    4ef6:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    4ef8:	bf08      	it	eq
    4efa:	f8c5 3180 	streq.w	r3, [r5, #384]	; 0x180
		if ((conn->llcp.conn_upd.interval !=
    4efe:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    4f00:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    4f04:	429a      	cmp	r2, r3
    4f06:	d114      	bne.n	4f32 <event_connection_prepare+0x232>
		     conn->conn_interval) ||
    4f08:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
    4f0c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    4f0e:	4299      	cmp	r1, r3
    4f10:	d10f      	bne.n	4f32 <event_connection_prepare+0x232>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    4f12:	f240 43e2 	movw	r3, #1250	; 0x4e2
    4f16:	435a      	muls	r2, r3
    4f18:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    4f1c:	f242 7110 	movw	r1, #10000	; 0x2710
    4f20:	fb01 2303 	mla	r3, r1, r3, r2
    4f24:	3b01      	subs	r3, #1
    4f26:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    4f2a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    4f2c:	b29b      	uxth	r3, r3
    4f2e:	429a      	cmp	r2, r3
    4f30:	d016      	beq.n	4f60 <event_connection_prepare+0x260>
			node_rx = packet_rx_reserve_get(2);
    4f32:	2002      	movs	r0, #2
    4f34:	f7fe fbdc 	bl	36f0 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    4f38:	2800      	cmp	r0, #0
    4f3a:	f43f aeea 	beq.w	4d12 <event_connection_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
    4f3e:	8c23      	ldrh	r3, [r4, #32]
    4f40:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    4f42:	2308      	movs	r3, #8
    4f44:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    4f46:	2300      	movs	r3, #0
    4f48:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    4f4a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    4f4e:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    4f50:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    4f54:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    4f56:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    4f5a:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    4f5c:	f7ff f9e8 	bl	4330 <packet_rx_enqueue>
    4f60:	e9d4 3600 	ldrd	r3, r6, [r4]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    4f64:	2b00      	cmp	r3, #0
    4f66:	da09      	bge.n	4f7c <event_connection_prepare+0x27c>
			u32_t ticks_prepare_to_start =
    4f68:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    4f6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    4f6e:	4286      	cmp	r6, r0
    4f70:	bf2c      	ite	cs
    4f72:	44b0      	addcs	r8, r6
    4f74:	4480      	addcc	r8, r0
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    4f76:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    4f78:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    4f7c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    4f7e:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
    4f82:	49cd      	ldr	r1, [pc, #820]	; (52b8 <event_connection_prepare+0x5b8>)
		conn_interval_old = instant_latency * conn->conn_interval;
    4f84:	fb13 f307 	smulbb	r3, r3, r7
    4f88:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    4f8a:	fbb3 f2fa 	udiv	r2, r3, sl
    4f8e:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    4f92:	fb1a f009 	smulbb	r0, sl, r9
    4f96:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    4f98:	4283      	cmp	r3, r0
    4f9a:	f080 80f9 	bcs.w	5190 <event_connection_prepare+0x490>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    4f9e:	1ac0      	subs	r0, r0, r3
    4fa0:	f240 1223 	movw	r2, #291	; 0x123
    4fa4:	ea4f 7ce0 	mov.w	ip, r0, asr #31
    4fa8:	4342      	muls	r2, r0
    4faa:	fb01 230c 	mla	r3, r1, ip, r2
    4fae:	fba0 0101 	umull	r0, r1, r0, r1
    4fb2:	4419      	add	r1, r3
    4fb4:	a3be      	add	r3, pc, #760	; (adr r3, 52b0 <event_connection_prepare+0x5b0>)
    4fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    4fba:	f7fb f97b 	bl	2b4 <__aeabi_uldivmod>
    4fbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4fc2:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    4fc6:	930c      	str	r3, [sp, #48]	; 0x30
		conn->latency_prepare -= (instant_latency - latency);
    4fc8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    4fca:	f8df b314 	ldr.w	fp, [pc, #788]	; 52e0 <event_connection_prepare+0x5e0>
    4fce:	1bdb      	subs	r3, r3, r7
    4fd0:	444b      	add	r3, r9
    4fd2:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    4fd4:	6823      	ldr	r3, [r4, #0]
    4fd6:	429e      	cmp	r6, r3
    4fd8:	bf38      	it	cc
    4fda:	461e      	movcc	r6, r3
    4fdc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    4fde:	930a      	str	r3, [sp, #40]	; 0x28
		if (conn->role) {
    4fe0:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    4fe4:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    4fe6:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    4fea:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    4fec:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    4ff0:	f280 80e0 	bge.w	51b4 <event_connection_prepare+0x4b4>
				conn->slave.window_widening_periodic_us *
    4ff4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			conn->slave.window_widening_prepare_us -=
    4ff6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    4ff8:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    4ffc:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    5000:	4aae      	ldr	r2, [pc, #696]	; (52bc <event_connection_prepare+0x5bc>)
    5002:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    5006:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    500a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    500e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    5012:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
				(((gc_lookup_ppm[_radio.sca] +
    5016:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    5018:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    501a:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    501e:	4ba8      	ldr	r3, [pc, #672]	; (52c0 <event_connection_prepare+0x5c0>)
				conn->llcp.conn_upd.win_size * 1250;
    5020:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    5024:	f205 253f 	addw	r5, r5, #575	; 0x23f
    5028:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    502c:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    502e:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    5032:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    5034:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    5036:	64e2      	str	r2, [r4, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0;
    5038:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    503a:	429f      	cmp	r7, r3
    503c:	bf94      	ite	ls
    503e:	6467      	strls	r7, [r4, #68]	; 0x44
    5040:	6463      	strhi	r3, [r4, #68]	; 0x44
			conn->slave.window_widening_periodic_us =
    5042:	63e5      	str	r5, [r4, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    5044:	6423      	str	r3, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0;
    5046:	65a2      	str	r2, [r4, #88]	; 0x58
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    5048:	fba0 010b 	umull	r0, r1, r0, fp
    504c:	a398      	add	r3, pc, #608	; (adr r3, 52b0 <event_connection_prepare+0x5b0>)
    504e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5052:	f7fb f92f 	bl	2b4 <__aeabi_uldivmod>
    5056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5058:	1a1b      	subs	r3, r3, r0
    505a:	930c      	str	r3, [sp, #48]	; 0x30
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    505c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    505e:	fbb3 f0f8 	udiv	r0, r3, r8
    5062:	fb08 f000 	mul.w	r0, r8, r0
    5066:	a392      	add	r3, pc, #584	; (adr r3, 52b0 <event_connection_prepare+0x5b0>)
    5068:	e9d3 2300 	ldrd	r2, r3, [r3]
    506c:	fba0 010b 	umull	r0, r1, r0, fp
    5070:	f7fb f920 	bl	2b4 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    5074:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    5076:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		conn->latency = conn->llcp.conn_upd.latency;
    507a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    507e:	84e3      	strh	r3, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    5080:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		conn->conn_interval = conn->llcp.conn_upd.interval;
    5084:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    5088:	f242 7210 	movw	r2, #10000	; 0x2710
    508c:	fb02 6303 	mla	r3, r2, r3, r6
    5090:	3b01      	subs	r3, #1
    5092:	fbb3 f3f6 	udiv	r3, r3, r6
    5096:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    5098:	4b8a      	ldr	r3, [pc, #552]	; (52c4 <event_connection_prepare+0x5c4>)
    509a:	4433      	add	r3, r6
    509c:	fbb3 f6f6 	udiv	r6, r3, r6
		if (!conn->llcp.conn_upd.is_internal) {
    50a0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    50a4:	8666      	strh	r6, [r4, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    50a6:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    50aa:	bf08      	it	eq
    50ac:	8623      	strheq	r3, [r4, #48]	; 0x30
		mayfly_was_enabled =
    50ae:	2101      	movs	r1, #1
    50b0:	2000      	movs	r0, #0
    50b2:	f003 ff71 	bl	8f98 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    50b6:	2200      	movs	r2, #0
    50b8:	2101      	movs	r1, #1
		mayfly_was_enabled =
    50ba:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    50bc:	4610      	mov	r0, r2
    50be:	f7fd fb61 	bl	2784 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    50c2:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    50c6:	f641 23e4 	movw	r3, #6884	; 0x1ae4
    50ca:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    50cc:	3207      	adds	r2, #7
		ticker_status =
    50ce:	9300      	str	r3, [sp, #0]
    50d0:	b2d2      	uxtb	r2, r2
    50d2:	4b7d      	ldr	r3, [pc, #500]	; (52c8 <event_connection_prepare+0x5c8>)
    50d4:	4608      	mov	r0, r1
    50d6:	f7fe f9af 	bl	3438 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    50da:	f030 0802 	bics.w	r8, r0, #2
    50de:	f47f ae18 	bne.w	4d12 <event_connection_prepare+0x12>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    50e2:	fba5 ab0b 	umull	sl, fp, r5, fp
    50e6:	a372      	add	r3, pc, #456	; (adr r3, 52b0 <event_connection_prepare+0x5b0>)
    50e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    50ec:	4650      	mov	r0, sl
    50ee:	4659      	mov	r1, fp
    50f0:	f7fb f8e0 	bl	2b4 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    50f4:	2300      	movs	r3, #0
    50f6:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    50fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    50fe:	990a      	ldr	r1, [sp, #40]	; 0x28
    5100:	4a72      	ldr	r2, [pc, #456]	; (52cc <event_connection_prepare+0x5cc>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5102:	f894 6020 	ldrb.w	r6, [r4, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
    5106:	2307      	movs	r3, #7
    5108:	434b      	muls	r3, r1
    510a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    510c:	fb02 3301 	mla	r3, r2, r1, r3
    5110:	990a      	ldr	r1, [sp, #40]	; 0x28
    5112:	fba1 1202 	umull	r1, r2, r1, r2
    5116:	441a      	add	r2, r3
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5118:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    511c:	4608      	mov	r0, r1
    511e:	ebba 0000 	subs.w	r0, sl, r0
    5122:	4611      	mov	r1, r2
    5124:	eb6b 0101 	sbc.w	r1, fp, r1
    5128:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    512c:	2300      	movs	r3, #0
    512e:	f7fb f8c1 	bl	2b4 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5132:	68e3      	ldr	r3, [r4, #12]
    5134:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5136:	f994 c01d 	ldrsb.w	ip, [r4, #29]
    513a:	4965      	ldr	r1, [pc, #404]	; (52d0 <event_connection_prepare+0x5d0>)
    513c:	441a      	add	r2, r3
    513e:	4613      	mov	r3, r2
    5140:	4a64      	ldr	r2, [pc, #400]	; (52d4 <event_connection_prepare+0x5d4>)
    5142:	ea32 022c 	bics.w	r2, r2, ip, asr #32
    5146:	bf28      	it	cs
    5148:	460a      	movcs	r2, r1
		ticker_status =
    514a:	f641 21f4 	movw	r1, #6900	; 0x1af4
    514e:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5150:	3607      	adds	r6, #7
		ticker_status =
    5152:	495d      	ldr	r1, [pc, #372]	; (52c8 <event_connection_prepare+0x5c8>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5154:	b2f6      	uxtb	r6, r6
		ticker_status =
    5156:	e9cd 3204 	strd	r3, r2, [sp, #16]
    515a:	e9cd 4106 	strd	r4, r1, [sp, #24]
    515e:	e9cd 0802 	strd	r0, r8, [sp, #8]
    5162:	e9cd 7500 	strd	r7, r5, [sp]
    5166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5168:	4632      	mov	r2, r6
    516a:	4641      	mov	r1, r8
    516c:	4640      	mov	r0, r8
    516e:	f7fe f8cf 	bl	3310 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5172:	f030 0002 	bics.w	r0, r0, #2
    5176:	f47f adcc 	bne.w	4d12 <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
    517a:	f1b9 0f00 	cmp.w	r9, #0
    517e:	f43f ae9d 	beq.w	4ebc <event_connection_prepare+0x1bc>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    5182:	2201      	movs	r2, #1
    5184:	4611      	mov	r1, r2
}
    5186:	b00f      	add	sp, #60	; 0x3c
    5188:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    518c:	f7fd bafa 	b.w	2784 <mayfly_enable>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    5190:	fb0a 3212 	mls	r2, sl, r2, r3
    5194:	fa1f fb82 	uxth.w	fp, r2
    5198:	fbab 0101 	umull	r0, r1, fp, r1
    519c:	f240 1323 	movw	r3, #291	; 0x123
    51a0:	fb03 110b 	mla	r1, r3, fp, r1
    51a4:	a342      	add	r3, pc, #264	; (adr r3, 52b0 <event_connection_prepare+0x5b0>)
    51a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    51aa:	f7fb f883 	bl	2b4 <__aeabi_uldivmod>
    51ae:	eba8 0300 	sub.w	r3, r8, r0
    51b2:	e708      	b.n	4fc6 <event_connection_prepare+0x2c6>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    51b4:	990a      	ldr	r1, [sp, #40]	; 0x28
    51b6:	a33e      	add	r3, pc, #248	; (adr r3, 52b0 <event_connection_prepare+0x5b0>)
    51b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    51bc:	fba1 010b 	umull	r0, r1, r1, fp
    51c0:	f7fb f878 	bl	2b4 <__aeabi_uldivmod>
    51c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    51c8:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    51ca:	4635      	mov	r5, r6
    51cc:	e755      	b.n	507a <event_connection_prepare+0x37a>
	if (conn->llcp.chan_map.initiate) {
    51ce:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    51d2:	b30b      	cbz	r3, 5218 <event_connection_prepare+0x518>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    51d4:	4840      	ldr	r0, [pc, #256]	; (52d8 <event_connection_prepare+0x5d8>)
    51d6:	f7fd fa47 	bl	2668 <mem_acquire>
		if (node_tx) {
    51da:	4605      	mov	r5, r0
    51dc:	2800      	cmp	r0, #0
    51de:	f43f ae30 	beq.w	4e42 <event_connection_prepare+0x142>
			conn->llcp.chan_map.initiate = 0;
    51e2:	2300      	movs	r3, #0
    51e4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				event_counter + conn->latency + 6;
    51e8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    51ea:	3306      	adds	r3, #6
    51ec:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    51ee:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    51f2:	7903      	ldrb	r3, [r0, #4]
    51f4:	f043 0303 	orr.w	r3, r3, #3
    51f8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    51fa:	2308      	movs	r3, #8
    51fc:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    51fe:	2301      	movs	r3, #1
    5200:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    5202:	2205      	movs	r2, #5
    5204:	f104 0161 	add.w	r1, r4, #97	; 0x61
    5208:	3008      	adds	r0, #8
    520a:	f7fc fde8 	bl	1dde <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    520e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    5212:	f8a5 300d 	strh.w	r3, [r5, #13]
    5216:	e610      	b.n	4e3a <event_connection_prepare+0x13a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    5218:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    521c:	1af3      	subs	r3, r6, r3
    521e:	0419      	lsls	r1, r3, #16
    5220:	f53f ae0f 	bmi.w	4e42 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    5224:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    5228:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		memcpy(&conn->data_chan_map[0],
    522c:	f104 0517 	add.w	r5, r4, #23
    5230:	2205      	movs	r2, #5
    5232:	f104 0161 	add.w	r1, r4, #97	; 0x61
    5236:	4628      	mov	r0, r5
    5238:	f7fc fdd1 	bl	1dde <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    523c:	2105      	movs	r1, #5
    523e:	4628      	mov	r0, r5
    5240:	f7fd fba8 	bl	2994 <util_ones_count_get>
		conn->data_chan_count =
    5244:	7f63      	ldrb	r3, [r4, #29]
    5246:	f360 0305 	bfi	r3, r0, #0, #6
    524a:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    524c:	2301      	movs	r3, #1
    524e:	7723      	strb	r3, [r4, #28]
    5250:	e5f7      	b.n	4e42 <event_connection_prepare+0x142>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5252:	4821      	ldr	r0, [pc, #132]	; (52d8 <event_connection_prepare+0x5d8>)
    5254:	f7fd fa08 	bl	2668 <mem_acquire>
	if (node_tx) {
    5258:	4605      	mov	r5, r0
    525a:	2800      	cmp	r0, #0
    525c:	f43f adf1 	beq.w	4e42 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    5260:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    5264:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		conn->llcp_features = RADIO_BLE_FEAT;
    5268:	4b1c      	ldr	r3, [pc, #112]	; (52dc <event_connection_prepare+0x5dc>)
    526a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    526e:	7903      	ldrb	r3, [r0, #4]
    5270:	f043 0303 	orr.w	r3, r3, #3
    5274:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    5276:	2309      	movs	r3, #9
    5278:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    527a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    527e:	2b00      	cmp	r3, #0
    5280:	bfb4      	ite	lt
    5282:	230e      	movlt	r3, #14
    5284:	2308      	movge	r3, #8
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    5286:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    5288:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    528a:	2100      	movs	r1, #0
    528c:	4410      	add	r0, r2
    528e:	f7fc fdd3 	bl	1e38 <memset>
			conn->llcp_features & 0xFF;
    5292:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    5296:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
    5298:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    529a:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    529c:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    529e:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
    52a0:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, node_tx);
    52a2:	4620      	mov	r0, r4
    52a4:	f7ff fc9e 	bl	4be4 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    52a8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    52aa:	86a3      	strh	r3, [r4, #52]	; 0x34
    52ac:	e5c9      	b.n	4e42 <event_connection_prepare+0x142>
    52ae:	bf00      	nop
    52b0:	1afd498d 	.word	0x1afd498d
    52b4:	00000007 	.word	0x00000007
    52b8:	09ce5400 	.word	0x09ce5400
    52bc:	0000b260 	.word	0x0000b260
    52c0:	000f4240 	.word	0x000f4240
    52c4:	026259ff 	.word	0x026259ff
    52c8:	00003bed 	.word	0x00003bed
    52cc:	1afd498d 	.word	0x1afd498d
    52d0:	00005389 	.word	0x00005389
    52d4:	0000538d 	.word	0x0000538d
    52d8:	20000774 	.word	0x20000774
    52dc:	0001400c 	.word	0x0001400c
    52e0:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp_version.tx == 0) {
    52e4:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    52e8:	07da      	lsls	r2, r3, #31
    52ea:	d424      	bmi.n	5336 <event_connection_prepare+0x636>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    52ec:	4825      	ldr	r0, [pc, #148]	; (5384 <event_connection_prepare+0x684>)
    52ee:	f7fd f9bb 	bl	2668 <mem_acquire>
		if (node_tx) {
    52f2:	4601      	mov	r1, r0
    52f4:	2800      	cmp	r0, #0
    52f6:	f43f ada4 	beq.w	4e42 <event_connection_prepare+0x142>
			conn->llcp_ack = conn->llcp_req;
    52fa:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    52fe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			conn->llcp_version.tx = 1;
    5302:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    5306:	f043 0301 	orr.w	r3, r3, #1
    530a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    530e:	7903      	ldrb	r3, [r0, #4]
    5310:	f043 0303 	orr.w	r3, r3, #3
    5314:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    5316:	2306      	movs	r3, #6
    5318:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    531a:	230c      	movs	r3, #12
    531c:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    531e:	2309      	movs	r3, #9
    5320:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    5322:	f06f 030e 	mvn.w	r3, #14
    5326:	7243      	strb	r3, [r0, #9]
    5328:	2305      	movs	r3, #5
    532a:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    532c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5330:	72c3      	strb	r3, [r0, #11]
    5332:	7303      	strb	r3, [r0, #12]
    5334:	e7b5      	b.n	52a2 <event_connection_prepare+0x5a2>
	} else if (conn->llcp_version.rx != 0) {
    5336:	079b      	lsls	r3, r3, #30
    5338:	f57f aceb 	bpl.w	4d12 <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
    533c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    5340:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
    5344:	2002      	movs	r0, #2
    5346:	f7fe f9d3 	bl	36f0 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    534a:	2800      	cmp	r0, #0
    534c:	f43f ace1 	beq.w	4d12 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    5350:	8c23      	ldrh	r3, [r4, #32]
    5352:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    5354:	2301      	movs	r3, #1
    5356:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    5358:	7a03      	ldrb	r3, [r0, #8]
    535a:	f043 0303 	orr.w	r3, r3, #3
    535e:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    5360:	2306      	movs	r3, #6
    5362:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    5364:	230c      	movs	r3, #12
    5366:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    5368:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    536c:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    536e:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    5372:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    5376:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    537a:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    537e:	f7fe ffd7 	bl	4330 <packet_rx_enqueue>
    5382:	e55e      	b.n	4e42 <event_connection_prepare+0x142>
    5384:	20000774 	.word	0x20000774

00005388 <event_slave_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    5388:	f7ff bcba 	b.w	4d00 <event_connection_prepare>

0000538c <event_master_prepare>:
    538c:	f7ff bcb8 	b.w	4d00 <event_connection_prepare>

00005390 <prepare_pdu_data_tx>:
{
    5390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	    conn->empty ||
    5392:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
	if (/* empty packet */
    5396:	061a      	lsls	r2, r3, #24
{
    5398:	4604      	mov	r4, r0
    539a:	460f      	mov	r7, r1
	if (/* empty packet */
    539c:	d408      	bmi.n	53b0 <prepare_pdu_data_tx+0x20>
	    !conn->pkt_tx_head ||
    539e:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	    conn->empty ||
    53a2:	b12d      	cbz	r5, 53b0 <prepare_pdu_data_tx+0x20>
	    !conn->pkt_tx_head ||
    53a4:	071b      	lsls	r3, r3, #28
    53a6:	f8d0 c0f0 	ldr.w	ip, [r0, #240]	; 0xf0
    53aa:	d522      	bpl.n	53f2 <prepare_pdu_data_tx+0x62>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    53ac:	4565      	cmp	r5, ip
    53ae:	d020      	beq.n	53f2 <prepare_pdu_data_tx+0x62>
	conn->empty = 1;
    53b0:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    53b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    53b8:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    53bc:	f003 fb9a 	bl	8af4 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    53c0:	7803      	ldrb	r3, [r0, #0]
    53c2:	2201      	movs	r2, #1
    53c4:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    53c8:	2200      	movs	r2, #0
    53ca:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    53cc:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    53d0:	7003      	strb	r3, [r0, #0]
    53d2:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    53d4:	b152      	cbz	r2, 53ec <prepare_pdu_data_tx+0x5c>
		pdu_data_tx->md = 1;
    53d6:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    53da:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    53dc:	7803      	ldrb	r3, [r0, #0]
    53de:	f36f 1347 	bfc	r3, #5, #3
    53e2:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    53e4:	2300      	movs	r3, #0
    53e6:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    53e8:	6038      	str	r0, [r7, #0]
}
    53ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    53ec:	f362 1304 	bfi	r3, r2, #4, #1
    53f0:	e7f3      	b.n	53da <prepare_pdu_data_tx+0x4a>
					conn->packet_tx_head_offset);
    53f2:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
		if (!conn->packet_tx_head_len) {
    53f6:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    53fa:	1d2a      	adds	r2, r5, #4
    53fc:	18d0      	adds	r0, r2, r3
		if (!conn->packet_tx_head_len) {
    53fe:	b911      	cbnz	r1, 5406 <prepare_pdu_data_tx+0x76>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    5400:	7841      	ldrb	r1, [r0, #1]
    5402:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
		if (conn->packet_tx_head_offset) {
    5406:	b123      	cbz	r3, 5412 <prepare_pdu_data_tx+0x82>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    5408:	5cd1      	ldrb	r1, [r2, r3]
    540a:	2601      	movs	r6, #1
    540c:	f366 0101 	bfi	r1, r6, #0, #2
    5410:	54d1      	strb	r1, [r2, r3]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    5412:	f894 6100 	ldrb.w	r6, [r4, #256]	; 0x100
    5416:	1af6      	subs	r6, r6, r3
    5418:	b2f6      	uxtb	r6, r6
    541a:	7046      	strb	r6, [r0, #1]
		_pdu_data_tx->md = 0;
    541c:	5cd1      	ldrb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    541e:	2e1b      	cmp	r6, #27
		_pdu_data_tx->md = 0;
    5420:	f36f 1104 	bfc	r1, #4, #1
    5424:	54d1      	strb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    5426:	d905      	bls.n	5434 <prepare_pdu_data_tx+0xa4>
			_pdu_data_tx->len = max_tx_octets;
    5428:	211b      	movs	r1, #27
    542a:	7041      	strb	r1, [r0, #1]
			_pdu_data_tx->md = 1;
    542c:	5cd1      	ldrb	r1, [r2, r3]
    542e:	f041 0110 	orr.w	r1, r1, #16
    5432:	54d1      	strb	r1, [r2, r3]
		if (conn->pkt_tx_head->next) {
    5434:	6829      	ldr	r1, [r5, #0]
    5436:	b119      	cbz	r1, 5440 <prepare_pdu_data_tx+0xb0>
			_pdu_data_tx->md = 1;
    5438:	5cd1      	ldrb	r1, [r2, r3]
    543a:	f041 0110 	orr.w	r1, r1, #16
    543e:	54d1      	strb	r1, [r2, r3]
		if (!conn->pkt_tx_ctrl &&
    5440:	f1bc 0f00 	cmp.w	ip, #0
    5444:	d1ca      	bne.n	53dc <prepare_pdu_data_tx+0x4c>
    5446:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    544a:	429d      	cmp	r5, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    544c:	bf18      	it	ne
    544e:	e9c4 553c 	strdne	r5, r5, [r4, #240]	; 0xf0
    5452:	e7c3      	b.n	53dc <prepare_pdu_data_tx+0x4c>
    5454:	0000      	movs	r0, r0
	...

00005458 <isr>:
{
    5458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    545c:	b08f      	sub	sp, #60	; 0x3c
	trx_done = radio_is_done();
    545e:	f003 fb1f 	bl	8aa0 <radio_is_done>
    5462:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    5464:	b33e      	cbz	r6, 54b6 <isr+0x5e>
		crc_ok = radio_crc_is_valid();
    5466:	f003 fb3b 	bl	8ae0 <radio_crc_is_valid>
    546a:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
    546e:	f003 fbbb 	bl	8be8 <radio_filter_has_match>
    5472:	b2c4      	uxtb	r4, r0
		devmatch_id = radio_filter_match_get();
    5474:	f003 fbc2 	bl	8bfc <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    5478:	f003 fd6c 	bl	8f54 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    547c:	f003 fd58 	bl	8f30 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    5480:	f003 fb7c 	bl	8b7c <radio_rssi_is_ready>
    5484:	b2c5      	uxtb	r5, r0
	radio_status_reset();
    5486:	f003 faf5 	bl	8a74 <radio_status_reset>
	radio_tmr_status_reset();
    548a:	f003 fbbd 	bl	8c08 <radio_tmr_status_reset>
	radio_filter_status_reset();
    548e:	f003 fba3 	bl	8bd8 <radio_filter_status_reset>
	radio_ar_status_reset();
    5492:	f003 fd53 	bl	8f3c <radio_ar_status_reset>
	radio_rssi_status_reset();
    5496:	f003 fb69 	bl	8b6c <radio_rssi_status_reset>
	switch (_radio.state) {
    549a:	486e      	ldr	r0, [pc, #440]	; (5654 <isr+0x1fc>)
    549c:	7d43      	ldrb	r3, [r0, #21]
    549e:	4683      	mov	fp, r0
    54a0:	2b05      	cmp	r3, #5
    54a2:	f201 8250 	bhi.w	6946 <isr+0x14ee>
    54a6:	e8df f013 	tbh	[pc, r3, lsl #1]
    54aa:	005f      	.short	0x005f
    54ac:	000a0087 	.word	0x000a0087
    54b0:	08ad08ad 	.word	0x08ad08ad
    54b4:	08ad      	.short	0x08ad
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    54b6:	4635      	mov	r5, r6
    54b8:	4634      	mov	r4, r6
    54ba:	46b0      	mov	r8, r6
    54bc:	e7e3      	b.n	5486 <isr+0x2e>
	_radio.state = STATE_RX;
    54be:	2301      	movs	r3, #1
    54c0:	7543      	strb	r3, [r0, #21]
	hcto = radio_tmr_tifs_base_get()
    54c2:	f003 fca5 	bl	8e10 <radio_tmr_tifs_base_get>
    54c6:	4604      	mov	r4, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    54c8:	2096      	movs	r0, #150	; 0x96
    54ca:	f003 fbab 	bl	8c24 <radio_tmr_tifs_set>
	switch (_radio.role) {
    54ce:	f89b 3014 	ldrb.w	r3, [fp, #20]
    54d2:	3b01      	subs	r3, #1
    54d4:	34c3      	adds	r4, #195	; 0xc3
    54d6:	2b03      	cmp	r3, #3
    54d8:	d811      	bhi.n	54fe <isr+0xa6>
    54da:	e8df f003 	tbb	[pc, r3]
    54de:	2402      	.short	0x2402
    54e0:	4848      	.short	0x4848
		radio_switch_complete_and_tx(0, 0, 0, 0);
    54e2:	2300      	movs	r3, #0
    54e4:	461a      	mov	r2, r3
    54e6:	4619      	mov	r1, r3
    54e8:	4618      	mov	r0, r3
    54ea:	f003 fb17 	bl	8b1c <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    54ee:	f003 fb05 	bl	8afc <radio_pkt_scratch_get>
    54f2:	f003 fa87 	bl	8a04 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    54f6:	f003 fac9 	bl	8a8c <radio_is_ready>
    54fa:	4605      	mov	r5, r0
    54fc:	b128      	cbz	r0, 550a <isr+0xb2>
	LL_ASSERT(!retval);
    54fe:	4040      	eors	r0, r0
    5500:	f380 8811 	msr	BASEPRI, r0
    5504:	f04f 0004 	mov.w	r0, #4
    5508:	df02      	svc	2
		hcto += radio_rx_chain_delay_get(0, 0);
    550a:	4601      	mov	r1, r0
    550c:	f003 fa8f 	bl	8a2e <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    5510:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    5512:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    5514:	4628      	mov	r0, r5
    5516:	f003 fa86 	bl	8a26 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    551a:	1a20      	subs	r0, r4, r0
    551c:	f003 fc0e 	bl	8d3c <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    5520:	f003 fc5e 	bl	8de0 <radio_tmr_end_capture>
    5524:	e020      	b.n	5568 <isr+0x110>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    5526:	2300      	movs	r3, #0
    5528:	4619      	mov	r1, r3
    552a:	461a      	mov	r2, r3
    552c:	4618      	mov	r0, r3
    552e:	f003 faf5 	bl	8b1c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    5532:	f89b 2139 	ldrb.w	r2, [fp, #313]	; 0x139
    5536:	f8db 3134 	ldr.w	r3, [fp, #308]	; 0x134
		radio_pkt_rx_set(_radio.packet_rx
    553a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    553e:	3008      	adds	r0, #8
    5540:	f003 fa60 	bl	8a04 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    5544:	f003 faa2 	bl	8a8c <radio_is_ready>
    5548:	4605      	mov	r5, r0
    554a:	2800      	cmp	r0, #0
    554c:	d1d7      	bne.n	54fe <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
    554e:	4601      	mov	r1, r0
    5550:	f003 fa6d 	bl	8a2e <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    5554:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    5556:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    5558:	4628      	mov	r0, r5
    555a:	f003 fa64 	bl	8a26 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    555e:	1a20      	subs	r0, r4, r0
    5560:	f003 fbec 	bl	8d3c <radio_tmr_hcto_configure>
		radio_rssi_measure();
    5564:	f003 faf2 	bl	8b4c <radio_rssi_measure>
}
    5568:	b00f      	add	sp, #60	; 0x3c
    556a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    556e:	2300      	movs	r3, #0
    5570:	461a      	mov	r2, r3
    5572:	4619      	mov	r1, r3
    5574:	4618      	mov	r0, r3
    5576:	f003 fad1 	bl	8b1c <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    557a:	f89b 2139 	ldrb.w	r2, [fp, #313]	; 0x139
    557e:	f8db 3134 	ldr.w	r3, [fp, #308]	; 0x134
		rx_packet_set(_radio.conn_curr,	(void *)
    5582:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    5586:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    558a:	3108      	adds	r1, #8
    558c:	f7fe fc12 	bl	3db4 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    5590:	f003 fa7c 	bl	8a8c <radio_is_ready>
    5594:	4605      	mov	r5, r0
    5596:	2800      	cmp	r0, #0
    5598:	d1b1      	bne.n	54fe <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
    559a:	4601      	mov	r1, r0
    559c:	f003 fa47 	bl	8a2e <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    55a0:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    55a2:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    55a4:	4628      	mov	r0, r5
    55a6:	f003 fa3e 	bl	8a26 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    55aa:	1a20      	subs	r0, r4, r0
    55ac:	f003 fbc6 	bl	8d3c <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    55b0:	2001      	movs	r0, #1
    55b2:	f7fe fc45 	bl	3e40 <packet_tx_enqueue>
    55b6:	e7d7      	b.n	5568 <isr+0x110>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    55b8:	b92e      	cbnz	r6, 55c6 <isr+0x16e>
		_radio.state = STATE_CLOSE;
    55ba:	2303      	movs	r3, #3
    55bc:	f88b 3015 	strb.w	r3, [fp, #21]
		radio_disable();
    55c0:	f003 fa46 	bl	8a50 <radio_disable>
    55c4:	e7d0      	b.n	5568 <isr+0x110>
	switch (_radio.role) {
    55c6:	7d03      	ldrb	r3, [r0, #20]
    55c8:	3b01      	subs	r3, #1
    55ca:	2b03      	cmp	r3, #3
    55cc:	d897      	bhi.n	54fe <isr+0xa6>
    55ce:	e8df f013 	tbh	[pc, r3, lsl #1]
    55d2:	0004      	.short	0x0004
    55d4:	046d020b 	.word	0x046d020b
    55d8:	046d      	.short	0x046d
		if (crc_ok) {
    55da:	f1b8 0f00 	cmp.w	r8, #0
    55de:	d0ec      	beq.n	55ba <isr+0x162>
	pdu_adv = (void *)radio_pkt_scratch_get();
    55e0:	f003 fa8c 	bl	8afc <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    55e4:	f89b 2078 	ldrb.w	r2, [fp, #120]	; 0x78
    55e8:	232a      	movs	r3, #42	; 0x2a
    55ea:	f04f 0927 	mov.w	r9, #39	; 0x27
    55ee:	fb19 3902 	smlabb	r9, r9, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    55f2:	7802      	ldrb	r2, [r0, #0]
    55f4:	f002 030f 	and.w	r3, r2, #15
    55f8:	2b03      	cmp	r3, #3
	pdu_adv = (void *)radio_pkt_scratch_get();
    55fa:	4607      	mov	r7, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    55fc:	eb0b 0509 	add.w	r5, fp, r9
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    5600:	d12a      	bne.n	5658 <isr+0x200>
    5602:	7843      	ldrb	r3, [r0, #1]
    5604:	2b0c      	cmp	r3, #12
    5606:	d127      	bne.n	5658 <isr+0x200>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    5608:	f89b 3029 	ldrb.w	r3, [fp, #41]	; 0x29
		(devmatch_ok)) &&
    560c:	0659      	lsls	r1, r3, #25
    560e:	d500      	bpl.n	5612 <isr+0x1ba>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    5610:	b314      	cbz	r4, 5658 <isr+0x200>
	return (adv->tx_addr == sr->rx_addr) &&
    5612:	f81b 3009 	ldrb.w	r3, [fp, r9]
    5616:	f3c3 1380 	ubfx	r3, r3, #6, #1
    561a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    561e:	d11b      	bne.n	5658 <isr+0x200>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    5620:	2206      	movs	r2, #6
    5622:	f107 0108 	add.w	r1, r7, #8
    5626:	1ca8      	adds	r0, r5, #2
    5628:	f7fc fbc9 	bl	1dbe <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    562c:	b9a0      	cbnz	r0, 5658 <isr+0x200>
		_radio.state = STATE_CLOSE;
    562e:	2303      	movs	r3, #3
    5630:	f88b 3015 	strb.w	r3, [fp, #21]
		radio_switch_complete_and_disable();
    5634:	f003 fa7c 	bl	8b30 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    5638:	f89b 00c8 	ldrb.w	r0, [fp, #200]	; 0xc8
    563c:	2327      	movs	r3, #39	; 0x27
    563e:	fb03 b000 	mla	r0, r3, r0, fp
    5642:	307a      	adds	r0, #122	; 0x7a
    5644:	f003 f9e4 	bl	8a10 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    5648:	f003 fa20 	bl	8a8c <radio_is_ready>
    564c:	2800      	cmp	r0, #0
    564e:	d08b      	beq.n	5568 <isr+0x110>
    5650:	e755      	b.n	54fe <isr+0xa6>
    5652:	bf00      	nop
    5654:	20000620 	.word	0x20000620
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    5658:	783b      	ldrb	r3, [r7, #0]
    565a:	f003 030f 	and.w	r3, r3, #15
    565e:	2b05      	cmp	r3, #5
    5660:	d1ab      	bne.n	55ba <isr+0x162>
    5662:	787b      	ldrb	r3, [r7, #1]
    5664:	2b22      	cmp	r3, #34	; 0x22
    5666:	d1a8      	bne.n	55ba <isr+0x162>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    5668:	f81b 3009 	ldrb.w	r3, [fp, r9]
    566c:	f003 030f 	and.w	r3, r3, #15
    5670:	2b01      	cmp	r3, #1
    5672:	f040 8195 	bne.w	59a0 <isr+0x548>
		       isr_adv_ci_adva_check(adv, ci) &&
    5676:	4639      	mov	r1, r7
    5678:	4628      	mov	r0, r5
    567a:	f7fe fa73 	bl	3b64 <isr_adv_ci_adva_check>
    567e:	b188      	cbz	r0, 56a4 <isr+0x24c>
	return (adv->rx_addr == ci->tx_addr) &&
    5680:	783b      	ldrb	r3, [r7, #0]
    5682:	f81b 2009 	ldrb.w	r2, [fp, r9]
    5686:	f3c3 1380 	ubfx	r3, r3, #6, #1
    568a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    568e:	f040 8185 	bne.w	599c <isr+0x544>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    5692:	2206      	movs	r2, #6
    5694:	1cb9      	adds	r1, r7, #2
    5696:	f105 0008 	add.w	r0, r5, #8
    569a:	f7fc fb90 	bl	1dbe <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    569e:	fab0 f080 	clz	r0, r0
    56a2:	0940      	lsrs	r0, r0, #5
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    56a4:	2800      	cmp	r0, #0
    56a6:	d088      	beq.n	55ba <isr+0x162>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    56a8:	f89b 317a 	ldrb.w	r3, [fp, #378]	; 0x17a
    56ac:	b133      	cbz	r3, 56bc <isr+0x264>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    56ae:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
    56b2:	f89b 2179 	ldrb.w	r2, [fp, #377]	; 0x179
    56b6:	429a      	cmp	r2, r3
    56b8:	f47f af7f 	bne.w	55ba <isr+0x162>
    56bc:	f8db 30cc 	ldr.w	r3, [fp, #204]	; 0xcc
    56c0:	2b00      	cmp	r3, #0
    56c2:	f43f af7a 	beq.w	55ba <isr+0x162>
			node_rx = packet_rx_reserve_get(4);
    56c6:	2004      	movs	r0, #4
    56c8:	f7fe f812 	bl	36f0 <packet_rx_reserve_get>
		if (!node_rx) {
    56cc:	4605      	mov	r5, r0
    56ce:	2800      	cmp	r0, #0
    56d0:	f43f af73 	beq.w	55ba <isr+0x162>
		_radio.state = STATE_STOP;
    56d4:	f04f 0a04 	mov.w	sl, #4
    56d8:	f88b a015 	strb.w	sl, [fp, #21]
		radio_disable();
    56dc:	f003 f9b8 	bl	8a50 <radio_disable>
		conn = _radio.advertiser.conn;
    56e0:	f8db 40cc 	ldr.w	r4, [fp, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    56e4:	f8db 1108 	ldr.w	r1, [fp, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    56e8:	f04f 0800 	mov.w	r8, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    56ec:	f44f 7282 	mov.w	r2, #260	; 0x104
    56f0:	4620      	mov	r0, r4
		_radio.advertiser.conn = NULL;
    56f2:	f8cb 80cc 	str.w	r8, [fp, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    56f6:	f7fc ffe8 	bl	26ca <mem_index_get>
		memcpy(&conn->crc_init[0],
    56fa:	2203      	movs	r2, #3
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    56fc:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
    56fe:	f107 0112 	add.w	r1, r7, #18
    5702:	f104 0014 	add.w	r0, r4, #20
    5706:	f7fc fb6a 	bl	1dde <memcpy>
		memcpy(&conn->access_addr[0],
    570a:	f104 0310 	add.w	r3, r4, #16
    570e:	4618      	mov	r0, r3
		memcpy(&conn->data_chan_map[0],
    5710:	f104 0617 	add.w	r6, r4, #23
		memcpy(&conn->access_addr[0],
    5714:	4652      	mov	r2, sl
    5716:	f107 010e 	add.w	r1, r7, #14
    571a:	930a      	str	r3, [sp, #40]	; 0x28
    571c:	f7fc fb5f 	bl	1dde <memcpy>
		memcpy(&conn->data_chan_map[0],
    5720:	2205      	movs	r2, #5
    5722:	f107 011e 	add.w	r1, r7, #30
    5726:	4630      	mov	r0, r6
    5728:	f7fc fb59 	bl	1dde <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    572c:	2105      	movs	r1, #5
    572e:	4630      	mov	r0, r6
    5730:	f7fd f930 	bl	2994 <util_ones_count_get>
		conn->data_chan_count =
    5734:	7f62      	ldrb	r2, [r4, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    5736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		conn->data_chan_count =
    5738:	f360 0205 	bfi	r2, r0, #0, #6
    573c:	7762      	strb	r2, [r4, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    573e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    5742:	f3c2 0204 	ubfx	r2, r2, #0, #5
    5746:	77a2      	strb	r2, [r4, #30]
			pdu_adv->connect_ind.interval;
    5748:	8b3a      	ldrh	r2, [r7, #24]
		conn->conn_interval =
    574a:	84a2      	strh	r2, [r4, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    574c:	f240 46e2 	movw	r6, #1250	; 0x4e2
    5750:	4356      	muls	r6, r2
		conn->latency = pdu_adv->connect_ind.latency;
    5752:	7ef9      	ldrb	r1, [r7, #27]
    5754:	7eba      	ldrb	r2, [r7, #26]
    5756:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    575a:	84e2      	strh	r2, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    575c:	4619      	mov	r1, r3
    575e:	4652      	mov	r2, sl
    5760:	f104 0054 	add.w	r0, r4, #84	; 0x54
    5764:	f7fc fb3b 	bl	1dde <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    5768:	8bbb      	ldrh	r3, [r7, #28]
    576a:	f242 7210 	movw	r2, #10000	; 0x2710
    576e:	fb02 6303 	mla	r3, r2, r3, r6
    5772:	3b01      	subs	r3, #1
    5774:	fbb3 f3f6 	udiv	r3, r3, r6
    5778:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    577a:	4b93      	ldr	r3, [pc, #588]	; (59c8 <isr+0x570>)
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    577c:	4639      	mov	r1, r7
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    577e:	4433      	add	r3, r6
    5780:	fbb3 f3f6 	udiv	r3, r3, r6
    5784:	8663      	strh	r3, [r4, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    5786:	8c23      	ldrh	r3, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    5788:	f885 800b 	strb.w	r8, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
    578c:	f04f 0801 	mov.w	r8, #1
    5790:	f885 800c 	strb.w	r8, [r5, #12]
		node_rx->hdr.handle = conn->handle;
    5794:	80eb      	strh	r3, [r5, #6]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    5796:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    579a:	2206      	movs	r2, #6
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    579c:	f3c3 1380 	ubfx	r3, r3, #6, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    57a0:	712a      	strb	r2, [r5, #4]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    57a2:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    57a4:	f105 000e 	add.w	r0, r5, #14
    57a8:	f7fc fb19 	bl	1dde <memcpy>
			pdu_adv->connect_ind.interval;
    57ac:	8b3b      	ldrh	r3, [r7, #24]
		radio_le_conn_cmplt->interval =
    57ae:	82ab      	strh	r3, [r5, #20]
			pdu_adv->connect_ind.latency;
    57b0:	8b7b      	ldrh	r3, [r7, #26]
		radio_le_conn_cmplt->latency =
    57b2:	82eb      	strh	r3, [r5, #22]
			pdu_adv->connect_ind.timeout;
    57b4:	8bbb      	ldrh	r3, [r7, #28]
		radio_le_conn_cmplt->timeout =
    57b6:	832b      	strh	r3, [r5, #24]
			pdu_adv->connect_ind.sca;
    57b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    57bc:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    57c0:	76ab      	strb	r3, [r5, #26]
		rx_fc_lock(conn->handle);
    57c2:	8c20      	ldrh	r0, [r4, #32]
    57c4:	f7fe f9f2 	bl	3bac <rx_fc_lock>
		packet_rx_enqueue();
    57c8:	f7fe fdb2 	bl	4330 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    57cc:	2003      	movs	r0, #3
    57ce:	f7fd ff8f 	bl	36f0 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    57d2:	2800      	cmp	r0, #0
    57d4:	f43f ae93 	beq.w	54fe <isr+0xa6>
			node_rx->hdr.handle = conn->handle;
    57d8:	8c23      	ldrh	r3, [r4, #32]
    57da:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    57dc:	230a      	movs	r3, #10
    57de:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    57e0:	783b      	ldrb	r3, [r7, #0]
    57e2:	f013 0320 	ands.w	r3, r3, #32
    57e6:	f000 80e9 	beq.w	59bc <isr+0x564>
					((u16_t)conn->access_addr[1] << 8) |
    57ea:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    57ec:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    57ee:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    57f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    57f4:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    57f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    57fa:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    57fc:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    57fe:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    5802:	7761      	strb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    5804:	83e3      	strh	r3, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    5806:	f880 800b 	strb.w	r8, [r0, #11]
			packet_rx_enqueue();
    580a:	f7fe fd91 	bl	4330 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    580e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    5812:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    5816:	496d      	ldr	r1, [pc, #436]	; (59cc <isr+0x574>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    5818:	0952      	lsrs	r2, r2, #5
    581a:	f362 0384 	bfi	r3, r2, #2, #3
    581e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    5822:	f89b 3120 	ldrb.w	r3, [fp, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    5826:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    582a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    582e:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    5830:	4373      	muls	r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    5832:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    5836:	4a66      	ldr	r2, [pc, #408]	; (59d0 <isr+0x578>)
    5838:	f203 233f 	addw	r3, r3, #575	; 0x23f
    583c:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    5840:	63e3      	str	r3, [r4, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    5842:	0873      	lsrs	r3, r6, #1
    5844:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    5846:	6423      	str	r3, [r4, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    5848:	7d7b      	ldrb	r3, [r7, #21]
    584a:	f240 4ae2 	movw	sl, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    584e:	f04f 0800 	mov.w	r8, #0
			pdu_adv->connect_ind.win_size * 1250;
    5852:	fb0a f303 	mul.w	r3, sl, r3
		conn->slave.window_size_event_us =
    5856:	6523      	str	r3, [r4, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    5858:	4641      	mov	r1, r8
		conn->slave.window_size_prepare_us = 0;
    585a:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    585e:	4640      	mov	r0, r8
    5860:	f003 f8e3 	bl	8a2a <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    5864:	495b      	ldr	r1, [pc, #364]	; (59d4 <isr+0x57c>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    5866:	900a      	str	r0, [sp, #40]	; 0x28
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    5868:	f200 4052 	addw	r0, r0, #1106	; 0x452
    586c:	a354      	add	r3, pc, #336	; (adr r3, 59c0 <isr+0x568>)
    586e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5872:	fba0 0101 	umull	r0, r1, r0, r1
    5876:	f7fa fd1d 	bl	2b4 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    587a:	f8db 517c 	ldr.w	r5, [fp, #380]	; 0x17c
    587e:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
    5880:	2327      	movs	r3, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    5882:	429d      	cmp	r5, r3
    5884:	bf38      	it	cc
    5886:	461d      	movcc	r5, r3
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    5888:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_xtal_to_start =
    588c:	6023      	str	r3, [r4, #0]
		conn_interval_us -=
    588e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->hdr.ticks_slot =
    5890:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_preempt_to_start =
    5892:	f8c4 8008 	str.w	r8, [r4, #8]
		conn_interval_us -=
    5896:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
    5898:	f003 fab4 	bl	8e04 <radio_tmr_end_get>
    589c:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    589e:	8af8      	ldrh	r0, [r7, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    58a0:	4641      	mov	r1, r8
		conn_offset_us +=
    58a2:	fb0a aa00 	mla	sl, sl, r0, sl
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    58a6:	4640      	mov	r0, r8
    58a8:	f003 f8bd 	bl	8a26 <radio_tx_chain_delay_get>
    58ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    58ae:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    58b2:	449a      	add	sl, r3
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    58b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    58b6:	ebaa 0a00 	sub.w	sl, sl, r0
    58ba:	ebaa 0303 	sub.w	r3, sl, r3
    58be:	930a      	str	r3, [sp, #40]	; 0x28
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    58c0:	f240 4386 	movw	r3, #1158	; 0x486
    58c4:	9300      	str	r3, [sp, #0]
    58c6:	2205      	movs	r2, #5
    58c8:	4b43      	ldr	r3, [pc, #268]	; (59d8 <isr+0x580>)
    58ca:	f8df a108 	ldr.w	sl, [pc, #264]	; 59d4 <isr+0x57c>
    58ce:	4641      	mov	r1, r8
    58d0:	4640      	mov	r0, r8
    58d2:	f7fd fdb1 	bl	3438 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    58d6:	f240 4187 	movw	r1, #1159	; 0x487
    58da:	f7fe f98d 	bl	3bf8 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    58de:	f81b 3009 	ldrb.w	r3, [fp, r9]
    58e2:	f003 030f 	and.w	r3, r3, #15
    58e6:	2b01      	cmp	r3, #1
    58e8:	d107      	bne.n	58fa <isr+0x4a2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    58ea:	f8cd 8000 	str.w	r8, [sp]
    58ee:	4643      	mov	r3, r8
    58f0:	2203      	movs	r2, #3
    58f2:	4641      	mov	r1, r8
    58f4:	4640      	mov	r0, r8
    58f6:	f7fd fd9f 	bl	3438 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    58fa:	fba6 670a 	umull	r6, r7, r6, sl
    58fe:	a330      	add	r3, pc, #192	; (adr r3, 59c0 <isr+0x568>)
    5900:	e9d3 2300 	ldrd	r2, r3, [r3]
    5904:	4630      	mov	r0, r6
    5906:	4639      	mov	r1, r7
    5908:	f7fa fcd4 	bl	2b4 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    590c:	f8db 3008 	ldr.w	r3, [fp, #8]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    5910:	4a32      	ldr	r2, [pc, #200]	; (59dc <isr+0x584>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5912:	eba3 0b05 	sub.w	fp, r3, r5
    5916:	f894 3020 	ldrb.w	r3, [r4, #32]
    591a:	3307      	adds	r3, #7
    591c:	b2db      	uxtb	r3, r3
    591e:	930b      	str	r3, [sp, #44]	; 0x2c
    5920:	f240 439e 	movw	r3, #1182	; 0x49e
    5924:	9308      	str	r3, [sp, #32]
    5926:	4b2e      	ldr	r3, [pc, #184]	; (59e0 <isr+0x588>)
    5928:	e9cd 4306 	strd	r4, r3, [sp, #24]
    592c:	4b2d      	ldr	r3, [pc, #180]	; (59e4 <isr+0x58c>)
    592e:	9305      	str	r3, [sp, #20]
    5930:	68e3      	ldr	r3, [r4, #12]
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    5932:	4680      	mov	r8, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5934:	441d      	add	r5, r3
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    5936:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    593a:	2307      	movs	r3, #7
    593c:	2100      	movs	r1, #0
    593e:	4343      	muls	r3, r0
    5940:	fb02 3301 	mla	r3, r2, r1, r3
    5944:	fba0 1202 	umull	r1, r2, r0, r2
    5948:	441a      	add	r2, r3
    594a:	4608      	mov	r0, r1
    594c:	1a30      	subs	r0, r6, r0
    594e:	4611      	mov	r1, r2
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5950:	f04f 0400 	mov.w	r4, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    5954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5958:	f04f 0300 	mov.w	r3, #0
    595c:	eb67 0101 	sbc.w	r1, r7, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5960:	9504      	str	r5, [sp, #16]
    5962:	9403      	str	r4, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    5964:	f7fa fca6 	bl	2b4 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    5968:	990a      	ldr	r1, [sp, #40]	; 0x28
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    596a:	9002      	str	r0, [sp, #8]
    596c:	f028 437f 	bic.w	r3, r8, #4278190080	; 0xff000000
    5970:	9301      	str	r3, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    5972:	fba1 010a 	umull	r0, r1, r1, sl
    5976:	a312      	add	r3, pc, #72	; (adr r3, 59c0 <isr+0x568>)
    5978:	e9d3 2300 	ldrd	r2, r3, [r3]
    597c:	f7fa fc9a 	bl	2b4 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5980:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5986:	9000      	str	r0, [sp, #0]
    5988:	465b      	mov	r3, fp
    598a:	4621      	mov	r1, r4
		ticker_status =
    598c:	4608      	mov	r0, r1
    598e:	f7fd fcbf 	bl	3310 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5992:	f030 0302 	bics.w	r3, r0, #2
    5996:	f47f adb2 	bne.w	54fe <isr+0xa6>
    599a:	e5e5      	b.n	5568 <isr+0x110>
	return (adv->rx_addr == ci->tx_addr) &&
    599c:	2000      	movs	r0, #0
    599e:	e681      	b.n	56a4 <isr+0x24c>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    59a0:	f89b 3029 	ldrb.w	r3, [fp, #41]	; 0x29
		(devmatch_ok)) &&
    59a4:	09db      	lsrs	r3, r3, #7
    59a6:	d000      	beq.n	59aa <isr+0x552>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    59a8:	b134      	cbz	r4, 59b8 <isr+0x560>
	       isr_adv_ci_adva_check(adv, ci);
    59aa:	4639      	mov	r1, r7
    59ac:	4628      	mov	r0, r5
    59ae:	f7fe f8d9 	bl	3b64 <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    59b2:	f000 0001 	and.w	r0, r0, #1
    59b6:	e675      	b.n	56a4 <isr+0x24c>
    59b8:	4620      	mov	r0, r4
    59ba:	e7fa      	b.n	59b2 <isr+0x55a>
				le_chan_sel_algo->chan_sel_algo = 0x00;
    59bc:	72c3      	strb	r3, [r0, #11]
    59be:	e724      	b.n	580a <isr+0x3b2>
    59c0:	1afd498d 	.word	0x1afd498d
    59c4:	00000007 	.word	0x00000007
    59c8:	026259ff 	.word	0x026259ff
    59cc:	0000b260 	.word	0x0000b260
    59d0:	000f4240 	.word	0x000f4240
    59d4:	3b9aca00 	.word	0x3b9aca00
    59d8:	00003bf9 	.word	0x00003bf9
    59dc:	1afd498d 	.word	0x1afd498d
    59e0:	00003bed 	.word	0x00003bed
    59e4:	00005389 	.word	0x00005389
		if (crc_ok &&
    59e8:	f1b8 0f00 	cmp.w	r8, #0
    59ec:	f000 821a 	beq.w	5e24 <isr+0x9cc>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    59f0:	f890 30e1 	ldrb.w	r3, [r0, #225]	; 0xe1
    59f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
    59f8:	b113      	cbz	r3, 5a00 <isr+0x5a8>
		if (crc_ok &&
    59fa:	2c00      	cmp	r4, #0
    59fc:	f000 8212 	beq.w	5e24 <isr+0x9cc>
	bool dir_report = false;
    5a00:	2200      	movs	r2, #0
    5a02:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    5a06:	f89b 1139 	ldrb.w	r1, [fp, #313]	; 0x139
    5a0a:	f8db 2134 	ldr.w	r2, [fp, #308]	; 0x134
    5a0e:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    5a12:	f8db 2100 	ldr.w	r2, [fp, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    5a16:	f107 0408 	add.w	r4, r7, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    5a1a:	b1da      	cbz	r2, 5a54 <isr+0x5fc>
    5a1c:	f89b 217a 	ldrb.w	r2, [fp, #378]	; 0x17a
    5a20:	b12a      	cbz	r2, 5a2e <isr+0x5d6>
				      (_radio.fc_req == _radio.fc_ack)) &&
    5a22:	f89b 2178 	ldrb.w	r2, [fp, #376]	; 0x178
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    5a26:	f89b 1179 	ldrb.w	r1, [fp, #377]	; 0x179
    5a2a:	4291      	cmp	r1, r2
    5a2c:	d112      	bne.n	5a54 <isr+0x5fc>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    5a2e:	2b00      	cmp	r3, #0
    5a30:	d15f      	bne.n	5af2 <isr+0x69a>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    5a32:	f89b 20e1 	ldrb.w	r2, [fp, #225]	; 0xe1
    5a36:	7a3b      	ldrb	r3, [r7, #8]
    5a38:	f3c2 1280 	ubfx	r2, r2, #6, #1
    5a3c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    5a40:	429a      	cmp	r2, r3
    5a42:	d107      	bne.n	5a54 <isr+0x5fc>
		(memcmp(&_radio.scanner.adv_addr[0],
    5a44:	2206      	movs	r2, #6
    5a46:	f107 010a 	add.w	r1, r7, #10
    5a4a:	48df      	ldr	r0, [pc, #892]	; (5dc8 <isr+0x970>)
    5a4c:	f7fc f9b7 	bl	1dbe <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    5a50:	2800      	cmp	r0, #0
    5a52:	d04e      	beq.n	5af2 <isr+0x69a>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    5a54:	7a3b      	ldrb	r3, [r7, #8]
    5a56:	f013 030f 	ands.w	r3, r3, #15
    5a5a:	d002      	beq.n	5a62 <isr+0x60a>
    5a5c:	2b06      	cmp	r3, #6
    5a5e:	f040 81ee 	bne.w	5e3e <isr+0x9e6>
		 (_radio.scanner.type != 0) &&
    5a62:	f89b 20e1 	ldrb.w	r2, [fp, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    5a66:	0712      	lsls	r2, r2, #28
    5a68:	f140 81d8 	bpl.w	5e1c <isr+0x9c4>
		 (_radio.scanner.type != 0) &&
    5a6c:	f8db 2100 	ldr.w	r2, [fp, #256]	; 0x100
    5a70:	2a00      	cmp	r2, #0
    5a72:	f040 81d3 	bne.w	5e1c <isr+0x9c4>
		err = isr_rx_scan_report(rssi_ready,
    5a76:	4628      	mov	r0, r5
    5a78:	f7fe fcd0 	bl	441c <isr_rx_scan_report.isra.38>
		if (err) {
    5a7c:	4605      	mov	r5, r0
    5a7e:	2800      	cmp	r0, #0
    5a80:	f040 81d0 	bne.w	5e24 <isr+0x9cc>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    5a84:	f003 f83a 	bl	8afc <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    5a88:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    5a8a:	49d0      	ldr	r1, [pc, #832]	; (5dcc <isr+0x974>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    5a8c:	2203      	movs	r2, #3
    5a8e:	f362 0303 	bfi	r3, r2, #0, #4
    5a92:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    5a94:	7a3a      	ldrb	r2, [r7, #8]
    5a96:	b2db      	uxtb	r3, r3
    5a98:	f3c2 1280 	ubfx	r2, r2, #6, #1
    5a9c:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    5aa0:	220c      	movs	r2, #12
    5aa2:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    5aa4:	f89b 20e1 	ldrb.w	r2, [fp, #225]	; 0xe1
    5aa8:	09d2      	lsrs	r2, r2, #7
    5aaa:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    5aae:	4604      	mov	r4, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    5ab0:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    5ab2:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    5ab6:	f7fc f992 	bl	1dde <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    5aba:	2206      	movs	r2, #6
    5abc:	f107 010a 	add.w	r1, r7, #10
    5ac0:	f104 0008 	add.w	r0, r4, #8
    5ac4:	f7fc f98b 	bl	1dde <memcpy>
		_radio.scanner.state = 1;
    5ac8:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
    5acc:	f043 0302 	orr.w	r3, r3, #2
    5ad0:	f88b 30e0 	strb.w	r3, [fp, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    5ad4:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    5ad6:	2302      	movs	r3, #2
    5ad8:	f88b 3015 	strb.w	r3, [fp, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
    5adc:	f003 f8a2 	bl	8c24 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    5ae0:	4628      	mov	r0, r5
    5ae2:	f003 f80f 	bl	8b04 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    5ae6:	4620      	mov	r0, r4
    5ae8:	f002 ff92 	bl	8a10 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    5aec:	f003 f978 	bl	8de0 <radio_tmr_end_capture>
    5af0:	e5aa      	b.n	5648 <isr+0x1f0>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    5af2:	7a3b      	ldrb	r3, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    5af4:	f013 030f 	ands.w	r3, r3, #15
    5af8:	f040 8174 	bne.w	5de4 <isr+0x98c>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    5afc:	f003 f982 	bl	8e04 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    5b00:	f8db 30dc 	ldr.w	r3, [fp, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    5b04:	f200 2616 	addw	r6, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    5b08:	48b1      	ldr	r0, [pc, #708]	; (5dd0 <isr+0x978>)
    5b0a:	2207      	movs	r2, #7
    5b0c:	fba3 0100 	umull	r0, r1, r3, r0
    5b10:	fb02 1103 	mla	r1, r2, r3, r1
    5b14:	a3a8      	add	r3, pc, #672	; (adr r3, 5db8 <isr+0x960>)
    5b16:	e9d3 2300 	ldrd	r2, r3, [r3]
    5b1a:	f7fa fbcb 	bl	2b4 <__aeabi_uldivmod>
    5b1e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    5b22:	4286      	cmp	r6, r0
    5b24:	d296      	bcs.n	5a54 <isr+0x5fc>
			node_rx = packet_rx_reserve_get(4);
    5b26:	2004      	movs	r0, #4
    5b28:	f7fd fde2 	bl	36f0 <packet_rx_reserve_get>
		if (node_rx == 0) {
    5b2c:	4682      	mov	sl, r0
    5b2e:	2800      	cmp	r0, #0
    5b30:	f000 8178 	beq.w	5e24 <isr+0x9cc>
		_radio.state = STATE_STOP;
    5b34:	2604      	movs	r6, #4
		_radio.scanner.conn = NULL;
    5b36:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    5b38:	f8db 4100 	ldr.w	r4, [fp, #256]	; 0x100
		_radio.state = STATE_STOP;
    5b3c:	f88b 6015 	strb.w	r6, [fp, #21]
		_radio.scanner.conn = NULL;
    5b40:	f8cb 3100 	str.w	r3, [fp, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    5b44:	f002 ffda 	bl	8afc <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    5b48:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    5b4a:	49a0      	ldr	r1, [pc, #640]	; (5dcc <isr+0x974>)
			pdu_adv_tx->chan_sel = 1;
    5b4c:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    5b50:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    5b54:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    5b56:	7a3a      	ldrb	r2, [r7, #8]
    5b58:	b2db      	uxtb	r3, r3
    5b5a:	f3c2 1280 	ubfx	r2, r2, #6, #1
    5b5e:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    5b62:	2222      	movs	r2, #34	; 0x22
    5b64:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    5b66:	f89b 20e1 	ldrb.w	r2, [fp, #225]	; 0xe1
    5b6a:	09d2      	lsrs	r2, r2, #7
    5b6c:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    5b70:	4605      	mov	r5, r0
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    5b72:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    5b74:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    5b78:	f105 0908 	add.w	r9, r5, #8
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    5b7c:	f7fc f92f 	bl	1dde <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    5b80:	2206      	movs	r2, #6
    5b82:	f107 010a 	add.w	r1, r7, #10
    5b86:	4648      	mov	r0, r9
    5b88:	f7fc f929 	bl	1dde <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    5b8c:	4632      	mov	r2, r6
    5b8e:	f104 0110 	add.w	r1, r4, #16
    5b92:	f105 000e 	add.w	r0, r5, #14
    5b96:	f7fc f922 	bl	1dde <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    5b9a:	2203      	movs	r2, #3
    5b9c:	f104 0114 	add.w	r1, r4, #20
    5ba0:	f105 0012 	add.w	r0, r5, #18
    5ba4:	f7fc f91b 	bl	1dde <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    5ba8:	2301      	movs	r3, #1
    5baa:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    5bac:	f8bb 30f4 	ldrh.w	r3, [fp, #244]	; 0xf4
		conn_interval_us =
    5bb0:	f240 46e2 	movw	r6, #1250	; 0x4e2
    5bb4:	435e      	muls	r6, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    5bb6:	f003 f925 	bl	8e04 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    5bba:	f8db 200c 	ldr.w	r2, [fp, #12]
		if (_radio.scanner.win_offset_us == 0) {
    5bbe:	f8db 8104 	ldr.w	r8, [fp, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    5bc2:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    5bc4:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    5bc8:	bfd8      	it	le
    5bca:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    5bce:	f1b8 0f00 	cmp.w	r8, #0
    5bd2:	f040 8113 	bne.w	5dfc <isr+0x9a4>
			pdu_adv_tx->connect_ind.win_offset = 0;
    5bd6:	f885 8016 	strb.w	r8, [r5, #22]
    5bda:	f885 8017 	strb.w	r8, [r5, #23]
    5bde:	4698      	mov	r8, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    5be0:	2100      	movs	r1, #0
    5be2:	4608      	mov	r0, r1
    5be4:	f002 ff1a 	bl	8a1c <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    5be8:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    5bea:	eba8 0800 	sub.w	r8, r8, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    5bee:	4608      	mov	r0, r1
    5bf0:	f002 ff19 	bl	8a26 <radio_tx_chain_delay_get>
    5bf4:	eba8 0000 	sub.w	r0, r8, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    5bf8:	f100 031e 	add.w	r3, r0, #30
    5bfc:	930a      	str	r3, [sp, #40]	; 0x28
		pdu_adv_tx->connect_ind.interval =
    5bfe:	f8bb 30f4 	ldrh.w	r3, [fp, #244]	; 0xf4
    5c02:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    5c04:	f8bb 30f6 	ldrh.w	r3, [fp, #246]	; 0xf6
    5c08:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    5c0a:	f8bb 30f8 	ldrh.w	r3, [fp, #248]	; 0xf8
    5c0e:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    5c10:	f104 0117 	add.w	r1, r4, #23
    5c14:	2205      	movs	r2, #5
    5c16:	f105 001e 	add.w	r0, r5, #30
    5c1a:	f7fc f8e0 	bl	1dde <memcpy>
		pdu_adv_tx->connect_ind.hop =
    5c1e:	7fa2      	ldrb	r2, [r4, #30]
    5c20:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    5c24:	f362 0304 	bfi	r3, r2, #0, #5
    5c28:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    5c2c:	f89b 2120 	ldrb.w	r2, [fp, #288]	; 0x120
    5c30:	f362 1347 	bfi	r3, r2, #5, #3
    5c34:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    5c38:	f002 ff7a 	bl	8b30 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    5c3c:	4628      	mov	r0, r5
    5c3e:	f002 fee7 	bl	8a10 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    5c42:	f002 ff23 	bl	8a8c <radio_is_ready>
    5c46:	4680      	mov	r8, r0
    5c48:	2800      	cmp	r0, #0
    5c4a:	f47f ac58 	bne.w	54fe <isr+0xa6>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    5c4e:	f44f 7282 	mov.w	r2, #260	; 0x104
    5c52:	f8db 1108 	ldr.w	r1, [fp, #264]	; 0x108
    5c56:	4620      	mov	r0, r4
    5c58:	f7fc fd37 	bl	26ca <mem_index_get>
    5c5c:	8420      	strh	r0, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    5c5e:	f88a 800b 	strb.w	r8, [sl, #11]
		radio_le_conn_cmplt->role = 0x00;
    5c62:	f88a 800c 	strb.w	r8, [sl, #12]
				pdu_adv_tx->rx_addr;
    5c66:	782b      	ldrb	r3, [r5, #0]
		node_rx->hdr.handle = conn->handle;
    5c68:	f8aa 0006 	strh.w	r0, [sl, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    5c6c:	2206      	movs	r2, #6
				pdu_adv_tx->rx_addr;
    5c6e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    5c72:	f88a 2004 	strb.w	r2, [sl, #4]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    5c76:	4649      	mov	r1, r9
			radio_le_conn_cmplt->peer_addr_type =
    5c78:	f88a 300d 	strb.w	r3, [sl, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    5c7c:	f10a 000e 	add.w	r0, sl, #14
    5c80:	f7fc f8ad 	bl	1dde <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    5c84:	f8bb 30f4 	ldrh.w	r3, [fp, #244]	; 0xf4
    5c88:	f8aa 3014 	strh.w	r3, [sl, #20]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    5c8c:	f8bb 30f6 	ldrh.w	r3, [fp, #246]	; 0xf6
    5c90:	f8aa 3016 	strh.w	r3, [sl, #22]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    5c94:	f8bb 30f8 	ldrh.w	r3, [fp, #248]	; 0xf8
    5c98:	f8aa 3018 	strh.w	r3, [sl, #24]
			pdu_adv_tx->connect_ind.sca;
    5c9c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    5ca0:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    5ca4:	f88a 301a 	strb.w	r3, [sl, #26]
		rx_fc_lock(conn->handle);
    5ca8:	8c20      	ldrh	r0, [r4, #32]
    5caa:	f7fd ff7f 	bl	3bac <rx_fc_lock>
		packet_rx_enqueue();
    5cae:	f7fe fb3f 	bl	4330 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    5cb2:	2003      	movs	r0, #3
    5cb4:	f7fd fd1c 	bl	36f0 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    5cb8:	2800      	cmp	r0, #0
    5cba:	f43f ac20 	beq.w	54fe <isr+0xa6>
			node_rx->hdr.handle = conn->handle;
    5cbe:	8c23      	ldrh	r3, [r4, #32]
    5cc0:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    5cc2:	230a      	movs	r3, #10
    5cc4:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    5cc6:	7a3b      	ldrb	r3, [r7, #8]
    5cc8:	f013 0320 	ands.w	r3, r3, #32
    5ccc:	d00e      	beq.n	5cec <isr+0x894>
					((u16_t)conn->access_addr[1] << 8) |
    5cce:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    5cd0:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    5cd2:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    5cd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    5cd8:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    5cda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    5cde:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    5ce0:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    5ce2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    5ce6:	83e3      	strh	r3, [r4, #30]
				conn->data_chan_sel = 1;
    5ce8:	7761      	strb	r1, [r4, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    5cea:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    5cec:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    5cee:	f7fe fb1f 	bl	4330 <packet_rx_enqueue>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    5cf2:	f8db 317c 	ldr.w	r3, [fp, #380]	; 0x17c
    5cf6:	6063      	str	r3, [r4, #4]
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    5cf8:	2b27      	cmp	r3, #39	; 0x27
    5cfa:	bf38      	it	cc
    5cfc:	2327      	movcc	r3, #39	; 0x27
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    5cfe:	2227      	movs	r2, #39	; 0x27
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    5d00:	2500      	movs	r5, #0
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    5d02:	6022      	str	r2, [r4, #0]
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    5d04:	4698      	mov	r8, r3
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    5d06:	f8db 20fc 	ldr.w	r2, [fp, #252]	; 0xfc
    5d0a:	60e2      	str	r2, [r4, #12]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5d0c:	f240 633b 	movw	r3, #1595	; 0x63b
    5d10:	2206      	movs	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    5d12:	60a5      	str	r5, [r4, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5d14:	4629      	mov	r1, r5
    5d16:	9300      	str	r3, [sp, #0]
    5d18:	4628      	mov	r0, r5
    5d1a:	4b2e      	ldr	r3, [pc, #184]	; (5dd4 <isr+0x97c>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    5d1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 5de0 <isr+0x988>
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5d20:	f7fd fb8a 	bl	3438 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    5d24:	f240 613c 	movw	r1, #1596	; 0x63c
    5d28:	f7fd ff7e 	bl	3c28 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5d2c:	462b      	mov	r3, r5
    5d2e:	2204      	movs	r2, #4
    5d30:	4629      	mov	r1, r5
    5d32:	9500      	str	r5, [sp, #0]
    5d34:	4628      	mov	r0, r5
    5d36:	f7fd fb7f 	bl	3438 <ticker_stop>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5d3a:	f8db 3008 	ldr.w	r3, [fp, #8]
    5d3e:	f894 9020 	ldrb.w	r9, [r4, #32]
    5d42:	eba3 0b08 	sub.w	fp, r3, r8
		ticker_status =
    5d46:	f240 6353 	movw	r3, #1619	; 0x653
    5d4a:	9308      	str	r3, [sp, #32]
    5d4c:	4b22      	ldr	r3, [pc, #136]	; (5dd8 <isr+0x980>)
    5d4e:	e9cd 4306 	strd	r4, r3, [sp, #24]
    5d52:	4b22      	ldr	r3, [pc, #136]	; (5ddc <isr+0x984>)
    5d54:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5d56:	68e3      	ldr	r3, [r4, #12]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    5d58:	fba6 670a 	umull	r6, r7, r6, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5d5c:	4443      	add	r3, r8
		ticker_status =
    5d5e:	e9cd 5303 	strd	r5, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    5d62:	4630      	mov	r0, r6
    5d64:	a316      	add	r3, pc, #88	; (adr r3, 5dc0 <isr+0x968>)
    5d66:	e9d3 2300 	ldrd	r2, r3, [r3]
    5d6a:	4639      	mov	r1, r7
    5d6c:	f7fa faa2 	bl	2b4 <__aeabi_uldivmod>
    5d70:	4610      	mov	r0, r2
    5d72:	4619      	mov	r1, r3
    5d74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5d78:	2300      	movs	r3, #0
    5d7a:	f7fa fa9b 	bl	2b4 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    5d7e:	a310      	add	r3, pc, #64	; (adr r3, 5dc0 <isr+0x968>)
    5d80:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5d84:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    5d86:	4639      	mov	r1, r7
    5d88:	4630      	mov	r0, r6
    5d8a:	f7fa fa93 	bl	2b4 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    5d8e:	990a      	ldr	r1, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    5d90:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    5d92:	a30b      	add	r3, pc, #44	; (adr r3, 5dc0 <isr+0x968>)
    5d94:	e9d3 2300 	ldrd	r2, r3, [r3]
    5d98:	fba1 010a 	umull	r0, r1, r1, sl
    5d9c:	f7fa fa8a 	bl	2b4 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5da0:	f109 0907 	add.w	r9, r9, #7
		ticker_status =
    5da4:	fa5f f989 	uxtb.w	r9, r9
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5da8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    5dac:	9000      	str	r0, [sp, #0]
    5dae:	465b      	mov	r3, fp
    5db0:	464a      	mov	r2, r9
    5db2:	4629      	mov	r1, r5
    5db4:	e5ea      	b.n	598c <isr+0x534>
    5db6:	bf00      	nop
    5db8:	3b9aca00 	.word	0x3b9aca00
    5dbc:	00000000 	.word	0x00000000
    5dc0:	1afd498d 	.word	0x1afd498d
    5dc4:	00000007 	.word	0x00000007
    5dc8:	20000708 	.word	0x20000708
    5dcc:	20000702 	.word	0x20000702
    5dd0:	1afd498d 	.word	0x1afd498d
    5dd4:	00003c29 	.word	0x00003c29
    5dd8:	00003bed 	.word	0x00003bed
    5ddc:	0000538d 	.word	0x0000538d
    5de0:	3b9aca00 	.word	0x3b9aca00
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    5de4:	2b01      	cmp	r3, #1
    5de6:	f47f ae35 	bne.w	5a54 <isr+0x5fc>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    5dea:	2100      	movs	r1, #0
    5dec:	4620      	mov	r0, r4
    5dee:	f7fe fa6f 	bl	42d0 <isr_scan_tgta_check.isra.31>
				      (_radio.fc_req == _radio.fc_ack)) &&
    5df2:	2800      	cmp	r0, #0
    5df4:	f47f ae82 	bne.w	5afc <isr+0x6a4>
    5df8:	e62c      	b.n	5a54 <isr+0x5fc>
				conn_space_us += conn_interval_us;
    5dfa:	44b0      	add	r8, r6
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    5dfc:	f1b8 0f00 	cmp.w	r8, #0
    5e00:	dbfb      	blt.n	5dfa <isr+0x9a2>
    5e02:	4598      	cmp	r8, r3
    5e04:	d3f9      	bcc.n	5dfa <isr+0x9a2>
				(conn_space_us - conn_offset_us) / 1250;
    5e06:	eba8 0303 	sub.w	r3, r8, r3
			pdu_adv_tx->connect_ind.win_offset =
    5e0a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    5e0e:	fbb3 f3f2 	udiv	r3, r3, r2
    5e12:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    5e14:	7d6b      	ldrb	r3, [r5, #21]
    5e16:	3301      	adds	r3, #1
    5e18:	756b      	strb	r3, [r5, #21]
    5e1a:	e6e1      	b.n	5be0 <isr+0x788>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    5e1c:	b97b      	cbnz	r3, 5e3e <isr+0x9e6>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    5e1e:	7a7b      	ldrb	r3, [r7, #9]
    5e20:	2b00      	cmp	r3, #0
    5e22:	d13b      	bne.n	5e9c <isr+0xa44>
			_radio.state = STATE_CLOSE;
    5e24:	2303      	movs	r3, #3
    5e26:	f88b 3015 	strb.w	r3, [fp, #21]
			radio_disable();
    5e2a:	f002 fe11 	bl	8a50 <radio_disable>
			_radio.scanner.state = 0;
    5e2e:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
    5e32:	f36f 0341 	bfc	r3, #1, #1
    5e36:	f88b 30e0 	strb.w	r3, [fp, #224]	; 0xe0
    5e3a:	f7ff bb95 	b.w	5568 <isr+0x110>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    5e3e:	2b01      	cmp	r3, #1
    5e40:	d00d      	beq.n	5e5e <isr+0xa06>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    5e42:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
    5e44:	f003 020b 	and.w	r2, r3, #11
    5e48:	2a02      	cmp	r2, #2
    5e4a:	d0e8      	beq.n	5e1e <isr+0x9c6>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    5e4c:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    5e50:	2b07      	cmp	r3, #7
    5e52:	d10b      	bne.n	5e6c <isr+0xa14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    5e54:	f89b 30e1 	ldrb.w	r3, [fp, #225]	; 0xe1
    5e58:	075b      	lsls	r3, r3, #29
    5e5a:	d1e0      	bne.n	5e1e <isr+0x9c6>
    5e5c:	e7e2      	b.n	5e24 <isr+0x9cc>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    5e5e:	a90d      	add	r1, sp, #52	; 0x34
    5e60:	4620      	mov	r0, r4
    5e62:	f7fe fa35 	bl	42d0 <isr_scan_tgta_check.isra.31>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    5e66:	2800      	cmp	r0, #0
    5e68:	d1d9      	bne.n	5e1e <isr+0x9c6>
    5e6a:	e7ea      	b.n	5e42 <isr+0x9ea>
		   (_radio.scanner.phy)) ||
    5e6c:	2b04      	cmp	r3, #4
    5e6e:	d1d9      	bne.n	5e24 <isr+0x9cc>
		   (_radio.scanner.state != 0) &&
    5e70:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    5e74:	079e      	lsls	r6, r3, #30
    5e76:	d5d5      	bpl.n	5e24 <isr+0x9cc>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    5e78:	f002 fe40 	bl	8afc <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    5e7c:	7a3b      	ldrb	r3, [r7, #8]
    5e7e:	7802      	ldrb	r2, [r0, #0]
    5e80:	f3c3 1380 	ubfx	r3, r3, #6, #1
    5e84:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    5e88:	d1cc      	bne.n	5e24 <isr+0x9cc>
		(memcmp(&sreq->scan_req.adv_addr[0],
    5e8a:	2206      	movs	r2, #6
    5e8c:	f107 010a 	add.w	r1, r7, #10
    5e90:	3008      	adds	r0, #8
    5e92:	f7fb ff94 	bl	1dbe <memcmp>
		   (_radio.scanner.state != 0) &&
    5e96:	2800      	cmp	r0, #0
    5e98:	d0c1      	beq.n	5e1e <isr+0x9c6>
    5e9a:	e7c3      	b.n	5e24 <isr+0x9cc>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    5e9c:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
    5ea0:	2b00      	cmp	r3, #0
    5ea2:	d1bf      	bne.n	5e24 <isr+0x9cc>
		err = isr_rx_scan_report(rssi_ready,
    5ea4:	4628      	mov	r0, r5
    5ea6:	f7fe fab9 	bl	441c <isr_rx_scan_report.isra.38>
    5eaa:	e7bb      	b.n	5e24 <isr+0x9cc>
	_radio.packet_counter++;
    5eac:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    5eb0:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
	_radio.packet_counter++;
    5eb4:	3301      	adds	r3, #1
    5eb6:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    5eba:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    5ebe:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    5ec2:	2301      	movs	r3, #1
    5ec4:	7133      	strb	r3, [r6, #4]
    5ec6:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
	if (crc_ok) {
    5eca:	f1b8 0f00 	cmp.w	r8, #0
    5ece:	f000 832c 	beq.w	652a <isr+0x10d2>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    5ed2:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    5ed6:	7a30      	ldrb	r0, [r6, #8]
    5ed8:	f002 0101 	and.w	r1, r2, #1
    5edc:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5ee0:	4288      	cmp	r0, r1
    5ee2:	f000 80a8 	beq.w	6036 <isr+0xbde>
		_radio.conn_curr->sn++;
    5ee6:	f081 0101 	eor.w	r1, r1, #1
    5eea:	f361 0200 	bfi	r2, r1, #0, #1
    5eee:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		if (_radio.role == ROLE_SLAVE) {
    5ef2:	f89b 2014 	ldrb.w	r2, [fp, #20]
    5ef6:	2a03      	cmp	r2, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    5ef8:	bf02      	ittt	eq
    5efa:	f893 2038 	ldrbeq.w	r2, [r3, #56]	; 0x38
    5efe:	f042 0201 	orreq.w	r2, r2, #1
    5f02:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (_radio.conn_curr->empty == 0) {
    5f06:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    5f0a:	0614      	lsls	r4, r2, #24
    5f0c:	f100 808f 	bmi.w	602e <isr+0xbd6>
			node_tx = _radio.conn_curr->pkt_tx_head;
    5f10:	f8d3 70ec 	ldr.w	r7, [r3, #236]	; 0xec
				_radio.conn_curr->packet_tx_head_offset);
    5f14:	f893 c101 	ldrb.w	ip, [r3, #257]	; 0x101
			pdu_data_tx = (void *)(node_tx->pdu_data +
    5f18:	f107 0e04 	add.w	lr, r7, #4
    5f1c:	eb0e 050c 	add.w	r5, lr, ip
			pdu_data_tx_len = pdu_data_tx->len;
    5f20:	786c      	ldrb	r4, [r5, #1]
			if (pdu_data_tx_len != 0) {
    5f22:	b90c      	cbnz	r4, 5f28 <isr+0xad0>
	u8_t terminate = 0;
    5f24:	2500      	movs	r5, #0
    5f26:	e028      	b.n	5f7a <isr+0xb22>
				if (_radio.conn_curr->enc_tx) {
    5f28:	0690      	lsls	r0, r2, #26
    5f2a:	d50b      	bpl.n	5f44 <isr+0xaec>
					_radio.conn_curr->ccm_tx.counter++;
    5f2c:	f8d3 90da 	ldr.w	r9, [r3, #218]	; 0xda
    5f30:	f8d3 a0de 	ldr.w	sl, [r3, #222]	; 0xde
    5f34:	f119 0001 	adds.w	r0, r9, #1
    5f38:	f14a 0100 	adc.w	r1, sl, #0
    5f3c:	f8c3 00da 	str.w	r0, [r3, #218]	; 0xda
    5f40:	f8c3 10de 	str.w	r1, [r3, #222]	; 0xde
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    5f44:	f81e 300c 	ldrb.w	r3, [lr, ip]
    5f48:	f003 0303 	and.w	r3, r3, #3
    5f4c:	2b03      	cmp	r3, #3
    5f4e:	d1e9      	bne.n	5f24 <isr+0xacc>
	switch (pdu_data_tx->llctrl.opcode) {
    5f50:	78ea      	ldrb	r2, [r5, #3]
    5f52:	2a02      	cmp	r2, #2
    5f54:	d1e6      	bne.n	5f24 <isr+0xacc>
		_radio.state = STATE_CLOSE;
    5f56:	f88b 3015 	strb.w	r3, [fp, #21]
		radio_disable();
    5f5a:	f002 fd79 	bl	8a50 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    5f5e:	f002 fd95 	bl	8a8c <radio_is_ready>
    5f62:	2800      	cmp	r0, #0
    5f64:	f47f aacb 	bne.w	54fe <isr+0xa6>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    5f68:	7929      	ldrb	r1, [r5, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    5f6a:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    5f6e:	2913      	cmp	r1, #19
    5f70:	bf08      	it	eq
    5f72:	2116      	moveq	r1, #22
    5f74:	f7fe fa24 	bl	43c0 <terminate_ind_rx_enqueue>
		terminate = 1;
    5f78:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    5f7a:	f8db 2114 	ldr.w	r2, [fp, #276]	; 0x114
    5f7e:	f892 3101 	ldrb.w	r3, [r2, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    5f82:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    5f86:	4423      	add	r3, r4
    5f88:	b2db      	uxtb	r3, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    5f8a:	4299      	cmp	r1, r3
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    5f8c:	f882 3101 	strb.w	r3, [r2, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    5f90:	d02a      	beq.n	5fe8 <isr+0xb90>
	return NULL;
    5f92:	2700      	movs	r7, #0
	if (terminate) {
    5f94:	2d00      	cmp	r5, #0
    5f96:	d04f      	beq.n	6038 <isr+0xbe0>
		connection_release(_radio.conn_curr);
    5f98:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    5f9c:	f7fd ffa0 	bl	3ee0 <connection_release>
		_radio.conn_curr = NULL;
    5fa0:	2500      	movs	r5, #0
				_radio.conn_curr = NULL;
    5fa2:	f8cb 5114 	str.w	r5, [fp, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    5fa6:	f002 ff0f 	bl	8dc8 <radio_tmr_aa_restore>
    5faa:	b918      	cbnz	r0, 5fb4 <isr+0xb5c>
		radio_tmr_aa_save(radio_tmr_aa_get());
    5fac:	f002 ff00 	bl	8db0 <radio_tmr_aa_get>
    5fb0:	f002 ff04 	bl	8dbc <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    5fb4:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    5fb8:	2b00      	cmp	r3, #0
    5fba:	f43f aad5 	beq.w	5568 <isr+0x110>
	if (tx_release) {
    5fbe:	b11f      	cbz	r7, 5fc8 <isr+0xb70>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    5fc0:	4639      	mov	r1, r7
    5fc2:	8c18      	ldrh	r0, [r3, #32]
    5fc4:	f7fd ff18 	bl	3df8 <pdu_node_tx_release>
	if (rx_enqueue) {
    5fc8:	2d00      	cmp	r5, #0
    5fca:	f43f aacd 	beq.w	5568 <isr+0x110>
		rx_fc_lock(_radio.conn_curr->handle);
    5fce:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    5fd2:	8c18      	ldrh	r0, [r3, #32]
    5fd4:	f7fd fdea 	bl	3bac <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    5fd8:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    5fdc:	8c1b      	ldrh	r3, [r3, #32]
    5fde:	80f3      	strh	r3, [r6, #6]
		packet_rx_enqueue();
    5fe0:	f7fe f9a6 	bl	4330 <packet_rx_enqueue>
    5fe4:	f7ff bac0 	b.w	5568 <isr+0x110>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    5fe8:	e9d2 313b 	ldrd	r3, r1, [r2, #236]	; 0xec
	conn->packet_tx_head_len = 0;
    5fec:	2000      	movs	r0, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    5fee:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    5ff0:	f8a2 0100 	strh.w	r0, [r2, #256]	; 0x100
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    5ff4:	d111      	bne.n	601a <isr+0xbc2>
		if (node_tx) {
    5ff6:	2f00      	cmp	r7, #0
    5ff8:	d0cb      	beq.n	5f92 <isr+0xb3a>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    5ffa:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    5ffe:	681c      	ldr	r4, [r3, #0]
    6000:	f8c2 40ec 	str.w	r4, [r2, #236]	; 0xec
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    6004:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl_last = NULL;
    6006:	bf0c      	ite	eq
    6008:	e9c2 003c 	strdeq	r0, r0, [r2, #240]	; 0xf0
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    600c:	f8c2 40f0 	strne.w	r4, [r2, #240]	; 0xf0
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    6010:	49c3      	ldr	r1, [pc, #780]	; (6320 <isr+0xec8>)
    6012:	4638      	mov	r0, r7
    6014:	f7fc fb41 	bl	269a <mem_release>
    6018:	e7bb      	b.n	5f92 <isr+0xb3a>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    601a:	f8d2 10f8 	ldr.w	r1, [r2, #248]	; 0xf8
    601e:	6818      	ldr	r0, [r3, #0]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    6020:	f8c2 00ec 	str.w	r0, [r2, #236]	; 0xec
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    6024:	428b      	cmp	r3, r1
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    6026:	bf08      	it	eq
    6028:	f8c2 00f8 	streq.w	r0, [r2, #248]	; 0xf8
    602c:	e7b2      	b.n	5f94 <isr+0xb3c>
			_radio.conn_curr->empty = 0;
    602e:	f36f 12c7 	bfc	r2, #7, #1
    6032:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	struct radio_pdu_node_tx *tx_release = NULL;
    6036:	2700      	movs	r7, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    6038:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    603c:	7a32      	ldrb	r2, [r6, #8]
    603e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    6042:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    6046:	f3c3 0340 	ubfx	r3, r3, #1, #1
    604a:	429a      	cmp	r2, r3
    604c:	f040 818f 	bne.w	636e <isr+0xf16>
	    (packet_rx_reserve_get(3) != 0) &&
    6050:	2003      	movs	r0, #3
    6052:	f7fd fb4d 	bl	36f0 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    6056:	2800      	cmp	r0, #0
    6058:	f000 8189 	beq.w	636e <isr+0xf16>
	    (packet_rx_reserve_get(3) != 0) &&
    605c:	f89b 317a 	ldrb.w	r3, [fp, #378]	; 0x17a
    6060:	b383      	cbz	r3, 60c4 <isr+0xc6c>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    6062:	f8db 3144 	ldr.w	r3, [fp, #324]	; 0x144
    6066:	f8db 2148 	ldr.w	r2, [fp, #328]	; 0x148
	    ((_radio.fc_ena == 0) ||
    606a:	4293      	cmp	r3, r2
    606c:	d105      	bne.n	607a <isr+0xc22>
	      (_radio.fc_req == _radio.fc_ack)) ||
    606e:	f89b 2178 	ldrb.w	r2, [fp, #376]	; 0x178
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    6072:	f89b 1179 	ldrb.w	r1, [fp, #377]	; 0x179
    6076:	4291      	cmp	r1, r2
    6078:	d024      	beq.n	60c4 <isr+0xc6c>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    607a:	f8db 2148 	ldr.w	r2, [fp, #328]	; 0x148
	      (_radio.fc_req == _radio.fc_ack)) ||
    607e:	4293      	cmp	r3, r2
    6080:	f000 8175 	beq.w	636e <isr+0xf16>
	      (_radio.fc_req != _radio.fc_ack) &&
    6084:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    6088:	f89b 2179 	ldrb.w	r2, [fp, #377]	; 0x179
    608c:	429a      	cmp	r2, r3
    608e:	f000 816e 	beq.w	636e <isr+0xf16>
		(((_radio.fc_req == 0) &&
    6092:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
    6096:	f8db 2114 	ldr.w	r2, [fp, #276]	; 0x114
	      (_radio.fc_req != _radio.fc_ack) &&
    609a:	b923      	cbnz	r3, 60a6 <isr+0xc4e>
		(((_radio.fc_req == 0) &&
    609c:	f8bb 1176 	ldrh.w	r1, [fp, #374]	; 0x176
    60a0:	8c13      	ldrh	r3, [r2, #32]
    60a2:	4299      	cmp	r1, r3
    60a4:	d00e      	beq.n	60c4 <isr+0xc6c>
		 ((_radio.fc_req != 0) &&
    60a6:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
		   _radio.conn_curr->handle)) ||
    60aa:	2b00      	cmp	r3, #0
    60ac:	f000 815f 	beq.w	636e <isr+0xf16>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    60b0:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
    60b4:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    60b8:	f8b3 1170 	ldrh.w	r1, [r3, #368]	; 0x170
    60bc:	8c13      	ldrh	r3, [r2, #32]
    60be:	4299      	cmp	r1, r3
    60c0:	f040 8155 	bne.w	636e <isr+0xf16>
		if (pdu_data_rx->len != 0) {
    60c4:	f896 9009 	ldrb.w	r9, [r6, #9]
    60c8:	f1b9 0f00 	cmp.w	r9, #0
    60cc:	f000 8131 	beq.w	6332 <isr+0xeda>
			if (_radio.conn_curr->enc_rx) {
    60d0:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    60d4:	f893 90a8 	ldrb.w	r9, [r3, #168]	; 0xa8
    60d8:	f019 0910 	ands.w	r9, r9, #16
    60dc:	d006      	beq.n	60ec <isr+0xc94>
				done = radio_ccm_is_done();
    60de:	f002 feff 	bl	8ee0 <radio_ccm_is_done>
				LL_ASSERT(done);
    60e2:	2800      	cmp	r0, #0
    60e4:	f43f aa0b 	beq.w	54fe <isr+0xa6>
				ccm_rx_increment = 1;
    60e8:	f04f 0901 	mov.w	r9, #1
			if ((_radio.conn_curr->enc_rx &&
    60ec:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    60f0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    60f4:	06d9      	lsls	r1, r3, #27
    60f6:	d40f      	bmi.n	6118 <isr+0xcc0>
			    (_radio.conn_curr->pause_rx &&
    60f8:	f8db 4114 	ldr.w	r4, [fp, #276]	; 0x114
    60fc:	7a33      	ldrb	r3, [r6, #8]
    60fe:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
			     !radio_ccm_mic_is_valid()) ||
    6102:	f012 0f04 	tst.w	r2, #4
    6106:	d120      	bne.n	614a <isr+0xcf2>
			switch (pdu_data_rx->ll_id) {
    6108:	f013 0303 	ands.w	r3, r3, #3
    610c:	f000 8111 	beq.w	6332 <isr+0xeda>
    6110:	2b02      	cmp	r3, #2
    6112:	d847      	bhi.n	61a4 <isr+0xd4c>
				*rx_enqueue = 1;
    6114:	2501      	movs	r5, #1
    6116:	e0b3      	b.n	6280 <isr+0xe28>
			     !radio_ccm_mic_is_valid()) ||
    6118:	f002 ff00 	bl	8f1c <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    611c:	2800      	cmp	r0, #0
    611e:	d1eb      	bne.n	60f8 <isr+0xca0>
				_radio.state = STATE_CLOSE;
    6120:	2303      	movs	r3, #3
    6122:	f88b 3015 	strb.w	r3, [fp, #21]
				radio_disable();
    6126:	f002 fc93 	bl	8a50 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    612a:	f002 fcaf 	bl	8a8c <radio_is_ready>
    612e:	4605      	mov	r5, r0
    6130:	2800      	cmp	r0, #0
    6132:	f47f a9e4 	bne.w	54fe <isr+0xa6>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    6136:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    613a:	213d      	movs	r1, #61	; 0x3d
    613c:	f7fe f940 	bl	43c0 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    6140:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    6144:	f7fd fecc 	bl	3ee0 <connection_release>
    6148:	e72b      	b.n	5fa2 <isr+0xb4a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    614a:	f003 0103 	and.w	r1, r3, #3
    614e:	2903      	cmp	r1, #3
    6150:	d1e6      	bne.n	6120 <isr+0xcc8>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    6152:	f994 001d 	ldrsb.w	r0, [r4, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    6156:	7af1      	ldrb	r1, [r6, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    6158:	2800      	cmp	r0, #0
    615a:	f002 0240 	and.w	r2, r2, #64	; 0x40
    615e:	db15      	blt.n	618c <isr+0xd34>
	       (!conn->role &&
    6160:	b922      	cbnz	r2, 616c <isr+0xd14>
		((!conn->refresh &&
    6162:	2902      	cmp	r1, #2
    6164:	d0d0      	beq.n	6108 <isr+0xcb0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    6166:	2911      	cmp	r1, #17
    6168:	d8da      	bhi.n	6120 <isr+0xcc8>
    616a:	e009      	b.n	6180 <isr+0xd28>
		 (conn->refresh &&
    616c:	1e8a      	subs	r2, r1, #2
    616e:	b2d2      	uxtb	r2, r2
    6170:	2a09      	cmp	r2, #9
    6172:	d8f8      	bhi.n	6166 <isr+0xd0e>
    6174:	f240 2005 	movw	r0, #517	; 0x205
    6178:	fa20 f202 	lsr.w	r2, r0, r2
    617c:	07d2      	lsls	r2, r2, #31
    617e:	d4c3      	bmi.n	6108 <isr+0xcb0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    6180:	4a68      	ldr	r2, [pc, #416]	; (6324 <isr+0xecc>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    6182:	fa22 f101 	lsr.w	r1, r2, r1
    6186:	07cd      	lsls	r5, r1, #31
    6188:	d5ca      	bpl.n	6120 <isr+0xcc8>
    618a:	e7bd      	b.n	6108 <isr+0xcb0>
	       (conn->role &&
    618c:	b92a      	cbnz	r2, 619a <isr+0xd42>
		((!conn->refresh &&
    618e:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    6190:	d0ba      	beq.n	6108 <isr+0xcb0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    6192:	2911      	cmp	r1, #17
    6194:	d8c4      	bhi.n	6120 <isr+0xcc8>
    6196:	4a64      	ldr	r2, [pc, #400]	; (6328 <isr+0xed0>)
    6198:	e7f3      	b.n	6182 <isr+0xd2a>
		 (conn->refresh &&
    619a:	1e8a      	subs	r2, r1, #2
    619c:	2a01      	cmp	r2, #1
    619e:	d9b3      	bls.n	6108 <isr+0xcb0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    61a0:	290b      	cmp	r1, #11
    61a2:	e7f5      	b.n	6190 <isr+0xd38>
	switch (pdu_data_rx->llctrl.opcode) {
    61a4:	7af5      	ldrb	r5, [r6, #11]
	pdu_data_rx = (void *)node_rx->pdu_data;
    61a6:	f106 0a08 	add.w	sl, r6, #8
	switch (pdu_data_rx->llctrl.opcode) {
    61aa:	2d19      	cmp	r5, #25
    61ac:	f200 817a 	bhi.w	64a4 <isr+0x104c>
    61b0:	e8df f015 	tbh	[pc, r5, lsl #1]
    61b4:	0084001a 	.word	0x0084001a
    61b8:	017800c1 	.word	0x017800c1
    61bc:	01780178 	.word	0x01780178
    61c0:	018c0178 	.word	0x018c0178
    61c4:	00e700ca 	.word	0x00e700ca
    61c8:	01780178 	.word	0x01780178
    61cc:	0178010d 	.word	0x0178010d
    61d0:	017800df 	.word	0x017800df
    61d4:	01710178 	.word	0x01710178
    61d8:	01780178 	.word	0x01780178
    61dc:	01780178 	.word	0x01780178
    61e0:	01780178 	.word	0x01780178
    61e4:	01930178 	.word	0x01930178
		if (!_radio.conn_curr->role ||
    61e8:	f994 301d 	ldrsb.w	r3, [r4, #29]
    61ec:	2b00      	cmp	r3, #0
    61ee:	f280 8159 	bge.w	64a4 <isr+0x104c>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    61f2:	7a71      	ldrb	r1, [r6, #9]
    61f4:	2000      	movs	r0, #0
    61f6:	f7fd fa2b 	bl	3650 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    61fa:	2800      	cmp	r0, #0
    61fc:	f000 8152 	beq.w	64a4 <isr+0x104c>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    6200:	f8b6 1015 	ldrh.w	r1, [r6, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    6204:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    6206:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    6208:	0418      	lsls	r0, r3, #16
    620a:	f100 808f 	bmi.w	632c <isr+0xed4>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    620e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    6212:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    6216:	429a      	cmp	r2, r3
    6218:	f47f a971 	bne.w	54fe <isr+0xa6>
	if (_radio.conn_upd == 0) {
    621c:	f8db 2180 	ldr.w	r2, [fp, #384]	; 0x180
    6220:	b90a      	cbnz	r2, 6226 <isr+0xdce>
		_radio.conn_upd = conn;
    6222:	f8cb 4180 	str.w	r4, [fp, #384]	; 0x180
	conn->llcp.conn_upd.win_size =
    6226:	7b32      	ldrb	r2, [r6, #12]
    6228:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    622c:	f8b6 000d 	ldrh.w	r0, [r6, #13]
    6230:	f240 42e2 	movw	r2, #1250	; 0x4e2
    6234:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    6236:	66e2      	str	r2, [r4, #108]	; 0x6c
		pdu_data_rx->llctrl.conn_update_ind.interval;
    6238:	7c30      	ldrb	r0, [r6, #16]
    623a:	7bf2      	ldrb	r2, [r6, #15]
    623c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    6240:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		pdu_data_rx->llctrl.conn_update_ind.latency;
    6244:	7cb0      	ldrb	r0, [r6, #18]
    6246:	7c72      	ldrb	r2, [r6, #17]
    6248:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    624c:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    6250:	7cf2      	ldrb	r2, [r6, #19]
    6252:	7d30      	ldrb	r0, [r6, #20]
	conn->llcp.conn_upd.instant =
    6254:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    6258:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    625c:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    6260:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	conn->llcp.conn_upd.is_internal = 0;
    6264:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    6268:	f36f 0282 	bfc	r2, #2, #1
    626c:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	conn->llcp_ack--;
    6270:	3b01      	subs	r3, #1
	conn->llcp_type = LLCP_CONN_UPD;
    6272:	2201      	movs	r2, #1
			_radio.conn_curr->procedure_expire = 0;
    6274:	2500      	movs	r5, #0
	conn->llcp_type = LLCP_CONN_UPD;
    6276:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    627a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			_radio.conn_curr->procedure_expire = 0;
    627e:	86a5      	strh	r5, [r4, #52]	; 0x34
			_radio.conn_curr->nesn++;
    6280:	f8db 1114 	ldr.w	r1, [fp, #276]	; 0x114
    6284:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
    6288:	f083 0302 	eor.w	r3, r3, #2
    628c:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
			if (ccm_rx_increment) {
    6290:	f1b9 0f00 	cmp.w	r9, #0
    6294:	d00b      	beq.n	62ae <isr+0xe56>
				_radio.conn_curr->ccm_rx.counter++;
    6296:	f8d1 90b9 	ldr.w	r9, [r1, #185]	; 0xb9
    629a:	f8d1 a0bd 	ldr.w	sl, [r1, #189]	; 0xbd
    629e:	f119 0201 	adds.w	r2, r9, #1
    62a2:	f14a 0300 	adc.w	r3, sl, #0
    62a6:	f8c1 20b9 	str.w	r2, [r1, #185]	; 0xb9
    62aa:	f8c1 30bd 	str.w	r3, [r1, #189]	; 0xbd
		_radio.conn_curr->supervision_expire = 0;
    62ae:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
		_radio.crc_expire = 0;
    62b2:	2400      	movs	r4, #0
    62b4:	f88b 4119 	strb.w	r4, [fp, #281]	; 0x119
		_radio.conn_curr->supervision_expire = 0;
    62b8:	861c      	strh	r4, [r3, #48]	; 0x30
    62ba:	e14b      	b.n	6554 <isr+0x10fc>
		if (!_radio.conn_curr->role ||
    62bc:	f994 301d 	ldrsb.w	r3, [r4, #29]
    62c0:	2b00      	cmp	r3, #0
    62c2:	f280 80ef 	bge.w	64a4 <isr+0x104c>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    62c6:	7a71      	ldrb	r1, [r6, #9]
    62c8:	2001      	movs	r0, #1
    62ca:	f7fd f9c1 	bl	3650 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    62ce:	2800      	cmp	r0, #0
    62d0:	f000 80e8 	beq.w	64a4 <isr+0x104c>
	      conn->event_counter) & 0xffff) > 0x7fff) {
    62d4:	8c62      	ldrh	r2, [r4, #34]	; 0x22
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    62d6:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    62da:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    62dc:	041a      	lsls	r2, r3, #16
    62de:	d425      	bmi.n	632c <isr+0xed4>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    62e0:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    62e4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    62e8:	429a      	cmp	r2, r3
    62ea:	f47f a908 	bne.w	54fe <isr+0xa6>
	memcpy(&conn->llcp.chan_map.chm[0],
    62ee:	2205      	movs	r2, #5
    62f0:	f106 010c 	add.w	r1, r6, #12
    62f4:	f104 0061 	add.w	r0, r4, #97	; 0x61
    62f8:	f7fb fd71 	bl	1dde <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    62fc:	7c73      	ldrb	r3, [r6, #17]
    62fe:	7cb2      	ldrb	r2, [r6, #18]
    6300:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    6304:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->llcp_type = LLCP_CHAN_MAP;
    6308:	2302      	movs	r3, #2
    630a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    630e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	conn->llcp.chan_map.initiate = 0;
    6312:	2500      	movs	r5, #0
	conn->llcp_ack--;
    6314:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    6316:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
	conn->llcp_ack--;
    631a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    631e:	e7af      	b.n	6280 <isr+0xe28>
    6320:	20000774 	.word	0x20000774
    6324:	00022060 	.word	0x00022060
    6328:	00022040 	.word	0x00022040
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    632c:	2328      	movs	r3, #40	; 0x28
		_radio.conn_curr->llcp_terminate.reason_peer =
    632e:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
	u8_t rx_enqueue = 0;
    6332:	2500      	movs	r5, #0
    6334:	e7a4      	b.n	6280 <isr+0xe28>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    6336:	7a71      	ldrb	r1, [r6, #9]
    6338:	2002      	movs	r0, #2
    633a:	f7fd f989 	bl	3650 <pdu_len_cmp>
    633e:	2800      	cmp	r0, #0
    6340:	f000 80b0 	beq.w	64a4 <isr+0x104c>
		_radio.conn_curr->llcp_terminate.reason_peer =
    6344:	7b33      	ldrb	r3, [r6, #12]
    6346:	e7f2      	b.n	632e <isr+0xed6>
		if (!_radio.conn_curr->role ||
    6348:	f994 301d 	ldrsb.w	r3, [r4, #29]
    634c:	2b00      	cmp	r3, #0
    634e:	f280 80a9 	bge.w	64a4 <isr+0x104c>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    6352:	7a71      	ldrb	r1, [r6, #9]
    6354:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    6356:	f7fd f97b 	bl	3650 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    635a:	2800      	cmp	r0, #0
    635c:	f000 80a2 	beq.w	64a4 <isr+0x104c>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    6360:	4651      	mov	r1, sl
    6362:	4620      	mov	r0, r4
    6364:	f7fe fc86 	bl	4c74 <feature_rsp_send>
    6368:	4605      	mov	r5, r0
		if (!nack) {
    636a:	2800      	cmp	r0, #0
    636c:	d088      	beq.n	6280 <isr+0xe28>
	u8_t rx_enqueue = 0;
    636e:	2500      	movs	r5, #0
    6370:	e79d      	b.n	62ae <isr+0xe56>
		if (_radio.conn_curr->role ||
    6372:	f994 301d 	ldrsb.w	r3, [r4, #29]
    6376:	2b00      	cmp	r3, #0
    6378:	f2c0 8094 	blt.w	64a4 <isr+0x104c>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    637c:	7a71      	ldrb	r1, [r6, #9]
    637e:	200e      	movs	r0, #14
    6380:	e7e9      	b.n	6356 <isr+0xefe>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    6382:	7a71      	ldrb	r1, [r6, #9]
    6384:	2009      	movs	r0, #9
    6386:	f7fd f963 	bl	3650 <pdu_len_cmp>
    638a:	2800      	cmp	r0, #0
    638c:	f000 808a 	beq.w	64a4 <isr+0x104c>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6390:	7b33      	ldrb	r3, [r6, #12]
	       (features[1] << 8) | (features[2] << 16);
    6392:	7b72      	ldrb	r2, [r6, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    6398:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    639c:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    63a0:	f043 0310 	orr.w	r3, r3, #16
    63a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    63a8:	7bb2      	ldrb	r2, [r6, #14]
    63aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    63ae:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    63b2:	f3c2 0210 	ubfx	r2, r2, #0, #17
    63b6:	4013      	ands	r3, r2
    63b8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		_radio.conn_curr->common.fex_valid = 1;
    63bc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    63c0:	f043 0320 	orr.w	r3, r3, #32
    63c4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		_radio.conn_curr->procedure_expire = 0;
    63c8:	2300      	movs	r3, #0
    63ca:	86a3      	strh	r3, [r4, #52]	; 0x34
    63cc:	e6a2      	b.n	6114 <isr+0xcbc>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    63ce:	7a71      	ldrb	r1, [r6, #9]
    63d0:	200c      	movs	r0, #12
    63d2:	f7fd f93d 	bl	3650 <pdu_len_cmp>
    63d6:	2800      	cmp	r0, #0
    63d8:	d064      	beq.n	64a4 <isr+0x104c>
	if (!conn->llcp_version.tx) {
    63da:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    63de:	f013 0501 	ands.w	r5, r3, #1
    63e2:	d151      	bne.n	6488 <isr+0x1030>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    63e4:	48c4      	ldr	r0, [pc, #784]	; (66f8 <isr+0x12a0>)
    63e6:	f7fc f93f 	bl	2668 <mem_acquire>
		if (!node_tx) {
    63ea:	4601      	mov	r1, r0
    63ec:	2800      	cmp	r0, #0
    63ee:	d0be      	beq.n	636e <isr+0xf16>
		conn->llcp_version.tx = 1;
    63f0:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    63f4:	f043 0301 	orr.w	r3, r3, #1
    63f8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    63fc:	7903      	ldrb	r3, [r0, #4]
    63fe:	f043 0303 	orr.w	r3, r3, #3
    6402:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    6404:	2306      	movs	r3, #6
    6406:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    6408:	230c      	movs	r3, #12
    640a:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    640c:	2309      	movs	r3, #9
    640e:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    6410:	f06f 030e 	mvn.w	r3, #14
    6414:	7243      	strb	r3, [r0, #9]
    6416:	2305      	movs	r3, #5
    6418:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    641a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    641e:	72c3      	strb	r3, [r0, #11]
    6420:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    6422:	4620      	mov	r0, r4
    6424:	f7fe fc0c 	bl	4c40 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    6428:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    642c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6430:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    6434:	f002 fb5e 	bl	8af4 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6438:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    643a:	7045      	strb	r5, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    643c:	2201      	movs	r2, #1
    643e:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    6442:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6446:	7003      	strb	r3, [r0, #0]
    6448:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    644a:	b1c2      	cbz	r2, 647e <isr+0x1026>
		pdu_data_tx->md = 1;
    644c:	f043 0310 	orr.w	r3, r3, #16
    6450:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    6452:	7b33      	ldrb	r3, [r6, #12]
    6454:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
	conn->llcp_version.company_id = v->company_id;
    6458:	7bb2      	ldrb	r2, [r6, #14]
    645a:	7b73      	ldrb	r3, [r6, #13]
    645c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6460:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
	conn->llcp_version.sub_version_number = v->sub_version_number;
    6464:	7bf3      	ldrb	r3, [r6, #15]
    6466:	7c32      	ldrb	r2, [r6, #16]
    6468:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    646c:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
	conn->llcp_version.rx = 1;
    6470:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    6474:	f043 0302 	orr.w	r3, r3, #2
    6478:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    647c:	e700      	b.n	6280 <isr+0xe28>
		pdu_data_tx->md = 0;
    647e:	f362 1304 	bfi	r3, r2, #4, #1
    6482:	7003      	strb	r3, [r0, #0]
	u8_t rx_enqueue = 0;
    6484:	4615      	mov	r5, r2
    6486:	e7e4      	b.n	6452 <isr+0xffa>
	} else if (!conn->llcp_version.rx) {
    6488:	f013 0302 	ands.w	r3, r3, #2
    648c:	f47f af51 	bne.w	6332 <isr+0xeda>
		conn->procedure_expire = 0;
    6490:	86a3      	strh	r3, [r4, #52]	; 0x34
		*rx_enqueue = 1;
    6492:	2501      	movs	r5, #1
    6494:	e7dd      	b.n	6452 <isr+0xffa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    6496:	7a71      	ldrb	r1, [r6, #9]
    6498:	2011      	movs	r0, #17
    649a:	f7fd f8d9 	bl	3650 <pdu_len_cmp>
    649e:	2800      	cmp	r0, #0
    64a0:	f47f af47 	bne.w	6332 <isr+0xeda>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    64a4:	4894      	ldr	r0, [pc, #592]	; (66f8 <isr+0x12a0>)
    64a6:	f7fc f8df 	bl	2668 <mem_acquire>
	if (!node_tx) {
    64aa:	4601      	mov	r1, r0
    64ac:	2800      	cmp	r0, #0
    64ae:	f43f af5e 	beq.w	636e <isr+0xf16>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    64b2:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    64b4:	7205      	strb	r5, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    64b6:	f043 0303 	orr.w	r3, r3, #3
    64ba:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    64bc:	2302      	movs	r3, #2
    64be:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    64c0:	2307      	movs	r3, #7
    64c2:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    64c4:	4620      	mov	r0, r4
    64c6:	f7fe fb8d 	bl	4be4 <ctrl_tx_enqueue>
    64ca:	e732      	b.n	6332 <isr+0xeda>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    64cc:	7a71      	ldrb	r1, [r6, #9]
    64ce:	2007      	movs	r0, #7
    64d0:	f7fd f8be 	bl	3650 <pdu_len_cmp>
    64d4:	2800      	cmp	r0, #0
    64d6:	d0e5      	beq.n	64a4 <isr+0x104c>
    64d8:	e776      	b.n	63c8 <isr+0xf70>
		if (_radio.conn_curr->role ||
    64da:	f994 301d 	ldrsb.w	r3, [r4, #29]
    64de:	2b00      	cmp	r3, #0
    64e0:	dbe0      	blt.n	64a4 <isr+0x104c>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    64e2:	7a71      	ldrb	r1, [r6, #9]
    64e4:	2019      	movs	r0, #25
    64e6:	f7fd f8b3 	bl	3650 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    64ea:	2800      	cmp	r0, #0
    64ec:	d0da      	beq.n	64a4 <isr+0x104c>
			if (!(p->phys & 0x01)) {
    64ee:	7b35      	ldrb	r5, [r6, #12]
    64f0:	f015 0501 	ands.w	r5, r5, #1
    64f4:	f43f aec4 	beq.w	6280 <isr+0xe28>
			if (conn->llcp_req != conn->llcp_ack) {
    64f8:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    64fc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    6500:	429a      	cmp	r2, r3
    6502:	f47f af16 	bne.w	6332 <isr+0xeda>
			memcpy(&conn->llcp.chan_map.chm[0],
    6506:	2205      	movs	r2, #5
    6508:	497c      	ldr	r1, [pc, #496]	; (66fc <isr+0x12a4>)
    650a:	f104 0061 	add.w	r0, r4, #97	; 0x61
    650e:	f7fb fc66 	bl	1dde <memcpy>
			conn->llcp.chan_map.initiate = 1;
    6512:	2301      	movs	r3, #1
    6514:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			conn->llcp_type = LLCP_CHAN_MAP;
    6518:	2302      	movs	r3, #2
    651a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			conn->llcp_ack--;
    651e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    6522:	3b01      	subs	r3, #1
    6524:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    6528:	e703      	b.n	6332 <isr+0xeda>
		if (_radio.crc_expire == 0) {
    652a:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
    652e:	b912      	cbnz	r2, 6536 <isr+0x10de>
			_radio.crc_expire = 2;
    6530:	2202      	movs	r2, #2
    6532:	f880 2119 	strb.w	r2, [r0, #281]	; 0x119
		_radio.crc_expire--;
    6536:	f89b 4119 	ldrb.w	r4, [fp, #281]	; 0x119
    653a:	3c01      	subs	r4, #1
    653c:	b2e4      	uxtb	r4, r4
    653e:	f88b 4119 	strb.w	r4, [fp, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    6542:	8e1d      	ldrh	r5, [r3, #48]	; 0x30
		crc_close = (_radio.crc_expire == 0);
    6544:	fab4 f484 	clz	r4, r4
    6548:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
    654a:	2d00      	cmp	r5, #0
    654c:	d143      	bne.n	65d6 <isr+0x117e>
			_radio.conn_curr->supervision_expire =
    654e:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    6550:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    6552:	462f      	mov	r7, r5
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    6554:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    6558:	a90d      	add	r1, sp, #52	; 0x34
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    655a:	f890 90a8 	ldrb.w	r9, [r0, #168]	; 0xa8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    655e:	f7fe ff17 	bl	5390 <prepare_pdu_data_tx>
			STATE_CLOSE : STATE_TX;
    6562:	f89b 3015 	ldrb.w	r3, [fp, #21]
    6566:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    6568:	ea4f 19d9 	mov.w	r9, r9, lsr #7
			STATE_CLOSE : STATE_TX;
    656c:	d038      	beq.n	65e0 <isr+0x1188>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    656e:	bba4      	cbnz	r4, 65da <isr+0x1182>
    6570:	f1b8 0f00 	cmp.w	r8, #0
    6574:	d005      	beq.n	6582 <isr+0x112a>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    6576:	7a33      	ldrb	r3, [r6, #8]
    6578:	06db      	lsls	r3, r3, #27
    657a:	d402      	bmi.n	6582 <isr+0x112a>
			 (pdu_data_tx->len == 0)) ||
    657c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			((crc_ok) && (pdu_data_rx->md == 0) &&
    657e:	785b      	ldrb	r3, [r3, #1]
    6580:	b35b      	cbz	r3, 65da <isr+0x1182>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    6582:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    6586:	f893 409b 	ldrb.w	r4, [r3, #155]	; 0x9b
    658a:	bb34      	cbnz	r4, 65da <isr+0x1182>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    658c:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    658e:	2096      	movs	r0, #150	; 0x96
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    6590:	f88b 3015 	strb.w	r3, [fp, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
    6594:	f002 fb46 	bl	8c24 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    6598:	4620      	mov	r0, r4
    659a:	f002 fab3 	bl	8b04 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    659e:	f002 fc1f 	bl	8de0 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    65a2:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    65a6:	990d      	ldr	r1, [sp, #52]	; 0x34
    65a8:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    65ac:	780b      	ldrb	r3, [r1, #0]
    65ae:	f3c2 0200 	ubfx	r2, r2, #0, #1
    65b2:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    65b6:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    65ba:	f3c2 0240 	ubfx	r2, r2, #1, #1
    65be:	f362 0382 	bfi	r3, r2, #2, #1
    65c2:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    65c4:	f7fd fd10 	bl	3fe8 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    65c8:	f002 fa60 	bl	8a8c <radio_is_ready>
    65cc:	2800      	cmp	r0, #0
    65ce:	f43f acea 	beq.w	5fa6 <isr+0xb4e>
    65d2:	f7fe bf94 	b.w	54fe <isr+0xa6>
	u8_t rx_enqueue = 0;
    65d6:	2500      	movs	r5, #0
    65d8:	e7bb      	b.n	6552 <isr+0x10fa>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    65da:	2303      	movs	r3, #3
    65dc:	f88b 3015 	strb.w	r3, [fp, #21]
		if (_radio.role == ROLE_MASTER) {
    65e0:	f89b 3014 	ldrb.w	r3, [fp, #20]
    65e4:	2b04      	cmp	r3, #4
    65e6:	d10a      	bne.n	65fe <isr+0x11a6>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    65e8:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    65ec:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    65f0:	f369 12c7 	bfi	r2, r9, #7, #1
    65f4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			radio_disable();
    65f8:	f002 fa2a 	bl	8a50 <radio_disable>
    65fc:	e4d3      	b.n	5fa6 <isr+0xb4e>
			radio_switch_complete_and_disable();
    65fe:	f002 fa97 	bl	8b30 <radio_switch_complete_and_disable>
    6602:	e7ce      	b.n	65a2 <isr+0x114a>
	switch (_radio.role) {
    6604:	7d02      	ldrb	r2, [r0, #20]
    6606:	2a04      	cmp	r2, #4
    6608:	f63e af79 	bhi.w	54fe <isr+0xa6>
    660c:	e8df f012 	tbh	[pc, r2, lsl #1]
    6610:	00050193 	.word	0x00050193
    6614:	00a90052 	.word	0x00a90052
    6618:	00a9      	.short	0x00a9
	if ((_radio.state == STATE_CLOSE) &&
    661a:	2b03      	cmp	r3, #3
    661c:	d109      	bne.n	6632 <isr+0x11da>
	    (_radio.advertiser.chan_map_current != 0)) {
    661e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    6622:	075d      	lsls	r5, r3, #29
    6624:	d005      	beq.n	6632 <isr+0x11da>
		adv_setup();
    6626:	f7fd fd1f 	bl	4068 <adv_setup>
		radio_tx_enable();
    662a:	f002 fa0b 	bl	8a44 <radio_tx_enable>
    662e:	f7fe bf77 	b.w	5520 <isr+0xc8>
		radio_filter_disable();
    6632:	f002 fac7 	bl	8bc4 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    6636:	f89b 3015 	ldrb.w	r3, [fp, #21]
    663a:	2b03      	cmp	r3, #3
    663c:	d171      	bne.n	6722 <isr+0x12ca>
		    (!_radio.advertiser.is_hdcd)) {
    663e:	f89b 4028 	ldrb.w	r4, [fp, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    6642:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    6646:	d16c      	bne.n	6722 <isr+0x12ca>
			entropy_nrf_get_entropy_isr(_radio.entropy,
    6648:	2201      	movs	r2, #1
    664a:	a90d      	add	r1, sp, #52	; 0x34
    664c:	f8db 0004 	ldr.w	r0, [fp, #4]
    6650:	f003 f9b8 	bl	99c4 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
    6654:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
					HAL_TICKER_US_TO_TICKS(random_delay *
    6658:	4829      	ldr	r0, [pc, #164]	; (6700 <isr+0x12a8>)
			random_delay %= 10;
    665a:	230a      	movs	r3, #10
    665c:	fbb1 f2f3 	udiv	r2, r1, r3
    6660:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    6664:	3201      	adds	r2, #1
    6666:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
    6668:	b2d5      	uxtb	r5, r2
    666a:	fba5 0100 	umull	r0, r1, r5, r0
    666e:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    6670:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
					HAL_TICKER_US_TO_TICKS(random_delay *
    6674:	fb03 1105 	mla	r1, r3, r5, r1
    6678:	a31d      	add	r3, pc, #116	; (adr r3, 66f0 <isr+0x1298>)
    667a:	e9d3 2300 	ldrd	r2, r3, [r3]
    667e:	f7f9 fe19 	bl	2b4 <__aeabi_uldivmod>
			ticker_status =
    6682:	f640 734e 	movw	r3, #3918	; 0xf4e
    6686:	9306      	str	r3, [sp, #24]
    6688:	4b1e      	ldr	r3, [pc, #120]	; (6704 <isr+0x12ac>)
    668a:	e9cd 4402 	strd	r4, r4, [sp, #8]
    668e:	e9cd 4304 	strd	r4, r3, [sp, #16]
    6692:	e9cd 4400 	strd	r4, r4, [sp]
    6696:	b283      	uxth	r3, r0
    6698:	2205      	movs	r2, #5
    669a:	4621      	mov	r1, r4
    669c:	4620      	mov	r0, r4
    669e:	f7fc fe81 	bl	33a4 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    66a2:	f030 0302 	bics.w	r3, r0, #2
    66a6:	d03c      	beq.n	6722 <isr+0x12ca>
    66a8:	f89b 3013 	ldrb.w	r3, [fp, #19]
    66ac:	2b05      	cmp	r3, #5
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    66ae:	d038      	beq.n	6722 <isr+0x12ca>
    66b0:	f7fe bf25 	b.w	54fe <isr+0xa6>
	if (_radio.state == STATE_CLOSE) {
    66b4:	2b03      	cmp	r3, #3
    66b6:	d127      	bne.n	6708 <isr+0x12b0>
		radio_tmr_tifs_set(RADIO_TIFS);
    66b8:	2096      	movs	r0, #150	; 0x96
    66ba:	f002 fab3 	bl	8c24 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    66be:	2300      	movs	r3, #0
    66c0:	4619      	mov	r1, r3
    66c2:	461a      	mov	r2, r3
    66c4:	4618      	mov	r0, r3
    66c6:	f002 fa29 	bl	8b1c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    66ca:	f8db 3134 	ldr.w	r3, [fp, #308]	; 0x134
    66ce:	f89b 2139 	ldrb.w	r2, [fp, #313]	; 0x139
		radio_pkt_rx_set(_radio.packet_rx
    66d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    66d6:	3008      	adds	r0, #8
    66d8:	f002 f994 	bl	8a04 <radio_pkt_rx_set>
		radio_rssi_measure();
    66dc:	f002 fa36 	bl	8b4c <radio_rssi_measure>
		_radio.state = STATE_RX;
    66e0:	2301      	movs	r3, #1
    66e2:	f88b 3015 	strb.w	r3, [fp, #21]
		radio_rx_enable();
    66e6:	f002 f9a7 	bl	8a38 <radio_rx_enable>
    66ea:	f7fe bf19 	b.w	5520 <isr+0xc8>
    66ee:	bf00      	nop
    66f0:	1afd498d 	.word	0x1afd498d
    66f4:	00000007 	.word	0x00000007
    66f8:	20000774 	.word	0x20000774
    66fc:	2000073a 	.word	0x2000073a
    6700:	d4a51000 	.word	0xd4a51000
    6704:	00003c59 	.word	0x00003c59
		radio_filter_disable();
    6708:	f002 fa5c 	bl	8bc4 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    670c:	f89b 3015 	ldrb.w	r3, [fp, #21]
    6710:	2b05      	cmp	r3, #5
    6712:	d106      	bne.n	6722 <isr+0x12ca>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6714:	2300      	movs	r3, #0
    6716:	9300      	str	r3, [sp, #0]
    6718:	2204      	movs	r2, #4
    671a:	4619      	mov	r1, r3
    671c:	4618      	mov	r0, r3
    671e:	f7fc fe8b 	bl	3438 <ticker_stop>
	_radio.role = ROLE_NONE;
    6722:	2400      	movs	r4, #0
    6724:	f88b 4014 	strb.w	r4, [fp, #20]
	_radio.state = STATE_NONE;
    6728:	f88b 4015 	strb.w	r4, [fp, #21]
	_radio.ticker_id_event = 0;
    672c:	f88b 4012 	strb.w	r4, [fp, #18]
	radio_tmr_stop();
    6730:	f002 faf8 	bl	8d24 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6734:	4622      	mov	r2, r4
    6736:	4621      	mov	r1, r4
    6738:	4620      	mov	r0, r4
    673a:	4b87      	ldr	r3, [pc, #540]	; (6958 <isr+0x1500>)
    673c:	f7fc f84a 	bl	27d4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    6740:	4604      	mov	r4, r0
    6742:	2800      	cmp	r0, #0
    6744:	f47e aedb 	bne.w	54fe <isr+0xa6>
	clock_control_off(_radio.hf_clock, NULL);
    6748:	f8db 0000 	ldr.w	r0, [fp]
    674c:	6843      	ldr	r3, [r0, #4]
    674e:	4621      	mov	r1, r4
    6750:	685b      	ldr	r3, [r3, #4]
    6752:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    6754:	2201      	movs	r2, #1
    6756:	4611      	mov	r1, r2
    6758:	4620      	mov	r0, r4
    675a:	f7fc f813 	bl	2784 <mayfly_enable>
    675e:	f7fe bf03 	b.w	5568 <isr+0x110>
	if (_radio.conn_curr == 0) {
    6762:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    6766:	2800      	cmp	r0, #0
    6768:	d0db      	beq.n	6722 <isr+0x12ca>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    676a:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    676e:	b189      	cbz	r1, 6794 <isr+0x133c>
    6770:	f89b 3014 	ldrb.w	r3, [fp, #20]
    6774:	2b03      	cmp	r3, #3
    6776:	d003      	beq.n	6780 <isr+0x1328>
    6778:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    677c:	07dc      	lsls	r4, r3, #31
    677e:	d509      	bpl.n	6794 <isr+0x133c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    6780:	f7fd fe1e 	bl	43c0 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    6784:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    6788:	f7fd fbaa 	bl	3ee0 <connection_release>
			_radio.conn_curr = NULL;
    678c:	2300      	movs	r3, #0
    678e:	f8cb 3114 	str.w	r3, [fp, #276]	; 0x114
    6792:	e7c6      	b.n	6722 <isr+0x12ca>
	latency_event = _radio.conn_curr->latency_event;
    6794:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    6796:	f89b 7118 	ldrb.w	r7, [fp, #280]	; 0x118
	elapsed_event = latency_event + 1;
    679a:	1c75      	adds	r5, r6, #1
    679c:	b2ad      	uxth	r5, r5
	if (_radio.packet_counter &&
    679e:	2f00      	cmp	r7, #0
    67a0:	d06b      	beq.n	687a <isr+0x1422>
		if (_radio.role == ROLE_SLAVE) {
    67a2:	f89b 3014 	ldrb.w	r3, [fp, #20]
    67a6:	2b03      	cmp	r3, #3
    67a8:	d15b      	bne.n	6862 <isr+0x140a>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    67aa:	f002 fb0d 	bl	8dc8 <radio_tmr_aa_restore>
    67ae:	4680      	mov	r8, r0
						     radio_tmr_ready_get();
    67b0:	f002 fb10 	bl	8dd4 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    67b4:	f8db 7114 	ldr.w	r7, [fp, #276]	; 0x114
    67b8:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 6960 <isr+0x1508>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    67bc:	eba8 0800 	sub.w	r8, r8, r0
			window_widening_event_us =
    67c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    67c2:	f100 0a58 	add.w	sl, r0, #88	; 0x58
			if (start_to_address_actual_us <=
    67c6:	45d0      	cmp	r8, sl
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    67c8:	a361      	add	r3, pc, #388	; (adr r3, 6950 <isr+0x14f8>)
    67ca:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    67ce:	d83b      	bhi.n	6848 <isr+0x13f0>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    67d0:	fba0 0109 	umull	r0, r1, r0, r9
    67d4:	f7f9 fd6e 	bl	2b4 <__aeabi_uldivmod>
    67d8:	b284      	uxth	r4, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    67da:	ebaa 0008 	sub.w	r0, sl, r8
    67de:	a35c      	add	r3, pc, #368	; (adr r3, 6950 <isr+0x14f8>)
    67e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    67e4:	fba0 0109 	umull	r0, r1, r0, r9
    67e8:	f7f9 fd64 	bl	2b4 <__aeabi_uldivmod>
    67ec:	b283      	uxth	r3, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    67ee:	2200      	movs	r2, #0
    67f0:	64ba      	str	r2, [r7, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
    67f2:	653a      	str	r2, [r7, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    67f4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    67f8:	b36a      	cbz	r2, 6856 <isr+0x13fe>
				if (pdu_data_tx->len ||
    67fa:	7952      	ldrb	r2, [r2, #5]
    67fc:	b912      	cbnz	r2, 6804 <isr+0x13ac>
    67fe:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
    6802:	b10a      	cbz	r2, 6808 <isr+0x13b0>
					_radio.conn_curr->latency_event = 0;
    6804:	2200      	movs	r2, #0
				_radio.conn_curr->latency_event =
    6806:	857a      	strh	r2, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    6808:	f8db 2114 	ldr.w	r2, [fp, #276]	; 0x114
    680c:	2100      	movs	r1, #0
    680e:	8591      	strh	r1, [r2, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    6810:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    6814:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    6816:	b1aa      	cbz	r2, 6844 <isr+0x13ec>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    6818:	4295      	cmp	r5, r2
    681a:	f080 8084 	bcs.w	6926 <isr+0x14ce>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    681e:	1b52      	subs	r2, r2, r5
    6820:	b292      	uxth	r2, r2
			_radio.conn_curr->latency_event = 0;
    6822:	2100      	movs	r1, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    6824:	2a06      	cmp	r2, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    6826:	8602      	strh	r2, [r0, #48]	; 0x30
			_radio.conn_curr->latency_event = 0;
    6828:	8541      	strh	r1, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    682a:	d97e      	bls.n	692a <isr+0x14d2>
			else if (_radio.role == ROLE_SLAVE) {
    682c:	f89b 2014 	ldrb.w	r2, [fp, #20]
    6830:	2a03      	cmp	r2, #3
    6832:	d107      	bne.n	6844 <isr+0x13ec>
				if (latency_event != 0) {
    6834:	2e00      	cmp	r6, #0
    6836:	d178      	bne.n	692a <isr+0x14d2>
					force = _radio.conn_curr->slave.force & 0x01;
    6838:	6d47      	ldr	r7, [r0, #84]	; 0x54
					_radio.conn_curr->slave.force >>= 1;
    683a:	087a      	lsrs	r2, r7, #1
					if (force) {
    683c:	f017 0701 	ands.w	r7, r7, #1
    6840:	d135      	bne.n	68ae <isr+0x1456>
					_radio.conn_curr->slave.force >>= 1;
    6842:	6542      	str	r2, [r0, #84]	; 0x54
	force = 0;
    6844:	2700      	movs	r7, #0
    6846:	e035      	b.n	68b4 <isr+0x145c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    6848:	fba8 0109 	umull	r0, r1, r8, r9
    684c:	f7f9 fd32 	bl	2b4 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    6850:	2302      	movs	r3, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    6852:	b284      	uxth	r4, r0
    6854:	e7cb      	b.n	67ee <isr+0x1396>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    6856:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    685a:	07d2      	lsls	r2, r2, #31
    685c:	d5d4      	bpl.n	6808 <isr+0x13b0>
				_radio.conn_curr->latency_event =
    685e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    6860:	e7d1      	b.n	6806 <isr+0x13ae>
		} else if (reason_peer) {
    6862:	b141      	cbz	r1, 6876 <isr+0x141e>
			_radio.conn_curr->master.terminate_ack = 1;
    6864:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    6868:	f043 0301 	orr.w	r3, r3, #1
    686c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	ticks_drift_minus = 0;
    6870:	2300      	movs	r3, #0
	ticks_drift_plus = 0;
    6872:	461c      	mov	r4, r3
    6874:	e7c8      	b.n	6808 <isr+0x13b0>
	ticks_drift_minus = 0;
    6876:	460b      	mov	r3, r1
    6878:	e7fb      	b.n	6872 <isr+0x141a>
	else if (_radio.conn_curr->connect_expire) {
    687a:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    687c:	b184      	cbz	r4, 68a0 <isr+0x1448>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    687e:	42a5      	cmp	r5, r4
    6880:	d204      	bcs.n	688c <isr+0x1434>
			_radio.conn_curr->connect_expire -= elapsed_event;
    6882:	1b64      	subs	r4, r4, r5
    6884:	8584      	strh	r4, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
    6886:	463c      	mov	r4, r7
    6888:	4623      	mov	r3, r4
    688a:	e7c1      	b.n	6810 <isr+0x13b8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    688c:	213e      	movs	r1, #62	; 0x3e
    688e:	f7fd fd97 	bl	43c0 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    6892:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    6896:	f7fd fb23 	bl	3ee0 <connection_release>
			_radio.conn_curr = NULL;
    689a:	f8cb 7114 	str.w	r7, [fp, #276]	; 0x114
    689e:	e740      	b.n	6722 <isr+0x12ca>
		if (!_radio.conn_curr->supervision_expire) {
    68a0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    68a2:	2b00      	cmp	r3, #0
    68a4:	d1f0      	bne.n	6888 <isr+0x1430>
			_radio.conn_curr->supervision_expire =
    68a6:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    68a8:	8602      	strh	r2, [r0, #48]	; 0x30
	ticks_drift_plus = 0;
    68aa:	461c      	mov	r4, r3
    68ac:	e7b0      	b.n	6810 <isr+0x13b8>
						_radio.conn_curr->slave.force |=
    68ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    68b2:	6542      	str	r2, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    68b4:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    68b6:	b11a      	cbz	r2, 68c0 <isr+0x1468>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    68b8:	4295      	cmp	r5, r2
    68ba:	d238      	bcs.n	692e <isr+0x14d6>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    68bc:	1b55      	subs	r5, r2, r5
    68be:	8685      	strh	r5, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    68c0:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    68c4:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    68c8:	4291      	cmp	r1, r2
    68ca:	d006      	beq.n	68da <isr+0x1482>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    68cc:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    68d0:	3a01      	subs	r2, #1
    68d2:	2a01      	cmp	r2, #1
		_radio.conn_curr->latency_event = 0;
    68d4:	bf9c      	itt	ls
    68d6:	2200      	movls	r2, #0
    68d8:	8542      	strhls	r2, [r0, #42]	; 0x2a
    68da:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    68dc:	b90f      	cbnz	r7, 68e2 <isr+0x148a>
    68de:	428e      	cmp	r6, r1
    68e0:	d027      	beq.n	6932 <isr+0x14da>
		lazy = _radio.conn_curr->latency_event + 1;
    68e2:	3101      	adds	r1, #1
    68e4:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    68e6:	b924      	cbnz	r4, 68f2 <isr+0x149a>
    68e8:	b91b      	cbnz	r3, 68f2 <isr+0x149a>
    68ea:	b911      	cbnz	r1, 68f2 <isr+0x149a>
	    (lazy != 0) || (force != 0)) {
    68ec:	2f00      	cmp	r7, #0
    68ee:	f43f af18 	beq.w	6722 <isr+0x12ca>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    68f2:	f890 5020 	ldrb.w	r5, [r0, #32]
		ticker_status =
    68f6:	4a19      	ldr	r2, [pc, #100]	; (695c <isr+0x1504>)
    68f8:	9103      	str	r1, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    68fa:	3507      	adds	r5, #7
		ticker_status =
    68fc:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    68fe:	b2ed      	uxtb	r5, r5
		ticker_status =
    6900:	e9cd 7204 	strd	r7, r2, [sp, #16]
    6904:	9300      	str	r3, [sp, #0]
				      (void *)(u32_t)ticker_id);
    6906:	9506      	str	r5, [sp, #24]
		ticker_status =
    6908:	4623      	mov	r3, r4
    690a:	e9cd 1101 	strd	r1, r1, [sp, #4]
    690e:	462a      	mov	r2, r5
    6910:	4608      	mov	r0, r1
    6912:	f7fc fd47 	bl	33a4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6916:	f030 0302 	bics.w	r3, r0, #2
    691a:	f43f af02 	beq.w	6722 <isr+0x12ca>
    691e:	f89b 3013 	ldrb.w	r3, [fp, #19]
    6922:	429d      	cmp	r5, r3
    6924:	e6c3      	b.n	66ae <isr+0x1256>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    6926:	2108      	movs	r1, #8
    6928:	e72a      	b.n	6780 <isr+0x1328>
				force = 1;
    692a:	2701      	movs	r7, #1
    692c:	e7c2      	b.n	68b4 <isr+0x145c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    692e:	2122      	movs	r1, #34	; 0x22
    6930:	e726      	b.n	6780 <isr+0x1328>
	lazy = 0;
    6932:	4639      	mov	r1, r7
    6934:	e7d7      	b.n	68e6 <isr+0x148e>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    6936:	3b04      	subs	r3, #4
    6938:	2b01      	cmp	r3, #1
    693a:	f63e ade0 	bhi.w	54fe <isr+0xa6>
		_radio.state = STATE_NONE;
    693e:	2300      	movs	r3, #0
    6940:	7543      	strb	r3, [r0, #21]
    6942:	f7fe be11 	b.w	5568 <isr+0x110>
    6946:	f7fd fd63 	bl	4410 <isr.part.45>
    694a:	bf00      	nop
    694c:	f3af 8000 	nop.w
    6950:	1afd498d 	.word	0x1afd498d
    6954:	00000007 	.word	0x00000007
    6958:	20002de8 	.word	0x20002de8
    695c:	00003c71 	.word	0x00003c71
    6960:	3b9aca00 	.word	0x3b9aca00
    6964:	00000000 	.word	0x00000000

00006968 <mayfly_xtal_stop_calc>:
{
    6968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    696c:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    696e:	2302      	movs	r3, #2
    6970:	9309      	str	r3, [sp, #36]	; 0x24
	struct connection *conn_curr = NULL;
    6972:	2300      	movs	r3, #0
	struct connection *conn_next = NULL;
    6974:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
	ticker_id_next = 0xff;
    6978:	22ff      	movs	r2, #255	; 0xff
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    697a:	4e73      	ldr	r6, [pc, #460]	; (6b48 <mayfly_xtal_stop_calc+0x1e0>)
				    _radio.connection_count));
    697c:	4d73      	ldr	r5, [pc, #460]	; (6b4c <mayfly_xtal_stop_calc+0x1e4>)
	ticker_id_next = 0xff;
    697e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
{
    6982:	4604      	mov	r4, r0
	ticks_to_expire = 0;
    6984:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    6986:	ab09      	add	r3, sp, #36	; 0x24
    6988:	e9cd 6301 	strd	r6, r3, [sp, #4]
    698c:	ab0c      	add	r3, sp, #48	; 0x30
    698e:	9300      	str	r3, [sp, #0]
    6990:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    6994:	ab0d      	add	r3, sp, #52	; 0x34
    6996:	2101      	movs	r1, #1
    6998:	2000      	movs	r0, #0
    699a:	f7fc fd87 	bl	34ac <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    699e:	2802      	cmp	r0, #2
    69a0:	d00b      	beq.n	69ba <mayfly_xtal_stop_calc+0x52>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    69a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    69a4:	b16b      	cbz	r3, 69c2 <mayfly_xtal_stop_calc+0x5a>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    69a6:	4040      	eors	r0, r0
    69a8:	f380 8811 	msr	BASEPRI, r0
    69ac:	f04f 0004 	mov.w	r0, #4
    69b0:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    69b2:	2101      	movs	r1, #1
    69b4:	2000      	movs	r0, #0
    69b6:	f7fc fdf1 	bl	359c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    69ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    69bc:	2b02      	cmp	r3, #2
    69be:	d0f8      	beq.n	69b2 <mayfly_xtal_stop_calc+0x4a>
    69c0:	e7ef      	b.n	69a2 <mayfly_xtal_stop_calc+0x3a>
	} while (ticker_id_next != TICKER_NULL &&
    69c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    69c6:	2bff      	cmp	r3, #255	; 0xff
    69c8:	d004      	beq.n	69d4 <mayfly_xtal_stop_calc+0x6c>
    69ca:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    69ce:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    69d0:	4293      	cmp	r3, r2
    69d2:	dad8      	bge.n	6986 <mayfly_xtal_stop_calc+0x1e>
	if ((ticker_id_next == TICKER_NULL) ||
    69d4:	1f5a      	subs	r2, r3, #5
    69d6:	b2d2      	uxtb	r2, r2
    69d8:	2af9      	cmp	r2, #249	; 0xf9
    69da:	4f5d      	ldr	r7, [pc, #372]	; (6b50 <mayfly_xtal_stop_calc+0x1e8>)
    69dc:	d805      	bhi.n	69ea <mayfly_xtal_stop_calc+0x82>
				_radio.connection_count))) {
    69de:	4a5b      	ldr	r2, [pc, #364]	; (6b4c <mayfly_xtal_stop_calc+0x1e4>)
    69e0:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    69e4:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    69e6:	4293      	cmp	r3, r2
    69e8:	db07      	blt.n	69fa <mayfly_xtal_stop_calc+0x92>
		if (s_xtal_retained) {
    69ea:	783b      	ldrb	r3, [r7, #0]
    69ec:	b113      	cbz	r3, 69f4 <mayfly_xtal_stop_calc+0x8c>
    69ee:	2001      	movs	r0, #1
    69f0:	f7fd f974 	bl	3cdc <mayfly_xtal_retain.part.16>
}
    69f4:	b00e      	add	sp, #56	; 0x38
    69f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    69fa:	a90a      	add	r1, sp, #40	; 0x28
    69fc:	b2e0      	uxtb	r0, r4
    69fe:	f7fd f94f 	bl	3ca0 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    6a02:	2800      	cmp	r0, #0
    6a04:	d0cf      	beq.n	69a6 <mayfly_xtal_stop_calc+0x3e>
    6a06:	e9d0 3400 	ldrd	r3, r4, [r0]
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    6a0a:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    6a0c:	bfb8      	it	lt
    6a0e:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    6a10:	429c      	cmp	r4, r3
    6a12:	bf38      	it	cc
    6a14:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    6a16:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    6a18:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    6a1c:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    6a1e:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    6a20:	f7fd f93e 	bl	3ca0 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    6a24:	4605      	mov	r5, r0
    6a26:	2800      	cmp	r0, #0
    6a28:	d0bd      	beq.n	69a6 <mayfly_xtal_stop_calc+0x3e>
	ticks_prepare_to_start_next =
    6a2a:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    6a2e:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    6a30:	429e      	cmp	r6, r3
    6a32:	bf38      	it	cc
    6a34:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    6a36:	2a00      	cmp	r2, #0
    6a38:	da05      	bge.n	6a46 <mayfly_xtal_stop_calc+0xde>
		ticks_to_expire -=
    6a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    6a3c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    6a40:	4433      	add	r3, r6
    6a42:	1a9b      	subs	r3, r3, r2
    6a44:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    6a46:	990c      	ldr	r1, [sp, #48]	; 0x30
    6a48:	783a      	ldrb	r2, [r7, #0]
	    (ticks_slot_abs +
    6a4a:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    6a4e:	428b      	cmp	r3, r1
    6a50:	d20a      	bcs.n	6a68 <mayfly_xtal_stop_calc+0x100>
		if (s_xtal_retained) {
    6a52:	b112      	cbz	r2, 6a5a <mayfly_xtal_stop_calc+0xf2>
    6a54:	2001      	movs	r0, #1
    6a56:	f7fd f941 	bl	3cdc <mayfly_xtal_retain.part.16>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    6a5a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    6a5e:	2101      	movs	r1, #1
    6a60:	4628      	mov	r0, r5
    6a62:	f7fd fd0b 	bl	447c <prepare_normal_set>
    6a66:	e7c5      	b.n	69f4 <mayfly_xtal_stop_calc+0x8c>
		if (!s_xtal_retained) {
    6a68:	b93a      	cbnz	r2, 6a7a <mayfly_xtal_stop_calc+0x112>
			s_xtal_retained = 1;
    6a6a:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    6a6c:	4b39      	ldr	r3, [pc, #228]	; (6b54 <mayfly_xtal_stop_calc+0x1ec>)
			s_xtal_retained = 1;
    6a6e:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    6a70:	4611      	mov	r1, r2
    6a72:	f7fb feaf 	bl	27d4 <mayfly_enqueue>
			LL_ASSERT(!retval);
    6a76:	2800      	cmp	r0, #0
    6a78:	d195      	bne.n	69a6 <mayfly_xtal_stop_calc+0x3e>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    6a7a:	682b      	ldr	r3, [r5, #0]
    6a7c:	2b00      	cmp	r3, #0
    6a7e:	db15      	blt.n	6aac <mayfly_xtal_stop_calc+0x144>
    6a80:	42b3      	cmp	r3, r6
    6a82:	d913      	bls.n	6aac <mayfly_xtal_stop_calc+0x144>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    6a84:	1b9b      	subs	r3, r3, r6
			ticker_status =
    6a86:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    6a88:	b29b      	uxth	r3, r3
			ticker_status =
    6a8a:	4933      	ldr	r1, [pc, #204]	; (6b58 <mayfly_xtal_stop_calc+0x1f0>)
    6a8c:	9105      	str	r1, [sp, #20]
    6a8e:	e9cd 0301 	strd	r0, r3, [sp, #4]
    6a92:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    6a96:	9506      	str	r5, [sp, #24]
    6a98:	e9cd 0003 	strd	r0, r0, [sp, #12]
    6a9c:	9000      	str	r0, [sp, #0]
    6a9e:	2101      	movs	r1, #1
    6aa0:	f7fc fc80 	bl	33a4 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6aa4:	f030 0302 	bics.w	r3, r0, #2
    6aa8:	f47f af7d 	bne.w	69a6 <mayfly_xtal_stop_calc+0x3e>
		if (!conn_curr || !conn_next) {
    6aac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    6aae:	2e00      	cmp	r6, #0
    6ab0:	d0a0      	beq.n	69f4 <mayfly_xtal_stop_calc+0x8c>
    6ab2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    6ab4:	2d00      	cmp	r5, #0
    6ab6:	d09d      	beq.n	69f4 <mayfly_xtal_stop_calc+0x8c>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    6ab8:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    6aba:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    6abc:	429a      	cmp	r2, r3
    6abe:	d199      	bne.n	69f4 <mayfly_xtal_stop_calc+0x8c>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    6ac0:	4826      	ldr	r0, [pc, #152]	; (6b5c <mayfly_xtal_stop_calc+0x1f4>)
    6ac2:	b297      	uxth	r7, r2
    6ac4:	fba7 0100 	umull	r0, r1, r7, r0
    6ac8:	f240 1323 	movw	r3, #291	; 0x123
    6acc:	fb03 1107 	mla	r1, r3, r7, r1
    6ad0:	a31b      	add	r3, pc, #108	; (adr r3, 6b40 <mayfly_xtal_stop_calc+0x1d8>)
    6ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
    6ad6:	f7f9 fbed 	bl	2b4 <__aeabi_uldivmod>
    6ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6adc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    6ae0:	2200      	movs	r2, #0
    6ae2:	4283      	cmp	r3, r0
    6ae4:	d818      	bhi.n	6b18 <mayfly_xtal_stop_calc+0x1b0>
    6ae6:	b102      	cbz	r2, 6aea <mayfly_xtal_stop_calc+0x182>
    6ae8:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    6aea:	f996 101d 	ldrsb.w	r1, [r6, #29]
    6aee:	f995 201d 	ldrsb.w	r2, [r5, #29]
    6af2:	2900      	cmp	r1, #0
    6af4:	da13      	bge.n	6b1e <mayfly_xtal_stop_calc+0x1b6>
    6af6:	2a00      	cmp	r2, #0
    6af8:	f6ff af7c 	blt.w	69f4 <mayfly_xtal_stop_calc+0x8c>
			     (ticks_slot_abs +
    6afc:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    6afe:	42a3      	cmp	r3, r4
    6b00:	f4bf af78 	bcs.w	69f4 <mayfly_xtal_stop_calc+0x8c>
				status = conn_update_req(conn_curr);
    6b04:	4630      	mov	r0, r6
    6b06:	f7fc fe0f 	bl	3728 <conn_update_req>
				if (status == 2) {
    6b0a:	2802      	cmp	r0, #2
    6b0c:	f47f af72 	bne.w	69f4 <mayfly_xtal_stop_calc+0x8c>
					conn_update_req(conn_next);
    6b10:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    6b12:	f7fc fe09 	bl	3728 <conn_update_req>
    6b16:	e76d      	b.n	69f4 <mayfly_xtal_stop_calc+0x8c>
				ticks_to_expire -= ticks_conn_interval;
    6b18:	1a1b      	subs	r3, r3, r0
    6b1a:	2201      	movs	r2, #1
    6b1c:	e7e1      	b.n	6ae2 <mayfly_xtal_stop_calc+0x17a>
			} else if (!conn_curr->role && conn_next->role &&
    6b1e:	2a00      	cmp	r2, #0
    6b20:	f6bf af68 	bge.w	69f4 <mayfly_xtal_stop_calc+0x8c>
				    (ticks_slot_abs +
    6b24:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    6b26:	42a3      	cmp	r3, r4
    6b28:	f4bf af64 	bcs.w	69f4 <mayfly_xtal_stop_calc+0x8c>
				status = conn_update_req(conn_next);
    6b2c:	4628      	mov	r0, r5
    6b2e:	f7fc fdfb 	bl	3728 <conn_update_req>
				if (status == 2) {
    6b32:	2802      	cmp	r0, #2
    6b34:	f47f af5e 	bne.w	69f4 <mayfly_xtal_stop_calc+0x8c>
					conn_update_req(conn_curr);
    6b38:	980a      	ldr	r0, [sp, #40]	; 0x28
    6b3a:	e7ea      	b.n	6b12 <mayfly_xtal_stop_calc+0x1aa>
    6b3c:	f3af 8000 	nop.w
    6b40:	1afd498d 	.word	0x1afd498d
    6b44:	00000007 	.word	0x00000007
    6b48:	0000368d 	.word	0x0000368d
    6b4c:	20000620 	.word	0x20000620
    6b50:	20000828 	.word	0x20000828
    6b54:	20002e68 	.word	0x20002e68
    6b58:	000036a1 	.word	0x000036a1
    6b5c:	09ce5400 	.word	0x09ce5400

00006b60 <event_master>:
{
    6b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6b62:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    6b64:	4b49      	ldr	r3, [pc, #292]	; (6c8c <event_master+0x12c>)
    6b66:	7d1a      	ldrb	r2, [r3, #20]
{
    6b68:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    6b6a:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    6b6e:	461d      	mov	r5, r3
    6b70:	b12a      	cbz	r2, 6b7e <event_master+0x1e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6b72:	4040      	eors	r0, r0
    6b74:	f380 8811 	msr	BASEPRI, r0
    6b78:	f04f 0004 	mov.w	r0, #4
    6b7c:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    6b7e:	7c5b      	ldrb	r3, [r3, #17]
    6b80:	8c22      	ldrh	r2, [r4, #32]
    6b82:	b2db      	uxtb	r3, r3
    6b84:	3207      	adds	r2, #7
    6b86:	4293      	cmp	r3, r2
    6b88:	d1f3      	bne.n	6b72 <event_master+0x12>
	_radio.role = ROLE_MASTER;
    6b8a:	2204      	movs	r2, #4
	_radio.packet_counter = 0;
    6b8c:	f8a5 6118 	strh.w	r6, [r5, #280]	; 0x118
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    6b90:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    6b92:	752a      	strb	r2, [r5, #20]
	_radio.ticker_id_prepare = 0;
    6b94:	746e      	strb	r6, [r5, #17]
	_radio.ticker_id_event =
    6b96:	74ab      	strb	r3, [r5, #18]
	conn->latency_event = conn->latency_prepare;
    6b98:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    6b9a:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    6b9e:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    6ba0:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    6ba2:	8526      	strh	r6, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    6ba4:	7568      	strb	r0, [r5, #21]
	_radio.ticks_anchor = ticks_at_expire;
    6ba6:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    6ba8:	f7fd f94a 	bl	3e40 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    6bac:	a901      	add	r1, sp, #4
    6bae:	4620      	mov	r0, r4
    6bb0:	f7fe fbee 	bl	5390 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    6bb4:	9901      	ldr	r1, [sp, #4]
    6bb6:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    6bba:	780b      	ldrb	r3, [r1, #0]
    6bbc:	f3c2 0200 	ubfx	r2, r2, #0, #1
    6bc0:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    6bc4:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    6bc8:	f3c2 0240 	ubfx	r2, r2, #1, #1
    6bcc:	f362 0382 	bfi	r3, r2, #2, #1
    6bd0:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    6bd2:	4620      	mov	r0, r4
    6bd4:	f7fd ff30 	bl	4a38 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    6bd8:	2096      	movs	r0, #150	; 0x96
    6bda:	f002 f823 	bl	8c24 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
    6bde:	4630      	mov	r0, r6
    6be0:	f001 ff90 	bl	8b04 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    6be4:	4620      	mov	r0, r4
    6be6:	9901      	ldr	r1, [sp, #4]
    6be8:	f7fd f9fe 	bl	3fe8 <tx_packet_set>
	if (conn->data_chan_sel) {
    6bec:	7f63      	ldrb	r3, [r4, #29]
    6bee:	0658      	lsls	r0, r3, #25
    6bf0:	f104 0217 	add.w	r2, r4, #23
    6bf4:	d521      	bpl.n	6c3a <event_master+0xda>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    6bf6:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    6bf8:	8be1      	ldrh	r1, [r4, #30]
    6bfa:	3801      	subs	r0, #1
    6bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6c00:	b280      	uxth	r0, r0
    6c02:	f7fd fe59 	bl	48b8 <chan_sel_2>
	chan_set(data_chan_use);
    6c06:	f7fd fa0f 	bl	4028 <chan_set>
		remainder_us = radio_tmr_start(1,
    6c0a:	68ea      	ldr	r2, [r5, #12]
    6c0c:	f107 0109 	add.w	r1, r7, #9
    6c10:	2001      	movs	r0, #1
    6c12:	f002 f813 	bl	8c3c <radio_tmr_start>
		radio_tmr_end_capture();
    6c16:	f002 f8e3 	bl	8de0 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    6c1a:	f894 1020 	ldrb.w	r1, [r4, #32]
    6c1e:	3107      	adds	r1, #7
    6c20:	463a      	mov	r2, r7
    6c22:	b2c9      	uxtb	r1, r1
    6c24:	4620      	mov	r0, r4
    6c26:	f7fd fe8b 	bl	4940 <preempt_calc>
	if (0 !=
    6c2a:	4603      	mov	r3, r0
    6c2c:	b328      	cbz	r0, 6c7a <event_master+0x11a>
		_radio.state = STATE_STOP;
    6c2e:	2304      	movs	r3, #4
    6c30:	756b      	strb	r3, [r5, #21]
		radio_disable();
    6c32:	f001 ff0d 	bl	8a50 <radio_disable>
}
    6c36:	b003      	add	sp, #12
    6c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    6c3a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    6c3c:	7fa6      	ldrb	r6, [r4, #30]
    6c3e:	fb01 6606 	mla	r6, r1, r6, r6
    6c42:	7fe1      	ldrb	r1, [r4, #31]
    6c44:	2025      	movs	r0, #37	; 0x25
    6c46:	440e      	add	r6, r1
    6c48:	fb96 f1f0 	sdiv	r1, r6, r0
    6c4c:	fb00 6611 	mls	r6, r0, r1, r6
    6c50:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6c52:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    6c54:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6c56:	5c51      	ldrb	r1, [r2, r1]
    6c58:	f006 0607 	and.w	r6, r6, #7
    6c5c:	fa41 f606 	asr.w	r6, r1, r6
    6c60:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    6c62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6c66:	d4ce      	bmi.n	6c06 <event_master+0xa6>
		chan_index = chan_next % chan_count;
    6c68:	fbb0 f1f3 	udiv	r1, r0, r3
    6c6c:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    6c70:	b2c9      	uxtb	r1, r1
    6c72:	4610      	mov	r0, r2
    6c74:	f7fc fd20 	bl	36b8 <chan_sel_remap>
    6c78:	e7c5      	b.n	6c06 <event_master+0xa6>
		ticker_status =
    6c7a:	4a05      	ldr	r2, [pc, #20]	; (6c90 <event_master+0x130>)
    6c7c:	4601      	mov	r1, r0
    6c7e:	f7fc fc53 	bl	3528 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6c82:	f030 0302 	bics.w	r3, r0, #2
    6c86:	f47f af74 	bne.w	6b72 <event_master+0x12>
    6c8a:	e7d4      	b.n	6c36 <event_master+0xd6>
    6c8c:	20000620 	.word	0x20000620
    6c90:	00003c89 	.word	0x00003c89

00006c94 <radio_init>:
{
    6c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    6c98:	4e3c      	ldr	r6, [pc, #240]	; (6d8c <radio_init+0xf8>)
{
    6c9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    6c9c:	f89d 801c 	ldrb.w	r8, [sp, #28]
    6ca0:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    6ca4:	f8bd e020 	ldrh.w	lr, [sp, #32]
    6ca8:	f89d c018 	ldrb.w	ip, [sp, #24]
	_radio.hf_clock = hf_clock;
    6cac:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    6cae:	f44f 7082 	mov.w	r0, #260	; 0x104
    6cb2:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    6cb6:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
    6cba:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
    6cbe:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    6cc0:	f108 0401 	add.w	r4, r8, #1
    6cc4:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    6cc6:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    6cc8:	f10e 0403 	add.w	r4, lr, #3
	rx_count_max += 3;
    6ccc:	f10c 0203 	add.w	r2, ip, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    6cd0:	2c28      	cmp	r4, #40	; 0x28
	rx_count_max += 3;
    6cd2:	b2d2      	uxtb	r2, r2
	_radio.packet_data_octets_max = packet_data_octets_max;
    6cd4:	f8a6 e12c 	strh.w	lr, [r6, #300]	; 0x12c
	_radio.link_rx_data_quota = rx_count_max;
    6cd8:	f886 214c 	strb.w	r2, [r6, #332]	; 0x14c
		_radio.packet_rx_data_pool_size =
    6cdc:	bf88      	it	hi
    6cde:	f10e 0e0e 	addhi.w	lr, lr, #14
    6ce2:	b292      	uxth	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    6ce4:	bf94      	ite	ls
    6ce6:	eb02 0242 	addls.w	r2, r2, r2, lsl #1
		_radio.packet_rx_data_pool_size =
    6cea:	f02e 0e03 	bichi.w	lr, lr, #3
	_radio.packet_rx_count = (rx_count_max + 1);
    6cee:	f10c 0c04 	add.w	ip, ip, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    6cf2:	f108 0802 	add.w	r8, r8, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    6cf6:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    6cfa:	bf8c      	ite	hi
    6cfc:	fb1e f202 	smulbbhi	r2, lr, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    6d00:	0112      	lslls	r2, r2, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    6d02:	fa5f f888 	uxtb.w	r8, r8
		_radio.packet_rx_data_pool_size =
    6d06:	f8a6 212e 	strh.w	r2, [r6, #302]	; 0x12e
	_radio.packet_tx_count = (tx_count_max + 1);
    6d0a:	f886 816c 	strb.w	r8, [r6, #364]	; 0x16c
	_radio.packet_rx = (void *)mem_radio;
    6d0e:	f8c6 0134 	str.w	r0, [r6, #308]	; 0x134
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    6d12:	ea4f 08c8 	mov.w	r8, r8, lsl #3
	mem_radio +=
    6d16:	eb00 008c 	add.w	r0, r0, ip, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    6d1a:	f8b6 412e 	ldrh.w	r4, [r6, #302]	; 0x12e
	_radio.pkt_tx = (void *)mem_radio;
    6d1e:	f8c6 0164 	str.w	r0, [r6, #356]	; 0x164
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    6d22:	4440      	add	r0, r8
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    6d24:	2230      	movs	r2, #48	; 0x30
	_radio.pkt_release = (void *)mem_radio;
    6d26:	f8c6 0168 	str.w	r0, [r6, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    6d2a:	4440      	add	r0, r8
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    6d2c:	f8a6 2130 	strh.w	r2, [r6, #304]	; 0x130
	_radio.pkt_rx_data_pool = mem_radio;
    6d30:	f8c6 0124 	str.w	r0, [r6, #292]	; 0x124
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    6d34:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    6d38:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    6d3a:	eb0c 0403 	add.w	r4, ip, r3
	_radio.link_rx_pool = mem_radio;
    6d3e:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    6d42:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    6d46:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    6d4a:	f8c6 0150 	str.w	r0, [r6, #336]	; 0x150
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    6d4e:	340a      	adds	r4, #10
    6d50:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    6d54:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    6d56:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    6d58:	f8a6 4160 	strh.w	r4, [r6, #352]	; 0x160
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    6d5c:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    6d60:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    6d62:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
    6d66:	f886 c138 	strb.w	ip, [r6, #312]	; 0x138
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    6d6a:	f886 2132 	strb.w	r2, [r6, #306]	; 0x132
	_radio.pkt_tx_data_pool = mem_radio;
    6d6e:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
	if (retcode) {
    6d72:	d003      	beq.n	6d7c <radio_init+0xe8>
		return (retcode + mem_size);
    6d74:	442c      	add	r4, r5
}
    6d76:	4620      	mov	r0, r4
    6d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    6d7c:	2301      	movs	r3, #1
    6d7e:	f886 317a 	strb.w	r3, [r6, #378]	; 0x17a
	common_init();
    6d82:	f7fd fd0f 	bl	47a4 <common_init>
	radio_setup();
    6d86:	f001 fd8d 	bl	88a4 <radio_setup>
	return retcode;
    6d8a:	e7f4      	b.n	6d76 <radio_init+0xe2>
    6d8c:	20000620 	.word	0x20000620

00006d90 <ll_reset>:
{
    6d90:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    6d92:	2103      	movs	r1, #3
    6d94:	2005      	movs	r0, #5
    6d96:	f7fc fd5b 	bl	3850 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    6d9a:	2104      	movs	r1, #4
    6d9c:	2006      	movs	r0, #6
    6d9e:	f7fc fd57 	bl	3850 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    6da2:	4c21      	ldr	r4, [pc, #132]	; (6e28 <ll_reset+0x98>)
    6da4:	2500      	movs	r5, #0
    6da6:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    6daa:	b2ab      	uxth	r3, r5
    6dac:	429a      	cmp	r2, r3
    6dae:	f105 0501 	add.w	r5, r5, #1
    6db2:	d832      	bhi.n	6e1a <ll_reset+0x8a>
	_radio.advertiser.is_enabled = 0;
    6db4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    6db8:	f36f 13c7 	bfc	r3, #7, #1
    6dbc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    6dc0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
    6dc4:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    6dc6:	f360 0300 	bfi	r3, r0, #0, #1
    6dca:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    6dce:	2230      	movs	r2, #48	; 0x30
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    6dd0:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
    6dd4:	fbb3 f3f2 	udiv	r3, r3, r2
    6dd8:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    6ddc:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
	_radio.packet_rx_last = 0;
    6de0:	f884 0139 	strb.w	r0, [r4, #313]	; 0x139
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    6de4:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    6de6:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
	_radio.packet_release_last = 0;
    6dea:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    6dee:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
	_radio.fc_ack = _radio.fc_req;
    6df2:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
	_radio.advertiser.conn = NULL;
    6df6:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
    6dfa:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    6dfe:	f8a4 2130 	strh.w	r2, [r4, #304]	; 0x130
	_radio.packet_rx_acquire = 0;
    6e02:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
	_radio.packet_tx_last = 0;
    6e06:	f8a4 016e 	strh.w	r0, [r4, #366]	; 0x16e
	_radio.fc_ack = _radio.fc_req;
    6e0a:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	ll_filter_reset(false);
    6e0e:	f001 fc15 	bl	863c <ll_filter_reset>
}
    6e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    6e16:	f7fd bcc5 	b.w	47a4 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    6e1a:	1da8      	adds	r0, r5, #6
    6e1c:	21ff      	movs	r1, #255	; 0xff
    6e1e:	b2c0      	uxtb	r0, r0
    6e20:	f7fc fd16 	bl	3850 <role_disable>
    6e24:	e7bf      	b.n	6da6 <ll_reset+0x16>
    6e26:	bf00      	nop
    6e28:	20000620 	.word	0x20000620

00006e2c <radio_adv_data_get>:
}
    6e2c:	4800      	ldr	r0, [pc, #0]	; (6e30 <radio_adv_data_get+0x4>)
    6e2e:	4770      	bx	lr
    6e30:	2000064a 	.word	0x2000064a

00006e34 <radio_scan_data_get>:
}
    6e34:	4800      	ldr	r0, [pc, #0]	; (6e38 <radio_scan_data_get+0x4>)
    6e36:	4770      	bx	lr
    6e38:	2000069a 	.word	0x2000069a

00006e3c <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    6e3c:	4b02      	ldr	r3, [pc, #8]	; (6e48 <ll_adv_is_enabled+0xc>)
    6e3e:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    6e42:	09c0      	lsrs	r0, r0, #7
    6e44:	4770      	bx	lr
    6e46:	bf00      	nop
    6e48:	20000620 	.word	0x20000620

00006e4c <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    6e4c:	4b04      	ldr	r3, [pc, #16]	; (6e60 <radio_adv_filter_pol_get+0x14>)
    6e4e:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    6e52:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    6e54:	bfba      	itte	lt
    6e56:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
    6e5a:	0980      	lsrlt	r0, r0, #6
	return 0;
    6e5c:	2000      	movge	r0, #0
}
    6e5e:	4770      	bx	lr
    6e60:	20000620 	.word	0x20000620

00006e64 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    6e64:	4a09      	ldr	r2, [pc, #36]	; (6e8c <ll_scan_is_enabled+0x28>)
    6e66:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
    6e6a:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
    6e6e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    6e72:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    6e76:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    6e78:	f003 0301 	and.w	r3, r3, #1
    6e7c:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    6e80:	bf14      	ite	ne
    6e82:	2004      	movne	r0, #4
    6e84:	2000      	moveq	r0, #0
}
    6e86:	4318      	orrs	r0, r3
    6e88:	4770      	bx	lr
    6e8a:	bf00      	nop
    6e8c:	20000620 	.word	0x20000620

00006e90 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    6e90:	4b05      	ldr	r3, [pc, #20]	; (6ea8 <radio_scan_filter_pol_get+0x18>)
    6e92:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    6e96:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    6e9a:	bf1c      	itt	ne
    6e9c:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
    6ea0:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    6ea4:	4770      	bx	lr
    6ea6:	bf00      	nop
    6ea8:	20000620 	.word	0x20000620

00006eac <ll_tx_pwr_lvl_get>:
{
    6eac:	b510      	push	{r4, lr}
    6eae:	4614      	mov	r4, r2
	conn = connection_get(handle);
    6eb0:	f7fc fcb8 	bl	3824 <connection_get>
	if (!conn) {
    6eb4:	b110      	cbz	r0, 6ebc <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    6eb6:	2000      	movs	r0, #0
    6eb8:	7020      	strb	r0, [r4, #0]
}
    6eba:	bd10      	pop	{r4, pc}
		return 1;
    6ebc:	2001      	movs	r0, #1
    6ebe:	e7fc      	b.n	6eba <ll_tx_pwr_lvl_get+0xe>

00006ec0 <ll_rx_get>:
{
    6ec0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6ec4:	4605      	mov	r5, r0
    6ec6:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    6ec8:	4918      	ldr	r1, [pc, #96]	; (6f2c <ll_rx_get+0x6c>)
    6eca:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
    6ece:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    6ed2:	4293      	cmp	r3, r2
    6ed4:	460f      	mov	r7, r1
    6ed6:	d01f      	beq.n	6f18 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    6ed8:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    6edc:	f201 116f 	addw	r1, r1, #367	; 0x16f
    6ee0:	f898 2000 	ldrb.w	r2, [r8]
    6ee4:	f7fc fc54 	bl	3790 <tx_cmplt_get>
		if (!cmplt) {
    6ee8:	4604      	mov	r4, r0
    6eea:	b9e0      	cbnz	r0, 6f26 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    6eec:	ae02      	add	r6, sp, #8
    6eee:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
    6ef2:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    6ef6:	f897 2170 	ldrb.w	r2, [r7, #368]	; 0x170
    6efa:	4631      	mov	r1, r6
    6efc:	f10d 0006 	add.w	r0, sp, #6
    6f00:	f7fc fc46 	bl	3790 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    6f04:	b934      	cbnz	r4, 6f14 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    6f06:	b928      	cbnz	r0, 6f14 <ll_rx_get+0x54>
			*node_rx = _node_rx;
    6f08:	f8c5 8000 	str.w	r8, [r5]
}
    6f0c:	4620      	mov	r0, r4
    6f0e:	b002      	add	sp, #8
    6f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    6f14:	4604      	mov	r4, r0
    6f16:	e7ee      	b.n	6ef6 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    6f18:	f891 2170 	ldrb.w	r2, [r1, #368]	; 0x170
    6f1c:	f201 116f 	addw	r1, r1, #367	; 0x16f
    6f20:	f7fc fc36 	bl	3790 <tx_cmplt_get>
    6f24:	4604      	mov	r4, r0
		*node_rx = NULL;
    6f26:	2300      	movs	r3, #0
    6f28:	602b      	str	r3, [r5, #0]
    6f2a:	e7ef      	b.n	6f0c <ll_rx_get+0x4c>
    6f2c:	20000620 	.word	0x20000620

00006f30 <ll_rx_mem_release>:
{
    6f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
    6f34:	4c16      	ldr	r4, [pc, #88]	; (6f90 <ll_rx_mem_release+0x60>)
{
    6f36:	4605      	mov	r5, r0
	_node_rx = *node_rx;
    6f38:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    6f3a:	f5a4 7694 	sub.w	r6, r4, #296	; 0x128
			mem_release(conn, &_radio.conn_free);
    6f3e:	f1a4 071c 	sub.w	r7, r4, #28
	while (_node_rx) {
    6f42:	b920      	cbnz	r0, 6f4e <ll_rx_mem_release+0x1e>
	*node_rx = _node_rx;
    6f44:	6028      	str	r0, [r5, #0]
}
    6f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    6f4a:	f7fd bbe1 	b.w	4710 <packet_rx_allocate.constprop.51>
		switch (_node_rx_free->hdr.type) {
    6f4e:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    6f50:	f8d0 8000 	ldr.w	r8, [r0]
    6f54:	2a0a      	cmp	r2, #10
    6f56:	d807      	bhi.n	6f68 <ll_rx_mem_release+0x38>
    6f58:	2301      	movs	r3, #1
    6f5a:	4093      	lsls	r3, r2
    6f5c:	f240 727e 	movw	r2, #1918	; 0x77e
    6f60:	4213      	tst	r3, r2
    6f62:	d107      	bne.n	6f74 <ll_rx_mem_release+0x44>
    6f64:	061b      	lsls	r3, r3, #24
    6f66:	d40a      	bmi.n	6f7e <ll_rx_mem_release+0x4e>
			LL_ASSERT(0);
    6f68:	4040      	eors	r0, r0
    6f6a:	f380 8811 	msr	BASEPRI, r0
    6f6e:	f04f 0004 	mov.w	r0, #4
    6f72:	df02      	svc	2
			mem_release(_node_rx_free,
    6f74:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
    6f76:	f7fb fb90 	bl	269a <mem_release>
{
    6f7a:	4640      	mov	r0, r8
    6f7c:	e7e1      	b.n	6f42 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    6f7e:	88c2      	ldrh	r2, [r0, #6]
    6f80:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    6f84:	f44f 7182 	mov.w	r1, #260	; 0x104
    6f88:	f7fb fb9c 	bl	26c4 <mem_get>
			mem_release(conn, &_radio.conn_free);
    6f8c:	4639      	mov	r1, r7
    6f8e:	e7f2      	b.n	6f76 <ll_rx_mem_release+0x46>
    6f90:	20000748 	.word	0x20000748

00006f94 <do_radio_rx_fc_set>:

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
    6f94:	4291      	cmp	r1, r2
{
    6f96:	b510      	push	{r4, lr}
    6f98:	4b14      	ldr	r3, [pc, #80]	; (6fec <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
    6f9a:	d119      	bne.n	6fd0 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    6f9c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    6fa0:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
    6fa4:	4294      	cmp	r4, r2
    6fa6:	d111      	bne.n	6fcc <do_radio_rx_fc_set+0x38>
			u8_t ack1 = ack;

			if (ack1 == 0) {
    6fa8:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    6faa:	bf14      	ite	ne
    6fac:	460a      	movne	r2, r1
    6fae:	2203      	moveq	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
    6fb0:	3a01      	subs	r2, #1
    6fb2:	b2d2      	uxtb	r2, r2
    6fb4:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    6fb8:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    6fbc:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
			_radio.fc_handle[--ack1] = handle;
    6fc0:	f8a4 0172 	strh.w	r0, [r4, #370]	; 0x172
			if (req != _radio.fc_req) {
    6fc4:	4291      	cmp	r1, r2
    6fc6:	d00f      	beq.n	6fe8 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
    6fc8:	f883 1179 	strb.w	r1, [r3, #377]	; 0x179

				return 1;
			}
		} else {
			return 1;
    6fcc:	2001      	movs	r0, #1
    6fce:	e005      	b.n	6fdc <do_radio_rx_fc_set+0x48>
		}
	} else if (((req == 0) &&
    6fd0:	b929      	cbnz	r1, 6fde <do_radio_rx_fc_set+0x4a>
    6fd2:	f8b3 3176 	ldrh.w	r3, [r3, #374]	; 0x176
				return 1;
    6fd6:	1a18      	subs	r0, r3, r0
    6fd8:	bf18      	it	ne
    6fda:	2001      	movne	r0, #1
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
}
    6fdc:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    6fde:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    6fe2:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
    6fe6:	e7f6      	b.n	6fd6 <do_radio_rx_fc_set+0x42>
	return 0;
    6fe8:	2000      	movs	r0, #0
    6fea:	e7f7      	b.n	6fdc <do_radio_rx_fc_set+0x48>
    6fec:	20000620 	.word	0x20000620

00006ff0 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    6ff0:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
    6ff2:	4b14      	ldr	r3, [pc, #80]	; (7044 <radio_rx_fc_set+0x54>)
    6ff4:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
{
    6ff8:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    6ffa:	b302      	cbz	r2, 703e <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
    6ffc:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
    7000:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
    7002:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179

		if (fc) {
    7006:	b135      	cbz	r5, 7016 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
    7008:	f64f 73ff 	movw	r3, #65535	; 0xffff
    700c:	4298      	cmp	r0, r3
    700e:	d016      	beq.n	703e <radio_rx_fc_set+0x4e>
			}
		}
	}

	return 0;
}
    7010:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
    7012:	f7ff bfbf 	b.w	6f94 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    7016:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
    701a:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
    701e:	42a0      	cmp	r0, r4
    7020:	d10d      	bne.n	703e <radio_rx_fc_set+0x4e>
    7022:	4291      	cmp	r1, r2
    7024:	d00b      	beq.n	703e <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7026:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
			_radio.fc_ack = req;
    702a:	f883 1179 	strb.w	r1, [r3, #377]	; 0x179
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    702e:	42a0      	cmp	r0, r4
    7030:	d005      	beq.n	703e <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
    7032:	f893 0178 	ldrb.w	r0, [r3, #376]	; 0x178
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7036:	4288      	cmp	r0, r1
				_radio.fc_ack = ack;
    7038:	bf08      	it	eq
    703a:	f883 2179 	strbeq.w	r2, [r3, #377]	; 0x179
}
    703e:	2000      	movs	r0, #0
    7040:	bc30      	pop	{r4, r5}
    7042:	4770      	bx	lr
    7044:	20000620 	.word	0x20000620

00007048 <ll_adv_scan_state_cb>:
	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
}
    7048:	4770      	bx	lr
    704a:	0000      	movs	r0, r0
    704c:	0000      	movs	r0, r0
	...

00007050 <radio_adv_enable>:
{
    7050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.advertiser.is_enabled) {
    7054:	4fa2      	ldr	r7, [pc, #648]	; (72e0 <radio_adv_enable+0x290>)
{
    7056:	b08f      	sub	sp, #60	; 0x3c
    7058:	469a      	mov	sl, r3
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    705a:	2302      	movs	r3, #2
    705c:	930d      	str	r3, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
    705e:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
{
    7062:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	if (_radio.advertiser.is_enabled) {
    7066:	2b00      	cmp	r3, #0
{
    7068:	4683      	mov	fp, r0
    706a:	4688      	mov	r8, r1
    706c:	463d      	mov	r5, r7
	if (_radio.advertiser.is_enabled) {
    706e:	da01      	bge.n	7074 <radio_adv_enable+0x24>
	return BT_HCI_ERR_CMD_DISALLOWED;
    7070:	200c      	movs	r0, #12
    7072:	e12c      	b.n	72ce <radio_adv_enable+0x27e>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    7074:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
    7078:	232a      	movs	r3, #42	; 0x2a
    707a:	f04f 0927 	mov.w	r9, #39	; 0x27
    707e:	fb19 3902 	smlabb	r9, r9, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    7082:	f817 3009 	ldrb.w	r3, [r7, r9]
    7086:	f003 030f 	and.w	r3, r3, #15
    708a:	2b01      	cmp	r3, #1
    708c:	f200 80d8 	bhi.w	7240 <radio_adv_enable+0x1f0>
		if (_radio.advertiser.conn) {
    7090:	f8d7 60cc 	ldr.w	r6, [r7, #204]	; 0xcc
    7094:	2e00      	cmp	r6, #0
    7096:	d1eb      	bne.n	7070 <radio_adv_enable+0x20>
		link = mem_acquire(&_radio.link_rx_free);
    7098:	f507 70a0 	add.w	r0, r7, #320	; 0x140
    709c:	f7fb fae4 	bl	2668 <mem_acquire>
		if (!link) {
    70a0:	900a      	str	r0, [sp, #40]	; 0x28
    70a2:	b158      	cbz	r0, 70bc <radio_adv_enable+0x6c>
		conn = mem_acquire(&_radio.conn_free);
    70a4:	f507 7086 	add.w	r0, r7, #268	; 0x10c
    70a8:	f7fb fade 	bl	2668 <mem_acquire>
		if (!conn) {
    70ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    70ae:	4604      	mov	r4, r0
    70b0:	b930      	cbnz	r0, 70c0 <radio_adv_enable+0x70>
			mem_release(link, &_radio.link_rx_free);
    70b2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
    70b6:	4610      	mov	r0, r2
    70b8:	f7fb faef 	bl	269a <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    70bc:	2007      	movs	r0, #7
    70be:	e106      	b.n	72ce <radio_adv_enable+0x27e>
		conn->handle = 0xFFFF;
    70c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    70c4:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    70c6:	4b87      	ldr	r3, [pc, #540]	; (72e4 <radio_adv_enable+0x294>)
    70c8:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
		conn->data_chan_sel = 0;
    70cc:	7f43      	ldrb	r3, [r0, #29]
		conn->data_chan_use = 0;
    70ce:	77c6      	strb	r6, [r0, #31]
		conn->data_chan_sel = 0;
    70d0:	f366 1386 	bfi	r3, r6, #6, #1
		conn->role = 1;
    70d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    70d8:	7743      	strb	r3, [r0, #29]
		conn->latency_event = 0;
    70da:	2306      	movs	r3, #6
    70dc:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
    70de:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		conn->event_counter = 0;
    70e2:	8446      	strh	r6, [r0, #34]	; 0x22
		conn->common.fex_valid = 0;
    70e4:	f366 1345 	bfi	r3, r6, #5, #1
		conn->slave.latency_enabled = 0;
    70e8:	f366 0300 	bfi	r3, r6, #0, #1
		conn->slave.latency_cancel = 0;
    70ec:	f366 0341 	bfi	r3, r6, #1, #1
    70f0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		conn->llcp_version.tx = 0;
    70f4:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
		conn->latency_prepare = 0;
    70f8:	6286      	str	r6, [r0, #40]	; 0x28
		conn->llcp_version.tx = 0;
    70fa:	f366 0300 	bfi	r3, r6, #0, #1
		conn->llcp_version.rx = 0;
    70fe:	f366 0341 	bfi	r3, r6, #1, #1
		conn->slave.window_widening_event_us = 0;
    7102:	e9c0 6611 	strd	r6, r6, [r0, #68]	; 0x44
		conn->supervision_expire = 0;
    7106:	8606      	strh	r6, [r0, #48]	; 0x30
		conn->procedure_expire = 0;
    7108:	8686      	strh	r6, [r0, #52]	; 0x34
		conn->slave.ticks_to_offset = 0;
    710a:	6586      	str	r6, [r0, #88]	; 0x58
    710c:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
		conn->llcp_version.rx = 0;
    7110:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
		conn->llcp_terminate.req = 0;
    7114:	f8a0 6098 	strh.w	r6, [r0, #152]	; 0x98
		conn->llcp_terminate.reason_peer = 0;
    7118:	f880 609b 	strb.w	r6, [r0, #155]	; 0x9b
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    711c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		conn->sn = 0;
    7120:	f880 60a8 	strb.w	r6, [r0, #168]	; 0xa8
		conn->pkt_tx_head = NULL;
    7124:	e9c0 663b 	strd	r6, r6, [r0, #236]	; 0xec
		conn->pkt_tx_ctrl_last = NULL;
    7128:	e9c0 663d 	strd	r6, r6, [r0, #244]	; 0xf4
		conn->pkt_tx_data = NULL;
    712c:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
		conn->pkt_tx_last = NULL;
    7130:	f8a0 6100 	strh.w	r6, [r0, #256]	; 0x100
		k32src_wait();
    7134:	f7fd fb9c 	bl	4870 <k32src_wait>
		_radio.advertiser.conn = conn;
    7138:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
	_radio.advertiser.chan_map = chan_map;
    713c:	a80e      	add	r0, sp, #56	; 0x38
	_radio.advertiser.phy_p = phy_p;
    713e:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;
    7142:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p;
    7146:	f36b 0302 	bfi	r3, fp, #0, #3
	_radio.advertiser.chan_map = chan_map;
    714a:	f362 03c5 	bfi	r3, r2, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
    714e:	f36a 1387 	bfi	r3, sl, #6, #2
    7152:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.hdr.ticks_active_to_start =
    7156:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
    715a:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    715c:	2327      	movs	r3, #39	; 0x27
    715e:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    7160:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    7162:	2300      	movs	r3, #0
    7164:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    7166:	f7fb fc15 	bl	2994 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    716a:	f817 6009 	ldrb.w	r6, [r7, r9]
    716e:	f006 060f 	and.w	r6, r6, #15
    7172:	2e01      	cmp	r6, #1
    7174:	d166      	bne.n	7244 <radio_adv_enable+0x1f4>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    7176:	f44f 7327 	mov.w	r3, #668	; 0x29c
    717a:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    717c:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    7180:	4959      	ldr	r1, [pc, #356]	; (72e8 <radio_adv_enable+0x298>)
    7182:	a355      	add	r3, pc, #340	; (adr r3, 72d8 <radio_adv_enable+0x288>)
    7184:	e9d3 2300 	ldrd	r2, r3, [r3]
    7188:	fba0 0101 	umull	r0, r1, r0, r1
    718c:	f7f9 f892 	bl	2b4 <__aeabi_uldivmod>
	ticks_slot_offset =
    7190:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
    7194:	429f      	cmp	r7, r3
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    7196:	6268      	str	r0, [r5, #36]	; 0x24
	ticks_slot_offset =
    7198:	bf38      	it	cc
    719a:	461f      	movcc	r7, r3
	_radio.advertiser.is_hdcd = !interval &&
    719c:	f1b8 0f00 	cmp.w	r8, #0
    71a0:	d158      	bne.n	7254 <radio_adv_enable+0x204>
    71a2:	1e72      	subs	r2, r6, #1
    71a4:	4253      	negs	r3, r2
    71a6:	4153      	adcs	r3, r2
    71a8:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
    71ac:	f8df 914c 	ldr.w	r9, [pc, #332]	; 72fc <radio_adv_enable+0x2ac>
    71b0:	f8df b14c 	ldr.w	fp, [pc, #332]	; 7300 <radio_adv_enable+0x2b0>
    71b4:	f363 1686 	bfi	r6, r3, #6, #1
    71b8:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
    71bc:	f016 0640 	ands.w	r6, r6, #64	; 0x40
    71c0:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    71c4:	d04e      	beq.n	7264 <radio_adv_enable+0x214>
		u32_t ticks_now = ticker_ticks_now_get();
    71c6:	f7fc f9ff 	bl	35c8 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    71ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		u32_t ticks_now = ticker_ticks_now_get();
    71cc:	4606      	mov	r6, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    71ce:	441f      	add	r7, r3
    71d0:	2000      	movs	r0, #0
    71d2:	e9cd 9a07 	strd	r9, sl, [sp, #28]
    71d6:	e9cd b005 	strd	fp, r0, [sp, #20]
    71da:	e9cd 0703 	strd	r0, r7, [sp, #12]
    71de:	e9cd 7001 	strd	r7, r0, [sp, #4]
    71e2:	9000      	str	r0, [sp, #0]
    71e4:	4633      	mov	r3, r6
    71e6:	2205      	movs	r2, #5
    71e8:	2103      	movs	r1, #3
    71ea:	f7fc f891 	bl	3310 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    71ee:	2802      	cmp	r0, #2
    71f0:	d034      	beq.n	725c <radio_adv_enable+0x20c>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    71f2:	980d      	ldr	r0, [sp, #52]	; 0x34
    71f4:	b9b8      	cbnz	r0, 7226 <radio_adv_enable+0x1d6>
		ret_cb = TICKER_STATUS_BUSY;
    71f6:	2302      	movs	r3, #2
    71f8:	930d      	str	r3, [sp, #52]	; 0x34
		ret =
    71fa:	4b3c      	ldr	r3, [pc, #240]	; (72ec <radio_adv_enable+0x29c>)
    71fc:	9006      	str	r0, [sp, #24]
    71fe:	e9cd 9a07 	strd	r9, sl, [sp, #28]
    7202:	e9cd 0002 	strd	r0, r0, [sp, #8]
    7206:	e9cd 0304 	strd	r0, r3, [sp, #16]
    720a:	2203      	movs	r2, #3
    720c:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    7210:	9300      	str	r3, [sp, #0]
    7212:	9001      	str	r0, [sp, #4]
    7214:	4633      	mov	r3, r6
    7216:	4611      	mov	r1, r2
		ret =
    7218:	f7fc f87a 	bl	3310 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    721c:	2802      	cmp	r0, #2
    721e:	d043      	beq.n	72a8 <radio_adv_enable+0x258>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    7220:	980d      	ldr	r0, [sp, #52]	; 0x34
    7222:	2800      	cmp	r0, #0
    7224:	d044      	beq.n	72b0 <radio_adv_enable+0x260>
	if (conn) {
    7226:	2c00      	cmp	r4, #0
    7228:	f43f af22 	beq.w	7070 <radio_adv_enable+0x20>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    722c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    7230:	492f      	ldr	r1, [pc, #188]	; (72f0 <radio_adv_enable+0x2a0>)
    7232:	f7fb fa32 	bl	269a <mem_release>
		mem_release(conn, &_radio.conn_free);
    7236:	492f      	ldr	r1, [pc, #188]	; (72f4 <radio_adv_enable+0x2a4>)
    7238:	4620      	mov	r0, r4
    723a:	f7fb fa2e 	bl	269a <mem_release>
    723e:	e717      	b.n	7070 <radio_adv_enable+0x20>
		conn = NULL;
    7240:	2400      	movs	r4, #0
    7242:	e77b      	b.n	713c <radio_adv_enable+0xec>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    7244:	2e02      	cmp	r6, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    7246:	bf0c      	ite	eq
    7248:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    724c:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    7250:	4358      	muls	r0, r3
    7252:	e795      	b.n	7180 <radio_adv_enable+0x130>
	_radio.advertiser.is_hdcd = !interval &&
    7254:	2300      	movs	r3, #0
    7256:	e7a7      	b.n	71a8 <radio_adv_enable+0x158>
				cpu_sleep();
    7258:	f7fc f9f6 	bl	3648 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    725c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    725e:	2b02      	cmp	r3, #2
    7260:	d0fa      	beq.n	7258 <radio_adv_enable+0x208>
    7262:	e7c6      	b.n	71f2 <radio_adv_enable+0x1a2>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7264:	f7fc f9b0 	bl	35c8 <ticker_ticks_now_get>
		ret =
    7268:	e9cd 9a07 	strd	r9, sl, [sp, #28]
    726c:	e9cd b605 	strd	fp, r6, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7270:	900a      	str	r0, [sp, #40]	; 0x28
    7272:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    7274:	4820      	ldr	r0, [pc, #128]	; (72f8 <radio_adv_enable+0x2a8>)
		ret =
    7276:	9602      	str	r6, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    7278:	fa1f f888 	uxth.w	r8, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    727c:	441f      	add	r7, r3
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    727e:	fba8 0100 	umull	r0, r1, r8, r0
    7282:	2391      	movs	r3, #145	; 0x91
    7284:	fb03 1108 	mla	r1, r3, r8, r1
    7288:	a313      	add	r3, pc, #76	; (adr r3, 72d8 <radio_adv_enable+0x288>)
    728a:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret =
    728e:	e9cd 6703 	strd	r6, r7, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    7292:	f7f9 f80f 	bl	2b4 <__aeabi_uldivmod>
		ret =
    7296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7298:	e9cd 6000 	strd	r6, r0, [sp]
    729c:	2205      	movs	r2, #5
    729e:	2103      	movs	r1, #3
    72a0:	4630      	mov	r0, r6
    72a2:	e7b9      	b.n	7218 <radio_adv_enable+0x1c8>
			cpu_sleep();
    72a4:	f7fc f9d0 	bl	3648 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    72a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    72aa:	2b02      	cmp	r3, #2
    72ac:	d0fa      	beq.n	72a4 <radio_adv_enable+0x254>
    72ae:	e7b7      	b.n	7220 <radio_adv_enable+0x1d0>
		_radio.advertiser.is_enabled = 1;
    72b0:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    72b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    72b8:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    72bc:	f895 30e0 	ldrb.w	r3, [r5, #224]	; 0xe0
    72c0:	f013 0401 	ands.w	r4, r3, #1
    72c4:	d103      	bne.n	72ce <radio_adv_enable+0x27e>
			ll_adv_scan_state_cb(BIT(0));
    72c6:	2001      	movs	r0, #1
    72c8:	f7ff febe 	bl	7048 <ll_adv_scan_state_cb>
		return 0;
    72cc:	4620      	mov	r0, r4
}
    72ce:	b00f      	add	sp, #60	; 0x3c
    72d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    72d4:	f3af 8000 	nop.w
    72d8:	1afd498d 	.word	0x1afd498d
    72dc:	00000007 	.word	0x00000007
    72e0:	20000620 	.word	0x20000620
    72e4:	0001400c 	.word	0x0001400c
    72e8:	3b9aca00 	.word	0x3b9aca00
    72ec:	000046e1 	.word	0x000046e1
    72f0:	20000760 	.word	0x20000760
    72f4:	2000072c 	.word	0x2000072c
    72f8:	84e72a00 	.word	0x84e72a00
    72fc:	0000368d 	.word	0x0000368d
    7300:	000046a9 	.word	0x000046a9

00007304 <radio_adv_disable>:
{
    7304:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    7306:	2103      	movs	r1, #3
    7308:	2005      	movs	r0, #5
    730a:	f7fc faa1 	bl	3850 <role_disable>
	if (!status) {
    730e:	4605      	mov	r5, r0
    7310:	b9e8      	cbnz	r0, 734e <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
    7312:	4c10      	ldr	r4, [pc, #64]	; (7354 <radio_adv_disable+0x50>)
    7314:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    7318:	f360 12c7 	bfi	r2, r0, #7, #1
    731c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    7320:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    7324:	07d3      	lsls	r3, r2, #31
    7326:	d401      	bmi.n	732c <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    7328:	f7ff fe8e 	bl	7048 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    732c:	f8d4 60cc 	ldr.w	r6, [r4, #204]	; 0xcc
		if (conn) {
    7330:	b15e      	cbz	r6, 734a <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
    7332:	2300      	movs	r3, #0
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    7334:	4908      	ldr	r1, [pc, #32]	; (7358 <radio_adv_disable+0x54>)
    7336:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
			_radio.advertiser.conn = NULL;
    733a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    733e:	f7fb f9ac 	bl	269a <mem_release>
			mem_release(conn, &_radio.conn_free);
    7342:	4906      	ldr	r1, [pc, #24]	; (735c <radio_adv_disable+0x58>)
    7344:	4630      	mov	r0, r6
    7346:	f7fb f9a8 	bl	269a <mem_release>
}
    734a:	4628      	mov	r0, r5
    734c:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    734e:	250c      	movs	r5, #12
    7350:	e7fb      	b.n	734a <radio_adv_disable+0x46>
    7352:	bf00      	nop
    7354:	20000620 	.word	0x20000620
    7358:	20000760 	.word	0x20000760
    735c:	2000072c 	.word	0x2000072c

00007360 <ll_rx_dequeue>:
{
    7360:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    7362:	4d34      	ldr	r5, [pc, #208]	; (7434 <ll_rx_dequeue+0xd4>)
	struct radio_pdu_node_rx *node_rx = NULL;
    7364:	aa02      	add	r2, sp, #8
    7366:	2300      	movs	r3, #0
    7368:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    736c:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
    7370:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    7374:	f7fb f9cf 	bl	2716 <memq_dequeue>
    7378:	462c      	mov	r4, r5
	LL_ASSERT(link);
    737a:	b928      	cbnz	r0, 7388 <ll_rx_dequeue+0x28>
			LL_ASSERT(_radio.scanner.is_enabled);
    737c:	4040      	eors	r0, r0
    737e:	f380 8811 	msr	BASEPRI, r0
    7382:	f04f 0004 	mov.w	r0, #4
    7386:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    7388:	f505 71a0 	add.w	r1, r5, #320	; 0x140
    738c:	f7fb f985 	bl	269a <mem_release>
	switch (node_rx->hdr.type) {
    7390:	9a01      	ldr	r2, [sp, #4]
    7392:	7911      	ldrb	r1, [r2, #4]
    7394:	290a      	cmp	r1, #10
    7396:	d8f1      	bhi.n	737c <ll_rx_dequeue+0x1c>
    7398:	2301      	movs	r3, #1
    739a:	408b      	lsls	r3, r1
    739c:	f240 707e 	movw	r0, #1918	; 0x77e
    73a0:	4203      	tst	r3, r0
    73a2:	d111      	bne.n	73c8 <ll_rx_dequeue+0x68>
    73a4:	0618      	lsls	r0, r3, #24
    73a6:	d5e9      	bpl.n	737c <ll_rx_dequeue+0x1c>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    73a8:	2906      	cmp	r1, #6
    73aa:	d135      	bne.n	7418 <ll_rx_dequeue+0xb8>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    73ac:	7ad3      	ldrb	r3, [r2, #11]
    73ae:	2b3c      	cmp	r3, #60	; 0x3c
    73b0:	d015      	beq.n	73de <ll_rx_dequeue+0x7e>
    73b2:	7b12      	ldrb	r2, [r2, #12]
    73b4:	bb92      	cbnz	r2, 741c <ll_rx_dequeue+0xbc>
			LL_ASSERT(_radio.scanner.is_enabled);
    73b6:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    73ba:	07d9      	lsls	r1, r3, #31
    73bc:	d5de      	bpl.n	737c <ll_rx_dequeue+0x1c>
			_radio.scanner.is_enabled = 0;
    73be:	f362 0300 	bfi	r3, r2, #0, #1
    73c2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    73c6:	e01a      	b.n	73fe <ll_rx_dequeue+0x9e>
		LL_ASSERT(_radio.link_rx_data_quota <
    73c8:	f895 0138 	ldrb.w	r0, [r5, #312]	; 0x138
    73cc:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
    73d0:	3801      	subs	r0, #1
    73d2:	4283      	cmp	r3, r0
    73d4:	dad2      	bge.n	737c <ll_rx_dequeue+0x1c>
		_radio.link_rx_data_quota++;
    73d6:	3301      	adds	r3, #1
    73d8:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
		break;
    73dc:	e7e4      	b.n	73a8 <ll_rx_dequeue+0x48>
				_radio.advertiser.conn = NULL;
    73de:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    73e0:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
    73e4:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
    73e8:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    73ec:	2b00      	cmp	r3, #0
    73ee:	dac5      	bge.n	737c <ll_rx_dequeue+0x1c>
			_radio.advertiser.is_enabled = 0;
    73f0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    73f4:	f36f 13c7 	bfc	r3, #7, #1
    73f8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    73fc:	b985      	cbnz	r5, 7420 <ll_rx_dequeue+0xc0>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    73fe:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    7402:	f000 0301 	and.w	r3, r0, #1
		     _radio.advertiser.is_enabled;
    7406:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    740a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
		if (!bm) {
    740e:	ea50 0043 	orrs.w	r0, r0, r3, lsl #1
    7412:	d101      	bne.n	7418 <ll_rx_dequeue+0xb8>
			ll_adv_scan_state_cb(0);
    7414:	f7ff fe18 	bl	7048 <ll_adv_scan_state_cb>
}
    7418:	b003      	add	sp, #12
    741a:	bd30      	pop	{r4, r5, pc}
		struct connection *conn = NULL;
    741c:	2500      	movs	r5, #0
    741e:	e7e3      	b.n	73e8 <ll_rx_dequeue+0x88>
			mem_release(node_rx->hdr.onion.link,
    7420:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    7424:	4904      	ldr	r1, [pc, #16]	; (7438 <ll_rx_dequeue+0xd8>)
    7426:	f7fb f938 	bl	269a <mem_release>
			mem_release(conn, &_radio.conn_free);
    742a:	4904      	ldr	r1, [pc, #16]	; (743c <ll_rx_dequeue+0xdc>)
    742c:	4628      	mov	r0, r5
    742e:	f7fb f934 	bl	269a <mem_release>
    7432:	e7e4      	b.n	73fe <ll_rx_dequeue+0x9e>
    7434:	20000620 	.word	0x20000620
    7438:	20000760 	.word	0x20000760
    743c:	2000072c 	.word	0x2000072c

00007440 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    7440:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    7442:	4c0b      	ldr	r4, [pc, #44]	; (7470 <rtc0_nrf5_isr+0x30>)
    7444:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    7448:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    744c:	b122      	cbz	r2, 7458 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    744e:	2000      	movs	r0, #0
    7450:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
    7454:	f7fb ff4a 	bl	32ec <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    7458:	b12d      	cbz	r5, 7466 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    745a:	2300      	movs	r3, #0
    745c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    7460:	2001      	movs	r0, #1
    7462:	f7fb ff43 	bl	32ec <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    7466:	2000      	movs	r0, #0
}
    7468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    746c:	f7fb ba00 	b.w	2870 <mayfly_run>
    7470:	4000b000 	.word	0x4000b000

00007474 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    7474:	2001      	movs	r0, #1
    7476:	f7fb b9fb 	b.w	2870 <mayfly_run>

0000747a <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    747a:	4668      	mov	r0, sp
    747c:	f020 0107 	bic.w	r1, r0, #7
    7480:	468d      	mov	sp, r1
    7482:	b501      	push	{r0, lr}
	isr_radio();
    7484:	f001 f9f2 	bl	886c <isr_radio>
	ISR_DIRECT_PM();
    7488:	f7fa fb22 	bl	1ad0 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    748c:	f7fa f928 	bl	16e0 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    7490:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    7494:	4685      	mov	sp, r0
    7496:	4770      	bx	lr

00007498 <radio_active_callback>:
}
    7498:	4770      	bx	lr
	...

0000749c <radio_event_callback>:
	k_sem_give(sem_recv);
    749c:	4b01      	ldr	r3, [pc, #4]	; (74a4 <radio_event_callback+0x8>)
    749e:	6818      	ldr	r0, [r3, #0]
    74a0:	f002 bfd5 	b.w	a44e <_impl_k_sem_give>
    74a4:	20000dc4 	.word	0x20000dc4

000074a8 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
    74a8:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    74aa:	4b38      	ldr	r3, [pc, #224]	; (758c <ll_init+0xe4>)
{
    74ac:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    74ae:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    74b0:	4837      	ldr	r0, [pc, #220]	; (7590 <ll_init+0xe8>)
    74b2:	f002 faa3 	bl	99fc <device_get_binding>
	if (!clk_k32) {
    74b6:	b918      	cbnz	r0, 74c0 <ll_init+0x18>
		return -ENODEV;
    74b8:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
    74bc:	b006      	add	sp, #24
    74be:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
    74c0:	6843      	ldr	r3, [r0, #4]
    74c2:	2101      	movs	r1, #1
    74c4:	681b      	ldr	r3, [r3, #0]
    74c6:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    74c8:	4832      	ldr	r0, [pc, #200]	; (7594 <ll_init+0xec>)
    74ca:	f002 fa97 	bl	99fc <device_get_binding>
	if (!entropy) {
    74ce:	4604      	mov	r4, r0
    74d0:	2800      	cmp	r0, #0
    74d2:	d0f1      	beq.n	74b8 <ll_init+0x10>
	cntr_init();
    74d4:	f001 f8be 	bl	8654 <cntr_init>
	mayfly_init();
    74d8:	f7fb f92a 	bl	2730 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    74dc:	4b2e      	ldr	r3, [pc, #184]	; (7598 <ll_init+0xf0>)
    74de:	2208      	movs	r2, #8
    74e0:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    74e2:	2203      	movs	r2, #3
    74e4:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    74e6:	2000      	movs	r0, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    74e8:	4a2c      	ldr	r2, [pc, #176]	; (759c <ll_init+0xf4>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    74ea:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    74ec:	2502      	movs	r5, #2
    74ee:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    74f0:	9205      	str	r2, [sp, #20]
    74f2:	4a2b      	ldr	r2, [pc, #172]	; (75a0 <ll_init+0xf8>)
    74f4:	9204      	str	r2, [sp, #16]
    74f6:	4a2b      	ldr	r2, [pc, #172]	; (75a4 <ll_init+0xfc>)
    74f8:	9203      	str	r2, [sp, #12]
    74fa:	4a2b      	ldr	r2, [pc, #172]	; (75a8 <ll_init+0x100>)
    74fc:	9202      	str	r2, [sp, #8]
    74fe:	220d      	movs	r2, #13
    7500:	e9cd 3200 	strd	r3, r2, [sp]
    7504:	2107      	movs	r1, #7
    7506:	2304      	movs	r3, #4
    7508:	4a28      	ldr	r2, [pc, #160]	; (75ac <ll_init+0x104>)
    750a:	f7fb feb3 	bl	3274 <ticker_init>
	LL_ASSERT(!err);
    750e:	4606      	mov	r6, r0
    7510:	b128      	cbz	r0, 751e <ll_init+0x76>
    7512:	4040      	eors	r0, r0
    7514:	f380 8811 	msr	BASEPRI, r0
    7518:	f04f 0004 	mov.w	r0, #4
    751c:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    751e:	4824      	ldr	r0, [pc, #144]	; (75b0 <ll_init+0x108>)
    7520:	f002 fa6c 	bl	99fc <device_get_binding>
	if (!clk_m16) {
    7524:	2800      	cmp	r0, #0
    7526:	d0c7      	beq.n	74b8 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    7528:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    752c:	9305      	str	r3, [sp, #20]
    752e:	4b21      	ldr	r3, [pc, #132]	; (75b4 <ll_init+0x10c>)
    7530:	9304      	str	r3, [sp, #16]
    7532:	9501      	str	r5, [sp, #4]
    7534:	231b      	movs	r3, #27
    7536:	2501      	movs	r5, #1
    7538:	e9cd 3302 	strd	r3, r3, [sp, #8]
    753c:	4622      	mov	r2, r4
    753e:	9500      	str	r5, [sp, #0]
    7540:	4633      	mov	r3, r6
    7542:	2107      	movs	r1, #7
    7544:	f7ff fba6 	bl	6c94 <radio_init>
	if (err) {
    7548:	4604      	mov	r4, r0
    754a:	b9e0      	cbnz	r0, 7586 <ll_init+0xde>
	ll_filter_reset(true);
    754c:	4628      	mov	r0, r5
    754e:	f001 f875 	bl	863c <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    7552:	4622      	mov	r2, r4
    7554:	4621      	mov	r1, r4
    7556:	4628      	mov	r0, r5
    7558:	f7fa faa0 	bl	1a9c <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    755c:	4622      	mov	r2, r4
    755e:	4621      	mov	r1, r4
    7560:	200b      	movs	r0, #11
    7562:	f7fa fa9b 	bl	1a9c <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    7566:	4622      	mov	r2, r4
    7568:	4621      	mov	r1, r4
    756a:	2018      	movs	r0, #24
    756c:	f7fa fa96 	bl	1a9c <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    7570:	4628      	mov	r0, r5
    7572:	f7fa fa61 	bl	1a38 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    7576:	200b      	movs	r0, #11
    7578:	f7fa fa5e 	bl	1a38 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    757c:	2018      	movs	r0, #24
    757e:	f7fa fa5b 	bl	1a38 <_arch_irq_enable>
	return 0;
    7582:	4620      	mov	r0, r4
    7584:	e79a      	b.n	74bc <ll_init+0x14>
		return -ENOMEM;
    7586:	f06f 000b 	mvn.w	r0, #11
    758a:	e797      	b.n	74bc <ll_init+0x14>
    758c:	20000dc4 	.word	0x20000dc4
    7590:	0000ae0c 	.word	0x0000ae0c
    7594:	0000ade7 	.word	0x0000ade7
    7598:	20000da4 	.word	0x20000da4
    759c:	00009099 	.word	0x00009099
    75a0:	00009021 	.word	0x00009021
    75a4:	00009001 	.word	0x00009001
    75a8:	20000b34 	.word	0x20000b34
    75ac:	20000a1c 	.word	0x20000a1c
    75b0:	0000ae17 	.word	0x0000ae17
    75b4:	2000082c 	.word	0x2000082c

000075b8 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    75b8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    75ba:	4802      	ldr	r0, [pc, #8]	; (75c4 <_hci_driver_init+0xc>)
    75bc:	f7fa ffea 	bl	2594 <bt_hci_driver_register>

	return 0;
}
    75c0:	2000      	movs	r0, #0
    75c2:	bd08      	pop	{r3, pc}
    75c4:	0000b270 	.word	0x0000b270

000075c8 <hci_driver_send>:
	if (!buf->len) {
    75c8:	8983      	ldrh	r3, [r0, #12]
{
    75ca:	b510      	push	{r4, lr}
    75cc:	4604      	mov	r4, r0
	if (!buf->len) {
    75ce:	b19b      	cbz	r3, 75f8 <hci_driver_send+0x30>
	switch (type) {
    75d0:	7d03      	ldrb	r3, [r0, #20]
    75d2:	b98b      	cbnz	r3, 75f8 <hci_driver_send+0x30>
	evt = hci_cmd_handle(buf);
    75d4:	f000 f982 	bl	78dc <hci_cmd_handle>
	if (evt) {
    75d8:	b130      	cbz	r0, 75e8 <hci_driver_send+0x20>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    75da:	6883      	ldr	r3, [r0, #8]
    75dc:	781b      	ldrb	r3, [r3, #0]
    75de:	3b0e      	subs	r3, #14
    75e0:	2b01      	cmp	r3, #1
    75e2:	d806      	bhi.n	75f2 <hci_driver_send+0x2a>
			bt_recv_prio(evt);
    75e4:	f7fa ff90 	bl	2508 <bt_recv_prio>
		net_buf_unref(buf);
    75e8:	4620      	mov	r0, r4
    75ea:	f001 fe07 	bl	91fc <net_buf_unref>
	return err;
    75ee:	2000      	movs	r0, #0
}
    75f0:	bd10      	pop	{r4, pc}
			bt_recv(evt);
    75f2:	f7fa ff27 	bl	2444 <bt_recv>
    75f6:	e7f7      	b.n	75e8 <hci_driver_send+0x20>
		return -EINVAL;
    75f8:	f06f 0015 	mvn.w	r0, #21
    75fc:	e7f8      	b.n	75f0 <hci_driver_send+0x28>
	...

00007600 <recv_thread>:
{
    7600:	b573      	push	{r0, r1, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    7602:	4d1c      	ldr	r5, [pc, #112]	; (7674 <recv_thread+0x74>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    7604:	2600      	movs	r6, #0
    7606:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    760a:	4628      	mov	r0, r5
    760c:	f002 fc42 	bl	9e94 <_impl_k_queue_get>
		if (node_rx && !buf) {
    7610:	4604      	mov	r4, r0
    7612:	b318      	cbz	r0, 765c <recv_thread+0x5c>
	s8_t class = hci_get_class(node_rx);
    7614:	f000 fd34 	bl	8080 <hci_get_class>
	switch (class) {
    7618:	2802      	cmp	r0, #2
    761a:	9401      	str	r4, [sp, #4]
    761c:	d821      	bhi.n	7662 <recv_thread+0x62>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    761e:	2801      	cmp	r0, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    7620:	bf0e      	itee	eq
    7622:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7624:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    7628:	2001      	movne	r0, #1
    762a:	f7fa ffc7 	bl	25bc <bt_buf_get_rx>
    762e:	4604      	mov	r4, r0
		if (buf) {
    7630:	b118      	cbz	r0, 763a <recv_thread+0x3a>
			hci_evt_encode(node_rx, buf);
    7632:	4601      	mov	r1, r0
    7634:	9801      	ldr	r0, [sp, #4]
    7636:	f000 fc3b 	bl	7eb0 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    763a:	9b01      	ldr	r3, [sp, #4]
    763c:	2100      	movs	r1, #0
    763e:	88d8      	ldrh	r0, [r3, #6]
    7640:	f7ff fcd6 	bl	6ff0 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    7644:	a802      	add	r0, sp, #8
    7646:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    764a:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    764c:	f7ff fc70 	bl	6f30 <ll_rx_mem_release>
		if (buf) {
    7650:	b124      	cbz	r4, 765c <recv_thread+0x5c>
			if (buf->len) {
    7652:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    7654:	4620      	mov	r0, r4
			if (buf->len) {
    7656:	b153      	cbz	r3, 766e <recv_thread+0x6e>
				bt_recv(buf);
    7658:	f7fa fef4 	bl	2444 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    765c:	f002 fe84 	bl	a368 <_impl_k_yield>
    7660:	e7d1      	b.n	7606 <recv_thread+0x6>
		LL_ASSERT(0);
    7662:	4040      	eors	r0, r0
    7664:	f380 8811 	msr	BASEPRI, r0
    7668:	f04f 0004 	mov.w	r0, #4
    766c:	df02      	svc	2
				net_buf_unref(buf);
    766e:	f001 fdc5 	bl	91fc <net_buf_unref>
    7672:	e7f3      	b.n	765c <recv_thread+0x5c>
    7674:	20002fdc 	.word	0x20002fdc

00007678 <prio_recv_thread>:
{
    7678:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    767a:	4c0c      	ldr	r4, [pc, #48]	; (76ac <prio_recv_thread+0x34>)
			k_fifo_put(&recv_fifo, node_rx);
    767c:	4d0c      	ldr	r5, [pc, #48]	; (76b0 <prio_recv_thread+0x38>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    767e:	f10d 0102 	add.w	r1, sp, #2
    7682:	a801      	add	r0, sp, #4
    7684:	f7ff fc1c 	bl	6ec0 <ll_rx_get>
    7688:	2800      	cmp	r0, #0
    768a:	d1f8      	bne.n	767e <prio_recv_thread+0x6>
		if (node_rx) {
    768c:	9b01      	ldr	r3, [sp, #4]
    768e:	b133      	cbz	r3, 769e <prio_recv_thread+0x26>
			ll_rx_dequeue();
    7690:	f7ff fe66 	bl	7360 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    7694:	9901      	ldr	r1, [sp, #4]
    7696:	4628      	mov	r0, r5
    7698:	f002 fbd8 	bl	9e4c <k_queue_append>
    769c:	e7ef      	b.n	767e <prio_recv_thread+0x6>
    769e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    76a2:	4620      	mov	r0, r4
    76a4:	f002 fefa 	bl	a49c <_impl_k_sem_take>
    76a8:	e7e9      	b.n	767e <prio_recv_thread+0x6>
    76aa:	bf00      	nop
    76ac:	20002fc4 	.word	0x20002fc4
    76b0:	20002fdc 	.word	0x20002fdc

000076b4 <hci_driver_open>:
{
    76b4:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    76b6:	4814      	ldr	r0, [pc, #80]	; (7708 <hci_driver_open+0x54>)
{
    76b8:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    76ba:	f7ff fef5 	bl	74a8 <ll_init>
	if (err) {
    76be:	4604      	mov	r4, r0
    76c0:	b9f8      	cbnz	r0, 7702 <hci_driver_open+0x4e>
	hci_init(NULL);
    76c2:	f000 fcfd 	bl	80c0 <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    76c6:	f06f 0309 	mvn.w	r3, #9
    76ca:	e9cd 4302 	strd	r4, r3, [sp, #8]
    76ce:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    76d2:	4b0e      	ldr	r3, [pc, #56]	; (770c <hci_driver_open+0x58>)
    76d4:	490e      	ldr	r1, [pc, #56]	; (7710 <hci_driver_open+0x5c>)
    76d6:	480f      	ldr	r0, [pc, #60]	; (7714 <hci_driver_open+0x60>)
    76d8:	e9cd 4404 	strd	r4, r4, [sp, #16]
    76dc:	e9cd 4400 	strd	r4, r4, [sp]
    76e0:	f003 f8fe 	bl	a8e0 <_impl_k_thread_create>
    76e4:	f06f 0307 	mvn.w	r3, #7
    76e8:	e9cd 4302 	strd	r4, r3, [sp, #8]
    76ec:	e9cd 4404 	strd	r4, r4, [sp, #16]
    76f0:	e9cd 4400 	strd	r4, r4, [sp]
    76f4:	4b08      	ldr	r3, [pc, #32]	; (7718 <hci_driver_open+0x64>)
    76f6:	4909      	ldr	r1, [pc, #36]	; (771c <hci_driver_open+0x68>)
    76f8:	4809      	ldr	r0, [pc, #36]	; (7720 <hci_driver_open+0x6c>)
    76fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    76fe:	f003 f8ef 	bl	a8e0 <_impl_k_thread_create>
}
    7702:	4620      	mov	r0, r4
    7704:	b006      	add	sp, #24
    7706:	bd10      	pop	{r4, pc}
    7708:	20002fc4 	.word	0x20002fc4
    770c:	00007679 	.word	0x00007679
    7710:	200015e0 	.word	0x200015e0
    7714:	200012b0 	.word	0x200012b0
    7718:	00007601 	.word	0x00007601
    771c:	200017a0 	.word	0x200017a0
    7720:	20001240 	.word	0x20001240

00007724 <sys_put_le32>:
	dst[1] = val >> 8;
    7724:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    7728:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    772a:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    772c:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    772e:	0a00      	lsrs	r0, r0, #8
    7730:	704b      	strb	r3, [r1, #1]
    7732:	70c8      	strb	r0, [r1, #3]
}
    7734:	4770      	bx	lr

00007736 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    7736:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    7738:	3008      	adds	r0, #8
{
    773a:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    773c:	2102      	movs	r1, #2
{
    773e:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    7740:	f001 fd8e 	bl	9260 <net_buf_simple_add>
	hdr->evt = evt;
    7744:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    7746:	7044      	strb	r4, [r0, #1]
}
    7748:	bd38      	pop	{r3, r4, r5, pc}
	...

0000774c <cmd_complete>:

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    774c:	b538      	push	{r3, r4, r5, lr}
    774e:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    7750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    7754:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    7756:	f7fa ff41 	bl	25dc <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    775a:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    775c:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    775e:	b2d2      	uxtb	r2, r2
    7760:	210e      	movs	r1, #14
    7762:	f7ff ffe8 	bl	7736 <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    7766:	6820      	ldr	r0, [r4, #0]
    7768:	2103      	movs	r1, #3
    776a:	3008      	adds	r0, #8
    776c:	f001 fd78 	bl	9260 <net_buf_simple_add>
	cc->ncmd = 1;
    7770:	2301      	movs	r3, #1
    7772:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    7774:	4b05      	ldr	r3, [pc, #20]	; (778c <cmd_complete+0x40>)
    7776:	881b      	ldrh	r3, [r3, #0]
    7778:	f8a0 3001 	strh.w	r3, [r0, #1]

	return net_buf_add(*buf, plen);
    777c:	6820      	ldr	r0, [r4, #0]
    777e:	4629      	mov	r1, r5
    7780:	3008      	adds	r0, #8
}
    7782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    7786:	f001 bd6b 	b.w	9260 <net_buf_simple_add>
    778a:	bf00      	nop
    778c:	20000dc8 	.word	0x20000dc8

00007790 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    7790:	b570      	push	{r4, r5, r6, lr}
    7792:	4604      	mov	r4, r0
    7794:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    7796:	3201      	adds	r2, #1
{
    7798:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    779a:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    779c:	b2d2      	uxtb	r2, r2
    779e:	213e      	movs	r1, #62	; 0x3e
    77a0:	f7ff ffc9 	bl	7736 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    77a4:	2101      	movs	r1, #1
    77a6:	4620      	mov	r0, r4
    77a8:	f001 fd5a 	bl	9260 <net_buf_simple_add>
	me->subevent = subevt;
    77ac:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    77ae:	4629      	mov	r1, r5
    77b0:	4620      	mov	r0, r4
}
    77b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    77b6:	f001 bd53 	b.w	9260 <net_buf_simple_add>
	...

000077bc <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    77bc:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
    77c0:	4604      	mov	r4, r0
    77c2:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    77c4:	4b15      	ldr	r3, [pc, #84]	; (781c <le_remote_feat_complete+0x60>)
{
    77c6:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    77c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    77cc:	f04f 0b00 	mov.w	fp, #0
    77d0:	f003 5c00 	and.w	ip, r3, #536870912	; 0x20000000
    77d4:	ea5b 030c 	orrs.w	r3, fp, ip
{
    77d8:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    77da:	d01d      	beq.n	7818 <le_remote_feat_complete+0x5c>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    77dc:	4b10      	ldr	r3, [pc, #64]	; (7820 <le_remote_feat_complete+0x64>)
    77de:	e9d3 2300 	ldrd	r2, r3, [r3]
    77e2:	f04f 0c00 	mov.w	ip, #0
    77e6:	f002 0b08 	and.w	fp, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    77ea:	ea5b 030c 	orrs.w	r3, fp, ip
    77ee:	d013      	beq.n	7818 <le_remote_feat_complete+0x5c>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    77f0:	220b      	movs	r2, #11
    77f2:	2104      	movs	r1, #4
    77f4:	f7ff ffcc 	bl	7790 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    77f8:	2208      	movs	r2, #8
	sep->status = status;
    77fa:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    77fc:	f8a0 6001 	strh.w	r6, [r0, #1]
    7800:	3003      	adds	r0, #3
	if (!status) {
    7802:	b924      	cbnz	r4, 780e <le_remote_feat_complete+0x52>
		memcpy(&sep->features[0],
    7804:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    7806:	e8bd 4878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, lr}
		memcpy(&sep->features[0],
    780a:	f7fa bae8 	b.w	1dde <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    780e:	2100      	movs	r1, #0
}
    7810:	e8bd 4878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    7814:	f7fa bb10 	b.w	1e38 <memset>
}
    7818:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
    781c:	20002ec8 	.word	0x20002ec8
    7820:	20002ed0 	.word	0x20002ed0

00007824 <bt_addr_le_to_str.constprop.43>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    7824:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    7826:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    7828:	b08a      	sub	sp, #40	; 0x28
    782a:	4604      	mov	r4, r0
    782c:	460e      	mov	r6, r1
    782e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    7830:	2b03      	cmp	r3, #3
    7832:	d820      	bhi.n	7876 <bt_addr_le_to_str.constprop.43+0x52>
    7834:	e8df f003 	tbb	[pc, r3]
    7838:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    783c:	4911      	ldr	r1, [pc, #68]	; (7884 <bt_addr_le_to_str.constprop.43+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    783e:	4628      	mov	r0, r5
    7840:	f7fa faa6 	bl	1d90 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    7844:	7862      	ldrb	r2, [r4, #1]
    7846:	9204      	str	r2, [sp, #16]
    7848:	78a2      	ldrb	r2, [r4, #2]
    784a:	9203      	str	r2, [sp, #12]
    784c:	78e2      	ldrb	r2, [r4, #3]
    784e:	9202      	str	r2, [sp, #8]
    7850:	7922      	ldrb	r2, [r4, #4]
    7852:	9201      	str	r2, [sp, #4]
    7854:	7962      	ldrb	r2, [r4, #5]
    7856:	9200      	str	r2, [sp, #0]
    7858:	79a3      	ldrb	r3, [r4, #6]
    785a:	9505      	str	r5, [sp, #20]
    785c:	4a0a      	ldr	r2, [pc, #40]	; (7888 <bt_addr_le_to_str.constprop.43+0x64>)
    785e:	211b      	movs	r1, #27
    7860:	4630      	mov	r0, r6
    7862:	f7f9 fa9b 	bl	d9c <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    7866:	b00a      	add	sp, #40	; 0x28
    7868:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    786a:	4908      	ldr	r1, [pc, #32]	; (788c <bt_addr_le_to_str.constprop.43+0x68>)
    786c:	e7e7      	b.n	783e <bt_addr_le_to_str.constprop.43+0x1a>
		strcpy(type, "public id");
    786e:	4908      	ldr	r1, [pc, #32]	; (7890 <bt_addr_le_to_str.constprop.43+0x6c>)
    7870:	e7e5      	b.n	783e <bt_addr_le_to_str.constprop.43+0x1a>
		strcpy(type, "random id");
    7872:	4908      	ldr	r1, [pc, #32]	; (7894 <bt_addr_le_to_str.constprop.43+0x70>)
    7874:	e7e3      	b.n	783e <bt_addr_le_to_str.constprop.43+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    7876:	4a08      	ldr	r2, [pc, #32]	; (7898 <bt_addr_le_to_str.constprop.43+0x74>)
    7878:	210a      	movs	r1, #10
    787a:	4628      	mov	r0, r5
    787c:	f7f9 fa8e 	bl	d9c <snprintk>
    7880:	e7e0      	b.n	7844 <bt_addr_le_to_str.constprop.43+0x20>
    7882:	bf00      	nop
    7884:	0000b28f 	.word	0x0000b28f
    7888:	0000b2b8 	.word	0x0000b2b8
    788c:	0000b296 	.word	0x0000b296
    7890:	0000b29d 	.word	0x0000b29d
    7894:	0000b2a7 	.word	0x0000b2a7
    7898:	0000b2b1 	.word	0x0000b2b1

0000789c <le_adv_ext_report.isra.38.part.39>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    789c:	b510      	push	{r4, lr}
		if (!p->ext_hdr_len) {
    789e:	7883      	ldrb	r3, [r0, #2]
    78a0:	069a      	lsls	r2, r3, #26
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    78a2:	b08a      	sub	sp, #40	; 0x28
		if (!p->ext_hdr_len) {
    78a4:	d013      	beq.n	78ce <le_adv_ext_report.isra.38.part.39+0x32>
		if (h->adv_addr) {
    78a6:	78c3      	ldrb	r3, [r0, #3]
    78a8:	07db      	lsls	r3, r3, #31
    78aa:	d510      	bpl.n	78ce <le_adv_ext_report.isra.38.part.39+0x32>
			addr.type = adv->tx_addr;
    78ac:	4601      	mov	r1, r0
    78ae:	ac0a      	add	r4, sp, #40	; 0x28
    78b0:	f811 3b04 	ldrb.w	r3, [r1], #4
    78b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    78b8:	f804 3d24 	strb.w	r3, [r4, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    78bc:	2206      	movs	r2, #6
    78be:	f10d 0005 	add.w	r0, sp, #5
    78c2:	f7fa fa8c 	bl	1dde <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    78c6:	a903      	add	r1, sp, #12
    78c8:	4620      	mov	r0, r4
    78ca:	f7ff ffab 	bl	7824 <bt_addr_le_to_str.constprop.43>
}
    78ce:	b00a      	add	sp, #40	; 0x28
    78d0:	bd10      	pop	{r4, pc}

000078d2 <sys_get_le64>:
{
    78d2:	4603      	mov	r3, r0
}
    78d4:	6800      	ldr	r0, [r0, #0]
    78d6:	6859      	ldr	r1, [r3, #4]
    78d8:	4770      	bx	lr
	...

000078dc <hci_cmd_handle>:
{
    78dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    78de:	8981      	ldrh	r1, [r0, #12]
{
    78e0:	b099      	sub	sp, #100	; 0x64
	struct net_buf *evt = NULL;
    78e2:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    78e4:	2902      	cmp	r1, #2
{
    78e6:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    78e8:	950d      	str	r5, [sp, #52]	; 0x34
	if (cmd->len < sizeof(*chdr)) {
    78ea:	d802      	bhi.n	78f2 <hci_cmd_handle+0x16>
		return NULL;
    78ec:	2000      	movs	r0, #0
}
    78ee:	b019      	add	sp, #100	; 0x64
    78f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    78f2:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    78f4:	4ec5      	ldr	r6, [pc, #788]	; (7c0c <hci_cmd_handle+0x330>)
    78f6:	781a      	ldrb	r2, [r3, #0]
    78f8:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    78fa:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    78fc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    7900:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    7902:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    7904:	d8f2      	bhi.n	78ec <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    7906:	2103      	movs	r1, #3
    7908:	f104 0008 	add.w	r0, r4, #8
    790c:	f001 fcb7 	bl	927e <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    7910:	8833      	ldrh	r3, [r6, #0]
    7912:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    7916:	0a9b      	lsrs	r3, r3, #10
    7918:	2b04      	cmp	r3, #4
    791a:	d063      	beq.n	79e4 <hci_cmd_handle+0x108>
    791c:	d807      	bhi.n	792e <hci_cmd_handle+0x52>
    791e:	2b03      	cmp	r3, #3
    7920:	d024      	beq.n	796c <hci_cmd_handle+0x90>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    7922:	2101      	movs	r1, #1
    7924:	a80d      	add	r0, sp, #52	; 0x34
    7926:	f7ff ff11 	bl	774c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    792a:	2301      	movs	r3, #1
    792c:	e1cc      	b.n	7cc8 <hci_cmd_handle+0x3ec>
	switch (BT_OGF(_opcode)) {
    792e:	2b08      	cmp	r3, #8
    7930:	f000 80d9 	beq.w	7ae6 <hci_cmd_handle+0x20a>
    7934:	2b3f      	cmp	r3, #63	; 0x3f
    7936:	d1f4      	bne.n	7922 <hci_cmd_handle+0x46>
	switch (ocf) {
    7938:	3a01      	subs	r2, #1
    793a:	2a09      	cmp	r2, #9
    793c:	d8f1      	bhi.n	7922 <hci_cmd_handle+0x46>
    793e:	a301      	add	r3, pc, #4	; (adr r3, 7944 <hci_cmd_handle+0x68>)
    7940:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    7944:	00007ccd 	.word	0x00007ccd
    7948:	00007cfb 	.word	0x00007cfb
    794c:	00007d23 	.word	0x00007d23
    7950:	00007923 	.word	0x00007923
    7954:	00007923 	.word	0x00007923
    7958:	00007d67 	.word	0x00007d67
    795c:	00007923 	.word	0x00007923
    7960:	00007d39 	.word	0x00007d39
    7964:	00007d71 	.word	0x00007d71
    7968:	00007de1 	.word	0x00007de1
	switch (ocf) {
    796c:	2a03      	cmp	r2, #3
    796e:	d014      	beq.n	799a <hci_cmd_handle+0xbe>
    7970:	d808      	bhi.n	7984 <hci_cmd_handle+0xa8>
    7972:	2a01      	cmp	r2, #1
    7974:	d1d5      	bne.n	7922 <hci_cmd_handle+0x46>
	event_mask = sys_get_le64(cmd->events);
    7976:	68a0      	ldr	r0, [r4, #8]
    7978:	f7ff ffab 	bl	78d2 <sys_get_le64>
    797c:	4ba4      	ldr	r3, [pc, #656]	; (7c10 <hci_cmd_handle+0x334>)
    797e:	e9c3 0100 	strd	r0, r1, [r3]
    7982:	e003      	b.n	798c <hci_cmd_handle+0xb0>
	switch (ocf) {
    7984:	2a2d      	cmp	r2, #45	; 0x2d
    7986:	d017      	beq.n	79b8 <hci_cmd_handle+0xdc>
    7988:	2a63      	cmp	r2, #99	; 0x63
    798a:	d1ca      	bne.n	7922 <hci_cmd_handle+0x46>
		ccst = cmd_complete(evt, sizeof(*ccst));
    798c:	2101      	movs	r1, #1
    798e:	a80d      	add	r0, sp, #52	; 0x34
    7990:	f7ff fedc 	bl	774c <cmd_complete>
		ccst->status = 0x00;
    7994:	7005      	strb	r5, [r0, #0]
	return evt;
    7996:	980d      	ldr	r0, [sp, #52]	; 0x34
    7998:	e7a9      	b.n	78ee <hci_cmd_handle+0x12>
	event_mask = DEFAULT_EVENT_MASK;
    799a:	4b9d      	ldr	r3, [pc, #628]	; (7c10 <hci_cmd_handle+0x334>)
    799c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    79a0:	f641 71ff 	movw	r1, #8191	; 0x1fff
    79a4:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    79a8:	4b9a      	ldr	r3, [pc, #616]	; (7c14 <hci_cmd_handle+0x338>)
    79aa:	201f      	movs	r0, #31
    79ac:	2100      	movs	r1, #0
    79ae:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    79b2:	f7ff f9ed 	bl	6d90 <ll_reset>
    79b6:	e7e9      	b.n	798c <hci_cmd_handle+0xb0>
		read_tx_power_level(cmd, evt);
    79b8:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    79ba:	2104      	movs	r1, #4
    79bc:	a80d      	add	r0, sp, #52	; 0x34
	handle = sys_le16_to_cpu(cmd->handle);
    79be:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    79c0:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    79c2:	f7ff fec3 	bl	774c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    79c6:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    79c8:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    79ca:	1cc2      	adds	r2, r0, #3
    79cc:	4639      	mov	r1, r7
    79ce:	4630      	mov	r0, r6
    79d0:	f7ff fa6c 	bl	6eac <ll_tx_pwr_lvl_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    79d4:	2800      	cmp	r0, #0
    79d6:	bf14      	ite	ne
    79d8:	2302      	movne	r3, #2
    79da:	2300      	moveq	r3, #0
    79dc:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    79de:	f8a4 5001 	strh.w	r5, [r4, #1]
    79e2:	e7d8      	b.n	7996 <hci_cmd_handle+0xba>
	switch (ocf) {
    79e4:	3a01      	subs	r2, #1
    79e6:	2a08      	cmp	r2, #8
    79e8:	d89b      	bhi.n	7922 <hci_cmd_handle+0x46>
    79ea:	a301      	add	r3, pc, #4	; (adr r3, 79f0 <hci_cmd_handle+0x114>)
    79ec:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    79f0:	00007a15 	.word	0x00007a15
    79f4:	00007a3f 	.word	0x00007a3f
    79f8:	00007ab3 	.word	0x00007ab3
    79fc:	00007923 	.word	0x00007923
    7a00:	00007923 	.word	0x00007923
    7a04:	00007923 	.word	0x00007923
    7a08:	00007923 	.word	0x00007923
    7a0c:	00007923 	.word	0x00007923
    7a10:	00007acf 	.word	0x00007acf
	rp = cmd_complete(evt, sizeof(*rp));
    7a14:	2109      	movs	r1, #9
    7a16:	a80d      	add	r0, sp, #52	; 0x34
    7a18:	f7ff fe98 	bl	774c <cmd_complete>
	rp->status = 0x00;
    7a1c:	2300      	movs	r3, #0
    7a1e:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    7a20:	7083      	strb	r3, [r0, #2]
    7a22:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    7a24:	f06f 030e 	mvn.w	r3, #14
    7a28:	7143      	strb	r3, [r0, #5]
    7a2a:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    7a2c:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    7a2e:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    7a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    7a34:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    7a36:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    7a38:	71c3      	strb	r3, [r0, #7]
    7a3a:	7203      	strb	r3, [r0, #8]
    7a3c:	e7ab      	b.n	7996 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    7a3e:	2141      	movs	r1, #65	; 0x41
    7a40:	a80d      	add	r0, sp, #52	; 0x34
    7a42:	f7ff fe83 	bl	774c <cmd_complete>
	rp->status = 0x00;
    7a46:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    7a48:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    7a4a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    7a4c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    7a50:	f7fa f9f2 	bl	1e38 <memset>
	rp->commands[2] |= BIT(7);
    7a54:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[27] |= BIT(6) | BIT(7);
    7a56:	7f21      	ldrb	r1, [r4, #28]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    7a58:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[2] |= BIT(7);
    7a5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7a5e:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    7a60:	79a3      	ldrb	r3, [r4, #6]
    7a62:	f063 033f 	orn	r3, r3, #63	; 0x3f
    7a66:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    7a68:	7ae3      	ldrb	r3, [r4, #11]
    7a6a:	f043 0304 	orr.w	r3, r3, #4
    7a6e:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    7a70:	7be3      	ldrb	r3, [r4, #15]
    7a72:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    7a76:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    7a78:	7c23      	ldrb	r3, [r4, #16]
    7a7a:	f043 0302 	orr.w	r3, r3, #2
    7a7e:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    7a80:	7de3      	ldrb	r3, [r4, #23]
    7a82:	f043 0304 	orr.w	r3, r3, #4
    7a86:	75e3      	strb	r3, [r4, #23]
	rp->commands[26] |= BIT(6) | BIT(7);
    7a88:	7ee3      	ldrb	r3, [r4, #27]
	rp->commands[27] |= BIT(6) | BIT(7);
    7a8a:	f061 013c 	orn	r1, r1, #60	; 0x3c
	rp->commands[26] |= BIT(0) | BIT(1);
    7a8e:	f063 033c 	orn	r3, r3, #60	; 0x3c
	rp->commands[27] |= BIT(6) | BIT(7);
    7a92:	7721      	strb	r1, [r4, #28]
	rp->commands[26] |= BIT(0) | BIT(1);
    7a94:	76e3      	strb	r3, [r4, #27]
	rp->commands[28] |= BIT(3);
    7a96:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[38] |= BIT(7);
    7a98:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    7a9c:	f041 0108 	orr.w	r1, r1, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    7aa0:	f062 0208 	orn	r2, r2, #8
	rp->commands[38] |= BIT(7);
    7aa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    7aa8:	7761      	strb	r1, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    7aaa:	76a2      	strb	r2, [r4, #26]
	rp->commands[38] |= BIT(7);
    7aac:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    7ab0:	e771      	b.n	7996 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    7ab2:	2109      	movs	r1, #9
    7ab4:	a80d      	add	r0, sp, #52	; 0x34
    7ab6:	f7ff fe49 	bl	774c <cmd_complete>
	rp->status = 0x00;
    7aba:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    7abc:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    7abe:	2208      	movs	r2, #8
	rp->status = 0x00;
    7ac0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    7ac4:	f7fa f9b8 	bl	1e38 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    7ac8:	2360      	movs	r3, #96	; 0x60
    7aca:	7163      	strb	r3, [r4, #5]
    7acc:	e763      	b.n	7996 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    7ace:	2107      	movs	r1, #7
    7ad0:	a80d      	add	r0, sp, #52	; 0x34
    7ad2:	f7ff fe3b 	bl	774c <cmd_complete>
	rp->status = 0x00;
    7ad6:	4601      	mov	r1, r0
    7ad8:	2300      	movs	r3, #0
    7ada:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    7ade:	4618      	mov	r0, r3
    7ae0:	f7fb fd78 	bl	35d4 <ll_addr_get>
    7ae4:	e757      	b.n	7996 <hci_cmd_handle+0xba>
	switch (ocf) {
    7ae6:	2a0a      	cmp	r2, #10
    7ae8:	f000 80e1 	beq.w	7cae <hci_cmd_handle+0x3d2>
    7aec:	d827      	bhi.n	7b3e <hci_cmd_handle+0x262>
    7aee:	2a05      	cmp	r2, #5
    7af0:	f000 8081 	beq.w	7bf6 <hci_cmd_handle+0x31a>
    7af4:	d812      	bhi.n	7b1c <hci_cmd_handle+0x240>
    7af6:	2a02      	cmp	r2, #2
    7af8:	d05f      	beq.n	7bba <hci_cmd_handle+0x2de>
    7afa:	2a03      	cmp	r2, #3
    7afc:	d069      	beq.n	7bd2 <hci_cmd_handle+0x2f6>
    7afe:	2a01      	cmp	r2, #1
    7b00:	f47f af0f 	bne.w	7922 <hci_cmd_handle+0x46>
	le_event_mask = sys_get_le64(cmd->events);
    7b04:	68a0      	ldr	r0, [r4, #8]
    7b06:	f7ff fee4 	bl	78d2 <sys_get_le64>
    7b0a:	4b42      	ldr	r3, [pc, #264]	; (7c14 <hci_cmd_handle+0x338>)
    7b0c:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    7b10:	2101      	movs	r1, #1
    7b12:	a80d      	add	r0, sp, #52	; 0x34
    7b14:	f7ff fe1a 	bl	774c <cmd_complete>
	ccst->status = 0x00;
    7b18:	2300      	movs	r3, #0
    7b1a:	e0d5      	b.n	7cc8 <hci_cmd_handle+0x3ec>
	switch (ocf) {
    7b1c:	2a07      	cmp	r2, #7
    7b1e:	f000 8157 	beq.w	7dd0 <hci_cmd_handle+0x4f4>
    7b22:	f0c0 80a6 	bcc.w	7c72 <hci_cmd_handle+0x396>
    7b26:	2a08      	cmp	r2, #8
    7b28:	f000 80bb 	beq.w	7ca2 <hci_cmd_handle+0x3c6>
    7b2c:	2a09      	cmp	r2, #9
    7b2e:	f47f aef8 	bne.w	7922 <hci_cmd_handle+0x46>
		le_set_scan_rsp_data(cmd, evt);
    7b32:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    7b34:	1c59      	adds	r1, r3, #1
    7b36:	7818      	ldrb	r0, [r3, #0]
    7b38:	f000 fc38 	bl	83ac <ll_scan_data_set>
    7b3c:	e7e8      	b.n	7b10 <hci_cmd_handle+0x234>
	switch (ocf) {
    7b3e:	2a12      	cmp	r2, #18
    7b40:	d077      	beq.n	7c32 <hci_cmd_handle+0x356>
    7b42:	d810      	bhi.n	7b66 <hci_cmd_handle+0x28a>
    7b44:	2a10      	cmp	r2, #16
    7b46:	d067      	beq.n	7c18 <hci_cmd_handle+0x33c>
    7b48:	d86f      	bhi.n	7c2a <hci_cmd_handle+0x34e>
    7b4a:	2a0f      	cmp	r2, #15
    7b4c:	f47f aee9 	bne.w	7922 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    7b50:	2102      	movs	r1, #2
    7b52:	a80d      	add	r0, sp, #52	; 0x34
    7b54:	f7ff fdfa 	bl	774c <cmd_complete>
	rp->status = 0x00;
    7b58:	2300      	movs	r3, #0
    7b5a:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    7b5c:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    7b5e:	f000 fcd7 	bl	8510 <ll_wl_size_get>
    7b62:	7060      	strb	r0, [r4, #1]
    7b64:	e717      	b.n	7996 <hci_cmd_handle+0xba>
	switch (ocf) {
    7b66:	2a18      	cmp	r2, #24
    7b68:	d067      	beq.n	7c3a <hci_cmd_handle+0x35e>
    7b6a:	d815      	bhi.n	7b98 <hci_cmd_handle+0x2bc>
    7b6c:	2a17      	cmp	r2, #23
    7b6e:	f47f aed8 	bne.w	7922 <hci_cmd_handle+0x46>
		le_encrypt(cmd, evt);
    7b72:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    7b74:	2300      	movs	r3, #0
    7b76:	aa0e      	add	r2, sp, #56	; 0x38
    7b78:	f100 0110 	add.w	r1, r0, #16
    7b7c:	f000 fdd8 	bl	8730 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    7b80:	2111      	movs	r1, #17
    7b82:	a80d      	add	r0, sp, #52	; 0x34
    7b84:	f7ff fde2 	bl	774c <cmd_complete>
	rp->status = 0x00;
    7b88:	2300      	movs	r3, #0
    7b8a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    7b8e:	2210      	movs	r2, #16
    7b90:	a90e      	add	r1, sp, #56	; 0x38
	memcpy(rp->info, build_info, sizeof(build_info));
    7b92:	f7fa f924 	bl	1dde <memcpy>
    7b96:	e6fe      	b.n	7996 <hci_cmd_handle+0xba>
	switch (ocf) {
    7b98:	2a1c      	cmp	r2, #28
    7b9a:	d059      	beq.n	7c50 <hci_cmd_handle+0x374>
    7b9c:	2a4b      	cmp	r2, #75	; 0x4b
    7b9e:	f47f aec0 	bne.w	7922 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    7ba2:	2103      	movs	r1, #3
    7ba4:	a80d      	add	r0, sp, #52	; 0x34
    7ba6:	f7ff fdd1 	bl	774c <cmd_complete>
	rp->status = 0x00;
    7baa:	4601      	mov	r1, r0
    7bac:	2300      	movs	r3, #0
    7bae:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    7bb2:	3001      	adds	r0, #1
    7bb4:	f7fb fd44 	bl	3640 <ll_tx_pwr_get>
    7bb8:	e6ed      	b.n	7996 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    7bba:	2104      	movs	r1, #4
    7bbc:	a80d      	add	r0, sp, #52	; 0x34
    7bbe:	f7ff fdc5 	bl	774c <cmd_complete>
	rp->status = 0x00;
    7bc2:	2300      	movs	r3, #0
    7bc4:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    7bc6:	221b      	movs	r2, #27
    7bc8:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    7bca:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    7bcc:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    7bce:	70c3      	strb	r3, [r0, #3]
    7bd0:	e6e1      	b.n	7996 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    7bd2:	2109      	movs	r1, #9
    7bd4:	a80d      	add	r0, sp, #52	; 0x34
    7bd6:	f7ff fdb9 	bl	774c <cmd_complete>
	rp->status = 0x00;
    7bda:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    7bdc:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    7bde:	2208      	movs	r2, #8
	rp->status = 0x00;
    7be0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    7be4:	f7fa f928 	bl	1e38 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    7be8:	230c      	movs	r3, #12
    7bea:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    7bec:	2340      	movs	r3, #64	; 0x40
    7bee:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    7bf0:	2301      	movs	r3, #1
    7bf2:	70e3      	strb	r3, [r4, #3]
    7bf4:	e6cf      	b.n	7996 <hci_cmd_handle+0xba>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    7bf6:	68a1      	ldr	r1, [r4, #8]
    7bf8:	2001      	movs	r0, #1
    7bfa:	f7fb fd05 	bl	3608 <ll_addr_set>
	status = ll_wl_add(&cmd->addr);
    7bfe:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    7c00:	2101      	movs	r1, #1
    7c02:	a80d      	add	r0, sp, #52	; 0x34
    7c04:	f7ff fda2 	bl	774c <cmd_complete>
	ccst->status = status;
    7c08:	7004      	strb	r4, [r0, #0]
    7c0a:	e6c4      	b.n	7996 <hci_cmd_handle+0xba>
    7c0c:	20000dc8 	.word	0x20000dc8
    7c10:	20002ec8 	.word	0x20002ec8
    7c14:	20002ed0 	.word	0x20002ed0
	ccst = cmd_complete(evt, sizeof(*ccst));
    7c18:	2101      	movs	r1, #1
    7c1a:	a80d      	add	r0, sp, #52	; 0x34
    7c1c:	f7ff fd96 	bl	774c <cmd_complete>
    7c20:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    7c22:	f000 fc77 	bl	8514 <ll_wl_clear>
    7c26:	7020      	strb	r0, [r4, #0]
    7c28:	e6b5      	b.n	7996 <hci_cmd_handle+0xba>
	status = ll_wl_add(&cmd->addr);
    7c2a:	68a0      	ldr	r0, [r4, #8]
    7c2c:	f000 fc88 	bl	8540 <ll_wl_add>
    7c30:	e7e5      	b.n	7bfe <hci_cmd_handle+0x322>
	status = ll_wl_remove(&cmd->addr);
    7c32:	68a0      	ldr	r0, [r4, #8]
    7c34:	f000 fcbc 	bl	85b0 <ll_wl_remove>
    7c38:	e7e1      	b.n	7bfe <hci_cmd_handle+0x322>
	rp = cmd_complete(evt, sizeof(*rp));
    7c3a:	2109      	movs	r1, #9
    7c3c:	a80d      	add	r0, sp, #52	; 0x34
    7c3e:	f7ff fd85 	bl	774c <cmd_complete>
	rp->status = 0x00;
    7c42:	2300      	movs	r3, #0
    7c44:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    7c48:	2108      	movs	r1, #8
    7c4a:	f000 fa4b 	bl	80e4 <bt_rand>
    7c4e:	e6a2      	b.n	7996 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    7c50:	2109      	movs	r1, #9
    7c52:	a80d      	add	r0, sp, #52	; 0x34
    7c54:	f7ff fd7a 	bl	774c <cmd_complete>
	rp->status = 0x00;
    7c58:	4601      	mov	r1, r0
    7c5a:	2200      	movs	r2, #0
	rp = cmd_complete(evt, sizeof(*rp));
    7c5c:	4604      	mov	r4, r0
	rp->status = 0x00;
    7c5e:	f801 2b01 	strb.w	r2, [r1], #1
	sys_put_le32(val, dst);
    7c62:	2003      	movs	r0, #3
    7c64:	f7ff fd5e 	bl	7724 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    7c68:	1d61      	adds	r1, r4, #5
    7c6a:	4610      	mov	r0, r2
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    7c6c:	f7ff fd5a 	bl	7724 <sys_put_le32>
    7c70:	e691      	b.n	7996 <hci_cmd_handle+0xba>
		le_set_adv_param(cmd, evt);
    7c72:	68a0      	ldr	r0, [r4, #8]
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    7c74:	2100      	movs	r1, #0
    7c76:	7903      	ldrb	r3, [r0, #4]
    7c78:	8802      	ldrh	r2, [r0, #0]
    7c7a:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
    7c7e:	e9cd 1107 	strd	r1, r1, [sp, #28]
    7c82:	e9cd 1105 	strd	r1, r1, [sp, #20]
    7c86:	7b84      	ldrb	r4, [r0, #14]
    7c88:	9404      	str	r4, [sp, #16]
    7c8a:	7b44      	ldrb	r4, [r0, #13]
    7c8c:	9403      	str	r4, [sp, #12]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    7c8e:	1dc4      	adds	r4, r0, #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    7c90:	9402      	str	r4, [sp, #8]
    7c92:	7984      	ldrb	r4, [r0, #6]
    7c94:	9401      	str	r4, [sp, #4]
    7c96:	7940      	ldrb	r0, [r0, #5]
    7c98:	9000      	str	r0, [sp, #0]
    7c9a:	4608      	mov	r0, r1
    7c9c:	f000 fa3c 	bl	8118 <ll_adv_params_set>
    7ca0:	e7ad      	b.n	7bfe <hci_cmd_handle+0x322>
		le_set_adv_data(cmd, evt);
    7ca2:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    7ca4:	1c59      	adds	r1, r3, #1
    7ca6:	7818      	ldrb	r0, [r3, #0]
    7ca8:	f000 fb28 	bl	82fc <ll_adv_data_set>
    7cac:	e730      	b.n	7b10 <hci_cmd_handle+0x234>
	status = ll_adv_enable(cmd->enable);
    7cae:	68a3      	ldr	r3, [r4, #8]
    7cb0:	7818      	ldrb	r0, [r3, #0]
    7cb2:	f000 fbc1 	bl	8438 <ll_adv_enable>
	ccst = cmd_complete(evt, sizeof(*ccst));
    7cb6:	2101      	movs	r1, #1
	status = ll_adv_enable(cmd->enable);
    7cb8:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    7cba:	a80d      	add	r0, sp, #52	; 0x34
    7cbc:	f7ff fd46 	bl	774c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    7cc0:	2c00      	cmp	r4, #0
    7cc2:	bf14      	ite	ne
    7cc4:	230c      	movne	r3, #12
    7cc6:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    7cc8:	7003      	strb	r3, [r0, #0]
    7cca:	e664      	b.n	7996 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    7ccc:	210d      	movs	r1, #13
    7cce:	a80d      	add	r0, sp, #52	; 0x34
    7cd0:	f7ff fd3c 	bl	774c <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    7cd4:	2202      	movs	r2, #2
    7cd6:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    7cd8:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    7cda:	2201      	movs	r2, #1
    7cdc:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    7cde:	220c      	movs	r2, #12
	rp->status = 0x00;
    7ce0:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    7ce2:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    7ce4:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    7ce6:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    7ce8:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    7cea:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    7cec:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    7cee:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    7cf0:	7242      	strb	r2, [r0, #9]
    7cf2:	7283      	strb	r3, [r0, #10]
    7cf4:	72c3      	strb	r3, [r0, #11]
    7cf6:	7303      	strb	r3, [r0, #12]
    7cf8:	e64d      	b.n	7996 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    7cfa:	2141      	movs	r1, #65	; 0x41
    7cfc:	a80d      	add	r0, sp, #52	; 0x34
    7cfe:	f7ff fd25 	bl	774c <cmd_complete>
	rp->status = 0x00;
    7d02:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    7d04:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    7d06:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    7d08:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    7d0c:	f7fa f894 	bl	1e38 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    7d10:	7863      	ldrb	r3, [r4, #1]
    7d12:	f063 0358 	orn	r3, r3, #88	; 0x58
    7d16:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    7d18:	78a3      	ldrb	r3, [r4, #2]
    7d1a:	f043 0303 	orr.w	r3, r3, #3
    7d1e:	70a3      	strb	r3, [r4, #2]
    7d20:	e639      	b.n	7996 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    7d22:	2109      	movs	r1, #9
    7d24:	a80d      	add	r0, sp, #52	; 0x34
    7d26:	f7ff fd11 	bl	774c <cmd_complete>
	rp->status = 0x00;
    7d2a:	2100      	movs	r1, #0
    7d2c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    7d30:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    7d32:	f7fa f881 	bl	1e38 <memset>
    7d36:	e62e      	b.n	7996 <hci_cmd_handle+0xba>
	const char build_info[] = HCI_VS_BUILD_INFO;
    7d38:	4b5c      	ldr	r3, [pc, #368]	; (7eac <hci_cmd_handle+0x5d0>)
    7d3a:	aa0e      	add	r2, sp, #56	; 0x38
    7d3c:	f103 0628 	add.w	r6, r3, #40	; 0x28
    7d40:	4615      	mov	r5, r2
    7d42:	6818      	ldr	r0, [r3, #0]
    7d44:	6859      	ldr	r1, [r3, #4]
    7d46:	4614      	mov	r4, r2
    7d48:	c403      	stmia	r4!, {r0, r1}
    7d4a:	3308      	adds	r3, #8
    7d4c:	42b3      	cmp	r3, r6
    7d4e:	4622      	mov	r2, r4
    7d50:	d1f7      	bne.n	7d42 <hci_cmd_handle+0x466>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    7d52:	2129      	movs	r1, #41	; 0x29
    7d54:	a80d      	add	r0, sp, #52	; 0x34
    7d56:	f7ff fcf9 	bl	774c <cmd_complete>
	rp->status = 0x00;
    7d5a:	2300      	movs	r3, #0
    7d5c:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    7d60:	2228      	movs	r2, #40	; 0x28
    7d62:	4629      	mov	r1, r5
    7d64:	e715      	b.n	7b92 <hci_cmd_handle+0x2b6>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    7d66:	68a1      	ldr	r1, [r4, #8]
    7d68:	2000      	movs	r0, #0
    7d6a:	f7fb fc4d 	bl	3608 <ll_addr_set>
    7d6e:	e6cf      	b.n	7b10 <hci_cmd_handle+0x234>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    7d70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7d74:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    7d78:	3201      	adds	r2, #1
    7d7a:	d106      	bne.n	7d8a <hci_cmd_handle+0x4ae>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    7d7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    7d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    7d84:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    7d86:	4293      	cmp	r3, r2
    7d88:	d022      	beq.n	7dd0 <hci_cmd_handle+0x4f4>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    7d8a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    7d8e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    7d92:	07db      	lsls	r3, r3, #31
    7d94:	d51c      	bpl.n	7dd0 <hci_cmd_handle+0x4f4>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    7d96:	2118      	movs	r1, #24
    7d98:	a80d      	add	r0, sp, #52	; 0x34
    7d9a:	f7ff fcd7 	bl	774c <cmd_complete>
		rp->status = 0x00;
    7d9e:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    7da0:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    7da2:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    7da4:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    7da6:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    7da8:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    7dac:	1ca1      	adds	r1, r4, #2
    7dae:	f7ff fcb9 	bl	7724 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1] | 0x0200, &addr->bdaddr.val[4]);
    7db2:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    7db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    7dba:	b29b      	uxth	r3, r3
	dst[0] = val;
    7dbc:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    7dbe:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    7dc0:	f063 033f 	orn	r3, r3, #63	; 0x3f
    7dc4:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    7dc6:	2210      	movs	r2, #16
    7dc8:	4631      	mov	r1, r6
    7dca:	f104 0008 	add.w	r0, r4, #8
    7dce:	e7b0      	b.n	7d32 <hci_cmd_handle+0x456>
	rp = cmd_complete(evt, sizeof(*rp));
    7dd0:	2102      	movs	r1, #2
    7dd2:	a80d      	add	r0, sp, #52	; 0x34
    7dd4:	f7ff fcba 	bl	774c <cmd_complete>
	rp->status = 0x00;
    7dd8:	2300      	movs	r3, #0
    7dda:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    7ddc:	7043      	strb	r3, [r0, #1]
    7dde:	e5da      	b.n	7996 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    7de0:	2121      	movs	r1, #33	; 0x21
    7de2:	a80d      	add	r0, sp, #52	; 0x34
    7de4:	f7ff fcb2 	bl	774c <cmd_complete>
	rp->status = 0x00;
    7de8:	4603      	mov	r3, r0
    7dea:	2200      	movs	r2, #0
    7dec:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    7df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    7df4:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    7df6:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    7dfa:	3101      	adds	r1, #1
    7dfc:	d04b      	beq.n	7e96 <hci_cmd_handle+0x5ba>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    7dfe:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    7e02:	3101      	adds	r1, #1
    7e04:	d047      	beq.n	7e96 <hci_cmd_handle+0x5ba>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    7e06:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    7e0a:	3101      	adds	r1, #1
    7e0c:	d043      	beq.n	7e96 <hci_cmd_handle+0x5ba>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    7e0e:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    7e12:	3101      	adds	r1, #1
    7e14:	d03f      	beq.n	7e96 <hci_cmd_handle+0x5ba>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    7e16:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    7e1a:	4619      	mov	r1, r3
    7e1c:	f7ff fc82 	bl	7724 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    7e20:	1d61      	adds	r1, r4, #5
    7e22:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    7e26:	f7ff fc7d 	bl	7724 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    7e2a:	f104 0109 	add.w	r1, r4, #9
    7e2e:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    7e32:	f7ff fc77 	bl	7724 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    7e36:	f104 010d 	add.w	r1, r4, #13
    7e3a:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    7e3e:	f7ff fc71 	bl	7724 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    7e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7e46:	f104 0311 	add.w	r3, r4, #17
    7e4a:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
    7e4e:	3101      	adds	r1, #1
    7e50:	d027      	beq.n	7ea2 <hci_cmd_handle+0x5c6>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    7e52:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    7e56:	3101      	adds	r1, #1
    7e58:	d023      	beq.n	7ea2 <hci_cmd_handle+0x5c6>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    7e5a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    7e5e:	3101      	adds	r1, #1
    7e60:	d01f      	beq.n	7ea2 <hci_cmd_handle+0x5c6>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    7e62:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    7e66:	3101      	adds	r1, #1
    7e68:	d01b      	beq.n	7ea2 <hci_cmd_handle+0x5c6>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    7e6a:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    7e6e:	4619      	mov	r1, r3
    7e70:	f7ff fc58 	bl	7724 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    7e74:	f104 0115 	add.w	r1, r4, #21
    7e78:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    7e7c:	f7ff fc52 	bl	7724 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    7e80:	f104 0119 	add.w	r1, r4, #25
    7e84:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    7e88:	f7ff fc4c 	bl	7724 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    7e8c:	f104 011d 	add.w	r1, r4, #29
    7e90:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    7e94:	e6ea      	b.n	7c6c <hci_cmd_handle+0x390>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    7e96:	2210      	movs	r2, #16
    7e98:	2100      	movs	r1, #0
    7e9a:	4618      	mov	r0, r3
    7e9c:	f7f9 ffcc 	bl	1e38 <memset>
    7ea0:	e7cf      	b.n	7e42 <hci_cmd_handle+0x566>
		memset(rp->er, 0x00, sizeof(rp->er));
    7ea2:	2210      	movs	r2, #16
    7ea4:	2100      	movs	r1, #0
    7ea6:	4618      	mov	r0, r3
    7ea8:	e743      	b.n	7d32 <hci_cmd_handle+0x456>
    7eaa:	bf00      	nop
    7eac:	0000b2db 	.word	0x0000b2db

00007eb0 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    7eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    7eb4:	7903      	ldrb	r3, [r0, #4]
    7eb6:	2b01      	cmp	r3, #1
{
    7eb8:	b08a      	sub	sp, #40	; 0x28
    7eba:	4604      	mov	r4, r0
    7ebc:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    7ebe:	f100 0808 	add.w	r8, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    7ec2:	f000 809b 	beq.w	7ffc <hci_evt_encode+0x14c>
	switch (node_rx->hdr.type) {
    7ec6:	3b02      	subs	r3, #2
    7ec8:	2b03      	cmp	r3, #3
    7eca:	f200 80cd 	bhi.w	8068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68>
    7ece:	e8df f003 	tbb	[pc, r3]
    7ed2:	5302      	.short	0x5302
    7ed4:	5f53      	.short	0x5f53
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    7ed6:	4b67      	ldr	r3, [pc, #412]	; (8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>)
    7ed8:	9303      	str	r3, [sp, #12]
    7eda:	f64f 7304 	movw	r3, #65284	; 0xff04
    7ede:	f8ad 3010 	strh.w	r3, [sp, #16]
    7ee2:	2302      	movs	r3, #2
    7ee4:	f88d 3012 	strb.w	r3, [sp, #18]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    7ee8:	4b63      	ldr	r3, [pc, #396]	; (8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>)
    7eea:	e9d3 2300 	ldrd	r2, r3, [r3]
    7eee:	2000      	movs	r0, #0
    7ef0:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
    7ef4:	ea50 0301 	orrs.w	r3, r0, r1
    7ef8:	d03b      	beq.n	7f72 <hci_evt_encode+0xc2>
	if (!(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    7efa:	4b60      	ldr	r3, [pc, #384]	; (807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>)
    7efc:	e9d3 2300 	ldrd	r2, r3, [r3]
    7f00:	2100      	movs	r1, #0
    7f02:	f002 0002 	and.w	r0, r2, #2
    7f06:	ea50 0301 	orrs.w	r3, r0, r1
    7f0a:	d032      	beq.n	7f72 <hci_evt_encode+0xc2>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    7f0c:	7a22      	ldrb	r2, [r4, #8]
    7f0e:	7a63      	ldrb	r3, [r4, #9]
    7f10:	f002 020f 	and.w	r2, r2, #15
    7f14:	2a01      	cmp	r2, #1
		data_len = (adv->len - BDADDR_SIZE);
    7f16:	bf1a      	itte	ne
    7f18:	1f9e      	subne	r6, r3, #6
    7f1a:	b2f6      	uxtbne	r6, r6
		data_len = 0;
    7f1c:	2600      	moveq	r6, #0
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    7f1e:	4423      	add	r3, r4
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    7f20:	f106 020b 	add.w	r2, r6, #11
    7f24:	b2d2      	uxtb	r2, r2
    7f26:	2102      	movs	r1, #2
    7f28:	4628      	mov	r0, r5
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    7f2a:	7a9f      	ldrb	r7, [r3, #10]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    7f2c:	f7ff fc30 	bl	7790 <meta_evt>
	sep->num_reports = 1;
    7f30:	2301      	movs	r3, #1
    7f32:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    7f34:	7a23      	ldrb	r3, [r4, #8]
    7f36:	aa0a      	add	r2, sp, #40	; 0x28
    7f38:	f003 030f 	and.w	r3, r3, #15
    7f3c:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    7f3e:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    7f40:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    7f44:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    7f46:	7a23      	ldrb	r3, [r4, #8]
    7f48:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7f4c:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    7f4e:	2206      	movs	r2, #6
    7f50:	f104 010a 	add.w	r1, r4, #10
    7f54:	3003      	adds	r0, #3
    7f56:	f7f9 ff42 	bl	1dde <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    7f5a:	350a      	adds	r5, #10
	adv_info->length = data_len;
    7f5c:	f805 6c01 	strb.w	r6, [r5, #-1]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    7f60:	427f      	negs	r7, r7
    7f62:	b27f      	sxtb	r7, r7
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    7f64:	4632      	mov	r2, r6
    7f66:	f108 0108 	add.w	r1, r8, #8
    7f6a:	4628      	mov	r0, r5
    7f6c:	f7f9 ff37 	bl	1dde <memcpy>
	*prssi = rssi;
    7f70:	55af      	strb	r7, [r5, r6]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    7f72:	b00a      	add	sp, #40	; 0x28
    7f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    7f78:	7a03      	ldrb	r3, [r0, #8]
    7f7a:	f003 030f 	and.w	r3, r3, #15
    7f7e:	2b07      	cmp	r3, #7
    7f80:	d1f7      	bne.n	7f72 <hci_evt_encode+0xc2>
    7f82:	7a43      	ldrb	r3, [r0, #9]
    7f84:	2b00      	cmp	r3, #0
    7f86:	d0f4      	beq.n	7f72 <hci_evt_encode+0xc2>
    7f88:	4640      	mov	r0, r8
    7f8a:	f7ff fc87 	bl	789c <le_adv_ext_report.isra.38.part.39>
    7f8e:	e7f0      	b.n	7f72 <hci_evt_encode+0xc2>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7f90:	4b39      	ldr	r3, [pc, #228]	; (8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>)
    7f92:	e9d3 2300 	ldrd	r2, r3, [r3]
    7f96:	f100 060a 	add.w	r6, r0, #10
    7f9a:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
    7f9e:	2000      	movs	r0, #0
    7fa0:	ea50 0301 	orrs.w	r3, r0, r1
    7fa4:	d008      	beq.n	7fb8 <hci_evt_encode+0x108>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    7fa6:	4b35      	ldr	r3, [pc, #212]	; (807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>)
    7fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
    7fac:	2100      	movs	r1, #0
    7fae:	f402 2080 	and.w	r0, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7fb2:	ea50 0301 	orrs.w	r3, r0, r1
    7fb6:	d110      	bne.n	7fda <hci_evt_encode+0x12a>
		addr.type = adv->tx_addr;
    7fb8:	7a23      	ldrb	r3, [r4, #8]
    7fba:	ac0a      	add	r4, sp, #40	; 0x28
    7fbc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7fc0:	f804 3d24 	strb.w	r3, [r4, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    7fc4:	4631      	mov	r1, r6
    7fc6:	2206      	movs	r2, #6
    7fc8:	f10d 0005 	add.w	r0, sp, #5
    7fcc:	f7f9 ff07 	bl	1dde <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    7fd0:	a903      	add	r1, sp, #12
    7fd2:	4620      	mov	r0, r4
    7fd4:	f7ff fc26 	bl	7824 <bt_addr_le_to_str.constprop.43>
    7fd8:	e7cb      	b.n	7f72 <hci_evt_encode+0xc2>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    7fda:	2208      	movs	r2, #8
    7fdc:	2113      	movs	r1, #19
    7fde:	4628      	mov	r0, r5
    7fe0:	f7ff fbd6 	bl	7790 <meta_evt>
	sep->handle = 0;
    7fe4:	2300      	movs	r3, #0
    7fe6:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    7fe8:	7a23      	ldrb	r3, [r4, #8]
    7fea:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7fee:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    7ff0:	2206      	movs	r2, #6
    7ff2:	4631      	mov	r1, r6
    7ff4:	3002      	adds	r0, #2
    7ff6:	f7f9 fef2 	bl	1dde <memcpy>
    7ffa:	e7ba      	b.n	7f72 <hci_evt_encode+0xc2>
	switch (pdu_data->llctrl.opcode) {
    7ffc:	7ac1      	ldrb	r1, [r0, #11]
		encode_data_ctrl(node_rx, pdu_data, buf);
    7ffe:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->llctrl.opcode) {
    8000:	2909      	cmp	r1, #9
    8002:	d00b      	beq.n	801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>
    8004:	290c      	cmp	r1, #12
    8006:	d010      	beq.n	802a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a>
    8008:	2907      	cmp	r1, #7
    800a:	d12d      	bne.n	8068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    800c:	7b03      	ldrb	r3, [r0, #12]
    800e:	2b0e      	cmp	r3, #14
    8010:	d1af      	bne.n	7f72 <hci_evt_encode+0xc2>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    8012:	462b      	mov	r3, r5
    8014:	4632      	mov	r2, r6
    8016:	2100      	movs	r1, #0
    8018:	201a      	movs	r0, #26
    801a:	e003      	b.n	8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    801c:	462b      	mov	r3, r5
    801e:	4632      	mov	r2, r6
    8020:	4641      	mov	r1, r8
    8022:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    8024:	f7ff fbca 	bl	77bc <le_remote_feat_complete>
    8028:	e7a3      	b.n	7f72 <hci_evt_encode+0xc2>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    802a:	4b13      	ldr	r3, [pc, #76]	; (8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>)
    802c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8030:	f04f 0800 	mov.w	r8, #0
    8034:	f402 6700 	and.w	r7, r2, #2048	; 0x800
    8038:	ea57 0308 	orrs.w	r3, r7, r8
    803c:	d099      	beq.n	7f72 <hci_evt_encode+0xc2>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    803e:	2208      	movs	r2, #8
    8040:	4628      	mov	r0, r5
    8042:	f7ff fb78 	bl	7736 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8046:	2108      	movs	r1, #8
    8048:	1868      	adds	r0, r5, r1
    804a:	f001 f909 	bl	9260 <net_buf_simple_add>
	ep->status = 0x00;
    804e:	2300      	movs	r3, #0
    8050:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    8052:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    8056:	7b23      	ldrb	r3, [r4, #12]
    8058:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    805a:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    805e:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    8060:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    8064:	80c3      	strh	r3, [r0, #6]
    8066:	e784      	b.n	7f72 <hci_evt_encode+0xc2>
		LL_ASSERT(0);
    8068:	4040      	eors	r0, r0
    806a:	f380 8811 	msr	BASEPRI, r0
    806e:	f04f 0004 	mov.w	r0, #4
    8072:	df02      	svc	2
    8074:	ff030100 	.word	0xff030100
    8078:	20002ec8 	.word	0x20002ec8
    807c:	20002ed0 	.word	0x20002ed0

00008080 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8080:	7903      	ldrb	r3, [r0, #4]
    8082:	2b01      	cmp	r3, #1
    8084:	d00f      	beq.n	80a6 <hci_get_class+0x26>
    8086:	2b0a      	cmp	r3, #10
    8088:	d815      	bhi.n	80b6 <hci_get_class+0x36>
    808a:	2001      	movs	r0, #1
    808c:	fa00 f303 	lsl.w	r3, r0, r3
    8090:	f413 6fb0 	tst.w	r3, #1408	; 0x580
    8094:	d112      	bne.n	80bc <hci_get_class+0x3c>
    8096:	f013 0f3c 	tst.w	r3, #60	; 0x3c
    809a:	d110      	bne.n	80be <hci_get_class+0x3e>
    809c:	f083 0340 	eor.w	r3, r3, #64	; 0x40
    80a0:	f343 1080 	sbfx	r0, r3, #6, #1
    80a4:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    80a6:	7a03      	ldrb	r3, [r0, #8]
    80a8:	f003 0303 	and.w	r3, r3, #3
    80ac:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    80ae:	bf0c      	ite	eq
    80b0:	2002      	moveq	r0, #2
    80b2:	2003      	movne	r0, #3
    80b4:	4770      	bx	lr
			return -1;
    80b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    80ba:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    80bc:	2002      	movs	r0, #2
	}
}
    80be:	4770      	bx	lr

000080c0 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    80c0:	4b06      	ldr	r3, [pc, #24]	; (80dc <hci_init+0x1c>)
    80c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    80c6:	f641 71ff 	movw	r1, #8191	; 0x1fff
    80ca:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    80ce:	4b04      	ldr	r3, [pc, #16]	; (80e0 <hci_init+0x20>)
    80d0:	201f      	movs	r0, #31
    80d2:	2100      	movs	r1, #0
    80d4:	e9c3 0100 	strd	r0, r1, [r3]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    80d8:	4770      	bx	lr
    80da:	bf00      	nop
    80dc:	20002ec8 	.word	0x20002ec8
    80e0:	20002ed0 	.word	0x20002ed0

000080e4 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    80e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    80e6:	460c      	mov	r4, r1
    80e8:	1846      	adds	r6, r0, r1
    80ea:	1b35      	subs	r5, r6, r4
	while (len) {
    80ec:	b18c      	cbz	r4, 8112 <bt_rand+0x2e>
		u32_t v = sys_rand32_get();
    80ee:	f7f9 f88b 	bl	1208 <sys_rand32_get>

		if (len >= sizeof(v)) {
    80f2:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    80f4:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    80f6:	d907      	bls.n	8108 <bt_rand+0x24>
			memcpy(buf, &v, sizeof(v));
    80f8:	2204      	movs	r2, #4
    80fa:	eb0d 0102 	add.w	r1, sp, r2
    80fe:	4628      	mov	r0, r5
    8100:	f7f9 fe6d 	bl	1dde <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    8104:	3c04      	subs	r4, #4
    8106:	e7f0      	b.n	80ea <bt_rand+0x6>
		} else {
			memcpy(buf, &v, len);
    8108:	4622      	mov	r2, r4
    810a:	a901      	add	r1, sp, #4
    810c:	4628      	mov	r0, r5
    810e:	f7f9 fe66 	bl	1dde <memcpy>
			break;
		}
	}

	return 0;
}
    8112:	2000      	movs	r0, #0
    8114:	b002      	add	sp, #8
    8116:	bd70      	pop	{r4, r5, r6, pc}

00008118 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    8118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    811c:	b085      	sub	sp, #20
    811e:	4699      	mov	r9, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    8120:	4b73      	ldr	r3, [pc, #460]	; (82f0 <ll_adv_params_set+0x1d8>)
    8122:	9302      	str	r3, [sp, #8]
    8124:	f240 7301 	movw	r3, #1793	; 0x701
{
    8128:	460d      	mov	r5, r1
    812a:	4614      	mov	r4, r2
    812c:	9e11      	ldr	r6, [sp, #68]	; 0x44
    812e:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    8132:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled()) {
    8136:	f7fe fe81 	bl	6e3c <ll_adv_is_enabled>
    813a:	4680      	mov	r8, r0
    813c:	2800      	cmp	r0, #0
    813e:	f040 80d1 	bne.w	82e4 <ll_adv_params_set+0x1cc>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
    8142:	496c      	ldr	r1, [pc, #432]	; (82f4 <ll_adv_params_set+0x1dc>)
    8144:	780b      	ldrb	r3, [r1, #0]
    8146:	2201      	movs	r2, #1
    8148:	f362 1347 	bfi	r3, r2, #5, #3

	/* extended */
	if (adv_type > 0x04) {
    814c:	f1b9 0f04 	cmp.w	r9, #4
	ll_adv.phy_p = BIT(0);
    8150:	700b      	strb	r3, [r1, #0]
	if (adv_type > 0x04) {
    8152:	d90b      	bls.n	816c <ll_adv_params_set+0x54>
		/* legacy */
		if (evt_prop & BIT(4)) {
    8154:	06e8      	lsls	r0, r5, #27
    8156:	f005 0303 	and.w	r3, r5, #3
    815a:	d50f      	bpl.n	817c <ll_adv_params_set+0x64>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    815c:	4a66      	ldr	r2, [pc, #408]	; (82f8 <ll_adv_params_set+0x1e0>)
    815e:	9201      	str	r2, [sp, #4]

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    8160:	072a      	lsls	r2, r5, #28
    8162:	d406      	bmi.n	8172 <ll_adv_params_set+0x5a>
			adv_type = leg_adv_type[evt_prop & 0x03];
    8164:	aa04      	add	r2, sp, #16
    8166:	4413      	add	r3, r2
    8168:	f813 9c0c 	ldrb.w	r9, [r3, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
    816c:	f1b9 0f01 	cmp.w	r9, #1
    8170:	d112      	bne.n	8198 <ll_adv_params_set+0x80>
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
    8172:	2300      	movs	r3, #0
    8174:	604b      	str	r3, [r1, #4]
    8176:	f04f 0901 	mov.w	r9, #1
    817a:	e00e      	b.n	819a <ll_adv_params_set+0x82>
			if (((evt_prop & 0x03) == 0x03) ||
    817c:	2b03      	cmp	r3, #3
    817e:	f000 80b4 	beq.w	82ea <ll_adv_params_set+0x1d2>
    8182:	f005 030c 	and.w	r3, r5, #12
    8186:	2b0c      	cmp	r3, #12
    8188:	f000 80af 	beq.w	82ea <ll_adv_params_set+0x1d2>
			ll_adv.phy_p = phy_p;
    818c:	780b      	ldrb	r3, [r1, #0]
    818e:	f367 1347 	bfi	r3, r7, #5, #3
    8192:	700b      	strb	r3, [r1, #0]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    8194:	f04f 0905 	mov.w	r9, #5
		ll_adv.interval = interval;
    8198:	604c      	str	r4, [r1, #4]
	}
	ll_adv.chan_map = chan_map;
    819a:	780b      	ldrb	r3, [r1, #0]
    819c:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
    81a0:	f362 0302 	bfi	r3, r2, #0, #3
	ll_adv.filter_policy = filter_policy;
    81a4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    81a8:	f362 03c4 	bfi	r3, r2, #3, #2
    81ac:	700b      	strb	r3, [r1, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
    81ae:	f7fe fe3d 	bl	6e2c <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    81b2:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
    81b6:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    81ba:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = pdu_adv_type[adv_type];
    81be:	ab04      	add	r3, sp, #16
    81c0:	4499      	add	r9, r3
    81c2:	5c83      	ldrb	r3, [r0, r2]
    81c4:	f819 1c08 	ldrb.w	r1, [r9, #-8]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
    81c8:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	pdu->type = pdu_adv_type[adv_type];
    81cc:	f361 0303 	bfi	r3, r1, #0, #4
	pdu->rfu = 0;
    81d0:	f36f 1304 	bfc	r3, #4, #1
    81d4:	5483      	strb	r3, [r0, r2]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    81d6:	b2db      	uxtb	r3, r3
    81d8:	f003 010f 	and.w	r1, r3, #15
    81dc:	2901      	cmp	r1, #1
		pdu->chan_sel = 1;
    81de:	bf94      	ite	ls
    81e0:	f043 0320 	orrls.w	r3, r3, #32
		pdu->chan_sel = 0;
    81e4:	f36f 1345 	bfchi	r3, #5, #1
    81e8:	5483      	strb	r3, [r0, r2]
	pdu->tx_addr = own_addr_type & 0x1;
    81ea:	5c83      	ldrb	r3, [r0, r2]
    81ec:	f009 0901 	and.w	r9, r9, #1
    81f0:	f369 1386 	bfi	r3, r9, #6, #1
	pdu->rx_addr = 0;
    81f4:	f36f 13c7 	bfc	r3, #7, #1
    81f8:	5483      	strb	r3, [r0, r2]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    81fa:	b2db      	uxtb	r3, r3
    81fc:	f003 010f 	and.w	r1, r3, #15
    8200:	2901      	cmp	r1, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8202:	eb00 0402 	add.w	r4, r0, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    8206:	d10d      	bne.n	8224 <ll_adv_params_set+0x10c>
		pdu->rx_addr = direct_addr_type;
    8208:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    820c:	f361 13c7 	bfi	r3, r1, #7, #1
    8210:	5483      	strb	r3, [r0, r2]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    8212:	990e      	ldr	r1, [sp, #56]	; 0x38
    8214:	2206      	movs	r2, #6
    8216:	f104 0008 	add.w	r0, r4, #8
    821a:	f7f9 fde0 	bl	1dde <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    821e:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    8220:	7063      	strb	r3, [r4, #1]
    8222:	e03c      	b.n	829e <ll_adv_params_set+0x186>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    8224:	2907      	cmp	r1, #7
    8226:	d158      	bne.n	82da <ll_adv_params_set+0x1c2>
		p->ext_hdr_len = 0;
    8228:	78a1      	ldrb	r1, [r4, #2]
		p->adv_mode = evt_prop & 0x03;
    822a:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    822e:	f365 1187 	bfi	r1, r5, #6, #2
    8232:	70a1      	strb	r1, [r4, #2]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
    8234:	06a8      	lsls	r0, r5, #26
		*(u8_t *)h = 0;
    8236:	f04f 0100 	mov.w	r1, #0
		p = (void *)&pdu->adv_ext_ind;
    823a:	f104 0302 	add.w	r3, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
    823e:	f104 0204 	add.w	r2, r4, #4
		*(u8_t *)h = 0;
    8242:	70e1      	strb	r1, [r4, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
    8244:	d409      	bmi.n	825a <ll_adv_params_set+0x142>
    8246:	78a1      	ldrb	r1, [r4, #2]
    8248:	f011 0fc0 	tst.w	r1, #192	; 0xc0
    824c:	d105      	bne.n	825a <ll_adv_params_set+0x142>
    824e:	2f04      	cmp	r7, #4
			h->adv_addr = 1;
    8250:	bf1e      	ittt	ne
    8252:	2201      	movne	r2, #1
    8254:	70e2      	strbne	r2, [r4, #3]
			ptr += BDADDR_SIZE;
    8256:	f104 020a 	addne.w	r2, r4, #10
		if (evt_prop & BIT(6)) {
    825a:	0669      	lsls	r1, r5, #25
			h->tx_pwr = 1;
    825c:	bf44      	itt	mi
    825e:	78e1      	ldrbmi	r1, [r4, #3]
			ptr++;
    8260:	3201      	addmi	r2, #1
		len = ptr - (u8_t *)p;
    8262:	eba2 0303 	sub.w	r3, r2, r3
			h->tx_pwr = 1;
    8266:	bf48      	it	mi
    8268:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
		len = ptr - (u8_t *)p;
    826c:	b2db      	uxtb	r3, r3
			h->tx_pwr = 1;
    826e:	bf48      	it	mi
    8270:	70e1      	strbmi	r1, [r4, #3]
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    8272:	2b02      	cmp	r3, #2
			p->ext_hdr_len = len -
    8274:	bf8a      	itet	hi
    8276:	78a1      	ldrbhi	r1, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    8278:	2301      	movls	r3, #1
			p->ext_hdr_len = len -
    827a:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    827e:	7063      	strb	r3, [r4, #1]
		if (h->tx_pwr) {
    8280:	78e3      	ldrb	r3, [r4, #3]
			p->ext_hdr_len = len -
    8282:	bf84      	itt	hi
    8284:	f360 0105 	bfihi	r1, r0, #0, #6
    8288:	70a1      	strbhi	r1, [r4, #2]
		if (h->tx_pwr) {
    828a:	065b      	lsls	r3, r3, #25
    828c:	d507      	bpl.n	829e <ll_adv_params_set+0x186>
			if (tx_pwr) {
    828e:	b316      	cbz	r6, 82d6 <ll_adv_params_set+0x1be>
				if (*tx_pwr != 0x7F) {
    8290:	7833      	ldrb	r3, [r6, #0]
    8292:	2b7f      	cmp	r3, #127	; 0x7f
    8294:	d101      	bne.n	829a <ll_adv_params_set+0x182>
					*tx_pwr = _tx_pwr;
    8296:	2300      	movs	r3, #0
    8298:	7033      	strb	r3, [r6, #0]
			*ptr = _tx_pwr;
    829a:	f802 3c01 	strb.w	r3, [r2, #-1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    829e:	f7fe fdc9 	bl	6e34 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    82a2:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
    82a6:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    82aa:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    82ae:	2404      	movs	r4, #4
    82b0:	5c83      	ldrb	r3, [r0, r2]
    82b2:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    82b6:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    82ba:	f369 1386 	bfi	r3, r9, #6, #1
	pdu->rx_addr = 0;
    82be:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    82c2:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
    82c4:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    82c6:	784b      	ldrb	r3, [r1, #1]
    82c8:	b90b      	cbnz	r3, 82ce <ll_adv_params_set+0x1b6>
		pdu->len = BDADDR_SIZE;
    82ca:	2306      	movs	r3, #6
    82cc:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
    82ce:	4640      	mov	r0, r8
    82d0:	b005      	add	sp, #20
    82d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			_tx_pwr = 0;
    82d6:	4633      	mov	r3, r6
    82d8:	e7df      	b.n	829a <ll_adv_params_set+0x182>
	} else if (pdu->len == 0) {
    82da:	7863      	ldrb	r3, [r4, #1]
    82dc:	2b00      	cmp	r3, #0
    82de:	d1de      	bne.n	829e <ll_adv_params_set+0x186>
		pdu->len = BDADDR_SIZE;
    82e0:	2306      	movs	r3, #6
    82e2:	e79d      	b.n	8220 <ll_adv_params_set+0x108>
		return BT_HCI_ERR_CMD_DISALLOWED;
    82e4:	f04f 080c 	mov.w	r8, #12
    82e8:	e7f1      	b.n	82ce <ll_adv_params_set+0x1b6>
				return 0x12; /* invalid HCI cmd param */
    82ea:	f04f 0812 	mov.w	r8, #18
    82ee:	e7ee      	b.n	82ce <ll_adv_params_set+0x1b6>
    82f0:	02060100 	.word	0x02060100
    82f4:	20000dcc 	.word	0x20000dcc
    82f8:	00020403 	.word	0x00020403

000082fc <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    82fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8300:	460f      	mov	r7, r1
    8302:	4606      	mov	r6, r0
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    8304:	f7fe fd92 	bl	6e2c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8308:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
    830c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
    8310:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	radio_adv_data = radio_adv_data_get();
    8314:	4604      	mov	r4, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    8316:	f810 c002 	ldrb.w	ip, [r0, r2]
    831a:	f00c 030f 	and.w	r3, ip, #15
    831e:	2b01      	cmp	r3, #1
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8320:	eb00 0102 	add.w	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    8324:	d040      	beq.n	83a8 <ll_adv_data_set+0xac>
    8326:	2b07      	cmp	r3, #7
    8328:	d03e      	beq.n	83a8 <ll_adv_data_set+0xac>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    832a:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
    832e:	42ab      	cmp	r3, r5
    8330:	d104      	bne.n	833c <ll_adv_data_set+0x40>
		last = radio_adv_data->last + 1;
    8332:	3501      	adds	r5, #1
    8334:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
    8336:	2d02      	cmp	r5, #2
    8338:	bf08      	it	eq
    833a:	2500      	moveq	r5, #0
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    833c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8340:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
    8344:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
    8348:	5ce0      	ldrb	r0, [r4, r3]
    834a:	f36c 0003 	bfi	r0, ip, #0, #4
	pdu->rfu = 0;
    834e:	f36f 1004 	bfc	r0, #4, #1
    8352:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
    8354:	5ca0      	ldrb	r0, [r4, r2]
    8356:	f814 c003 	ldrb.w	ip, [r4, r3]
    835a:	f3c0 1040 	ubfx	r0, r0, #5, #1
    835e:	f360 1c45 	bfi	ip, r0, #5, #1
    8362:	f804 c003 	strb.w	ip, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
    8366:	5ca0      	ldrb	r0, [r4, r2]
    8368:	fa5f fc8c 	uxtb.w	ip, ip
    836c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8370:	f360 1c86 	bfi	ip, r0, #6, #1
    8374:	f804 c003 	strb.w	ip, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
    8378:	5ca2      	ldrb	r2, [r4, r2]
    837a:	fa5f f08c 	uxtb.w	r0, ip
    837e:	09d2      	lsrs	r2, r2, #7
    8380:	f362 10c7 	bfi	r0, r2, #7, #1
    8384:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    8386:	2206      	movs	r2, #6
    8388:	3102      	adds	r1, #2
    838a:	f108 0002 	add.w	r0, r8, #2
    838e:	f7f9 fd26 	bl	1dde <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    8392:	4632      	mov	r2, r6
    8394:	4639      	mov	r1, r7
    8396:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
    839a:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    839c:	f7f9 fd1f 	bl	1dde <memcpy>
	pdu->len = BDADDR_SIZE + len;
    83a0:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    83a4:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
}
    83a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000083ac <ll_scan_data_set>:

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    83ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83b0:	4606      	mov	r6, r0
    83b2:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    83b4:	f7fe fd3e 	bl	6e34 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    83b8:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
    83bc:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
    83c0:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
    83c2:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
    83c4:	d136      	bne.n	8434 <ll_scan_data_set+0x88>
		last = radio_scan_data->last + 1;
    83c6:	1c5d      	adds	r5, r3, #1
    83c8:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    83ca:	2d02      	cmp	r5, #2
			last = 0;
    83cc:	bf08      	it	eq
    83ce:	2500      	moveq	r5, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
    83d0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    83d4:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    83d8:	b22b      	sxth	r3, r5
    83da:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    83de:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    83e2:	f04f 0c04 	mov.w	ip, #4
    83e6:	5ce0      	ldrb	r0, [r4, r3]
    83e8:	f36c 0003 	bfi	r0, ip, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
    83ec:	f000 00ef 	and.w	r0, r0, #239	; 0xef
    83f0:	f36f 1045 	bfc	r0, #5, #1
    83f4:	54e0      	strb	r0, [r4, r3]
	pdu->tx_addr = prev->tx_addr;
    83f6:	5ca0      	ldrb	r0, [r4, r2]
	prev = (struct pdu_adv *)
    83f8:	18a1      	adds	r1, r4, r2
	pdu->tx_addr = prev->tx_addr;
    83fa:	5ce2      	ldrb	r2, [r4, r3]
    83fc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8400:	f360 1286 	bfi	r2, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    8404:	eb04 0803 	add.w	r8, r4, r3
	pdu->rx_addr = 0;
    8408:	f36f 12c7 	bfc	r2, #7, #1
    840c:	54e2      	strb	r2, [r4, r3]
	pdu->len = BDADDR_SIZE + len;
    840e:	1db3      	adds	r3, r6, #6
    8410:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    8414:	2206      	movs	r2, #6
    8416:	3102      	adds	r1, #2
    8418:	f108 0002 	add.w	r0, r8, #2
    841c:	f7f9 fcdf 	bl	1dde <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    8420:	4632      	mov	r2, r6
    8422:	4639      	mov	r1, r7
    8424:	f108 0008 	add.w	r0, r8, #8
    8428:	f7f9 fcd9 	bl	1dde <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    842c:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
}
    8430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8434:	461d      	mov	r5, r3
    8436:	e7cb      	b.n	83d0 <ll_scan_data_set+0x24>

00008438 <ll_adv_enable>:

u32_t ll_adv_enable(u8_t enable)
{
    8438:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
    843c:	b920      	cbnz	r0, 8448 <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
    843e:	b003      	add	sp, #12
    8440:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return radio_adv_disable();
    8444:	f7fe bf5e 	b.w	7304 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
    8448:	f7fe fcf8 	bl	6e3c <ll_adv_is_enabled>
    844c:	4607      	mov	r7, r0
    844e:	2800      	cmp	r0, #0
    8450:	d14e      	bne.n	84f0 <ll_adv_enable+0xb8>
	radio_adv_data = radio_adv_data_get();
    8452:	f7fe fceb 	bl	6e2c <radio_adv_data_get>
    8456:	4680      	mov	r8, r0
	radio_scan_data = radio_scan_data_get();
    8458:	f7fe fcec 	bl	6e34 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    845c:	f898 404f 	ldrb.w	r4, [r8, #79]	; 0x4f
    8460:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8464:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
	radio_scan_data = radio_scan_data_get();
    8468:	4606      	mov	r6, r0
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    846a:	f818 0004 	ldrb.w	r0, [r8, r4]
    846e:	f000 030f 	and.w	r3, r0, #15
    8472:	2b07      	cmp	r3, #7
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    8474:	eb08 0904 	add.w	r9, r8, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    8478:	d11d      	bne.n	84b6 <ll_adv_enable+0x7e>
		if (h->adv_addr) {
    847a:	f899 3003 	ldrb.w	r3, [r9, #3]
    847e:	07db      	lsls	r3, r3, #31
    8480:	d50a      	bpl.n	8498 <ll_adv_enable+0x60>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    8482:	4639      	mov	r1, r7
    8484:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8488:	f7fb f8a4 	bl	35d4 <ll_addr_get>
    848c:	2206      	movs	r2, #6
    848e:	4601      	mov	r1, r0
    8490:	f109 0004 	add.w	r0, r9, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    8494:	f7f9 fca3 	bl	1dde <memcpy>
				  ll_adv.chan_map, ll_adv.filter_policy,
    8498:	4b16      	ldr	r3, [pc, #88]	; (84f4 <ll_adv_enable+0xbc>)
    849a:	7818      	ldrb	r0, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    849c:	8899      	ldrh	r1, [r3, #4]
    849e:	23ff      	movs	r3, #255	; 0xff
    84a0:	9300      	str	r3, [sp, #0]
    84a2:	f000 0207 	and.w	r2, r0, #7
    84a6:	f3c0 03c1 	ubfx	r3, r0, #3, #2
    84aa:	0940      	lsrs	r0, r0, #5
    84ac:	f7fe fdd0 	bl	7050 <radio_adv_enable>
}
    84b0:	b003      	add	sp, #12
    84b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    84b6:	4639      	mov	r1, r7
    84b8:	f3c0 1080 	ubfx	r0, r0, #6, #1
			[radio_scan_data->last][0];
    84bc:	f896 504f 	ldrb.w	r5, [r6, #79]	; 0x4f
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    84c0:	f7fb f888 	bl	35d4 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    84c4:	2206      	movs	r2, #6
    84c6:	4601      	mov	r1, r0
    84c8:	f109 0002 	add.w	r0, r9, #2
    84cc:	f7f9 fc87 	bl	1dde <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    84d0:	f818 0004 	ldrb.w	r0, [r8, r4]
    84d4:	4639      	mov	r1, r7
    84d6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    84da:	f7fb f87b 	bl	35d4 <ll_addr_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    84de:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    84e2:	ebc5 05c3 	rsb	r5, r5, r3, lsl #3
    84e6:	4435      	add	r5, r6
			memcpy(&pdu_scan->scan_rsp.addr[0],
    84e8:	4601      	mov	r1, r0
    84ea:	2206      	movs	r2, #6
    84ec:	1ca8      	adds	r0, r5, #2
    84ee:	e7d1      	b.n	8494 <ll_adv_enable+0x5c>
		return 0;
    84f0:	2000      	movs	r0, #0
    84f2:	e7dd      	b.n	84b0 <ll_adv_enable+0x78>
    84f4:	20000dcc 	.word	0x20000dcc

000084f8 <ctrl_filter_get>:
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    84f8:	b928      	cbnz	r0, 8506 <ctrl_filter_get+0xe>
    84fa:	4040      	eors	r0, r0
    84fc:	f380 8811 	msr	BASEPRI, r0
    8500:	f04f 0004 	mov.w	r0, #4
    8504:	df02      	svc	2
	return &wl_filter;
#endif
}
    8506:	4801      	ldr	r0, [pc, #4]	; (850c <ctrl_filter_get+0x14>)
    8508:	4770      	bx	lr
    850a:	bf00      	nop
    850c:	20000dd4 	.word	0x20000dd4

00008510 <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    8510:	2008      	movs	r0, #8
    8512:	4770      	bx	lr

00008514 <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    8514:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8516:	f7fe fc99 	bl	6e4c <radio_adv_filter_pol_get>
    851a:	4604      	mov	r4, r0
    851c:	b110      	cbz	r0, 8524 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    851e:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
    8520:	4620      	mov	r0, r4
    8522:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8524:	f7fe fcb4 	bl	6e90 <radio_scan_filter_pol_get>
    8528:	07c3      	lsls	r3, r0, #31
    852a:	d4f8      	bmi.n	851e <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
    852c:	4b02      	ldr	r3, [pc, #8]	; (8538 <ll_wl_clear+0x24>)
    852e:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
    8530:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
    8532:	4b02      	ldr	r3, [pc, #8]	; (853c <ll_wl_clear+0x28>)
    8534:	701c      	strb	r4, [r3, #0]
	return 0;
    8536:	e7f3      	b.n	8520 <ll_wl_clear+0xc>
    8538:	20000dd4 	.word	0x20000dd4
    853c:	20001320 	.word	0x20001320

00008540 <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    8540:	b570      	push	{r4, r5, r6, lr}
    8542:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8544:	f7fe fc82 	bl	6e4c <radio_adv_filter_pol_get>
    8548:	4605      	mov	r5, r0
    854a:	b110      	cbz	r0, 8552 <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    854c:	250c      	movs	r5, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    854e:	4628      	mov	r0, r5
    8550:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8552:	f7fe fc9d 	bl	6e90 <radio_scan_filter_pol_get>
    8556:	07c3      	lsls	r3, r0, #31
    8558:	d4f8      	bmi.n	854c <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    855a:	7823      	ldrb	r3, [r4, #0]
    855c:	2bff      	cmp	r3, #255	; 0xff
    855e:	d103      	bne.n	8568 <ll_wl_add+0x28>
		wl_anon = 1;
    8560:	4b11      	ldr	r3, [pc, #68]	; (85a8 <ll_wl_add+0x68>)
    8562:	2201      	movs	r2, #1
    8564:	701a      	strb	r2, [r3, #0]
		return 0;
    8566:	e7f2      	b.n	854e <ll_wl_add+0xe>
	return filter_add(&wl_filter, addr->type, addr->a.val);
    8568:	1c61      	adds	r1, r4, #1
	if (filter->enable_bitmask == 0xFF) {
    856a:	4c10      	ldr	r4, [pc, #64]	; (85ac <ll_wl_add+0x6c>)
    856c:	7822      	ldrb	r2, [r4, #0]
    856e:	2aff      	cmp	r2, #255	; 0xff
    8570:	d017      	beq.n	85a2 <ll_wl_add+0x62>
	for (index = 0;
    8572:	4628      	mov	r0, r5
	     (filter->enable_bitmask & BIT(index));
    8574:	fa22 f600 	lsr.w	r6, r2, r0
	for (index = 0;
    8578:	07f6      	lsls	r6, r6, #31
    857a:	d410      	bmi.n	859e <ll_wl_add+0x5e>
	filter->enable_bitmask |= BIT(index);
    857c:	2601      	movs	r6, #1
    857e:	4086      	lsls	r6, r0
    8580:	4332      	orrs	r2, r6
    8582:	7022      	strb	r2, [r4, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    8584:	f003 0301 	and.w	r3, r3, #1
    8588:	7862      	ldrb	r2, [r4, #1]
    858a:	4083      	lsls	r3, r0
    858c:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    858e:	2206      	movs	r2, #6
    8590:	fb02 4000 	mla	r0, r2, r0, r4
    8594:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    8596:	7063      	strb	r3, [r4, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    8598:	f7f9 fc21 	bl	1dde <memcpy>
    859c:	e7d7      	b.n	854e <ll_wl_add+0xe>
	     index++) {
    859e:	3001      	adds	r0, #1
    85a0:	e7e8      	b.n	8574 <ll_wl_add+0x34>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    85a2:	2507      	movs	r5, #7
    85a4:	e7d3      	b.n	854e <ll_wl_add+0xe>
    85a6:	bf00      	nop
    85a8:	20001320 	.word	0x20001320
    85ac:	20000dd4 	.word	0x20000dd4

000085b0 <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    85b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    85b4:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    85b6:	f7fe fc49 	bl	6e4c <radio_adv_filter_pol_get>
    85ba:	4606      	mov	r6, r0
    85bc:	b118      	cbz	r0, 85c6 <ll_wl_remove+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
    85be:	260c      	movs	r6, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    85c0:	4630      	mov	r0, r6
    85c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    85c6:	f7fe fc63 	bl	6e90 <radio_scan_filter_pol_get>
    85ca:	07c1      	lsls	r1, r0, #31
    85cc:	d4f7      	bmi.n	85be <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    85ce:	f897 8000 	ldrb.w	r8, [r7]
    85d2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    85d6:	d102      	bne.n	85de <ll_wl_remove+0x2e>
		wl_anon = 0;
    85d8:	4b16      	ldr	r3, [pc, #88]	; (8634 <ll_wl_remove+0x84>)
    85da:	701e      	strb	r6, [r3, #0]
		return 0;
    85dc:	e7f0      	b.n	85c0 <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
    85de:	4c16      	ldr	r4, [pc, #88]	; (8638 <ll_wl_remove+0x88>)
    85e0:	7823      	ldrb	r3, [r4, #0]
    85e2:	b90b      	cbnz	r3, 85e8 <ll_wl_remove+0x38>
		return BT_HCI_ERR_INVALID_PARAM;
    85e4:	2612      	movs	r6, #18
    85e6:	e7eb      	b.n	85c0 <ll_wl_remove+0x10>
	index = 8;
    85e8:	2508      	movs	r5, #8
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    85ea:	3701      	adds	r7, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    85ec:	f04f 0906 	mov.w	r9, #6
    85f0:	f104 0a02 	add.w	sl, r4, #2
	while (index--) {
    85f4:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    85f8:	d3f4      	bcc.n	85e4 <ll_wl_remove+0x34>
		if ((filter->enable_bitmask & BIT(index)) &&
    85fa:	7823      	ldrb	r3, [r4, #0]
    85fc:	40eb      	lsrs	r3, r5
    85fe:	07da      	lsls	r2, r3, #31
    8600:	d5f8      	bpl.n	85f4 <ll_wl_remove+0x44>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    8602:	7863      	ldrb	r3, [r4, #1]
    8604:	412b      	asrs	r3, r5
    8606:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
    860a:	07db      	lsls	r3, r3, #31
    860c:	d4f2      	bmi.n	85f4 <ll_wl_remove+0x44>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    860e:	2206      	movs	r2, #6
    8610:	4639      	mov	r1, r7
    8612:	fb09 a005 	mla	r0, r9, r5, sl
    8616:	f7f9 fbd2 	bl	1dbe <memcmp>
		     (addr_type & 0x01)) &&
    861a:	2800      	cmp	r0, #0
    861c:	d1ea      	bne.n	85f4 <ll_wl_remove+0x44>
			filter->enable_bitmask &= ~BIT(index);
    861e:	2301      	movs	r3, #1
    8620:	40ab      	lsls	r3, r5
    8622:	7822      	ldrb	r2, [r4, #0]
    8624:	43db      	mvns	r3, r3
    8626:	b2db      	uxtb	r3, r3
    8628:	401a      	ands	r2, r3
    862a:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    862c:	7862      	ldrb	r2, [r4, #1]
    862e:	4013      	ands	r3, r2
    8630:	7063      	strb	r3, [r4, #1]
    8632:	e7c5      	b.n	85c0 <ll_wl_remove+0x10>
    8634:	20001320 	.word	0x20001320
    8638:	20000dd4 	.word	0x20000dd4

0000863c <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    863c:	4a03      	ldr	r2, [pc, #12]	; (864c <ll_filter_reset+0x10>)
    863e:	2300      	movs	r3, #0
    8640:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    8642:	4a03      	ldr	r2, [pc, #12]	; (8650 <ll_filter_reset+0x14>)
    8644:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    8646:	7053      	strb	r3, [r2, #1]
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
    8648:	4770      	bx	lr
    864a:	bf00      	nop
    864c:	20001320 	.word	0x20001320
    8650:	20000dd4 	.word	0x20000dd4

00008654 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    8654:	4b05      	ldr	r3, [pc, #20]	; (866c <cntr_init+0x18>)
    8656:	2200      	movs	r2, #0
    8658:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_rtc->EVTENSET = mask;
    865c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    8660:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_rtc->INTENSET = mask;
    8664:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk |
			     RTC_EVTENSET_COMPARE1_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk |
			     RTC_INTENSET_COMPARE1_Msk);
}
    8668:	4770      	bx	lr
    866a:	bf00      	nop
    866c:	4000b000 	.word	0x4000b000

00008670 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
    8670:	4a04      	ldr	r2, [pc, #16]	; (8684 <cntr_start+0x14>)
    8672:	7813      	ldrb	r3, [r2, #0]
    8674:	1c59      	adds	r1, r3, #1
    8676:	7011      	strb	r1, [r2, #0]
    8678:	2001      	movs	r0, #1
    867a:	b913      	cbnz	r3, 8682 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
    867c:	4a02      	ldr	r2, [pc, #8]	; (8688 <cntr_start+0x18>)
    867e:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
    8680:	4618      	mov	r0, r3
}
    8682:	4770      	bx	lr
    8684:	20000e06 	.word	0x20000e06
    8688:	4000b000 	.word	0x4000b000

0000868c <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    868c:	4b09      	ldr	r3, [pc, #36]	; (86b4 <cntr_stop+0x28>)
    868e:	7818      	ldrb	r0, [r3, #0]
    8690:	b928      	cbnz	r0, 869e <cntr_stop+0x12>
    8692:	4040      	eors	r0, r0
    8694:	f380 8811 	msr	BASEPRI, r0
    8698:	f04f 0004 	mov.w	r0, #4
    869c:	df02      	svc	2

	if (--_refcount) {
    869e:	3801      	subs	r0, #1
    86a0:	b2c0      	uxtb	r0, r0
    86a2:	7018      	strb	r0, [r3, #0]
    86a4:	2301      	movs	r3, #1
    86a6:	b910      	cbnz	r0, 86ae <cntr_stop+0x22>
    86a8:	4a03      	ldr	r2, [pc, #12]	; (86b8 <cntr_stop+0x2c>)
    86aa:	6013      	str	r3, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
    86ac:	4770      	bx	lr
		return 1;
    86ae:	4618      	mov	r0, r3
}
    86b0:	4770      	bx	lr
    86b2:	bf00      	nop
    86b4:	20000e06 	.word	0x20000e06
    86b8:	4000b004 	.word	0x4000b004

000086bc <cntr_cnt_get>:
     return p_rtc->COUNTER;
    86bc:	4b01      	ldr	r3, [pc, #4]	; (86c4 <cntr_cnt_get+0x8>)
    86be:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

u32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
    86c2:	4770      	bx	lr
    86c4:	4000b000 	.word	0x4000b000

000086c8 <cntr_cmp_set>:
    p_rtc->CC[ch] = cc_val;
    86c8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    86cc:	4b01      	ldr	r3, [pc, #4]	; (86d4 <cntr_cmp_set+0xc>)
    86ce:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
    86d2:	4770      	bx	lr
    86d4:	4000b000 	.word	0x4000b000

000086d8 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    86d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    86da:	4b13      	ldr	r3, [pc, #76]	; (8728 <do_ecb+0x50>)

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    86dc:	4c13      	ldr	r4, [pc, #76]	; (872c <do_ecb+0x54>)
    86de:	2501      	movs	r5, #1
{
    86e0:	4684      	mov	ip, r0
    86e2:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
    86e4:	2700      	movs	r7, #0
    86e6:	46a6      	mov	lr, r4
    86e8:	461a      	mov	r2, r3
    86ea:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    86ec:	f8c3 c504 	str.w	ip, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    86f0:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    86f4:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    86f8:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    86fa:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    86fe:	b931      	cbnz	r1, 870e <do_ecb+0x36>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    8700:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    8704:	b919      	cbnz	r1, 870e <do_ecb+0x36>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    8706:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    870a:	2900      	cmp	r1, #0
    870c:	d1f5      	bne.n	86fa <do_ecb+0x22>
    870e:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    8712:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
    8716:	2900      	cmp	r1, #0
    8718:	d1e7      	bne.n	86ea <do_ecb+0x12>
    871a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    871e:	2800      	cmp	r0, #0
    8720:	d0e3      	beq.n	86ea <do_ecb+0x12>

	NRF_ECB->ECBDATAPTR = 0;
    8722:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
    8726:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8728:	4000e000 	.word	0x4000e000
    872c:	4000e004 	.word	0x4000e004

00008730 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    8730:	b570      	push	{r4, r5, r6, lr}
    8732:	b08c      	sub	sp, #48	; 0x30
    8734:	460e      	mov	r6, r1
    8736:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    8738:	4601      	mov	r1, r0
    873a:	2210      	movs	r2, #16
    873c:	4668      	mov	r0, sp
{
    873e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    8740:	f7f9 ffc8 	bl	26d4 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    8744:	2210      	movs	r2, #16
    8746:	eb0d 0002 	add.w	r0, sp, r2
    874a:	4631      	mov	r1, r6
    874c:	f7f9 ffc2 	bl	26d4 <mem_rcopy>

	do_ecb(&ecb);
    8750:	4668      	mov	r0, sp
    8752:	f7ff ffc1 	bl	86d8 <do_ecb>

	if (cipher_text_le) {
    8756:	b125      	cbz	r5, 8762 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    8758:	2210      	movs	r2, #16
    875a:	a908      	add	r1, sp, #32
    875c:	4628      	mov	r0, r5
    875e:	f7f9 ffb9 	bl	26d4 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    8762:	b124      	cbz	r4, 876e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    8764:	2210      	movs	r2, #16
    8766:	a908      	add	r1, sp, #32
    8768:	4620      	mov	r0, r4
    876a:	f7f9 fb38 	bl	1dde <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    876e:	b00c      	add	sp, #48	; 0x30
    8770:	bd70      	pop	{r4, r5, r6, pc}
	...

00008774 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	nrf_ppi_channel_endpoint_setup(HAL_RADIO_ENABLE_ON_TICK_PPI,
    8774:	4b09      	ldr	r3, [pc, #36]	; (879c <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
    8776:	4a0a      	ldr	r2, [pc, #40]	; (87a0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    8778:	2800      	cmp	r0, #0
    877a:	bf14      	ite	ne
    877c:	4618      	movne	r0, r3
    877e:	4610      	moveq	r0, r2

__STATIC_INLINE void nrf_ppi_channel_endpoint_setup(nrf_ppi_channel_t channel,
                                                    uint32_t          eep,
                                                    uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    8780:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    8784:	f502 42e2 	add.w	r2, r2, #28928	; 0x7100
    8788:	323c      	adds	r2, #60	; 0x3c
    878a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    NRF_PPI->CHENSET = mask;
    878e:	2201      	movs	r2, #1
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    8790:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    NRF_PPI->CHENSET = mask;
    8794:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
					HAL_RADIO_ENABLE_ON_TICK_PPI_EVT,
				(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
					HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX);
	nrf_ppi_channels_enable(HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE);
}
    8798:	4770      	bx	lr
    879a:	bf00      	nop
    879c:	40001000 	.word	0x40001000
    87a0:	40001004 	.word	0x40001004

000087a4 <sw_switch.isra.10>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    87a4:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    87a6:	4e2c      	ldr	r6, [pc, #176]	; (8858 <sw_switch.isra.10+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    87a8:	4f2c      	ldr	r7, [pc, #176]	; (885c <sw_switch.isra.10+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    87aa:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    87ac:	4b2c      	ldr	r3, [pc, #176]	; (8860 <sw_switch.isra.10+0xbc>)
    87ae:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    87b2:	b22b      	sxth	r3, r5
    87b4:	00dc      	lsls	r4, r3, #3
    87b6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    87ba:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
    87be:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    87c2:	f105 040b 	add.w	r4, r5, #11
    87c6:	b2e4      	uxtb	r4, r4
    87c8:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
    87ca:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    87ce:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    87d2:	3fc0      	subs	r7, #192	; 0xc0
    87d4:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    87d8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
    87dc:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
    87e0:	2800      	cmp	r0, #0
    87e2:	d034      	beq.n	884e <sw_switch.isra.10+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
    87e4:	f649 4040 	movw	r0, #40000	; 0x9c40
    87e8:	f24a 075a 	movw	r7, #41050	; 0xa05a
    87ec:	2a02      	cmp	r2, #2
    87ee:	bf0c      	ite	eq
    87f0:	4602      	moveq	r2, r0
    87f2:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
    87f4:	f241 504a 	movw	r0, #5450	; 0x154a
    87f8:	f242 47b8 	movw	r7, #9400	; 0x24b8
    87fc:	2902      	cmp	r1, #2
    87fe:	bf18      	it	ne
    8800:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    8802:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    8806:	4401      	add	r1, r0
    8808:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    880c:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    8810:	4a14      	ldr	r2, [pc, #80]	; (8864 <sw_switch.isra.10+0xc0>)
    8812:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    8816:	009b      	lsls	r3, r3, #2
    8818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    881c:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    8820:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    8824:	428a      	cmp	r2, r1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
				   SW_SWITCH_TIMER->CC[cc] - delay);
    8826:	bf8b      	itete	hi
    8828:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540

__STATIC_INLINE void nrf_timer_cc_write(NRF_TIMER_Type * p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
    882c:	2201      	movls	r2, #1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
    882e:	1a51      	subhi	r1, r2, r1
    8830:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
    8834:	bf88      	it	hi
    8836:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
    883a:	4b08      	ldr	r3, [pc, #32]	; (885c <sw_switch.isra.10+0xb8>)
    883c:	f44f 6290 	mov.w	r2, #1152	; 0x480
    8840:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    8844:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    8846:	f003 0301 	and.w	r3, r3, #1
    884a:	7033      	strb	r3, [r6, #0]
}
    884c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    884e:	4a06      	ldr	r2, [pc, #24]	; (8868 <sw_switch.isra.10+0xc4>)
    8850:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    8854:	212d      	movs	r1, #45	; 0x2d
    8856:	e7de      	b.n	8816 <sw_switch.isra.10+0x72>
    8858:	20001024 	.word	0x20001024
    885c:	4001f000 	.word	0x4001f000
    8860:	4000110c 	.word	0x4000110c
    8864:	40001000 	.word	0x40001000
    8868:	40001004 	.word	0x40001004

0000886c <isr_radio>:
	if (sfp_radio_isr) {
    886c:	4b02      	ldr	r3, [pc, #8]	; (8878 <isr_radio+0xc>)
    886e:	681b      	ldr	r3, [r3, #0]
    8870:	b103      	cbz	r3, 8874 <isr_radio+0x8>
		sfp_radio_isr();
    8872:	4718      	bx	r3
}
    8874:	4770      	bx	lr
    8876:	bf00      	nop
    8878:	20001020 	.word	0x20001020

0000887c <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    887c:	4b06      	ldr	r3, [pc, #24]	; (8898 <radio_isr_set+0x1c>)
    887e:	6018      	str	r0, [r3, #0]
    return NRF_RADIO->SHORTS;
}

__STATIC_INLINE void nrf_radio_int_enable(uint32_t radio_int_mask)
{
    NRF_RADIO->INTENSET = radio_int_mask;
    8880:	4b06      	ldr	r3, [pc, #24]	; (889c <radio_isr_set+0x20>)
    8882:	2210      	movs	r2, #16
    8884:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8888:	4b05      	ldr	r3, [pc, #20]	; (88a0 <radio_isr_set+0x24>)
    888a:	2202      	movs	r2, #2
    888c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    8890:	2001      	movs	r0, #1
    8892:	f7f9 b8d1 	b.w	1a38 <_arch_irq_enable>
    8896:	bf00      	nop
    8898:	20001020 	.word	0x20001020
    889c:	40001000 	.word	0x40001000
    88a0:	e000e100 	.word	0xe000e100

000088a4 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    88a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    88a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    88ac:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    88ae:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    88b2:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    88b6:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    88ba:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    88be:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    88c2:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    88c6:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    88ca:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    88ce:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    88d2:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    88d6:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    88da:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    88de:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    88e2:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
    88e6:	4770      	bx	lr

000088e8 <radio_reset>:
{
    88e8:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    88ea:	2001      	movs	r0, #1
    88ec:	f7f9 f8b4 	bl	1a58 <_arch_irq_disable>
}
#endif

__STATIC_INLINE void nrf_radio_power_set(bool radio_power)
{
    NRF_RADIO->POWER = (uint32_t) radio_power;
    88f0:	4b08      	ldr	r3, [pc, #32]	; (8914 <radio_reset+0x2c>)
    88f2:	2200      	movs	r2, #0
    88f4:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    88f8:	2201      	movs	r2, #1
    88fa:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    88fe:	4a06      	ldr	r2, [pc, #24]	; (8918 <radio_reset+0x30>)
    8900:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    8902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    8906:	f023 0301 	bic.w	r3, r3, #1
    890a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    890e:	6013      	str	r3, [r2, #0]
}
    8910:	bd08      	pop	{r3, pc}
    8912:	bf00      	nop
    8914:	40001000 	.word	0x40001000
    8918:	40001774 	.word	0x40001774

0000891c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    891c:	4b06      	ldr	r3, [pc, #24]	; (8938 <radio_phy_set+0x1c>)
	switch (phy) {
    891e:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    8920:	bf0c      	ite	eq
    8922:	2204      	moveq	r2, #4
    8924:	2203      	movne	r2, #3
    8926:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    892a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    892e:	f042 0201 	orr.w	r2, r2, #1
    8932:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
    8936:	4770      	bx	lr
    8938:	40001000 	.word	0x40001000

0000893c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    893c:	4b01      	ldr	r3, [pc, #4]	; (8944 <radio_tx_power_set+0x8>)
    893e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    8942:	4770      	bx	lr
    8944:	40001000 	.word	0x40001000

00008948 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    8948:	4b01      	ldr	r3, [pc, #4]	; (8950 <radio_freq_chan_set+0x8>)
    894a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
    894e:	4770      	bx	lr
    8950:	40001000 	.word	0x40001000

00008954 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    8954:	4b07      	ldr	r3, [pc, #28]	; (8974 <radio_whiten_iv_set+0x20>)
    8956:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    895a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    895e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    8962:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    8966:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    896a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    896e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    8972:	4770      	bx	lr
    8974:	40001000 	.word	0x40001000

00008978 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    8978:	4a0a      	ldr	r2, [pc, #40]	; (89a4 <radio_aa_set+0x2c>)
    897a:	2300      	movs	r3, #0
    897c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    8980:	2301      	movs	r3, #1
    8982:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    8986:	78c3      	ldrb	r3, [r0, #3]
    8988:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    898c:	7843      	ldrb	r3, [r0, #1]
    898e:	7881      	ldrb	r1, [r0, #2]
    8990:	041b      	lsls	r3, r3, #16
    8992:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    8996:	7801      	ldrb	r1, [r0, #0]
    8998:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    899c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
    89a0:	4770      	bx	lr
    89a2:	bf00      	nop
    89a4:	40001000 	.word	0x40001000

000089a8 <radio_pkt_configure>:
	switch (phy) {
    89a8:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    89ac:	2b02      	cmp	r3, #2
{
    89ae:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    89b0:	bf0c      	ite	eq
    89b2:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
    89b6:	2400      	movne	r4, #0
	if (dc) {
    89b8:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    89ba:	f1c0 0308 	rsb	r3, r0, #8
    89be:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    89c2:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    89c6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    89ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    89ce:	4a0b      	ldr	r2, [pc, #44]	; (89fc <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
    89d0:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    89d4:	bf48      	it	mi
    89d6:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
    89da:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    89dc:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    89e0:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    89e4:	4b06      	ldr	r3, [pc, #24]	; (8a00 <radio_pkt_configure+0x58>)
    89e6:	4003      	ands	r3, r0
    89e8:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    89ec:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    89f0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    89f4:	4319      	orrs	r1, r3
    89f6:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
    89fa:	bd10      	pop	{r4, pc}
    89fc:	40001000 	.word	0x40001000
    8a00:	fef80000 	.word	0xfef80000

00008a04 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
    8a04:	4b01      	ldr	r3, [pc, #4]	; (8a0c <radio_pkt_rx_set+0x8>)
    8a06:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
    8a0a:	4770      	bx	lr
    8a0c:	40001000 	.word	0x40001000

00008a10 <radio_pkt_tx_set>:
    8a10:	4b01      	ldr	r3, [pc, #4]	; (8a18 <radio_pkt_tx_set+0x8>)
    8a12:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    8a16:	4770      	bx	lr
    8a18:	40001000 	.word	0x40001000

00008a1c <radio_tx_ready_delay_get>:
	switch (phy) {
    8a1c:	2802      	cmp	r0, #2
}
    8a1e:	bf0c      	ite	eq
    8a20:	2028      	moveq	r0, #40	; 0x28
    8a22:	2029      	movne	r0, #41	; 0x29
    8a24:	4770      	bx	lr

00008a26 <radio_tx_chain_delay_get>:
}
    8a26:	2001      	movs	r0, #1
    8a28:	4770      	bx	lr

00008a2a <radio_rx_ready_delay_get>:
}
    8a2a:	2029      	movs	r0, #41	; 0x29
    8a2c:	4770      	bx	lr

00008a2e <radio_rx_chain_delay_get>:
	switch (phy) {
    8a2e:	2802      	cmp	r0, #2
}
    8a30:	bf0c      	ite	eq
    8a32:	2006      	moveq	r0, #6
    8a34:	200a      	movne	r0, #10
    8a36:	4770      	bx	lr

00008a38 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)NRF_RADIO + radio_task)) = 0x1UL;
    8a38:	4b01      	ldr	r3, [pc, #4]	; (8a40 <radio_rx_enable+0x8>)
    8a3a:	2201      	movs	r2, #1
    8a3c:	601a      	str	r2, [r3, #0]
}
    8a3e:	4770      	bx	lr
    8a40:	40001004 	.word	0x40001004

00008a44 <radio_tx_enable>:
    8a44:	4b01      	ldr	r3, [pc, #4]	; (8a4c <radio_tx_enable+0x8>)
    8a46:	2201      	movs	r2, #1
    8a48:	601a      	str	r2, [r3, #0]
}
    8a4a:	4770      	bx	lr
    8a4c:	40001000 	.word	0x40001000

00008a50 <radio_disable>:
    NRF_PPI->CHENCLR = mask;
    8a50:	4a07      	ldr	r2, [pc, #28]	; (8a70 <radio_disable+0x20>)
    8a52:	f44f 6390 	mov.w	r3, #1152	; 0x480
    8a56:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    NRF_PPI->TASKS_CHG[(uint32_t) group].EN = NRF_PPI_TASK_SET;
}

__STATIC_INLINE void nrf_ppi_group_disable(nrf_ppi_channel_group_t group)
{
    NRF_PPI->TASKS_CHG[(uint32_t) group].DIS = NRF_PPI_TASK_SET;
    8a5a:	2301      	movs	r3, #1
    8a5c:	6053      	str	r3, [r2, #4]
    8a5e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    8a60:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    8a64:	2100      	movs	r1, #0
    8a66:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    8a6a:	6113      	str	r3, [r2, #16]
}
    8a6c:	4770      	bx	lr
    8a6e:	bf00      	nop
    8a70:	4001f000 	.word	0x4001f000

00008a74 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    8a74:	4b04      	ldr	r3, [pc, #16]	; (8a88 <radio_status_reset+0x14>)
    8a76:	2200      	movs	r2, #0
    8a78:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    8a7c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    8a80:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    8a84:	4770      	bx	lr
    8a86:	bf00      	nop
    8a88:	40001000 	.word	0x40001000

00008a8c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    8a8c:	4b03      	ldr	r3, [pc, #12]	; (8a9c <radio_is_ready+0x10>)
    8a8e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    8a92:	3000      	adds	r0, #0
    8a94:	bf18      	it	ne
    8a96:	2001      	movne	r0, #1
    8a98:	4770      	bx	lr
    8a9a:	bf00      	nop
    8a9c:	40001000 	.word	0x40001000

00008aa0 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    8aa0:	4b03      	ldr	r3, [pc, #12]	; (8ab0 <radio_is_done+0x10>)
    8aa2:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    8aa6:	3000      	adds	r0, #0
    8aa8:	bf18      	it	ne
    8aaa:	2001      	movne	r0, #1
    8aac:	4770      	bx	lr
    8aae:	bf00      	nop
    8ab0:	40001000 	.word	0x40001000

00008ab4 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    8ab4:	4b03      	ldr	r3, [pc, #12]	; (8ac4 <radio_is_idle+0x10>)
    8ab6:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    8aba:	fab0 f080 	clz	r0, r0
    8abe:	0940      	lsrs	r0, r0, #5
    8ac0:	4770      	bx	lr
    8ac2:	bf00      	nop
    8ac4:	40001000 	.word	0x40001000

00008ac8 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    8ac8:	4b04      	ldr	r3, [pc, #16]	; (8adc <radio_crc_configure+0x14>)
    8aca:	f240 1203 	movw	r2, #259	; 0x103
    8ace:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    8ad2:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    8ad6:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
    8ada:	4770      	bx	lr
    8adc:	40001000 	.word	0x40001000

00008ae0 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    8ae0:	4b03      	ldr	r3, [pc, #12]	; (8af0 <radio_crc_is_valid+0x10>)
    8ae2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    8ae6:	3000      	adds	r0, #0
    8ae8:	bf18      	it	ne
    8aea:	2001      	movne	r0, #1
    8aec:	4770      	bx	lr
    8aee:	bf00      	nop
    8af0:	40001000 	.word	0x40001000

00008af4 <radio_pkt_empty_get>:
}
    8af4:	4800      	ldr	r0, [pc, #0]	; (8af8 <radio_pkt_empty_get+0x4>)
    8af6:	4770      	bx	lr
    8af8:	20000f14 	.word	0x20000f14

00008afc <radio_pkt_scratch_get>:
}
    8afc:	4800      	ldr	r0, [pc, #0]	; (8b00 <radio_pkt_scratch_get+0x4>)
    8afe:	4770      	bx	lr
    8b00:	20000f18 	.word	0x20000f18

00008b04 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    8b04:	4b04      	ldr	r3, [pc, #16]	; (8b18 <radio_switch_complete_and_rx+0x14>)
    8b06:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    8b08:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    8b0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    8b0e:	4602      	mov	r2, r0
    8b10:	4608      	mov	r0, r1
    8b12:	f7ff be47 	b.w	87a4 <sw_switch.isra.10>
    8b16:	bf00      	nop
    8b18:	40001000 	.word	0x40001000

00008b1c <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    8b1c:	4b03      	ldr	r3, [pc, #12]	; (8b2c <radio_switch_complete_and_tx+0x10>)
    8b1e:	2103      	movs	r1, #3
    8b20:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    8b24:	4601      	mov	r1, r0
    8b26:	2001      	movs	r0, #1
    8b28:	f7ff be3c 	b.w	87a4 <sw_switch.isra.10>
    8b2c:	40001000 	.word	0x40001000

00008b30 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    8b30:	4b05      	ldr	r3, [pc, #20]	; (8b48 <radio_switch_complete_and_disable+0x18>)
    8b32:	2203      	movs	r2, #3
    8b34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_PPI->CHENCLR = mask;
    8b38:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    8b3c:	f44f 6290 	mov.w	r2, #1152	; 0x480
    8b40:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_ppi_channels_disable(HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
				 HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_DISABLE);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    8b44:	4770      	bx	lr
    8b46:	bf00      	nop
    8b48:	40001000 	.word	0x40001000

00008b4c <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    8b4c:	4a03      	ldr	r2, [pc, #12]	; (8b5c <radio_rssi_measure+0x10>)
    8b4e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    8b52:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    8b56:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
    8b5a:	4770      	bx	lr
    8b5c:	40001000 	.word	0x40001000

00008b60 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    8b60:	4b01      	ldr	r3, [pc, #4]	; (8b68 <radio_rssi_get+0x8>)
    8b62:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    8b66:	4770      	bx	lr
    8b68:	40001000 	.word	0x40001000

00008b6c <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    8b6c:	4b02      	ldr	r3, [pc, #8]	; (8b78 <radio_rssi_status_reset+0xc>)
    8b6e:	2200      	movs	r2, #0
    8b70:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
    8b74:	4770      	bx	lr
    8b76:	bf00      	nop
    8b78:	40001000 	.word	0x40001000

00008b7c <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    8b7c:	4b03      	ldr	r3, [pc, #12]	; (8b8c <radio_rssi_is_ready+0x10>)
    8b7e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    8b82:	3000      	adds	r0, #0
    8b84:	bf18      	it	ne
    8b86:	2001      	movne	r0, #1
    8b88:	4770      	bx	lr
    8b8a:	bf00      	nop
    8b8c:	40001000 	.word	0x40001000

00008b90 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    8b90:	b530      	push	{r4, r5, lr}
    8b92:	2400      	movs	r4, #0
    8b94:	00a3      	lsls	r3, r4, #2
    8b96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    8b9e:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    8ba0:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    8ba4:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    8ba6:	8895      	ldrh	r5, [r2, #4]
    8ba8:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
    8bac:	2c08      	cmp	r4, #8
		bdaddr += 6;
    8bae:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
    8bb2:	d1ef      	bne.n	8b94 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    8bb4:	4b02      	ldr	r3, [pc, #8]	; (8bc0 <radio_filter_configure+0x30>)
    8bb6:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    8bba:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
    8bbe:	bd30      	pop	{r4, r5, pc}
    8bc0:	40001000 	.word	0x40001000

00008bc4 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    8bc4:	4a03      	ldr	r2, [pc, #12]	; (8bd4 <radio_filter_disable+0x10>)
    8bc6:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    8bca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    8bce:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
    8bd2:	4770      	bx	lr
    8bd4:	40001000 	.word	0x40001000

00008bd8 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    8bd8:	4b02      	ldr	r3, [pc, #8]	; (8be4 <radio_filter_status_reset+0xc>)
    8bda:	2200      	movs	r2, #0
    8bdc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
    8be0:	4770      	bx	lr
    8be2:	bf00      	nop
    8be4:	40001000 	.word	0x40001000

00008be8 <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    8be8:	4b03      	ldr	r3, [pc, #12]	; (8bf8 <radio_filter_has_match+0x10>)
    8bea:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    8bee:	3000      	adds	r0, #0
    8bf0:	bf18      	it	ne
    8bf2:	2001      	movne	r0, #1
    8bf4:	4770      	bx	lr
    8bf6:	bf00      	nop
    8bf8:	40001000 	.word	0x40001000

00008bfc <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    8bfc:	4b01      	ldr	r3, [pc, #4]	; (8c04 <radio_filter_match_get+0x8>)
    8bfe:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    8c02:	4770      	bx	lr
    8c04:	40001000 	.word	0x40001000

00008c08 <radio_tmr_status_reset>:
}
__STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_rtc, uint32_t mask)
{
    p_rtc->EVTENCLR = mask;
    8c08:	4b05      	ldr	r3, [pc, #20]	; (8c20 <radio_tmr_status_reset+0x18>)
    8c0a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8c0e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    8c12:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    8c16:	227f      	movs	r2, #127	; 0x7f
    8c18:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_DISABLE |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			HAL_TRIGGER_CRYPT_PPI_DISABLE);
}
    8c1c:	4770      	bx	lr
    8c1e:	bf00      	nop
    8c20:	4000b000 	.word	0x4000b000

00008c24 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_write(SW_SWITCH_TIMER,
    8c24:	4b03      	ldr	r3, [pc, #12]	; (8c34 <radio_tmr_tifs_set+0x10>)
    8c26:	4a04      	ldr	r2, [pc, #16]	; (8c38 <radio_tmr_tifs_set+0x14>)
    8c28:	781b      	ldrb	r3, [r3, #0]
    8c2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    8c2e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			   SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    8c32:	4770      	bx	lr
    8c34:	20001024 	.word	0x20001024
    8c38:	40009000 	.word	0x40009000

00008c3c <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    8c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    8c3e:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    8c42:	4c31      	ldr	r4, [pc, #196]	; (8d08 <radio_tmr_start+0xcc>)
    p_rtc->CC[ch] = cc_val;
    8c44:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8d20 <radio_tmr_start+0xe4>
    8c48:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    8c4c:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
    8c4e:	bf88      	it	hi
    8c50:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8c54:	4b2d      	ldr	r3, [pc, #180]	; (8d0c <radio_tmr_start+0xd0>)
	}
	remainder /= 1000000UL;
    8c56:	4c2e      	ldr	r4, [pc, #184]	; (8d10 <radio_tmr_start+0xd4>)
		remainder += 30517578UL;
    8c58:	bf82      	ittt	hi
    8c5a:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
    8c5e:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
    8c62:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
    8c66:	2501      	movs	r5, #1
	remainder /= 1000000UL;
    8c68:	fbb2 f4f4 	udiv	r4, r2, r4

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
    8c6c:	2600      	movs	r6, #0
	EVENT_TIMER->PRESCALER = 4;
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    8c6e:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
    8c70:	2704      	movs	r7, #4
    8c72:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
    8c74:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
    8c78:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    8c7c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[cc_channel] = cc_value;
    8c80:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
    8c84:	f8cc 1548 	str.w	r1, [ip, #1352]	; 0x548
    p_rtc->EVTENSET = mask;
    8c88:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    8c8c:	f8cc 1344 	str.w	r1, [ip, #836]	; 0x344
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    8c90:	4920      	ldr	r1, [pc, #128]	; (8d14 <radio_tmr_start+0xd8>)
	EVENT_TIMER->MODE = 0;
    8c92:	3b0c      	subs	r3, #12
    8c94:	f50c 7ca4 	add.w	ip, ip, #328	; 0x148
    8c98:	f8c1 c518 	str.w	ip, [r1, #1304]	; 0x518
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    8c9c:	f8c1 351c 	str.w	r3, [r1, #1308]	; 0x51c
    NRF_PPI->CHENSET = mask;
    8ca0:	f8c1 2504 	str.w	r2, [r1, #1284]	; 0x504
	nrf_ppi_channel_endpoint_setup(HAL_EVENT_TIMER_START_PPI,
				       HAL_EVENT_TIMER_START_EVT,
				       HAL_EVENT_TIMER_START_TASK);
	nrf_ppi_channels_enable(HAL_EVENT_TIMER_START_PPI_ENABLE);

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    8ca4:	f7ff fd66 	bl	8774 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
    8ca8:	4b1b      	ldr	r3, [pc, #108]	; (8d18 <radio_tmr_start+0xdc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8caa:	4a1c      	ldr	r2, [pc, #112]	; (8d1c <radio_tmr_start+0xe0>)
    8cac:	6015      	str	r5, [r2, #0]
    8cae:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    8cb2:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    8cb6:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    8cba:	601d      	str	r5, [r3, #0]
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_START);
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
    8cbc:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    8cc0:	3b74      	subs	r3, #116	; 0x74
    8cc2:	f8c1 3548 	str.w	r3, [r1, #1352]	; 0x548
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    8cc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    8cca:	3334      	adds	r3, #52	; 0x34
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
    8ccc:	f8c1 254c 	str.w	r2, [r1, #1356]	; 0x54c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    8cd0:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    8cd4:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    8cd8:	33c4      	adds	r3, #196	; 0xc4
    8cda:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    8cde:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
    8ce2:	3bc0      	subs	r3, #192	; 0xc0
    8ce4:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    8ce8:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    8cec:	33c8      	adds	r3, #200	; 0xc8
    8cee:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    8cf2:	f44f 6310 	mov.w	r3, #2304	; 0x900
    8cf6:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    8cfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    8cfe:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_1_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_1_INCLUDE;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
    8d02:	4620      	mov	r0, r4
    8d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8d06:	bf00      	nop
    8d08:	7ff0bdbf 	.word	0x7ff0bdbf
    8d0c:	4000800c 	.word	0x4000800c
    8d10:	000f4240 	.word	0x000f4240
    8d14:	4001f000 	.word	0x4001f000
    8d18:	40009000 	.word	0x40009000
    8d1c:	4000900c 	.word	0x4000900c
    8d20:	4000b000 	.word	0x4000b000

00008d24 <radio_tmr_stop>:
    8d24:	4a04      	ldr	r2, [pc, #16]	; (8d38 <radio_tmr_stop+0x14>)
    8d26:	2301      	movs	r3, #1
    8d28:	6013      	str	r3, [r2, #0]
    8d2a:	60d3      	str	r3, [r2, #12]
    8d2c:	320c      	adds	r2, #12
    8d2e:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
    8d32:	6013      	str	r3, [r2, #0]
    8d34:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    8d36:	4770      	bx	lr
    8d38:	40008004 	.word	0x40008004

00008d3c <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
    8d3c:	4b0c      	ldr	r3, [pc, #48]	; (8d70 <radio_tmr_hcto_configure+0x34>)
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    8d3e:	4a0d      	ldr	r2, [pc, #52]	; (8d74 <radio_tmr_hcto_configure+0x38>)
    8d40:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    8d44:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    8d48:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    8d4c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    8d50:	3240      	adds	r2, #64	; 0x40
    8d52:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    8d56:	f502 7280 	add.w	r2, r2, #256	; 0x100
    8d5a:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    8d5e:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    8d62:	3a34      	subs	r2, #52	; 0x34
    8d64:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    NRF_PPI->CHENSET = mask;
    8d68:	2218      	movs	r2, #24
    8d6a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
				       HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT,
				       HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK);

	nrf_ppi_channels_enable(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE |
				HAL_RADIO_DISABLE_ON_HCTO_PPI_ENABLE);
}
    8d6e:	4770      	bx	lr
    8d70:	40008000 	.word	0x40008000
    8d74:	40001104 	.word	0x40001104

00008d78 <radio_tmr_aa_capture>:
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    8d78:	4b0b      	ldr	r3, [pc, #44]	; (8da8 <radio_tmr_aa_capture+0x30>)
    8d7a:	4a0c      	ldr	r2, [pc, #48]	; (8dac <radio_tmr_aa_capture+0x34>)
    8d7c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    8d80:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    8d84:	3240      	adds	r2, #64	; 0x40
    8d86:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    8d8a:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    8d8e:	3a3c      	subs	r2, #60	; 0x3c
    8d90:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    8d94:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    8d98:	3240      	adds	r2, #64	; 0x40
    8d9a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    NRF_PPI->CHENSET = mask;
    8d9e:	220c      	movs	r2, #12
    8da0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
				       HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK);

	nrf_ppi_channels_enable(
		HAL_RADIO_READY_TIME_CAPTURE_PPI_ENABLE |
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE);
}
    8da4:	4770      	bx	lr
    8da6:	bf00      	nop
    8da8:	4001f000 	.word	0x4001f000
    8dac:	40001100 	.word	0x40001100

00008db0 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    8db0:	4b01      	ldr	r3, [pc, #4]	; (8db8 <radio_tmr_aa_get+0x8>)
    8db2:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    8db6:	4770      	bx	lr
    8db8:	40008000 	.word	0x40008000

00008dbc <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    8dbc:	4b01      	ldr	r3, [pc, #4]	; (8dc4 <radio_tmr_aa_save+0x8>)
    8dbe:	6018      	str	r0, [r3, #0]
}
    8dc0:	4770      	bx	lr
    8dc2:	bf00      	nop
    8dc4:	2000101c 	.word	0x2000101c

00008dc8 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    8dc8:	4b01      	ldr	r3, [pc, #4]	; (8dd0 <radio_tmr_aa_restore+0x8>)
    8dca:	6818      	ldr	r0, [r3, #0]
    8dcc:	4770      	bx	lr
    8dce:	bf00      	nop
    8dd0:	2000101c 	.word	0x2000101c

00008dd4 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    8dd4:	4b01      	ldr	r3, [pc, #4]	; (8ddc <radio_tmr_ready_get+0x8>)
    8dd6:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    8dda:	4770      	bx	lr
    8ddc:	40008000 	.word	0x40008000

00008de0 <radio_tmr_end_capture>:
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    8de0:	4b06      	ldr	r3, [pc, #24]	; (8dfc <radio_tmr_end_capture+0x1c>)
    8de2:	4a07      	ldr	r2, [pc, #28]	; (8e00 <radio_tmr_end_capture+0x20>)
    8de4:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    8de8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    8dec:	323c      	adds	r2, #60	; 0x3c
    8dee:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    NRF_PPI->CHENSET = mask;
    8df2:	2220      	movs	r2, #32
    8df4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_ppi_channel_endpoint_setup(HAL_RADIO_END_TIME_CAPTURE_PPI,
				       HAL_RADIO_END_TIME_CAPTURE_PPI_EVT,
				       HAL_RADIO_END_TIME_CAPTURE_PPI_TASK);

	nrf_ppi_channels_enable(HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE);
}
    8df8:	4770      	bx	lr
    8dfa:	bf00      	nop
    8dfc:	4001f000 	.word	0x4001f000
    8e00:	4000110c 	.word	0x4000110c

00008e04 <radio_tmr_end_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    8e04:	4b01      	ldr	r3, [pc, #4]	; (8e0c <radio_tmr_end_get+0x8>)
    8e06:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
    8e0a:	4770      	bx	lr
    8e0c:	40008000 	.word	0x40008000

00008e10 <radio_tmr_tifs_base_get>:
    8e10:	4b01      	ldr	r3, [pc, #4]	; (8e18 <radio_tmr_tifs_base_get+0x8>)
    8e12:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
    8e16:	4770      	bx	lr
    8e18:	40008000 	.word	0x40008000

00008e1c <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    8e1c:	4b16      	ldr	r3, [pc, #88]	; (8e78 <radio_ccm_rx_pkt_set+0x5c>)
{
    8e1e:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    8e20:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    8e22:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    8e24:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    8e28:	4e14      	ldr	r6, [pc, #80]	; (8e7c <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    8e2a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    8e2e:	4d14      	ldr	r5, [pc, #80]	; (8e80 <radio_ccm_rx_pkt_set+0x64>)
    8e30:	2902      	cmp	r1, #2
    8e32:	bf0c      	ite	eq
    8e34:	4629      	moveq	r1, r5
    8e36:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
    8e38:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    8e3c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    8e40:	4810      	ldr	r0, [pc, #64]	; (8e84 <radio_ccm_rx_pkt_set+0x68>)
    8e42:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    8e46:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    8e4a:	4a0f      	ldr	r2, [pc, #60]	; (8e88 <radio_ccm_rx_pkt_set+0x6c>)
    8e4c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    8e50:	490e      	ldr	r1, [pc, #56]	; (8e8c <radio_ccm_rx_pkt_set+0x70>)
    8e52:	4a0f      	ldr	r2, [pc, #60]	; (8e90 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
    8e54:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    8e58:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    8e5c:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
    8e60:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    8e64:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    8e68:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
    NRF_PPI->CHENSET = mask;
    8e6c:	2140      	movs	r1, #64	; 0x40
    8e6e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                          nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8e72:	2201      	movs	r2, #1
    8e74:	601a      	str	r2, [r3, #0]
	nrf_ppi_channels_enable(HAL_TRIGGER_CRYPT_PPI_ENABLE);

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
    8e76:	bd70      	pop	{r4, r5, r6, pc}
    8e78:	4000f000 	.word	0x4000f000
    8e7c:	01000001 	.word	0x01000001
    8e80:	01010001 	.word	0x01010001
    8e84:	20000f18 	.word	0x20000f18
    8e88:	20000e08 	.word	0x20000e08
    8e8c:	40001104 	.word	0x40001104
    8e90:	4001f000 	.word	0x4001f000

00008e94 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    8e94:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    8e96:	4b0e      	ldr	r3, [pc, #56]	; (8ed0 <radio_ccm_tx_pkt_set+0x3c>)
    8e98:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    8e9a:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    8e9c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    8ea0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    8ea4:	4c0b      	ldr	r4, [pc, #44]	; (8ed4 <radio_ccm_tx_pkt_set+0x40>)
    8ea6:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    8eaa:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    8eae:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    8eb2:	4809      	ldr	r0, [pc, #36]	; (8ed8 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    8eb4:	4909      	ldr	r1, [pc, #36]	; (8edc <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    8eb6:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    8eba:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    8ebe:	2101      	movs	r1, #1
    8ec0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    8ec4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    8ec8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    8ecc:	6019      	str	r1, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
    8ece:	bd10      	pop	{r4, pc}
    8ed0:	4000f000 	.word	0x4000f000
    8ed4:	01010000 	.word	0x01010000
    8ed8:	20000f18 	.word	0x20000f18
    8edc:	20000e08 	.word	0x20000e08

00008ee0 <radio_ccm_is_done>:
    return ((uint32_t)p_reg + (uint32_t)event);
}

__STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    8ee0:	4b0c      	ldr	r3, [pc, #48]	; (8f14 <radio_ccm_is_done+0x34>)
    8ee2:	2202      	movs	r2, #2
    8ee4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

u32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    8ee8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    8eec:	b16a      	cbz	r2, 8f0a <radio_ccm_is_done+0x2a>
}

__STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    8eee:	2202      	movs	r2, #2
    8ef0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    8ef4:	4a08      	ldr	r2, [pc, #32]	; (8f18 <radio_ccm_is_done+0x38>)
    8ef6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8efa:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
		__WFE();
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    8efe:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    8f02:	fab0 f080 	clz	r0, r0
    8f06:	0940      	lsrs	r0, r0, #5
    8f08:	4770      	bx	lr
		__WFE();
    8f0a:	bf20      	wfe
		__SEV();
    8f0c:	bf40      	sev
		__WFE();
    8f0e:	bf20      	wfe
    8f10:	e7ea      	b.n	8ee8 <radio_ccm_is_done+0x8>
    8f12:	bf00      	nop
    8f14:	4000f000 	.word	0x4000f000
    8f18:	e000e100 	.word	0xe000e100

00008f1c <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    8f1c:	4b03      	ldr	r3, [pc, #12]	; (8f2c <radio_ccm_mic_is_valid+0x10>)
    8f1e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    8f22:	3000      	adds	r0, #0
    8f24:	bf18      	it	ne
    8f26:	2001      	movne	r0, #1
    8f28:	4770      	bx	lr
    8f2a:	bf00      	nop
    8f2c:	4000f000 	.word	0x4000f000

00008f30 <radio_ar_match_get>:
	nrf_ppi_channels_enable(HAL_TRIGGER_AAR_PPI_ENABLE);
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    8f30:	4b01      	ldr	r3, [pc, #4]	; (8f38 <radio_ar_match_get+0x8>)
    8f32:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    8f36:	4770      	bx	lr
    8f38:	4000f000 	.word	0x4000f000

00008f3c <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    8f3c:	4a04      	ldr	r2, [pc, #16]	; (8f50 <radio_ar_status_reset+0x14>)
    8f3e:	2300      	movs	r3, #0
    8f40:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    8f44:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    8f48:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
    8f4c:	4770      	bx	lr
    8f4e:	bf00      	nop
    8f50:	40001000 	.word	0x40001000

00008f54 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    8f54:	4b08      	ldr	r3, [pc, #32]	; (8f78 <radio_ar_has_match+0x24>)
    8f56:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    8f5a:	b160      	cbz	r0, 8f76 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    8f5c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    8f60:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    8f64:	b138      	cbz	r0, 8f76 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    8f66:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    8f6a:	b120      	cbz	r0, 8f76 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    8f6c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    8f70:	fab0 f080 	clz	r0, r0
    8f74:	0940      	lsrs	r0, r0, #5
}
    8f76:	4770      	bx	lr
    8f78:	40001000 	.word	0x40001000

00008f7c <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    8f7c:	2901      	cmp	r1, #1
    8f7e:	d005      	beq.n	8f8c <mayfly_enable_cb+0x10>
    8f80:	4040      	eors	r0, r0
    8f82:	f380 8811 	msr	BASEPRI, r0
    8f86:	f04f 0004 	mov.w	r0, #4
    8f8a:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    8f8c:	2018      	movs	r0, #24
	if (enable) {
    8f8e:	b10a      	cbz	r2, 8f94 <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
    8f90:	f7f8 bd52 	b.w	1a38 <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
    8f94:	f7f8 bd60 	b.w	1a58 <_arch_irq_disable>

00008f98 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
    8f98:	b139      	cbz	r1, 8faa <mayfly_is_enabled+0x12>
    8f9a:	2901      	cmp	r1, #1
    8f9c:	d008      	beq.n	8fb0 <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    8f9e:	4040      	eors	r0, r0
    8fa0:	f380 8811 	msr	BASEPRI, r0
    8fa4:	f04f 0004 	mov.w	r0, #4
    8fa8:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    8faa:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
    8fac:	f7f8 bd68 	b.w	1a80 <_arch_irq_is_enabled>
    8fb0:	2018      	movs	r0, #24
    8fb2:	e7fb      	b.n	8fac <mayfly_is_enabled+0x14>

00008fb4 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    8fb4:	4288      	cmp	r0, r1
    8fb6:	d00a      	beq.n	8fce <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    8fb8:	b918      	cbnz	r0, 8fc2 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    8fba:	1e4b      	subs	r3, r1, #1
    8fbc:	4258      	negs	r0, r3
    8fbe:	4158      	adcs	r0, r3
    8fc0:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    8fc2:	2801      	cmp	r0, #1
    8fc4:	d105      	bne.n	8fd2 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    8fc6:	fab1 f081 	clz	r0, r1
    8fca:	0940      	lsrs	r0, r0, #5
    8fcc:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    8fce:	2001      	movs	r0, #1
    8fd0:	4770      	bx	lr
    8fd2:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    8fd4:	4770      	bx	lr
	...

00008fd8 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    8fd8:	4b08      	ldr	r3, [pc, #32]	; (8ffc <mayfly_pend+0x24>)
	(void)caller_id;

	switch (callee_id) {
    8fda:	b139      	cbz	r1, 8fec <mayfly_pend+0x14>
    8fdc:	2901      	cmp	r1, #1
    8fde:	d00a      	beq.n	8ff6 <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    8fe0:	4040      	eors	r0, r0
    8fe2:	f380 8811 	msr	BASEPRI, r0
    8fe6:	f04f 0004 	mov.w	r0, #4
    8fea:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8ff0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
    8ff4:	4770      	bx	lr
    8ff6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8ffa:	e7f9      	b.n	8ff0 <mayfly_pend+0x18>
    8ffc:	e000e100 	.word	0xe000e100

00009000 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    9000:	2803      	cmp	r0, #3
    9002:	d905      	bls.n	9010 <hal_ticker_instance0_caller_id_get+0x10>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    9004:	4040      	eors	r0, r0
    9006:	f380 8811 	msr	BASEPRI, r0
    900a:	f04f 0004 	mov.w	r0, #4
    900e:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    9010:	4b02      	ldr	r3, [pc, #8]	; (901c <hal_ticker_instance0_caller_id_get+0x1c>)
    9012:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    9014:	2800      	cmp	r0, #0
    9016:	d0f5      	beq.n	9004 <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
    9018:	4770      	bx	lr
    901a:	bf00      	nop
    901c:	0000b303 	.word	0x0000b303

00009020 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    9020:	3802      	subs	r0, #2
{
    9022:	b410      	push	{r4}
    9024:	461c      	mov	r4, r3
	switch (caller_id) {
    9026:	2803      	cmp	r0, #3
    9028:	d816      	bhi.n	9058 <hal_ticker_instance0_sched+0x38>
    902a:	e8df f000 	tbb	[pc, r0]
    902e:	0b02      	.short	0x0b02
    9030:	2411      	.short	0x2411
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    9032:	2903      	cmp	r1, #3
    9034:	d110      	bne.n	9058 <hal_ticker_instance0_sched+0x38>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
    9036:	4b13      	ldr	r3, [pc, #76]	; (9084 <hal_ticker_instance0_sched+0x64>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    9038:	2100      	movs	r1, #0
			m.param = instance;
    903a:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    903c:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    903e:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    9040:	f7f9 bbc8 	b.w	27d4 <mayfly_enqueue>
		switch (callee_id) {
    9044:	2904      	cmp	r1, #4
    9046:	d107      	bne.n	9058 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    9048:	4b0f      	ldr	r3, [pc, #60]	; (9088 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    904a:	2101      	movs	r1, #1
			m.param = instance;
    904c:	609c      	str	r4, [r3, #8]
    904e:	e7f5      	b.n	903c <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    9050:	2903      	cmp	r1, #3
    9052:	d007      	beq.n	9064 <hal_ticker_instance0_sched+0x44>
    9054:	2904      	cmp	r1, #4
    9056:	d00a      	beq.n	906e <hal_ticker_instance0_sched+0x4e>
		LL_ASSERT(0);
    9058:	4040      	eors	r0, r0
    905a:	f380 8811 	msr	BASEPRI, r0
    905e:	f04f 0004 	mov.w	r0, #4
    9062:	df02      	svc	2
			m.param = instance;
    9064:	4b09      	ldr	r3, [pc, #36]	; (908c <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    9066:	2100      	movs	r1, #0
			m.param = instance;
    9068:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    906a:	2001      	movs	r0, #1
    906c:	e7e7      	b.n	903e <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
    906e:	4b08      	ldr	r3, [pc, #32]	; (9090 <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    9070:	2101      	movs	r1, #1
			m.param = instance;
    9072:	609c      	str	r4, [r3, #8]
    9074:	e7f9      	b.n	906a <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
    9076:	2904      	cmp	r1, #4
    9078:	d1ee      	bne.n	9058 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    907a:	4b06      	ldr	r3, [pc, #24]	; (9094 <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    907c:	2101      	movs	r1, #1
			m.param = instance;
    907e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    9080:	2003      	movs	r0, #3
    9082:	e7dc      	b.n	903e <hal_ticker_instance0_sched+0x1e>
    9084:	20002ed8 	.word	0x20002ed8
    9088:	20002ee8 	.word	0x20002ee8
    908c:	20002ef8 	.word	0x20002ef8
    9090:	20002f08 	.word	0x20002f08
    9094:	20002f18 	.word	0x20002f18

00009098 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
    9098:	4601      	mov	r1, r0
    909a:	2000      	movs	r0, #0
    909c:	f7ff bb14 	b.w	86c8 <cntr_cmp_set>

000090a0 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
    90a0:	4770      	bx	lr
	...

000090a4 <net_buf_pool_get>:
}
    90a4:	4b01      	ldr	r3, [pc, #4]	; (90ac <net_buf_pool_get+0x8>)
    90a6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    90aa:	4770      	bx	lr
    90ac:	20002fec 	.word	0x20002fec

000090b0 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    90b0:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    90b2:	4b04      	ldr	r3, [pc, #16]	; (90c4 <net_buf_id+0x14>)
    90b4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    90b8:	69db      	ldr	r3, [r3, #28]
    90ba:	1ac0      	subs	r0, r0, r3
}
    90bc:	4b02      	ldr	r3, [pc, #8]	; (90c8 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    90be:	10c0      	asrs	r0, r0, #3
}
    90c0:	4358      	muls	r0, r3
    90c2:	4770      	bx	lr
    90c4:	20002fec 	.word	0x20002fec
    90c8:	aaaaaaab 	.word	0xaaaaaaab

000090cc <fixed_data_alloc>:
{
    90cc:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    90ce:	4b09      	ldr	r3, [pc, #36]	; (90f4 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    90d0:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    90d2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
    90d6:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    90d8:	699b      	ldr	r3, [r3, #24]
    90da:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    90dc:	6823      	ldr	r3, [r4, #0]
    90de:	429a      	cmp	r2, r3
    90e0:	bf94      	ite	ls
    90e2:	600a      	strls	r2, [r1, #0]
    90e4:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    90e6:	f7ff ffe3 	bl	90b0 <net_buf_id>
    90ea:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    90ee:	fb02 3000 	mla	r0, r2, r0, r3
    90f2:	bd10      	pop	{r4, pc}
    90f4:	20002fec 	.word	0x20002fec

000090f8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    90f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    90fc:	4605      	mov	r5, r0
    90fe:	9101      	str	r1, [sp, #4]
    9100:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    9102:	f001 f9e7 	bl	a4d4 <_impl_k_uptime_get_32>
    9106:	4607      	mov	r7, r0
	__asm__ volatile(
    9108:	f04f 0320 	mov.w	r3, #32
    910c:	f3ef 8811 	mrs	r8, BASEPRI
    9110:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    9114:	8a6b      	ldrh	r3, [r5, #18]
    9116:	2b00      	cmp	r3, #0
    9118:	d03d      	beq.n	9196 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    911a:	8a2a      	ldrh	r2, [r5, #16]
    911c:	429a      	cmp	r2, r3
    911e:	d92a      	bls.n	9176 <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    9120:	2100      	movs	r1, #0
    9122:	4628      	mov	r0, r5
    9124:	f000 feb6 	bl	9e94 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    9128:	4604      	mov	r4, r0
    912a:	b320      	cbz	r0, 9176 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    912c:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    9130:	9b01      	ldr	r3, [sp, #4]
    9132:	2b00      	cmp	r3, #0
    9134:	d03c      	beq.n	91b0 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    9136:	1c73      	adds	r3, r6, #1
    9138:	2b01      	cmp	r3, #1
    913a:	d906      	bls.n	914a <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    913c:	f001 f9ca 	bl	a4d4 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    9140:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
    9142:	42b0      	cmp	r0, r6
    9144:	bf94      	ite	ls
    9146:	1a36      	subls	r6, r6, r0
    9148:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    914a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    914c:	4f1e      	ldr	r7, [pc, #120]	; (91c8 <net_buf_alloc_len+0xd0>)
    914e:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    9152:	4632      	mov	r2, r6
    9154:	699b      	ldr	r3, [r3, #24]
    9156:	681b      	ldr	r3, [r3, #0]
    9158:	a901      	add	r1, sp, #4
    915a:	681b      	ldr	r3, [r3, #0]
    915c:	4620      	mov	r0, r4
    915e:	4798      	blx	r3
    9160:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    9162:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    9164:	bb28      	cbnz	r0, 91b2 <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    9166:	79a0      	ldrb	r0, [r4, #6]
    9168:	4621      	mov	r1, r4
    916a:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    916e:	f000 fe72 	bl	9e56 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    9172:	462c      	mov	r4, r5
    9174:	e018      	b.n	91a8 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
    9176:	8a6b      	ldrh	r3, [r5, #18]
    9178:	1e5a      	subs	r2, r3, #1
    917a:	826a      	strh	r2, [r5, #18]
    917c:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    9180:	8a2c      	ldrh	r4, [r5, #16]
    9182:	1ae4      	subs	r4, r4, r3
    9184:	69eb      	ldr	r3, [r5, #28]
    9186:	2218      	movs	r2, #24
    9188:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
    918c:	4b0e      	ldr	r3, [pc, #56]	; (91c8 <net_buf_alloc_len+0xd0>)
    918e:	1aed      	subs	r5, r5, r3
    9190:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    9192:	71a5      	strb	r5, [r4, #6]
		goto success;
    9194:	e7cc      	b.n	9130 <net_buf_alloc_len+0x38>
    9196:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    919a:	4631      	mov	r1, r6
    919c:	4628      	mov	r0, r5
    919e:	f000 fe79 	bl	9e94 <_impl_k_queue_get>
	if (!buf) {
    91a2:	4604      	mov	r4, r0
    91a4:	2800      	cmp	r0, #0
    91a6:	d1c3      	bne.n	9130 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    91a8:	4620      	mov	r0, r4
    91aa:	b002      	add	sp, #8
    91ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    91b0:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    91b2:	2300      	movs	r3, #0
    91b4:	6023      	str	r3, [r4, #0]
    91b6:	2201      	movs	r2, #1
    91b8:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0;
    91ba:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
    91bc:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    91be:	6923      	ldr	r3, [r4, #16]
    91c0:	81e2      	strh	r2, [r4, #14]
    91c2:	60a3      	str	r3, [r4, #8]
	return buf;
    91c4:	e7f0      	b.n	91a8 <net_buf_alloc_len+0xb0>
    91c6:	bf00      	nop
    91c8:	20002fec 	.word	0x20002fec

000091cc <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    91cc:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    91ce:	685b      	ldr	r3, [r3, #4]
    91d0:	460a      	mov	r2, r1
    91d2:	6819      	ldr	r1, [r3, #0]
    91d4:	f7ff bf90 	b.w	90f8 <net_buf_alloc_len>

000091d8 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    91d8:	6883      	ldr	r3, [r0, #8]
    91da:	4419      	add	r1, r3
    91dc:	6001      	str	r1, [r0, #0]
}
    91de:	4770      	bx	lr

000091e0 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    91e0:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    91e2:	460a      	mov	r2, r1
    91e4:	6814      	ldr	r4, [r2, #0]
    91e6:	b914      	cbnz	r4, 91ee <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
    91e8:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    91ea:	f000 be39 	b.w	9e60 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    91ee:	7953      	ldrb	r3, [r2, #5]
    91f0:	f043 0301 	orr.w	r3, r3, #1
    91f4:	7153      	strb	r3, [r2, #5]
    91f6:	4622      	mov	r2, r4
    91f8:	e7f4      	b.n	91e4 <net_buf_put+0x4>
	...

000091fc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    91fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91fe:	4d15      	ldr	r5, [pc, #84]	; (9254 <net_buf_unref+0x58>)
    9200:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    9202:	2600      	movs	r6, #0
	while (buf) {
    9204:	b904      	cbnz	r4, 9208 <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    9206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    9208:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    920a:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    920c:	3b01      	subs	r3, #1
    920e:	b2db      	uxtb	r3, r3
    9210:	7123      	strb	r3, [r4, #4]
    9212:	2b00      	cmp	r3, #0
    9214:	d1f7      	bne.n	9206 <net_buf_unref+0xa>
		if (buf->__buf) {
    9216:	6921      	ldr	r1, [r4, #16]
    9218:	b159      	cbz	r1, 9232 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    921a:	7963      	ldrb	r3, [r4, #5]
    921c:	079b      	lsls	r3, r3, #30
    921e:	d407      	bmi.n	9230 <net_buf_unref+0x34>
	pool->alloc->cb->unref(buf, data);
    9220:	79a3      	ldrb	r3, [r4, #6]
    9222:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    9226:	4620      	mov	r0, r4
    9228:	699b      	ldr	r3, [r3, #24]
    922a:	681b      	ldr	r3, [r3, #0]
    922c:	689b      	ldr	r3, [r3, #8]
    922e:	4798      	blx	r3
			buf->__buf = NULL;
    9230:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
    9232:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    9234:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
    9236:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    923a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    923c:	695b      	ldr	r3, [r3, #20]
    923e:	b11b      	cbz	r3, 9248 <net_buf_unref+0x4c>
			pool->destroy(buf);
    9240:	4620      	mov	r0, r4
    9242:	4798      	blx	r3
{
    9244:	463c      	mov	r4, r7
    9246:	e7dd      	b.n	9204 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    9248:	4621      	mov	r1, r4
    924a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    924e:	f000 fe02 	bl	9e56 <k_queue_prepend>
    9252:	e7f7      	b.n	9244 <net_buf_unref+0x48>
    9254:	20002fec 	.word	0x20002fec

00009258 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    9258:	7903      	ldrb	r3, [r0, #4]
    925a:	3301      	adds	r3, #1
    925c:	7103      	strb	r3, [r0, #4]
	return buf;
}
    925e:	4770      	bx	lr

00009260 <net_buf_simple_add>:
	return buf->data + buf->len;
    9260:	8883      	ldrh	r3, [r0, #4]
    9262:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    9264:	4419      	add	r1, r3
    9266:	8081      	strh	r1, [r0, #4]
	return tail;
}
    9268:	18d0      	adds	r0, r2, r3
    926a:	4770      	bx	lr

0000926c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    926c:	b430      	push	{r4, r5}
    926e:	8883      	ldrh	r3, [r0, #4]
    9270:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
    9272:	189d      	adds	r5, r3, r2
    9274:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    9276:	18e0      	adds	r0, r4, r3
}
    9278:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    927a:	f7f8 bdb0 	b.w	1dde <memcpy>

0000927e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    927e:	8883      	ldrh	r3, [r0, #4]
    9280:	1a5b      	subs	r3, r3, r1
    9282:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    9284:	6803      	ldr	r3, [r0, #0]
    9286:	4419      	add	r1, r3
    9288:	6001      	str	r1, [r0, #0]
}
    928a:	4608      	mov	r0, r1
    928c:	4770      	bx	lr

0000928e <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile NRF_GPIO_Type *gpio = GPIO_STRUCT(dev);
    928e:	6800      	ldr	r0, [r0, #0]
    9290:	6880      	ldr	r0, [r0, #8]
    9292:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    9294:	b941      	cbnz	r1, 92a8 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    9296:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    929a:	fa21 f202 	lsr.w	r2, r1, r2
    929e:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    92a2:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    92a4:	2000      	movs	r0, #0
    92a6:	4770      	bx	lr
		*value = gpio->IN;
    92a8:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    92ac:	e7f9      	b.n	92a2 <gpio_nrf5_read+0x14>

000092ae <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile NRF_GPIO_Type *gpio = GPIO_STRUCT(dev);
    92ae:	6800      	ldr	r0, [r0, #0]
    92b0:	6880      	ldr	r0, [r0, #8]
    92b2:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    92b4:	b951      	cbnz	r1, 92cc <gpio_nrf5_write+0x1e>
    92b6:	2101      	movs	r1, #1
    92b8:	fa01 f202 	lsl.w	r2, r1, r2
		if (value) { /* 1 */
    92bc:	b11b      	cbz	r3, 92c6 <gpio_nrf5_write+0x18>
			gpio->OUTSET = BIT(pin);
    92be:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    92c2:	2000      	movs	r0, #0
    92c4:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    92c6:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    92ca:	e7fa      	b.n	92c2 <gpio_nrf5_write+0x14>
		gpio->OUT = value;
    92cc:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    92d0:	e7f7      	b.n	92c2 <gpio_nrf5_write+0x14>

000092d2 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    92d2:	6883      	ldr	r3, [r0, #8]
    92d4:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    92d6:	b172      	cbz	r2, 92f6 <gpio_nrf5_manage_callback+0x24>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    92d8:	6008      	str	r0, [r1, #0]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node);

Z_GENLIST_PREPEND(slist, snode);
    92da:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    92dc:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    92de:	b902      	cbnz	r2, 92e2 <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
    92e0:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    92e2:	2000      	movs	r0, #0
    92e4:	4770      	bx	lr
	parent->next = child;
    92e6:	6010      	str	r0, [r2, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode);
    92e8:	6858      	ldr	r0, [r3, #4]
    92ea:	4281      	cmp	r1, r0
	list->tail = node;
    92ec:	bf08      	it	eq
    92ee:	605a      	streq	r2, [r3, #4]
    92f0:	e00d      	b.n	930e <gpio_nrf5_manage_callback+0x3c>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    92f2:	4602      	mov	r2, r0
    92f4:	6800      	ldr	r0, [r0, #0]
    92f6:	2800      	cmp	r0, #0
    92f8:	d0f3      	beq.n	92e2 <gpio_nrf5_manage_callback+0x10>
    92fa:	4288      	cmp	r0, r1
    92fc:	d1f9      	bne.n	92f2 <gpio_nrf5_manage_callback+0x20>
    92fe:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
    9300:	2a00      	cmp	r2, #0
    9302:	d1f0      	bne.n	92e6 <gpio_nrf5_manage_callback+0x14>
    9304:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    9306:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
    9308:	4291      	cmp	r1, r2
    930a:	d100      	bne.n	930e <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
    930c:	6058      	str	r0, [r3, #4]
	parent->next = child;
    930e:	2300      	movs	r3, #0
    9310:	600b      	str	r3, [r1, #0]
    9312:	e7e6      	b.n	92e2 <gpio_nrf5_manage_callback+0x10>

00009314 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
    9314:	4b0c      	ldr	r3, [pc, #48]	; (9348 <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
    9316:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
    9318:	4d0c      	ldr	r5, [pc, #48]	; (934c <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
    931a:	681c      	ldr	r4, [r3, #0]
	for (i = GPIOTE_CH_BASE; i < GPIOTE_CH_NUM; i++) {
    931c:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
    931e:	fa24 f203 	lsr.w	r2, r4, r3
    9322:	07d2      	lsls	r2, r2, #31
    9324:	d508      	bpl.n	9338 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
    9326:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    932a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    932e:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
    9332:	4282      	cmp	r2, r0
    9334:	d100      	bne.n	9338 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
    9336:	b121      	cbz	r1, 9342 <gpiote_find_channel.isra.4+0x2e>
	for (i = GPIOTE_CH_BASE; i < GPIOTE_CH_NUM; i++) {
    9338:	3301      	adds	r3, #1
    933a:	2b08      	cmp	r3, #8
    933c:	d1ef      	bne.n	931e <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
    933e:	f06f 0312 	mvn.w	r3, #18
}
    9342:	4618      	mov	r0, r3
    9344:	bd30      	pop	{r4, r5, pc}
    9346:	bf00      	nop
    9348:	2000105c 	.word	0x2000105c
    934c:	40006000 	.word	0x40006000

00009350 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    9350:	b570      	push	{r4, r5, r6, lr}
    9352:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
    9354:	460d      	mov	r5, r1
    9356:	b9c9      	cbnz	r1, 938c <gpio_nrf5_enable_callback+0x3c>
		volatile NRF_GPIOTE_Type *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
    9358:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    935a:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
    935c:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
    935e:	4610      	mov	r0, r2
    9360:	7919      	ldrb	r1, [r3, #4]
    9362:	f7ff ffd7 	bl	9314 <gpiote_find_channel.isra.4>
		if (i < 0) {
    9366:	2800      	cmp	r0, #0
    9368:	db0f      	blt.n	938a <gpio_nrf5_enable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    936a:	68b2      	ldr	r2, [r6, #8]
    936c:	2301      	movs	r3, #1
    936e:	fa03 f404 	lsl.w	r4, r3, r4
    9372:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    9374:	f100 0140 	add.w	r1, r0, #64	; 0x40
    9378:	4a06      	ldr	r2, [pc, #24]	; (9394 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
    937a:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    937c:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
    9380:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
    9384:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    9388:	4628      	mov	r0, r5
}
    938a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
    938c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    9390:	e7fb      	b.n	938a <gpio_nrf5_enable_callback+0x3a>
    9392:	bf00      	nop
    9394:	40006000 	.word	0x40006000

00009398 <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    9398:	b570      	push	{r4, r5, r6, lr}
    939a:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
    939c:	460d      	mov	r5, r1
    939e:	b9b1      	cbnz	r1, 93ce <gpio_nrf5_disable_callback+0x36>
		volatile NRF_GPIOTE_Type *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
    93a0:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    93a2:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
    93a4:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
    93a6:	4610      	mov	r0, r2
    93a8:	7919      	ldrb	r1, [r3, #4]
    93aa:	f7ff ffb3 	bl	9314 <gpiote_find_channel.isra.4>
		if (i < 0) {
    93ae:	2800      	cmp	r0, #0
    93b0:	db0c      	blt.n	93cc <gpio_nrf5_disable_callback+0x34>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    93b2:	2301      	movs	r3, #1
    93b4:	68b2      	ldr	r2, [r6, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    93b6:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    93ba:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
    93be:	4b05      	ldr	r3, [pc, #20]	; (93d4 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
    93c0:	ea22 0404 	bic.w	r4, r2, r4
    93c4:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    93c6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    93ca:	4628      	mov	r0, r5
}
    93cc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
    93ce:	f06f 0022 	mvn.w	r0, #34	; 0x22
    93d2:	e7fb      	b.n	93cc <gpio_nrf5_disable_callback+0x34>
    93d4:	40006000 	.word	0x40006000

000093d8 <gpio_nrf5_config>:
{
    93d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile NRF_GPIO_Type *gpio = GPIO_STRUCT(dev);
    93da:	6806      	ldr	r6, [r0, #0]
{
    93dc:	461d      	mov	r5, r3
	volatile NRF_GPIO_Type *gpio = GPIO_STRUCT(dev);
    93de:	68b3      	ldr	r3, [r6, #8]
{
    93e0:	4614      	mov	r4, r2
	volatile NRF_GPIO_Type *gpio = GPIO_STRUCT(dev);
    93e2:	6818      	ldr	r0, [r3, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    93e4:	b111      	cbz	r1, 93ec <gpio_nrf5_config+0x14>
		return -ENOTSUP;
    93e6:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    93ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    93ec:	f405 7240 	and.w	r2, r5, #768	; 0x300
    93f0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    93f4:	f3c5 3701 	ubfx	r7, r5, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    93f8:	f3c5 3381 	ubfx	r3, r5, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    93fc:	f405 3140 	and.w	r1, r5, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    9400:	d054      	beq.n	94ac <gpio_nrf5_config+0xd4>
		u8_t pull = GPIO_PULL_DISABLE;
    9402:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    9406:	bf0c      	ite	eq
    9408:	2204      	moveq	r2, #4
    940a:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    940c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    9410:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    9414:	4f2e      	ldr	r7, [pc, #184]	; (94d0 <gpio_nrf5_config+0xf8>)
    9416:	bf08      	it	eq
    9418:	2100      	moveq	r1, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    941a:	f015 0f01 	tst.w	r5, #1
    941e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    9422:	f504 77e0 	add.w	r7, r4, #448	; 0x1c0
    9426:	d04a      	beq.n	94be <gpio_nrf5_config+0xe6>
			if (pull == GPIO_PULL_UP) {
    9428:	2a0c      	cmp	r2, #12
    942a:	d141      	bne.n	94b0 <gpio_nrf5_config+0xd8>
				gpio->OUTSET = BIT(pin);
    942c:	2101      	movs	r1, #1
    942e:	40a1      	lsls	r1, r4
    9430:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
					      GPIO_INPUT_DISCONNECT |
    9434:	f043 0303 	orr.w	r3, r3, #3
    9438:	4313      	orrs	r3, r2
			gpio->PIN_CNF[pin] = (sense |
    943a:	f840 3027 	str.w	r3, [r0, r7, lsl #2]
	if (flags & GPIO_INT) {
    943e:	f015 0002 	ands.w	r0, r5, #2
    9442:	d0d2      	beq.n	93ea <gpio_nrf5_config+0x12>
		u32_t port = GPIO_PORT(dev);
    9444:	68b3      	ldr	r3, [r6, #8]
		int i = gpiote_find_channel(dev, pin, port);
    9446:	4620      	mov	r0, r4
    9448:	7919      	ldrb	r1, [r3, #4]
    944a:	f7ff ff63 	bl	9314 <gpiote_find_channel.isra.4>
		if (i < 0) {
    944e:	2800      	cmp	r0, #0
    9450:	da14      	bge.n	947c <gpio_nrf5_config+0xa4>
			if (popcount(gpiote_chan_mask) == GPIOTE_CH_NUM) {
    9452:	4f20      	ldr	r7, [pc, #128]	; (94d4 <gpio_nrf5_config+0xfc>)
    9454:	683e      	ldr	r6, [r7, #0]
    9456:	4630      	mov	r0, r6
    9458:	f7f6 ff44 	bl	2e4 <__popcountsi2>
    945c:	2808      	cmp	r0, #8
    945e:	d034      	beq.n	94ca <gpio_nrf5_config+0xf2>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
    9460:	43f3      	mvns	r3, r6
	return __builtin_ffs(op);
    9462:	fa93 f0a3 	rbit	r0, r3
    9466:	2b00      	cmp	r3, #0
    9468:	fab0 f080 	clz	r0, r0
			gpiote_chan_mask |= BIT(i);
    946c:	f04f 0301 	mov.w	r3, #1
    9470:	bf08      	it	eq
    9472:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
    9476:	4083      	lsls	r3, r0
    9478:	4333      	orrs	r3, r6
    947a:	603b      	str	r3, [r7, #0]
		if (flags & GPIO_INT_EDGE) {
    947c:	06a9      	lsls	r1, r5, #26
    947e:	d5b2      	bpl.n	93e6 <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    9480:	066a      	lsls	r2, r5, #25
    9482:	d41f      	bmi.n	94c4 <gpio_nrf5_config+0xec>
				config |= GPIOTE_CFG_POL_L2H;
    9484:	f015 0f04 	tst.w	r5, #4
    9488:	bf0c      	ite	eq
    948a:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
    948e:	f44f 3380 	movne.w	r3, #65536	; 0x10000
		config |= GPIOTE_CFG_PIN(pin);
    9492:	0224      	lsls	r4, r4, #8
    9494:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    9498:	f044 0401 	orr.w	r4, r4, #1
    949c:	431c      	orrs	r4, r3
		gpiote->CONFIG[i] = config;
    949e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    94a2:	4b0d      	ldr	r3, [pc, #52]	; (94d8 <gpio_nrf5_config+0x100>)
    94a4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
    94a8:	2000      	movs	r0, #0
    94aa:	e79e      	b.n	93ea <gpio_nrf5_config+0x12>
			pull = GPIO_PULL_UP;
    94ac:	220c      	movs	r2, #12
    94ae:	e7ad      	b.n	940c <gpio_nrf5_config+0x34>
			} else if (pull == GPIO_PULL_DOWN) {
    94b0:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    94b2:	bf02      	ittt	eq
    94b4:	2101      	moveq	r1, #1
    94b6:	40a1      	lsleq	r1, r4
    94b8:	f8c0 150c 	streq.w	r1, [r0, #1292]	; 0x50c
    94bc:	e7ba      	b.n	9434 <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
    94be:	4313      	orrs	r3, r2
    94c0:	430b      	orrs	r3, r1
    94c2:	e7ba      	b.n	943a <gpio_nrf5_config+0x62>
				config |= GPIOTE_CFG_POL_TOGG;
    94c4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    94c8:	e7e3      	b.n	9492 <gpio_nrf5_config+0xba>
				return -EIO;
    94ca:	f06f 0004 	mvn.w	r0, #4
    94ce:	e78c      	b.n	93ea <gpio_nrf5_config+0x12>
    94d0:	0000b314 	.word	0x0000b314
    94d4:	2000105c 	.word	0x2000105c
    94d8:	40006000 	.word	0x40006000

000094dc <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
    94dc:	b508      	push	{r3, lr}
	IRQ_CONNECT(CONFIG_GPIOTE_NRF5_IRQ, CONFIG_GPIOTE_NRF5_IRQ_PRI,
    94de:	2200      	movs	r2, #0
    94e0:	2105      	movs	r1, #5
    94e2:	2006      	movs	r0, #6
    94e4:	f7f8 fada 	bl	1a9c <_irq_priority_set>
	irq_enable(CONFIG_GPIOTE_NRF5_IRQ);
    94e8:	2006      	movs	r0, #6
    94ea:	f7f8 faa5 	bl	1a38 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
    94ee:	2000      	movs	r0, #0
    94f0:	bd08      	pop	{r3, pc}
	...

000094f4 <gpio_nrf5_port_isr>:
	for (i = GPIOTE_CH_BASE; i < GPIOTE_CH_NUM; i++) {
    94f4:	2100      	movs	r1, #0
{
    94f6:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
    94f8:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
    94fa:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
    94fc:	2501      	movs	r5, #1
    94fe:	008b      	lsls	r3, r1, #2
    9500:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9504:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
    9508:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    950c:	b140      	cbz	r0, 9520 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
    950e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
    9512:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
    9516:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
    951a:	fa05 f303 	lsl.w	r3, r5, r3
    951e:	431a      	orrs	r2, r3
	for (i = GPIOTE_CH_BASE; i < GPIOTE_CH_NUM; i++) {
    9520:	3101      	adds	r1, #1
    9522:	2908      	cmp	r1, #8
    9524:	d1eb      	bne.n	94fe <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
    9526:	4e09      	ldr	r6, [pc, #36]	; (954c <gpio_nrf5_port_isr+0x58>)
    9528:	68b3      	ldr	r3, [r6, #8]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    952a:	681c      	ldr	r4, [r3, #0]
    952c:	b164      	cbz	r4, 9548 <gpio_nrf5_port_isr+0x54>
	enabled_int = int_status_p0 & data->pin_callback_enables;
    952e:	689d      	ldr	r5, [r3, #8]
    9530:	4015      	ands	r5, r2
		if (cb->pin_mask & pins) {
    9532:	68a3      	ldr	r3, [r4, #8]
    9534:	421d      	tst	r5, r3
    9536:	d004      	beq.n	9542 <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    9538:	6863      	ldr	r3, [r4, #4]
    953a:	462a      	mov	r2, r5
    953c:	4621      	mov	r1, r4
    953e:	4630      	mov	r0, r6
    9540:	4798      	blx	r3
	return node->next;
    9542:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    9544:	2c00      	cmp	r4, #0
    9546:	d1f4      	bne.n	9532 <gpio_nrf5_port_isr+0x3e>
}
    9548:	bd70      	pop	{r4, r5, r6, pc}
    954a:	bf00      	nop
    954c:	20002f94 	.word	0x20002f94

00009550 <dht_channel_get>:

static int dht_channel_get(struct device *dev,
			   enum sensor_channel chan,
			   struct sensor_value *val)
{
	struct dht_data *drv_data = dev->driver_data;
    9550:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(chan == SENSOR_CHAN_AMBIENT_TEMP || chan == SENSOR_CHAN_HUMIDITY);

	/* see data calculation example from datasheet */
#if defined(CONFIG_DHT_CHIP_DHT11)
	/* use only integral data byte */
	if (chan == SENSOR_CHAN_HUMIDITY) {
    9552:	2911      	cmp	r1, #17
		val->val1 = drv_data->sample[0];
    9554:	bf0c      	ite	eq
    9556:	7901      	ldrbeq	r1, [r0, #4]
		val->val2 = 0;
	} else { /* chan == SENSOR_CHAN_AMBIENT_TEMP */
		val->val1 = drv_data->sample[2];
    9558:	7981      	ldrbne	r1, [r0, #6]
    955a:	2300      	movs	r3, #0
		val->val2 = 0;
    955c:	e9c2 1300 	strd	r1, r3, [r2]
		}
	}
#endif

	return 0;
}
    9560:	2000      	movs	r0, #0
    9562:	4770      	bx	lr

00009564 <dht_measure_signal_duration.isra.0>:
static s8_t dht_measure_signal_duration(struct dht_data *drv_data,
    9564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9566:	4606      	mov	r6, r0
    9568:	460c      	mov	r4, r1
	u32_t start_cycles = k_cycle_get_32();
    956a:	f7f8 f89d 	bl	16a8 <_timer_cycle_get_32>
    956e:	4605      	mov	r5, r0
		gpio_pin_read(drv_data->gpio, CONFIG_DHT_GPIO_PIN_NUM, &val);
    9570:	6830      	ldr	r0, [r6, #0]
				  u32_t pin, u32_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->read(port, access_op, pin, value);
    9572:	6843      	ldr	r3, [r0, #4]
    9574:	2213      	movs	r2, #19
    9576:	689f      	ldr	r7, [r3, #8]
    9578:	2100      	movs	r1, #0
    957a:	ab01      	add	r3, sp, #4
    957c:	47b8      	blx	r7
		elapsed_cycles = k_cycle_get_32() - start_cycles;
    957e:	f7f8 f893 	bl	16a8 <_timer_cycle_get_32>
    9582:	1b40      	subs	r0, r0, r5
		if (elapsed_cycles >= max_wait_cycles) {
    9584:	2802      	cmp	r0, #2
    9586:	d809      	bhi.n	959c <dht_measure_signal_duration.isra.0+0x38>
	} while (val == signal_val);
    9588:	9b01      	ldr	r3, [sp, #4]
    958a:	42a3      	cmp	r3, r4
    958c:	d0f0      	beq.n	9570 <dht_measure_signal_duration.isra.0+0xc>
	return (u64_t)elapsed_cycles *
    958e:	4b05      	ldr	r3, [pc, #20]	; (95a4 <dht_measure_signal_duration.isra.0+0x40>)
    9590:	fba0 0103 	umull	r0, r1, r0, r3
	       (u64_t)USEC_PER_SEC /
    9594:	f340 30c7 	sbfx	r0, r0, #15, #8
}
    9598:	b003      	add	sp, #12
    959a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -1;
    959c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    95a0:	e7fa      	b.n	9598 <dht_measure_signal_duration.isra.0+0x34>
    95a2:	bf00      	nop
    95a4:	000f4240 	.word	0x000f4240

000095a8 <dht_init>:
	.sample_fetch = &dht_sample_fetch,
	.channel_get = &dht_channel_get,
};

static int dht_init(struct device *dev)
{
    95a8:	b538      	push	{r3, r4, r5, lr}
	struct dht_data *drv_data = dev->driver_data;
    95aa:	6884      	ldr	r4, [r0, #8]

	drv_data->gpio = device_get_binding(CONFIG_DHT_GPIO_DEV_NAME);
    95ac:	480b      	ldr	r0, [pc, #44]	; (95dc <dht_init+0x34>)
    95ae:	f000 fa25 	bl	99fc <device_get_binding>
    95b2:	6020      	str	r0, [r4, #0]
	if (drv_data->gpio == NULL) {
    95b4:	b170      	cbz	r0, 95d4 <dht_init+0x2c>
	return api->config(port, access_op, pin, flags);
    95b6:	6843      	ldr	r3, [r0, #4]
    95b8:	2213      	movs	r2, #19
    95ba:	681d      	ldr	r5, [r3, #0]
    95bc:	2100      	movs	r1, #0
    95be:	2301      	movs	r3, #1
    95c0:	47a8      	blx	r5
	}

	gpio_pin_configure(drv_data->gpio, CONFIG_DHT_GPIO_PIN_NUM,
			   GPIO_DIR_OUT);

	gpio_pin_write(drv_data->gpio, CONFIG_DHT_GPIO_PIN_NUM, 1);
    95c2:	6820      	ldr	r0, [r4, #0]
	return api->write(port, access_op, pin, value);
    95c4:	6843      	ldr	r3, [r0, #4]
    95c6:	2213      	movs	r2, #19
    95c8:	685c      	ldr	r4, [r3, #4]
    95ca:	2100      	movs	r1, #0
    95cc:	2301      	movs	r3, #1
    95ce:	47a0      	blx	r4

	return 0;
    95d0:	2000      	movs	r0, #0
}
    95d2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    95d4:	f06f 0015 	mvn.w	r0, #21
    95d8:	e7fb      	b.n	95d2 <dht_init+0x2a>
    95da:	bf00      	nop
    95dc:	0000b378 	.word	0x0000b378

000095e0 <gpio_pin_write.constprop.2>:
    95e0:	6843      	ldr	r3, [r0, #4]
 * @param port Pointer to the device structure for the driver instance.
 * @param pin Pin number where the data is written.
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
    95e2:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
    95e4:	685c      	ldr	r4, [r3, #4]
    95e6:	2213      	movs	r2, #19
    95e8:	460b      	mov	r3, r1
    95ea:	46a4      	mov	ip, r4
    95ec:	2100      	movs	r1, #0
				 u32_t value)
{
	return gpio_write(port, GPIO_ACCESS_BY_PIN, pin, value);
}
    95ee:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
    95f0:	4760      	bx	ip

000095f2 <dht_sample_fetch>:
{
    95f2:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct dht_data *drv_data = dev->driver_data;
    95f4:	6884      	ldr	r4, [r0, #8]
{
    95f6:	b08d      	sub	sp, #52	; 0x34
	gpio_pin_write(drv_data->gpio, CONFIG_DHT_GPIO_PIN_NUM, 0);
    95f8:	2100      	movs	r1, #0
    95fa:	6820      	ldr	r0, [r4, #0]
    95fc:	f7ff fff0 	bl	95e0 <gpio_pin_write.constprop.2>
	k_busy_wait(DHT_START_SIGNAL_DURATION);
    9600:	f244 6050 	movw	r0, #18000	; 0x4650
    9604:	f001 f926 	bl	a854 <k_busy_wait>
	gpio_pin_write(drv_data->gpio, CONFIG_DHT_GPIO_PIN_NUM, 1);
    9608:	2101      	movs	r1, #1
    960a:	6820      	ldr	r0, [r4, #0]
    960c:	f7ff ffe8 	bl	95e0 <gpio_pin_write.constprop.2>
	gpio_pin_configure(drv_data->gpio, CONFIG_DHT_GPIO_PIN_NUM,
    9610:	6820      	ldr	r0, [r4, #0]
	return api->config(port, access_op, pin, flags);
    9612:	6843      	ldr	r3, [r0, #4]
    9614:	681d      	ldr	r5, [r3, #0]
    9616:	2300      	movs	r3, #0
    9618:	4619      	mov	r1, r3
    961a:	2213      	movs	r2, #19
    961c:	47a8      	blx	r5
	if (dht_measure_signal_duration(drv_data, 1) == -1) {
    961e:	2101      	movs	r1, #1
    9620:	4620      	mov	r0, r4
    9622:	f7ff ff9f 	bl	9564 <dht_measure_signal_duration.isra.0>
    9626:	3001      	adds	r0, #1
    9628:	d10f      	bne.n	964a <dht_sample_fetch+0x58>
		ret = -EIO;
    962a:	f06f 0504 	mvn.w	r5, #4
	gpio_pin_configure(drv_data->gpio, CONFIG_DHT_GPIO_PIN_NUM,
    962e:	6820      	ldr	r0, [r4, #0]
    9630:	6843      	ldr	r3, [r0, #4]
    9632:	2213      	movs	r2, #19
    9634:	681e      	ldr	r6, [r3, #0]
    9636:	2100      	movs	r1, #0
    9638:	2301      	movs	r3, #1
    963a:	47b0      	blx	r6
	gpio_pin_write(drv_data->gpio, CONFIG_DHT_GPIO_PIN_NUM, 1);
    963c:	2101      	movs	r1, #1
    963e:	6820      	ldr	r0, [r4, #0]
    9640:	f7ff ffce 	bl	95e0 <gpio_pin_write.constprop.2>
}
    9644:	4628      	mov	r0, r5
    9646:	b00d      	add	sp, #52	; 0x34
    9648:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (dht_measure_signal_duration(drv_data, 0) == -1) {
    964a:	2100      	movs	r1, #0
    964c:	4620      	mov	r0, r4
    964e:	f7ff ff89 	bl	9564 <dht_measure_signal_duration.isra.0>
    9652:	3001      	adds	r0, #1
    9654:	d0e9      	beq.n	962a <dht_sample_fetch+0x38>
	if (dht_measure_signal_duration(drv_data, 1) == -1) {
    9656:	2101      	movs	r1, #1
    9658:	4620      	mov	r0, r4
    965a:	f7ff ff83 	bl	9564 <dht_measure_signal_duration.isra.0>
    965e:	3001      	adds	r0, #1
    9660:	d0e3      	beq.n	962a <dht_sample_fetch+0x38>
	for (i = 0; i < DHT_DATA_BITS_NUM; i++) {
    9662:	2500      	movs	r5, #0
		signal_duration[i] = dht_measure_signal_duration(drv_data, 1);
    9664:	ae02      	add	r6, sp, #8
		if (dht_measure_signal_duration(drv_data, 0) == -1) {
    9666:	2100      	movs	r1, #0
    9668:	4620      	mov	r0, r4
    966a:	f7ff ff7b 	bl	9564 <dht_measure_signal_duration.isra.0>
    966e:	3001      	adds	r0, #1
    9670:	d0db      	beq.n	962a <dht_sample_fetch+0x38>
		signal_duration[i] = dht_measure_signal_duration(drv_data, 1);
    9672:	2101      	movs	r1, #1
    9674:	4620      	mov	r0, r4
    9676:	f7ff ff75 	bl	9564 <dht_measure_signal_duration.isra.0>
    967a:	55a8      	strb	r0, [r5, r6]
		if (signal_duration[i] == -1) {
    967c:	3001      	adds	r0, #1
    967e:	d0d4      	beq.n	962a <dht_sample_fetch+0x38>
	for (i = 0; i < DHT_DATA_BITS_NUM; i++) {
    9680:	3501      	adds	r5, #1
    9682:	2d28      	cmp	r5, #40	; 0x28
    9684:	d1ef      	bne.n	9666 <dht_sample_fetch+0x74>
	min_duration = signal_duration[0];
    9686:	f99d 3008 	ldrsb.w	r3, [sp, #8]
	for (i = 1; i < DHT_DATA_BITS_NUM; i++) {
    968a:	2201      	movs	r2, #1
	max_duration = signal_duration[0];
    968c:	461d      	mov	r5, r3
		if (min_duration > signal_duration[i]) {
    968e:	56b1      	ldrsb	r1, [r6, r2]
    9690:	428b      	cmp	r3, r1
    9692:	bfa8      	it	ge
    9694:	460b      	movge	r3, r1
	for (i = 1; i < DHT_DATA_BITS_NUM; i++) {
    9696:	3201      	adds	r2, #1
    9698:	428d      	cmp	r5, r1
    969a:	bfb8      	it	lt
    969c:	460d      	movlt	r5, r1
    969e:	2a28      	cmp	r2, #40	; 0x28
    96a0:	d1f5      	bne.n	968e <dht_sample_fetch+0x9c>
	memset(buf, 0, sizeof(buf));
    96a2:	2205      	movs	r2, #5
    96a4:	2100      	movs	r1, #0
    96a6:	4668      	mov	r0, sp
	avg_duration = ((s16_t)min_duration + (s16_t)max_duration) / 2;
    96a8:	441d      	add	r5, r3
    96aa:	2302      	movs	r3, #2
    96ac:	fb95 f5f3 	sdiv	r5, r5, r3
	memset(buf, 0, sizeof(buf));
    96b0:	f7f8 fbc2 	bl	1e38 <memset>
	j = 0;
    96b4:	2100      	movs	r1, #0
	avg_duration = ((s16_t)min_duration + (s16_t)max_duration) / 2;
    96b6:	b26d      	sxtb	r5, r5
	for (i = 0; i < DHT_DATA_BITS_NUM; i++) {
    96b8:	460a      	mov	r2, r1
    96ba:	ab0c      	add	r3, sp, #48	; 0x30
    96bc:	1858      	adds	r0, r3, r1
		if (signal_duration[i] >= avg_duration) {
    96be:	56b7      	ldrsb	r7, [r6, r2]
    96c0:	f810 3c30 	ldrb.w	r3, [r0, #-48]
    96c4:	42af      	cmp	r7, r5
    96c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
			buf[j] = (buf[j] << 1) | 1;
    96ca:	bfa8      	it	ge
    96cc:	f043 0301 	orrge.w	r3, r3, #1
			buf[j] = buf[j] << 1;
    96d0:	f800 3c30 	strb.w	r3, [r0, #-48]
		if (i % 8 == 7) {
    96d4:	f002 0307 	and.w	r3, r2, #7
    96d8:	2b07      	cmp	r3, #7
	for (i = 0; i < DHT_DATA_BITS_NUM; i++) {
    96da:	f102 0201 	add.w	r2, r2, #1
			j++;
    96de:	bf08      	it	eq
    96e0:	3101      	addeq	r1, #1
	for (i = 0; i < DHT_DATA_BITS_NUM; i++) {
    96e2:	2a28      	cmp	r2, #40	; 0x28
    96e4:	d1e9      	bne.n	96ba <dht_sample_fetch+0xc8>
	if (((buf[0] + buf[1] + buf[2] + buf[3]) & 0xFF) != buf[4]) {
    96e6:	f89d 2001 	ldrb.w	r2, [sp, #1]
    96ea:	f89d 3000 	ldrb.w	r3, [sp]
    96ee:	4413      	add	r3, r2
    96f0:	f89d 2002 	ldrb.w	r2, [sp, #2]
    96f4:	4413      	add	r3, r2
    96f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    96fa:	4413      	add	r3, r2
    96fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9700:	b2db      	uxtb	r3, r3
    9702:	4293      	cmp	r3, r2
    9704:	d191      	bne.n	962a <dht_sample_fetch+0x38>
		memcpy(drv_data->sample, buf, 4);
    9706:	2204      	movs	r2, #4
    9708:	4669      	mov	r1, sp
    970a:	18a0      	adds	r0, r4, r2
    970c:	f7f8 fb67 	bl	1dde <memcpy>
	int ret = 0;
    9710:	2500      	movs	r5, #0
    9712:	e78c      	b.n	962e <dht_sample_fetch+0x3c>

00009714 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    9714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    9718:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    971a:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    971c:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    971e:	42a3      	cmp	r3, r4
	d = &rand[octets];
    9720:	440a      	add	r2, r1
	s = &rng->rand[first];
    9722:	4406      	add	r6, r0
	if (first <= last) {
    9724:	d81f      	bhi.n	9766 <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    9726:	1ae4      	subs	r4, r4, r3
    9728:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    972a:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    972c:	bf3e      	ittt	cc
    972e:	1a64      	subcc	r4, r4, r1
    9730:	b2e7      	uxtbcc	r7, r4
    9732:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    9734:	4423      	add	r3, r4
		octets -= avail;
    9736:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    973a:	bf28      	it	cs
    973c:	2700      	movcs	r7, #0
		first += avail;
    973e:	b2db      	uxtb	r3, r3
		octets -= avail;
    9740:	b2c9      	uxtb	r1, r1
    9742:	4434      	add	r4, r6

		while (avail--) {
    9744:	42a6      	cmp	r6, r4
    9746:	d109      	bne.n	975c <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    9748:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    974a:	7843      	ldrb	r3, [r0, #1]
    974c:	42bb      	cmp	r3, r7
    return (uint32_t *)((uint8_t *)NRF_RNG + rng_task);
}

__STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
    974e:	bf82      	ittt	hi
    9750:	4b20      	ldrhi	r3, [pc, #128]	; (97d4 <get+0xc0>)
    9752:	2201      	movhi	r2, #1
    9754:	601a      	strhi	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG_TASK_START);
	}

	return octets;
}
    9756:	4608      	mov	r0, r1
    9758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    975c:	f816 5b01 	ldrb.w	r5, [r6], #1
    9760:	f802 5d01 	strb.w	r5, [r2, #-1]!
    9764:	e7ee      	b.n	9744 <get+0x30>
		avail = rng->count - first;
    9766:	7805      	ldrb	r5, [r0, #0]
    9768:	1aed      	subs	r5, r5, r3
    976a:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    976c:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    976e:	bf3f      	itttt	cc
    9770:	1a67      	subcc	r7, r4, r1
    9772:	19ed      	addcc	r5, r5, r7
    9774:	b2ef      	uxtbcc	r7, r5
    9776:	460d      	movcc	r5, r1
			first += avail;
    9778:	bf38      	it	cc
    977a:	185b      	addcc	r3, r3, r1
		octets -= avail;
    977c:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    9780:	bf32      	itee	cc
    9782:	b2db      	uxtbcc	r3, r3
    9784:	4627      	movcs	r7, r4
			first = 0;
    9786:	2300      	movcs	r3, #0
		octets -= avail;
    9788:	b2c9      	uxtb	r1, r1
    978a:	4694      	mov	ip, r2
    978c:	eb06 0e05 	add.w	lr, r6, r5
		while (avail--) {
    9790:	4576      	cmp	r6, lr
    9792:	d119      	bne.n	97c8 <get+0xb4>
    9794:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    9796:	2900      	cmp	r1, #0
    9798:	d0d6      	beq.n	9748 <get+0x34>
    979a:	2c00      	cmp	r4, #0
    979c:	d0d4      	beq.n	9748 <get+0x34>
			if (octets < last) {
    979e:	428c      	cmp	r4, r1
    97a0:	bf8a      	itet	hi
    97a2:	460b      	movhi	r3, r1
    97a4:	4623      	movls	r3, r4
				remaining = last - octets;
    97a6:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    97a8:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    97ac:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    97b0:	bf8c      	ite	hi
    97b2:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    97b4:	2700      	movls	r7, #0
			octets -= last;
    97b6:	b2c9      	uxtb	r1, r1
    97b8:	18f4      	adds	r4, r6, r3
			while (last--) {
    97ba:	42a6      	cmp	r6, r4
    97bc:	d0c4      	beq.n	9748 <get+0x34>
				*(--d) = *s++;
    97be:	f816 5b01 	ldrb.w	r5, [r6], #1
    97c2:	f802 5d01 	strb.w	r5, [r2, #-1]!
    97c6:	e7f8      	b.n	97ba <get+0xa6>
			*(--d) = *s++;
    97c8:	f816 8b01 	ldrb.w	r8, [r6], #1
    97cc:	f80c 8d01 	strb.w	r8, [ip, #-1]!
    97d0:	e7de      	b.n	9790 <get+0x7c>
    97d2:	bf00      	nop
    97d4:	4000d000 	.word	0x4000d000

000097d8 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    97d8:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    97da:	b1d0      	cbz	r0, 9812 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    97dc:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    97de:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    97e0:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    97e2:	1c53      	adds	r3, r2, #1
    97e4:	b2db      	uxtb	r3, r3
		last = 0;
    97e6:	429d      	cmp	r5, r3
    97e8:	bf08      	it	eq
    97ea:	2300      	moveq	r3, #0
	if (last == rng->first) {
    97ec:	429c      	cmp	r4, r3
    97ee:	d010      	beq.n	9812 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    97f0:	b161      	cbz	r1, 980c <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    97f2:	490a      	ldr	r1, [pc, #40]	; (981c <isr+0x44>)
    97f4:	4402      	add	r2, r0
    97f6:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    97fa:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    97fc:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    97fe:	3301      	adds	r3, #1
    9800:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    9802:	429d      	cmp	r5, r3
    9804:	bf08      	it	eq
    9806:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    9808:	429c      	cmp	r4, r3
    980a:	d005      	beq.n	9818 <isr+0x40>
		return 0;
	}

	return -EBUSY;
    980c:	f06f 000f 	mvn.w	r0, #15
}
    9810:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    9812:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9816:	e7fb      	b.n	9810 <isr+0x38>
		return 0;
    9818:	2000      	movs	r0, #0
    981a:	e7f9      	b.n	9810 <isr+0x38>
    981c:	4000d000 	.word	0x4000d000

00009820 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    9820:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    9822:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    9824:	2201      	movs	r2, #1
    9826:	4611      	mov	r1, r2
    9828:	4620      	mov	r0, r4
    982a:	f000 fe07 	bl	a43c <_impl_k_sem_init>
    982e:	f104 0018 	add.w	r0, r4, #24
    9832:	2201      	movs	r2, #1
    9834:	2100      	movs	r1, #0
    9836:	f000 fe01 	bl	a43c <_impl_k_sem_init>
	rng->threshold = threshold;
    983a:	2304      	movs	r3, #4
    983c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    9840:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    9842:	2500      	movs	r5, #0
	rng->threshold = threshold;
    9844:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    9848:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    984a:	4b11      	ldr	r3, [pc, #68]	; (9890 <entropy_nrf5_init+0x70>)
	rng->count = len;
    984c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    9850:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    9852:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    9856:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    985a:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    985e:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    9862:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    9866:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    986a:	f042 0201 	orr.w	r2, r2, #1
    986e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRF_RNG->INTENSET = rng_int_mask;
    9872:	2201      	movs	r2, #1
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
    9874:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	nrf_rng_int_enable(NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG_TASK_START);

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    9878:	4630      	mov	r0, r6
    987a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
    987e:	601a      	str	r2, [r3, #0]
    9880:	462a      	mov	r2, r5
    9882:	f7f8 f90b 	bl	1a9c <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    9886:	4630      	mov	r0, r6
    9888:	f7f8 f8d6 	bl	1a38 <_arch_irq_enable>

	return 0;
}
    988c:	4628      	mov	r0, r5
    988e:	bd70      	pop	{r4, r5, r6, pc}
    9890:	4000d000 	.word	0x4000d000

00009894 <entropy_nrf5_get_entropy_isr>:
{
    9894:	b570      	push	{r4, r5, r6, lr}
	if (!(flags & ENTROPY_BUSYWAIT)) {
    9896:	07de      	lsls	r6, r3, #31
{
    9898:	460d      	mov	r5, r1
    989a:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
    989c:	d406      	bmi.n	98ac <entropy_nrf5_get_entropy_isr+0x18>
		return get((struct rand *)dev_data->isr, len, buf);
    989e:	6880      	ldr	r0, [r0, #8]
    98a0:	460a      	mov	r2, r1
    98a2:	303c      	adds	r0, #60	; 0x3c
    98a4:	b2e1      	uxtb	r1, r4
    98a6:	f7ff ff35 	bl	9714 <get>
}
    98aa:	bd70      	pop	{r4, r5, r6, pc}
	if (len) {
    98ac:	b342      	cbz	r2, 9900 <entropy_nrf5_get_entropy_isr+0x6c>
		irq_disable(RNG_IRQn);
    98ae:	200d      	movs	r0, #13
    98b0:	f7f8 f8d2 	bl	1a58 <_arch_irq_disable>
		NRF_RNG->EVENTS_VALRDY = 0;
    98b4:	4b15      	ldr	r3, [pc, #84]	; (990c <entropy_nrf5_get_entropy_isr+0x78>)
    98b6:	2000      	movs	r0, #0
    98b8:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    NRF_RNG->INTENSET = rng_int_mask;
    98bc:	2201      	movs	r2, #1
		intenset = NRF_RNG->INTENSET;
    98be:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
    98c2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
    98c6:	601a      	str	r2, [r3, #0]
    98c8:	4622      	mov	r2, r4
			while (NRF_RNG->EVENTS_VALRDY == 0) {
    98ca:	f8d3 6100 	ldr.w	r6, [r3, #256]	; 0x100
    98ce:	b1ce      	cbz	r6, 9904 <entropy_nrf5_get_entropy_isr+0x70>
    98d0:	3a01      	subs	r2, #1
    98d2:	b292      	uxth	r2, r2
			buf[--len] = NRF_RNG->VALUE;
    98d4:	f8d3 6508 	ldr.w	r6, [r3, #1288]	; 0x508
    98d8:	54ae      	strb	r6, [r5, r2]
			NRF_RNG->EVENTS_VALRDY = 0;
    98da:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		} while (len);
    98de:	2a00      	cmp	r2, #0
    98e0:	d1f3      	bne.n	98ca <entropy_nrf5_get_entropy_isr+0x36>
    98e2:	480b      	ldr	r0, [pc, #44]	; (9910 <entropy_nrf5_get_entropy_isr+0x7c>)
    98e4:	2201      	movs	r2, #1
		if (!(intenset & RNG_INTENSET_VALRDY_Msk)) {
    98e6:	07c9      	lsls	r1, r1, #31
    98e8:	6002      	str	r2, [r0, #0]
    NRF_RNG->INTENCLR = rng_int_mask;
    98ea:	bf58      	it	pl
    98ec:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    98f0:	4b08      	ldr	r3, [pc, #32]	; (9914 <entropy_nrf5_get_entropy_isr+0x80>)
    98f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    98f6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq_enable(RNG_IRQn);
    98fa:	200d      	movs	r0, #13
    98fc:	f7f8 f89c 	bl	1a38 <_arch_irq_enable>
	return cnt;
    9900:	4620      	mov	r0, r4
    9902:	e7d2      	b.n	98aa <entropy_nrf5_get_entropy_isr+0x16>
				__WFE();
    9904:	bf20      	wfe
				__SEV();
    9906:	bf40      	sev
				__WFE();
    9908:	bf20      	wfe
    990a:	e7de      	b.n	98ca <entropy_nrf5_get_entropy_isr+0x36>
    990c:	4000d000 	.word	0x4000d000
    9910:	4000d004 	.word	0x4000d004
    9914:	e000e100 	.word	0xe000e100

00009918 <isr_rand>:
{
    9918:	b570      	push	{r4, r5, r6, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    991a:	4c13      	ldr	r4, [pc, #76]	; (9968 <isr_rand+0x50>)
    991c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    9920:	b15b      	cbz	r3, 993a <isr_rand+0x22>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    9922:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    9924:	2101      	movs	r1, #1
    9926:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    992a:	f7ff ff55 	bl	97d8 <isr>
		if (ret != -EBUSY) {
    992e:	f110 0f10 	cmn.w	r0, #16
    9932:	d103      	bne.n	993c <isr_rand+0x24>
		NRF_RNG->EVENTS_VALRDY = 0;
    9934:	2300      	movs	r3, #0
    9936:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
}
    993a:	bd70      	pop	{r4, r5, r6, pc}
			ret = isr((struct rand *)dev_data->thr,
    993c:	3037      	adds	r0, #55	; 0x37
    993e:	bf14      	ite	ne
    9940:	2100      	movne	r1, #0
    9942:	2101      	moveq	r1, #1
    9944:	f105 0030 	add.w	r0, r5, #48	; 0x30
    9948:	f7ff ff46 	bl	97d8 <isr>
    994c:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    994e:	f105 0018 	add.w	r0, r5, #24
    9952:	f000 fd7c 	bl	a44e <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    9956:	2300      	movs	r3, #0
		if (ret != -EBUSY) {
    9958:	3610      	adds	r6, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    995a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
    995e:	bf1e      	ittt	ne
    9960:	4b02      	ldrne	r3, [pc, #8]	; (996c <isr_rand+0x54>)
    9962:	2201      	movne	r2, #1
    9964:	601a      	strne	r2, [r3, #0]
}
    9966:	e7e8      	b.n	993a <isr_rand+0x22>
    9968:	4000d000 	.word	0x4000d000
    996c:	4000d004 	.word	0x4000d004

00009970 <entropy_nrf5_get_entropy>:
{
    9970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    9974:	6885      	ldr	r5, [r0, #8]
{
    9976:	460f      	mov	r7, r1
    9978:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    997a:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    997e:	b914      	cbnz	r4, 9986 <entropy_nrf5_get_entropy+0x16>
}
    9980:	4620      	mov	r0, r4
    9982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9986:	2cff      	cmp	r4, #255	; 0xff
    9988:	4623      	mov	r3, r4
    998a:	bf28      	it	cs
    998c:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    998e:	1ae4      	subs	r4, r4, r3
    9990:	b2de      	uxtb	r6, r3
    9992:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    9994:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    9998:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    999c:	4628      	mov	r0, r5
    999e:	f000 fd7d 	bl	a49c <_impl_k_sem_take>
    99a2:	4631      	mov	r1, r6
    99a4:	463a      	mov	r2, r7
    99a6:	4648      	mov	r0, r9
    99a8:	f7ff feb4 	bl	9714 <get>
    99ac:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    99ae:	4628      	mov	r0, r5
    99b0:	f000 fd4d 	bl	a44e <_impl_k_sem_give>
			if (len8) {
    99b4:	2e00      	cmp	r6, #0
    99b6:	d0e2      	beq.n	997e <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    99b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    99bc:	4640      	mov	r0, r8
    99be:	f000 fd6d 	bl	a49c <_impl_k_sem_take>
    99c2:	e7e9      	b.n	9998 <entropy_nrf5_get_entropy+0x28>

000099c4 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
    99c4:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
    99c6:	4802      	ldr	r0, [pc, #8]	; (99d0 <entropy_nrf_get_entropy_isr+0xc>)
    99c8:	460a      	mov	r2, r1
    99ca:	4619      	mov	r1, r3
    99cc:	f7ff bea2 	b.w	9714 <get>
    99d0:	2000109c 	.word	0x2000109c

000099d4 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    99d4:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    99d6:	4b08      	ldr	r3, [pc, #32]	; (99f8 <_sys_device_do_config_level+0x24>)
    99d8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    99dc:	3001      	adds	r0, #1
    99de:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    99e2:	4620      	mov	r0, r4
    99e4:	4285      	cmp	r5, r0
    99e6:	f104 040c 	add.w	r4, r4, #12
    99ea:	d800      	bhi.n	99ee <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    99ec:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
    99ee:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    99f2:	685b      	ldr	r3, [r3, #4]
    99f4:	4798      	blx	r3
    99f6:	e7f4      	b.n	99e2 <_sys_device_do_config_level+0xe>
    99f8:	0000b398 	.word	0x0000b398

000099fc <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    99fc:	4b10      	ldr	r3, [pc, #64]	; (9a40 <device_get_binding+0x44>)
{
    99fe:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    9a00:	4c10      	ldr	r4, [pc, #64]	; (9a44 <device_get_binding+0x48>)
{
    9a02:	4605      	mov	r5, r0
    9a04:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    9a06:	429c      	cmp	r4, r3
    9a08:	d104      	bne.n	9a14 <device_get_binding+0x18>
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    9a0a:	4c0e      	ldr	r4, [pc, #56]	; (9a44 <device_get_binding+0x48>)
    9a0c:	42b4      	cmp	r4, r6
    9a0e:	d109      	bne.n	9a24 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    9a10:	2400      	movs	r4, #0
    9a12:	e012      	b.n	9a3a <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
    9a14:	6862      	ldr	r2, [r4, #4]
    9a16:	b11a      	cbz	r2, 9a20 <device_get_binding+0x24>
    9a18:	6822      	ldr	r2, [r4, #0]
    9a1a:	6812      	ldr	r2, [r2, #0]
    9a1c:	42aa      	cmp	r2, r5
    9a1e:	d00c      	beq.n	9a3a <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    9a20:	340c      	adds	r4, #12
    9a22:	e7f0      	b.n	9a06 <device_get_binding+0xa>
		if (!info->driver_api) {
    9a24:	6863      	ldr	r3, [r4, #4]
    9a26:	b90b      	cbnz	r3, 9a2c <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    9a28:	340c      	adds	r4, #12
    9a2a:	e7ef      	b.n	9a0c <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    9a2c:	6823      	ldr	r3, [r4, #0]
    9a2e:	4628      	mov	r0, r5
    9a30:	6819      	ldr	r1, [r3, #0]
    9a32:	f7f8 f9b7 	bl	1da4 <strcmp>
    9a36:	2800      	cmp	r0, #0
    9a38:	d1f6      	bne.n	9a28 <device_get_binding+0x2c>
}
    9a3a:	4620      	mov	r0, r4
    9a3c:	bd70      	pop	{r4, r5, r6, pc}
    9a3e:	bf00      	nop
    9a40:	20002fc4 	.word	0x20002fc4
    9a44:	20002f34 	.word	0x20002f34

00009a48 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    9a48:	1c43      	adds	r3, r0, #1
    9a4a:	d003      	beq.n	9a54 <_sys_power_save_idle_exit+0xc>
    9a4c:	4b03      	ldr	r3, [pc, #12]	; (9a5c <_sys_power_save_idle_exit+0x14>)
    9a4e:	681b      	ldr	r3, [r3, #0]
    9a50:	4283      	cmp	r3, r0
    9a52:	dc01      	bgt.n	9a58 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    9a54:	f7f7 bdd0 	b.w	15f8 <_timer_idle_exit>
	}
}
    9a58:	4770      	bx	lr
    9a5a:	bf00      	nop
    9a5c:	20002f28 	.word	0x20002f28

00009a60 <idle>:
	return list->head == list;
    9a60:	4d0f      	ldr	r5, [pc, #60]	; (9aa0 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    9a62:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
    9a64:	4f0f      	ldr	r7, [pc, #60]	; (9aa4 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9a66:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
    9a6a:	f04f 0220 	mov.w	r2, #32
    9a6e:	f3ef 8311 	mrs	r3, BASEPRI
    9a72:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    9a76:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9a78:	42b3      	cmp	r3, r6
    9a7a:	d00a      	beq.n	9a92 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    9a7c:	b14b      	cbz	r3, 9a92 <idle+0x32>
    9a7e:	691c      	ldr	r4, [r3, #16]
    9a80:	1c63      	adds	r3, r4, #1
    9a82:	d008      	beq.n	9a96 <idle+0x36>
    9a84:	683b      	ldr	r3, [r7, #0]
    9a86:	42a3      	cmp	r3, r4
    9a88:	dd05      	ble.n	9a96 <idle+0x36>
	_kernel.idle = ticks;
    9a8a:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
    9a8c:	f7f8 f85c 	bl	1b48 <k_cpu_idle>
    9a90:	e7eb      	b.n	9a6a <idle+0xa>
    9a92:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
    9a96:	4620      	mov	r0, r4
    9a98:	f7f7 fd94 	bl	15c4 <_timer_idle_enter>
    9a9c:	e7f5      	b.n	9a8a <idle+0x2a>
    9a9e:	bf00      	nop
    9aa0:	2000132c 	.word	0x2000132c
    9aa4:	20002f28 	.word	0x20002f28

00009aa8 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
    9aa8:	4802      	ldr	r0, [pc, #8]	; (9ab4 <_bss_zero+0xc>)
    9aaa:	4a03      	ldr	r2, [pc, #12]	; (9ab8 <_bss_zero+0x10>)
    9aac:	2100      	movs	r1, #0
    9aae:	1a12      	subs	r2, r2, r0
    9ab0:	f7f8 b9c2 	b.w	1e38 <memset>
    9ab4:	20000000 	.word	0x20000000
    9ab8:	200013e8 	.word	0x200013e8

00009abc <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
    9abc:	4802      	ldr	r0, [pc, #8]	; (9ac8 <_data_copy+0xc>)
    9abe:	4a03      	ldr	r2, [pc, #12]	; (9acc <_data_copy+0x10>)
    9ac0:	4903      	ldr	r1, [pc, #12]	; (9ad0 <_data_copy+0x14>)
    9ac2:	1a12      	subs	r2, r2, r0
    9ac4:	f7f8 b98b 	b.w	1dde <memcpy>
    9ac8:	20002ce0 	.word	0x20002ce0
    9acc:	2000302c 	.word	0x2000302c
    9ad0:	0000b3dc 	.word	0x0000b3dc

00009ad4 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    9ad4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    9ad6:	2002      	movs	r0, #2
    9ad8:	f7ff ff7c 	bl	99d4 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    9adc:	4807      	ldr	r0, [pc, #28]	; (9afc <bg_thread_main+0x28>)
    9ade:	f7f7 f94f 	bl	d80 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    9ae2:	2003      	movs	r0, #3
    9ae4:	f7ff ff76 	bl	99d4 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    9ae8:	f000 ff38 	bl	a95c <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    9aec:	f7f6 fd76 	bl	5dc <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    9af0:	4a03      	ldr	r2, [pc, #12]	; (9b00 <bg_thread_main+0x2c>)
    9af2:	7a13      	ldrb	r3, [r2, #8]
    9af4:	f023 0301 	bic.w	r3, r3, #1
    9af8:	7213      	strb	r3, [r2, #8]
}
    9afa:	bd08      	pop	{r3, pc}
    9afc:	0000b3b4 	.word	0x0000b3b4
    9b00:	20001120 	.word	0x20001120

00009b04 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    9b04:	b580      	push	{r7, lr}
    9b06:	b086      	sub	sp, #24
    9b08:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
    9b0a:	f7f7 fdfd 	bl	1708 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    9b0e:	4b2e      	ldr	r3, [pc, #184]	; (9bc8 <_Cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    9b10:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9b14:	4b2d      	ldr	r3, [pc, #180]	; (9bcc <_Cstart+0xc8>)
	_ready_q.cache = _main_thread;
    9b16:	4d2e      	ldr	r5, [pc, #184]	; (9bd0 <_Cstart+0xcc>)
    9b18:	4e2e      	ldr	r6, [pc, #184]	; (9bd4 <_Cstart+0xd0>)
    9b1a:	2400      	movs	r4, #0
    9b1c:	22e0      	movs	r2, #224	; 0xe0
    9b1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    9b22:	77dc      	strb	r4, [r3, #31]
    9b24:	761c      	strb	r4, [r3, #24]
    9b26:	765c      	strb	r4, [r3, #25]
    9b28:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    9b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9b2c:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    9b30:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    9b32:	f7f7 ff79 	bl	1a28 <_FaultInit>
	_CpuIdleInit();
    9b36:	f7f8 f801 	bl	1b3c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    9b3a:	4620      	mov	r0, r4
    9b3c:	f7ff ff4a 	bl	99d4 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    9b40:	2001      	movs	r0, #1
    9b42:	f7ff ff47 	bl	99d4 <_sys_device_do_config_level>
	_sched_init();
    9b46:	f000 fc07 	bl	a358 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
    9b4a:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
    9b4c:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
    9b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9b52:	e9cd 4303 	strd	r4, r3, [sp, #12]
    9b56:	e9cd 4401 	strd	r4, r4, [sp, #4]
    9b5a:	9400      	str	r4, [sp, #0]
    9b5c:	4b1e      	ldr	r3, [pc, #120]	; (9bd8 <_Cstart+0xd4>)
    9b5e:	491f      	ldr	r1, [pc, #124]	; (9bdc <_Cstart+0xd8>)
    9b60:	4628      	mov	r0, r5
    9b62:	f000 fea3 	bl	a8ac <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9b66:	7a6b      	ldrb	r3, [r5, #9]
    9b68:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    9b6c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9b70:	726a      	strb	r2, [r5, #9]
    9b72:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
    9b74:	d105      	bne.n	9b82 <_Cstart+0x7e>
    9b76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9b78:	3301      	adds	r3, #1
    9b7a:	d102      	bne.n	9b82 <_Cstart+0x7e>
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    9b7c:	4628      	mov	r0, r5
    9b7e:	f000 fadf 	bl	a140 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    9b82:	4e17      	ldr	r6, [pc, #92]	; (9be0 <_Cstart+0xdc>)
    9b84:	4917      	ldr	r1, [pc, #92]	; (9be4 <_Cstart+0xe0>)
    9b86:	230f      	movs	r3, #15
    9b88:	2201      	movs	r2, #1
    9b8a:	e9cd 3203 	strd	r3, r2, [sp, #12]
    9b8e:	2300      	movs	r3, #0
    9b90:	e9cd 3301 	strd	r3, r3, [sp, #4]
    9b94:	9300      	str	r3, [sp, #0]
    9b96:	f44f 72a0 	mov.w	r2, #320	; 0x140
    9b9a:	4b13      	ldr	r3, [pc, #76]	; (9be8 <_Cstart+0xe4>)
    9b9c:	4630      	mov	r0, r6
    9b9e:	f000 fe85 	bl	a8ac <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9ba2:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
    9ba4:	60e6      	str	r6, [r4, #12]
    9ba6:	f023 0304 	bic.w	r3, r3, #4
    9baa:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
    9bac:	4b0f      	ldr	r3, [pc, #60]	; (9bec <_Cstart+0xe8>)
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    9bae:	60a5      	str	r5, [r4, #8]
	list->tail = (sys_dnode_t *)list;
    9bb0:	e9c4 3305 	strd	r3, r3, [r4, #20]
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
    9bb4:	4a08      	ldr	r2, [pc, #32]	; (9bd8 <_Cstart+0xd4>)
    9bb6:	4b0e      	ldr	r3, [pc, #56]	; (9bf0 <_Cstart+0xec>)
    9bb8:	4c0e      	ldr	r4, [pc, #56]	; (9bf4 <_Cstart+0xf0>)
    9bba:	f383 8809 	msr	PSP, r3
    9bbe:	2100      	movs	r1, #0
    9bc0:	f381 8811 	msr	BASEPRI, r1
    9bc4:	4610      	mov	r0, r2
    9bc6:	4720      	bx	r4
    9bc8:	200028e0 	.word	0x200028e0
    9bcc:	e000ed00 	.word	0xe000ed00
    9bd0:	20001120 	.word	0x20001120
    9bd4:	2000132c 	.word	0x2000132c
    9bd8:	00009ad5 	.word	0x00009ad5
    9bdc:	20001ba0 	.word	0x20001ba0
    9be0:	200010b0 	.word	0x200010b0
    9be4:	20001fa0 	.word	0x20001fa0
    9be8:	00009a61 	.word	0x00009a61
    9bec:	20001340 	.word	0x20001340
    9bf0:	20001fa0 	.word	0x20001fa0
    9bf4:	0000068d 	.word	0x0000068d

00009bf8 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    9bf8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    9bfa:	4c07      	ldr	r4, [pc, #28]	; (9c18 <init_static_pools+0x20>)
    9bfc:	4d07      	ldr	r5, [pc, #28]	; (9c1c <init_static_pools+0x24>)
    9bfe:	42ac      	cmp	r4, r5
    9c00:	d301      	bcc.n	9c06 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    9c02:	2000      	movs	r0, #0
    9c04:	bd38      	pop	{r3, r4, r5, pc}
    9c06:	f104 0314 	add.w	r3, r4, #20
	_sys_mem_pool_base_init(&p->base);
    9c0a:	4620      	mov	r0, r4
    9c0c:	e9c4 3305 	strd	r3, r3, [r4, #20]
    9c10:	f7f6 fd77 	bl	702 <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    9c14:	341c      	adds	r4, #28
    9c16:	e7f2      	b.n	9bfe <init_static_pools+0x6>
    9c18:	20002fc4 	.word	0x20002fc4
    9c1c:	20002fc4 	.word	0x20002fc4

00009c20 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
    9c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
    9c24:	1e1d      	subs	r5, r3, #0
{
    9c26:	b085      	sub	sp, #20
    9c28:	4606      	mov	r6, r0
    9c2a:	460c      	mov	r4, r1
    9c2c:	4617      	mov	r7, r2
	if (timeout > 0) {
    9c2e:	dd58      	ble.n	9ce2 <k_mem_pool_alloc+0xc2>
		end = _tick_get() + _ms_to_ticks(timeout);
    9c30:	f000 fc72 	bl	a518 <_tick_get>

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	s64_t ms_ticks_per_sec = (s64_t)ms * sys_clock_ticks_per_sec;

	return (s32_t)ceiling_fraction(ms_ticks_per_sec, MSEC_PER_SEC);
    9c34:	f04f 0c64 	mov.w	ip, #100	; 0x64
    9c38:	4680      	mov	r8, r0
    9c3a:	2100      	movs	r1, #0
    9c3c:	f240 30e7 	movw	r0, #999	; 0x3e7
    9c40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9c44:	2300      	movs	r3, #0
    9c46:	fbcc 0105 	smlal	r0, r1, ip, r5
    9c4a:	f7f6 fae3 	bl	214 <__aeabi_ldivmod>
    9c4e:	eb18 0200 	adds.w	r2, r8, r0
	return pool - &_k_mem_pool_list_start[0];
    9c52:	4b25      	ldr	r3, [pc, #148]	; (9ce8 <k_mem_pool_alloc+0xc8>)
	s64_t end = 0;
    9c54:	4690      	mov	r8, r2
	return pool - &_k_mem_pool_list_start[0];
    9c56:	1af3      	subs	r3, r6, r3
    9c58:	4a24      	ldr	r2, [pc, #144]	; (9cec <k_mem_pool_alloc+0xcc>)
    9c5a:	109b      	asrs	r3, r3, #2
    9c5c:	fb02 fa03 	mul.w	sl, r2, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
    9c60:	fa5f fa8a 	uxtb.w	sl, sl
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
    9c64:	f106 0b14 	add.w	fp, r6, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
    9c68:	9400      	str	r4, [sp, #0]
    9c6a:	ab03      	add	r3, sp, #12
    9c6c:	aa02      	add	r2, sp, #8
    9c6e:	4639      	mov	r1, r7
    9c70:	4630      	mov	r0, r6
    9c72:	f7f6 fd8f 	bl	794 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
    9c76:	f110 0f0b 	cmn.w	r0, #11
    9c7a:	d10b      	bne.n	9c94 <k_mem_pool_alloc+0x74>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
    9c7c:	9400      	str	r4, [sp, #0]
    9c7e:	ab03      	add	r3, sp, #12
    9c80:	aa02      	add	r2, sp, #8
    9c82:	4639      	mov	r1, r7
    9c84:	4630      	mov	r0, r6
    9c86:	f7f6 fd85 	bl	794 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
    9c8a:	f110 0f0b 	cmn.w	r0, #11
    9c8e:	bf08      	it	eq
    9c90:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
    9c94:	7963      	ldrb	r3, [r4, #5]
    9c96:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
    9c98:	f884 a004 	strb.w	sl, [r4, #4]
		block->id.level = level_num;
    9c9c:	f362 0303 	bfi	r3, r2, #0, #4
    9ca0:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
    9ca2:	6863      	ldr	r3, [r4, #4]
    9ca4:	9a03      	ldr	r2, [sp, #12]
    9ca6:	f362 331f 	bfi	r3, r2, #12, #20
    9caa:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
    9cac:	b1b0      	cbz	r0, 9cdc <k_mem_pool_alloc+0xbc>
    9cae:	b1ad      	cbz	r5, 9cdc <k_mem_pool_alloc+0xbc>
		    (ret && ret != -ENOMEM)) {
    9cb0:	f110 0f0c 	cmn.w	r0, #12
    9cb4:	d112      	bne.n	9cdc <k_mem_pool_alloc+0xbc>
    9cb6:	f04f 0320 	mov.w	r3, #32
    9cba:	f3ef 8011 	mrs	r0, BASEPRI
    9cbe:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
    9cc2:	462a      	mov	r2, r5
    9cc4:	4659      	mov	r1, fp
    9cc6:	f000 faf1 	bl	a2ac <_pend_current_thread>

		if (timeout != K_FOREVER) {
    9cca:	1c6b      	adds	r3, r5, #1
    9ccc:	d0cc      	beq.n	9c68 <k_mem_pool_alloc+0x48>
			timeout = end - _tick_get();
    9cce:	f000 fc23 	bl	a518 <_tick_get>

			if (timeout < 0) {
    9cd2:	ebb8 0500 	subs.w	r5, r8, r0
    9cd6:	d5c7      	bpl.n	9c68 <k_mem_pool_alloc+0x48>
				break;
			}
		}
	}

	return -EAGAIN;
    9cd8:	f06f 000a 	mvn.w	r0, #10
}
    9cdc:	b005      	add	sp, #20
    9cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
    9ce2:	2200      	movs	r2, #0
    9ce4:	e7b5      	b.n	9c52 <k_mem_pool_alloc+0x32>
    9ce6:	bf00      	nop
    9ce8:	20002fc4 	.word	0x20002fc4
    9cec:	b6db6db7 	.word	0xb6db6db7

00009cf0 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
    9cf0:	b570      	push	{r4, r5, r6, lr}
    9cf2:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
    9cf4:	6802      	ldr	r2, [r0, #0]
    9cf6:	7841      	ldrb	r1, [r0, #1]
    9cf8:	4e13      	ldr	r6, [pc, #76]	; (9d48 <k_mem_pool_free_id+0x58>)
    9cfa:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    9cfe:	00a4      	lsls	r4, r4, #2
    9d00:	0b12      	lsrs	r2, r2, #12
    9d02:	f001 010f 	and.w	r1, r1, #15
    9d06:	1930      	adds	r0, r6, r4
    9d08:	f7f6 fdf8 	bl	8fc <_sys_mem_pool_block_free>
    9d0c:	f04f 0320 	mov.w	r3, #32
    9d10:	f3ef 8511 	mrs	r5, BASEPRI
    9d14:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
    9d18:	f104 0014 	add.w	r0, r4, #20
    9d1c:	4430      	add	r0, r6
    9d1e:	f000 fb0b 	bl	a338 <_unpend_all>

	if (need_sched && !_is_in_isr()) {
    9d22:	b168      	cbz	r0, 9d40 <k_mem_pool_free_id+0x50>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9d24:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    9d28:	2b0d      	cmp	r3, #13
    9d2a:	d809      	bhi.n	9d40 <k_mem_pool_free_id+0x50>
    9d2c:	b11b      	cbz	r3, 9d36 <k_mem_pool_free_id+0x46>
    9d2e:	4b07      	ldr	r3, [pc, #28]	; (9d4c <k_mem_pool_free_id+0x5c>)
    9d30:	685b      	ldr	r3, [r3, #4]
    9d32:	051b      	lsls	r3, r3, #20
    9d34:	d504      	bpl.n	9d40 <k_mem_pool_free_id+0x50>
		_reschedule(key);
    9d36:	4628      	mov	r0, r5
	} else {
		irq_unlock(key);
	}
}
    9d38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
    9d3c:	f000 b9a8 	b.w	a090 <_reschedule>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9d40:	f385 8811 	msr	BASEPRI, r5
}
    9d44:	bd70      	pop	{r4, r5, r6, pc}
    9d46:	bf00      	nop
    9d48:	20002fc4 	.word	0x20002fc4
    9d4c:	e000ed00 	.word	0xe000ed00

00009d50 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
    9d50:	b513      	push	{r0, r1, r4, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
    9d52:	2404      	movs	r4, #4
    9d54:	190a      	adds	r2, r1, r4
    9d56:	d204      	bcs.n	9d62 <k_mem_pool_malloc+0x12>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
    9d58:	2300      	movs	r3, #0
    9d5a:	4669      	mov	r1, sp
    9d5c:	f7ff ff60 	bl	9c20 <k_mem_pool_alloc>
    9d60:	b110      	cbz	r0, 9d68 <k_mem_pool_malloc+0x18>
		return NULL;
    9d62:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
    9d64:	b002      	add	sp, #8
    9d66:	bd10      	pop	{r4, pc}
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
    9d68:	4622      	mov	r2, r4
    9d6a:	a901      	add	r1, sp, #4
    9d6c:	9800      	ldr	r0, [sp, #0]
    9d6e:	f7f8 f836 	bl	1dde <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
    9d72:	9800      	ldr	r0, [sp, #0]
    9d74:	3004      	adds	r0, #4
    9d76:	e7f5      	b.n	9d64 <k_mem_pool_malloc+0x14>

00009d78 <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
    9d78:	b110      	cbz	r0, 9d80 <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
    9d7a:	3804      	subs	r0, #4
    9d7c:	f7ff bfb8 	b.w	9cf0 <k_mem_pool_free_id>
	}
}
    9d80:	4770      	bx	lr
	...

00009d84 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
    9d84:	4b03      	ldr	r3, [pc, #12]	; (9d94 <z_thread_malloc+0x10>)
    9d86:	689b      	ldr	r3, [r3, #8]
{
    9d88:	4601      	mov	r1, r0
	if (_current->resource_pool) {
    9d8a:	6e58      	ldr	r0, [r3, #100]	; 0x64
    9d8c:	b108      	cbz	r0, 9d92 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
    9d8e:	f7ff bfdf 	b.w	9d50 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
    9d92:	4770      	bx	lr
    9d94:	2000132c 	.word	0x2000132c

00009d98 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
    9d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d9a:	4604      	mov	r4, r0
    9d9c:	460e      	mov	r6, r1
    9d9e:	4617      	mov	r7, r2
	__asm__ volatile(
    9da0:	f04f 0220 	mov.w	r2, #32
    9da4:	f3ef 8511 	mrs	r5, BASEPRI
    9da8:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
    9dac:	b19b      	cbz	r3, 9dd6 <queue_insert+0x3e>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
    9dae:	2008      	movs	r0, #8
    9db0:	f7ff ffe8 	bl	9d84 <z_thread_malloc>
		if (!anode) {
    9db4:	2800      	cmp	r0, #0
    9db6:	d032      	beq.n	9e1e <queue_insert+0x86>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
    9db8:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
    9dba:	6047      	str	r7, [r0, #4]
    9dbc:	6003      	str	r3, [r0, #0]
    9dbe:	6803      	ldr	r3, [r0, #0]
    9dc0:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
    9dc4:	b956      	cbnz	r6, 9ddc <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
    9dc6:	6823      	ldr	r3, [r4, #0]
    9dc8:	4313      	orrs	r3, r2
    9dca:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
    9dcc:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    9dce:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
    9dd0:	b96b      	cbnz	r3, 9dee <queue_insert+0x56>
	list->tail = node;
    9dd2:	6060      	str	r0, [r4, #4]
    9dd4:	e00b      	b.n	9dee <queue_insert+0x56>
	node->next_and_flags = flags;
    9dd6:	603b      	str	r3, [r7, #0]
    9dd8:	4638      	mov	r0, r7
    9dda:	e7f0      	b.n	9dbe <queue_insert+0x26>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9ddc:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode);
    9dde:	f033 0303 	bics.w	r3, r3, #3
    9de2:	d114      	bne.n	9e0e <queue_insert+0x76>
	parent->next_and_flags = cur_flags | (unative_t)child;
    9de4:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode);
    9de6:	6862      	ldr	r2, [r4, #4]
    9de8:	b95a      	cbnz	r2, 9e02 <queue_insert+0x6a>
	list->head = node;
    9dea:	e9c4 0000 	strd	r0, r0, [r4]
	_handle_obj_poll_events(&queue->poll_events, state);
    9dee:	2104      	movs	r1, #4
    9df0:	f104 0008 	add.w	r0, r4, #8
    9df4:	f000 ff56 	bl	aca4 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
    9df8:	4628      	mov	r0, r5
    9dfa:	f000 f949 	bl	a090 <_reschedule>
	return 0;
    9dfe:	2000      	movs	r0, #0
}
    9e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    9e02:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    9e04:	f003 0303 	and.w	r3, r3, #3
    9e08:	4303      	orrs	r3, r0
    9e0a:	6013      	str	r3, [r2, #0]
    9e0c:	e7e1      	b.n	9dd2 <queue_insert+0x3a>
    9e0e:	4313      	orrs	r3, r2
    9e10:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    9e12:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    9e14:	f003 0303 	and.w	r3, r3, #3
    9e18:	4318      	orrs	r0, r3
    9e1a:	6030      	str	r0, [r6, #0]
    9e1c:	e7e7      	b.n	9dee <queue_insert+0x56>
			return -ENOMEM;
    9e1e:	f06f 000b 	mvn.w	r0, #11
    9e22:	e7ed      	b.n	9e00 <queue_insert+0x68>

00009e24 <z_queue_node_peek>:
{
    9e24:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
    9e26:	4604      	mov	r4, r0
    9e28:	b130      	cbz	r0, 9e38 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    9e2a:	6802      	ldr	r2, [r0, #0]
    9e2c:	0793      	lsls	r3, r2, #30
    9e2e:	d003      	beq.n	9e38 <z_queue_node_peek+0x14>
		ret = anode->data;
    9e30:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    9e32:	b109      	cbz	r1, 9e38 <z_queue_node_peek+0x14>
			k_free(anode);
    9e34:	f7ff ffa0 	bl	9d78 <k_free>
}
    9e38:	4620      	mov	r0, r4
    9e3a:	bd10      	pop	{r4, pc}

00009e3c <_impl_k_queue_init>:
	list->head = NULL;
    9e3c:	2300      	movs	r3, #0
	list->tail = NULL;
    9e3e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
    9e42:	f100 0308 	add.w	r3, r0, #8
    9e46:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    9e4a:	4770      	bx	lr

00009e4c <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
    9e4c:	460a      	mov	r2, r1
    9e4e:	2300      	movs	r3, #0
    9e50:	6841      	ldr	r1, [r0, #4]
    9e52:	f7ff bfa1 	b.w	9d98 <queue_insert>

00009e56 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
    9e56:	2300      	movs	r3, #0
    9e58:	460a      	mov	r2, r1
    9e5a:	4619      	mov	r1, r3
    9e5c:	f7ff bf9c 	b.w	9d98 <queue_insert>

00009e60 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    9e60:	b538      	push	{r3, r4, r5, lr}
    9e62:	f04f 0320 	mov.w	r3, #32
    9e66:	f3ef 8511 	mrs	r5, BASEPRI
    9e6a:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_APPEND_LIST(sflist, sfnode);
    9e6e:	6843      	ldr	r3, [r0, #4]
    9e70:	b953      	cbnz	r3, 9e88 <k_queue_append_list+0x28>
	list->head = node;
    9e72:	6001      	str	r1, [r0, #0]
	list->tail = node;
    9e74:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
    9e76:	2104      	movs	r1, #4
    9e78:	3008      	adds	r0, #8
    9e7a:	f000 ff13 	bl	aca4 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
    9e7e:	4628      	mov	r0, r5
}
    9e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    9e84:	f000 b904 	b.w	a090 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    9e88:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    9e8a:	f004 0403 	and.w	r4, r4, #3
    9e8e:	4321      	orrs	r1, r4
    9e90:	6019      	str	r1, [r3, #0]
    9e92:	e7ef      	b.n	9e74 <k_queue_append_list+0x14>

00009e94 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
    9e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e98:	4604      	mov	r4, r0
    9e9a:	b086      	sub	sp, #24
    9e9c:	460d      	mov	r5, r1
    9e9e:	f04f 0320 	mov.w	r3, #32
    9ea2:	f3ef 8711 	mrs	r7, BASEPRI
    9ea6:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(sflist);
    9eaa:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    9eac:	b182      	cbz	r2, 9ed0 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9eae:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
    9eb0:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9eb2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
    9eb6:	428a      	cmp	r2, r1
	list->head = node;
    9eb8:	6003      	str	r3, [r0, #0]
	list->tail = node;
    9eba:	bf08      	it	eq
    9ebc:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    9ebe:	2101      	movs	r1, #1
    9ec0:	4610      	mov	r0, r2
    9ec2:	f7ff ffaf 	bl	9e24 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9ec6:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    9eca:	b006      	add	sp, #24
    9ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
    9ed0:	b919      	cbnz	r1, 9eda <_impl_k_queue_get+0x46>
    9ed2:	f387 8811 	msr	BASEPRI, r7
			return NULL;
    9ed6:	2000      	movs	r0, #0
    9ed8:	e7f7      	b.n	9eca <_impl_k_queue_get+0x36>
    9eda:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    9ede:	2104      	movs	r1, #4
    9ee0:	4603      	mov	r3, r0
    9ee2:	eb0d 0001 	add.w	r0, sp, r1
    9ee6:	f000 fe46 	bl	ab76 <k_poll_event_init>
	if (timeout != K_FOREVER) {
    9eea:	1c6a      	adds	r2, r5, #1
    9eec:	d002      	beq.n	9ef4 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    9eee:	f000 faf1 	bl	a4d4 <_impl_k_uptime_get_32>
    9ef2:	4606      	mov	r6, r0
{
    9ef4:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
    9ef6:	f89d 3011 	ldrb.w	r3, [sp, #17]

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    9efa:	1bea      	subs	r2, r5, r7
    9efc:	f36f 1307 	bfc	r3, #4, #4
    9f00:	2101      	movs	r1, #1
    9f02:	a801      	add	r0, sp, #4
    9f04:	f88d 3011 	strb.w	r3, [sp, #17]
    9f08:	f000 fe48 	bl	ab9c <_impl_k_poll>
		if (err && err != -EAGAIN) {
    9f0c:	b108      	cbz	r0, 9f12 <_impl_k_queue_get+0x7e>
    9f0e:	300b      	adds	r0, #11
    9f10:	d1e1      	bne.n	9ed6 <_impl_k_queue_get+0x42>
	__asm__ volatile(
    9f12:	f04f 0320 	mov.w	r3, #32
    9f16:	f3ef 8811 	mrs	r8, BASEPRI
    9f1a:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(sflist);
    9f1e:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
    9f20:	b138      	cbz	r0, 9f32 <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9f22:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
    9f24:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9f26:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
    9f2a:	4290      	cmp	r0, r2
	list->head = node;
    9f2c:	6023      	str	r3, [r4, #0]
	list->tail = node;
    9f2e:	bf08      	it	eq
    9f30:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
    9f32:	2101      	movs	r1, #1
    9f34:	f7ff ff76 	bl	9e24 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9f38:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
    9f3c:	2800      	cmp	r0, #0
    9f3e:	d1c4      	bne.n	9eca <_impl_k_queue_get+0x36>
    9f40:	1c6b      	adds	r3, r5, #1
    9f42:	d0d8      	beq.n	9ef6 <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    9f44:	f000 fac6 	bl	a4d4 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
    9f48:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
    9f4a:	42bd      	cmp	r5, r7
    9f4c:	dad3      	bge.n	9ef6 <_impl_k_queue_get+0x62>
    9f4e:	e7c2      	b.n	9ed6 <_impl_k_queue_get+0x42>

00009f50 <sys_dlist_remove>:
	node->prev->next = node->next;
    9f50:	e9d0 2300 	ldrd	r2, r3, [r0]
    9f54:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    9f56:	6802      	ldr	r2, [r0, #0]
    9f58:	6053      	str	r3, [r2, #4]
}
    9f5a:	4770      	bx	lr

00009f5c <_abort_timeout>:
{
    9f5c:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    9f5e:	6900      	ldr	r0, [r0, #16]
{
    9f60:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    9f62:	1c43      	adds	r3, r0, #1
    9f64:	d00e      	beq.n	9f84 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    9f66:	4b08      	ldr	r3, [pc, #32]	; (9f88 <_abort_timeout+0x2c>)
    9f68:	699b      	ldr	r3, [r3, #24]
    9f6a:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
    9f6c:	bf1f      	itttt	ne
    9f6e:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    9f70:	6913      	ldrne	r3, [r2, #16]
    9f72:	18c0      	addne	r0, r0, r3
    9f74:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
    9f76:	4608      	mov	r0, r1
    9f78:	f7ff ffea 	bl	9f50 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    9f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9f80:	610b      	str	r3, [r1, #16]
	return 0;
    9f82:	2000      	movs	r0, #0
}
    9f84:	bd08      	pop	{r3, pc}
    9f86:	bf00      	nop
    9f88:	2000132c 	.word	0x2000132c

00009f8c <k_spin_lock.isra.11>:
	__asm__ volatile(
    9f8c:	f04f 0320 	mov.w	r3, #32
    9f90:	f3ef 8011 	mrs	r0, BASEPRI
    9f94:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
    9f98:	4770      	bx	lr
	...

00009f9c <update_cache>:
	return list->head == list;
    9f9c:	4b0d      	ldr	r3, [pc, #52]	; (9fd4 <update_cache+0x38>)
    9f9e:	461a      	mov	r2, r3
    9fa0:	f852 1f24 	ldr.w	r1, [r2, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9fa4:	4291      	cmp	r1, r2
    9fa6:	d000      	beq.n	9faa <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
    9fa8:	b901      	cbnz	r1, 9fac <update_cache+0x10>
    9faa:	68d9      	ldr	r1, [r3, #12]
	if (preempt_ok) {
    9fac:	b970      	cbnz	r0, 9fcc <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
    9fae:	689a      	ldr	r2, [r3, #8]
    9fb0:	b162      	cbz	r2, 9fcc <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
    9fb2:	7a50      	ldrb	r0, [r2, #9]
    9fb4:	06c0      	lsls	r0, r0, #27
    9fb6:	d109      	bne.n	9fcc <update_cache+0x30>
    9fb8:	6a50      	ldr	r0, [r2, #36]	; 0x24
    9fba:	3001      	adds	r0, #1
    9fbc:	d106      	bne.n	9fcc <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
    9fbe:	8950      	ldrh	r0, [r2, #10]
    9fc0:	287f      	cmp	r0, #127	; 0x7f
    9fc2:	d903      	bls.n	9fcc <update_cache+0x30>
	return thread == _idle_thread;
    9fc4:	4804      	ldr	r0, [pc, #16]	; (9fd8 <update_cache+0x3c>)
	if (_is_idle(_current)) {
    9fc6:	6800      	ldr	r0, [r0, #0]
    9fc8:	4282      	cmp	r2, r0
    9fca:	d101      	bne.n	9fd0 <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
    9fcc:	6219      	str	r1, [r3, #32]
    9fce:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
    9fd0:	621a      	str	r2, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    9fd2:	4770      	bx	lr
    9fd4:	2000132c 	.word	0x2000132c
    9fd8:	0000b3b0 	.word	0x0000b3b0

00009fdc <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
    9fdc:	f990 000a 	ldrsb.w	r0, [r0, #10]
    9fe0:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
    9fe4:	4298      	cmp	r0, r3
    9fe6:	bfac      	ite	ge
    9fe8:	2000      	movge	r0, #0
    9fea:	2001      	movlt	r0, #1
    9fec:	4770      	bx	lr
	...

00009ff0 <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    9ff0:	b510      	push	{r4, lr}
    9ff2:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
    9ff4:	f7ff ffca 	bl	9f8c <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
    9ff8:	7a4b      	ldrb	r3, [r1, #9]
    9ffa:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
    9ffc:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
    9ffe:	d50d      	bpl.n	a01c <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    a000:	4608      	mov	r0, r1
    a002:	f7ff ffa5 	bl	9f50 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
    a006:	7a4b      	ldrb	r3, [r1, #9]
    a008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    a00c:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
    a00e:	4b05      	ldr	r3, [pc, #20]	; (a024 <_remove_thread_from_ready_q+0x34>)
    a010:	6898      	ldr	r0, [r3, #8]
    a012:	1a43      	subs	r3, r0, r1
    a014:	4258      	negs	r0, r3
    a016:	4158      	adcs	r0, r3
    a018:	f7ff ffc0 	bl	9f9c <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a01c:	f384 8811 	msr	BASEPRI, r4
}
    a020:	bd10      	pop	{r4, pc}
    a022:	bf00      	nop
    a024:	2000132c 	.word	0x2000132c

0000a028 <_find_first_thread_to_unpend>:
{
    a028:	b508      	push	{r3, lr}
    a02a:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
    a02c:	f7ff ffae 	bl	9f8c <k_spin_lock.isra.11>
	return list->head == list;
    a030:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a032:	429a      	cmp	r2, r3
    a034:	bf08      	it	eq
    a036:	2300      	moveq	r3, #0
    a038:	f380 8811 	msr	BASEPRI, r0
}
    a03c:	4618      	mov	r0, r3
    a03e:	bd08      	pop	{r3, pc}

0000a040 <_unpend_thread_no_timeout>:
{
    a040:	b510      	push	{r4, lr}
    a042:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
    a044:	f7ff ffa2 	bl	9f8c <k_spin_lock.isra.11>
    a048:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    a04a:	4608      	mov	r0, r1
    a04c:	f7ff ff80 	bl	9f50 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a050:	7a4b      	ldrb	r3, [r1, #9]
    a052:	f023 0302 	bic.w	r3, r3, #2
    a056:	724b      	strb	r3, [r1, #9]
    a058:	f384 8811 	msr	BASEPRI, r4
}
    a05c:	bd10      	pop	{r4, pc}

0000a05e <_unpend_first_thread>:
{
    a05e:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
    a060:	2100      	movs	r1, #0
    a062:	f7ff ffe1 	bl	a028 <_find_first_thread_to_unpend>

	if (thread) {
    a066:	4604      	mov	r4, r0
    a068:	b128      	cbz	r0, a076 <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
    a06a:	f7ff ffe9 	bl	a040 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
    a06e:	f104 0014 	add.w	r0, r4, #20
    a072:	f7ff ff73 	bl	9f5c <_abort_timeout>
}
    a076:	4620      	mov	r0, r4
    a078:	bd10      	pop	{r4, pc}

0000a07a <_unpend_thread>:
{
    a07a:	b510      	push	{r4, lr}
    a07c:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
    a07e:	f7ff ffdf 	bl	a040 <_unpend_thread_no_timeout>
    a082:	f104 0014 	add.w	r0, r4, #20
}
    a086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a08a:	f7ff bf67 	b.w	9f5c <_abort_timeout>
	...

0000a090 <_reschedule>:
    a090:	f3ef 8305 	mrs	r3, IPSR
    a094:	2b0d      	cmp	r3, #13
    a096:	d80e      	bhi.n	a0b6 <_reschedule+0x26>
    a098:	b11b      	cbz	r3, a0a2 <_reschedule+0x12>
    a09a:	4b09      	ldr	r3, [pc, #36]	; (a0c0 <_reschedule+0x30>)
    a09c:	685b      	ldr	r3, [r3, #4]
    a09e:	051b      	lsls	r3, r3, #20
    a0a0:	d509      	bpl.n	a0b6 <_reschedule+0x26>
	if (_get_next_ready_thread() != _current) {
    a0a2:	4b08      	ldr	r3, [pc, #32]	; (a0c4 <_reschedule+0x34>)
    a0a4:	689a      	ldr	r2, [r3, #8]
    a0a6:	6a1b      	ldr	r3, [r3, #32]
    a0a8:	429a      	cmp	r2, r3
    a0aa:	d004      	beq.n	a0b6 <_reschedule+0x26>
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    a0ac:	4b06      	ldr	r3, [pc, #24]	; (a0c8 <_reschedule+0x38>)
    a0ae:	2200      	movs	r2, #0
    a0b0:	601a      	str	r2, [r3, #0]
    a0b2:	f7f7 bb35 	b.w	1720 <__swap>
    a0b6:	f380 8811 	msr	BASEPRI, r0
}
    a0ba:	2000      	movs	r0, #0
    a0bc:	4770      	bx	lr
    a0be:	bf00      	nop
    a0c0:	e000ed00 	.word	0xe000ed00
    a0c4:	2000132c 	.word	0x2000132c
    a0c8:	2000135c 	.word	0x2000135c

0000a0cc <k_sched_unlock>:
{
    a0cc:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
    a0ce:	f7ff ff5d 	bl	9f8c <k_spin_lock.isra.11>
		++_current->base.sched_locked;
    a0d2:	4b0a      	ldr	r3, [pc, #40]	; (a0fc <k_sched_unlock+0x30>)
    a0d4:	689a      	ldr	r2, [r3, #8]
    a0d6:	7ad3      	ldrb	r3, [r2, #11]
    a0d8:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
    a0da:	4604      	mov	r4, r0
		++_current->base.sched_locked;
    a0dc:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
    a0de:	2001      	movs	r0, #1
    a0e0:	f7ff ff5c 	bl	9f9c <update_cache>
    a0e4:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
    a0e8:	f04f 0320 	mov.w	r3, #32
    a0ec:	f3ef 8011 	mrs	r0, BASEPRI
    a0f0:	f383 8811 	msr	BASEPRI, r3
}
    a0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
    a0f8:	f7ff bfca 	b.w	a090 <_reschedule>
    a0fc:	2000132c 	.word	0x2000132c

0000a100 <_priq_dumb_add>:
	return list->head == list;
    a100:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a102:	4298      	cmp	r0, r3
{
    a104:	b510      	push	{r4, lr}
    a106:	d013      	beq.n	a130 <_priq_dumb_add+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a108:	b193      	cbz	r3, a130 <_priq_dumb_add+0x30>
	if (t1->base.prio < t2->base.prio) {
    a10a:	f991 200a 	ldrsb.w	r2, [r1, #10]
    a10e:	f993 400a 	ldrsb.w	r4, [r3, #10]
    a112:	4294      	cmp	r4, r2
    a114:	dd06      	ble.n	a124 <_priq_dumb_add+0x24>
		node->prev = insert_point->prev;
    a116:	685a      	ldr	r2, [r3, #4]
		node->next = insert_point;
    a118:	e9c1 3200 	strd	r3, r2, [r1]
		insert_point->prev->next = node;
    a11c:	685a      	ldr	r2, [r3, #4]
    a11e:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    a120:	6059      	str	r1, [r3, #4]
}
    a122:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
    a124:	6844      	ldr	r4, [r0, #4]
    a126:	42a3      	cmp	r3, r4
    a128:	d002      	beq.n	a130 <_priq_dumb_add+0x30>
    a12a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a12c:	2b00      	cmp	r3, #0
    a12e:	d1ee      	bne.n	a10e <_priq_dumb_add+0xe>
	node->prev = list->tail;
    a130:	6843      	ldr	r3, [r0, #4]
    a132:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    a134:	6843      	ldr	r3, [r0, #4]
	node->next = list;
    a136:	6008      	str	r0, [r1, #0]
	list->tail->next = node;
    a138:	6019      	str	r1, [r3, #0]
	list->tail = node;
    a13a:	6041      	str	r1, [r0, #4]
    a13c:	e7f1      	b.n	a122 <_priq_dumb_add+0x22>
	...

0000a140 <_add_thread_to_ready_q>:
{
    a140:	b538      	push	{r3, r4, r5, lr}
    a142:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    a144:	f7ff ff22 	bl	9f8c <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    a148:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
    a14a:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
    a14c:	4806      	ldr	r0, [pc, #24]	; (a168 <_add_thread_to_ready_q+0x28>)
    a14e:	f7ff ffd7 	bl	a100 <_priq_dumb_add>
	thread->base.thread_state |= states;
    a152:	7a63      	ldrb	r3, [r4, #9]
    a154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a158:	7263      	strb	r3, [r4, #9]
		update_cache(0);
    a15a:	2000      	movs	r0, #0
    a15c:	f7ff ff1e 	bl	9f9c <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a160:	f385 8811 	msr	BASEPRI, r5
}
    a164:	bd38      	pop	{r3, r4, r5, pc}
    a166:	bf00      	nop
    a168:	20001350 	.word	0x20001350

0000a16c <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
    a16c:	7a42      	ldrb	r2, [r0, #9]
    a16e:	06d2      	lsls	r2, r2, #27
    a170:	d104      	bne.n	a17c <_ready_thread+0x10>
    a172:	6a43      	ldr	r3, [r0, #36]	; 0x24
    a174:	3301      	adds	r3, #1
    a176:	d101      	bne.n	a17c <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
    a178:	f7ff bfe2 	b.w	a140 <_add_thread_to_ready_q>
}
    a17c:	4770      	bx	lr
	...

0000a180 <_add_timeout>:
{
    a180:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    a182:	610b      	str	r3, [r1, #16]
{
    a184:	4604      	mov	r4, r0
    a186:	461d      	mov	r5, r3
	timeout->wait_q = (sys_dlist_t *)wait_q;
    a188:	e9c1 0202 	strd	r0, r2, [r1, #8]
	if (!timeout_in_ticks) {
    a18c:	bb0b      	cbnz	r3, a1d2 <_add_timeout+0x52>
	__asm__ volatile(
    a18e:	f04f 0320 	mov.w	r3, #32
    a192:	f3ef 8611 	mrs	r6, BASEPRI
    a196:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
    a19a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a19e:	610b      	str	r3, [r1, #16]
	if (thread) {
    a1a0:	b170      	cbz	r0, a1c0 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
    a1a2:	68cb      	ldr	r3, [r1, #12]
    a1a4:	b113      	cbz	r3, a1ac <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
    a1a6:	f7ff ff4b 	bl	a040 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
    a1aa:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a1ac:	7a63      	ldrb	r3, [r4, #9]
    a1ae:	f023 0304 	bic.w	r3, r3, #4
    a1b2:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
    a1b4:	4620      	mov	r0, r4
    a1b6:	f7ff ffd9 	bl	a16c <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a1ba:	f386 8811 	msr	BASEPRI, r6
}
    a1be:	bd70      	pop	{r4, r5, r6, pc}
    a1c0:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
    a1c4:	694b      	ldr	r3, [r1, #20]
    a1c6:	2b00      	cmp	r3, #0
    a1c8:	d0f9      	beq.n	a1be <_add_timeout+0x3e>
			timeout->func(timeout);
    a1ca:	4608      	mov	r0, r1
}
    a1cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
    a1d0:	4718      	bx	r3
	return list->head == list;
    a1d2:	4a11      	ldr	r2, [pc, #68]	; (a218 <_add_timeout+0x98>)
    a1d4:	e9d2 3605 	ldrd	r3, r6, [r2, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a1d8:	f102 0014 	add.w	r0, r2, #20
    a1dc:	4283      	cmp	r3, r0
    a1de:	4605      	mov	r5, r0
    a1e0:	d013      	beq.n	a20a <_add_timeout+0x8a>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    a1e2:	b193      	cbz	r3, a20a <_add_timeout+0x8a>
		if (*delta <= in_q->delta_ticks_from_prev) {
    a1e4:	6908      	ldr	r0, [r1, #16]
    a1e6:	691c      	ldr	r4, [r3, #16]
    a1e8:	42a0      	cmp	r0, r4
    a1ea:	dc08      	bgt.n	a1fe <_add_timeout+0x7e>
		node->prev = insert_point->prev;
    a1ec:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    a1ee:	1a20      	subs	r0, r4, r0
    a1f0:	6118      	str	r0, [r3, #16]
		node->next = insert_point;
    a1f2:	e9c1 3200 	strd	r3, r2, [r1]
		insert_point->prev->next = node;
    a1f6:	685a      	ldr	r2, [r3, #4]
    a1f8:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    a1fa:	6059      	str	r1, [r3, #4]
    a1fc:	e7df      	b.n	a1be <_add_timeout+0x3e>
		*delta -= in_q->delta_ticks_from_prev;
    a1fe:	1b00      	subs	r0, r0, r4
	return (node == list->tail) ? NULL : node->next;
    a200:	42b3      	cmp	r3, r6
    a202:	6108      	str	r0, [r1, #16]
    a204:	d001      	beq.n	a20a <_add_timeout+0x8a>
    a206:	681b      	ldr	r3, [r3, #0]
    a208:	e7eb      	b.n	a1e2 <_add_timeout+0x62>
	node->prev = list->tail;
    a20a:	e9c1 5600 	strd	r5, r6, [r1]
	list->tail->next = node;
    a20e:	6993      	ldr	r3, [r2, #24]
    a210:	6019      	str	r1, [r3, #0]
	list->tail = node;
    a212:	6191      	str	r1, [r2, #24]
    a214:	e7d3      	b.n	a1be <_add_timeout+0x3e>
    a216:	bf00      	nop
    a218:	2000132c 	.word	0x2000132c

0000a21c <_move_thread_to_end_of_prio_q>:
{
    a21c:	b538      	push	{r3, r4, r5, lr}
    a21e:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    a220:	f7ff feb4 	bl	9f8c <k_spin_lock.isra.11>
    a224:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    a226:	4620      	mov	r0, r4
    a228:	f7ff fe92 	bl	9f50 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    a22c:	4621      	mov	r1, r4
    a22e:	4806      	ldr	r0, [pc, #24]	; (a248 <_move_thread_to_end_of_prio_q+0x2c>)
    a230:	f7ff ff66 	bl	a100 <_priq_dumb_add>
	thread->base.thread_state |= states;
    a234:	7a63      	ldrb	r3, [r4, #9]
    a236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a23a:	7263      	strb	r3, [r4, #9]
		update_cache(0);
    a23c:	2000      	movs	r0, #0
    a23e:	f7ff fead 	bl	9f9c <update_cache>
    a242:	f385 8811 	msr	BASEPRI, r5
}
    a246:	bd38      	pop	{r3, r4, r5, pc}
    a248:	20001350 	.word	0x20001350

0000a24c <pend>:
{
    a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a24e:	4604      	mov	r4, r0
    a250:	4616      	mov	r6, r2
    a252:	460d      	mov	r5, r1
	_remove_thread_from_ready_q(thread);
    a254:	f7ff fecc 	bl	9ff0 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    a258:	7a63      	ldrb	r3, [r4, #9]
    a25a:	f043 0302 	orr.w	r3, r3, #2
    a25e:	7263      	strb	r3, [r4, #9]
	if (timeout != K_FOREVER) {
    a260:	1c73      	adds	r3, r6, #1
    a262:	d01a      	beq.n	a29a <pend+0x4e>
	__asm__ volatile(
    a264:	f04f 0320 	mov.w	r3, #32
    a268:	f3ef 8711 	mrs	r7, BASEPRI
    a26c:	f383 8811 	msr	BASEPRI, r3
    a270:	f04f 0c64 	mov.w	ip, #100	; 0x64
    a274:	f240 30e7 	movw	r0, #999	; 0x3e7
    a278:	2100      	movs	r1, #0
    a27a:	fbcc 0106 	smlal	r0, r1, ip, r6
    a27e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a282:	2300      	movs	r3, #0
    a284:	f7f5 ffc6 	bl	214 <__aeabi_ldivmod>
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    a288:	462a      	mov	r2, r5
    a28a:	1c43      	adds	r3, r0, #1
    a28c:	f104 0114 	add.w	r1, r4, #20
    a290:	4620      	mov	r0, r4
    a292:	f7ff ff75 	bl	a180 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a296:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
    a29a:	b12d      	cbz	r5, a2a8 <pend+0x5c>
		_priq_wait_add(&wait_q->waitq, thread);
    a29c:	4621      	mov	r1, r4
    a29e:	4628      	mov	r0, r5
}
    a2a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
    a2a4:	f7ff bf2c 	b.w	a100 <_priq_dumb_add>
}
    a2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000a2ac <_pend_current_thread>:
{
    a2ac:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
    a2ae:	4b06      	ldr	r3, [pc, #24]	; (a2c8 <_pend_current_thread+0x1c>)
{
    a2b0:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
    a2b2:	6898      	ldr	r0, [r3, #8]
    a2b4:	f7ff ffca 	bl	a24c <pend>
	_time_slice_elapsed = 0;
    a2b8:	4b04      	ldr	r3, [pc, #16]	; (a2cc <_pend_current_thread+0x20>)
    a2ba:	2200      	movs	r2, #0
    a2bc:	4620      	mov	r0, r4
}
    a2be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
    a2c2:	601a      	str	r2, [r3, #0]
    a2c4:	f7f7 ba2c 	b.w	1720 <__swap>
    a2c8:	2000132c 	.word	0x2000132c
    a2cc:	2000135c 	.word	0x2000135c

0000a2d0 <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
    a2d0:	4b13      	ldr	r3, [pc, #76]	; (a320 <_is_thread_time_slicing+0x50>)
    a2d2:	681b      	ldr	r3, [r3, #0]
    a2d4:	2b00      	cmp	r3, #0
{
    a2d6:	b510      	push	{r4, lr}
    a2d8:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
    a2da:	dd1f      	ble.n	a31c <_is_thread_time_slicing+0x4c>
    a2dc:	8943      	ldrh	r3, [r0, #10]
    a2de:	2b7f      	cmp	r3, #127	; 0x7f
    a2e0:	d81c      	bhi.n	a31c <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    a2e2:	4b10      	ldr	r3, [pc, #64]	; (a324 <_is_thread_time_slicing+0x54>)
    a2e4:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
    a2e8:	681b      	ldr	r3, [r3, #0]
    a2ea:	4299      	cmp	r1, r3
    a2ec:	db16      	blt.n	a31c <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
    a2ee:	f7ff fe4d 	bl	9f8c <k_spin_lock.isra.11>
	return list->head == list;
    a2f2:	490d      	ldr	r1, [pc, #52]	; (a328 <_is_thread_time_slicing+0x58>)
    a2f4:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a2f8:	428b      	cmp	r3, r1
    a2fa:	4604      	mov	r4, r0
    a2fc:	d00a      	beq.n	a314 <_is_thread_time_slicing+0x44>
		if (next) {
    a2fe:	b15b      	cbz	r3, a318 <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
    a300:	f992 000a 	ldrsb.w	r0, [r2, #10]
    a304:	f993 300a 	ldrsb.w	r3, [r3, #10]
    a308:	1ac3      	subs	r3, r0, r3
    a30a:	4258      	negs	r0, r3
    a30c:	4158      	adcs	r0, r3
    a30e:	f384 8811 	msr	BASEPRI, r4
}
    a312:	bd10      	pop	{r4, pc}
	int ret = 0;
    a314:	2000      	movs	r0, #0
    a316:	e7fa      	b.n	a30e <_is_thread_time_slicing+0x3e>
    a318:	4618      	mov	r0, r3
    a31a:	e7f8      	b.n	a30e <_is_thread_time_slicing+0x3e>
		return 0;
    a31c:	2000      	movs	r0, #0
    a31e:	e7f8      	b.n	a312 <_is_thread_time_slicing+0x42>
    a320:	20001190 	.word	0x20001190
    a324:	20001194 	.word	0x20001194
    a328:	2000132c 	.word	0x2000132c

0000a32c <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    a32c:	4b01      	ldr	r3, [pc, #4]	; (a334 <_update_time_slice_before_swap+0x8>)
    a32e:	2200      	movs	r2, #0
    a330:	601a      	str	r2, [r3, #0]
}
    a332:	4770      	bx	lr
    a334:	2000135c 	.word	0x2000135c

0000a338 <_unpend_all>:
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
    a338:	b538      	push	{r3, r4, r5, lr}
    a33a:	4605      	mov	r5, r0
	int need_sched = 0;
    a33c:	2000      	movs	r0, #0
	return list->head == list;
    a33e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a340:	42a5      	cmp	r5, r4
    a342:	d000      	beq.n	a346 <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
    a344:	b904      	cbnz	r4, a348 <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
    a346:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
    a348:	4620      	mov	r0, r4
    a34a:	f7ff fe96 	bl	a07a <_unpend_thread>
		_ready_thread(th);
    a34e:	4620      	mov	r0, r4
    a350:	f7ff ff0c 	bl	a16c <_ready_thread>
		need_sched = 1;
    a354:	2001      	movs	r0, #1
    a356:	e7f2      	b.n	a33e <_unpend_all+0x6>

0000a358 <_sched_init>:
	list->head = (sys_dnode_t *)list;
    a358:	4b02      	ldr	r3, [pc, #8]	; (a364 <_sched_init+0xc>)
    a35a:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
    a35e:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
#ifdef CONFIG_SCHED_MULTIQ
	for (int i = 0; i < ARRAY_SIZE(_kernel.ready_q.runq.queues); i++) {
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif
}
    a362:	4770      	bx	lr
    a364:	2000132c 	.word	0x2000132c

0000a368 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
    a368:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
    a36a:	4c14      	ldr	r4, [pc, #80]	; (a3bc <_impl_k_yield+0x54>)
    a36c:	4b14      	ldr	r3, [pc, #80]	; (a3c0 <_impl_k_yield+0x58>)
    a36e:	68a2      	ldr	r2, [r4, #8]
    a370:	681b      	ldr	r3, [r3, #0]
    a372:	429a      	cmp	r2, r3
    a374:	d00f      	beq.n	a396 <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
    a376:	f7ff fe09 	bl	9f8c <k_spin_lock.isra.11>
    a37a:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    a37c:	68a0      	ldr	r0, [r4, #8]
    a37e:	f7ff fde7 	bl	9f50 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
    a382:	68a1      	ldr	r1, [r4, #8]
    a384:	f104 0024 	add.w	r0, r4, #36	; 0x24
    a388:	f7ff feba 	bl	a100 <_priq_dumb_add>
			update_cache(1);
    a38c:	2001      	movs	r0, #1
    a38e:	f7ff fe05 	bl	9f9c <update_cache>
    a392:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
    a396:	68a2      	ldr	r2, [r4, #8]
    a398:	6a23      	ldr	r3, [r4, #32]
    a39a:	429a      	cmp	r2, r3
    a39c:	d00c      	beq.n	a3b8 <_impl_k_yield+0x50>
	__asm__ volatile(
    a39e:	f04f 0320 	mov.w	r3, #32
    a3a2:	f3ef 8011 	mrs	r0, BASEPRI
    a3a6:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
    a3aa:	4b06      	ldr	r3, [pc, #24]	; (a3c4 <_impl_k_yield+0x5c>)
    a3ac:	2200      	movs	r2, #0
    a3ae:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
    a3b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a3b4:	f7f7 b9b4 	b.w	1720 <__swap>
    a3b8:	bd38      	pop	{r3, r4, r5, pc}
    a3ba:	bf00      	nop
    a3bc:	2000132c 	.word	0x2000132c
    a3c0:	0000b3b0 	.word	0x0000b3b0
    a3c4:	2000135c 	.word	0x2000135c

0000a3c8 <_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

void _impl_k_sleep(s32_t duration)
{
    a3c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
    a3ca:	b920      	cbnz	r0, a3d6 <_impl_k_sleep+0xe>
	_remove_thread_from_ready_q(_current);
	_add_thread_timeout(_current, NULL, ticks);

	_Swap(key);
#endif
}
    a3cc:	b003      	add	sp, #12
    a3ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    a3d2:	f7ff bfc9 	b.w	a368 <_impl_k_yield>
    a3d6:	2164      	movs	r1, #100	; 0x64
    a3d8:	f240 34e7 	movw	r4, #999	; 0x3e7
    a3dc:	2500      	movs	r5, #0
    a3de:	fbc1 4500 	smlal	r4, r5, r1, r0
    a3e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a3e6:	2300      	movs	r3, #0
    a3e8:	4620      	mov	r0, r4
    a3ea:	4629      	mov	r1, r5
    a3ec:	f7f5 ff12 	bl	214 <__aeabi_ldivmod>
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
    a3f0:	3001      	adds	r0, #1
    a3f2:	9001      	str	r0, [sp, #4]
    a3f4:	f04f 0320 	mov.w	r3, #32
    a3f8:	f3ef 8511 	mrs	r5, BASEPRI
    a3fc:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
    a400:	4c09      	ldr	r4, [pc, #36]	; (a428 <_impl_k_sleep+0x60>)
    a402:	68a0      	ldr	r0, [r4, #8]
    a404:	f7ff fdf4 	bl	9ff0 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
    a408:	68a0      	ldr	r0, [r4, #8]
    a40a:	9b01      	ldr	r3, [sp, #4]
    a40c:	f100 0114 	add.w	r1, r0, #20
    a410:	2200      	movs	r2, #0
    a412:	f7ff feb5 	bl	a180 <_add_timeout>
	_time_slice_elapsed = 0;
    a416:	4b05      	ldr	r3, [pc, #20]	; (a42c <_impl_k_sleep+0x64>)
    a418:	2200      	movs	r2, #0
    a41a:	4628      	mov	r0, r5
    a41c:	601a      	str	r2, [r3, #0]
}
    a41e:	b003      	add	sp, #12
    a420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    a424:	f7f7 b97c 	b.w	1720 <__swap>
    a428:	2000132c 	.word	0x2000132c
    a42c:	2000135c 	.word	0x2000135c

0000a430 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
    a430:	4b01      	ldr	r3, [pc, #4]	; (a438 <_impl_k_current_get+0x8>)
    a432:	6898      	ldr	r0, [r3, #8]
    a434:	4770      	bx	lr
    a436:	bf00      	nop
    a438:	2000132c 	.word	0x2000132c

0000a43c <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    a43c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    a440:	e9c0 1202 	strd	r1, r2, [r0, #8]
    a444:	e9c0 0000 	strd	r0, r0, [r0]
    a448:	e9c0 3304 	strd	r3, r3, [r0, #16]
#endif

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	_k_object_init(sem);
}
    a44c:	4770      	bx	lr

0000a44e <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    a44e:	b570      	push	{r4, r5, r6, lr}
    a450:	4604      	mov	r4, r0
    a452:	f04f 0320 	mov.w	r3, #32
    a456:	f3ef 8611 	mrs	r6, BASEPRI
    a45a:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    a45e:	f7ff fdfe 	bl	a05e <_unpend_first_thread>
	if (thread) {
    a462:	4605      	mov	r5, r0
    a464:	b170      	cbz	r0, a484 <_impl_k_sem_give+0x36>
	return !(_is_thread_prevented_from_running(thread) ||
    a466:	7a43      	ldrb	r3, [r0, #9]
    a468:	06db      	lsls	r3, r3, #27
    a46a:	d104      	bne.n	a476 <_impl_k_sem_give+0x28>
    a46c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    a46e:	3301      	adds	r3, #1
    a470:	d101      	bne.n	a476 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
    a472:	f7ff fe65 	bl	a140 <_add_thread_to_ready_q>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    a476:	2300      	movs	r3, #0
    a478:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
    a47a:	4630      	mov	r0, r6
}
    a47c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
    a480:	f7ff be06 	b.w	a090 <_reschedule>
	sem->count += (sem->count != sem->limit);
    a484:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    a488:	429a      	cmp	r2, r3
    a48a:	bf18      	it	ne
    a48c:	3301      	addne	r3, #1
    a48e:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    a490:	2102      	movs	r1, #2
    a492:	f104 0010 	add.w	r0, r4, #16
    a496:	f000 fc05 	bl	aca4 <_handle_obj_poll_events>
    a49a:	e7ee      	b.n	a47a <_impl_k_sem_give+0x2c>

0000a49c <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    a49c:	b410      	push	{r4}
    a49e:	460a      	mov	r2, r1
    a4a0:	4604      	mov	r4, r0
    a4a2:	f04f 0320 	mov.w	r3, #32
    a4a6:	f3ef 8011 	mrs	r0, BASEPRI
    a4aa:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    a4ae:	68a3      	ldr	r3, [r4, #8]
    a4b0:	b133      	cbz	r3, a4c0 <_impl_k_sem_take+0x24>
		sem->count--;
    a4b2:	3b01      	subs	r3, #1
    a4b4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a4b6:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
    a4ba:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
    a4bc:	bc10      	pop	{r4}
    a4be:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    a4c0:	b921      	cbnz	r1, a4cc <_impl_k_sem_take+0x30>
    a4c2:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
    a4c6:	f06f 000f 	mvn.w	r0, #15
    a4ca:	e7f7      	b.n	a4bc <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
    a4cc:	4621      	mov	r1, r4
}
    a4ce:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
    a4d0:	f7ff beec 	b.w	a2ac <_pend_current_thread>

0000a4d4 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    a4d4:	4b0e      	ldr	r3, [pc, #56]	; (a510 <_impl_k_uptime_get_32+0x3c>)
    a4d6:	e9d3 0100 	ldrd	r0, r1, [r3]
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * sys_clock_hw_cycles_per_tick * MSEC_PER_SEC /
    a4da:	4b0e      	ldr	r3, [pc, #56]	; (a514 <_impl_k_uptime_get_32+0x40>)
    a4dc:	681a      	ldr	r2, [r3, #0]
    a4de:	f04f 0c00 	mov.w	ip, #0
#endif
}
FUNC_ALIAS(_tick_get_32, sys_tick_get_32, u32_t);

u32_t _impl_k_uptime_get_32(void)
{
    a4e2:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
    a4e6:	fb02 f10c 	mul.w	r1, r2, ip
    a4ea:	4683      	mov	fp, r0
    a4ec:	17d5      	asrs	r5, r2, #31
    a4ee:	fb0b 1105 	mla	r1, fp, r5, r1
    a4f2:	fba2 230b 	umull	r2, r3, r2, fp
    a4f6:	440b      	add	r3, r1
    a4f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a4fc:	fba2 4501 	umull	r4, r5, r2, r1
    a500:	fb01 5503 	mla	r5, r1, r3, r5
    a504:	0be0      	lsrs	r0, r4, #15
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    a506:	ea40 4045 	orr.w	r0, r0, r5, lsl #17
    a50a:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
    a50e:	bf00      	nop
    a510:	20001360 	.word	0x20001360
    a514:	20002f30 	.word	0x20002f30

0000a518 <_tick_get>:
	__asm__ volatile(
    a518:	f04f 0220 	mov.w	r2, #32
    a51c:	f3ef 8311 	mrs	r3, BASEPRI
    a520:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
    a524:	4a02      	ldr	r2, [pc, #8]	; (a530 <_tick_get+0x18>)
    a526:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a52a:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
    a52e:	4770      	bx	lr
    a530:	20001360 	.word	0x20001360

0000a534 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    a534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a538:	b085      	sub	sp, #20
	__asm__ volatile(
    a53a:	f04f 0320 	mov.w	r3, #32
    a53e:	f3ef 8411 	mrs	r4, BASEPRI
    a542:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    a546:	496a      	ldr	r1, [pc, #424]	; (a6f0 <_nano_sys_clock_tick_announce+0x1bc>)
    a548:	e9d1 8900 	ldrd	r8, r9, [r1]
    a54c:	17c7      	asrs	r7, r0, #31
    a54e:	eb18 0200 	adds.w	r2, r8, r0
    a552:	eb49 0307 	adc.w	r3, r9, r7
    a556:	4606      	mov	r6, r0
    a558:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a55c:	f384 8811 	msr	BASEPRI, r4
	list->head = (sys_dnode_t *)list;
    a560:	f10d 0c08 	add.w	ip, sp, #8
	list->tail = (sys_dnode_t *)list;
    a564:	e9cd cc02 	strd	ip, ip, [sp, #8]
	__asm__ volatile(
    a568:	f04f 0320 	mov.w	r3, #32
    a56c:	f3ef 8511 	mrs	r5, BASEPRI
    a570:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    a574:	4c5f      	ldr	r4, [pc, #380]	; (a6f4 <_nano_sys_clock_tick_announce+0x1c0>)
    a576:	4621      	mov	r1, r4
    a578:	462a      	mov	r2, r5
    a57a:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a57e:	428b      	cmp	r3, r1
    a580:	d000      	beq.n	a584 <_nano_sys_clock_tick_announce+0x50>
	if (!next) {
    a582:	bb6b      	cbnz	r3, a5e0 <_nano_sys_clock_tick_announce+0xac>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a584:	f385 8811 	msr	BASEPRI, r5
	if (!_is_thread_time_slicing(_current)) {
    a588:	68a0      	ldr	r0, [r4, #8]
    a58a:	f7ff fea1 	bl	a2d0 <_is_thread_time_slicing>
    a58e:	b320      	cbz	r0, a5da <_nano_sys_clock_tick_announce+0xa6>
    a590:	4b59      	ldr	r3, [pc, #356]	; (a6f8 <_nano_sys_clock_tick_announce+0x1c4>)
    a592:	681a      	ldr	r2, [r3, #0]
    a594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a598:	fb82 8903 	smull	r8, r9, r2, r3
    a59c:	fb08 f107 	mul.w	r1, r8, r7
	_time_slice_elapsed += __ticks_to_ms(ticks);
    a5a0:	4a56      	ldr	r2, [pc, #344]	; (a6fc <_nano_sys_clock_tick_announce+0x1c8>)
    a5a2:	fb06 1309 	mla	r3, r6, r9, r1
    a5a6:	fba8 6706 	umull	r6, r7, r8, r6
    a5aa:	441f      	add	r7, r3
    a5ac:	0bf1      	lsrs	r1, r6, #15
    a5ae:	6813      	ldr	r3, [r2, #0]
    a5b0:	ea41 4147 	orr.w	r1, r1, r7, lsl #17
    a5b4:	440b      	add	r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
    a5b6:	4952      	ldr	r1, [pc, #328]	; (a700 <_nano_sys_clock_tick_announce+0x1cc>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    a5b8:	6013      	str	r3, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    a5ba:	6809      	ldr	r1, [r1, #0]
    a5bc:	428b      	cmp	r3, r1
    a5be:	db0c      	blt.n	a5da <_nano_sys_clock_tick_announce+0xa6>
		_time_slice_elapsed = 0;
    a5c0:	2300      	movs	r3, #0
    a5c2:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    a5c4:	f04f 0320 	mov.w	r3, #32
    a5c8:	f3ef 8511 	mrs	r5, BASEPRI
    a5cc:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
    a5d0:	68a0      	ldr	r0, [r4, #8]
    a5d2:	f7ff fe23 	bl	a21c <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a5d6:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    a5da:	b005      	add	sp, #20
    a5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
    a5e0:	4d48      	ldr	r5, [pc, #288]	; (a704 <_nano_sys_clock_tick_announce+0x1d0>)
    a5e2:	9500      	str	r5, [sp, #0]
    a5e4:	2101      	movs	r1, #1
    a5e6:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
    a5e8:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
    a5ec:	f06f 0801 	mvn.w	r8, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
    a5f0:	6919      	ldr	r1, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    a5f2:	4281      	cmp	r1, r0
			timeout->delta_ticks_from_prev -= ticks;
    a5f4:	bfaa      	itet	ge
    a5f6:	eba1 0900 	subge.w	r9, r1, r0
			timeout->delta_ticks_from_prev = 0;
    a5fa:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
    a5fe:	f8c3 9010 	strge.w	r9, [r3, #16]
		ticks -= tmp;
    a602:	1a40      	subs	r0, r0, r1
	return (node == list->tail) ? NULL : node->next;
    a604:	69a1      	ldr	r1, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
    a606:	691d      	ldr	r5, [r3, #16]
    a608:	4299      	cmp	r1, r3
    a60a:	bf14      	ite	ne
    a60c:	6819      	ldrne	r1, [r3, #0]
    a60e:	2100      	moveq	r1, #0
    a610:	b9d5      	cbnz	r5, a648 <_nano_sys_clock_tick_announce+0x114>
	node->prev->next = node->next;
    a612:	e9d3 5a00 	ldrd	r5, sl, [r3]
    a616:	f8ca 5000 	str.w	r5, [sl]
	node->next->prev = node->prev;
    a61a:	681d      	ldr	r5, [r3, #0]
    a61c:	f8c5 a004 	str.w	sl, [r5, #4]
	node->next = list->head;
    a620:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
    a622:	e9c3 5c00 	strd	r5, ip, [r3]
	list->head->prev = node;
    a626:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
    a628:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
    a62a:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
    a62c:	f8c3 8010 	str.w	r8, [r3, #16]
    a630:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    a634:	f04f 0320 	mov.w	r3, #32
    a638:	f3ef 8211 	mrs	r2, BASEPRI
    a63c:	f383 8811 	msr	BASEPRI, r3
	while (next) {
    a640:	460b      	mov	r3, r1
    a642:	2900      	cmp	r1, #0
    a644:	d1d4      	bne.n	a5f0 <_nano_sys_clock_tick_announce+0xbc>
    a646:	e001      	b.n	a64c <_nano_sys_clock_tick_announce+0x118>
		} else if (ticks <= 0) {
    a648:	2800      	cmp	r0, #0
    a64a:	dcf1      	bgt.n	a630 <_nano_sys_clock_tick_announce+0xfc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a64c:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    a650:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a652:	4560      	cmp	r0, ip
    a654:	d103      	bne.n	a65e <_nano_sys_clock_tick_announce+0x12a>
	_handling_timeouts = 0;
    a656:	9a00      	ldr	r2, [sp, #0]
    a658:	2300      	movs	r3, #0
    a65a:	6013      	str	r3, [r2, #0]
    a65c:	e794      	b.n	a588 <_nano_sys_clock_tick_announce+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    a65e:	2800      	cmp	r0, #0
    a660:	d0f9      	beq.n	a656 <_nano_sys_clock_tick_announce+0x122>
    a662:	f8d0 b000 	ldr.w	fp, [r0]
    a666:	9b03      	ldr	r3, [sp, #12]
	timeout->delta_ticks_from_prev = _INACTIVE;
    a668:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    a66c:	4298      	cmp	r0, r3
    a66e:	bf08      	it	eq
    a670:	f04f 0b00 	moveq.w	fp, #0
		thread->base.timeout.wait_q = NULL;
    a674:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
    a678:	e9d0 2300 	ldrd	r2, r3, [r0]
    a67c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a67e:	6802      	ldr	r2, [r0, #0]
    a680:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
    a682:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
    a684:	f04f 0220 	mov.w	r2, #32
    a688:	f3ef 8811 	mrs	r8, BASEPRI
    a68c:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    a690:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
    a694:	b1fb      	cbz	r3, a6d6 <_nano_sys_clock_tick_announce+0x1a2>
	if (timeout_obj->wait_q) {
    a696:	68c2      	ldr	r2, [r0, #12]
    a698:	b132      	cbz	r2, a6a8 <_nano_sys_clock_tick_announce+0x174>
		_unpend_thread_no_timeout(thread);
    a69a:	4618      	mov	r0, r3
    a69c:	9301      	str	r3, [sp, #4]
    a69e:	f7ff fccf 	bl	a040 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
    a6a2:	9b01      	ldr	r3, [sp, #4]
    a6a4:	f8c3 a020 	str.w	sl, [r3, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a6a8:	7a5a      	ldrb	r2, [r3, #9]
    a6aa:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    a6ae:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a6b2:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    a6b4:	d105      	bne.n	a6c2 <_nano_sys_clock_tick_announce+0x18e>
    a6b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a6b8:	3201      	adds	r2, #1
    a6ba:	d102      	bne.n	a6c2 <_nano_sys_clock_tick_announce+0x18e>
		_add_thread_to_ready_q(thread);
    a6bc:	4618      	mov	r0, r3
    a6be:	f7ff fd3f 	bl	a140 <_add_thread_to_ready_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a6c2:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    a6c6:	f1bb 0f00 	cmp.w	fp, #0
    a6ca:	d0c4      	beq.n	a656 <_nano_sys_clock_tick_announce+0x122>
	return (node == list->tail) ? NULL : node->next;
    a6cc:	9b03      	ldr	r3, [sp, #12]
    a6ce:	455b      	cmp	r3, fp
    a6d0:	d108      	bne.n	a6e4 <_nano_sys_clock_tick_announce+0x1b0>
    a6d2:	2300      	movs	r3, #0
    a6d4:	e008      	b.n	a6e8 <_nano_sys_clock_tick_announce+0x1b4>
    a6d6:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
    a6da:	6943      	ldr	r3, [r0, #20]
    a6dc:	2b00      	cmp	r3, #0
    a6de:	d0f2      	beq.n	a6c6 <_nano_sys_clock_tick_announce+0x192>
			timeout->func(timeout);
    a6e0:	4798      	blx	r3
    a6e2:	e7f0      	b.n	a6c6 <_nano_sys_clock_tick_announce+0x192>
    a6e4:	f8db 3000 	ldr.w	r3, [fp]
    a6e8:	4658      	mov	r0, fp
    a6ea:	469b      	mov	fp, r3
    a6ec:	e7c4      	b.n	a678 <_nano_sys_clock_tick_announce+0x144>
    a6ee:	bf00      	nop
    a6f0:	20001360 	.word	0x20001360
    a6f4:	2000132c 	.word	0x2000132c
    a6f8:	20002f30 	.word	0x20002f30
    a6fc:	2000135c 	.word	0x2000135c
    a700:	20001190 	.word	0x20001190
    a704:	20001358 	.word	0x20001358

0000a708 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    a708:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    a70a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a70e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a712:	4903      	ldr	r1, [pc, #12]	; (a720 <k_sys_work_q_init+0x18>)
    a714:	4803      	ldr	r0, [pc, #12]	; (a724 <k_sys_work_q_init+0x1c>)
    a716:	f000 f997 	bl	aa48 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    a71a:	2000      	movs	r0, #0
    a71c:	bd08      	pop	{r3, pc}
    a71e:	bf00      	nop
    a720:	200028e0 	.word	0x200028e0
    a724:	20001368 	.word	0x20001368

0000a728 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a728:	6903      	ldr	r3, [r0, #16]
    a72a:	1c5a      	adds	r2, r3, #1
    a72c:	d010      	beq.n	a750 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    a72e:	4909      	ldr	r1, [pc, #36]	; (a754 <_abort_timeout+0x2c>)
    a730:	6802      	ldr	r2, [r0, #0]
    a732:	6989      	ldr	r1, [r1, #24]
    a734:	4288      	cmp	r0, r1
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    a736:	bf1e      	ittt	ne
    a738:	6911      	ldrne	r1, [r2, #16]
    a73a:	185b      	addne	r3, r3, r1
    a73c:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
    a73e:	6843      	ldr	r3, [r0, #4]
    a740:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a742:	6802      	ldr	r2, [r0, #0]
    a744:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    a746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a74a:	6103      	str	r3, [r0, #16]
	return 0;
    a74c:	2000      	movs	r0, #0
    a74e:	4770      	bx	lr
		return _INACTIVE;
    a750:	4618      	mov	r0, r3
}
    a752:	4770      	bx	lr
    a754:	2000132c 	.word	0x2000132c

0000a758 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
    a758:	7a42      	ldrb	r2, [r0, #9]
    a75a:	06d2      	lsls	r2, r2, #27
    a75c:	d104      	bne.n	a768 <_ready_thread+0x10>
    a75e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    a760:	3301      	adds	r3, #1
    a762:	d101      	bne.n	a768 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
    a764:	f7ff bcec 	b.w	a140 <_add_thread_to_ready_q>
}
    a768:	4770      	bx	lr
	...

0000a76c <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a76e:	4604      	mov	r4, r0
	return (s32_t)ceiling_fraction(ms_ticks_per_sec, MSEC_PER_SEC);
    a770:	f240 36e7 	movw	r6, #999	; 0x3e7
    a774:	2064      	movs	r0, #100	; 0x64
    a776:	2700      	movs	r7, #0
    a778:	fbc0 6701 	smlal	r6, r7, r0, r1
    a77c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a780:	2300      	movs	r3, #0
    a782:	4630      	mov	r0, r6
    a784:	4639      	mov	r1, r7
    a786:	f7f5 fd45 	bl	214 <__aeabi_ldivmod>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    a78a:	1c46      	adds	r6, r0, #1
	__asm__ volatile(
    a78c:	f04f 0320 	mov.w	r3, #32
    a790:	f3ef 8511 	mrs	r5, BASEPRI
    a794:	f383 8811 	msr	BASEPRI, r3
	timeout->wait_q = (sys_dlist_t *)wait_q;
    a798:	2300      	movs	r3, #0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    a79a:	6266      	str	r6, [r4, #36]	; 0x24
	timeout->thread = thread;
    a79c:	61e4      	str	r4, [r4, #28]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    a79e:	6223      	str	r3, [r4, #32]
	if (!timeout_in_ticks) {
    a7a0:	b9d6      	cbnz	r6, a7d8 <schedule_new_thread.part.11+0x6c>
    a7a2:	f04f 0320 	mov.w	r3, #32
    a7a6:	f3ef 8711 	mrs	r7, BASEPRI
    a7aa:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
    a7ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a7b2:	6263      	str	r3, [r4, #36]	; 0x24
	if (timeout_obj->wait_q) {
    a7b4:	6a23      	ldr	r3, [r4, #32]
    a7b6:	b11b      	cbz	r3, a7c0 <schedule_new_thread.part.11+0x54>
		_unpend_thread_no_timeout(thread);
    a7b8:	4620      	mov	r0, r4
    a7ba:	f7ff fc41 	bl	a040 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
    a7be:	6226      	str	r6, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a7c0:	7a63      	ldrb	r3, [r4, #9]
    a7c2:	f023 0304 	bic.w	r3, r3, #4
    a7c6:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
    a7c8:	4620      	mov	r0, r4
    a7ca:	f7ff ffc5 	bl	a758 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a7ce:	f387 8811 	msr	BASEPRI, r7
    a7d2:	f385 8811 	msr	BASEPRI, r5
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    a7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head == list;
    a7d8:	4a11      	ldr	r2, [pc, #68]	; (a820 <schedule_new_thread.part.11+0xb4>)
    a7da:	e9d2 3c05 	ldrd	r3, ip, [r2, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a7de:	f102 0114 	add.w	r1, r2, #20
    a7e2:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    a7e4:	f104 0614 	add.w	r6, r4, #20
    a7e8:	460f      	mov	r7, r1
    a7ea:	d013      	beq.n	a814 <schedule_new_thread.part.11+0xa8>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    a7ec:	b193      	cbz	r3, a814 <schedule_new_thread.part.11+0xa8>
		if (*delta <= in_q->delta_ticks_from_prev) {
    a7ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
    a7f0:	6918      	ldr	r0, [r3, #16]
    a7f2:	4281      	cmp	r1, r0
    a7f4:	dc08      	bgt.n	a808 <schedule_new_thread.part.11+0x9c>
		node->prev = insert_point->prev;
    a7f6:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    a7f8:	1a41      	subs	r1, r0, r1
    a7fa:	6119      	str	r1, [r3, #16]
		node->next = insert_point;
    a7fc:	e9c4 3205 	strd	r3, r2, [r4, #20]
		insert_point->prev->next = node;
    a800:	685a      	ldr	r2, [r3, #4]
    a802:	6016      	str	r6, [r2, #0]
		insert_point->prev = node;
    a804:	605e      	str	r6, [r3, #4]
    a806:	e7e4      	b.n	a7d2 <schedule_new_thread.part.11+0x66>
		*delta -= in_q->delta_ticks_from_prev;
    a808:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    a80a:	459c      	cmp	ip, r3
    a80c:	6261      	str	r1, [r4, #36]	; 0x24
    a80e:	d001      	beq.n	a814 <schedule_new_thread.part.11+0xa8>
    a810:	681b      	ldr	r3, [r3, #0]
    a812:	e7eb      	b.n	a7ec <schedule_new_thread.part.11+0x80>
	node->prev = list->tail;
    a814:	e9c4 7c05 	strd	r7, ip, [r4, #20]
	list->tail->next = node;
    a818:	6993      	ldr	r3, [r2, #24]
    a81a:	601e      	str	r6, [r3, #0]
	list->tail = node;
    a81c:	6196      	str	r6, [r2, #24]
    a81e:	e7d8      	b.n	a7d2 <schedule_new_thread.part.11+0x66>
    a820:	2000132c 	.word	0x2000132c

0000a824 <k_is_in_isr>:
    a824:	f3ef 8005 	mrs	r0, IPSR
    a828:	280d      	cmp	r0, #13
    a82a:	d807      	bhi.n	a83c <k_is_in_isr+0x18>
    a82c:	b138      	cbz	r0, a83e <k_is_in_isr+0x1a>
    a82e:	4b04      	ldr	r3, [pc, #16]	; (a840 <k_is_in_isr+0x1c>)
    a830:	6858      	ldr	r0, [r3, #4]
    a832:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    a836:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    a83a:	4770      	bx	lr
    a83c:	2001      	movs	r0, #1
}
    a83e:	4770      	bx	lr
    a840:	e000ed00 	.word	0xe000ed00

0000a844 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    a844:	4b02      	ldr	r3, [pc, #8]	; (a850 <_is_thread_essential+0xc>)
    a846:	689b      	ldr	r3, [r3, #8]
    a848:	7a18      	ldrb	r0, [r3, #8]
}
    a84a:	f000 0001 	and.w	r0, r0, #1
    a84e:	4770      	bx	lr
    a850:	2000132c 	.word	0x2000132c

0000a854 <k_busy_wait>:
{
    a854:	4601      	mov	r1, r0
    a856:	b538      	push	{r3, r4, r5, lr}
		(u64_t)sys_clock_hw_cycles_per_sec /
    a858:	4a07      	ldr	r2, [pc, #28]	; (a878 <k_busy_wait+0x24>)
    a85a:	2300      	movs	r3, #0
    a85c:	03c0      	lsls	r0, r0, #15
    a85e:	0c49      	lsrs	r1, r1, #17
    a860:	f7f5 fd28 	bl	2b4 <__aeabi_uldivmod>
    a864:	4604      	mov	r4, r0
	u32_t start_cycles = k_cycle_get_32();
    a866:	f7f6 ff1f 	bl	16a8 <_timer_cycle_get_32>
    a86a:	4605      	mov	r5, r0
		u32_t current_cycles = k_cycle_get_32();
    a86c:	f7f6 ff1c 	bl	16a8 <_timer_cycle_get_32>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
    a870:	1b40      	subs	r0, r0, r5
    a872:	42a0      	cmp	r0, r4
    a874:	d3fa      	bcc.n	a86c <k_busy_wait+0x18>
}
    a876:	bd38      	pop	{r3, r4, r5, pc}
    a878:	000f4240 	.word	0x000f4240

0000a87c <_impl_k_thread_start>:
{
    a87c:	b510      	push	{r4, lr}
	__asm__ volatile(
    a87e:	f04f 0320 	mov.w	r3, #32
    a882:	f3ef 8411 	mrs	r4, BASEPRI
    a886:	f383 8811 	msr	BASEPRI, r3
	if (_has_thread_started(thread)) {
    a88a:	7a43      	ldrb	r3, [r0, #9]
    a88c:	0759      	lsls	r1, r3, #29
    a88e:	d402      	bmi.n	a896 <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a890:	f384 8811 	msr	BASEPRI, r4
}
    a894:	bd10      	pop	{r4, pc}
    a896:	f023 0304 	bic.w	r3, r3, #4
    a89a:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
    a89c:	f7ff ff5c 	bl	a758 <_ready_thread>
	_reschedule(key);
    a8a0:	4620      	mov	r0, r4
}
    a8a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
    a8a6:	f7ff bbf3 	b.w	a090 <_reschedule>
	...

0000a8ac <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
    a8ac:	b530      	push	{r4, r5, lr}
    a8ae:	b087      	sub	sp, #28
    a8b0:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a8b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    a8b4:	9504      	str	r5, [sp, #16]
    a8b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a8b8:	9503      	str	r5, [sp, #12]
    a8ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    a8bc:	9502      	str	r5, [sp, #8]
    a8be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    a8c0:	9501      	str	r5, [sp, #4]
    a8c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    a8c4:	9500      	str	r5, [sp, #0]
    a8c6:	f7f7 f911 	bl	1aec <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    a8ca:	4b04      	ldr	r3, [pc, #16]	; (a8dc <_setup_new_thread+0x30>)
    a8cc:	689b      	ldr	r3, [r3, #8]
    a8ce:	b913      	cbnz	r3, a8d6 <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    a8d0:	6663      	str	r3, [r4, #100]	; 0x64
}
    a8d2:	b007      	add	sp, #28
    a8d4:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
    a8d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a8d8:	e7fa      	b.n	a8d0 <_setup_new_thread+0x24>
    a8da:	bf00      	nop
    a8dc:	2000132c 	.word	0x2000132c

0000a8e0 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    a8e0:	b570      	push	{r4, r5, r6, lr}
    a8e2:	b086      	sub	sp, #24
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a8e4:	e9dd 650e 	ldrd	r6, r5, [sp, #56]	; 0x38
    a8e8:	9604      	str	r6, [sp, #16]
    a8ea:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    a8ec:	9603      	str	r6, [sp, #12]
    a8ee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    a8f0:	9602      	str	r6, [sp, #8]
    a8f2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    a8f4:	9601      	str	r6, [sp, #4]
    a8f6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    a8f8:	9600      	str	r6, [sp, #0]
{
    a8fa:	4604      	mov	r4, r0
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a8fc:	f7ff ffd6 	bl	a8ac <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
    a900:	1c6b      	adds	r3, r5, #1
    a902:	d003      	beq.n	a90c <_impl_k_thread_create+0x2c>
	if (delay == 0) {
    a904:	b92d      	cbnz	r5, a912 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    a906:	4620      	mov	r0, r4
    a908:	f7ff ffb8 	bl	a87c <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    a90c:	4620      	mov	r0, r4
    a90e:	b006      	add	sp, #24
    a910:	bd70      	pop	{r4, r5, r6, pc}
    a912:	4629      	mov	r1, r5
    a914:	4620      	mov	r0, r4
    a916:	f7ff ff29 	bl	a76c <schedule_new_thread.part.11>
    a91a:	e7f7      	b.n	a90c <_impl_k_thread_create+0x2c>

0000a91c <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    a91c:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
    a91e:	b510      	push	{r4, lr}
    a920:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    a922:	b103      	cbz	r3, a926 <_k_thread_single_abort+0xa>
		thread->fn_abort();
    a924:	4798      	blx	r3
	return !(_is_thread_prevented_from_running(thread) ||
    a926:	7a63      	ldrb	r3, [r4, #9]
    a928:	06da      	lsls	r2, r3, #27
    a92a:	d10a      	bne.n	a942 <_k_thread_single_abort+0x26>
    a92c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    a92e:	3201      	adds	r2, #1
    a930:	d107      	bne.n	a942 <_k_thread_single_abort+0x26>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
    a932:	4620      	mov	r0, r4
    a934:	f7ff fb5c 	bl	9ff0 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    a938:	7a63      	ldrb	r3, [r4, #9]
    a93a:	f043 0308 	orr.w	r3, r3, #8
    a93e:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
    a940:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    a942:	079b      	lsls	r3, r3, #30
    a944:	d502      	bpl.n	a94c <_k_thread_single_abort+0x30>
			_unpend_thread_no_timeout(thread);
    a946:	4620      	mov	r0, r4
    a948:	f7ff fb7a 	bl	a040 <_unpend_thread_no_timeout>
		if (_is_thread_timeout_active(thread)) {
    a94c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a94e:	3301      	adds	r3, #1
    a950:	d0f2      	beq.n	a938 <_k_thread_single_abort+0x1c>
	return _abort_timeout(&thread->base.timeout);
    a952:	f104 0014 	add.w	r0, r4, #20
    a956:	f7ff fee7 	bl	a728 <_abort_timeout>
    a95a:	e7ed      	b.n	a938 <_k_thread_single_abort+0x1c>

0000a95c <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    a95c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    a95e:	4f21      	ldr	r7, [pc, #132]	; (a9e4 <_init_static_threads+0x88>)
    a960:	4d21      	ldr	r5, [pc, #132]	; (a9e8 <_init_static_threads+0x8c>)
{
    a962:	b087      	sub	sp, #28
    a964:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    a966:	42bd      	cmp	r5, r7
    a968:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    a96c:	d314      	bcc.n	a998 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    a96e:	4b1f      	ldr	r3, [pc, #124]	; (a9ec <_init_static_threads+0x90>)
    a970:	689a      	ldr	r2, [r3, #8]
    a972:	7ad3      	ldrb	r3, [r2, #11]
    a974:	3b01      	subs	r3, #1
    a976:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
    a978:	f04f 0320 	mov.w	r3, #32
    a97c:	f3ef 8511 	mrs	r5, BASEPRI
    a980:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    a984:	4c18      	ldr	r4, [pc, #96]	; (a9e8 <_init_static_threads+0x8c>)
    a986:	42b4      	cmp	r4, r6
    a988:	d320      	bcc.n	a9cc <_init_static_threads+0x70>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a98a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    a98e:	b007      	add	sp, #28
    a990:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    a994:	f7ff bb9a 	b.w	a0cc <k_sched_unlock>
		_setup_new_thread(
    a998:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    a99c:	9304      	str	r3, [sp, #16]
    a99e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    a9a2:	9303      	str	r3, [sp, #12]
    a9a4:	f854 3c14 	ldr.w	r3, [r4, #-20]
    a9a8:	9302      	str	r3, [sp, #8]
    a9aa:	f854 3c18 	ldr.w	r3, [r4, #-24]
    a9ae:	9301      	str	r3, [sp, #4]
    a9b0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    a9b4:	9300      	str	r3, [sp, #0]
    a9b6:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    a9ba:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    a9be:	f7ff ff75 	bl	a8ac <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    a9c2:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    a9c6:	651d      	str	r5, [r3, #80]	; 0x50
    a9c8:	4625      	mov	r5, r4
    a9ca:	e7cc      	b.n	a966 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    a9cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    a9ce:	1c4b      	adds	r3, r1, #1
    a9d0:	d003      	beq.n	a9da <_init_static_threads+0x7e>
			schedule_new_thread(thread_data->init_thread,
    a9d2:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    a9d4:	b919      	cbnz	r1, a9de <_init_static_threads+0x82>
    a9d6:	f7ff ff51 	bl	a87c <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    a9da:	342c      	adds	r4, #44	; 0x2c
    a9dc:	e7d3      	b.n	a986 <_init_static_threads+0x2a>
    a9de:	f7ff fec5 	bl	a76c <schedule_new_thread.part.11>
    a9e2:	e7fa      	b.n	a9da <_init_static_threads+0x7e>
    a9e4:	20002fc4 	.word	0x20002fc4
    a9e8:	20002fc4 	.word	0x20002fc4
    a9ec:	2000132c 	.word	0x2000132c

0000a9f0 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    a9f0:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
    a9f2:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    a9f4:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
    a9f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
    a9fa:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    a9fc:	72c3      	strb	r3, [r0, #11]
	t->wait_q = NULL;
    a9fe:	e9c0 3208 	strd	r3, r2, [r0, #32]
	t->thread = NULL;
    aa02:	61c3      	str	r3, [r0, #28]
	t->func = func;
    aa04:	6283      	str	r3, [r0, #40]	; 0x28

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
    aa06:	4770      	bx	lr

0000aa08 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    aa08:	b510      	push	{r4, lr}
    aa0a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    aa0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    aa10:	4620      	mov	r0, r4
    aa12:	f7ff fa3f 	bl	9e94 <_impl_k_queue_get>
	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (!work) {
    aa16:	4603      	mov	r3, r0
    aa18:	2800      	cmp	r0, #0
    aa1a:	d0f7      	beq.n	aa0c <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    aa1c:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
    aa1e:	6842      	ldr	r2, [r0, #4]
    aa20:	f3bf 8f5b 	dmb	ish
    aa24:	e853 1f00 	ldrex	r1, [r3]
    aa28:	f021 0c01 	bic.w	ip, r1, #1
    aa2c:	e843 ce00 	strex	lr, ip, [r3]
    aa30:	f1be 0f00 	cmp.w	lr, #0
    aa34:	d1f6      	bne.n	aa24 <work_q_main+0x1c>
    aa36:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    aa3a:	07cb      	lsls	r3, r1, #31
    aa3c:	d500      	bpl.n	aa40 <work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    aa3e:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    aa40:	f7ff fc92 	bl	a368 <_impl_k_yield>
    aa44:	e7e2      	b.n	aa0c <work_q_main+0x4>
	...

0000aa48 <k_work_q_start>:
	}
}

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    aa48:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa4a:	b087      	sub	sp, #28
    aa4c:	4604      	mov	r4, r0
    aa4e:	461f      	mov	r7, r3
    aa50:	460d      	mov	r5, r1
    aa52:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    aa54:	f7ff f9f2 	bl	9e3c <_impl_k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    aa58:	2000      	movs	r0, #0
    aa5a:	e9cd 0004 	strd	r0, r0, [sp, #16]
    aa5e:	e9cd 0702 	strd	r0, r7, [sp, #8]
    aa62:	e9cd 4000 	strd	r4, r0, [sp]
    aa66:	4b04      	ldr	r3, [pc, #16]	; (aa78 <k_work_q_start+0x30>)
    aa68:	4632      	mov	r2, r6
    aa6a:	4629      	mov	r1, r5
    aa6c:	f104 0010 	add.w	r0, r4, #16
    aa70:	f7ff ff36 	bl	a8e0 <_impl_k_thread_create>
	k_queue_init(&work_q->queue);
	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
			work_q, 0, 0, prio, 0, 0);
	_k_object_init(work_q);
}
    aa74:	b007      	add	sp, #28
    aa76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa78:	0000aa09 	.word	0x0000aa09

0000aa7c <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
    aa7c:	6883      	ldr	r3, [r0, #8]
{
    aa7e:	b570      	push	{r4, r5, r6, lr}
    aa80:	4605      	mov	r5, r0
    aa82:	460e      	mov	r6, r1
	if (!event->poller) {
    aa84:	b1d3      	cbz	r3, aabc <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
    aa86:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
    aa88:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
    aa8a:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
    aa8c:	7a63      	ldrb	r3, [r4, #9]
    aa8e:	079a      	lsls	r2, r3, #30
    aa90:	d514      	bpl.n	aabc <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    aa92:	6a63      	ldr	r3, [r4, #36]	; 0x24
    aa94:	3302      	adds	r3, #2
    aa96:	d01a      	beq.n	aace <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
    aa98:	4620      	mov	r0, r4
    aa9a:	f7ff faee 	bl	a07a <_unpend_thread>
	_set_thread_return_value(thread,
    aa9e:	2e00      	cmp	r6, #0
    aaa0:	bf0c      	ite	eq
    aaa2:	f06f 0303 	mvneq.w	r3, #3
    aaa6:	2300      	movne	r3, #0
    aaa8:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
    aaaa:	7a63      	ldrb	r3, [r4, #9]
    aaac:	06db      	lsls	r3, r3, #27
    aaae:	d105      	bne.n	aabc <signal_poll_event+0x40>
    aab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    aab2:	3301      	adds	r3, #1
    aab4:	d102      	bne.n	aabc <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
    aab6:	4620      	mov	r0, r4
    aab8:	f7ff fb42 	bl	a140 <_add_thread_to_ready_q>
	event->state |= state;
    aabc:	7b6b      	ldrb	r3, [r5, #13]
    aabe:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
	event->poller = NULL;
    aac2:	2000      	movs	r0, #0
	event->state |= state;
    aac4:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
    aac8:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    aaca:	736b      	strb	r3, [r5, #13]
	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
}
    aacc:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    aace:	f06f 000a 	mvn.w	r0, #10
    aad2:	e7fb      	b.n	aacc <signal_poll_event+0x50>

0000aad4 <add_event>:
{
    aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aad6:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    aad8:	e9d0 2300 	ldrd	r2, r3, [r0]
    aadc:	4290      	cmp	r0, r2
    aade:	4604      	mov	r4, r0
    aae0:	460d      	mov	r5, r1
    aae2:	d106      	bne.n	aaf2 <add_event+0x1e>
	node->prev = list->tail;
    aae4:	6863      	ldr	r3, [r4, #4]
    aae6:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
    aae8:	6863      	ldr	r3, [r4, #4]
	node->next = list;
    aaea:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
    aaec:	601d      	str	r5, [r3, #0]
	list->tail = node;
    aaee:	6065      	str	r5, [r4, #4]
    aaf0:	e019      	b.n	ab26 <add_event+0x52>
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
    aaf2:	2b00      	cmp	r3, #0
    aaf4:	d0f6      	beq.n	aae4 <add_event+0x10>
    aaf6:	689b      	ldr	r3, [r3, #8]
    aaf8:	6839      	ldr	r1, [r7, #0]
    aafa:	6818      	ldr	r0, [r3, #0]
    aafc:	f7ff fa6e 	bl	9fdc <_is_t1_higher_prio_than_t2>
    ab00:	2800      	cmp	r0, #0
    ab02:	d1ef      	bne.n	aae4 <add_event+0x10>
	return list->head == list;
    ab04:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ab06:	42b4      	cmp	r4, r6
    ab08:	d0ec      	beq.n	aae4 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    ab0a:	2e00      	cmp	r6, #0
    ab0c:	d0ea      	beq.n	aae4 <add_event+0x10>
		if (_is_t1_higher_prio_than_t2(poller->thread,
    ab0e:	68b3      	ldr	r3, [r6, #8]
    ab10:	6838      	ldr	r0, [r7, #0]
    ab12:	6819      	ldr	r1, [r3, #0]
    ab14:	f7ff fa62 	bl	9fdc <_is_t1_higher_prio_than_t2>
    ab18:	b130      	cbz	r0, ab28 <add_event+0x54>
		node->prev = insert_point->prev;
    ab1a:	6873      	ldr	r3, [r6, #4]
		node->next = insert_point;
    ab1c:	e9c5 6300 	strd	r6, r3, [r5]
		insert_point->prev->next = node;
    ab20:	6873      	ldr	r3, [r6, #4]
    ab22:	601d      	str	r5, [r3, #0]
		insert_point->prev = node;
    ab24:	6075      	str	r5, [r6, #4]
}
    ab26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    ab28:	6863      	ldr	r3, [r4, #4]
    ab2a:	429e      	cmp	r6, r3
    ab2c:	d0da      	beq.n	aae4 <add_event+0x10>
    ab2e:	6836      	ldr	r6, [r6, #0]
    ab30:	e7eb      	b.n	ab0a <add_event+0x36>

0000ab32 <clear_event_registrations>:
{
    ab32:	2314      	movs	r3, #20
    ab34:	b530      	push	{r4, r5, lr}
    ab36:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
    ab3a:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
    ab3c:	2900      	cmp	r1, #0
    ab3e:	da00      	bge.n	ab42 <clear_event_registrations+0x10>
}
    ab40:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
    ab42:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
    ab44:	6084      	str	r4, [r0, #8]
	switch (event->type) {
    ab46:	f003 030f 	and.w	r3, r3, #15
    ab4a:	2b02      	cmp	r3, #2
    ab4c:	d003      	beq.n	ab56 <clear_event_registrations+0x24>
    ab4e:	2b04      	cmp	r3, #4
    ab50:	d001      	beq.n	ab56 <clear_event_registrations+0x24>
    ab52:	2b01      	cmp	r3, #1
    ab54:	d104      	bne.n	ab60 <clear_event_registrations+0x2e>
	node->prev->next = node->next;
    ab56:	e9d0 5300 	ldrd	r5, r3, [r0]
    ab5a:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
    ab5c:	6805      	ldr	r5, [r0, #0]
    ab5e:	606b      	str	r3, [r5, #4]
    ab60:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    ab64:	f04f 0320 	mov.w	r3, #32
    ab68:	f3ef 8211 	mrs	r2, BASEPRI
    ab6c:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
    ab70:	3901      	subs	r1, #1
    ab72:	3814      	subs	r0, #20
    ab74:	e7e2      	b.n	ab3c <clear_event_registrations+0xa>

0000ab76 <k_poll_event_init>:
{
    ab76:	b530      	push	{r4, r5, lr}
	event->type = type;
    ab78:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
    ab7a:	6103      	str	r3, [r0, #16]
	event->type = type;
    ab7c:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
    ab80:	7b81      	ldrb	r1, [r0, #14]
    ab82:	f362 0100 	bfi	r1, r2, #0, #1
    ab86:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
    ab88:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
    ab8a:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
    ab8c:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
    ab90:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
    ab94:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
    ab96:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
    ab98:	81c2      	strh	r2, [r0, #14]
}
    ab9a:	bd30      	pop	{r4, r5, pc}

0000ab9c <_impl_k_poll>:
{
    ab9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
    aba0:	4b3f      	ldr	r3, [pc, #252]	; (aca0 <_impl_k_poll+0x104>)
{
    aba2:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
    aba4:	689b      	ldr	r3, [r3, #8]
    aba6:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
    aba8:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
    abaa:	2301      	movs	r3, #1
{
    abac:	4607      	mov	r7, r0
    abae:	468a      	mov	sl, r1
    abb0:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
    abb2:	9301      	str	r3, [sp, #4]
    abb4:	4604      	mov	r4, r0
	int last_registered = -1, rc;
    abb6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
    abba:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
    abbc:	4556      	cmp	r6, sl
    abbe:	db10      	blt.n	abe2 <_impl_k_poll+0x46>
    abc0:	f04f 0320 	mov.w	r3, #32
    abc4:	f3ef 8611 	mrs	r6, BASEPRI
    abc8:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
    abcc:	9c01      	ldr	r4, [sp, #4]
    abce:	2c00      	cmp	r4, #0
    abd0:	d149      	bne.n	ac66 <_impl_k_poll+0xca>
	clear_event_registrations(events, last_registered, key);
    abd2:	4632      	mov	r2, r6
    abd4:	4629      	mov	r1, r5
    abd6:	4638      	mov	r0, r7
    abd8:	f7ff ffab 	bl	ab32 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    abdc:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
    abe0:	e04a      	b.n	ac78 <_impl_k_poll+0xdc>
	__asm__ volatile(
    abe2:	f04f 0320 	mov.w	r3, #32
    abe6:	f3ef 8b11 	mrs	fp, BASEPRI
    abea:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
    abee:	7b62      	ldrb	r2, [r4, #13]
    abf0:	f002 030f 	and.w	r3, r2, #15
    abf4:	2b02      	cmp	r3, #2
    abf6:	d003      	beq.n	ac00 <_impl_k_poll+0x64>
    abf8:	2b04      	cmp	r3, #4
    abfa:	d004      	beq.n	ac06 <_impl_k_poll+0x6a>
    abfc:	2b01      	cmp	r3, #1
    abfe:	d113      	bne.n	ac28 <_impl_k_poll+0x8c>
		if (event->signal->signaled) {
    ac00:	6921      	ldr	r1, [r4, #16]
    ac02:	6889      	ldr	r1, [r1, #8]
    ac04:	e001      	b.n	ac0a <_impl_k_poll+0x6e>
Z_GENLIST_IS_EMPTY(sflist);
    ac06:	6921      	ldr	r1, [r4, #16]
		if (!k_queue_is_empty(event->queue)) {
    ac08:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
    ac0a:	b169      	cbz	r1, ac28 <_impl_k_poll+0x8c>
	event->state |= state;
    ac0c:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
    ac10:	f363 1207 	bfi	r2, r3, #4, #4
    ac14:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
    ac16:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
    ac1a:	f8cd 9004 	str.w	r9, [sp, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ac1e:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
    ac22:	3601      	adds	r6, #1
    ac24:	3414      	adds	r4, #20
    ac26:	e7c9      	b.n	abbc <_impl_k_poll+0x20>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
    ac28:	f1b8 0f00 	cmp.w	r8, #0
    ac2c:	d0f7      	beq.n	ac1e <_impl_k_poll+0x82>
    ac2e:	9a01      	ldr	r2, [sp, #4]
    ac30:	2a00      	cmp	r2, #0
    ac32:	d0f4      	beq.n	ac1e <_impl_k_poll+0x82>
	switch (event->type) {
    ac34:	2b02      	cmp	r3, #2
    ac36:	d007      	beq.n	ac48 <_impl_k_poll+0xac>
    ac38:	2b04      	cmp	r3, #4
    ac3a:	d00f      	beq.n	ac5c <_impl_k_poll+0xc0>
    ac3c:	2b01      	cmp	r3, #1
    ac3e:	d109      	bne.n	ac54 <_impl_k_poll+0xb8>
		add_event(&event->signal->poll_events, event, poller);
    ac40:	466a      	mov	r2, sp
    ac42:	4621      	mov	r1, r4
    ac44:	6920      	ldr	r0, [r4, #16]
    ac46:	e003      	b.n	ac50 <_impl_k_poll+0xb4>
		add_event(&event->sem->poll_events, event, poller);
    ac48:	6920      	ldr	r0, [r4, #16]
    ac4a:	466a      	mov	r2, sp
    ac4c:	4621      	mov	r1, r4
    ac4e:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    ac50:	f7ff ff40 	bl	aad4 <add_event>
	event->poller = poller;
    ac54:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
    ac58:	3501      	adds	r5, #1
    ac5a:	e7e0      	b.n	ac1e <_impl_k_poll+0x82>
		add_event(&event->queue->poll_events, event, poller);
    ac5c:	6920      	ldr	r0, [r4, #16]
    ac5e:	466a      	mov	r2, sp
    ac60:	4621      	mov	r1, r4
    ac62:	3008      	adds	r0, #8
    ac64:	e7f4      	b.n	ac50 <_impl_k_poll+0xb4>
	poller.is_polling = 0;
    ac66:	2300      	movs	r3, #0
    ac68:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
    ac6a:	f1b8 0f00 	cmp.w	r8, #0
    ac6e:	d107      	bne.n	ac80 <_impl_k_poll+0xe4>
    ac70:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
    ac74:	f06f 040a 	mvn.w	r4, #10
}
    ac78:	4620      	mov	r0, r4
    ac7a:	b005      	add	sp, #20
    ac7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    ac80:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
    ac82:	4642      	mov	r2, r8
    ac84:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    ac86:	e9cd 1102 	strd	r1, r1, [sp, #8]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
    ac8a:	f7ff fb0f 	bl	a2ac <_pend_current_thread>
    ac8e:	4604      	mov	r4, r0
	__asm__ volatile(
    ac90:	f04f 0320 	mov.w	r3, #32
    ac94:	f3ef 8611 	mrs	r6, BASEPRI
    ac98:	f383 8811 	msr	BASEPRI, r3
    ac9c:	e799      	b.n	abd2 <_impl_k_poll+0x36>
    ac9e:	bf00      	nop
    aca0:	2000132c 	.word	0x2000132c

0000aca4 <_handle_obj_poll_events>:
	return list->head == list;
    aca4:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
    aca6:	4298      	cmp	r0, r3
    aca8:	d007      	beq.n	acba <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
    acaa:	e9d3 0200 	ldrd	r0, r2, [r3]
    acae:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
    acb0:	6818      	ldr	r0, [r3, #0]
    acb2:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
    acb4:	4618      	mov	r0, r3
    acb6:	f7ff bee1 	b.w	aa7c <signal_poll_event>
	}
}
    acba:	4770      	bx	lr

0000acbc <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    acbc:	4770      	bx	lr
